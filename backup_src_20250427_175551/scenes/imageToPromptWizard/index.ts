import { Scenes, Telegraf, Markup } from 'telegraf'
import type { MyContext } from '@/interfaces'

import { generateImageToPrompt } from '@/services'
import { isRussian } from '@/helpers'

// import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { getBotToken } from '@/handlers'
import { ModeEnum } from '@/interfaces/modes'
import type { getBotNameByToken } from '@/core/bot'
import { createHelpButton } from '@/menu/buttons'
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è HUGGINGFACE_TOKEN
process.env.HUGGINGFACE_TOKEN = process.env.HUGGINGFACE_TOKEN || 'dummy-token'

export const imageToPromptWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ImageToPrompt,
  async ctx => {
    console.log('CASE 0: image_to_prompt')
    const isRu = isRussian(ctx)
    console.log('CASE: imageToPromptCommand')

    await ctx.reply(
      isRu
        ? 'üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è –Ω–µ–µ –ø—Ä–æ–º–ø—Ç.'
        : 'üëã Hello! Upload an image, and I will create a prompt for it.',
      Markup.inlineKeyboard([[createHelpButton()]])
    )
    ctx.scene.session.state = { step: 0 }
    return ctx.wizard.next()
  },
  async ctx => {
    console.log('CASE 1: image_to_prompt')
    const isRu = isRussian(ctx)

    if (!ctx.message) {
      await ctx.reply(
        isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'Please send an image'
      )
      return
    }

    if ('photo' in ctx.message) {
      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
      const photo = ctx.message.photo
      const fileId = photo[photo.length - 1].file_id
      const file = await ctx.telegram.getFileLink(fileId)
      const imageUrl = file.href

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await ctx.reply(
        isRu
          ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'
          : 'Generating prompt for your image...'
      )

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
        const botToken = getBotToken(ctx)
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        const { bot_name: botName } = getBotNameByToken(botToken)

        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
        await generateImageToPrompt(
          imageUrl,
          String(ctx.from?.id),
          ctx,
          botName
        )

        await ctx.reply(
          isRu
            ? '‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥–æ—Ç–æ–≤! (–ó–∞–≥–ª—É—à–∫–∞)'
            : '‚úÖ Prompt for your image is ready! (Placeholder)',
          Markup.inlineKeyboard([[createHelpButton()]])
        )
        return ctx.scene.leave()
      } catch (error) {
        console.error('Error in imageToPromptWizard:', error)
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            : 'An error occurred while processing the image. Please try again later.'
        )
        return ctx.scene.leave()
      }
    } else {
      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
      await ctx.reply(
        isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'Please send an image'
      )
      return
    }
  }
)

export default imageToPromptWizard
