import { Payment } from '@/interfaces/payments.interface'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { createBotByName, BOT_NAMES } from '../bot'
import type { BotName } from '@/interfaces'

export const sendPaymentInfo = async (invId: string): Promise<boolean> => {
  try {
    const { data: paymentData, error: paymentError } = await supabase
      // .from('payments') // –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞
      .from('payments_v2') // –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
      .select('*')
      .eq('inv_id', invId)
      .single()

    if (paymentError || !paymentData) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', {
        description: 'Error fetching payment info by invId',
        invId,
        error: paymentError?.message,
      })
      return false
    }

    logger.info('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—É—á–µ–Ω–∞:', {
      description: 'Payment info fetched successfully',
      invId,
      paymentData,
    })

    const { bot_name, amount, telegram_id, currency } = paymentData
    const botData = await createBotByName(bot_name as BotName)

    if (!botData) {
      logger.error(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        {
          description: 'Failed to create bot instance for notification',
          bot_name,
          invId,
        }
      )
      return false // –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–¥–µ—Å—å?
    }

    const { bot, groupId } = botData
    const username = paymentData.username || 'unknown_user' // –î–æ–±–∞–≤–∏–º username –∏–∑ paymentData –µ—Å–ª–∏ –µ—Å—Ç—å
    const stars = paymentData.stars || 0 // –î–æ–±–∞–≤–∏–º stars

    const message = `üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username} (ID: ${telegram_id})
–°—É–º–º–∞: ${amount} ${currency}
–ó–≤–µ–∑–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${stars}
InvId: ${invId}
–ë–æ—Ç: ${bot_name}`

    if (!groupId) {
      logger.error('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', {
        description: 'Group not found',
        invId,
      })
      return false
    }

    await bot.telegram.sendMessage(groupId, message)
    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É:', {
      description: 'Payment notification sent to group',
      groupId,
      invId,
    })

    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ sendPaymentInfo:', {
      description: 'Unexpected error in sendPaymentInfo',
      invId,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })
    return false
  }
}
