import fastify from 'fastify';
import type { FastifyInstance, FastifyRequest } from 'fastify';
import fastifyExpress from '@fastify/express';
import fastifyCors from '@fastify/cors';
import fastifyHelmet from '@fastify/helmet';
import fastifyCompress from '@fastify/compress';
import fastifyRateLimit from '@fastify/rate-limit';
import { logger } from '@/utils/logger';
import { SECRET_API_KEY } from '@/config';

const server: FastifyInstance = fastify({
  logger: true,
  trustProxy: true
});

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fastify —Å–µ—Ä–≤–µ—Ä–∞
 */
async function setupServer() {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Express —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    await server.register(fastifyExpress);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CORS
    await server.register(fastifyCors, {
      origin: ['*'],
      methods: ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Api-Key'],
    });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Helmet –¥–ª—è –∑–∞—â–∏—Ç—ã
    await server.register(fastifyHelmet, {
      contentSecurityPolicy: false,
    });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    await server.register(fastifyCompress);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limiting)
    await server.register(fastifyRateLimit, {
      max: 100,
      timeWindow: '1 minute',
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    server.decorateRequest('user', null);

    // –ë–∞–∑–æ–≤—ã–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
    server.addHook('preHandler', async (request: FastifyRequest, reply) => {
      const apiKey = request.headers['x-api-key'];
      const path = request.url;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
      if (path === '/health' || path.startsWith('/api/webhook')) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
      if (!apiKey || apiKey !== SECRET_API_KEY) {
        reply.code(401).send({ error: 'Unauthorized' });
        return reply;
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
    registerRoutes();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    server.setErrorHandler((error, request, reply) => {
      logger.error('Server error:', error);
      reply.status(500).send({ error: 'Internal Server Error' });
    });

    return server;
  } catch (error) {
    logger.error('Failed to setup Fastify server:', error);
    throw error;
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
 */
function registerRoutes() {
  // –ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  server.get('/health', async (request, reply) => {
    return { status: 'ok', timestamp: new Date().toISOString() };
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Replicate
  server.post('/api/replicate-webhook', async (request, reply) => {
    const payload = request.body;
    logger.info('Received webhook from Replicate:', payload);
    // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Replicate
    return { status: 'received' };
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≤–∏–¥–µ–æ
  server.post('/api/generate/image-to-video', async (request, reply) => {
    const { modelIdentifier, imageUrl } = request.body as { modelIdentifier: string, imageUrl: string };
    
    if (!modelIdentifier || !imageUrl) {
      return reply.code(400).send({ error: 'Missing required parameters' });
    }

    try {
      // TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Replicate
      logger.info('Image to video generation request:', { modelIdentifier, imageUrl });
      
      return { 
        status: 'processing',
        message: 'Your request is being processed',
        requestId: Date.now().toString()
      };
    } catch (error) {
      logger.error('Error generating video from image:', error);
      return reply.code(500).send({ error: 'Failed to process image to video request' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Robokassa
  server.post('/api/robokassa/result', async (request, reply) => {
    // TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
    logger.info('Received payment result from Robokassa');
    return { status: 'ok' };
  });

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  server.get('/api/user/:telegramId/balance', async (request, reply) => {
    const { telegramId } = request.params as { telegramId: string };
    // TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    return { telegramId, balance: 100 };
  });

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  server.post('/api/user/:telegramId/balance', async (request, reply) => {
    const { telegramId } = request.params as { telegramId: string };
    const { amount } = request.body as { amount: number };
    // TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    return { telegramId, updated: true, amount };
  });

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  server.post('/api/user/:telegramId/subscription', async (request, reply) => {
    const { telegramId } = request.params as { telegramId: string };
    const { subscriptionType } = request.body as { subscriptionType: string };
    // TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    return { telegramId, updated: true, subscriptionType };
  });
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Fastify
 */
export async function startFastifyServer(port: number = 3000) {
  try {
    await setupServer();
    await server.listen({ port, host: '0.0.0.0' });
    logger.info(`üöÄ Fastify server running on port ${port}`);
  } catch (error) {
    logger.error('Error starting Fastify server:', error);
    process.exit(1);
  }
}

export default server; 