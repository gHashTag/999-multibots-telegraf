/**
 * üîç –û–¢–õ–ê–î–ö–ê –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users
 */

import { supabase } from './src/core/supabase'

async function debugTopUsers() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n')

  // –¢–µ—Å—Ç–æ–≤—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
  const testUserIds = [
    '435572800',
    '793916476',
    '89962285',
    '324420051',
    '425824587',
    '386875143',
    '306058143',
  ]

  console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', testUserIds.join(', '))

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –í –¢–ê–ë–õ–ò–¶–ï USERS:')
  const { data: usersData, error: usersError } = await supabase
    .from('users')
    .select('telegram_id, username, first_name, last_name, bot_name')
    .in('telegram_id', testUserIds)

  if (usersError) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', usersError)
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${usersData?.length || 0}`)
    usersData?.forEach(user => {
      console.log(`   üë§ ID: ${user.telegram_id}`)
      console.log(`   üì± Username: ${user.username || '–ù–ï–¢'}`)
      console.log(
        `   üë® –ò–º—è: ${user.first_name || '–ù–ï–¢'} ${user.last_name || ''}`
      )
      console.log(`   ü§ñ –ë–æ—Ç: ${user.bot_name}`)
      console.log()
    })
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ payments_v2 –¥–ª—è Gaia_Kamskaia_bot
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –í –¢–ê–ë–õ–ò–¶–ï PAYMENTS_V2 (Gaia_Kamskaia_bot):')
  const { data: paymentsData, error: paymentsError } = await supabase
    .from('payments_v2')
    .select('telegram_id, type, stars, bot_name')
    .eq('bot_name', 'Gaia_Kamskaia_bot')
    .eq('status', 'COMPLETED')
    .eq('type', 'MONEY_OUTCOME')
    .in('telegram_id', testUserIds)
    .limit(20)

  if (paymentsError) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', paymentsError)
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${paymentsData?.length || 0}`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userSpending = new Map<string, number>()
    paymentsData?.forEach(payment => {
      const current = userSpending.get(payment.telegram_id) || 0
      userSpending.set(payment.telegram_id, current + (payment.stars || 0))
    })

    Array.from(userSpending.entries())
      .sort((a, b) => b[1] - a[1])
      .forEach(([userId, spending]) => {
        console.log(`   üí∞ ID: ${userId} - –ø–æ—Ç—Ä–∞—Ç–∏–ª ${spending}‚≠ê`)
      })
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–∞—Ö
  console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –í –î–†–£–ì–ò–• –ë–û–¢–ê–•:')
  const { data: allUsersData, error: allUsersError } = await supabase
    .from('users')
    .select('telegram_id, username, first_name, last_name, bot_name')
    .in('telegram_id', testUserIds)

  if (allUsersError) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', allUsersError)
  } else {
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö: ${allUsersData?.length || 0}`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–æ—Ç–∞–º
    const botUsers = new Map<string, any[]>()
    allUsersData?.forEach(user => {
      const botName = user.bot_name || 'unknown'
      if (!botUsers.has(botName)) {
        botUsers.set(botName, [])
      }
      botUsers.get(botName)?.push(user)
    })

    botUsers.forEach((users, botName) => {
      console.log(`\n   ü§ñ –ë–æ—Ç: ${botName} (${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`)
      users.forEach(user => {
        console.log(
          `      üë§ ${user.telegram_id}: ${user.first_name || '–ù–ï–¢'} (@${user.username || '–ù–ï–¢'})`
        )
      })
    })
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–µ users
  console.log('\n4Ô∏è‚É£ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê–ë–õ–ò–¶–´ USERS:')
  const { data: statsData, error: statsError } = await supabase
    .from('users')
    .select('bot_name, telegram_id')
    .limit(1000)

  if (statsError) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', statsError)
  } else {
    const botStats = new Map<string, number>()
    statsData?.forEach(user => {
      const botName = user.bot_name || 'unknown'
      botStats.set(botName, (botStats.get(botName) || 0) + 1)
    })

    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${statsData?.length || 0}`)
    console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–æ—Ç–∞–º:')
    Array.from(botStats.entries())
      .sort((a, b) => b[1] - a[1])
      .forEach(([botName, count]) => {
        console.log(`   ü§ñ ${botName}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
      })
  }

  console.log('\nüéØ –í–´–í–û–î–´:')
  console.log(
    '1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users - –æ–Ω–∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å'
  )
  console.log('2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–∞—Ö - –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º')
  console.log(
    '3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–æ –Ω–µ—Ç –≤ users - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π'
  )
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugTopUsers().catch(console.error)
