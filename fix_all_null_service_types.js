const { supabase } = require('./dist/core/supabase/index.js')

async function fixAllNullServiceTypes() {
  console.log('üîç –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ service_type –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å null service_type
  const { data: transactions, error } = await supabase
    .from('payments_v2')
    .select('id, description, type, service_type, telegram_id')
    .eq('status', 'COMPLETED')
    .is('service_type', null)
    .order('id', { ascending: true })

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
    return
  }

  if (!transactions || transactions.length === 0) {
    console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å null service_type –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return
  }

  console.log(
    `üìä –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å null service_type`
  )

  let updatedCount = 0
  let batchSize = 10
  let currentBatch = 0

  for (let i = 0; i < transactions.length; i += batchSize) {
    const batch = transactions.slice(i, i + batchSize)
    currentBatch++

    console.log(
      `\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${currentBatch}/${Math.ceil(transactions.length / batchSize)} (${batch.length} –∑–∞–ø–∏—Å–µ–π)`
    )

    for (const transaction of batch) {
      const desc = (transaction.description || '').toLowerCase()
      let newServiceType = null

      if (transaction.type === 'MONEY_INCOME') {
        // –î–æ—Ö–æ–¥—ã
        if (
          desc.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞') ||
          desc.includes('‚≠êÔ∏è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        ) {
          newServiceType = 'top_up_balance'
        } else if (desc.includes('payment via telegram')) {
          newServiceType = 'top_up_balance'
        } else if (desc.includes('payment via robokassa')) {
          newServiceType = 'top_up_balance'
        } else if (desc.includes('–≤–æ–∑–≤—Ä–∞—Ç') || desc.includes('refund')) {
          newServiceType = 'refund_operation'
        } else if (
          desc.includes('–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏') ||
          desc.includes('subscription')
        ) {
          newServiceType = 'subscribe'
        } else if (
          desc.includes('system grant') ||
          desc.includes('system correction')
        ) {
          newServiceType = 'admin_topup'
        } else if (
          desc.includes('—Å–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ') ||
          desc.includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        ) {
          newServiceType = 'admin_topup'
        } else if (desc.includes('–º–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞')) {
          newServiceType = 'migration'
        } else if (desc.includes('—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')) {
          newServiceType = 'admin_topup'
        } else if (desc.includes('promo bonus') || desc.includes('üéÅ')) {
          newServiceType = 'admin_topup'
        } else {
          newServiceType = 'top_up_balance' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
        }
      } else if (transaction.type === 'MONEY_OUTCOME') {
        // –†–∞—Å—Ö–æ–¥—ã
        if (desc.includes('video generation')) {
          newServiceType = 'text_to_video'
        } else if (
          desc.includes('neuro photo') ||
          desc.includes('image generation')
        ) {
          newServiceType = 'neuro_photo'
        } else if (desc.includes('payment operation')) {
          newServiceType = 'payment_operation'
        } else if (
          desc.includes('image to prompt') ||
          desc.includes('–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        ) {
          newServiceType = 'image_to_prompt'
        } else if (
          desc.includes('lip sync') ||
          desc.includes('—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±')
        ) {
          newServiceType = 'lip_sync'
        } else if (
          desc.includes('digital avatar') ||
          desc.includes('—Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä')
        ) {
          newServiceType = 'digital_avatar_body'
        } else {
          newServiceType = 'unknown_service' // –î–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        }
      }

      if (newServiceType) {
        const { error: updateError } = await supabase
          .from('payments_v2')
          .update({ service_type: newServiceType })
          .eq('id', transaction.id)

        if (updateError) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID ${transaction.id}:`,
            updateError
          )
        } else {
          updatedCount++
          if (updatedCount % 50 === 0) {
            console.log(
              `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}/${transactions.length} –∑–∞–ø–∏—Å–µ–π...`
            )
          }
        }
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100))
  }

  console.log(`\nüéâ –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)
  console.log(
    `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –∏–∑ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
  )

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { data: remainingNull, error: checkError } = await supabase
    .from('payments_v2')
    .select('id')
    .eq('status', 'COMPLETED')
    .is('service_type', null)

  if (!checkError && remainingNull) {
    console.log(
      `üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π —Å null service_type: ${remainingNull.length}`
    )
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixAllNullServiceTypes()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
