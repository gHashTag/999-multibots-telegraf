#!/bin/bash

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
LOGS_DIR="/root/logs"
RESTART_LOG="$LOGS_DIR/container_restarts.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if [ ! -d "$LOGS_DIR" ]; then
  mkdir -p "$LOGS_DIR"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
  local message="$1"
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  echo "[$timestamp] $message" >> "$RESTART_LOG"
  echo "[$timestamp] $message"
}

log_message "–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
  log_message "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã—Ö–æ–¥."
  exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å docker-compose
cd /opt/app/999-multibots-telegraf

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ docker-compose.yml
EXPECTED_CONTAINERS=$(docker-compose config --services)

if [ -z "$EXPECTED_CONTAINERS" ]; then
  log_message "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ docker-compose.yml. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
RESTART_NEEDED=false

for service in $EXPECTED_CONTAINERS; do
  # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  CONTAINER_ID=$(docker-compose ps -q $service)
  
  if [ -z "$CONTAINER_ID" ]; then
    log_message "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$service' –Ω–µ –∑–∞–ø—É—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫."
    RESTART_NEEDED=true
    continue
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID 2>/dev/null)
  
  if [ "$STATUS" != "running" ]; then
    log_message "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$service' –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '$STATUS'. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫."
    RESTART_NEEDED=true
  else
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º health status, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    HEALTH=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}HEALTH_CHECK_NOT_AVAILABLE{{end}}' $CONTAINER_ID 2>/dev/null)
    
    if [ "$HEALTH" != "HEALTH_CHECK_NOT_AVAILABLE" ] && [ "$HEALTH" != "healthy" ]; then
      log_message "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$service' –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è '$HEALTH'. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫."
      RESTART_NEEDED=true
    fi
  fi
done

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
if [ "$RESTART_NEEDED" = true ]; then
  log_message "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
  docker-compose logs > "$LOGS_DIR/containers_logs_before_restart_$(date +"%Y-%m-%d_%H-%M-%S").txt"
  
  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  docker-compose down
  sleep 5
  docker-compose up -d
  
  log_message "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω"
else
  log_message "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–∏–∑–æ—à–µ–ª
if [ "$RESTART_NEEDED" = true ]; then
  sleep 15 # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
  
  ALL_RUNNING=true
  
  for service in $EXPECTED_CONTAINERS; do
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    CONTAINER_ID=$(docker-compose ps -q $service)
    
    if [ -z "$CONTAINER_ID" ]; then
      log_message "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$service' –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
      ALL_RUNNING=false
      continue
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID 2>/dev/null)
    
    if [ "$STATUS" != "running" ]; then
      log_message "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$service' –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '$STATUS' –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
      ALL_RUNNING=false
    fi
  done
  
  if [ "$ALL_RUNNING" = true ]; then
    log_message "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
  else
    log_message "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
  fi
fi

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
LOGS_COUNT=$(ls -t "$LOGS_DIR" | grep "containers_logs_before_restart_" | wc -l)
if [ "$LOGS_COUNT" -gt 20 ]; then
  FILES_TO_DELETE=$(($LOGS_COUNT - 20))
  ls -t "$LOGS_DIR" | grep "containers_logs_before_restart_" | tail -$FILES_TO_DELETE | xargs -I {} rm "$LOGS_DIR/{}" 2>/dev/null
  log_message "üßπ –£–¥–∞–ª–µ–Ω–æ $FILES_TO_DELETE —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"
fi

log_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
echo "----------------------------------------" 