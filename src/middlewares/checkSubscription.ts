import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

export async function checkSubscription(
  ctx: MyContext,
  telegram_channel_id: string
): Promise<boolean> {
  try {
    if (!ctx.from?.id) {
      console.error('User ID is undefined')
      throw new Error('User ID is undefined')
    }
    const chatMember = await ctx.telegram.getChatMember(
      telegram_channel_id,
      ctx.from?.id
    )
    console.log('chatMember', chatMember)

    return ['member', 'administrator', 'creator'].includes(chatMember.status)
  } catch (error) {
    console.error('Error checking subscription:', error)
    throw error
  }
}

/**
 * –ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø–ª–∞—á–µ–Ω
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @param telegram_channel_id ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –∫–∏–∫–∞
 */
export async function kickUnpaidUser(
  ctx: MyContext,
  telegram_channel_id: string,
  reason: string = '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'
): Promise<boolean> {
  try {
    if (!ctx.from?.id) {
      logger.error('Cannot kick user: User ID is undefined')
      return false
    }

    const userId = ctx.from.id
    const username = ctx.from.username || ctx.from.first_name || 'Unknown'

    logger.info('üö´ Attempting to kick unpaid user from group', {
      userId,
      username,
      telegram_channel_id,
      reason,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
    try {
      const chatMember = await ctx.telegram.getChatMember(
        telegram_channel_id,
        userId
      )

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω, –Ω–µ –Ω—É–∂–Ω–æ –∫–∏–∫–∞—Ç—å
      if (['left', 'kicked'].includes(chatMember.status)) {
        logger.info('User is not in the group or already kicked', {
          userId,
          status: chatMember.status,
        })
        return true
      }

      // –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
      if (['administrator', 'creator'].includes(chatMember.status)) {
        logger.warn('Cannot kick admin or creator', {
          userId,
          status: chatMember.status,
        })
        return false
      }
    } catch (memberCheckError) {
      logger.warn('Error checking member status before kick', {
        error: memberCheckError,
        userId,
      })
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∫–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
    }

    // –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.banChatMember(
      telegram_channel_id,
      userId,
      Math.floor(Date.now() / 1000) + 60, // –ë–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É, –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è
      { revoke_messages: false } // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    )

    logger.info('‚úÖ Successfully kicked unpaid user from group', {
      userId,
      username,
      telegram_channel_id,
      reason,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const isRu = ctx.from?.language_code === 'ru'
      const kickMessage = isRu
        ? `üö´ –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã @${telegram_channel_id}

üìã –ü—Ä–∏—á–∏–Ω–∞: ${reason}

üí° –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É:
üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ

üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ`
        : `üö´ You have been removed from group @${telegram_channel_id}

üìã Reason: ${reason}

üí° To return to the group:
üí≥ Get a subscription in the bot

üîÑ After payment you can rejoin the group`

      await ctx.telegram.sendMessage(userId, kickMessage)
    } catch (notifyError) {
      logger.warn('Could not notify user about kick', {
        error: notifyError,
        userId,
      })
    }

    return true
  } catch (error) {
    logger.error('‚ùå Error kicking unpaid user from group', {
      error: error instanceof Error ? error.message : String(error),
      userId: ctx.from?.id,
      telegram_channel_id,
      reason,
    })
    return false
  }
}
