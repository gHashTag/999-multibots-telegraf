import { describe, it, expect, beforeAll } from 'vitest'
import { supabase } from '@/core/supabase/client'
import { getBotStatsWithCost } from '@/core/supabase/getUserBalanceStats'

describe('Stats Consistency Tests for MetaMuse_Manifest_bot', () => {
  const BOT_NAME = 'MetaMuse_Manifest_bot'
  let rawDatabaseData: any = {}

  beforeAll(async () => {
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    // 1. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('telegram_id, username, first_name, created_at')
      .eq('bot_name', BOT_NAME)
      .order('created_at', { ascending: false })

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
      throw usersError
    }

    // 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ—Ç–∞
    const { data: allPayments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', BOT_NAME)
      .order('created_at', { ascending: false })

    if (paymentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError)
      throw paymentsError
    }

    rawDatabaseData = {
      allUsers: allUsers || [],
      allPayments: allPayments || [],
    }

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–∞–∑—ã:`)
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${rawDatabaseData.allUsers.length}`)
    console.log(`   üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${rawDatabaseData.allPayments.length}`)
  })

  describe('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', () => {
      expect(rawDatabaseData.allUsers).toBeDefined()
      expect(rawDatabaseData.allUsers.length).toBeGreaterThan(0)
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rawDatabaseData.allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
    })

    it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', () => {
      expect(rawDatabaseData.allPayments).toBeDefined()
      expect(rawDatabaseData.allPayments.length).toBeGreaterThan(0)
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rawDatabaseData.allPayments.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', () => {
      const now = new Date()
      const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
      const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000)

      const newUsersMonth = rawDatabaseData.allUsers.filter(
        (user: any) => new Date(user.created_at) >= oneMonthAgo
      )
      const newUsersWeek = rawDatabaseData.allUsers.filter(
        (user: any) => new Date(user.created_at) >= oneWeekAgo
      )
      const newUsersDay = rawDatabaseData.allUsers.filter(
        (user: any) => new Date(user.created_at) >= oneDayAgo
      )

      console.log(`üìÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (—Ä—É—á–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç):`)
      console.log(`   üìÜ –ó–∞ –º–µ—Å—è—Ü: ${newUsersMonth.length}`)
      console.log(`   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: ${newUsersWeek.length}`)
      console.log(`   üïê –ó–∞ –¥–µ–Ω—å: ${newUsersDay.length}`)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log(`üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`)
      rawDatabaseData.allUsers
        .slice(0, 5)
        .forEach((user: any, index: number) => {
          const userDate = new Date(user.created_at)
          const daysAgo =
            (now.getTime() - userDate.getTime()) / (24 * 60 * 60 * 1000)
          console.log(
            `   ${index + 1}. ${user.username || user.first_name || user.telegram_id}`
          )
          console.log(`      –î–∞—Ç–∞: ${user.created_at}`)
          console.log(`      –î–Ω–µ–π –Ω–∞–∑–∞–¥: ${daysAgo.toFixed(1)}`)
        })

      expect(newUsersMonth.length).toBeGreaterThanOrEqual(0)
    })
  })

  describe('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ getBotStatsWithCost', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü', async () => {
      console.log('üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü...')

      const stats = await getBotStatsWithCost(BOT_NAME, 'month')

      expect(stats).toBeDefined()

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã getBotStatsWithCost (–º–µ—Å—è—Ü):`)
      console.log(`   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`)
      console.log(`   ‚ú® –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.new_users_month}`)
      console.log(`   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.active_users_month}`)
      console.log(`   üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.total_income} ‚≠ê`)
      console.log(`   üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${stats.total_outcome} ‚≠ê`)
      console.log(`   üî¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.total_transactions}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      expect(stats.total_users).toBe(rawDatabaseData.allUsers.length)

      // –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      expect(stats.new_users_month).toBeLessThanOrEqual(stats.total_users)

      // –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      expect(stats.active_users_month).toBeLessThanOrEqual(stats.total_users)
    })

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è', async () => {
      console.log('üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è...')

      const stats = await getBotStatsWithCost(BOT_NAME, 'all')

      expect(stats).toBeDefined()

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã getBotStatsWithCost (–≤—Å–µ –≤—Ä–µ–º—è):`)
      console.log(`   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`)
      console.log(`   ‚ú® –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.new_users_month}`)
      console.log(`   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.active_users_month}`)
      console.log(`   üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.total_income} ‚≠ê`)
      console.log(`   üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${stats.total_outcome} ‚≠ê`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      expect(stats.total_users).toBe(rawDatabaseData.allUsers.length)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã', async () => {
      console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤...')

      const stats = await getBotStatsWithCost(BOT_NAME, 'all')

      // –°—á–∏—Ç–∞–µ–º –≤—Ä—É—á–Ω—É—é –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const completedPayments = rawDatabaseData.allPayments.filter(
        (p: any) => p.status === 'COMPLETED'
      )
      const totalIncomeManual = completedPayments
        .filter((p: any) => p.type === 'MONEY_INCOME')
        .reduce((sum: number, p: any) => sum + (p.stars || 0), 0)
      const totalExpensesManual = completedPayments
        .filter((p: any) => p.type === 'MONEY_OUTCOME')
        .reduce((sum: number, p: any) => sum + (p.stars || 0), 0)

      console.log(`üí∞ –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç:`)
      console.log(`   üíµ –î–æ—Ö–æ–¥—ã: ${totalIncomeManual} ‚≠ê`)
      console.log(`   üí∏ –†–∞—Å—Ö–æ–¥—ã: ${totalExpensesManual} ‚≠ê`)
      console.log(`üìä –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞:`)
      console.log(`   üíµ –î–æ—Ö–æ–¥—ã: ${stats.total_income} ‚≠ê`)
      console.log(`   üí∏ –†–∞—Å—Ö–æ–¥—ã: ${stats.total_outcome} ‚≠ê`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      expect(stats.total_income).toBe(totalIncomeManual)
      expect(stats.total_outcome).toBe(totalExpensesManual)
    })
  })

  describe('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –Ω—É–ª–µ–≤—ã—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü', async () => {
      console.log('üïµÔ∏è –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...')

      const now = new Date()
      const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è
      const { data: newUsersFromSQL, error } = await supabase
        .from('users')
        .select('telegram_id, username, created_at')
        .eq('bot_name', BOT_NAME)
        .gte('created_at', oneMonthAgo.toISOString())

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞:', error)
        throw error
      }

      console.log(`üîç SQL-–∑–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü:`)
      console.log(
        `   üìÖ –ü–µ—Ä–∏–æ–¥: —Å ${oneMonthAgo.toISOString()} –ø–æ ${now.toISOString()}`
      )
      console.log(
        `   üë• –ù–∞–π–¥–µ–Ω–æ: ${newUsersFromSQL?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
      )

      if (newUsersFromSQL && newUsersFromSQL.length > 0) {
        console.log(
          `‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getBotStatsWithCost`
        )
        newUsersFromSQL.slice(0, 3).forEach((user: any, index: number) => {
          console.log(
            `   ${index + 1}. ${user.username || user.telegram_id} - ${user.created_at}`
          )
        })
      } else {
        console.log(`‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç...`)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞—Ç–∞–º–∏
        const recentUsers = rawDatabaseData.allUsers.slice(0, 5)
        console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –¥–∞—Ç—ã:`)
        recentUsers.forEach((user: any, index: number) => {
          const userDate = new Date(user.created_at)
          const isRecent = userDate >= oneMonthAgo
          console.log(`   ${index + 1}. ${user.username || user.telegram_id}`)
          console.log(`      –î–∞—Ç–∞: ${user.created_at}`)
          console.log(`      Parsed: ${userDate.toISOString()}`)
          console.log(`      –ù–æ–≤—ã–π?: ${isRecent ? '‚úÖ' : '‚ùå'}`)
        })
      }

      // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏, –µ—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      expect(rawDatabaseData.allUsers.length).toBeGreaterThan(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç', () => {
      console.log('üïê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã...')

      const now = new Date()
      const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)

      console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:`)
      console.log(`   Local: ${now.toString()}`)
      console.log(`   ISO: ${now.toISOString()}`)
      console.log(`   UTC: ${now.toUTCString()}`)

      console.log(`üìÖ –ú–µ—Å—è—Ü –Ω–∞–∑–∞–¥:`)
      console.log(`   Local: ${oneMonthAgo.toString()}`)
      console.log(`   ISO: ${oneMonthAgo.toISOString()}`)
      console.log(`   UTC: ${oneMonthAgo.toUTCString()}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (rawDatabaseData.allUsers.length > 0) {
        const firstUser = rawDatabaseData.allUsers[0]
        const userDate = new Date(firstUser.created_at)

        console.log(`üë§ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`)
        console.log(`   Raw: ${firstUser.created_at}`)
        console.log(`   Parsed: ${userDate.toISOString()}`)
        console.log(
          `   Difference from now: ${now.getTime() - userDate.getTime()} ms`
        )
        console.log(
          `   Days ago: ${(now.getTime() - userDate.getTime()) / (24 * 60 * 60 * 1000)}`
        )
      }

      expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    })
  })
})
