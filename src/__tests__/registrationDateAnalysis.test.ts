import { describe, it, expect } from 'vitest'
import { supabase } from '@/core/supabase/client'

describe('Registration Date Analysis', () => {
  const BOT_NAME = 'MetaMuse_Manifest_bot'

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    console.log(
      'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...'
    )

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ payments_v2 –ø–µ—Ä–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: payments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('telegram_id, created_at, type, description')
      .eq('bot_name', BOT_NAME)
      .order('created_at', { ascending: true })
      .limit(10)

    if (paymentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError)
      throw paymentsError
    }

    console.log('üìÖ –ü–µ—Ä–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:')
    payments.forEach((payment, index) => {
      console.log(
        `   ${index + 1}. User ${payment.telegram_id} - ${payment.created_at}`
      )
      console.log(`      –¢–∏–ø: ${payment.type}`)
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${payment.description?.substring(0, 50)}...`)
    })

    // 2. –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: allPayments, error: allPaymentsError } = await supabase
      .from('payments_v2')
      .select('telegram_id, created_at')
      .eq('bot_name', BOT_NAME)
      .order('created_at', { ascending: true })

    if (allPaymentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', allPaymentsError)
      throw allPaymentsError
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const firstTransactionByUser = new Map<number, string>()
    allPayments.forEach(payment => {
      if (!firstTransactionByUser.has(payment.telegram_id)) {
        firstTransactionByUser.set(payment.telegram_id, payment.created_at)
      }
    })

    console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`)
    console.log(
      `   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${firstTransactionByUser.size}`
    )

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date()
    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000)

    let newUsersMonth = 0
    let newUsersWeek = 0
    let newUsersDay = 0

    firstTransactionByUser.forEach(firstTransactionDate => {
      const transactionDate = new Date(firstTransactionDate)
      if (transactionDate >= oneMonthAgo) newUsersMonth++
      if (transactionDate >= oneWeekAgo) newUsersWeek++
      if (transactionDate >= oneDayAgo) newUsersDay++
    })

    console.log(`üìÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –ø–µ—Ä–≤—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º:`)
    console.log(`   üìÜ –ó–∞ –º–µ—Å—è—Ü: ${newUsersMonth}`)
    console.log(`   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: ${newUsersWeek}`)
    console.log(`   üïê –ó–∞ –¥–µ–Ω—å: ${newUsersDay}`)

    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('bot_name', BOT_NAME)

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
      throw usersError
    }

    console.log(`\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:`)
    console.log(`   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users: ${allUsers.length}`)
    console.log(
      `   üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${firstTransactionByUser.size}`
    )
    console.log(
      `   ü§î –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allUsers.length - firstTransactionByUser.size}`
    )

    expect(allPayments.length).toBeGreaterThan(0)
    expect(firstTransactionByUser.size).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å telegram_id', async () => {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å telegram_id...')

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã telegram_id –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('telegram_id, username')
      .eq('bot_name', BOT_NAME)
      .limit(5)

    const { data: payments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('telegram_id')
      .eq('bot_name', BOT_NAME)
      .limit(5)

    if (usersError || paymentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', usersError || paymentsError)
      throw usersError || paymentsError
    }

    console.log('üìã telegram_id –≤ —Ç–∞–±–ª–∏—Ü–µ users:')
    users.forEach((user, index) => {
      console.log(
        `   ${index + 1}. ${user.username}: ${user.telegram_id} (—Ç–∏–ø: ${typeof user.telegram_id})`
      )
    })

    console.log('\nüìã telegram_id –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2:')
    payments.forEach((payment, index) => {
      console.log(
        `   ${index + 1}. ${payment.telegram_id} (—Ç–∏–ø: ${typeof payment.telegram_id})`
      )
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const userIds = new Set(users.map(u => u.telegram_id))
    const paymentIds = new Set(payments.map(p => p.telegram_id.toString()))

    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π:')
    console.log(`   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –≤ users: ${userIds.size}`)
    console.log(`   üí≥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –≤ payments: ${paymentIds.size}`)

    const intersection = new Set([...userIds].filter(id => paymentIds.has(id)))
    console.log(`   ü§ù –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: ${intersection.size}`)

    if (intersection.size === 0) {
      console.log(
        '‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É telegram_id –≤ users –∏ payments_v2!'
      )
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
      console.log('   1. –í users telegram_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ UUID')
      console.log('   2. –í payments_v2 telegram_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ')
      console.log('   3. –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤—è–∑—É—é—â–µ–µ –ø–æ–ª–µ')
    }

    expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  })

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏', async () => {
    console.log('üîç –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É users –∏ payments_v2...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ chat_id –≤ users, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å telegram_id –≤ payments
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('telegram_id, chat_id, username, first_name')
      .eq('bot_name', BOT_NAME)
      .limit(5)

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
      throw usersError
    }

    console.log('üìã –ü–æ–ª—è –≤ users, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å telegram_id:')
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.username || user.first_name}:`)
      console.log(
        `      telegram_id: ${user.telegram_id} (${typeof user.telegram_id})`
      )
      console.log(`      chat_id: ${user.chat_id} (${typeof user.chat_id})`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ chat_id –∏–∑ users telegram_id –∏–∑ payments
    const { data: payments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('telegram_id')
      .eq('bot_name', BOT_NAME)
      .in(
        'telegram_id',
        users.map(u => u.chat_id)
      )
      .limit(5)

    if (paymentsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError)
      throw paymentsError
    }

    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ chat_id (users) = telegram_id (payments):`)
    console.log(
      `   üí≥ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ ID: ${payments.length}`
    )

    if (payments.length > 0) {
      console.log(
        '‚úÖ –ù–ê–ô–î–ï–ù–ê –°–í–Ø–ó–¨: chat_id –≤ users = telegram_id –≤ payments_v2!'
      )
      payments.forEach((payment, index) => {
        console.log(
          `   ${index + 1}. telegram_id –≤ payments: ${payment.telegram_id}`
        )
      })
    } else {
      console.log('‚ùå –°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ chat_id')
    }

    expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  })
})
