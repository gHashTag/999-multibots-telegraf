import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

/**
 * –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
 */

interface BalanceBreakdown {
  botName: string
  totalTransactions: number

  // –î–æ—Ö–æ–¥—ã
  realIncomeCount: number
  realIncomeStars: number
  realIncomeRub: number

  bonusIncomeCount: number
  bonusIncomeStars: number

  // –†–∞—Å—Ö–æ–¥—ã
  realOutcomeCount: number
  realOutcomeStars: number

  bonusOutcomeCount: number
  bonusOutcomeStars: number

  // –ë–∞–ª–∞–Ω—Å—ã
  totalIncomeStars: number
  totalOutcomeStars: number
  calculatedBalance: number

  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  isConsistent: boolean
  issues: string[]
}

async function testBalanceConsistency(
  botName: string
): Promise<BalanceBreakdown> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')

    if (error) throw error

    const issues: string[] = []

    // –§—É–Ω–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ statsCommand)
    const getTransactionCategory = (payment: any) => {
      // MONEY_INCOME –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
      if (payment.type === 'MONEY_INCOME') {
        return 'real'
      }
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ category –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      return payment.category === 'REAL' ? 'real' : 'bonus'
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const realIncomePayments = payments.filter(
      p => p.type === 'MONEY_INCOME' && getTransactionCategory(p) === 'real'
    )

    const bonusIncomePayments = payments.filter(
      p => p.type === 'MONEY_INCOME' && getTransactionCategory(p) === 'bonus'
    )

    const realOutcomePayments = payments.filter(
      p => p.type === 'MONEY_OUTCOME' && getTransactionCategory(p) === 'real'
    )

    const bonusOutcomePayments = payments.filter(
      p => p.type === 'MONEY_OUTCOME' && getTransactionCategory(p) === 'bonus'
    )

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
    const realIncomeStars = realIncomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const realIncomeRub = realIncomePayments.reduce(
      (sum, p) => sum + (p.amount || 0),
      0
    )

    const bonusIncomeStars = bonusIncomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )

    const realOutcomeStars = realOutcomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const bonusOutcomeStars = bonusOutcomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )

    const totalIncomeStars = realIncomeStars + bonusIncomeStars
    const totalOutcomeStars = realOutcomeStars + bonusOutcomeStars
    const calculatedBalance = totalIncomeStars - totalOutcomeStars

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ MONEY_INCOME —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ real
    if (bonusIncomePayments.length > 0) {
      issues.push(
        `‚ùå –ù–∞–π–¥–µ–Ω—ã MONEY_INCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ BONUS: ${bonusIncomePayments.length}`
      )
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å–∏–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (–±–æ–ª—å—à–µ —á–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –±–æ–Ω—É—Å—ã)
    if (calculatedBalance < -50000) {
      issues.push(
        `‚ö†Ô∏è –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculatedBalance} ‚≠ê`
      )
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
    if (totalIncomeStars === 0) {
      issues.push(`‚ùå –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –≤ –∑–≤–µ–∑–¥–∞—Ö`)
    }

    if (totalOutcomeStars === 0) {
      issues.push(`‚ùå –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∑–≤–µ–∑–¥–∞—Ö`)
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    const bonusSpendingRatio = bonusOutcomeStars / totalOutcomeStars
    if (bonusSpendingRatio > 0.8) {
      issues.push(
        `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç—Ä–∞—Ç: ${(bonusSpendingRatio * 100).toFixed(1)}%`
      )
    }

    return {
      botName,
      totalTransactions: payments.length,

      realIncomeCount: realIncomePayments.length,
      realIncomeStars,
      realIncomeRub,

      bonusIncomeCount: bonusIncomePayments.length,
      bonusIncomeStars,

      realOutcomeCount: realOutcomePayments.length,
      realOutcomeStars,

      bonusOutcomeCount: bonusOutcomePayments.length,
      bonusOutcomeStars,

      totalIncomeStars,
      totalOutcomeStars,
      calculatedBalance,

      isConsistent: issues.length === 0,
      issues,
    }
  } catch (error) {
    logger.error('Error in testBalanceConsistency:', error)
    throw error
  }
}

function formatBalanceReport(breakdown: BalanceBreakdown): string {
  let report = `\nüîç –¢–ï–°–¢ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê @${breakdown.botName}\n\n`

  report += `üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`
  report += `   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${breakdown.totalTransactions}\n\n`

  report += `üí∞ –î–û–•–û–î–´:\n`
  report += `   –†–µ–∞–ª—å–Ω—ã–µ: ${breakdown.realIncomeStars} ‚≠ê + ${breakdown.realIncomeRub} ‚ÇΩ (${breakdown.realIncomeCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  report += `   –ë–æ–Ω—É—Å–Ω—ã–µ: ${breakdown.bonusIncomeStars} ‚≠ê (${breakdown.bonusIncomeCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  report += `   –ò–¢–û–ì–û –¥–æ—Ö–æ–¥–æ–≤: ${breakdown.totalIncomeStars} ‚≠ê\n\n`

  report += `üí∏ –†–ê–°–•–û–î–´:\n`
  report += `   –†–µ–∞–ª—å–Ω—ã–µ: ${breakdown.realOutcomeStars} ‚≠ê (${breakdown.realOutcomeCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  report += `   –ë–æ–Ω—É—Å–Ω—ã–µ: ${breakdown.bonusOutcomeStars} ‚≠ê (${breakdown.bonusOutcomeCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  report += `   –ò–¢–û–ì–û —Ä–∞—Å—Ö–æ–¥–æ–≤: ${breakdown.totalOutcomeStars} ‚≠ê\n\n`

  report += `üìà –ë–ê–õ–ê–ù–°:\n`
  report += `   –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${breakdown.calculatedBalance} ‚≠ê\n`
  report += `   –§–æ—Ä–º—É–ª–∞: ${breakdown.totalIncomeStars} - ${breakdown.totalOutcomeStars} = ${breakdown.calculatedBalance}\n\n`

  if (breakdown.issues.length > 0) {
    report += `‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:\n`
    breakdown.issues.forEach(issue => {
      report += `   ${issue}\n`
    })
  } else {
    report += `‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!\n`
  }

  return report
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { testBalanceConsistency, formatBalanceReport }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
async function runTest() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞...')

    const breakdown = await testBalanceConsistency('MetaMuse_Manifest_bot')
    const report = formatBalanceReport(breakdown)

    console.log(report)

    if (!breakdown.isConsistent) {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏.')
      process.exit(1)
    } else {
      console.log('\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω.')
      process.exit(0)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error)
    process.exit(1)
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTest()
}
