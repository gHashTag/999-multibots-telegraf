import { supabase } from '@/core/supabase/client'

/**
 * –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

interface MonthlySpending {
  month: string
  year: number
  total_spent_stars: number
  total_spent_rub: number
  transaction_count: number
  services_used: string[]
  top_service: string
  avg_transaction: number
}

interface UserAnalysis {
  user_id: string
  total_analysis: {
    total_spent_stars: number
    total_spent_rub: number
    total_transactions: number
    first_transaction: string
    last_transaction: string
    active_months: number
    favorite_service: string
  }
  monthly_breakdown: MonthlySpending[]
  service_breakdown: {
    service_name: string
    total_spent: number
    transaction_count: number
    percentage: number
  }[]
  bots_used: string[]
}

async function analyzeUserMonthlySpending(
  userId: string
): Promise<UserAnalysis> {
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: payments, error } = await supabase
    .from('payments_v2')
    .select('*')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .eq('type', 'MONEY_OUTCOME')
    .order('payment_date', { ascending: true })

  if (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
  }

  if (!payments || payments.length === 0) {
    throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${payments.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤`)

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
  const monthlyMap = new Map<string, MonthlySpending>()
  const serviceMap = new Map<string, { spent: number; count: number }>()
  const botsSet = new Set<string>()

  let totalStars = 0
  let totalRub = 0

  payments.forEach(payment => {
    const date = new Date(payment.payment_date)
    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
    const serviceName = payment.service_type || 'unknown'

    botsSet.add(payment.bot_name)

    // –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (!monthlyMap.has(monthKey)) {
      monthlyMap.set(monthKey, {
        month: date.toLocaleDateString('ru-RU', { month: 'long' }),
        year: date.getFullYear(),
        total_spent_stars: 0,
        total_spent_rub: 0,
        transaction_count: 0,
        services_used: [],
        top_service: '',
        avg_transaction: 0,
      })
    }

    const monthData = monthlyMap.get(monthKey)!
    monthData.total_spent_stars += payment.stars || 0
    monthData.total_spent_rub += payment.amount || 0
    monthData.transaction_count += 1

    if (!monthData.services_used.includes(serviceName)) {
      monthData.services_used.push(serviceName)
    }

    // –°–µ—Ä–≤–∏—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const serviceData = serviceMap.get(serviceName) || { spent: 0, count: 0 }
    serviceData.spent += payment.stars || 0
    serviceData.count += 1
    serviceMap.set(serviceName, serviceData)

    totalStars += payment.stars || 0
    totalRub += payment.amount || 0
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
  monthlyMap.forEach((monthData, monthKey) => {
    const monthPayments = payments.filter(p => {
      const date = new Date(p.payment_date)
      const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
      return key === monthKey
    })

    const monthServiceMap = new Map<string, number>()
    monthPayments.forEach(p => {
      const service = p.service_type || 'unknown'
      monthServiceMap.set(
        service,
        (monthServiceMap.get(service) || 0) + (p.stars || 0)
      )
    })

    let topService = 'unknown'
    let maxSpent = 0
    monthServiceMap.forEach((spent, service) => {
      if (spent > maxSpent) {
        maxSpent = spent
        topService = service
      }
    })

    monthData.top_service = topService
    monthData.avg_transaction =
      monthData.transaction_count > 0
        ? monthData.total_spent_stars / monthData.transaction_count
        : 0
  })

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã
  const monthlyBreakdown = Array.from(monthlyMap.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([_, data]) => data)

  // –°–µ—Ä–≤–∏—Å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
  const serviceBreakdown = Array.from(serviceMap.entries())
    .map(([service, data]) => ({
      service_name: service,
      total_spent: data.spent,
      transaction_count: data.count,
      percentage: totalStars > 0 ? (data.spent / totalStars) * 100 : 0,
    }))
    .sort((a, b) => b.total_spent - a.total_spent)

  // –õ—é–±–∏–º—ã–π —Å–µ—Ä–≤–∏—Å
  const favoriteService =
    serviceBreakdown.length > 0 ? serviceBreakdown[0].service_name : 'unknown'

  return {
    user_id: userId,
    total_analysis: {
      total_spent_stars: totalStars,
      total_spent_rub: totalRub,
      total_transactions: payments.length,
      first_transaction: payments[0].payment_date,
      last_transaction: payments[payments.length - 1].payment_date,
      active_months: monthlyBreakdown.length,
      favorite_service: favoriteService,
    },
    monthly_breakdown: monthlyBreakdown,
    service_breakdown: serviceBreakdown,
    bots_used: Array.from(botsSet),
  }
}

function formatAnalysisReport(analysis: UserAnalysis): string {
  let report = `\nüë§ –ê–ù–ê–õ–ò–ó –ú–ï–°–Ø–ß–ù–´–• –¢–†–ê–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${analysis.user_id}\n`
  report += '='.repeat(80) + '\n\n'

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  report += 'üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n'
  report += `   üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${analysis.total_analysis.total_spent_stars.toFixed(2)} ‚≠ê\n`
  if (analysis.total_analysis.total_spent_rub > 0) {
    report += `   üíµ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${analysis.total_analysis.total_spent_rub.toFixed(2)} ‚ÇΩ\n`
  }
  report += `   üî¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${analysis.total_analysis.total_transactions}\n`
  report += `   üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤: ${analysis.total_analysis.active_months}\n`
  report += `   ‚ù§Ô∏è –õ—é–±–∏–º—ã–π —Å–µ—Ä–≤–∏—Å: ${analysis.total_analysis.favorite_service}\n`
  report += `   üìÜ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${new Date(analysis.total_analysis.first_transaction).toLocaleDateString('ru-RU')}\n`
  report += `   üìÜ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${new Date(analysis.total_analysis.last_transaction).toLocaleDateString('ru-RU')}\n`
  report += `   ü§ñ –ë–æ—Ç—ã: ${analysis.bots_used.join(', ')}\n\n`

  // –ú–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
  report += 'üìÖ –ú–ï–°–Ø–ß–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê:\n'
  analysis.monthly_breakdown.forEach(month => {
    report += `   ${month.month} ${month.year}:\n`
    report += `      üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${month.total_spent_stars.toFixed(2)} ‚≠ê\n`
    if (month.total_spent_rub > 0) {
      report += `      üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${month.total_spent_rub.toFixed(2)} ‚ÇΩ\n`
    }
    report += `      üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${month.transaction_count}\n`
    report += `      üìä –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${month.avg_transaction.toFixed(2)} ‚≠ê\n`
    report += `      üèÜ –¢–æ–ø —Å–µ—Ä–≤–∏—Å: ${month.top_service}\n`
    report += `      üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã: ${month.services_used.join(', ')}\n\n`
  })

  // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  report += 'üõ†Ô∏è –†–ê–ó–ë–ò–í–ö–ê –ü–û –°–ï–†–í–ò–°–ê–ú:\n'
  analysis.service_breakdown.forEach((service, index) => {
    report += `   ${index + 1}. ${service.service_name}:\n`
    report += `      üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${service.total_spent.toFixed(2)} ‚≠ê (${service.percentage.toFixed(1)}%)\n`
    report += `      üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${service.transaction_count}\n`
    report += `      üìä –°—Ä–µ–¥–Ω—è—è: ${(service.total_spent / service.transaction_count).toFixed(2)} ‚≠ê\n\n`
  })

  // –¢—Ä–µ–Ω–¥—ã –∏ –≤—ã–≤–æ–¥—ã
  report += 'üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:\n'

  if (analysis.monthly_breakdown.length >= 2) {
    const lastMonth =
      analysis.monthly_breakdown[analysis.monthly_breakdown.length - 1]
    const prevMonth =
      analysis.monthly_breakdown[analysis.monthly_breakdown.length - 2]
    const trend = lastMonth.total_spent_stars - prevMonth.total_spent_stars

    if (trend > 0) {
      report += `   üìà –¢—Ä–∞—Ç—ã —Ä–∞—Å—Ç—É—Ç: +${trend.toFixed(2)} ‚≠ê –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n`
    } else if (trend < 0) {
      report += `   üìâ –¢—Ä–∞—Ç—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è: ${trend.toFixed(2)} ‚≠ê –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n`
    } else {
      report += `   ‚û°Ô∏è –¢—Ä–∞—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã\n`
    }
  }

  const avgMonthlySpending =
    analysis.total_analysis.total_spent_stars /
    analysis.total_analysis.active_months
  report += `   üí° –°—Ä–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã: ${avgMonthlySpending.toFixed(2)} ‚≠ê\n`

  const avgTransactionSize =
    analysis.total_analysis.total_spent_stars /
    analysis.total_analysis.total_transactions
  report += `   üí° –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${avgTransactionSize.toFixed(2)} ‚≠ê\n`

  return report
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runUserAnalysis() {
  try {
    const userId = '352374518'
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

    const analysis = await analyzeUserMonthlySpending(userId)
    const report = formatAnalysisReport(analysis)

    console.log(report)

    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error)
    process.exit(1)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { analyzeUserMonthlySpending, formatAnalysisReport }

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runUserAnalysis()
}
