import { supabase } from '@/core/supabase/client'

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ service_type –¥–ª—è –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

async function fixVideoServices(userId: string) {
  console.log(
    `üé¨ –ò—Å–ø—Ä–∞–≤–ª—è—é service_type –¥–ª—è –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`
  )

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤–∏–¥–µ–æ
  const { data: unknownTransactions, error } = await supabase
    .from('payments_v2')
    .select('id, description, service_type')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .eq('service_type', 'unknown')

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
    return
  }

  if (!unknownTransactions || unknownTransactions.length === 0) {
    console.log('Unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unknownTransactions.length} unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

  let updatedCount = 0

  for (const transaction of unknownTransactions) {
    let newServiceType: string | null = null
    const desc = transaction.description.toLowerCase()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º service_type –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
    if (desc.includes('video generation')) {
      if (desc.includes('kling')) {
        newServiceType = 'kling_video'
      } else if (desc.includes('minimax')) {
        newServiceType = 'minimax_video'
      } else if (desc.includes('haiper')) {
        newServiceType = 'haiper_video'
      } else if (desc.includes('runway')) {
        newServiceType = 'runway_video'
      } else if (desc.includes('luma')) {
        newServiceType = 'luma_video'
      } else {
        newServiceType = 'video_generation'
      }
    } else if (desc.includes('image') || desc.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
      newServiceType = 'image_generation'
    } else if (desc.includes('text') || desc.includes('—Ç–µ–∫—Å—Ç')) {
      newServiceType = 'text_processing'
    } else if (desc.includes('voice') || desc.includes('–≥–æ–ª–æ—Å')) {
      newServiceType = 'voice_processing'
    }

    if (newServiceType) {
      console.log(
        `   –û–±–Ω–æ–≤–ª—è—é ID ${transaction.id}: "${transaction.description}" -> ${newServiceType}`
      )

      const { error: updateError } = await supabase
        .from('payments_v2')
        .update({ service_type: newServiceType })
        .eq('id', transaction.id)

      if (updateError) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID ${transaction.id}:`, updateError)
      } else {
        updatedCount++
      }
    } else {
      console.log(
        `   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å service_type –¥–ª—è: "${transaction.description}"`
      )
    }
  }

  console.log(
    `\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∏–∑ ${unknownTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
  )

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { data: finalStats, error: statsError } = await supabase
    .from('payments_v2')
    .select('service_type')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')

  if (!statsError && finalStats) {
    const serviceStats = new Map<string, number>()

    finalStats.forEach(transaction => {
      const service = transaction.service_type || 'unknown'
      serviceStats.set(service, (serviceStats.get(service) || 0) + 1)
    })

    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–ê–ú:')
    const sortedServices = Array.from(serviceStats.entries()).sort(
      ([, a], [, b]) => b - a
    )

    sortedServices.forEach(([service, count]) => {
      const percentage = ((count / finalStats.length) * 100).toFixed(1)
      console.log(`   ${service}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
    })
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runVideoFix() {
  try {
    const userId = '352374518'
    console.log(
      `üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`
    )

    await fixVideoServices(userId)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runVideoFix()
}
