import { supabase } from '@/core/supabase/client'

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

interface TransactionAnalysis {
  id: string
  payment_date: string
  type: string
  category: string
  stars: number
  amount: number
  service_type: string
  description: string
  bot_name: string
  metadata: any
}

async function analyzeUserCategories(userId: string) {
  console.log(
    `üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`
  )

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: payments, error } = await supabase
    .from('payments_v2')
    .select('*')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .order('payment_date', { ascending: false })

  if (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
  }

  if (!payments || payments.length === 0) {
    throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${payments.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryStats = new Map<string, number>()
  const serviceStats = new Map<string, number>()
  const unknownTransactions: TransactionAnalysis[] = []
  const bonusTransactions: TransactionAnalysis[] = []
  const realTransactions: TransactionAnalysis[] = []

  payments.forEach(payment => {
    const category = payment.category || 'undefined'
    const service = payment.service_type || 'unknown'

    categoryStats.set(category, (categoryStats.get(category) || 0) + 1)
    serviceStats.set(service, (serviceStats.get(service) || 0) + 1)

    const transaction: TransactionAnalysis = {
      id: payment.id,
      payment_date: payment.payment_date,
      type: payment.type,
      category: payment.category,
      stars: payment.stars || 0,
      amount: payment.amount || 0,
      service_type: payment.service_type || 'unknown',
      description: payment.description || '',
      bot_name: payment.bot_name,
      metadata: payment.metadata,
    }

    if (service === 'unknown') {
      unknownTransactions.push(transaction)
    }

    if (category === 'BONUS') {
      bonusTransactions.push(transaction)
    } else if (category === 'REAL') {
      realTransactions.push(transaction)
    }
  })

  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:')
  categoryStats.forEach((count, category) => {
    const percentage = ((count / payments.length) * 100).toFixed(1)
    console.log(`   ${category}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
  })

  console.log('\nüõ†Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–ê–ú:')
  const sortedServices = Array.from(serviceStats.entries())
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10)

  sortedServices.forEach(([service, count]) => {
    const percentage = ((count / payments.length) * 100).toFixed(1)
    console.log(`   ${service}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
  })

  console.log('\nüîç –ê–ù–ê–õ–ò–ó UNKNOWN –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:')
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${unknownTransactions.length} unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

  if (unknownTransactions.length > 0) {
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:')
    unknownTransactions.slice(0, 10).forEach((tx, index) => {
      console.log(`\n   ${index + 1}. ID: ${tx.id}`)
      console.log(
        `      –î–∞—Ç–∞: ${new Date(tx.payment_date).toLocaleDateString('ru-RU')}`
      )
      console.log(`      –¢–∏–ø: ${tx.type}`)
      console.log(`      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${tx.category}`)
      console.log(`      –°—É–º–º–∞: ${tx.stars} ‚≠ê, ${tx.amount} ‚ÇΩ`)
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: "${tx.description}"`)
      console.log(`      –ë–æ—Ç: ${tx.bot_name}`)
      if (tx.metadata) {
        console.log(`      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata, null, 2)}`)
      }
    })
  }

  console.log('\nüéÅ –ê–ù–ê–õ–ò–ó –ë–û–ù–£–°–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:')
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${bonusTransactions.length} –±–æ–Ω—É—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

  if (bonusTransactions.length > 0) {
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –±–æ–Ω—É—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:')
    bonusTransactions.slice(0, 5).forEach((tx, index) => {
      console.log(`\n   ${index + 1}. ID: ${tx.id}`)
      console.log(
        `      –î–∞—Ç–∞: ${new Date(tx.payment_date).toLocaleDateString('ru-RU')}`
      )
      console.log(`      –¢–∏–ø: ${tx.type}`)
      console.log(`      –°—É–º–º–∞: ${tx.stars} ‚≠ê, ${tx.amount} ‚ÇΩ`)
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: "${tx.description}"`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å—ã –≤ –¥–æ—Ö–æ–¥–∞—Ö
    const bonusIncomes = bonusTransactions.filter(
      tx => tx.type === 'MONEY_INCOME'
    )
    if (bonusIncomes.length > 0) {
      console.log(
        `\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ ${bonusIncomes.length} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤!`
      )
      console.log('–≠—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏:')
      bonusIncomes.forEach(tx => {
        console.log(`   - ${tx.stars} ‚≠ê: "${tx.description}"`)
      })
    }
  }

  console.log('\nüí∞ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:')
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${realTransactions.length} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)

  const realIncomes = realTransactions.filter(tx => tx.type === 'MONEY_INCOME')
  const realOutcomes = realTransactions.filter(
    tx => tx.type === 'MONEY_OUTCOME'
  )

  console.log(`   üìà –†–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã: ${realIncomes.length}`)
  console.log(`   üìâ –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${realOutcomes.length}`)

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –û–ü–ò–°–ê–ù–ò–ô –î–õ–Ø UNKNOWN:')
  const descriptionPatterns = new Map<string, number>()

  unknownTransactions.forEach(tx => {
    const desc = tx.description.toLowerCase()

    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if (desc.includes('video') || desc.includes('–≤–∏–¥–µ–æ')) {
      descriptionPatterns.set(
        'video_generation',
        (descriptionPatterns.get('video_generation') || 0) + 1
      )
    } else if (
      desc.includes('image') ||
      desc.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') ||
      desc.includes('–∫–∞—Ä—Ç–∏–Ω–∫–∞')
    ) {
      descriptionPatterns.set(
        'image_processing',
        (descriptionPatterns.get('image_processing') || 0) + 1
      )
    } else if (desc.includes('text') || desc.includes('—Ç–µ–∫—Å—Ç')) {
      descriptionPatterns.set(
        'text_processing',
        (descriptionPatterns.get('text_processing') || 0) + 1
      )
    } else if (
      desc.includes('voice') ||
      desc.includes('–≥–æ–ª–æ—Å') ||
      desc.includes('–∞—É–¥–∏–æ')
    ) {
      descriptionPatterns.set(
        'voice_processing',
        (descriptionPatterns.get('voice_processing') || 0) + 1
      )
    } else {
      descriptionPatterns.set(
        'other',
        (descriptionPatterns.get('other') || 0) + 1
      )
    }
  })

  console.log('–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö unknown —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:')
  descriptionPatterns.forEach((count, pattern) => {
    console.log(`   ${pattern}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
  })

  return {
    total: payments.length,
    categoryStats,
    serviceStats,
    unknownTransactions,
    bonusTransactions,
    realTransactions,
    descriptionPatterns,
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runCategoryAnalysis() {
  try {
    const userId = '352374518'
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

    const analysis = await analyzeUserCategories(userId)

    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!')
    console.log(`\nüìä –ò–¢–û–ì–û: ${analysis.total} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runCategoryAnalysis()
}
