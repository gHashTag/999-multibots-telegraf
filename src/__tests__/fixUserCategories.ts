import { supabase } from '@/core/supabase/client'

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ service_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 352374518
 */

async function fixUserCategories(userId: string) {
  console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã - –æ–Ω–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å REAL
  console.log('\nüéÅ –ò—Å–ø—Ä–∞–≤–ª—è—é –±–æ–Ω—É—Å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã...')

  const bonusIncomeDescriptions = [
    'System Correction: NEUROTESTER Access Grant',
    '–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–π—Ä–æ–≤–∏–¥–µ–æ',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    'System Grant: –Ω–µ–π—Ä–æ–≤–∏–¥–µ–æ Access',
    '‚≠êÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞',
    'üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  ]

  for (const pattern of bonusIncomeDescriptions) {
    const { data: bonusTransactions, error: fetchError } = await supabase
      .from('payments_v2')
      .select('id, description, type, category')
      .eq('telegram_id', userId)
      .eq('status', 'COMPLETED')
      .like('description', `%${pattern}%`)

    if (fetchError) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "${pattern}":`,
        fetchError
      )
      continue
    }

    if (bonusTransactions && bonusTransactions.length > 0) {
      console.log(
        `   –ù–∞–π–¥–µ–Ω–æ ${bonusTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "${pattern}"`
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ BONUS
      const { error: updateError } = await supabase
        .from('payments_v2')
        .update({ category: 'BONUS' })
        .eq('telegram_id', userId)
        .eq('status', 'COMPLETED')
        .like('description', `%${pattern}%`)

      if (updateError) {
        console.error(
          `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è "${pattern}":`,
          updateError
        )
      } else {
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${bonusTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
      }
    }
  }

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º unknown service_type –¥–ª—è –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  console.log('\nüé¨ –ò—Å–ø—Ä–∞–≤–ª—è—é unknown service_type –¥–ª—è –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...')

  const { data: unknownVideoTransactions, error: fetchVideoError } =
    await supabase
      .from('payments_v2')
      .select('id, description, service_type')
      .eq('telegram_id', userId)
      .eq('status', 'COMPLETED')
      .eq('service_type', 'unknown')
      .like('description', '%Video generation%')

  if (fetchVideoError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ unknown –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', fetchVideoError)
  } else if (unknownVideoTransactions && unknownVideoTransactions.length > 0) {
    console.log(
      `   –ù–∞–π–¥–µ–Ω–æ ${unknownVideoTransactions.length} unknown –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π service_type –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
    for (const transaction of unknownVideoTransactions) {
      let newServiceType = 'video_generation'

      if (transaction.description.includes('Kling')) {
        newServiceType = 'kling_video'
      } else if (transaction.description.includes('Minimax')) {
        newServiceType = 'minimax_video'
      } else if (transaction.description.includes('Haiper')) {
        newServiceType = 'haiper_video'
      } else if (transaction.description.includes('Runway')) {
        newServiceType = 'runway_video'
      }

      const { error: updateServiceError } = await supabase
        .from('payments_v2')
        .update({ service_type: newServiceType })
        .eq('id', transaction.id)

      if (updateServiceError) {
        console.error(
          `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è service_type –¥–ª—è ID ${transaction.id}:`,
          updateServiceError
        )
      }
    }

    console.log(
      `   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ service_type –¥–ª—è ${unknownVideoTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
    )
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...')

  const { data: finalStats, error: statsError } = await supabase
    .from('payments_v2')
    .select('category, service_type, type')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')

  if (statsError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError)
    return
  }

  const categoryStats = new Map<string, number>()
  const serviceStats = new Map<string, number>()
  const typeStats = new Map<string, number>()

  finalStats?.forEach(transaction => {
    const category = transaction.category || 'undefined'
    const service = transaction.service_type || 'unknown'
    const type = transaction.type || 'undefined'

    categoryStats.set(category, (categoryStats.get(category) || 0) + 1)
    serviceStats.set(service, (serviceStats.get(service) || 0) + 1)
    typeStats.set(type, (typeStats.get(type) || 0) + 1)
  })

  console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:')
  categoryStats.forEach((count, category) => {
    const percentage = ((count / finalStats.length) * 100).toFixed(1)
    console.log(`   ${category}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
  })

  console.log('\nüõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–ê–ú (—Ç–æ–ø 10):')
  const sortedServices = Array.from(serviceStats.entries())
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10)

  sortedServices.forEach(([service, count]) => {
    const percentage = ((count / finalStats.length) * 100).toFixed(1)
    console.log(`   ${service}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
  })

  console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:')
  typeStats.forEach((count, type) => {
    const percentage = ((count / finalStats.length) * 100).toFixed(1)
    console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${percentage}%)`)
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
  const { data: bonusIncomes, error: bonusError } = await supabase
    .from('payments_v2')
    .select('id, description, stars, type, category')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .eq('type', 'MONEY_INCOME')
    .eq('category', 'BONUS')

  if (!bonusError && bonusIncomes) {
    console.log(`\nüéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ —Ç–µ–ø–µ—Ä—å: ${bonusIncomes.length}`)
    if (bonusIncomes.length > 0) {
      const totalBonusStars = bonusIncomes.reduce(
        (sum, tx) => sum + (tx.stars || 0),
        0
      )
      console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤: ${totalBonusStars} ‚≠ê`)
    }
  }

  console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!')
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runFix() {
  try {
    const userId = '352374518'
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

    await fixUserCategories(userId)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runFix()
}
