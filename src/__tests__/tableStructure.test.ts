import { describe, it, expect } from 'vitest'
import { supabase } from '@/core/supabase/client'

describe('Database Table Structure Analysis', () => {
  it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users', async () => {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users...')

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .eq('bot_name', 'MetaMuse_Manifest_bot')
      .limit(3)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      throw error
    }

    if (users && users.length > 0) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:')
      const firstUser = users[0]
      Object.keys(firstUser).forEach(key => {
        console.log(`   ${key}: ${typeof firstUser[key]} = ${firstUser[key]}`)
      })

      console.log('\nüë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
      users.forEach((user, index) => {
        console.log(
          `   ${index + 1}. ${user.username || user.first_name || user.telegram_id}`
        )
        console.log(`      telegram_id: ${user.telegram_id}`)
        console.log(`      updated_at: ${user.updated_at}`)
        if (user.created_at) {
          console.log(`      created_at: ${user.created_at}`)
        }
      })
    }

    expect(users).toBeDefined()
    expect(users.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã payments_v2', async () => {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã payments_v2...')

    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', 'MetaMuse_Manifest_bot')
      .limit(3)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', error)
      throw error
    }

    if (payments && payments.length > 0) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã payments_v2:')
      const firstPayment = payments[0]
      Object.keys(firstPayment).forEach(key => {
        console.log(
          `   ${key}: ${typeof firstPayment[key]} = ${firstPayment[key]}`
        )
      })
    }

    expect(payments).toBeDefined()
    expect(payments.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    console.log('üïµÔ∏è –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    const possibleDateFields = [
      'created_at',
      'updated_at',
      'registration_date',
      'date_created',
    ]

    for (const field of possibleDateFields) {
      try {
        const { data, error } = await supabase
          .from('users')
          .select(`telegram_id, ${field}`)
          .eq('bot_name', 'MetaMuse_Manifest_bot')
          .limit(1)

        if (!error && data && data.length > 0) {
          console.log(`‚úÖ –ü–æ–ª–µ "${field}" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${data[0][field]}`)
        } else if (error) {
          console.log(`‚ùå –ü–æ–ª–µ "${field}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${error.message}`)
        }
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è "${field}": ${e}`)
      }
    }

    expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  })

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ getBotStatsWithCost', async () => {
    console.log('üßÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É getBotStatsWithCost...')

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    const periods: ('month' | 'week' | 'all')[] = ['month', 'week', 'all']

    for (const period of periods) {
      try {
        const { getBotStatsWithCost } = await import(
          '@/core/supabase/getUserBalanceStats'
        )
        const stats = await getBotStatsWithCost('MetaMuse_Manifest_bot', period)

        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${period}:`)
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`)
        console.log(`   –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.new_users_month}`)
        console.log(`   –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.new_users_week}`)
        console.log(`   –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.new_users_today}`)
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.active_users_month}`)
        console.log(`   ---`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ ${period}:`, error)
      }
    }

    expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  })
})
