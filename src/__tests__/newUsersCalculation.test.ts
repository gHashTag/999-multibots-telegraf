import { describe, it, expect } from 'vitest'
import { supabase } from '@/core/supabase/client'

describe('New Users Calculation Debug', () => {
  const BOT_NAME = 'MetaMuse_Manifest_bot'

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', async () => {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: allUsers, error: allUsersError } = await supabase
      .from('users')
      .select('telegram_id, username, first_name, created_at')
      .eq('bot_name', BOT_NAME)
      .order('created_at', { ascending: false })

    if (allUsersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsersError)
      throw allUsersError
    }

    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers?.length || 0}`)

    if (!allUsers || allUsers.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
      return
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const now = new Date()
    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000)

    console.log(`üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:`)
    console.log(`   –°–µ–π—á–∞—Å: ${now.toISOString()}`)
    console.log(`   –ú–µ—Å—è—Ü –Ω–∞–∑–∞–¥: ${oneMonthAgo.toISOString()}`)
    console.log(`   –ù–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥: ${oneWeekAgo.toISOString()}`)
    console.log(`   –î–µ–Ω—å –Ω–∞–∑–∞–¥: ${oneDayAgo.toISOString()}`)

    // 3. –†—É—á–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const newUsersMonth = allUsers.filter(user => {
      const userDate = new Date(user.created_at)
      return userDate >= oneMonthAgo
    })

    const newUsersWeek = allUsers.filter(user => {
      const userDate = new Date(user.created_at)
      return userDate >= oneWeekAgo
    })

    const newUsersDay = allUsers.filter(user => {
      const userDate = new Date(user.created_at)
      return userDate >= oneDayAgo
    })

    console.log(`üìä –†—É—á–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`)
    console.log(`   –ó–∞ –º–µ—Å—è—Ü: ${newUsersMonth.length}`)
    console.log(`   –ó–∞ –Ω–µ–¥–µ–ª—é: ${newUsersWeek.length}`)
    console.log(`   –ó–∞ –¥–µ–Ω—å: ${newUsersDay.length}`)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getDetailedBotStats
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã...`)

    // –ó–∞–ø—Ä–æ—Å –∑–∞ –º–µ—Å—è—Ü
    const { data: sqlNewUsersMonth, error: monthError } = await supabase
      .from('users')
      .select('telegram_id, username, created_at')
      .eq('bot_name', BOT_NAME)
      .gte('created_at', oneMonthAgo.toISOString())

    if (monthError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SQL –∑–∞ –º–µ—Å—è—Ü:', monthError)
    } else {
      console.log(
        `üìÖ SQL –∑–∞ –º–µ—Å—è—Ü: ${sqlNewUsersMonth?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
      )
    }

    // –ó–∞–ø—Ä–æ—Å –∑–∞ –Ω–µ–¥–µ–ª—é
    const { data: sqlNewUsersWeek, error: weekError } = await supabase
      .from('users')
      .select('telegram_id, username, created_at')
      .eq('bot_name', BOT_NAME)
      .gte('created_at', oneWeekAgo.toISOString())

    if (weekError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SQL –∑–∞ –Ω–µ–¥–µ–ª—é:', weekError)
    } else {
      console.log(
        `üìÖ SQL –∑–∞ –Ω–µ–¥–µ–ª—é: ${sqlNewUsersWeek?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
      )
    }

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    console.log(`üë• –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`)
    allUsers.slice(0, 10).forEach((user, index) => {
      const userDate = new Date(user.created_at)
      const daysAgo =
        (now.getTime() - userDate.getTime()) / (24 * 60 * 60 * 1000)
      const isNewMonth = userDate >= oneMonthAgo
      const isNewWeek = userDate >= oneWeekAgo
      const isNewDay = userDate >= oneDayAgo

      console.log(
        `   ${index + 1}. ${user.username || user.first_name || user.telegram_id}`
      )
      console.log(`      –î–∞—Ç–∞: ${user.created_at}`)
      console.log(`      –î–Ω–µ–π –Ω–∞–∑–∞–¥: ${daysAgo.toFixed(1)}`)
      console.log(`      –ù–æ–≤—ã–π –∑–∞ –º–µ—Å—è—Ü: ${isNewMonth ? '‚úÖ' : '‚ùå'}`)
      console.log(`      –ù–æ–≤—ã–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${isNewWeek ? '‚úÖ' : '‚ùå'}`)
      console.log(`      –ù–æ–≤—ã–π –∑–∞ –¥–µ–Ω—å: ${isNewDay ? '‚úÖ' : '‚ùå'}`)
      console.log(`      ---`)
    })

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
    console.log(`üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω:`)
    if (allUsers.length > 0) {
      const firstUser = allUsers[0]
      const userDateRaw = firstUser.created_at
      const userDate = new Date(userDateRaw)

      console.log(`   Raw –¥–∞—Ç–∞: ${userDateRaw}`)
      console.log(`   Parsed –¥–∞—Ç–∞: ${userDate.toISOString()}`)
      console.log(`   Local –¥–∞—Ç–∞: ${userDate.toString()}`)
      console.log(`   UTC –¥–∞—Ç–∞: ${userDate.toUTCString()}`)
      console.log(`   Timestamp: ${userDate.getTime()}`)
      console.log(`   –°–µ–π—á–∞—Å timestamp: ${now.getTime()}`)
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${now.getTime() - userDate.getTime()} ms`)
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:`)
    const testDates = [
      oneMonthAgo.toISOString(),
      oneMonthAgo.toISOString().slice(0, -1), // –±–µ–∑ Z
      oneMonthAgo.toISOString().slice(0, 19), // –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –∏ Z
      oneMonthAgo.toISOString().slice(0, 10), // —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞
    ]

    for (const testDate of testDates) {
      const { data: testResult, error: testError } = await supabase
        .from('users')
        .select('telegram_id')
        .eq('bot_name', BOT_NAME)
        .gte('created_at', testDate)

      if (testError) {
        console.log(`   ‚ùå –§–æ—Ä–º–∞—Ç "${testDate}": –æ—à–∏–±–∫–∞ - ${testError.message}`)
      } else {
        console.log(
          `   ‚úÖ –§–æ—Ä–º–∞—Ç "${testDate}": ${testResult?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        )
      }
    }

    // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
    expect(allUsers.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    console.log('üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

    const now = new Date()
    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü (—Ç–µ, –∫—Ç–æ –¥–µ–ª–∞–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    const { data: activeUsers, error } = await supabase
      .from('payments_v2')
      .select('telegram_id, created_at')
      .eq('bot_name', BOT_NAME)
      .eq('status', 'COMPLETED')
      .gte('created_at', oneMonthAgo.toISOString())

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      throw error
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const uniqueActiveUsers = new Set(
      activeUsers?.map(p => p.telegram_id) || []
    )

    console.log(`üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü:`)
    console.log(`   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${activeUsers?.length || 0}`)
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueActiveUsers.size}`)

    if (activeUsers && activeUsers.length > 0) {
      console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:`)
      activeUsers.slice(0, 5).forEach((payment, index) => {
        console.log(
          `   ${index + 1}. User ${payment.telegram_id} - ${payment.created_at}`
        )
      })
    }

    expect(true).toBe(true) // –¢–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  })
})
