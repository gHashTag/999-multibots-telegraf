import {
  describe,
  it,
  expect,
  mock,
  beforeEach,
  afterEach,
  spyOn,
} from 'bun:test'
import { NotificationService } from '@/services/plan_b/notification.service'
import * as botHelpers from '@/core/bot'
import { BotName } from '@/interfaces'

// –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
const mockSendMessage = mock(() => Promise.resolve({} as any)) // –ú–æ–∫ sendMessage
const mockGetBotByName = mock(() =>
  Promise.resolve({ bot: mockTelegrafInstance })
) // –ú–æ–∫ getBotByName

const mockTelegrafInstance = {
  telegram: {
    sendMessage: mockSendMessage,
  },
}

// –ú–æ–∫–∏—Ä—É–µ–º –º–æ–¥—É–ª—å botHelpers, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏
mock.module('@/core/bot', () => ({
  getBotByName: mockGetBotByName,
}))

describe('NotificationService', () => {
  let notificationService: NotificationService
  // –£–±–∏—Ä–∞–µ–º getBotByNameMock, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∫–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
  // let getBotByNameMock: ReturnType<typeof spyOn>

  const mockTelegramId = '123456'
  const mockBotName: BotName = 'ai_koshey_bot'
  const mockErrorMessage = 'Something went wrong during training.'

  beforeEach(() => {
    notificationService = new NotificationService()
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –≤—ã–∑–æ–≤—ã –º–æ–∫–æ–≤
    mockSendMessage.mockClear()
    mockGetBotByName.mockClear()

    // –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º getBotByName –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    mockGetBotByName.mockResolvedValue({ bot: mockTelegrafInstance })
  })

  afterEach(() => {
    mock.restore()
  })

  describe('sendTrainingError', () => {
    it('should call getBotByName and sendMessage with correct parameters', async () => {
      await notificationService.sendTrainingError(
        mockTelegramId,
        mockBotName,
        mockErrorMessage
      )

      expect(mockGetBotByName).toHaveBeenCalledTimes(1) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      expect(mockGetBotByName).toHaveBeenCalledWith(mockBotName)

      expect(mockSendMessage).toHaveBeenCalledTimes(1)
      expect(mockSendMessage).toHaveBeenCalledWith(
        mockTelegramId,
        expect.stringContaining(mockErrorMessage),
        { parse_mode: 'Markdown' }
      )
    })

    it('should truncate the error message if truncateError is true', async () => {
      const longErrorMessage = 'a'.repeat(2500)
      const truncatedMessagePart = 'a'.repeat(2000)

      await notificationService.sendTrainingError(
        mockTelegramId,
        mockBotName,
        longErrorMessage,
        { truncateError: true, maxLength: 2000 }
      )

      expect(mockSendMessage).toHaveBeenCalledTimes(1)
      expect(mockSendMessage).toHaveBeenCalledWith(
        mockTelegramId,
        expect.stringContaining(`${truncatedMessagePart}...`), // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        { parse_mode: 'Markdown' }
      )
    })

    it('should not send message if telegramId is undefined', async () => {
      await notificationService.sendTrainingError(
        undefined,
        mockBotName,
        mockErrorMessage
      )
      expect(mockGetBotByName).not.toHaveBeenCalled() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      expect(mockSendMessage).not.toHaveBeenCalled()
    })

    it('should handle errors during bot instance retrieval', async () => {
      const error = new Error('Bot not found')
      mockGetBotByName.mockRejectedValue(error) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      const consoleErrorSpy = spyOn(console, 'error')

      await notificationService.sendTrainingError(
        mockTelegramId,
        mockBotName,
        mockErrorMessage
      )

      expect(consoleErrorSpy).toHaveBeenCalledWith(
        'üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        { telegramId: mockTelegramId, error: error.message }
      )
      expect(mockSendMessage).not.toHaveBeenCalled()
      consoleErrorSpy.mockRestore()
    })

    it('should handle errors during sendMessage', async () => {
      const error = new Error('Telegram send error')
      mockSendMessage.mockRejectedValue(error)
      const consoleErrorSpy = spyOn(console, 'error')

      await notificationService.sendTrainingError(
        mockTelegramId,
        mockBotName,
        mockErrorMessage
      )

      expect(consoleErrorSpy).toHaveBeenCalledWith(
        'üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        { telegramId: mockTelegramId, error: error.message }
      )
      consoleErrorSpy.mockRestore()
    })
  })

  describe('sendSuccessNotification', () => {
    it('should call getBotByName and sendMessage with correct parameters (RU)', async () => {
      await notificationService.sendSuccessNotification(
        mockTelegramId,
        mockBotName,
        true // is_ru = true
      )

      expect(mockGetBotByName).toHaveBeenCalledTimes(1) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      expect(mockGetBotByName).toHaveBeenCalledWith(mockBotName)

      expect(mockSendMessage).toHaveBeenCalledTimes(1)
      expect(mockSendMessage).toHaveBeenCalledWith(
        mockTelegramId,
        expect.stringContaining('üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ'),
        { parse_mode: 'Markdown' }
      )
    })

    it('should call getBotByName and sendMessage with correct parameters (EN)', async () => {
      await notificationService.sendSuccessNotification(
        mockTelegramId,
        mockBotName,
        false // is_ru = false
      )

      expect(mockGetBotByName).toHaveBeenCalledTimes(1) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      expect(mockGetBotByName).toHaveBeenCalledWith(mockBotName)

      expect(mockSendMessage).toHaveBeenCalledTimes(1)
      expect(mockSendMessage).toHaveBeenCalledWith(
        mockTelegramId,
        expect.stringContaining('üéâ Training completed! üéâ'),
        { parse_mode: 'Markdown' }
      )
    })

    it('should handle errors during bot instance retrieval', async () => {
      const error = new Error('Bot not found')
      mockGetBotByName.mockRejectedValue(error) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–æ–∫
      const consoleErrorSpy = spyOn(console, 'error')

      await notificationService.sendSuccessNotification(
        mockTelegramId,
        mockBotName,
        true
      )

      expect(consoleErrorSpy).toHaveBeenCalledWith(
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        error
      )
      expect(mockSendMessage).not.toHaveBeenCalled()
      consoleErrorSpy.mockRestore()
    })

    it('should handle errors during sendMessage', async () => {
      const error = new Error('Telegram send error')
      mockSendMessage.mockRejectedValue(error)
      const consoleErrorSpy = spyOn(console, 'error')

      await notificationService.sendSuccessNotification(
        mockTelegramId,
        mockBotName,
        true
      )

      expect(consoleErrorSpy).toHaveBeenCalledWith(
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
        error
      )
      consoleErrorSpy.mockRestore()
    })
  })
})
