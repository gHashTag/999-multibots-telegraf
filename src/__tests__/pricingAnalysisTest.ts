import { logger } from '@/utils/logger'
import { SYSTEM_CONFIG, starCost, interestRate } from '@/price/constants'
import { BASE_COSTS, calculateModeCost } from '@/price/helpers/modelsCost'
import { VIDEO_MODELS_CONFIG } from '@/modules/videoGenerator/config/models.config'
import { calculateFinalPrice as calculateVideoFinalPrice } from '@/price/helpers/calculateFinalPrice'
import { ModeEnum } from '@/interfaces/modes'
import { conversionRates, conversionRatesV2 } from '@/price/priceCalculator'

/**
 * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */

interface ServicePricing {
  service: string
  baseCostUSD: number
  finalPriceStars: number
  finalPriceUSD: number
  finalPriceRUB: number
  markup: number
  markupPercent: number
}

interface PricingAnalysis {
  systemConfig: {
    starCostUSD: number
    interestRate: number
    markupMultiplier: number
  }
  fixedServices: ServicePricing[]
  stepBasedServices: {
    service: string
    costPerStepStars: number
    costPerStepUSD: number
    example50Steps: ServicePricing
    example100Steps: ServicePricing
  }[]
  videoServices: ServicePricing[]
  subscriptions: {
    neurophoto: { priceRUB: number; priceUSD: number }
    neurovideo: { priceRUB: number; priceUSD: number }
  }
  inconsistencies: string[]
  recommendations: string[]
}

function analyzePricingSystem(): PricingAnalysis {
  const inconsistencies: string[] = []
  const recommendations: string[] = []

  // –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const systemConfig = {
    starCostUSD: starCost,
    interestRate: interestRate,
    markupMultiplier: interestRate, // interestRate –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞—Ü–µ–Ω–∫–∏
  }

  console.log('üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', systemConfig)

  // –ê–Ω–∞–ª–∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const fixedServices: ServicePricing[] = []

  Object.entries(BASE_COSTS).forEach(([modeKey, baseCostUSD]) => {
    if (typeof baseCostUSD === 'number' && baseCostUSD > 0) {
      const mode = modeKey as ModeEnum

      try {
        const result = calculateModeCost({ mode, numImages: 1 })

        const finalPriceUSD = result.stars * starCost
        const markup = finalPriceUSD - baseCostUSD
        const markupPercent = baseCostUSD > 0 ? (markup / baseCostUSD) * 100 : 0

        fixedServices.push({
          service: mode,
          baseCostUSD,
          finalPriceStars: result.stars,
          finalPriceUSD,
          finalPriceRUB: result.rubles,
          markup,
          markupPercent,
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        const expectedStars = (baseCostUSD / starCost) * interestRate
        if (Math.abs(result.stars - expectedStars) > 0.01) {
          inconsistencies.push(
            `‚ùå ${mode}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedStars.toFixed(2)} ‚≠ê, –ø–æ–ª—É—á–µ–Ω–æ ${result.stars} ‚≠ê`
          )
        }
      } catch (error) {
        inconsistencies.push(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è ${mode}: ${error}`)
      }
    }
  })

  // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–æ–≤
  const stepBasedServices = [
    {
      service: 'DigitalAvatarBody (v1)',
      costPerStepStars: conversionRates.costPerStepInStars,
      costPerStepUSD: conversionRates.costPerStepInStars * starCost,
      example50Steps: calculateStepBasedPricing(
        'DigitalAvatarBody v1',
        50,
        'v1'
      ),
      example100Steps: calculateStepBasedPricing(
        'DigitalAvatarBody v1',
        100,
        'v1'
      ),
    },
    {
      service: 'DigitalAvatarBody (v2)',
      costPerStepStars: conversionRatesV2.costPerStepInStars,
      costPerStepUSD: conversionRatesV2.costPerStepInStars * starCost,
      example50Steps: calculateStepBasedPricing(
        'DigitalAvatarBody v2',
        50,
        'v2'
      ),
      example100Steps: calculateStepBasedPricing(
        'DigitalAvatarBody v2',
        100,
        'v2'
      ),
    },
  ]

  // –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–æ–≤
  const videoServices: ServicePricing[] = []

  Object.entries(VIDEO_MODELS_CONFIG).forEach(([modelKey, config]) => {
    try {
      const finalPriceStars = calculateVideoFinalPrice(modelKey)
      const finalPriceUSD = finalPriceStars * starCost
      const baseCostUSD = config.basePrice * 5 // 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const markup = finalPriceUSD - baseCostUSD
      const markupPercent = baseCostUSD > 0 ? (markup / baseCostUSD) * 100 : 0

      videoServices.push({
        service: `${config.title} (${modelKey})`,
        baseCostUSD,
        finalPriceStars,
        finalPriceUSD,
        finalPriceRUB: finalPriceUSD * 80, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
        markup,
        markupPercent,
      })

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –º–æ–¥–µ–ª–µ–π
      const expectedStars = Math.floor(
        (baseCostUSD / starCost) * (1 + interestRate)
      )
      if (Math.abs(finalPriceStars - expectedStars) > 1) {
        inconsistencies.push(
          `‚ùå –í–∏–¥–µ–æ ${modelKey}: –æ–∂–∏–¥–∞–ª–æ—Å—å ~${expectedStars} ‚≠ê, –ø–æ–ª—É—á–µ–Ω–æ ${finalPriceStars} ‚≠ê`
        )
      }
    } catch (error) {
      inconsistencies.push(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–∏–¥–µ–æ –¥–ª—è ${modelKey}: ${error}`)
    }
  })

  // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
  const subscriptions = {
    neurophoto: { priceRUB: 1110, priceUSD: 1110 / 80 },
    neurovideo: { priceRUB: 2999, priceUSD: 2999 / 80 },
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  if (fixedServices.length > 0) {
    const avgMarkup =
      fixedServices.reduce((sum, s) => sum + s.markupPercent, 0) /
      fixedServices.length
    recommendations.push(
      `üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${avgMarkup.toFixed(1)}%`
    )

    if (avgMarkup < 30) {
      recommendations.push(
        '‚ö†Ô∏è –ù–∏–∑–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤'
      )
    } else if (avgMarkup > 100) {
      recommendations.push(
        'üí∞ –í—ã—Å–æ–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–Ω–∏–∑–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'
      )
    }
  }

  const lowPriceServices = fixedServices.filter(s => s.finalPriceStars < 5)
  if (lowPriceServices.length > 0) {
    recommendations.push(
      `üí° –°–µ—Ä–≤–∏—Å—ã —Å –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–æ–π (<5 ‚≠ê): ${lowPriceServices.map(s => s.service).join(', ')}`
    )
  }

  const highPriceServices = fixedServices.filter(s => s.finalPriceStars > 50)
  if (highPriceServices.length > 0) {
    recommendations.push(
      `üíé –ü—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–∏—Å—ã (>50 ‚≠ê): ${highPriceServices.map(s => s.service).join(', ')}`
    )
  }

  return {
    systemConfig,
    fixedServices,
    stepBasedServices,
    videoServices,
    subscriptions,
    inconsistencies,
    recommendations,
  }
}

function calculateStepBasedPricing(
  serviceName: string,
  steps: number,
  version: 'v1' | 'v2'
): ServicePricing {
  const rates = version === 'v1' ? conversionRates : conversionRatesV2
  const totalStars = steps * rates.costPerStepInStars
  const totalUSD = totalStars * starCost
  const totalRUB = totalUSD * 80

  return {
    service: `${serviceName} (${steps} —à–∞–≥–æ–≤)`,
    baseCostUSD: totalUSD, // –î–ª—è step-based —Å–µ—Ä–≤–∏—Å–æ–≤ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å = —Ñ–∏–Ω–∞–ª—å–Ω–∞—è
    finalPriceStars: totalStars,
    finalPriceUSD: totalUSD,
    finalPriceRUB: totalRUB,
    markup: 0, // –ù–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è step-based
    markupPercent: 0,
  }
}

function formatPricingReport(analysis: PricingAnalysis): string {
  let report = '\nüè∑Ô∏è –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø\n\n'

  // –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  report += '‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:\n'
  report += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 ‚≠ê: $${analysis.systemConfig.starCostUSD}\n`
  report += `   üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞—Ü–µ–Ω–∫–∏: ${analysis.systemConfig.markupMultiplier}x\n`
  report += `   üíµ –ù–∞—Ü–µ–Ω–∫–∞: ${((analysis.systemConfig.markupMultiplier - 1) * 100).toFixed(0)}%\n\n`

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  if (analysis.fixedServices.length > 0) {
    report += 'üîß –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –°–ï–†–í–ò–°–´:\n'
    analysis.fixedServices
      .sort((a, b) => b.finalPriceStars - a.finalPriceStars)
      .forEach(service => {
        report += `   ${service.service}:\n`
        report += `      üíµ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${service.baseCostUSD.toFixed(3)}\n`
        report += `      ‚≠ê –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${service.finalPriceStars} ‚≠ê ($${service.finalPriceUSD.toFixed(2)}, ${service.finalPriceRUB.toFixed(0)} ‚ÇΩ)\n`
        report += `      üìä –ù–∞—Ü–µ–Ω–∫–∞: +${service.markupPercent.toFixed(1)}%\n\n`
      })
  }

  // –°–µ—Ä–≤–∏—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–æ–≤
  if (analysis.stepBasedServices.length > 0) {
    report += 'üìè –°–ï–†–í–ò–°–´ –ù–ê –û–°–ù–û–í–ï –®–ê–ì–û–í:\n'
    analysis.stepBasedServices.forEach(service => {
      report += `   ${service.service}:\n`
      report += `      üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —à–∞–≥: ${service.costPerStepStars} ‚≠ê ($${service.costPerStepUSD.toFixed(4)})\n`
      report += `      üìä 50 —à–∞–≥–æ–≤: ${service.example50Steps.finalPriceStars} ‚≠ê\n`
      report += `      üìä 100 —à–∞–≥–æ–≤: ${service.example100Steps.finalPriceStars} ‚≠ê\n\n`
    })
  }

  // –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å—ã
  if (analysis.videoServices.length > 0) {
    report += 'üé• –í–ò–î–ï–û –°–ï–†–í–ò–°–´ (5 —Å–µ–∫):\n'
    analysis.videoServices
      .sort((a, b) => b.finalPriceStars - a.finalPriceStars)
      .slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
      .forEach(service => {
        report += `   ${service.service}:\n`
        report += `      üíµ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${service.baseCostUSD.toFixed(3)}\n`
        report += `      ‚≠ê –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${service.finalPriceStars} ‚≠ê ($${service.finalPriceUSD.toFixed(2)})\n`
        report += `      üìä –ù–∞—Ü–µ–Ω–∫–∞: +${service.markupPercent.toFixed(1)}%\n\n`
      })
  }

  // –ü–æ–¥–ø–∏—Å–∫–∏
  report += 'üíé –ü–û–î–ü–ò–°–ö–ò:\n'
  report += `   üì∏ Neu—Ä–æPhoto: ${analysis.subscriptions.neurophoto.priceRUB} ‚ÇΩ ($${analysis.subscriptions.neurophoto.priceUSD.toFixed(2)})\n`
  report += `   üé• NeuroVideo: ${analysis.subscriptions.neurovideo.priceRUB} ‚ÇΩ ($${analysis.subscriptions.neurovideo.priceUSD.toFixed(2)})\n\n`

  // –ü—Ä–æ–±–ª–µ–º—ã
  if (analysis.inconsistencies.length > 0) {
    report += '‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n'
    analysis.inconsistencies.forEach(issue => {
      report += `   ${issue}\n`
    })
    report += '\n'
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (analysis.recommendations.length > 0) {
    report += 'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n'
    analysis.recommendations.forEach(rec => {
      report += `   ${rec}\n`
    })
    report += '\n'
  }

  return report
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { analyzePricingSystem, formatPricingReport }

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
async function runPricingAnalysis() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...')

    const analysis = analyzePricingSystem()
    const report = formatPricingReport(analysis)

    console.log(report)

    if (analysis.inconsistencies.length > 0) {
      console.log('\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ò!')
      process.exit(1)
    } else {
      console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–ê!')
      process.exit(0)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error)
    process.exit(1)
  }
}

if (require.main === module) {
  runPricingAnalysis()
}
