import { MyContext } from '@/interfaces'
import { Logger as logger } from '@/utils/logger'
import { getStarsWord } from '@/utils/getStarsWord'

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function sendBalanceMessage(
  ctx: MyContext,
  balance: number,
  isRu: boolean
): Promise<void> {
  try {
    const message = isRu
      ? `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ${getStarsWord(balance)}`
      : `üí∞ Your balance: ${balance} stars`

    await ctx.reply(message)
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ',
      description: 'Error sending balance message',
      error: error instanceof Error ? error.message : 'Unknown error',
      balance,
      isRu,
    })
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
 */
export async function sendInsufficientStarsMessage(
  ctx: MyContext,
  balance: number,
  isRu: boolean
): Promise<void> {
  try {
    const message = isRu
      ? `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} ${getStarsWord(
          balance
        )}`
      : `‚ö†Ô∏è Insufficient stars balance. Current balance: ${balance} stars`

    await ctx.reply(message)
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ',
      description: 'Error sending insufficient stars message',
      error: error instanceof Error ? error.message : 'Unknown error',
      balance,
      isRu,
    })
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function sendCostMessage(
  ctx: MyContext,
  cost: number,
  isRu: boolean
): Promise<void> {
  try {
    const message = isRu
      ? `üí´ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏: ${cost} ${getStarsWord(cost)}`
      : `üí´ Operation cost: ${cost} stars`

    await ctx.reply(message)
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Error sending cost message',
      error: error instanceof Error ? error.message : 'Unknown error',
      cost,
      isRu,
    })
  }
} 