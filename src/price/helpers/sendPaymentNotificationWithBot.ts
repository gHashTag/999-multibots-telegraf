import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

export async function sendPaymentNotificationWithBot({
  bot,
  groupId,
  telegram_id,
  username,
  amount,
  stars,
}: {
  bot: Telegraf<MyContext>
  groupId: string
  telegram_id: string
  username: string
  amount: string
  stars: number
}) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ sendMessage
    if (!bot.telegram?.sendMessage) {
      logger.error(
        '‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ sendMessage:',
        {
          description:
            'Telegram client not initialized or missing sendMessage method',
          hasTelegram: !!bot.telegram,
          methods: bot.telegram ? Object.keys(bot.telegram) : [],
        }
      )
      throw new Error('Telegram client not properly initialized')
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    // –î–æ–±–∞–≤–ª—è–µ–º @ –∫ groupId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const formattedGroupId = groupId.startsWith('@') ? groupId : `@${groupId}`

    await bot.telegram.sendMessage(
      formattedGroupId,
      `üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (Telegram ID: ${telegram_id}) –æ–ø–ª–∞—Ç–∏–ª ${amount} —Ä—É–±–ª–µ–π –∏ –ø–æ–ª—É—á–∏–ª ${stars} –∑–≤–µ–∑–¥.`
    )

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É:', {
      description: 'Group notification sent',
      groupId: formattedGroupId,
    })

    return true
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:', {
      description: 'Error sending payment notification',
      error: error?.message || error,
      response: error?.response,
      groupId,
    })
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ')
  }
}
