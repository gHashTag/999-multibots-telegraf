import { MyContext } from '@/interfaces'
import { Telegraf } from 'telegraf'

export const sendBalanceMessage = async (
  ctxOrTelegramId: MyContext | string,
  newBalance: number,
  cost: number,
  isRu: boolean,
  bot?: Telegraf<MyContext>
) => {
  if (typeof ctxOrTelegramId === 'string') {
    // –í–∞—Ä–∏–∞–Ω—Ç —Å telegram_id
    const telegramId = ctxOrTelegramId

    if (!bot) {
      console.error('üî• –û—à–∏–±–∫–∞ –≤ sendBalanceMessage:', {
        description: 'Bot instance is required when using telegram_id',
      })
      return
    }

    await bot.telegram.sendMessage(
      telegramId,
      isRu
        ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toFixed(2)} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(
            2
          )} ‚≠êÔ∏è`
        : `Cost: ${cost.toFixed(2)} ‚≠êÔ∏è\nYour balance: ${newBalance.toFixed(
            2
          )} ‚≠êÔ∏è`
    )
  } else {
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å MyContext
    const ctx = ctxOrTelegramId

    await ctx.telegram.sendMessage(
      ctx.from?.id?.toString() || '',
      isRu
        ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost.toFixed(2)} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(
            2
          )} ‚≠êÔ∏è`
        : `Cost: ${cost.toFixed(2)} ‚≠êÔ∏è\nYour balance: ${newBalance.toFixed(
            2
          )} ‚≠êÔ∏è`
    )
  }
}
