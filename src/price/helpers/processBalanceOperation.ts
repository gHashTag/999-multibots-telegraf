/**
 * DEPRECATED: –≠—Ç–æ—Ç —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ –±—É–¥—É—â–µ–º.
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ src/inngest-functions/paymentProcessor.ts
 * 
 * –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ processPaymentFunction —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è payment/process:
 * 
 * await inngest.send({
 *   name: 'payment/process',
 *   data: {
 *     telegram_id: user.telegram_id,
 *     paymentAmount: amount,
 *     is_ru: user.is_ru,
 *     bot_name: user.bot_name,
 *     description: 'Payment description',
 *     operation_id: uniqueId
 *   }
 * });
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
 */

import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { BalanceOperationResult, MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedPayments = new Map<string, BalanceOperationResult>();

type BalanceOperationProps = {
  ctx?: MyContext
  model?: string
  telegram_id: number
  paymentAmount: number
  is_ru: boolean
  bot_name?: string
  description?: string
  bot?: any
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  operation_id?: string
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
 */
async function safeSendMessage(bot: any, telegram_id: number, message: string): Promise<boolean> {
  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.debug('ü§ñ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞:', {
      description: 'Bot object structure',
      hasBot: !!bot,
      hasContext: !!bot?.context,
      hasTelegram: !!bot?.telegram,
      telegramType: typeof bot?.telegram,
      hasOptions: !!bot?.options,
      hasSendMessage: typeof bot?.sendMessage === 'function',
      hasTelegramSendMessage: typeof bot?.telegram?.sendMessage === 'function'
    });

    if (!bot) {
      logger.warn('‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        description: 'Bot not found for sending message',
        telegram_id
      });
      return false;
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
    if (typeof bot.telegram?.sendMessage === 'function') {
      await bot.telegram.sendMessage(telegram_id, message);
      return true;
    } 
    
    if (typeof bot.sendMessage === 'function') {
      await bot.sendMessage(telegram_id, message);
      return true;
    }

    if (bot.telegram && typeof bot.telegram === 'object') {
      // –ï—Å–ª–∏ telegram - –æ–±—ä–µ–∫—Ç, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç sendMessage, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram –æ–±—ä–µ–∫—Ç–∞:', {
        description: 'Checking telegram object structure',
        properties: Object.keys(bot.telegram)
      });
    }

    logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      description: 'No method found for sending message',
      telegram_id,
      botType: typeof bot
    });
    return false;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id
    });
    return false;
  }
}

// –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
async function initOperation(props: BalanceOperationProps): Promise<{ 
  opId: string; 
  cachedResult?: BalanceOperationResult;
  shouldContinue: boolean;
}> {
  const { telegram_id, paymentAmount, bot_name, operation_id } = props;
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
  const opId = operation_id || `${telegram_id}-${paymentAmount}-${new Date().getTime()}`;
  
  logger.info('üöÄ –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Step 1: Operation initialization',
    telegram_id,
    paymentAmount,
    operation_id: opId,
    bot_name
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
  if (processedPayments.has(opId)) {
    const cachedResult = processedPayments.get(opId);
    logger.info('üîÑ –ù–∞–π–¥–µ–Ω –∫–µ—à –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
      description: 'Found cached operation, skipping processing',
      telegram_id,
      operation_id: opId,
      cached_result: cachedResult
    });
    return { opId, cachedResult, shouldContinue: false };
  }
  
  return { opId, shouldContinue: true };
}

// –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validateInputData(props: BalanceOperationProps, opId: string): {
  isValid: boolean;
  errorResult?: BalanceOperationResult;
} {
  const { telegram_id, paymentAmount } = props;
  
  logger.info('üßê –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
    description: 'Step 2: Input data validation',
    telegram_id,
    payment_amount_type: typeof paymentAmount,
    payment_amount_value: paymentAmount
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
  if (!telegram_id) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
      description: 'Missing telegram_id',
      telegram_id
    });
    
    const errorResult = {
      newBalance: 0,
      success: false,
      error: 'telegram_id is required',
      modePrice: paymentAmount,
    };
    processedPayments.set(opId, errorResult);
    return { isValid: false, errorResult };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
  if (paymentAmount === undefined || paymentAmount === null || isNaN(paymentAmount)) {
    logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
      description: 'Invalid payment amount',
      paymentAmount,
      paymentAmount_type: typeof paymentAmount,
      telegram_id
    });
    
    const errorResult = {
      newBalance: 0,
      success: false,
      error: 'Payment amount is invalid',
      modePrice: paymentAmount || 0,
    };
    processedPayments.set(opId, errorResult);
    return { isValid: false, errorResult };
  }
  
  logger.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', {
    description: 'Input data is valid',
    telegram_id,
    paymentAmount
  });
  
  return { isValid: true };
}

// –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserBalance(props: BalanceOperationProps, opId: string): Promise<{
  success: boolean;
  currentBalance?: number;
  errorResult?: BalanceOperationResult;
}> {
  const { telegram_id, is_ru, ctx, bot } = props;
  
  logger.info('üí≥ –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
    description: 'Step 3: Getting user balance',
    telegram_id
  });
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const currentBalance = await getUserBalance(telegram_id);
  
  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
    description: 'Retrieved user balance',
    telegram_id,
    currentBalance,
    currentBalance_type: typeof currentBalance,
    isNull: currentBalance === null,
    isUndefined: currentBalance === undefined,
    isNaN: isNaN(Number(currentBalance))
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
  if (currentBalance === undefined || currentBalance === null || isNaN(Number(currentBalance))) {
    logger.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
      description: 'Invalid balance received',
      currentBalance,
      telegram_id
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = is_ru
      ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      : 'An error occurred while checking your balance. Please try again later or contact support.';
    
    let messageSent = false;
    
    if (ctx) {
      try {
        await ctx.telegram.sendMessage(telegram_id, errorMessage);
        messageSent = true;
      } catch (ctxError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Error sending balance error message',
          error: ctxError instanceof Error ? ctxError.message : 'Unknown error',
          telegram_id
        });
      }
    }
    
    if (!messageSent && bot) {
      messageSent = await safeSendMessage(bot, telegram_id, errorMessage);
    }
    
    const errorResult = {
      newBalance: 0,
      success: false,
      error: 'Invalid balance',
      modePrice: props.paymentAmount,
    };
    processedPayments.set(opId, errorResult);
    return { success: false, errorResult };
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  const safeCurrentBalance = Number(currentBalance);
  
  logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω:', {
    description: 'Balance successfully retrieved and converted',
    telegram_id,
    originalBalance: currentBalance,
    safeCurrentBalance,
    safeCurrentBalance_type: typeof safeCurrentBalance
  });
  
  return { success: true, currentBalance: safeCurrentBalance };
}

// –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
async function checkSufficientFunds(props: BalanceOperationProps, currentBalance: number, opId: string): Promise<{
  sufficient: boolean;
  errorResult?: BalanceOperationResult;
}> {
  const { telegram_id, paymentAmount, is_ru, ctx, bot } = props;
  
  logger.info('üßÆ –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤', {
    description: 'Step 4: Checking sufficient funds',
    telegram_id,
    currentBalance,
    requiredAmount: paymentAmount
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
  if (currentBalance < paymentAmount) {
    const message = is_ru
      ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /buy.'
      : 'Insufficient funds. Top up your balance by calling the /buy command.';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageSent = false;
    
    if (ctx) {
      try {
        await ctx.telegram.sendMessage(telegram_id, message);
        messageSent = true;
      } catch (ctxError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ ctx:', {
          description: 'Error sending message via ctx',
          error: ctxError instanceof Error ? ctxError.message : 'Unknown error',
          telegram_id
        });
      }
    }
    
    if (!messageSent && bot) {
      messageSent = await safeSendMessage(bot, telegram_id, message);
    }
    
    if (!messageSent) {
      logger.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
        description: 'Insufficient funds message not sent',
        telegram_id,
        currentBalance,
        requiredAmount: paymentAmount
      });
    }
    
    logger.info('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
      description: 'Insufficient funds',
      telegram_id,
      currentBalance,
      requiredAmount: paymentAmount,
      messageSent
    });
    
    const errorResult = {
      newBalance: currentBalance,
      success: false,
      error: message,
      modePrice: paymentAmount,
    };
    processedPayments.set(opId, errorResult);
    return { sufficient: false, errorResult };
  }
  
  logger.info('‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Sufficient funds for operation',
    telegram_id,
    currentBalance,
    requiredAmount: paymentAmount,
    remaining: currentBalance - paymentAmount
  });
  
  return { sufficient: true };
}

// –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
function calculateNewBalance(currentBalance: number, paymentAmount: number, telegram_id: number): {
  newBalance: number;
  paymentAmountNumber: number;
} {
  logger.info('üßÆ –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
    description: 'Step 5: Calculating new balance',
    telegram_id,
    currentBalance,
    paymentAmount
  });
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
  const paymentAmountNumber = Number(paymentAmount);
  const newBalance = parseFloat((currentBalance - paymentAmountNumber).toFixed(2));
  
  logger.info('‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:', {
    description: 'New balance calculated',
    telegram_id,
    currentBalance,
    paymentAmount: paymentAmountNumber,
    newBalance,
    newBalance_type: typeof newBalance
  });
  
  return { newBalance, paymentAmountNumber };
}

// –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updateBalanceInDB(props: BalanceOperationProps, balanceData: {
  currentBalance: number;
  newBalance: number;
  paymentAmountNumber: number;
}, opId: string): Promise<{
  success: boolean;
  result: BalanceOperationResult;
}> {
  const { telegram_id, is_ru, bot_name, description } = props;
  
  logger.info('üíæ –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î', {
    description: 'Step 6: Updating balance in database',
    telegram_id,
    currentBalance: balanceData.currentBalance,
    newBalance: balanceData.newBalance,
    paymentAmount: balanceData.paymentAmountNumber
  });
  
  try {
    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    logger.info('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º updateUserBalance:', {
      description: 'Parameters before calling updateUserBalance',
      telegram_id,
      telegram_id_type: typeof telegram_id,
      telegram_id_as_string: telegram_id.toString(),
      newBalance: balanceData.newBalance,
      newBalance_type: typeof balanceData.newBalance,
      paymentAmount: balanceData.paymentAmountNumber,
      paymentAmount_type: typeof balanceData.paymentAmountNumber,
      operation_type: 'outcome',
      payment_description: description || 'Payment for service',
      payment_bot_name: bot_name || 'system'
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
    const updateResult = await updateUserBalance(
      telegram_id.toString(),
      balanceData.newBalance,
      balanceData.paymentAmountNumber,
      'outcome',
      description || 'Payment for service',
      {
        bot_name: bot_name || 'system',
        language: is_ru ? 'ru' : 'en'
      }
    );
    
    logger.info('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
      description: 'Balance update result',
      updateResult,
      telegram_id
    });

    if (!updateResult) {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ë–î:', {
        description: 'Failed to update balance in DB',
        telegram_id,
        currentBalance: balanceData.currentBalance,
        newBalance: balanceData.newBalance
      });
      
      const errorResult = {
        newBalance: balanceData.currentBalance,
        success: false,
        error: 'Database error while updating balance',
        modePrice: balanceData.paymentAmountNumber,
        prevBalance: balanceData.currentBalance,
      };
      processedPayments.set(opId, errorResult);
      return { success: false, result: errorResult };
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      description: 'Balance successfully updated',
      telegram_id,
      oldBalance: balanceData.currentBalance,
      newBalance: balanceData.newBalance,
      difference: balanceData.paymentAmountNumber
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const successResult = {
      newBalance: balanceData.newBalance,
      success: true,
      modePrice: balanceData.paymentAmountNumber,
      prevBalance: balanceData.currentBalance,
    };
    processedPayments.set(opId, successResult);
    
    return { success: true, result: successResult };
  } catch (dbError) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î:', {
      description: 'Error updating balance in DB',
      error: dbError instanceof Error ? dbError.message : 'Unknown error',
      stack: dbError instanceof Error ? dbError.stack : undefined,
      telegram_id,
      currentBalance: balanceData.currentBalance,
      newBalance: balanceData.newBalance
    });
    
    const errorResult = {
      newBalance: balanceData.currentBalance,
      success: false,
      error: 'Database error while updating balance',
      modePrice: balanceData.paymentAmountNumber,
    };
    processedPayments.set(opId, errorResult);
    return { success: false, result: errorResult };
  }
}

// –®–ê–ì 7: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
function cleanupCache(): void {
  logger.info('üßπ –®–ê–ì 7: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ', {
    description: 'Step 7: Cleanup cache if needed',
    cacheSize: processedPayments.size
  });
  
  // –ö–µ—à –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
  if (processedPayments.size > 1000) {
    const keysToDelete = Array.from(processedPayments.keys()).slice(0, 200);
    logger.info('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞:', {
      description: 'Deleting old records from cache',
      numberOfRecordsToDelete: keysToDelete.length
    });
    
    keysToDelete.forEach(key => processedPayments.delete(key));
    
    logger.info('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω:', {
      description: 'Cache cleaned',
      newCacheSize: processedPayments.size
    });
  } else {
    logger.info('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', {
      description: 'Cache cleanup not required',
      cacheSize: processedPayments.size
    });
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∞–∑–±–∏—Ç–∞—è –Ω–∞ —à–∞–≥–∏
export const processBalanceOperation = async ({
  ctx,
  telegram_id,
  paymentAmount,
  is_ru,
  bot,
  bot_name,
  description,
  operation_id
}: BalanceOperationProps): Promise<BalanceOperationResult> => {
  try {
    logger.info('üîµ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting payment processing',
      telegram_id,
      paymentAmount,
      bot_name
    });
    
    // –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    const { opId, cachedResult, shouldContinue } = await initOperation({
      ctx, telegram_id, paymentAmount, is_ru, bot, bot_name, description, operation_id
    });
    
    if (!shouldContinue) {
      logger.info('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
        description: 'Returning cached result',
        telegram_id,
        operation_id: opId
      });
      return cachedResult;
    }
    
    // –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = validateInputData({ 
      ctx, telegram_id, paymentAmount, is_ru, bot, bot_name, description 
    }, opId);
    
    if (!validationResult.isValid) {
      logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
        description: 'Validation failed',
        telegram_id,
        operation_id: opId
      });
      return validationResult.errorResult;
    }
    
    // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balanceResult = await checkUserBalance({ 
      ctx, telegram_id, paymentAmount, is_ru, bot, bot_name, description 
    }, opId);
    
    if (!balanceResult.success) {
      logger.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
        description: 'Balance check failed',
        telegram_id,
        operation_id: opId
      });
      return balanceResult.errorResult;
    }
    
    // –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
    const fundsResult = await checkSufficientFunds(
      { ctx, telegram_id, paymentAmount, is_ru, bot, bot_name, description },
      balanceResult.currentBalance,
      opId
    );
    
    if (!fundsResult.sufficient) {
      logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', {
        description: 'Insufficient funds',
        telegram_id,
        operation_id: opId
      });
      return fundsResult.errorResult;
    }
    
    // –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const { newBalance, paymentAmountNumber } = calculateNewBalance(
      balanceResult.currentBalance,
      paymentAmount,
      telegram_id
    );
    
    // –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await updateBalanceInDB(
      { ctx, telegram_id, paymentAmount, is_ru, bot, bot_name, description },
      { 
        currentBalance: balanceResult.currentBalance, 
        newBalance,
        paymentAmountNumber
      },
      opId
    );
    
    // –®–ê–ì 7: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    cleanupCache();
    
    logger.info('üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Payment processing completed',
      telegram_id,
      operation_id: opId,
      success: updateResult.success
    });
    
    return updateResult.result;
  } catch (error) {
    logger.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ processBalanceOperation:', {
      description: 'Unexpected error in processBalanceOperation',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id
    });
    throw error;
  }
}
