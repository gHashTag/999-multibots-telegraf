import { MyContext } from '@/types'
import { calculateFinalPrice } from '@/price/helpers'
import { findModelByTitle } from '@/menu/videoModelMenu'
import { IMAGES_MODELS } from '@/price/models/IMAGES_MODELS'

export async function validateAndCalculateVideoModelPrice(
  videoModel: string,
  currentBalance: number,
  isRu: boolean,
  ctx: MyContext,
  inputType: 'text' | 'image'
): Promise<{ amount: number; modelId: string } | null> {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:', {
    description: 'Starting model validation',
    videoModel,
    currentBalance,
    isRu,
    inputType,
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (videoModel.toLowerCase() in IMAGES_MODELS) {
    console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', {
      description: 'Attempt to use image model for video',
      model: videoModel,
    })
    await ctx.reply(
      isRu
        ? '‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.'
        : '‚ùå This model is for image generation. Please use the /image command for image generation.'
    )
    return null
  }

  const modelId = findModelByTitle(videoModel, inputType)
  console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏:', {
    description: 'Model search result',
    videoModel,
    modelId,
    found: !!modelId,
  })

  if (!modelId) {
    console.log('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', {
      description: 'Model not found',
      videoModel,
      inputType,
    })
    await ctx.reply('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    return null
  }

  const amount = calculateFinalPrice(modelId)
  console.log('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', {
    description: 'Price calculation',
    modelId,
    amount,
    currentBalance,
  })

  ctx.session.amount = amount
  if (currentBalance < amount) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
      description: 'Insufficient funds',
      currentBalance,
      amount,
      difference: amount - currentBalance,
    })
    await ctx.reply(
      isRu ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' : 'Insufficient balance'
    )
    return null
  }

  console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', {
    description: 'Validation successful',
    modelId,
    amount,
  })

  return {
    amount,
    modelId,
  }
}
