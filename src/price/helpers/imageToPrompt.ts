import { inngest } from '@/core/inngest/clients'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { getBotByName } from '@/core/bot'
import { getUserByTelegramIdString } from '@/core/supabase'

export async function generateImageToPrompt(
  imageUrl: string,
  telegram_id: string,
  ctx: MyContext,
  isRu: boolean,
  botName: string
): Promise<null> {
  if (!botName) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –±–æ—Ç–∞', {
      description: 'Bot name is missing',
      telegram_id,
    })
    throw new Error('Bot name is required')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
  try {
    const { bot } = getBotByName(botName)
    if (!bot) {
      logger.error('‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        description: 'Bot not found',
        telegram_id,
        botName,
      })
      throw new Error(`Bot ${botName} not found`)
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞', {
      description: 'Error checking bot',
      telegram_id,
      botName,
      error: error instanceof Error ? error.message : 'Unknown error',
    })
    throw error
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await getUserByTelegramIdString(telegram_id)
  if (!user) {
    logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', {
      description: 'User not found',
      telegram_id,
      botName,
    })
    throw new Error('User not found')
  }

  if (user.bot_name !== botName) {
    logger.error('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'User bot mismatch',
      telegram_id,
      userBot: user.bot_name,
      requestedBot: botName,
    })
    throw new Error('User does not have access to this bot')
  }

  logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è image/to-prompt.generate', {
    description: 'Sending image/to-prompt.generate event',
    imageUrl,
    telegram_id,
    isRu,
    botName,
  })

  try {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    const cost = calculateModeCost({
      mode: ModeEnum.ImageToPrompt,
      steps: 1,
    })

    logger.info('üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏', {
      description: 'Cost calculated',
      cost_per_image: cost.stars,
      telegram_id,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
    await inngest.send({
      id: `image-to-prompt-${telegram_id}-${Date.now()}-${uuidv4()}`,
      name: 'image/to-prompt.generate',
      data: {
        image: imageUrl,
        telegram_id,
        username: ctx.from?.username,
        is_ru: isRu,
        bot_name: botName,
        cost_per_image: cost.stars,
        metadata: {
          service_type: ModeEnum.ImageToPrompt,
          bot_name: botName,
          language: isRu ? 'ru' : 'en',
        },
      },
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Event sent successfully',
      telegram_id,
      botName,
    })

    return null
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Error sending event',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id,
      botName,
    })

    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while analyzing the image. Please try again later.'
    )

    return null
  }
}
