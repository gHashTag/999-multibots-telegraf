import { SubscriptionType } from '@/interfaces/subscription.interface'

// –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (COST_PER_STEP_IN_STARS, STAR_COST –∏ —Ç.–¥.)
// –û–Ω–∏ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ pricing.config.ts

// // –°—Ç–æ–∏–º–æ—Å—Ç—å —à–∞–≥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∏ —Ä—É–±–ª—è—Ö (–£–¥–∞–ª–µ–Ω–æ, —Ç.–∫. –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
// export const stepCostInDollars = STAR_COST * COST_PER_STEP_IN_STARS
// export const stepCostInRubles = stepCostInDollars * RUBLES_TO_DOLLARS_RATE

export interface PaymentOption {
  amount: number
  stars: string
  subscription?: SubscriptionType
}

// –û—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
export const paymentOptionsPlans: PaymentOption[] = [
  { amount: 1110, stars: '476', subscription: SubscriptionType.NEUROPHOTO },
  { amount: 2999, stars: '1303', subscription: SubscriptionType.NEUROBASE },
  {
    amount: 75000,
    stars: '32608',
    subscription: SubscriptionType.NEUROBLOGGER,
  },
]

export const paymentOptions: PaymentOption[] = [
  { amount: 500, stars: '217' },
  { amount: 1000, stars: '434' },
  { amount: 2000, stars: '869' },
  { amount: 5000, stars: '2173' },
  { amount: 10000, stars: '4347' },
  { amount: 1, stars: '1' },
  // { amount: 10, stars: '6' },
]

// –£–¥–∞–ª–µ–Ω—ã ConversionRates, conversionRates, conversionRatesV2

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–≤–ª—è–µ–º, —Ç.–∫. –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
export interface CostDetails {
  steps: number
  stars: number
  rubles: number
  dollars: number
}

// –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è calculateCost
// export function calculateCost(...) { ... }

// –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/*
// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
export function formatCost(cost: CostDetails, isRu: boolean): string {
  if (isRu) {
    return `${cost.steps} —à–∞–≥–æ–≤ - ${cost.stars.toFixed(
      0
    )}‚≠ê / ${cost.rubles.toFixed(0)}‚ÇΩ`
  }
  return `${cost.steps} steps - ${cost.stars.toFixed(
    0
  )}‚≠ê / $${cost.dollars.toFixed(2)}`
}

export function generateCostMessage(
  steps: number[],
  isRu: boolean,
  version: 'v1' | 'v2' = 'v1'
): string {
  const baseMessage = isRu
    ? 'üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.\n\nüìà –ß–µ–º –±–æ–ª—å—à–µ —à–∞–≥–æ–≤, —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –¥–æ—Ä–æ–∂–µ. üí∞\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n'
    : 'üî¢ Please choose the number of steps for model training.\n\nüìà The more steps, the better the quality, but it will cost more. üí∞\n\nüí∞ Cost:\n'

  // –≠—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ calculateCost
  // const costDetails = steps.map(steps => calculateCost(steps, version))
  // return (
  //   baseMessage + costDetails.map(detail => formatCost(detail, isRu)).join('\n')
  // )
  logger.warn('generateCostMessage requires calculateCost, which was removed. Returning base message only.');
  return baseMessage; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}
*/

// –û—Å—Ç–∞–≤–ª—è–µ–º stepOptions
export const stepOptions = {
  v1: [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000],
  v2: [100, 200, 300, 400, 500, 600, 700, 800, 1000],
}

// –£–¥–∞–ª–µ–Ω costDetails
// export const costDetails = { ... }
