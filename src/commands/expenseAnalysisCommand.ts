import { Composer, Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { supabase } from '@/core/supabase/client'
import { ADMIN_IDS_ARRAY } from '@/config'

const composer = new Composer<MyContext>()

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
composer.command('expense_analysis', async ctx => {
  const userId = ctx.from?.id
  if (!userId || !ADMIN_IDS_ARRAY.includes(userId)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
    return
  }

  try {
    await ctx.reply('üìä –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∑–≤–µ–∑–¥–∞—Ö –∑–∞ –º–∞–π 2025...')

    const result = await performExpenseAnalysis()

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    const messages = splitMessage(result)

    for (const message of messages) {
      await ctx.reply(message, { parse_mode: 'HTML' })
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ expense_analysis:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤')
  }
})

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
async function performExpenseAnalysis(): Promise<string> {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  let allExpenses: any[] = []
  let from = 0
  const batchSize = 1000
  let hasMore = true

  while (hasMore) {
    const { data: batchExpenses, error } = await supabase
      .from('payments_v2')
      .select(
        'bot_name, cost, stars, telegram_id, description, type, payment_date'
      )
      .eq('status', 'COMPLETED')
      .eq('type', 'MONEY_OUTCOME')
      .gte('payment_date', '2025-05-01')
      .lt('payment_date', '2025-06-01')
      .range(from, from + batchSize - 1)
      .order('payment_date', { ascending: false })

    if (error) throw error

    if (!batchExpenses || batchExpenses.length === 0) {
      hasMore = false
    } else {
      allExpenses = allExpenses.concat(batchExpenses)
      from += batchSize

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
      if (batchExpenses.length < batchSize) {
        hasMore = false
      }
    }
  }

  const expenses = allExpenses

  // 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ bot_name
  const botExpenses: { [botName: string]: number } = {}
  const anomalies: any[] = []
  let totalStars = 0

  expenses.forEach(expense => {
    const cost = parseFloat(expense.cost || '0')
    totalStars += cost

    if (expense.bot_name && expense.bot_name.trim() !== '') {
      // –ï—Å—Ç—å bot_name - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      if (!botExpenses[expense.bot_name]) {
        botExpenses[expense.bot_name] = 0
      }
      botExpenses[expense.bot_name] += cost
    } else {
      // –ù–ï–¢ bot_name - —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è!
      anomalies.push(expense)
    }
  })

  // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  let report = '‚≠ê <b>–ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í –í –ó–í–ï–ó–î–ê–•</b>\n'
  report += 'üìÖ <b>–ú–∞–π 2025</b>\n\n'

  report += `üí≥ <b>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> ${expenses.length.toLocaleString()}\n`
  report += `‚≠ê <b>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</b> ${totalStars.toLocaleString()}‚≠ê\n`
  report += `üí∞ <b>–ö—É—Ä—Å:</b> $${(505.11 / totalStars).toFixed(6)} –∑–∞ ‚≠ê\n\n`

  // 3. –†–∞—Å—Ö–æ–¥—ã –ø–æ –±–æ—Ç–∞–º
  const sortedBots = Object.entries(botExpenses).sort(([, a], [, b]) => b - a)

  report += 'ü§ñ <b>–†–ê–°–•–û–î–´ –ü–û –ë–û–¢–ê–ú:</b>\n'
  sortedBots.forEach(([botName, cost], index) => {
    const percentage = ((cost / totalStars) * 100).toFixed(1)
    const dollars = (cost * (505.11 / totalStars)).toFixed(2)
    report += `${index + 1}. <code>${botName}</code>\n`
    report += `   üí∞ ${cost.toLocaleString()}‚≠ê (${percentage}%) = $${dollars}\n`
  })

  // 4. –ê–Ω–æ–º–∞–ª–∏–∏
  if (anomalies.length > 0) {
    const anomalyExpenses = anomalies.reduce(
      (sum, a) => sum + parseFloat(a.cost || '0'),
      0
    )
    const anomalyPercentage = ((anomalyExpenses / totalStars) * 100).toFixed(1)

    report += `\nüö® <b>–ê–ù–û–ú–ê–õ–ò–ò:</b>\n`
    report += `‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ bot_name: ${anomalies.length}\n`
    report += `üí∏ –†–∞—Å—Ö–æ–¥—ã –∞–Ω–æ–º–∞–ª–∏–π: ${anomalyExpenses.toFixed(0)}‚≠ê (${anomalyPercentage}%)\n`
  } else {
    report += '\n‚úÖ <b>–ê–ù–û–ú–ê–õ–ò–ô –ù–ï–¢!</b>\n'
    report += '–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–æ—Ç–∞–º\n'
  }

  // 5. –¢–æ–ø –¥–Ω–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const dailyStats: { [date: string]: { transactions: number; cost: number } } =
    {}
  expenses.forEach(expense => {
    const date = expense.payment_date.split('T')[0]
    if (!dailyStats[date]) {
      dailyStats[date] = { transactions: 0, cost: 0 }
    }
    dailyStats[date].transactions++
    dailyStats[date].cost += parseFloat(expense.cost || '0')
  })

  const sortedDays = Object.entries(dailyStats)
    .sort(([, a], [, b]) => b.cost - a.cost)
    .slice(0, 5)

  report += '\nüìÖ <b>–¢–û–ü-5 –î–ù–ï–ô –ü–û –†–ê–°–•–û–î–ê–ú:</b>\n'
  sortedDays.forEach(([date, stats], index) => {
    report += `${index + 1}. ${date}: ${stats.cost.toLocaleString()}‚≠ê (${stats.transactions} —Ç—Ä–∞–Ω–∑.)\n`
  })

  return report
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function splitMessage(text: string): string[] {
  const maxLength = 4000 // Telegram limit is 4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
  const messages: string[] = []

  if (text.length <= maxLength) {
    return [text]
  }

  const parts = text.split('\n\n') // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
  let currentMessage = ''

  for (const part of parts) {
    if ((currentMessage + part).length > maxLength) {
      if (currentMessage) {
        messages.push(currentMessage.trim())
        currentMessage = part + '\n\n'
      } else {
        // –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        const lines = part.split('\n')
        for (const line of lines) {
          if ((currentMessage + line + '\n').length > maxLength) {
            if (currentMessage) {
              messages.push(currentMessage.trim())
              currentMessage = line + '\n'
            } else {
              messages.push(line)
            }
          } else {
            currentMessage += line + '\n'
          }
        }
        currentMessage += '\n'
      }
    } else {
      currentMessage += part + '\n\n'
    }
  }

  if (currentMessage.trim()) {
    messages.push(currentMessage.trim())
  }

  return messages
}

export default composer
