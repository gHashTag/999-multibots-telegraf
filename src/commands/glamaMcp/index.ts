import { Composer } from 'telegraf'
import { glamaMcpService } from '@/services/glamaMcpService'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Glama MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
 */
const glamaMcpCommand = new Composer<MyContext>()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /glamaservers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
glamaMcpCommand.command('glamaservers', async ctx => {
  try {
    await ctx.reply('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP...')

    const servers = await glamaMcpService.getServers()

    if (!servers || servers.length === 0) {
      return await ctx.reply('‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä—ã Glama MCP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    }

    const serverList = servers
      .map((server, index) => {
        return `${index + 1}. <b>${server.name}</b> ‚Äî ID: <code>${
          server.id
        }</code>`
      })
      .join('\n')

    await ctx.replyWithHTML(
      `<b>üìã –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${servers.length}</b>\n\n${serverList}\n\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /glamaserver ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.'
    )

    logger.info({
      message: '‚úÖ –ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP',
      count: servers.length,
      chat_id: ctx.chat?.id,
      user_id: ctx.from?.id,
    })

    return true
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP',
      error: error instanceof Error ? error.message : 'Unknown error',
      chat_id: ctx.chat?.id,
      user_id: ctx.from?.id,
    })

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
    return false
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /glamaserver –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
glamaMcpCommand.command('glamaserver', async ctx => {
  try {
    const serverId = ctx.message.text.split(' ')[1]

    if (!serverId) {
      return await ctx.reply(
        '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞.\n' +
          '–ü—Ä–∏–º–µ—Ä: /glamaserver server-id-123'
      )
    }

    await ctx.reply(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ ${serverId}...`)

    const server = await glamaMcpService.getServerById(serverId)

    const environmentVars = server.environmentVariablesJsonSchema?.required
      ?.length
      ? `\n\n<b>–¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</b>\n` +
        server.environmentVariablesJsonSchema.required
          .map(v => `<code>${v}</code>`)
          .join('\n')
      : ''

    const repoUrl = server.repository?.url
      ? `\n<b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <a href="${server.repository.url}">${server.repository.url}</a>`
      : ''

    const license = server.spdxLicense
      ? `\n<b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> ${server.spdxLicense.name}`
      : ''

    await ctx.replyWithHTML(
      `<b>üì° –°–µ—Ä–≤–µ—Ä: ${server.name}</b>\n` +
        `<b>ID:</b> <code>${server.id}</code>\n` +
        `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${server.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}` +
        repoUrl +
        license +
        environmentVars +
        `\n\n<a href="${server.url}">–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–µ—Ä–≤–µ—Ä–∞</a>`
    )

    logger.info({
      message: '‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP',
      serverId,
      chat_id: ctx.chat?.id,
      user_id: ctx.from?.id,
    })

    return true
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP',
      error: error instanceof Error ? error.message : 'Unknown error',
      chat_id: ctx.chat?.id,
      user_id: ctx.from?.id,
    })

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
    return false
  }
})

export { glamaMcpCommand }
