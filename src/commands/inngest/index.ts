import { Composer } from 'telegraf'
import { MyContext } from '@/interfaces'
import { InngestService } from '../../services/inngest.service'

export const composer = new Composer<MyContext>()

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest
composer.command('inngest_test', async ctx => {
  try {
    const user = ctx.from
    await ctx.reply('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest...')

    const result = await InngestService.sendHelloWorldEvent({
      user_id: user?.id,
      username: user?.username,
      chat_id: ctx.chat?.id,
      bot_name: ctx.botInfo?.username,
    })

    await ctx.reply(
      `‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(
        result,
        null,
        2
      )}`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Inngest:', error)
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
composer.command('inngest_send', async ctx => {
  try {
    const args = ctx.message.text.split(' ')
    if (args.length < 2) {
      return ctx.reply(
        '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è: /inngest_send –∏–º—è.—Å–æ–±—ã—Ç–∏—è [–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON]'
      )
    }

    const eventName = args[1]
    let eventData = {}

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (args.length > 2) {
      try {
        const jsonStr = args.slice(2).join(' ')
        eventData = JSON.parse(jsonStr)
      } catch (e) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è')
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    eventData = {
      ...eventData,
      user_id: ctx.from?.id,
      username: ctx.from?.username,
      chat_id: ctx.chat?.id,
      bot_name: ctx.botInfo?.username,
    }

    await ctx.reply(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${eventName}" –≤ Inngest...`)
    const result = await InngestService.sendEvent(eventName, eventData)

    await ctx.reply(
      `‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(
        result,
        null,
        2
      )}`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è Inngest:', error)
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Inngest
composer.command('broadcast', async ctx => {
  try {
    const args = ctx.message.text.split(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 3) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/broadcast [imageUrl] [text]\n\n' +
          '–ü—Ä–∏–º–µ—Ä:\n/broadcast https://example.com/image.jpg –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
      )
    }

    const imageUrl = args[1]
    const text = args.slice(2).join(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!imageUrl.startsWith('http')) {
      return ctx.reply(
        '‚ö†Ô∏è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    if (!text || text.length < 3) {
      return ctx.reply('‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
    }

    const bot_name = ctx.botInfo?.username
    if (!bot_name) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞')
    }

    await ctx.reply('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...')

    const result = await InngestService.startBroadcast(imageUrl, text, {
      bot_name,
      sender_telegram_id: ctx.from?.id?.toString(),
      test_mode: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    })

    await ctx.reply(
      '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ Inngest!\n\n' +
        '‚ÑπÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å).\n' +
        '–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n' +
        `/broadcast_all ${imageUrl} ${text}`
    )

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
composer.command('broadcast_all', async ctx => {
  try {
    const args = ctx.message.text.split(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 3) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/broadcast_all [imageUrl] [text]\n\n' +
          '–ü—Ä–∏–º–µ—Ä:\n/broadcast_all https://example.com/image.jpg –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞!'
      )
    }

    const imageUrl = args[1]
    const text = args.slice(2).join(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!imageUrl.startsWith('http')) {
      return ctx.reply(
        '‚ö†Ô∏è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    if (!text || text.length < 10) {
      return ctx.reply(
        '‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)'
      )
    }

    const bot_name = ctx.botInfo?.username
    if (!bot_name) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞')
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
      '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!\n\n' +
        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n' +
        `/confirm_broadcast ${imageUrl} ${text.substring(0, 20)}...`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
composer.command('confirm_broadcast', async ctx => {
  try {
    const args = ctx.message.text.split(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 3) {
      return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    }

    const imageUrl = args[1]
    const text = args.slice(2).join(' ')

    const bot_name = ctx.botInfo?.username
    if (!bot_name) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞')
    }

    await ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...')

    const result = await InngestService.startBroadcast(imageUrl, text, {
      bot_name,
      sender_telegram_id: ctx.from?.id?.toString(),
      test_mode: false, // –†–µ–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    })

    await ctx.reply(
      '‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n' +
        '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã.'
    )

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error)
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    )
  }
})
