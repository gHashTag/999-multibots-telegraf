import { Composer } from 'telegraf'
import { MyContext } from '@/interfaces'
import { InngestService } from '../../services/inngest.service'

export const composer = new Composer<MyContext>()

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest
composer.command('inngest_test', async ctx => {
  try {
    const user = ctx.from
    await ctx.reply('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest...')

    const result = await InngestService.sendHelloWorldEvent({
      user_id: user?.id,
      username: user?.username,
      chat_id: ctx.chat?.id,
      bot_name: ctx.botInfo?.username,
    })

    await ctx.reply(
      `‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(
        result,
        null,
        2
      )}`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Inngest:', error)
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
composer.command('inngest_send', async ctx => {
  try {
    const args = ctx.message.text.split(' ')
    if (args.length < 2) {
      return ctx.reply(
        '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è: /inngest_send –∏–º—è.—Å–æ–±—ã—Ç–∏—è [–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON]'
      )
    }

    const eventName = args[1]
    let eventData = {}

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (args.length > 2) {
      try {
        const jsonStr = args.slice(2).join(' ')
        eventData = JSON.parse(jsonStr)
      } catch (e) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è')
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    eventData = {
      ...eventData,
      user_id: ctx.from?.id,
      username: ctx.from?.username,
      chat_id: ctx.chat?.id,
      bot_name: ctx.botInfo?.username,
    }

    await ctx.reply(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–±—ã—Ç–∏–µ "${eventName}" –≤ Inngest...`)
    const result = await InngestService.sendEvent(eventName, eventData)

    await ctx.reply(
      `‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(
        result,
        null,
        2
      )}`
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è Inngest:', error)
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
  }
})
