import { MyContext } from '../../interfaces'
import { ModeEnum } from '@/interfaces/modes'
import {
  calculateFinalStarPrice,
  CalculationParams,
  CostCalculationResult,
} from '@/price/calculator'
import {
  STAR_COST_USD,
  CURRENCY_RATES,
  MARKUP_MULTIPLIER,
} from '@/config/pricing.config'
import { logger } from '@/utils/logger'

// Helper function to get price in stars or return 'N/A' on error
const getPrice = (mode: ModeEnum, params?: CalculationParams): string => {
  try {
    const result = calculateFinalStarPrice(mode, params)
    if (result === null) {
      logger.warn('[priceCommand] Could not calculate price for mode', {
        mode,
        params,
      })
      return 'N/A'
    }
    // Show 0 for free services
    return result.stars === 0 ? '0' : result.stars.toString()
  } catch (error) {
    logger.error('[priceCommand] Error calculating price for mode', {
      mode,
      params,
      error,
    })
    return 'Error'
  }
}

export async function priceCommand(ctx: MyContext) {
  logger.info('Executing /price command', { userId: ctx.from?.id })
  const isRu = ctx.from?.language_code === 'ru'

  // --- Calculate specific prices ---
  const stepCost = getPrice(ModeEnum.DigitalAvatarBody, { steps: 1 })
  const textToImageCost = getPrice(ModeEnum.TextToImage)
  const imageToPromptCost = getPrice(ModeEnum.ImageToPrompt)
  const textToVideoCost = getPrice(ModeEnum.TextToVideo)
  const voiceCost = getPrice(ModeEnum.Voice)
  const textToSpeechCost = getPrice(ModeEnum.TextToSpeech)
  const imageToVideoCost = getPrice(ModeEnum.ImageToVideo)
  const lipSyncCost = getPrice(ModeEnum.LipSync)
  const voiceToTextCost = getPrice(ModeEnum.VoiceToText)
  const neuroPhotoCost = getPrice(ModeEnum.NeuroPhoto)

  // --- Calculate star cost in RUB ---
  let starCostRub = 'N/A'
  try {
    // Calculate base cost in RUB and apply markup implicitly included in calculateFinalStarPrice logic
    // Here we just show the effective rate based on config
    starCostRub = (
      STAR_COST_USD *
      MARKUP_MULTIPLIER *
      CURRENCY_RATES.USD_TO_RUB
    ).toFixed(2)
  } catch (error) {
    logger.error('[priceCommand] Error calculating star cost in RUB', { error })
  }

  const message = isRu
    ? `
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ (–≤ ‚≠êÔ∏è):</b>
- <b>–¶–∏—Ñ—Ä–æ–≤–æ–π –ê–≤–∞—Ç–∞—Ä</b> (1 —à–∞–≥): ${stepCost}
- <b>–¢–µ–∫—Å—Ç –≤ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ${textToImageCost}
- <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ü—Ä–æ–º–ø—Ç:</b> ${imageToPromptCost}
- <b>–¢–µ–∫—Å—Ç –≤ –í–∏–¥–µ–æ:</b> ${textToVideoCost} (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏)
- <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –í–∏–¥–µ–æ:</b> ${imageToVideoCost} (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏)
- <b>–ì–æ–ª–æ—Å (–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ):</b> ${voiceCost}
- <b>–¢–µ–∫—Å—Ç –≤ –†–µ—á—å:</b> ${textToSpeechCost}
- <b>Lip Sync (–ê–Ω–∏–º–∞—Ü–∏—è –≥—É–±):</b> ${lipSyncCost}
- <b>–ì–æ–ª–æ—Å –≤ –¢–µ–∫—Å—Ç:</b> ${voiceToTextCost}
- <b>–ù–µ–π—Ä–æ–§–æ—Ç–æ:</b> ${neuroPhotoCost}

<i>(–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏)</i>

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 ‚≠êÔ∏è:</b> ~${starCostRub} —Ä—É–±.
(–ú–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å–æ–≤)

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy
    `
    : `
<b>üí∞ Service Prices (in ‚≠êÔ∏è):</b>
- <b>Digital Avatar</b> (1 step): ${stepCost}
- <b>Text to Image:</b> ${textToImageCost}
- <b>Image to Prompt:</b> ${imageToPromptCost}
- <b>Text to Video:</b> ${textToVideoCost} (model dependent)
- <b>Image to Video:</b> ${imageToVideoCost} (model dependent)
- <b>Voice Cloning:</b> ${voiceCost}
- <b>Text to Speech:</b> ${textToSpeechCost}
- <b>Lip Sync:</b> ${lipSyncCost}
- <b>Voice to Text:</b> ${voiceToTextCost}
- <b>NeuroPhoto:</b> ${neuroPhotoCost}

<i>(Video/image costs may vary depending on the selected model)</i>

<b>üíµ Cost of 1 ‚≠êÔ∏è:</b> ~$${STAR_COST_USD.toFixed(3)} USD
(Displayed RUB price is approximate)

To top up your balance, use the /buy command
    `

  await ctx.reply(message, { parse_mode: 'HTML' })
}
