// import { SYSTEM_CONFIG } from '@/price/constants/modelsCost' // –£–¥–∞–ª–µ–Ω–æ
// import { getUserLanguage } from '@/handlers' // –£–¥–∞–ª–µ–Ω–æ
// import { minCost, maxCost, modeCosts } from '@/price/constants/modelsCost' // –£–¥–∞–ª–µ–Ω–æ
// import { conversionRates } from '@/price/priceCalculator' // –£–¥–∞–ª–µ–Ω–æ
import { ModeEnum } from '@/interfaces'
import { MyContext } from '@/interfaces'
import { calculateFinalStarPrice } from '@/pricing/calculator' // <-- –ò–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å
import { isRussian } from '@/helpers/language' // <-- –ò–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å
import { logger } from '@/utils/logger' // <-- –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä

// –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è getCost
// const getCost = (cost: number | ((param?: any) => number)): string => {
//   const numericCost = typeof cost === 'function' ? cost(1000) : cost // –ò—Å–ø–æ–ª—å–∑—É–µ–º 1000 —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
//   return `${numericCost.toFixed(0)}‚≠ê`
// }

export async function priceCommand(ctx: MyContext) {
  const isRu = isRussian(ctx) // <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

  let message = isRu
    ? '<b>üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —É—Å–ª—É–≥–∏ (–≤ –∑–≤–µ–∑–¥–∞—Ö ‚≠ê):</b>\\n\\n'
    : '<b>üí∞ Price list for services (in stars ‚≠ê):</b>\\n\\n'

  message += isRu
    ? '<i>(–¶–µ–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è)</i>\\n\\n'
    : '<i>(Prices are subject to change)</i>\\n\\n'

  let pricesAdded = false

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–µ–∂–∏–º–∞–º –∏–∑ ModeEnum
  for (const modeKey of Object.keys(ModeEnum)) {
    const mode = ModeEnum[modeKey as keyof typeof ModeEnum]

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∂–∏–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (
      mode === ModeEnum.MainMenu ||
      mode === ModeEnum.CheckBalanceScene ||
      mode === ModeEnum.PaymentScene ||
      mode === ModeEnum.StarPaymentScene ||
      mode === ModeEnum.HelpScene
    ) {
      continue
    }

    try {
      // –í—ã–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞.
      // –î–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å modelId/steps –ø–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É (–∏–ª–∏ 0)
      const costResult = calculateFinalStarPrice(mode)

      if (costResult && costResult.stars > 0) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        const modeName = modeKey
          .replace(/([A-Z])/g, ' $1') // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
          .replace(/^./, str => str.toUpperCase()) // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è

        message += `${modeName}: ${costResult.stars} ‚≠ê\\n`
        pricesAdded = true
      }
      // –ï—Å–ª–∏ costResult.stars === 0, —Å—á–∏—Ç–∞–µ–º —Ä–µ–∂–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∏ –Ω–µ –≤—ã–≤–æ–¥–∏–º
    } catch (error) {
      logger.error(
        `Error calculating price for mode ${mode} in /price command`,
        { error }
      )
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    }
  }

  if (!pricesAdded) {
    message += isRu ? '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥.' : 'No paid services found.'
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π TODO –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  // message += 'TODO: Implement dynamic price list generation using calculateFinalStarPrice.\\n'

  await ctx.replyWithHTML(message)
}
