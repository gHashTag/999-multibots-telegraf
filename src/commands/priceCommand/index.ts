import { MyContext } from '@/interfaces'
import { ModeEnum, calculateModeCost } from '@/price/helpers'
import { logger } from '@/utils/logger'

export async function priceCommand(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ —à–∞–≥–æ–≤
  const stepsRange = {
    min: 1000,
    max: 6000,
    step: 1000,
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const prices = Object.entries(ModeEnum).reduce((acc, [key, mode]) => {
    // –î–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å —à–∞–≥–∞–º–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    if (
      mode === ModeEnum.DigitalAvatarBody ||
      mode === ModeEnum.DigitalAvatarBodyV2
    ) {
      const minStepsCost = calculateModeCost({
        mode,
        steps: stepsRange.min,
      }).stars
      const maxStepsCost = calculateModeCost({
        mode,
        steps: stepsRange.max,
      }).stars
      acc[mode] = { min: minStepsCost, max: maxStepsCost }
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const result = calculateModeCost({ mode })
      acc[mode] = result.stars
    }
    return acc
  }, {} as Record<string, number | { min: number; max: number }>)

  logger.info('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥', {
    description: 'Calculating service costs',
    prices,
    telegram_id: ctx.from?.id,
  })

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —à–∞–≥–æ–≤
  const stepsTable = Array.from(
    { length: (stepsRange.max - stepsRange.min) / stepsRange.step + 1 },
    (_, i) => {
      const steps = stepsRange.min + i * stepsRange.step
      const costV1 = calculateModeCost({
        mode: ModeEnum.DigitalAvatarBody,
        steps,
      }).stars
      const costV2 = calculateModeCost({
        mode: ModeEnum.DigitalAvatarBodyV2,
        steps,
      }).stars
      return { steps, costV1, costV2 }
    }
  )

  const stepsTableText = isRu
    ? stepsTable
        .map(
          ({ steps, costV1, costV2 }) =>
            `‚Ä¢ ${steps} —à–∞–≥–æ–≤: ${costV1} ‚≠êÔ∏è (V1) / ${costV2} ‚≠êÔ∏è (V2)`
        )
        .join('\n')
    : stepsTable
        .map(
          ({ steps, costV1, costV2 }) =>
            `‚Ä¢ ${steps} steps: ${costV1} ‚≠êÔ∏è (V1) / ${costV2} ‚≠êÔ∏è (V2)`
        )
        .join('\n')

  const message = isRu
    ? `
<b>üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —É—Å–ª—É–≥–∏:</b>

ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏:
‚Ä¢ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ (NeuroPhoto): ${prices[ModeEnum.NeuroPhoto]} ‚≠êÔ∏è
‚Ä¢ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 (—É–ª—É—á—à–µ–Ω–Ω–æ–µ): ${prices[ModeEnum.NeuroPhotoV2]} ‚≠êÔ∏è
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞: ${prices[ModeEnum.ImageToPrompt]} ‚≠êÔ∏è

üé≠ –ê–≤–∞—Ç–∞—Ä—ã:
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ V1: ${(prices[ModeEnum.DigitalAvatarBody] as any).min} - ${
        (prices[ModeEnum.DigitalAvatarBody] as any).max
      } ‚≠êÔ∏è
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ V2: ${(prices[ModeEnum.DigitalAvatarBodyV2] as any).min} - ${
        (prices[ModeEnum.DigitalAvatarBodyV2] as any).max
      } ‚≠êÔ∏è
‚Ä¢ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º: ${prices[ModeEnum.ChatWithAvatar]} ‚≠êÔ∏è
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä: ${prices[ModeEnum.Avatar]} ‚≠êÔ∏è

üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (—à–∞–≥–∏):
${stepsTableText}

üé¨ –í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ:
‚Ä¢ –¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ: ${prices[ModeEnum.TextToVideo]} ‚≠êÔ∏è
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ: ${prices[ModeEnum.ImageToVideo]} ‚≠êÔ∏è
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±: ${prices[ModeEnum.LipSync]} ‚≠êÔ∏è
‚Ä¢ –ì–æ–ª–æ—Å: ${prices[ModeEnum.Voice]} ‚≠êÔ∏è
‚Ä¢ –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å: ${prices[ModeEnum.TextToSpeech]} ‚≠êÔ∏è

üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
‚Ä¢ –¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${prices[ModeEnum.TextToImage]} ‚≠êÔ∏è

üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /buy`
    : `
<b>üí∞ Service Price List:</b>

ü§ñ Neural Networks:
‚Ä¢ NeuroPhoto: ${prices[ModeEnum.NeuroPhoto]} ‚≠êÔ∏è
‚Ä¢ NeuroPhoto V2 (enhanced): ${prices[ModeEnum.NeuroPhotoV2]} ‚≠êÔ∏è
‚Ä¢ Prompt Generation: ${prices[ModeEnum.ImageToPrompt]} ‚≠êÔ∏è

üé≠ Avatars:
‚Ä¢ Model Training V1: ${(prices[ModeEnum.DigitalAvatarBody] as any).min} - ${
        (prices[ModeEnum.DigitalAvatarBody] as any).max
      } ‚≠êÔ∏è
‚Ä¢ Model Training V2: ${(prices[ModeEnum.DigitalAvatarBodyV2] as any).min} - ${
        (prices[ModeEnum.DigitalAvatarBodyV2] as any).max
      } ‚≠êÔ∏è
‚Ä¢ Chat with Avatar: ${prices[ModeEnum.ChatWithAvatar]} ‚≠êÔ∏è
‚Ä¢ Basic Avatar: ${prices[ModeEnum.Avatar]} ‚≠êÔ∏è

üìä Model Training Cost (steps):
${stepsTableText}

üé¨ Video & Audio:
‚Ä¢ Text to Video: ${prices[ModeEnum.TextToVideo]} ‚≠êÔ∏è
‚Ä¢ Image to Video: ${prices[ModeEnum.ImageToVideo]} ‚≠êÔ∏è
‚Ä¢ Lip Sync: ${prices[ModeEnum.LipSync]} ‚≠êÔ∏è
‚Ä¢ Voice: ${prices[ModeEnum.Voice]} ‚≠êÔ∏è
‚Ä¢ Text to Speech: ${prices[ModeEnum.TextToSpeech]} ‚≠êÔ∏è

üé® Images:
‚Ä¢ Text to Image: ${prices[ModeEnum.TextToImage]} ‚≠êÔ∏è

üíµ Top up balance: /buy`

  await ctx.reply(message, { parse_mode: 'HTML' })
}
