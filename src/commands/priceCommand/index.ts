import { SYSTEM_CONFIG } from '@/price/constants/index'
import { MyContext } from '../../interfaces'
import { modeCosts } from '@/price/helpers/modelsCost'
import { conversionRates, paymentOptionsPlans } from '@/price/priceCalculator'
import { ModeEnum, SubscriptionType } from '@/interfaces'
import { imageModelPrices } from '@/price/models/imageModelPrices'
import { VIDEO_MODELS_CONFIG } from '@/modules/videoGenerator/config/models.config'
import { calculateFinalPrice as calculateVideoFinalPrice } from '@/price/helpers'

// Helper function to handle potential function types in modeCosts.
const getCost = (
  cost: number | ((steps?: number) => number),
  steps?: number
): string => {
  if (typeof cost === 'function') {
    return cost(steps).toFixed(2)
  }
  return cost.toFixed(2)
}

export async function priceCommand(ctx: MyContext) {
  console.log('CASE: priceCommand')
  const isRu = ctx.from?.language_code === 'ru'
  const currentBotUsername = ctx.botInfo.username // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞

  // –†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (TextToImage)
  const imageCosts = Object.values(imageModelPrices).map(
    modelInfo => modelInfo.costPerImage
  )
  const minImageCost = imageCosts.length > 0 ? Math.min(...imageCosts) : 0
  const maxImageCost = imageCosts.length > 0 ? Math.max(...imageCosts) : 0

  // –†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –¥–ª—è –¢–µ–∫—Å—Ç-–≤-–í–∏–¥–µ–æ
  const textToVideoModelKeys = Object.keys(VIDEO_MODELS_CONFIG).filter(key =>
    VIDEO_MODELS_CONFIG[key].inputType.includes('text')
  )
  const textToVideoCosts = textToVideoModelKeys.map(key =>
    calculateVideoFinalPrice(key)
  )
  const minTextToVideoCost =
    textToVideoCosts.length > 0 ? Math.min(...textToVideoCosts) : 0
  const maxTextToVideoCost =
    textToVideoCosts.length > 0 ? Math.max(...textToVideoCosts) : 0

  // –†–∞—Å—á–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –¥–ª—è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–≤-–í–∏–¥–µ–æ
  const imageToVideoModelKeys = Object.keys(VIDEO_MODELS_CONFIG).filter(key =>
    VIDEO_MODELS_CONFIG[key].inputType.includes('image')
  )
  const imageToVideoCosts = imageToVideoModelKeys.map(key =>
    calculateVideoFinalPrice(key)
  )
  const minImageToVideoCost =
    imageToVideoCosts.length > 0 ? Math.min(...imageToVideoCosts) : 0
  const maxImageToVideoCost =
    imageToVideoCosts.length > 0 ? Math.max(...imageToVideoCosts) : 0

  // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∑–∞ 1 —à–∞–≥
  // conversionRates.costPerStepInStars —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é v1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  // –î–ª—è v2 –Ω–∞–º –Ω—É–∂–Ω–æ —è–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å calculateCost –∏–ª–∏ –∏–º–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
  // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ modeCosts[ModeEnum.DigitalAvatarBody] –∏ modeCosts[ModeEnum.DigitalAvatarBodyV2]
  // —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º–∏ steps.

  const trainingCostV1 = getCost(modeCosts[ModeEnum.DigitalAvatarBody], 1)
  const trainingCostV2 = getCost(modeCosts[ModeEnum.DigitalAvatarBodyV2], 1)

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
  const neuroPhotoSubscription = paymentOptionsPlans.find(
    plan =>
      plan.subscription === SubscriptionType.NEUROPHOTO && !plan.isAdminOnly
  )
  const neuroVideoSubscription = paymentOptionsPlans.find(
    plan =>
      plan.subscription === SubscriptionType.NEUROVIDEO && !plan.isAdminOnly
  )

  let subscriptionInfoRu = ''
  let starCostInfoRu = '' // –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã

  // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É–±–ª–µ–≤—ã—Ö —Ü–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –≤ —Ä—É–±–ª—è—Ö
  if (currentBotUsername !== 'NeurostylistShtogrina_bot') {
    if (neuroPhotoSubscription) {
      subscriptionInfoRu += `\n    - üì∏ ${neuroPhotoSubscription.subscription}: <b>${neuroPhotoSubscription.amount} —Ä—É–±</b> (–¥–∞–µ—Ç <b>${neuroPhotoSubscription.stars} ‚≠êÔ∏è</b>)`
    }
    if (neuroVideoSubscription) {
      subscriptionInfoRu += `\n    - üé¨ ${neuroVideoSubscription.subscription}: <b>${neuroVideoSubscription.amount} —Ä—É–±</b> (–¥–∞–µ—Ç <b>${neuroVideoSubscription.stars} ‚≠êÔ∏è</b>)`
    }
    if (subscriptionInfoRu) {
      subscriptionInfoRu = `\n    <b>üåü –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</b>${subscriptionInfoRu}\n    <i>–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - —ç—Ç–æ –≤—ã–≥–æ–¥–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥!</i>\n`
    }
    // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã –≤ —Ä—É–±–ª—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ NeurostylistShtogrina_bot
    starCostInfoRu = `\n    <b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 ‚≠êÔ∏è:</b> ${(SYSTEM_CONFIG.starCost * SYSTEM_CONFIG.rubRate).toFixed(2)} —Ä—É–±`
  }

  const message = isRu
    ? `
    <b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ (–≤ ‚≠êÔ∏è):</b>
    - üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (1 —à–∞–≥):
        v1: ${trainingCostV1}
        v2: ${trainingCostV2}
    - ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞: ${getCost(modeCosts[ModeEnum.ImageToPrompt])}
    - üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç ${minImageCost.toFixed(2)} –¥–æ ${maxImageCost.toFixed(2)}
    - ü§ñ –ù–µ–π—Ä–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${getCost(modeCosts[ModeEnum.NeuroPhoto])}
    - üé§ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: ${getCost(modeCosts[ModeEnum.Voice])}
    - üó£Ô∏è –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å: ${getCost(modeCosts[ModeEnum.TextToSpeech])}
    - üé• –¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ: –æ—Ç ${minTextToVideoCost.toFixed(2)} –¥–æ ${maxTextToVideoCost.toFixed(2)}
    - üìΩÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ: –æ—Ç ${minImageToVideoCost.toFixed(2)} –¥–æ ${maxImageToVideoCost.toFixed(2)}
${subscriptionInfoRu}
    ${starCostInfoRu}    
    `
    : `
    <b>üí∞ Price of services (in ‚≠êÔ∏è):</b>
    - üß† Training model (1 step):
        v1: ${trainingCostV1}
        v2: ${trainingCostV2}
    - ‚úçÔ∏è Prompt generation: ${getCost(modeCosts[ModeEnum.ImageToPrompt])}
    - üñºÔ∏è Image generation: from ${minImageCost.toFixed(2)} to ${maxImageCost.toFixed(2)}
    - ü§ñ Neuro-image generation: ${getCost(modeCosts[ModeEnum.NeuroPhoto])}
    - üé§ Voice creation: ${getCost(modeCosts[ModeEnum.Voice])}
    - üó£Ô∏è Text to speech: ${getCost(modeCosts[ModeEnum.TextToSpeech])}
    - üé• Text to video: from ${minTextToVideoCost.toFixed(2)} to ${maxTextToVideoCost.toFixed(2)}
    - üìΩÔ∏è Image to video: from ${minImageToVideoCost.toFixed(2)} to ${maxImageToVideoCost.toFixed(2)}

    <b>üíµ Star cost (1 ‚≠êÔ∏è):</b> ${SYSTEM_CONFIG.starCost.toFixed(3)} $
    `

  await ctx.reply(message, { parse_mode: 'HTML' })
}
