import { MyContext } from '@/types'
import { ModeEnum } from '@/types/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'

/** –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º */
type PriceRange = { min: number; max: number }

/** –¶–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ */
type Prices = Record<string, number | PriceRange>

/** –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ */
type ServiceCategory = {
  emoji: string
  title: { ru: string; en: string }
  services: Array<{
    mode: ModeEnum
    name: { ru: string; en: string }
  }>
}

/** –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ */
const STEPS_RANGE = {
  min: 1000,
  max: 6000,
  step: 1000,
} as const

/** –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π */
const SERVICE_CATEGORIES: ServiceCategory[] = [
  {
    emoji: 'ü§ñ',
    title: { ru: '–ù–µ–π—Ä–æ—Å–µ—Ç–∏', en: 'Neural Networks' },
    services: [
      {
        mode: ModeEnum.NeuroPhoto,
        name: { ru: '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ', en: 'NeuroPhoto' },
      },
      {
        mode: ModeEnum.NeuroPhotoV2,
        name: {
          ru: '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)',
          en: 'NeuroPhoto V2 (enhanced)',
        },
      },
      {
        mode: ModeEnum.ImageToPrompt,
        name: { ru: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞', en: 'Prompt Generation' },
      },
    ],
  },
  {
    emoji: 'üé≠',
    title: { ru: '–ê–≤–∞—Ç–∞—Ä—ã', en: 'Avatars' },
    services: [
      {
        mode: ModeEnum.DigitalAvatarBody,
        name: { ru: '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ V1', en: 'Model Training V1' },
      },
      {
        mode: ModeEnum.DigitalAvatarBodyV2,
        name: { ru: '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ V2', en: 'Model Training V2' },
      },
      {
        mode: ModeEnum.ChatWithAvatar,
        name: { ru: '–ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º', en: 'Chat with Avatar' },
      },
      {
        mode: ModeEnum.Avatar,
        name: { ru: '–ë–∞–∑–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä', en: 'Basic Avatar' },
      },
    ],
  },
  {
    emoji: 'üé¨',
    title: { ru: '–í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ', en: 'Video & Audio' },
    services: [
      {
        mode: ModeEnum.TextToVideo,
        name: { ru: '–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ', en: 'Text to Video' },
      },
      {
        mode: ModeEnum.ImageToVideo,
        name: { ru: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ', en: 'Image to Video' },
      },
      {
        mode: ModeEnum.LipSync,
        name: { ru: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±', en: 'Lip Sync' },
      },
      {
        mode: ModeEnum.Voice,
        name: { ru: '–ì–æ–ª–æ—Å', en: 'Voice' },
      },
      {
        mode: ModeEnum.TextToSpeech,
        name: { ru: '–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å', en: 'Text to Speech' },
      },
    ],
  },
  {
    emoji: 'üé®',
    title: { ru: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', en: 'Images' },
    services: [
      {
        mode: ModeEnum.TextToImage,
        name: { ru: '–¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', en: 'Text to Image' },
      },
    ],
  },
]

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param mode –†–µ–∂–∏–º —É—Å–ª—É–≥–∏
 * @param prices –û–±—ä–µ–∫—Ç —Å —Ü–µ–Ω–∞–º–∏
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
 */
function formatPrice(mode: ModeEnum, prices: Prices): string {
  const price = prices[mode]
  if (typeof price === 'number') return price.toString()
  return `${price.min} - ${price.max}`
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —à–∞–≥–æ–≤
 * @param isRu –§–ª–∞–≥ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
 * @returns –¢–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
 */
function generateStepsTable(isRu: boolean): string {
  const stepsTable = Array.from(
    { length: (STEPS_RANGE.max - STEPS_RANGE.min) / STEPS_RANGE.step + 1 },
    (_, i) => {
      const steps = STEPS_RANGE.min + i * STEPS_RANGE.step
      const costV1 = calculateModeCost({
        mode: ModeEnum.DigitalAvatarBody,
        steps,
      }).stars
      const costV2 = calculateModeCost({
        mode: ModeEnum.DigitalAvatarBodyV2,
        steps,
      }).stars
      return { steps, costV1, costV2 }
    }
  )

  return stepsTable
    .map(({ steps, costV1, costV2 }) =>
      isRu
        ? `‚Ä¢ ${steps} —à–∞–≥–æ–≤: ${costV1} ‚≠êÔ∏è (V1) / ${costV2} ‚≠êÔ∏è (V2)`
        : `‚Ä¢ ${steps} steps: ${costV1} ‚≠êÔ∏è (V1) / ${costV2} ‚≠êÔ∏è (V2)`
    )
    .join('\n')
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
 * @param isRu –§–ª–∞–≥ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
 * @param prices –û–±—ä–µ–∫—Ç —Å —Ü–µ–Ω–∞–º–∏
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function generatePriceMessage(isRu: boolean, prices: Prices): string {
  const title = isRu ? 'üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —É—Å–ª—É–≥–∏:' : 'üí∞ Service Price List:'
  const stepsTitle = isRu
    ? 'üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (—à–∞–≥–∏):'
    : 'üìä Model Training Cost (steps):'
  const buyCommand = isRu
    ? 'üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /buy'
    : 'üíµ Top up balance: /buy'

  const categoriesText = SERVICE_CATEGORIES.map(category => {
    const categoryTitle = `${category.emoji} ${isRu ? category.title.ru : category.title.en}:`
    const servicesText = category.services
      .map(service => {
        const name = isRu ? service.name.ru : service.name.en
        const price = formatPrice(service.mode, prices)
        return `‚Ä¢ ${name}: ${price} ‚≠êÔ∏è`
      })
      .join('\n')
    return `${categoryTitle}\n${servicesText}`
  }).join('\n\n')

  const stepsTable = generateStepsTable(isRu)

  return `
<b>${title}</b>

${categoriesText}

${stepsTitle}
${stepsTable}

${buyCommand}`
}

export async function priceCommand(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
  const prices = Object.entries(ModeEnum).reduce((acc, [, mode]) => {
    if (
      mode === ModeEnum.DigitalAvatarBody ||
      mode === ModeEnum.DigitalAvatarBodyV2
    ) {
      const minStepsCost = calculateModeCost({
        mode,
        steps: STEPS_RANGE.min,
      }).stars
      const maxStepsCost = calculateModeCost({
        mode,
        steps: STEPS_RANGE.max,
      }).stars
      acc[mode] = { min: minStepsCost, max: maxStepsCost }
    } else {
      const result = calculateModeCost({ mode })
      acc[mode] = result.stars
    }
    return acc
  }, {} as Prices)

  logger.info('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥', {
    description: 'Calculating service costs',
    prices,
    telegram_id: ctx.from?.id,
  })

  const message = generatePriceMessage(isRu, prices)
  await ctx.reply(message, { parse_mode: 'HTML' })
}
