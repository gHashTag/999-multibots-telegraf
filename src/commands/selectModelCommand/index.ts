import { Markup } from 'telegraf'
import { type MyContext } from '../../interfaces'
import { calculateFinalPrice } from '@/price/helpers/calculateFinalPrice'

import { getAvailableModels } from './getAvailableModels'
import { sendGenericErrorMessage } from '@/menu'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
export async function selectModelCommand(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'

  try {
    const models: string[] = await getAvailableModels()

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    const buttons = models.map(modelId => {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –∑–≤–µ–∑–¥–∞—Ö
      const priceInStars = calculateFinalPrice(modelId)
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –º–æ–¥–µ–ª–∏, —Ç–∞–∫ –∫–∞–∫ title –Ω–µ—Ç)
      const buttonText = `${modelId} (${priceInStars}‚≠ê)`
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Markup
      return Markup.button.callback(buttonText, `select_model_${modelId}`)
    })

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2
    const rows = []
    for (let i = 0; i < buttons.length; i += 2) {
      rows.push(buttons.slice(i, i + 2))
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    rows.push([Markup.button.callback(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel', 'cancel')])

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = Markup.inlineKeyboard(rows)

    await ctx.reply(
      isRu ? 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:' : 'üß† Select AI Model:',
      keyboard
    )

    return
  } catch (error) {
    console.error('Error creating model selection menu:', error)
    await sendGenericErrorMessage(ctx, isRu, error)
  }
}
