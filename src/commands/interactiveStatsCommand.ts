/**
 * üìä –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –ö–ù–û–ü–ö–ê–ú–ò
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import { Telegraf, Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { ADMIN_IDS_ARRAY } from '@/config'
import { getBotStatsWithCost } from '@/core/supabase/getUserBalanceStats'
import { generateAdminExcelReport } from '@/utils/adminExcelReportGenerator'
import { supabase } from '@/core/supabase'
import { getOwnedBots } from '@/core/supabase/getOwnedBots'
import {
  analyzeTrends,
  generateSmartRecommendations,
  segmentUsers,
  TrendAnalysis,
  SmartRecommendations,
  UserSegmentation,
} from '@/utils/trendAnalysis'
import {
  generateAlertsForBot,
  generateWeeklySummary,
  formatAlertMessage,
  SmartAlert,
} from '@/utils/smartNotifications'
import fs from 'fs'
import path from 'path'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface StatsSession {
  botName: string
  period: 'today' | 'week' | 'month' | 'all'
  userId: string
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const statsSessions = new Map<string, StatsSession>()

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É
 */
async function checkBotAccess(
  userId: string,
  botName: string
): Promise<boolean> {
  const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))

  if (isAdmin) {
    return true // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–æ—Ç–∞–º
  }

  const ownedBots = await getOwnedBots(userId)
  return ownedBots ? ownedBots.includes(botName) : false
}

/**
 * –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /stats_menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
 */
export async function interactiveStatsCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    const ownedBots = await getOwnedBots(userId)

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ –∞–¥–º–∏–Ω–æ–º, –ª–∏–±–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–æ–≤
    if (!isAdmin && (!ownedBots || ownedBots.length === 0)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–æ–≤')
      return
    }

    const args =
      ctx.message && 'text' in ctx.message
        ? ctx.message.text.split(' ').slice(1)
        : []

    const botName = args[0]

    // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤
    if (!botName) {
      await showBotSelection(ctx, userId, isAdmin, ownedBots)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É
    if (!isAdmin && ownedBots && !ownedBots.includes(botName)) {
      await ctx.reply(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`)
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    statsSessions.set(userId, {
      botName,
      period: 'all',
      userId,
    })

    await showStatsMenu(ctx, botName, 'all')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ interactiveStatsCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
async function showBotSelection(
  ctx: MyContext,
  userId: string,
  isAdmin: boolean,
  ownedBots: string[] | null
): Promise<void> {
  try {
    let availableBots: string[] = []

    if (isAdmin) {
      // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤
      const { data: bots, error } = await supabase
        .from('avatars')
        .select('bot_name')
        .not('bot_name', 'is', null)
        .limit(50)

      if (error) throw error

      availableBots = Array.from(new Set(bots.map(b => b.bot_name)))
        .filter(bot => bot && bot.trim() !== '')
        .sort()
    } else {
      // –í–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–æ–≤ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–æ—Ç—ã
      availableBots = ownedBots || []
    }

    if (availableBots.length === 0) {
      const message = isAdmin
        ? '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ'
        : '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      await ctx.reply(message)
      return
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    const buttons = []
    for (let i = 0; i < availableBots.length; i += 2) {
      const row = []
      row.push(
        Markup.button.callback(
          `ü§ñ ${availableBots[i]}`,
          `select_bot:${availableBots[i]}`
        )
      )

      if (availableBots[i + 1]) {
        row.push(
          Markup.button.callback(
            `ü§ñ ${availableBots[i + 1]}`,
            `select_bot:${availableBots[i + 1]}`
          )
        )
      }
      buttons.push(row)
    }

    const keyboard = Markup.inlineKeyboard(buttons)

    const accessLevel = isAdmin ? 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω' : 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–æ–≤'
    await ctx.reply(
      `ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n` +
        `üîê –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${accessLevel}\n` +
        `üìä –î–æ—Å—Ç—É–ø–Ω–æ –±–æ—Ç–æ–≤: ${availableBots.length}\n` +
        `üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/stats_menu bot_name</code>`,
      {
        parse_mode: 'HTML',
        ...keyboard,
      }
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showBotSelection:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤')
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
async function showStatsMenu(
  ctx: MyContext,
  botName: string,
  period: string
): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await getBotStatsWithCost(botName, period as any)

    let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @${botName}</b>\n‚è∞ –ü–µ—Ä–∏–æ–¥: ${getPeriodName(period)}\n\n`

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –≤–∞–ª—é—Ç–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let hasFinancialData = false

    // –†—É–±–ª–µ–≤—ã–µ –¥–æ—Ö–æ–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (stats.rub_income > 0 || stats.rub_income_transactions > 0) {
      message += `üí∞ <b>–†—É–±–ª–µ–≤—ã–µ –¥–æ—Ö–æ–¥—ã:</b>\n`
      message += `   üìà –î–æ—Ö–æ–¥—ã: ${stats.rub_income.toLocaleString()} ‚ÇΩ (${stats.rub_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      if (stats.rub_outcome > 0) {
        message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${stats.rub_outcome.toLocaleString()} ‚ÇΩ (${stats.rub_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      }
      message += `   üíé –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.rub_net_result.toLocaleString()} ‚ÇΩ\n\n`
      hasFinancialData = true
    }

    // –ó–≤–µ–∑–¥–Ω—ã–µ –¥–æ—Ö–æ–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (stats.stars_income > 0 || stats.stars_income_transactions > 0) {
      message += `‚≠ê <b>–ó–≤–µ–∑–¥–Ω—ã–µ –¥–æ—Ö–æ–¥—ã:</b>\n`
      message += `   üìà –î–æ—Ö–æ–¥—ã: ${stats.stars_income.toLocaleString()}‚≠ê (${stats.stars_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      if (stats.stars_outcome > 0) {
        message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${stats.stars_outcome.toLocaleString()}‚≠ê (${stats.stars_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
        message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.stars_cost.toLocaleString()}‚≠ê\n`
      }
      message += `   üíé –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.stars_net_result.toLocaleString()}‚≠ê\n\n`
      hasFinancialData = true
    }

    // –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (hasFinancialData) {
      message += `üí∞ <b>–û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å—ã:</b>\n`
      message += `   üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.total_income.toLocaleString()}‚≠ê\n`
      message += `   üìâ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${stats.total_outcome.toLocaleString()}‚≠ê\n`
      message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.total_cost.toLocaleString()}‚≠ê\n`
      message += `   üíé –ü—Ä–∏–±—ã–ª—å: ${stats.net_profit.toLocaleString()}‚≠ê\n`
      message += `   üìä –ú–∞—Ä–∂–∞: ${stats.profit_margin.toFixed(1)}%\n\n`
    }

    message += `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n`
    message += `   –í—Å–µ–≥–æ: ${stats.total_users}\n`
    message += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.active_users_month}\n\n`

    message += `üî¢ <b>–û–ø–µ—Ä–∞—Ü–∏–∏:</b>\n`
    message += `   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.total_transactions}\n`
    message += `   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats.avg_transaction_value.toFixed(1)}‚≠ê`

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìÖ –°–µ–≥–æ–¥–Ω—è', `period:today:${botName}`),
        Markup.button.callback('üìÖ –ù–µ–¥–µ–ª—è', `period:week:${botName}`),
      ],
      [
        Markup.button.callback('üìÖ –ú–µ—Å—è—Ü', `period:month:${botName}`),
        Markup.button.callback('üìÖ –í—Å–µ –≤—Ä–µ–º—è', `period:all:${botName}`),
      ],
      [
        Markup.button.callback(
          'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞',
          `detailed:${botName}:${period}`
        ),
        Markup.button.callback('üìä Excel –æ—Ç—á–µ—Ç', `excel:${botName}:${period}`),
      ],
      [
        Markup.button.callback('üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö', `debug:${botName}`),
        Markup.button.callback(
          'üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
          `top_users:${botName}:${period}`
        ),
      ],
      [
        Markup.button.callback('üìà –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã', `trends:${botName}`),
        Markup.button.callback(
          'üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
          `recommendations:${botName}`
        ),
      ],
      [
        Markup.button.callback(
          'üë• –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          `segments:${botName}`
        ),
        Markup.button.callback('üéØ AI-–ò–Ω—Å–∞–π—Ç—ã', `ai_insights:${botName}`),
      ],
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', `alerts:${botName}`),
        Markup.button.callback(
          'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞',
          `weekly_summary:${botName}`
        ),
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `refresh:${botName}:${period}`),
        Markup.button.callback('ü§ñ –î—Ä—É–≥–æ–π –±–æ—Ç', 'select_other_bot'),
      ],
    ])

    if (ctx.callbackQuery) {
      try {
        await ctx.editMessageText(message, {
          parse_mode: 'HTML',
          ...keyboard,
        })
      } catch (error) {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if (error.message?.includes('message is not modified')) {
          await ctx.reply(message, {
            parse_mode: 'HTML',
            ...keyboard,
          })
        } else {
          throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        }
      }
    } else {
      await ctx.reply(message, {
        parse_mode: 'HTML',
        ...keyboard,
      })
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showStatsMenu:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
export function setupInteractiveStatsHandlers(bot: Telegraf<MyContext>): void {
  // –í—ã–±–æ—Ä –±–æ—Ç–∞
  bot.action(/^select_bot:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    const ownedBots = await getOwnedBots(userId)

    if (!isAdmin && ownedBots && !ownedBots.includes(botName)) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    statsSessions.set(userId, {
      botName,
      period: 'all',
      userId,
    })

    await showStatsMenu(ctx, botName, 'all')
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω –±–æ—Ç: @${botName}`)
  })

  // –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞
  bot.action('select_other_bot', async ctx => {
    const userId = ctx.from?.id?.toString()
    if (!userId) return

    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    const ownedBots = await getOwnedBots(userId)

    await showBotSelection(ctx, userId, isAdmin, ownedBots)
    await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞')
  })

  // –°–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
  bot.action(/^period:(.+):(.+)$/, async ctx => {
    const period = ctx.match[1]
    const botName = ctx.match[2]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
    const session = statsSessions.get(userId)
    if (session && session.period === period) {
      await ctx.answerCbQuery(`–£–∂–µ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${getPeriodName(period)}`)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    if (session) {
      session.period = period as any
      statsSessions.set(userId, session)
    }

    await showStatsMenu(ctx, botName, period)
    await ctx.answerCbQuery(`–ü–µ—Ä–∏–æ–¥: ${getPeriodName(period)}`)
  })

  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
  bot.action(/^detailed:(.+):(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const period = ctx.match[2]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É...')
    await sendDetailedStats(ctx, botName, period)
  })

  // Excel –æ—Ç—á–µ—Ç
  bot.action(/^excel:(.+):(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const period = ctx.match[2]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–°–æ–∑–¥–∞—é Excel –æ—Ç—á–µ—Ç...')
    await sendExcelReport(ctx, botName, period)
  })

  // –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  bot.action(/^debug:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...')
    await sendDebugInfo(ctx, botName)
  })

  // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.action(/^top_users:(.+):(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const period = ctx.match[2]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ü–æ–ª—É—á–∞—é —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    await sendTopUsers(ctx, botName, period)
  })

  // –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
  bot.action(/^trends:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã...')
    await sendTrendAnalysis(ctx, botName)
  })

  // –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  bot.action(/^recommendations:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
    await sendSmartRecommendations(ctx, botName)
  })

  // –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.action(/^segments:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    await sendUserSegmentation(ctx, botName)
  })

  // AI-–ò–Ω—Å–∞–π—Ç—ã
  bot.action(/^ai_insights:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é AI-–∏–Ω—Å–∞–π—Ç—ã...')
    await sendAIInsights(ctx, botName)
  })

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  bot.action(/^alerts:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ü—Ä–æ–≤–µ—Ä—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
    await sendAlerts(ctx, botName)
  })

  // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
  bot.action(/^weekly_summary:(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–∫—É...')
    await sendWeeklySummaryReport(ctx, botName)
  })

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  bot.action(/^refresh:(.+):(.+)$/, async ctx => {
    const botName = ctx.match[1]
    const period = ctx.match[2]
    const userId = ctx.from?.id?.toString()

    if (!userId) return

    const hasAccess = await checkBotAccess(userId, botName)
    if (!hasAccess) {
      await ctx.answerCbQuery(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`, {
        show_alert: true,
      })
      return
    }

    try {
      await showStatsMenu(ctx, botName, period)
      await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message?.includes('message is not modified')) {
        await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞')
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
      }
    }
  })
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
async function sendDetailedStats(
  ctx: MyContext,
  botName: string,
  period: string
): Promise<void> {
  try {
    const stats = await getBotStatsWithCost(botName, period as any)

    let message = `üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @${botName}</b>\n‚è∞ –ü–µ—Ä–∏–æ–¥: ${getPeriodName(period)}\n\n`

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤–∞–ª—é—Ç–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    let hasFinancialData = false

    // –†—É–±–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (stats.rub_income > 0 || stats.rub_income_transactions > 0) {
      message += `üí∞ <b>–†—É–±–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n`
      message += `   üìà –î–æ—Ö–æ–¥—ã: ${stats.rub_income.toLocaleString()} ‚ÇΩ (${stats.rub_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      if (stats.rub_outcome > 0) {
        message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${stats.rub_outcome.toLocaleString()} ‚ÇΩ (${stats.rub_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      }
      message += `   üíé –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.rub_net_result.toLocaleString()} ‚ÇΩ\n\n`
      hasFinancialData = true
    }

    // –ó–≤–µ–∑–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (stats.stars_income > 0 || stats.stars_income_transactions > 0) {
      message += `‚≠ê <b>–ó–≤–µ–∑–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n`
      message += `   üìà –î–æ—Ö–æ–¥—ã: ${stats.stars_income.toLocaleString()}‚≠ê (${stats.stars_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
      if (stats.stars_outcome > 0) {
        message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${stats.stars_outcome.toLocaleString()}‚≠ê (${stats.stars_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
        message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.stars_cost.toLocaleString()}‚≠ê\n`
      }
      message += `   üíé –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.stars_net_result.toLocaleString()}‚≠ê\n\n`
      hasFinancialData = true
    }

    // –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (hasFinancialData) {
      message += `üí∞ <b>–û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n`
      message += `   üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.total_income.toLocaleString()}‚≠ê\n`
      message += `   üìâ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${stats.total_outcome.toLocaleString()}‚≠ê\n`
      message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.total_cost.toLocaleString()}‚≠ê\n`
      message += `   üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.net_profit.toLocaleString()}‚≠ê\n`
      message += `   üìä –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏: ${stats.profit_margin.toFixed(1)}%\n`
      message += `   üìà –î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: ${stats.cost_percentage.toFixed(1)}%\n\n`
    }

    message +=
      `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n` +
      `   üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\n` +
      `   üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.active_users_today}\n` +
      `   üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.active_users_week}\n` +
      `   üìÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.active_users_month}\n` +
      `   ‚ú® –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.new_users_today}\n` +
      `   üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.new_users_week}\n` +
      `   üìä –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.new_users_month}\n\n` +
      `üî¢ <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n` +
      `   üîÑ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.total_transactions}\n` +
      `   üìÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.transactions_today}\n` +
      `   üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.transactions_week}\n` +
      `   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: ${stats.transactions_month}\n` +
      `   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats.avg_transaction_value.toFixed(1)}‚≠ê\n\n` +
      `üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–æ—Å—Ç–∞:</b>\n` +
      `   üë• –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.user_growth_rate.toFixed(1)}%\n` +
      `   üí∞ –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: ${stats.revenue_growth_rate.toFixed(1)}%\n` +
      `   üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.conversion_rate.toFixed(1)}%\n` +
      `   üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: ${stats.retention_rate.toFixed(1)}%`

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é',
          `refresh:${botName}:${period}`
        ),
      ],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendDetailedStats:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel –æ—Ç—á–µ—Ç
 */
async function sendExcelReport(
  ctx: MyContext,
  botName: string,
  period: string
): Promise<void> {
  try {
    await ctx.reply(
      'üìä –°–æ–∑–¥–∞—é Excel –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
    )

    const startTime = Date.now()
    const excelBuffer = await generateAdminExcelReport(botName)
    const generationTime = ((Date.now() - startTime) / 1000).toFixed(1)

    const fileName = `stats_${botName}_${period}_${new Date().toISOString().split('T')[0]}.xlsx`
    const fileSizeKB = Math.round(excelBuffer.length / 1024)

    const caption =
      `üìä <b>Excel –æ—Ç—á–µ—Ç @${botName}</b>\n` +
      `‚è∞ –ü–µ—Ä–∏–æ–¥: ${getPeriodName(period)}\n` +
      `üìÅ –†–∞–∑–º–µ—Ä: ${fileSizeKB} KB\n` +
      `‚ö° –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${generationTime} —Å–µ–∫\n\n` +
      `üìã <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (6 –ª–∏—Å—Ç–æ–≤):</b>\n` +
      `‚Ä¢ üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞\n` +
      `‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚Ä¢ üõ†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤\n` +
      `‚Ä¢ üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n` +
      `‚Ä¢ üìÖ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n` +
      `‚Ä¢ üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`

    await ctx.replyWithDocument(
      { source: excelBuffer, filename: fileName },
      {
        caption,
        parse_mode: 'HTML',
      }
    )

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é',
          `refresh:${botName}:${period}`
        ),
      ],
    ])

    await ctx.reply('‚úÖ Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!', keyboard)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendExcelReport:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
async function sendDebugInfo(ctx: MyContext, botName: string): Promise<void> {
  try {
    const { data: debugData } = await supabase
      .from('payments_v2')
      .select(
        'id, type, status, category, service_type, stars, cost, created_at'
      )
      .eq('bot_name', botName)
      .order('created_at', { ascending: false })
      .limit(10)

    if (!debugData || debugData.length === 0) {
      await ctx.reply('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
      return
    }

    let message = `üîç <b>–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö @${botName}</b>\n\n`
    message += `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n`

    debugData.forEach((payment, index) => {
      const date = new Date(payment.created_at).toLocaleDateString('ru-RU')
      message += `${index + 1}. ID: ${payment.id}\n`
      message += `   üìÖ ${date}\n`
      message += `   üîÑ ${payment.type} | ${payment.status}\n`
      message += `   üè∑Ô∏è ${payment.category || '–ù–µ—Ç'} | ${payment.service_type || '–ù–µ—Ç'}\n`
      message += `   üí∞ ${payment.stars}‚≠ê | –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${payment.cost || 0}‚≠ê\n\n`
    })

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendDebugInfo:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function sendTopUsers(
  ctx: MyContext,
  botName: string,
  period: string
): Promise<void> {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
    let timeCondition = ''
    const now = new Date()

    switch (period) {
      case 'today': {
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
        timeCondition = `created_at >= '${today.toISOString()}'`
        break
      }
      case 'week': {
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        timeCondition = `created_at >= '${weekAgo.toISOString()}'`
        break
      }
      case 'month': {
        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
        timeCondition = `created_at >= '${monthAgo.toISOString()}'`
        break
      }
      case 'all':
      default:
        timeCondition = '' // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        break
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ç–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    let query = supabase
      .from('payments_v2')
      .select('telegram_id, stars, type, created_at')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .eq('type', 'MONEY_OUTCOME')

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (timeCondition) {
      query = query.gte('created_at', timeCondition.split("'")[1])
    }

    const { data: topUsers } = await query

    if (!topUsers || topUsers.length === 0) {
      await ctx.reply('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö')
      return
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userSpending = new Map<string, number>()
    topUsers.forEach(payment => {
      // –ü—Ä–∏–≤–æ–¥–∏–º telegram_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const userId = payment.telegram_id.toString()
      const current = userSpending.get(userId) || 0
      userSpending.set(userId, current + (payment.stars || 0))
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç—Ä–∞—Ç–∞–º
    const sortedUsers = Array.from(userSpending.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã users (–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º)
    const userIds = sortedUsers.map(([id]) => id) // –£–∂–µ —Å—Ç—Ä–æ–∫–∏

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: usersInfo, error: usersError } = await supabase
      .from('users')
      .select('telegram_id, username, first_name, last_name, bot_name')
      .in('telegram_id', userIds)

    if (usersError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:',
        usersError
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const usersMap = new Map<string, any>()
    if (usersInfo) {
      usersInfo.forEach(user => {
        // –ü—Ä–∏–≤–æ–¥–∏–º telegram_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        const userId = user.telegram_id.toString()
        const existingUser = usersMap.get(userId)
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è
        if (
          !existingUser ||
          (!existingUser.username && user.username) ||
          (!existingUser.first_name && user.first_name)
        ) {
          usersMap.set(userId, user)
        }
      })
    }

    let message = `üë• <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π @${botName}</b>\n`
    message += `‚è∞ –ü–µ—Ä–∏–æ–¥: ${getPeriodName(period)}\n`
    message += `üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${sortedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`

    sortedUsers.forEach(([userId, spending], index) => {
      const user = usersMap.get(userId)

      let name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      let username = '–ù–µ—Ç username'

      if (user) {
        name =
          `${user.first_name || ''} ${user.last_name || ''}`.trim() ||
          '–ë–µ–∑ –∏–º–µ–Ω–∏'
        username = user.username ? `@${user.username}` : '–ù–µ—Ç username'
      }

      message += `${index + 1}. <b>${name}</b>\n`
      message += `   üë§ ID: ${userId}\n`
      message += `   üì± ${username}\n`
      message += `   üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: ${spending.toLocaleString()}‚≠ê\n\n`
    })

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é',
          `refresh:${botName}:${period}`
        ),
      ],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendTopUsers:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
 */
async function sendTrendAnalysis(
  ctx: MyContext,
  botName: string
): Promise<void> {
  try {
    const trends = await analyzeTrends(botName)

    let message = `üìà <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ @${botName}</b>\n\n`

    // –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤
    message += `üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤:</b>\n`
    if (trends.revenue_forecast.predicted_amount > 0) {
      const trendEmoji =
        trends.revenue_forecast.trend_direction === 'growing'
          ? 'üìà'
          : trends.revenue_forecast.trend_direction === 'declining'
            ? 'üìâ'
            : '‚û°Ô∏è'

      message += `   ${trendEmoji} –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü: ${trends.revenue_forecast.predicted_amount.toLocaleString()}‚≠ê\n`
      message += `   üìä –†–æ—Å—Ç: ${trends.revenue_forecast.growth_rate > 0 ? '+' : ''}${trends.revenue_forecast.growth_rate}%\n`
      message += `   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${trends.revenue_forecast.confidence_level}%\n\n`
    } else {
      message += `   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞\n\n`
    }

    // –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
    message += `üìÖ <b>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</b>\n`
    message += `   üóìÔ∏è –õ—É—á—à–∏–π –¥–µ–Ω—å: ${trends.seasonality.best_day_of_week}\n`
    message += `   ‚è∞ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${trends.seasonality.peak_activity_time}\n\n`

    // –ê–ª–µ—Ä—Ç—ã
    if (trends.alerts.length > 0) {
      message += `üö® <b>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n`
      trends.alerts.forEach((alert, index) => {
        const severityEmoji =
          alert.severity === 'high'
            ? 'üî¥'
            : alert.severity === 'medium'
              ? 'üü°'
              : 'üü¢'
        message += `${index + 1}. ${severityEmoji} ${alert.message}\n`
        message += `   üí° ${alert.recommendation}\n\n`
      })
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendTrendAnalysis:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */
async function sendSmartRecommendations(
  ctx: MyContext,
  botName: string
): Promise<void> {
  try {
    const recommendations = await generateSmartRecommendations(botName)

    let message = `üí° <b>–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ @${botName}</b>\n\n`

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if (recommendations.pricing_optimization.length > 0) {
      message += `üí∞ <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω:</b>\n`
      recommendations.pricing_optimization.forEach((item, index) => {
        message += `${index + 1}. <b>${item.service}</b>\n`
        message += `   üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${item.current_avg_price}‚≠ê\n`
        message += `   üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${item.suggested_action}\n`
        message += `   üìà –≠—Ñ—Ñ–µ–∫—Ç: ${item.expected_impact}\n\n`
      })
    }

    // –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message += `üë• <b>–£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n`
    if (recommendations.user_retention.at_risk_users > 0) {
      message += `   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —Ä–∏—Å–∫–æ–º: ${recommendations.user_retention.at_risk_users}\n\n`
    }
    message += `   üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è:</b>\n`
    recommendations.user_retention.retention_strategies.forEach(
      (strategy, index) => {
        message += `   ${index + 1}. ${strategy}\n`
      }
    )
    message += `\n`

    // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
    message += `üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞:</b>\n`
    if (recommendations.growth_opportunities.trending_services.length > 0) {
      message += `   üìà –†–∞—Å—Ç—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã: ${recommendations.growth_opportunities.trending_services.join(', ')}\n`
    }
    if (
      recommendations.growth_opportunities.underperforming_services.length > 0
    ) {
      message += `   üìâ –ù–µ–¥–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ: ${recommendations.growth_opportunities.underperforming_services.join(', ')}\n`
    }
    message += `\n   üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n`
    recommendations.growth_opportunities.expansion_suggestions.forEach(
      (suggestion, index) => {
        message += `   ${index + 1}. ${suggestion}\n`
      }
    )

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendSmartRecommendations:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function sendUserSegmentation(
  ctx: MyContext,
  botName: string
): Promise<void> {
  try {
    const segmentation = await segmentUsers(botName)

    let message = `üë• <b>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π @${botName}</b>\n\n`

    // –ü—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message += `üõ§Ô∏è <b>–ü—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n`
    message += `   ‚è±Ô∏è –î–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏: ${segmentation.user_journey.avg_time_to_first_purchase} –¥–Ω–µ–π\n`
    message += `   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${segmentation.user_journey.avg_lifetime_value}‚≠ê\n`
    message += `   üìâ –û—Ç—Ç–æ–∫: ${segmentation.user_journey.churn_rate}%\n`
    message += `   üéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å: ${segmentation.user_journey.most_popular_first_service}\n\n`

    // –°–µ–≥–º–µ–Ω—Ç—ã
    message += `üìä <b>–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n`
    segmentation.segments
      .filter(segment => segment.count > 0)
      .forEach(segment => {
        const segmentEmoji =
          {
            VIP: 'üíé',
            Regular: 'üë§',
            Occasional: 'üîÑ',
            At_Risk: '‚ö†Ô∏è',
            New: '‚ú®',
          }[segment.name] || 'üë•'

        message += `\n${segmentEmoji} <b>${segment.name} (${segment.count} —á–µ–ª.)</b>\n`
        message += `   üí∞ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: ${segment.avg_revenue}‚≠ê\n`
        message += `   üìà –£–¥–µ—Ä–∂–∞–Ω–∏–µ: ${segment.retention_rate}%\n`
        message += `   üéØ –î–µ–π—Å—Ç–≤–∏—è: ${segment.recommended_actions.slice(0, 2).join(', ')}\n`
      })

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendUserSegmentation:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI-–∏–Ω—Å–∞–π—Ç—ã (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
 */
async function sendAIInsights(ctx: MyContext, botName: string): Promise<void> {
  try {
    await ctx.reply(
      'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
    )

    const [trends, recommendations, segmentation] = await Promise.all([
      analyzeTrends(botName),
      generateSmartRecommendations(botName),
      segmentUsers(botName),
    ])

    let message = `üéØ <b>AI-–ò–Ω—Å–∞–π—Ç—ã @${botName}</b>\n\n`

    // –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    message += `üîç <b>–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:</b>\n`

    // –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
    if (trends.revenue_forecast.growth_rate > 10) {
      message += `üìà –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ (+${trends.revenue_forecast.growth_rate}%)\n`
    } else if (trends.revenue_forecast.growth_rate < -10) {
      message += `üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ (${trends.revenue_forecast.growth_rate}%)\n`
    } else {
      message += `‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã (${trends.revenue_forecast.growth_rate}%)\n`
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = segmentation.segments.reduce(
      (sum, s) => sum + s.count,
      0
    )
    const vipUsers =
      segmentation.segments.find(s => s.name === 'VIP')?.count || 0
    const atRiskUsers =
      segmentation.segments.find(s => s.name === 'At_Risk')?.count || 0

    if (vipUsers > 0) {
      message += `üíé VIP-–∫–ª–∏–µ–Ω—Ç—ã: ${vipUsers} –∏–∑ ${totalUsers} (${Math.round((vipUsers / totalUsers) * 100)}%)\n`
    }
    if (atRiskUsers > 0) {
      message += `‚ö†Ô∏è –ü–æ–¥ —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞: ${atRiskUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`
    }

    // –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if (trends.alerts.length > 0) {
      const highPriorityAlert = trends.alerts.find(a => a.severity === 'high')
      if (highPriorityAlert) {
        message += `üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${highPriorityAlert.recommendation}\n`
      }
    }

    message += `\nüéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n`

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const weeklyRecommendations = generateWeeklyRecommendations(
      trends,
      recommendations,
      segmentation
    )
    weeklyRecommendations.forEach((rec, index) => {
      message += `${index + 1}. ${rec}\n`
    })

    // –ü—Ä–æ–≥–Ω–æ–∑
    message += `\nüîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑:</b>\n`
    if (trends.revenue_forecast.predicted_amount > 0) {
      message += `üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${trends.revenue_forecast.predicted_amount.toLocaleString()}‚≠ê\n`
      message += `üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${trends.revenue_forecast.confidence_level}%\n`
    }
    message += `‚è∞ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${trends.seasonality.peak_activity_time}\n`

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–¥–æ–≤', `trends:${botName}`),
        Markup.button.callback('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', `recommendations:${botName}`),
      ],
      [
        Markup.button.callback('üë• –°–µ–≥–º–µ–Ω—Ç—ã', `segments:${botName}`),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`),
      ],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendAIInsights:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–∏–Ω—Å–∞–π—Ç–æ–≤')
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
 */
function generateWeeklyRecommendations(
  trends: TrendAnalysis,
  recommendations: SmartRecommendations,
  segmentation: UserSegmentation
): string[] {
  const recs: string[] = []

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
  if (trends.revenue_forecast.trend_direction === 'declining') {
    recs.push('üéØ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂')
  } else if (trends.revenue_forecast.trend_direction === 'growing') {
    recs.push('üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  const atRiskUsers =
    segmentation.segments.find(s => s.name === 'At_Risk')?.count || 0
  if (atRiskUsers > 0) {
    recs.push(
      `üíå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ${atRiskUsers} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`
    )
  }

  const newUsers = segmentation.segments.find(s => s.name === 'New')?.count || 0
  if (newUsers > 0) {
    recs.push(`üéÅ –°–æ–∑–¥–∞–π—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è ${newUsers} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
  recs.push(
    `‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ ${trends.seasonality.best_day_of_week} –≤ ${trends.seasonality.peak_activity_time}`
  )

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
  if (recommendations.pricing_optimization.length > 0) {
    const topService = recommendations.pricing_optimization[0]
    recs.push(
      `üí∞ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ü–µ–Ω—ã –Ω–∞ "${topService.service}" - ${topService.suggested_action.toLowerCase()}`
    )
  }

  return recs.slice(0, 4) // –ú–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
 */
async function sendAlerts(ctx: MyContext, botName: string): Promise<void> {
  try {
    const alerts = await generateAlertsForBot(botName)

    if (alerts.length === 0) {
      const message = `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è @${botName}</b>\n\n‚úÖ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!\n\n–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ.`

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
      ])

      await ctx.reply(message, {
        parse_mode: 'HTML',
        ...keyboard,
      })
      return
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    const criticalAlerts = alerts.filter(a => a.severity === 'critical')
    const warningAlerts = alerts.filter(a => a.severity === 'warning')
    const infoAlerts = alerts.filter(a => a.severity === 'info')
    const successAlerts = alerts.filter(a => a.severity === 'success')

    let message = `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è @${botName}</b>\n\n`

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
    if (criticalAlerts.length > 0) {
      message += `üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (${criticalAlerts.length}):</b>\n`
      criticalAlerts.forEach((alert, index) => {
        message += `${index + 1}. ${alert.title}\n   ${alert.message}\n\n`
      })
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (warningAlerts.length > 0) {
      message += `‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (${warningAlerts.length}):</b>\n`
      warningAlerts.forEach((alert, index) => {
        message += `${index + 1}. ${alert.title}\n   ${alert.message}\n\n`
      })
    }

    // –£—Å–ø–µ—Ö–∏
    if (successAlerts.length > 0) {
      message += `‚úÖ <b>–î–û–°–¢–ò–ñ–ï–ù–ò–Ø (${successAlerts.length}):</b>\n`
      successAlerts.forEach((alert, index) => {
        message += `${index + 1}. ${alert.title}\n   ${alert.message}\n\n`
      })
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ
    if (infoAlerts.length > 0) {
      message += `‚ÑπÔ∏è <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø (${infoAlerts.length}):</b>\n`
      infoAlerts.forEach((alert, index) => {
        message += `${index + 1}. ${alert.title}\n   ${alert.message}\n\n`
      })
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const allRecommendations = alerts.flatMap(a => a.recommendations)
    if (allRecommendations.length > 0) {
      message += `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`
      // –ë–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const uniqueRecommendations = Array.from(new Set(allRecommendations))
      uniqueRecommendations.slice(0, 5).forEach((rec, index) => {
        message += `${index + 1}. ${rec}\n`
      })
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`)],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendAlerts:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
 */
async function sendWeeklySummaryReport(
  ctx: MyContext,
  botName: string
): Promise<void> {
  try {
    const summary = await generateWeeklySummary(botName)

    const message = `${formatAlertMessage(summary)}`

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–¥–æ–≤', `trends:${botName}`),
        Markup.button.callback('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', `recommendations:${botName}`),
      ],
      [
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', `alerts:${botName}`),
        Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', `refresh:${botName}:all`),
      ],
    ])

    await ctx.reply(message, {
      parse_mode: 'HTML',
      ...keyboard,
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendWeeklySummaryReport:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏')
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
 */
function getPeriodName(period: string): string {
  switch (period) {
    case 'today':
      return '–°–µ–≥–æ–¥–Ω—è'
    case 'week':
      return '–ù–µ–¥–µ–ª—è'
    case 'month':
      return '–ú–µ—Å—è—Ü'
    case 'all':
      return '–í—Å–µ –≤—Ä–µ–º—è'
    default:
      return '–í—Å–µ –≤—Ä–µ–º—è'
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
export function setupInteractiveStats(bot: Telegraf<MyContext>): void {
  bot.command('stats_menu', interactiveStatsCommand)
  setupInteractiveStatsHandlers(bot)
}
