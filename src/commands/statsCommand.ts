import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import {
  getUserBalanceStats,
  UserBalanceStatsResult,
  getBotStatsWithCost,
  type BotStatsWithCost,
  type ServiceProfitabilityStats,
} from '@/core/supabase/getUserBalanceStats'
import {
  RubPurchaseDetail,
  XtrPurchaseDetail,
  ServiceUsageDetail,
} from '@/core/supabase/getUserBalance'
import { ADMIN_IDS_ARRAY } from '@/config'
import { getOwnedBots } from '@/core/supabase/getOwnedBots'
import { supabase } from '@/core/supabase'
import { Context } from 'telegraf'
import {
  getServiceEmoji,
  getServiceDisplayTitle,
  UserService,
} from '@/utils/serviceMapping'

// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
interface LocalUserBalanceStats {
  user_telegram_id: string
  user_first_name?: string
  user_last_name?: string
  user_username?: string
  balance_rub?: number
  balance_xtr?: number
  total_spent: number
  total_earned: number
  total_cost: number
  net_contribution: number
  transaction_count: number
  last_activity?: string
  registration_date?: string
  favorite_services: string[]
}

interface DetailedBotStats {
  bot_name: string

  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∏–∑ BotStatsWithCost)
  total_income: number
  total_outcome: number
  total_cost: number
  net_profit: number
  profit_margin: number
  cost_percentage: number

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –†—É–±–ª–∏
  rub_income: number
  rub_outcome: number
  rub_net_result: number
  rub_income_transactions: number
  rub_outcome_transactions: number

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –ó–≤–µ–∑–¥—ã
  stars_income: number
  stars_outcome: number
  stars_cost: number
  stars_net_result: number
  stars_income_transactions: number
  stars_outcome_transactions: number

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–∏–∑ BotStatsWithCost)
  total_users: number
  active_users_today: number
  active_users_week: number
  active_users_month: number
  new_users_today: number
  new_users_week: number
  new_users_month: number

  // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∏–∑ BotStatsWithCost)
  total_transactions: number
  transactions_today: number
  transactions_week: number
  transactions_month: number
  avg_transaction_value: number

  // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–æ—Å—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–∏–∑ BotStatsWithCost)
  user_growth_rate: number
  revenue_growth_rate: number
  conversion_rate: number
  retention_rate: number

  // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ (–∏–∑ BotStatsWithCost)
  top_services: ServiceProfitabilityStats[]

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∏–∑ BotStatsWithCost)
  recommendations: string[]

  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  daily_stats: PeriodStats[]
  weekly_stats: PeriodStats[]
  monthly_stats: PeriodStats[]

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  service_analysis: ServiceAnalysis[]

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
  user_segments: UserSegment[]

  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã
  financial_trends: FinancialTrend[]

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  neurovideo_income: number
  stars_topup_income: number
}

interface PeriodStats {
  period: string // ISO date
  income: number
  outcome: number
  cost: number
  profit: number
  profit_margin: number
  users: number
  transactions: number
  new_users: number
}

interface ServiceAnalysis {
  service_type: string
  service_name: string
  emoji: string

  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  revenue: number
  cost: number
  profit: number
  profit_margin: number
  cost_percentage: number

  // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  transaction_count: number
  unique_users: number
  avg_transaction_value: number

  // –¢—Ä–µ–Ω–¥—ã
  growth_rate: number
  trend: 'growing' | 'declining' | 'stable'

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  optimization_potential: string
}

interface UserSegment {
  segment_name: string
  user_count: number
  avg_revenue_per_user: number
  avg_cost_per_user: number
  avg_profit_per_user: number
  characteristics: string[]
}

interface FinancialTrend {
  metric: string
  current_value: number
  previous_value: number
  change_percent: number
  trend: 'up' | 'down' | 'stable'
  interpretation: string
}

export interface StatsTimeframe {
  period: 'today' | 'week' | 'month' | 'quarter' | 'year' | 'all'
  start_date?: string
  end_date?: string
}

export interface StatsRecommendations {
  revenue_optimization: string[]
  user_engagement: string[]
  cost_reduction: string[]
  growth_opportunities: string[]
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 * –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –≤ –∫–æ–Ω—Ü–µ
 */
const formatNumber = (value: number | null | undefined): string => {
  if (value === null || value === undefined || isNaN(value)) {
    return '0.00'
  }

  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const rounded = Math.round(value * 100) / 100

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const formatted = rounded.toFixed(2)

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.00 -> 10, 10.50 -> 10.5)
  return formatted.replace(/\.?0+$/, '')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 */
const formatPercent = (value: number | null | undefined): string => {
  if (value === null || value === undefined || isNaN(value)) {
    return '0.0'
  }

  const rounded = Math.round(value * 10) / 10
  const formatted = rounded.toFixed(1)

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –Ω–æ–ª—å –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.0 -> 10)
  return formatted.replace(/\.0$/, '')
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é formatDate –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é formatDateSafe
const formatDateSafe = (dateString: any): string => {
  if (!dateString) return 'N/A'
  try {
    const date = new Date(dateString)
    if (isNaN(date.getTime())) {
      logger.warn(`[formatDateSafe] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: ${dateString}`)
      return 'Invalid Date'
    }
    const day = String(date.getDate()).padStart(2, '0')
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const year = date.getFullYear()
    return `${day}.${month}.${year}`
  } catch (e) {
    logger.error(`[formatDateSafe] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: ${dateString}`, {
      error: e,
    })
    return 'Error Formatting'
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞
 */
export function setupStatsCommand(bot: Telegraf<MyContext>): void {
  bot.command('stats', statsCommand)
  bot.command('debug_stats', debugStatsCommand) // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  bot.command('user_spending', userSpendingCommand) // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  bot.command('find_user', findUserCommand) // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  bot.command('admin_help', adminHelpCommand) // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */
export async function statsCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ownedBots = await getOwnedBots(userId)

    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    if (!isAdmin && (!ownedBots || ownedBots.length === 0)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      return
    }

    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args =
      ctx.message && 'text' in ctx.message
        ? ctx.message.text.split(' ').slice(1)
        : []

    const timeframe = parseTimeframe(args[0])
    const isExport = args.includes('--export')
    const isDetailed = args.includes('--detailed')
    const botName =
      args.find(arg => !arg.startsWith('--') && arg !== timeframe) ||
      (ownedBots && ownedBots.length > 0 ? ownedBots[0] : '')

    // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–æ—Ç–æ–≤
    if (!botName) {
      await ctx.reply(
        '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–∏–º–µ—Ä: /stats bot_name'
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É (–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–æ—Ç–∞–º)
    if (!isAdmin && ownedBots && !ownedBots.includes(botName)) {
      await ctx.reply(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É @${botName}`)
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä SuperAdmin –¥–æ—Å—Ç—É–ø–∞
    const accessType = isAdmin ? 'üëë SuperAdmin –¥–æ—Å—Ç—É–ø' : 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞'
    const analysisType = isDetailed
      ? '–¥–µ—Ç–∞–ª—å–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ä–∞–∑–±–∏–≤–∫—É'
      : '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    await ctx.reply(`üìä –ü–æ–ª—É—á–∞—é ${analysisType}...\n${accessType}`)

    if (isDetailed) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É
      const breakdown = await getDetailedFinancialBreakdown(botName)
      const message = formatDetailedFinancialMessage(breakdown, botName)

      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
      const maxLength = 4000
      if (message.length > maxLength) {
        const parts = splitMessage(message, maxLength)
        for (const part of parts) {
          await ctx.reply(part, { parse_mode: 'HTML' })
        }
      } else {
        await ctx.reply(message, { parse_mode: 'HTML' })
      }
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const stats = await getAdditionalBotMetrics(botName)

    if (isExport) {
      // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
      await sendStatsExport(ctx, stats as DetailedBotStats, botName)
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const message = formatDetailedStatsMessage(stats as DetailedBotStats)

      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
      const maxLength = 4000
      if (message.length > maxLength) {
        const parts = splitMessage(message, maxLength)
        for (const part of parts) {
          await ctx.reply(part, { parse_mode: 'HTML' })
        }
      } else {
        await ctx.reply(message, { parse_mode: 'HTML' })
      }
    }
  } catch (error) {
    console.error('Error in statsCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
 */
function parseTimeframe(
  arg?: string
): 'today' | 'week' | 'month' | 'quarter' | 'year' | 'all' {
  switch (arg?.toLowerCase()) {
    case 'today':
    case '—Å–µ–≥–æ–¥–Ω—è':
      return 'today'
    case 'week':
    case '–Ω–µ–¥–µ–ª—è':
      return 'week'
    case 'month':
    case '–º–µ—Å—è—Ü':
      return 'month'
    case 'quarter':
    case '–∫–≤–∞—Ä—Ç–∞–ª':
      return 'quarter'
    case 'year':
    case '–≥–æ–¥':
      return 'year'
    default:
      return 'all'
  }
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
 */
function splitMessage(message: string, maxLength: number): string[] {
  const parts: string[] = []
  let currentPart = ''

  const lines = message.split('\n')

  for (const line of lines) {
    if (currentPart.length + line.length + 1 > maxLength) {
      if (currentPart) {
        parts.push(currentPart.trim())
        currentPart = ''
      }
    }
    currentPart += line + '\n'
  }

  if (currentPart.trim()) {
    parts.push(currentPart.trim())
  }

  return parts
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
async function getDetailedBotStats(
  botName: string,
  ownerId: string,
  timeframe: StatsTimeframe
): Promise<DetailedBotStats | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = await getUserBalanceStats(ownerId, botName)
    if (!statsResult || statsResult.stats.length === 0) {
      return null
    }

    const baseStats = statsResult.stats[0]

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const additionalMetrics = await getAdditionalBotMetrics(botName)

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const detailedStats: DetailedBotStats = {
      // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ BotStatsWithCost
      total_income: additionalMetrics.total_income || 0,
      total_outcome: additionalMetrics.total_outcome || 0,
      total_cost: additionalMetrics.total_cost || 0,
      net_profit: additionalMetrics.net_profit || 0,
      profit_margin: additionalMetrics.profit_margin || 0,
      cost_percentage: additionalMetrics.cost_percentage || 0,

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –†—É–±–ª–∏
      rub_income: additionalMetrics.rub_income || 0,
      rub_outcome: additionalMetrics.rub_outcome || 0,
      rub_net_result: additionalMetrics.rub_net_result || 0,
      rub_income_transactions: additionalMetrics.rub_income_transactions || 0,
      rub_outcome_transactions: additionalMetrics.rub_outcome_transactions || 0,

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –ó–≤–µ–∑–¥—ã
      stars_income: additionalMetrics.stars_income || 0,
      stars_outcome: additionalMetrics.stars_outcome || 0,
      stars_cost: additionalMetrics.stars_cost || 0,
      stars_net_result: additionalMetrics.stars_net_result || 0,
      stars_income_transactions:
        additionalMetrics.stars_income_transactions || 0,
      stars_outcome_transactions:
        additionalMetrics.stars_outcome_transactions || 0,

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
      total_users: additionalMetrics.total_users || 0,
      active_users_today: additionalMetrics.active_users_today || 0,
      active_users_week: additionalMetrics.active_users_week || 0,
      active_users_month: additionalMetrics.active_users_month || 0,
      new_users_today: additionalMetrics.new_users_today || 0,
      new_users_week: additionalMetrics.new_users_week || 0,
      new_users_month: additionalMetrics.new_users_month || 0,

      // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      total_transactions: additionalMetrics.total_transactions || 0,
      transactions_today: additionalMetrics.transactions_today || 0,
      transactions_week: additionalMetrics.transactions_week || 0,
      transactions_month: additionalMetrics.transactions_month || 0,
      avg_transaction_value: additionalMetrics.avg_transaction_value || 0,

      // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–æ—Å—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
      user_growth_rate: additionalMetrics.user_growth_rate || 0,
      revenue_growth_rate: additionalMetrics.revenue_growth_rate || 0,
      conversion_rate: additionalMetrics.conversion_rate || 0,
      retention_rate: additionalMetrics.retention_rate || 0,

      // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
      top_services: additionalMetrics.top_services || [],
      recommendations: additionalMetrics.recommendations || [],

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      bot_name: botName,
      neurovideo_income: additionalMetrics.neurovideo_income || 0,
      stars_topup_income: additionalMetrics.stars_topup_income || 0,
      daily_stats: [],
      weekly_stats: [],
      monthly_stats: [],
      service_analysis: [],
      user_segments: [],
      financial_trends: [],
    }

    return detailedStats
  } catch (error) {
    logger.error('[getDetailedBotStats] Error:', { error, botName, ownerId })
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞
 */
async function getAdditionalBotMetrics(
  botName: string
): Promise<Partial<DetailedBotStats>> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const stats = await getBotStatsWithCost(botName, 'all')

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const { data: payments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('*, category')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')

    if (paymentsError) {
      console.error(
        'Error fetching payments for additional metrics:',
        paymentsError
      )
      return stats
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const neurovideoIncome = payments
      .filter(
        p =>
          p.type === 'MONEY_INCOME' &&
          (p.description?.includes('NEUROVIDEO') ||
            p.service_type?.includes('video'))
      )
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    const starsTopupIncome = payments
      .filter(
        p =>
          p.type === 'MONEY_INCOME' &&
          (p.description?.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω') ||
            p.description?.includes('topup') ||
            p.description?.includes('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'))
      )
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    return {
      ...stats,
      bot_name: botName,
      neurovideo_income: neurovideoIncome,
      stars_topup_income: starsTopupIncome,
      daily_stats: [],
      weekly_stats: [],
      monthly_stats: [],
      service_analysis: [],
      user_segments: [],
      financial_trends: [],
    }
  } catch (error) {
    console.error('Error in getAdditionalBotMetrics:', error)
    return {
      total_income: 0,
      total_outcome: 0,
      total_cost: 0,
      net_profit: 0,
      profit_margin: 0,
      cost_percentage: 0,

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –†—É–±–ª–∏
      rub_income: 0,
      rub_outcome: 0,
      rub_net_result: 0,
      rub_income_transactions: 0,
      rub_outcome_transactions: 0,

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –ó–≤–µ–∑–¥—ã
      stars_income: 0,
      stars_outcome: 0,
      stars_cost: 0,
      stars_net_result: 0,
      stars_income_transactions: 0,
      stars_outcome_transactions: 0,

      total_users: 0,
      active_users_today: 0,
      active_users_week: 0,
      active_users_month: 0,
      new_users_today: 0,
      new_users_week: 0,
      new_users_month: 0,
      total_transactions: 0,
      transactions_today: 0,
      transactions_week: 0,
      transactions_month: 0,
      avg_transaction_value: 0,
      user_growth_rate: 0,
      revenue_growth_rate: 0,
      conversion_rate: 0,
      retention_rate: 0,
      top_services: [],
      recommendations: [],
      bot_name: botName,
      neurovideo_income: 0,
      stars_topup_income: 0,
      daily_stats: [],
      weekly_stats: [],
      monthly_stats: [],
      service_analysis: [],
      user_segments: [],
      financial_trends: [],
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTimeCondition(timeframe: StatsTimeframe) {
  const now = new Date()
  let startDate = new Date()

  switch (timeframe.period) {
    case 'today':
      startDate.setHours(0, 0, 0, 0)
      break
    case 'week':
      startDate.setDate(now.getDate() - 7)
      break
    case 'month':
      startDate.setMonth(now.getMonth() - 1)
      break
    case 'quarter':
      startDate.setMonth(now.getMonth() - 3)
      break
    case 'year':
      startDate.setFullYear(now.getFullYear() - 1)
      break
    default:
      startDate = new Date('2020-01-01') // –í—Å–µ –≤—Ä–µ–º—è
  }

  return {
    start_date: startDate.toISOString(),
    end_date: now.toISOString(),
  }
}

function getActiveUsersCount(activityData: any[], days: number): number {
  if (!activityData) return 0

  const cutoffDate = new Date()
  cutoffDate.setDate(cutoffDate.getDate() - days)

  const activeUsers = new Set()
  activityData.forEach(activity => {
    if (new Date(activity.created_at) >= cutoffDate) {
      activeUsers.add(activity.telegram_id)
    }
  })

  return activeUsers.size
}

function aggregateServiceStats(
  serviceData: any[]
): Array<{ service_name: string; usage_count: number; revenue: number }> {
  if (!serviceData) return []

  const serviceMap = new Map()

  serviceData.forEach(service => {
    const name = service.service_type || 'unknown'
    const existing = serviceMap.get(name) || {
      service_name: name,
      usage_count: 0,
      revenue: 0,
    }
    existing.usage_count += 1
    existing.revenue += service.stars || 0
    serviceMap.set(name, existing)
  })

  return Array.from(serviceMap.values())
    .sort((a, b) => b.revenue - a.revenue)
    .slice(0, 5) // –¢–æ–ø 5 —Å–µ—Ä–≤–∏—Å–æ–≤
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
function aggregateServiceStatsWithCost(serviceData: any[]): Array<{
  service_name: string
  usage_count: number
  revenue: number
  cost: number
  profit: number
  margin: number
}> {
  if (!serviceData) return []

  const serviceMap = new Map()

  serviceData.forEach(service => {
    const name = service.service_type || 'unknown'
    const existing = serviceMap.get(name) || {
      service_name: name,
      usage_count: 0,
      revenue: 0,
      cost: 0,
      profit: 0,
      margin: 0,
    }
    existing.usage_count += 1
    existing.revenue += service.stars || 0
    existing.cost += service.cost || 0
    serviceMap.set(name, existing)
  })

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∏ –º–∞—Ä–∂—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  const services = Array.from(serviceMap.values()).map(service => {
    service.profit = service.revenue - service.cost
    service.margin =
      service.revenue > 0
        ? Math.round((service.profit / service.revenue) * 100)
        : 0
    return service
  })

  return services
    .sort((a, b) => b.profit - a.profit) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
    .slice(0, 5) // –¢–æ–ø 5 —Å–µ—Ä–≤–∏—Å–æ–≤
}

function calculateGrowthRate(
  userData: any[],
  timeframe: StatsTimeframe
): number {
  if (!userData || userData.length === 0) return 0

  const now = new Date()
  const periodDays =
    timeframe.period === 'week' ? 7 : timeframe.period === 'month' ? 30 : 365
  const currentPeriodStart = new Date(
    now.getTime() - periodDays * 24 * 60 * 60 * 1000
  )
  const previousPeriodStart = new Date(
    currentPeriodStart.getTime() - periodDays * 24 * 60 * 60 * 1000
  )

  const currentPeriodUsers = userData.filter(
    user => new Date(user.created_at) >= currentPeriodStart
  ).length

  const previousPeriodUsers = userData.filter(
    user =>
      new Date(user.created_at) >= previousPeriodStart &&
      new Date(user.created_at) < currentPeriodStart
  ).length

  if (previousPeriodUsers === 0) return currentPeriodUsers > 0 ? 100 : 0

  return Math.round(
    ((currentPeriodUsers - previousPeriodUsers) / previousPeriodUsers) * 100
  )
}

function calculateRetentionRate(activityData: any[]): number {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç retention rate
  if (!activityData || activityData.length === 0) return 0

  const uniqueUsers = new Set(activityData.map(a => a.telegram_id))
  const activeLastWeek = getActiveUsersCount(activityData, 7)

  return uniqueUsers.size > 0
    ? Math.round((activeLastWeek / uniqueUsers.size) * 100)
    : 0
}

function calculateConversionRate(userData: any[], activityData: any[]): number {
  if (!userData || !activityData) return 0

  const totalUsers = userData.length
  const payingUsers = new Set(
    activityData.filter(a => a.type === 'MONEY_INCOME').map(a => a.telegram_id)
  ).size

  return totalUsers > 0 ? Math.round((payingUsers / totalUsers) * 100) : 0
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatDetailedStatsMessage(stats: DetailedBotStats): string {
  let message = ''

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  message += `üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @${stats.bot_name}</b>\n\n`

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –†—É–±–ª–∏
  message += `üí∞ <b>–†–µ–∞–ª—å–Ω—ã–µ —Ä—É–±–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n`
  message += `   üìà –î–æ—Ö–æ–¥—ã: ${formatNumber(stats.rub_income)} ‚ÇΩ (${stats.rub_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatNumber(stats.rub_outcome)} ‚ÇΩ (${stats.rub_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üíé –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${formatNumber(stats.rub_net_result)} ‚ÇΩ\n\n`

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º - –ó–≤–µ–∑–¥—ã
  message += `‚≠ê <b>–†–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö</b>\n`
  message += `   üìà –î–æ—Ö–æ–¥—ã: ${formatNumber(stats.stars_income)} ‚≠ê (${stats.stars_income_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatNumber(stats.stars_outcome)} ‚≠ê (${stats.stars_outcome_transactions} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(stats.stars_cost)} ‚≠ê\n`
  message += `   üíé –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${formatNumber(stats.stars_net_result)} ‚≠ê\n\n`

  // –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  message += `üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>\n`
  message += `   üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatNumber(stats.total_income)} ‚≠êÔ∏è\n`
  message += `   üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: ${formatNumber(stats.total_outcome)} ‚≠êÔ∏è\n`
  message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(stats.total_cost)} ‚≠êÔ∏è\n`
  message += `   üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${formatNumber(stats.net_profit)} ‚≠êÔ∏è\n`
  message += `   üìä –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${formatPercent(stats.profit_margin)}%\n`
  message += `   üìà –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç –æ–±–æ—Ä–æ—Ç–∞: ${formatPercent(stats.cost_percentage)}%\n\n`

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
  message += `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n`
  message += `   üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\n`
  message += `   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.active_users_today}\n`
  message += `   üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.active_users_week}\n`
  message += `   üìÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.active_users_month}\n`
  message += `   ‚ú® –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${stats.new_users_month}\n`
  message += `   üìä –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${formatPercent(stats.user_growth_rate)}%\n`
  message += `   üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${formatPercent(stats.conversion_rate)}%\n`
  message += `   üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: ${formatPercent(stats.retention_rate)}%\n\n`

  // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  message += `‚ö° <b>–û–ø–µ—Ä–∞—Ü–∏–∏</b>\n`
  message += `   üî¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.total_transactions}\n`
  message += `   üìà –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: ${formatNumber(stats.avg_transaction_value)} ‚≠êÔ∏è\n`
  message += `   üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.transactions_today}\n`
  message += `   üìä –ó–∞ –Ω–µ–¥–µ–ª—é: ${stats.transactions_week}\n`
  message += `   üìÜ –ó–∞ –º–µ—Å—è—Ü: ${stats.transactions_month}\n\n`

  // –¢–æ–ø —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
  if (stats.top_services && stats.top_services.length > 0) {
    message += `üèÜ <b>–¢–æ–ø —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏</b>\n`
    stats.top_services.slice(0, 5).forEach((service, index) => {
      message += `   ${index + 1}. ${service.emoji} ${service.service_display_name}\n`
      message += `      üí∞ –í—ã—Ä—É—á–∫–∞: ${formatNumber(service.total_revenue)} ‚≠êÔ∏è | üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(service.total_cost)} ‚≠êÔ∏è\n`
      message += `      üìà –ü—Ä–∏–±—ã–ª—å: ${formatNumber(service.profit)} ‚≠êÔ∏è | üìä –ú–∞—Ä–∂–∞: ${formatPercent(service.profit_margin)}%\n`
      message += `      üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${service.transaction_count}\n`
    })
    message += '\n'
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (stats.recommendations && stats.recommendations.length > 0) {
    message += `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n`
    stats.recommendations.forEach(rec => {
      message += `   ${rec}\n`
    })
    message += '\n'
  }

  return message
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function generateRecommendations(stats: DetailedBotStats): string[] {
  const recommendations: string[] = []

  // –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  if (stats.profit_margin < 50) {
    recommendations.push(
      'üí° –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω'
    )
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
  if (stats.cost_percentage > 30) {
    recommendations.push(
      '‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å. –ò—â–∏—Ç–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ API'
    )
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  if (stats.conversion_rate < 10) {
    recommendations.push(
      'üìà –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è. –£–ª—É—á—à–∏—Ç–µ onboarding –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ'
    )
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (
    stats.total_users > 0 &&
    stats.active_users_today / stats.total_users < 0.1
  ) {
    recommendations.push(
      'üì± –ù–∏–∑–∫–∞—è –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –î–æ–±–∞–≤—å—Ç–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'
    )
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
  if (stats.user_growth_rate > 20) {
    recommendations.push('üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç! –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã')
  } else if (stats.user_growth_rate < 5) {
    recommendations.push(
      'üì¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç. –£—Å–∏–ª—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É'
    )
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø —Å–µ—Ä–≤–∏—Å–æ–≤
  if (stats.top_services && stats.top_services.length > 0) {
    const topService = stats.top_services[0]
    if (topService.total_revenue / stats.total_income > 0.5) {
      recommendations.push(
        `‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ "${topService.service_display_name}". –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`
      )
    }

    if (topService.profit_margin > 80) {
      recommendations.push(
        `üöÄ –°–µ—Ä–≤–∏—Å "${topService.service_display_name}" –æ—á–µ–Ω—å –ø—Ä–∏–±—ã–ª—å–Ω—ã–π. –ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–µ–µ`
      )
    }
  }

  if (recommendations.length === 0) {
    recommendations.push('‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ')
  }

  return recommendations
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ CSV —Ñ–æ—Ä–º–∞—Ç
 */
function exportStatsToCSV(stats: DetailedBotStats): string {
  const lines = [
    '–ú–µ—Ç—Ä–∏–∫–∞,–ó–Ω–∞—á–µ–Ω–∏–µ',
    `–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞,${stats.bot_name}`,
    `–û–±—â–∏–π –¥–æ—Ö–æ–¥,${formatNumber(stats.total_income)}`,
    `–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥,${formatNumber(stats.total_outcome)}`,
    `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å,${formatNumber(stats.total_cost)}`,
    `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å,${formatNumber(stats.net_profit)}`,
    `–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %,${formatPercent(stats.profit_margin)}`,
    `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å %,${formatPercent(stats.cost_percentage)}`,
    `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,${stats.total_users}`,
    `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è,${stats.active_users_today}`,
    `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é,${stats.active_users_week}`,
    `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü,${stats.active_users_month}`,
    `–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü,${stats.new_users_month}`,
    `–†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %,${formatPercent(stats.user_growth_rate)}`,
    `–ö–æ–Ω–≤–µ—Ä—Å–∏—è %,${formatPercent(stats.conversion_rate)}`,
    `–£–¥–µ—Ä–∂–∞–Ω–∏–µ %,${formatPercent(stats.retention_rate)}`,
    `–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π,${stats.total_transactions}`,
    `–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞,${formatNumber(stats.avg_transaction_value)}`,
    '',
    '–¢–æ–ø —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
    '–°–µ—Ä–≤–∏—Å,–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π,–í—ã—Ä—É—á–∫–∞,–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å,–ü—Ä–∏–±—ã–ª—å,–ú–∞—Ä–∂–∞ %',
    ...stats.top_services.map(
      service =>
        `${service.service_name},${service.transaction_count},${formatNumber(service.total_revenue)},${formatNumber(service.total_cost)},${formatNumber(service.profit)},${formatPercent(service.profit_margin)}`
    ),
  ]

  return lines.join('\n')
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è formatStatsMessage - –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function formatStatsMessage(
  stats: LocalUserBalanceStats,
  botName: string,
  includeMainHeader = true
): string {
  let message = ''
  if (includeMainHeader) {
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ @${botName}</b>\n\n`
  }

  message += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${stats.user_telegram_id}\n`
  if (stats.user_first_name || stats.user_last_name) {
    message += `   –ò–º—è: ${stats.user_first_name || ''} ${stats.user_last_name || ''}`
    message += `\n`
  }
  if (stats.user_username) {
    message += `   Username: @${stats.user_username}`
    message += `\n`
  }
  message += `\n`

  message += `üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n`
  message += `   RUB: ${formatNumber(stats.balance_rub)} ‚ÇΩ\n`
  message += `   XTR: ${stats.balance_xtr ?? 0} ‚≠êÔ∏è\n\n`

  message += `üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n`
  message += `   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${formatNumber(stats.total_spent)} ‚≠êÔ∏è\n`
  message += `   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${formatNumber(stats.total_earned)} ‚≠êÔ∏è\n`
  message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(stats.total_cost)} ‚≠êÔ∏è\n`
  message += `   üíé –í–∫–ª–∞–¥ –≤ –ø—Ä–∏–±—ã–ª—å: ${formatNumber(stats.net_contribution)} ‚≠êÔ∏è\n`
  message += `   üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transaction_count}\n`

  if (stats.last_activity) {
    message += `   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(stats.last_activity).toLocaleDateString('ru-RU')}\n`
  }

  if (stats.registration_date) {
    message += `   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(stats.registration_date).toLocaleDateString('ru-RU')}\n`
  }

  if (stats.favorite_services && stats.favorite_services.length > 0) {
    message += `   ‚≠ê –õ—é–±–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${stats.favorite_services.join(', ')}\n`
  }

  return message
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV
async function sendStatsExport(
  ctx: MyContext,
  stats: DetailedBotStats,
  botName: string
): Promise<void> {
  try {
    const csvData = exportStatsToCSV(stats)
    const fileName = `stats_${botName}_${new Date().toISOString().split('T')[0]}.csv`

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const fs = require('fs')
    const path = require('path')
    const tempDir = path.join(process.cwd(), 'tmp')

    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true })
    }

    const filePath = path.join(tempDir, fileName)
    fs.writeFileSync(filePath, csvData, 'utf8')

    await ctx.replyWithDocument(
      { source: filePath, filename: fileName },
      {
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è @${botName}\nüìÖ ${formatDateSafe(new Date())}`,
        parse_mode: 'HTML',
      }
    )

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(filePath)
  } catch (error) {
    logger.error('[sendStatsExport] Error:', { error, botName })
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

// –§—É–Ω–∫—Ü–∏—è getServiceEmoji —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ @/utils/serviceMapping

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É
function formatBotStatsMessage(
  stats: DetailedBotStats,
  includeMainHeader = true
): string {
  let message = ''
  if (includeMainHeader) {
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ @${stats.bot_name}</b>\n\n`
  }

  // –î–æ—Ö–æ–¥—ã
  message += `üí∞ <b>–î–æ—Ö–æ–¥—ã</b>\n`
  message += `   –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–∞: ${formatNumber(stats.total_income)} ‚≠êÔ∏è\n`
  message += `   - NEUROVIDEO: ${formatNumber(stats.neurovideo_income)} ‚≠êÔ∏è\n`
  message += `   - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${formatNumber(stats.stars_topup_income)} ‚≠êÔ∏è\n\n`

  // –†–∞—Å—Ö–æ–¥—ã
  message += `üí∏ <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n`
  message += `   –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${formatNumber(stats.total_outcome)} ‚≠êÔ∏è\n\n`

  // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–æ–≤–æ–µ)
  message += `üí≤ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</b>\n`
  message += `   –í—Å–µ–≥–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(stats.total_cost)} ‚≠êÔ∏è\n\n`

  // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–Ω–æ–≤–æ–µ)
  message += `üìà <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å</b>\n`
  message += `   –ü—Ä–∏–±—ã–ª—å: ${formatNumber(stats.net_profit)} ‚≠êÔ∏è\n`
  message += `   (–î–æ—Ö–æ–¥ - –†–∞—Å—Ö–æ–¥—ã - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)\n\n`

  return message
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤–∞–ª—é—Ç–∞–º –∏ —Ç–∏–ø–∞–º –ø–ª–∞—Ç–µ–∂–µ–π
 */
async function getDetailedFinancialBreakdown(botName: string): Promise<{
  summary: any
  rub_breakdown: any
  stars_breakdown: any
  bonus_breakdown: any
  verification: any
}> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –±–æ—Ç–∞
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('*, category')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .order('payment_date', { ascending: false })

    if (error) throw error

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const getTransactionCategory = (payment: any) => {
      // MONEY_INCOME –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
      if (payment.type === 'MONEY_INCOME') {
        return 'real'
      }
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ category –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      return payment.category === 'REAL' ? 'real' : 'bonus'
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const realPayments = payments.filter(
      p => getTransactionCategory(p) === 'real'
    )
    const bonusPayments = payments.filter(
      p => getTransactionCategory(p) === 'bonus'
    )

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–í–°–ï –≤–∞–ª—é—Ç—ã)
    const realIncomePayments = realPayments.filter(
      p => p.type === 'MONEY_INCOME'
    )
    const realOutcomePayments = realPayments.filter(
      p => p.type === 'MONEY_OUTCOME'
    )

    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    const realRubPayments = realPayments.filter(p => p.currency === 'RUB')
    const realStarsPayments = realPayments.filter(
      p => p.currency === 'STARS' || p.currency === 'XTR'
    )

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö RUB –ø–ª–∞—Ç–µ–∂–µ–π
    const realRubIncome = realRubPayments
      .filter(p => p.type === 'MONEY_INCOME')
      .reduce((sum, p) => sum + (p.amount || 0), 0)

    const realRubOutcome = realRubPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .reduce((sum, p) => sum + (p.amount || 0), 0)

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö STARS –ø–ª–∞—Ç–µ–∂–µ–π
    const realStarsIncome = realStarsPayments
      .filter(p => p.type === 'MONEY_INCOME')
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    const realStarsOutcome = realStarsPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    const realStarsCost = realStarsPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .reduce((sum, p) => sum + (p.cost || 0), 0)

    // –ê–Ω–∞–ª–∏–∑ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–í–°–ï –≤–∞–ª—é—Ç—ã)
    const bonusIncomePayments = bonusPayments.filter(
      p => p.type === 'MONEY_INCOME'
    )
    const bonusOutcomePayments = bonusPayments.filter(
      p => p.type === 'MONEY_OUTCOME'
    )

    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    const bonusStarsPayments = bonusPayments.filter(
      p => p.currency === 'STARS' || p.currency === 'XTR'
    )

    const bonusStarsIncome = bonusStarsPayments
      .filter(p => p.type === 'MONEY_INCOME')
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    const bonusStarsOutcome = bonusStarsPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    const bonusStarsCost = bonusStarsPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .reduce((sum, p) => sum + (p.cost || 0), 0)

    // –û–ë–©–ò–ï –°–£–ú–ú–´ (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
    const totalRealIncomeStars = realIncomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const totalRealIncomeRub = realIncomePayments.reduce(
      (sum, p) => sum + (p.amount || 0),
      0
    )
    const totalRealOutcomeStars = realOutcomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )

    const totalBonusIncomeStars = bonusIncomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const totalBonusOutcomeStars = bonusOutcomePayments.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )

    // –¢–æ–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ)
    const topRealIncomeTransactions = realPayments
      .filter(p => p.type === 'MONEY_INCOME')
      .sort((a, b) => (b.stars || b.amount || 0) - (a.stars || a.amount || 0))
      .slice(0, 5)
      .map(p => ({
        date: p.payment_date,
        amount: p.amount,
        stars: p.stars,
        currency: p.currency,
        description: p.description,
        service_type: p.service_type,
        category: 'real',
      }))

    const topRealOutcomeTransactions = realPayments
      .filter(p => p.type === 'MONEY_OUTCOME')
      .sort((a, b) => (b.stars || b.amount || 0) - (a.stars || a.amount || 0))
      .slice(0, 5)
      .map(p => ({
        date: p.payment_date,
        amount: p.amount,
        stars: p.stars,
        cost: p.cost,
        currency: p.currency,
        description: p.description,
        service_type: p.service_type,
        category: 'real',
      }))

    // –¢–æ–ø –±–æ–Ω—É—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const topBonusTransactions = bonusPayments
      .sort((a, b) => (b.stars || b.amount || 0) - (a.stars || a.amount || 0))
      .slice(0, 5)
      .map(p => ({
        date: p.payment_date,
        amount: p.amount,
        stars: p.stars,
        currency: p.currency,
        description: p.description,
        service_type: p.service_type,
        type: p.type,
        category: 'bonus',
      }))

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const now = new Date()
    const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)

    const recentRealPayments = realPayments.filter(
      p => new Date(p.payment_date) >= lastMonth
    )
    const recentBonusPayments = bonusPayments.filter(
      p => new Date(p.payment_date) >= lastMonth
    )

    return {
      summary: {
        total_payments: payments.length,
        real_payments: realPayments.length,
        bonus_payments: bonusPayments.length,
        date_range: {
          first: payments[payments.length - 1]?.payment_date,
          last: payments[0]?.payment_date,
        },
        currencies_used: Array.from(new Set(payments.map(p => p.currency))),
        payment_types: Array.from(new Set(payments.map(p => p.type))),
        services_used: Array.from(
          new Set(payments.map(p => p.service_type).filter(Boolean))
        ),
      },
      rub_breakdown: {
        total_transactions: realRubPayments.length,
        income: {
          amount: realRubIncome,
          count: realRubPayments.filter(p => p.type === 'MONEY_INCOME').length,
        },
        outcome: {
          amount: realRubOutcome,
          count: realRubPayments.filter(p => p.type === 'MONEY_OUTCOME').length,
        },
        net: realRubIncome - realRubOutcome,
      },
      stars_breakdown: {
        total_transactions:
          realIncomePayments.length + realOutcomePayments.length,
        income: {
          amount: totalRealIncomeStars,
          count: realIncomePayments.length,
        },
        outcome: {
          amount: totalRealOutcomeStars,
          count: realOutcomePayments.length,
          cost: realOutcomePayments.reduce((sum, p) => sum + (p.cost || 0), 0),
        },
        net_revenue: totalRealIncomeStars - totalRealOutcomeStars,
        net_profit:
          totalRealIncomeStars -
          totalRealOutcomeStars -
          realOutcomePayments.reduce((sum, p) => sum + (p.cost || 0), 0),
        margin:
          totalRealIncomeStars > 0
            ? ((totalRealIncomeStars -
                totalRealOutcomeStars -
                realOutcomePayments.reduce(
                  (sum, p) => sum + (p.cost || 0),
                  0
                )) /
                totalRealIncomeStars) *
              100
            : 0,
      },
      bonus_breakdown: {
        total_transactions:
          bonusIncomePayments.length + bonusOutcomePayments.length,
        income: {
          amount: totalBonusIncomeStars,
          count: bonusIncomePayments.length,
        },
        outcome: {
          amount: totalBonusOutcomeStars,
          count: bonusOutcomePayments.length,
          cost: bonusOutcomePayments.reduce((sum, p) => sum + (p.cost || 0), 0),
        },
        net_usage: totalBonusIncomeStars - totalBonusOutcomeStars,
        top_transactions: topBonusTransactions,
      },
      verification: {
        top_real_income_transactions: topRealIncomeTransactions,
        top_real_outcome_transactions: topRealOutcomeTransactions,
        top_bonus_transactions: topBonusTransactions,
        recent_activity: {
          real_last_month: recentRealPayments.length,
          bonus_last_month: recentBonusPayments.length,
        },
        data_quality: {
          payments_with_null_stars: payments.filter(
            p => p.stars === null || p.stars === undefined
          ).length,
          payments_with_null_cost: payments.filter(
            p => p.cost === null || p.cost === undefined
          ).length,
          payments_with_description: payments.filter(p => p.description).length,
          system_payments: bonusPayments.length,
        },
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–º
        test_comparison: {
          total_real_income_stars: totalRealIncomeStars,
          total_real_income_rub: totalRealIncomeRub,
          total_real_outcome_stars: totalRealOutcomeStars,
          total_bonus_income_stars: totalBonusIncomeStars,
          total_bonus_outcome_stars: totalBonusOutcomeStars,
          calculated_balance:
            totalRealIncomeStars +
            totalBonusIncomeStars -
            (totalRealOutcomeStars + totalBonusOutcomeStars),
        },
      },
    }
  } catch (error) {
    console.error('Error in getDetailedFinancialBreakdown:', error)
    throw error
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ä–∞–∑–±–∏–≤–∫—É
 */
function formatDetailedFinancialMessage(
  breakdown: any,
  botName: string
): string {
  let message = `üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ @${botName}</b>\n\n`

  // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  message += `üìã <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n`
  message += `   üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${breakdown.summary.total_payments}\n`
  message += `   üí∞ –†–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: ${breakdown.summary.real_payments}\n`
  message += `   üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ/—Ç–µ—Å—Ç–æ–≤—ã–µ: ${breakdown.summary.bonus_payments}\n`
  message += `   üìÖ –ü–µ—Ä–∏–æ–¥: ${breakdown.summary.date_range.first?.split('T')[0]} - ${breakdown.summary.date_range.last?.split('T')[0]}\n`
  message += `   üí± –í–∞–ª—é—Ç—ã: ${breakdown.summary.currencies_used.join(', ')}\n`
  message += `   üîß –°–µ—Ä–≤–∏—Å—ã: ${breakdown.summary.services_used.slice(0, 3).join(', ')}${breakdown.summary.services_used.length > 3 ? '...' : ''}\n\n`

  // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä—É–±–ª—è–º (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ)
  if (breakdown.rub_breakdown.total_transactions > 0) {
    message += `üí∞ <b>–†–µ–∞–ª—å–Ω—ã–µ —Ä—É–±–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n`
    message += `   üìà –î–æ—Ö–æ–¥—ã: ${formatNumber(breakdown.rub_breakdown.income.amount)} ‚ÇΩ (${breakdown.rub_breakdown.income.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
    message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatNumber(breakdown.rub_breakdown.outcome.amount)} ‚ÇΩ (${breakdown.rub_breakdown.outcome.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
    message += `   üíé –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${formatNumber(breakdown.rub_breakdown.net)} ‚ÇΩ\n\n`
  }

  // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∑–≤–µ–∑–¥–∞–º (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ)
  message += `‚≠ê <b>–†–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö</b>\n`
  message += `   üìà –î–æ—Ö–æ–¥—ã: ${formatNumber(breakdown.stars_breakdown.income.amount)} ‚≠ê (${breakdown.stars_breakdown.income.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${formatNumber(breakdown.stars_breakdown.outcome.amount)} ‚≠ê (${breakdown.stars_breakdown.outcome.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
  message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(breakdown.stars_breakdown.outcome.cost)} ‚≠ê\n`
  message += `   üí∞ –ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞: ${formatNumber(breakdown.stars_breakdown.net_revenue)} ‚≠ê\n`
  message += `   üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${formatNumber(breakdown.stars_breakdown.net_profit)} ‚≠ê\n`
  message += `   üìä –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${formatPercent(breakdown.stars_breakdown.margin)}%\n\n`

  // –ë–æ–Ω—É—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  if (breakdown.bonus_breakdown.total_transactions > 0) {
    message += `üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ/—Ç–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n`
    message += `   üìà –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${formatNumber(breakdown.bonus_breakdown.income.amount)} ‚≠ê (${breakdown.bonus_breakdown.income.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
    message += `   üìâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${formatNumber(breakdown.bonus_breakdown.outcome.amount)} ‚≠ê (${breakdown.bonus_breakdown.outcome.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`
    message += `   üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(breakdown.bonus_breakdown.outcome.cost)} ‚≠ê\n`
    message += `   üí´ –û—Å—Ç–∞—Ç–æ–∫ –±–æ–Ω—É—Å–æ–≤: ${formatNumber(breakdown.bonus_breakdown.net_usage)} ‚≠ê\n`

    // –¢–æ–ø –±–æ–Ω—É—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (breakdown.bonus_breakdown.top_transactions.length > 0) {
      message += `   üîù –ö—Ä—É–ø–Ω–µ–π—à–∏–µ –±–æ–Ω—É—Å—ã:\n`
      breakdown.bonus_breakdown.top_transactions
        .slice(0, 3)
        .forEach((t: any, i: number) => {
          const typeIcon = t.type === 'MONEY_INCOME' ? 'üìà' : 'üìâ'
          const amount = formatNumber(t.stars || t.amount)
          message += `      ${i + 1}. ${typeIcon} ${amount} ${t.currency === 'RUB' ? '‚ÇΩ' : '‚≠ê'} - ${t.description?.substring(0, 30) || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}...\n`
        })
    }
    message += '\n'
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  message += `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n`
  if (breakdown.verification.top_real_income_transactions.length > 0) {
    message += `   üìà –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã:\n`
    breakdown.verification.top_real_income_transactions
      .slice(0, 3)
      .forEach((t: any, i: number) => {
        const amount = formatNumber(t.stars || t.amount)
        message += `      ${i + 1}. ${amount} ${t.currency === 'RUB' ? '‚ÇΩ' : '‚≠ê'} - ${t.description?.substring(0, 30) || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}...\n`
      })
  } else {
    message += `   ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤\n`
  }

  if (breakdown.verification.top_real_outcome_transactions.length > 0) {
    message += `   üìâ –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n`
    breakdown.verification.top_real_outcome_transactions
      .slice(0, 3)
      .forEach((t: any, i: number) => {
        const amount = formatNumber(t.stars || t.amount)
        const cost = formatNumber(t.cost || 0)
        message += `      ${i + 1}. ${amount} ${t.currency === 'RUB' ? '‚ÇΩ' : '‚≠ê'} (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} ‚≠ê) - ${t.service_type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`
      })
  } else {
    message += `   ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n`
  }

  // –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
  message += `\nüìä <b>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö</b>\n`
  message += `   ‚ö†Ô∏è –ë–µ–∑ –∑–≤–µ–∑–¥: ${breakdown.verification.data_quality.payments_with_null_stars}\n`
  message += `   ‚ö†Ô∏è –ë–µ–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: ${breakdown.verification.data_quality.payments_with_null_cost}\n`
  message += `   ‚úÖ –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: ${breakdown.verification.data_quality.payments_with_description}\n`
  message += `   üéÅ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${breakdown.verification.data_quality.system_payments}\n`
  message += `   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü: —Ä–µ–∞–ª—å–Ω—ã—Ö ${breakdown.verification.recent_activity.real_last_month}, –±–æ–Ω—É—Å–Ω—ã—Ö ${breakdown.verification.recent_activity.bonus_last_month}\n`

  return message
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–ª–∞–¥–∫–∞)
 */
async function debugPaymentData(botName: string): Promise<any> {
  try {
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('*, category')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .order('payment_date', { ascending: false })

    if (error) throw error

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const getTransactionCategory = (payment: any) => {
      // MONEY_INCOME –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
      if (payment.type === 'MONEY_INCOME') {
        return 'real'
      }
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ category –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      return payment.category === 'REAL' ? 'real' : 'bonus'
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö MONEY_INCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const allIncomeTransactions = payments.filter(
      p => p.type === 'MONEY_INCOME'
    )
    const realIncomeTransactions = allIncomeTransactions.filter(
      p => getTransactionCategory(p) === 'real'
    )
    const bonusIncomeTransactions = allIncomeTransactions.filter(
      p => getTransactionCategory(p) === 'bonus'
    )

    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º –¥–ª—è MONEY_INCOME
    const incomeByCurrency = {
      all: {
        rub: allIncomeTransactions.filter(p => p.currency === 'RUB'),
        stars: allIncomeTransactions.filter(
          p => p.currency === 'STARS' || p.currency === 'XTR'
        ),
      },
      real: {
        rub: realIncomeTransactions.filter(p => p.currency === 'RUB'),
        stars: realIncomeTransactions.filter(
          p => p.currency === 'STARS' || p.currency === 'XTR'
        ),
      },
      bonus: {
        rub: bonusIncomeTransactions.filter(p => p.currency === 'RUB'),
        stars: bonusIncomeTransactions.filter(
          p => p.currency === 'STARS' || p.currency === 'XTR'
        ),
      },
    }

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const analysis = {
      total_payments: payments.length,
      total_income_transactions: allIncomeTransactions.length,

      all_income: {
        rub_count: incomeByCurrency.all.rub.length,
        rub_sum: incomeByCurrency.all.rub.reduce(
          (sum, p) => sum + (p.amount || 0),
          0
        ),
        stars_count: incomeByCurrency.all.stars.length,
        stars_sum: incomeByCurrency.all.stars.reduce(
          (sum, p) => sum + (p.stars || 0),
          0
        ),
      },

      real_income: {
        rub_count: incomeByCurrency.real.rub.length,
        rub_sum: incomeByCurrency.real.rub.reduce(
          (sum, p) => sum + (p.amount || 0),
          0
        ),
        stars_count: incomeByCurrency.real.stars.length,
        stars_sum: incomeByCurrency.real.stars.reduce(
          (sum, p) => sum + (p.stars || 0),
          0
        ),
        sample_transactions: incomeByCurrency.real.stars
          .slice(0, 10)
          .map(p => ({
            id: p.id,
            date: p.payment_date,
            stars: p.stars,
            amount: p.amount,
            currency: p.currency,
            description: p.description,
            service_type: p.service_type,
            category: getTransactionCategory(p),
          })),
      },

      bonus_income: {
        rub_count: incomeByCurrency.bonus.rub.length,
        rub_sum: incomeByCurrency.bonus.rub.reduce(
          (sum, p) => sum + (p.amount || 0),
          0
        ),
        stars_count: incomeByCurrency.bonus.stars.length,
        stars_sum: incomeByCurrency.bonus.stars.reduce(
          (sum, p) => sum + (p.stars || 0),
          0
        ),
        sample_transactions: incomeByCurrency.bonus.stars
          .slice(0, 10)
          .map(p => ({
            id: p.id,
            date: p.payment_date,
            stars: p.stars,
            amount: p.amount,
            currency: p.currency,
            description: p.description,
            service_type: p.service_type,
            category: getTransactionCategory(p),
          })),
      },

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      unique_currencies: Array.from(new Set(payments.map(p => p.currency))),
      unique_types: Array.from(new Set(payments.map(p => p.type))),
      unique_statuses: Array.from(new Set(payments.map(p => p.status))),

      // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      problematic_records: {
        null_currency: payments.filter(p => !p.currency).length,
        null_type: payments.filter(p => !p.type).length,
        null_stars_and_amount: payments.filter(p => !p.stars && !p.amount)
          .length,
      },
    }

    return analysis
  } catch (error) {
    console.error('Error in debugPaymentData:', error)
    throw error
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
export async function debugStatsCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    if (!isAdmin) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
      return
    }

    const args =
      ctx.message && 'text' in ctx.message
        ? ctx.message.text.split(' ').slice(1)
        : []

    const botName = args[0]
    if (!botName) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±–æ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /debug_stats bot_name')
      return
    }

    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π...')

    const analysis = await debugPaymentData(botName)

    let message = `üîç <b>–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö @${botName}</b>\n\n`

    message += `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n`
    message += `   –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${analysis.total_payments}\n`
    message += `   –í—Å–µ–≥–æ MONEY_INCOME: ${analysis.total_income_transactions}\n\n`

    message += `üí∞ <b>–í—Å–µ –¥–æ—Ö–æ–¥—ã</b>\n`
    message += `   RUB: ${analysis.all_income.rub_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.all_income.rub_sum} ‚ÇΩ\n`
    message += `   STARS: ${analysis.all_income.stars_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.all_income.stars_sum} ‚≠ê\n\n`

    message += `‚úÖ <b>–†–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã</b>\n`
    message += `   RUB: ${analysis.real_income.rub_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.real_income.rub_sum} ‚ÇΩ\n`
    message += `   STARS: ${analysis.real_income.stars_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.real_income.stars_sum} ‚≠ê\n\n`

    message += `üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã</b>\n`
    message += `   RUB: ${analysis.bonus_income.rub_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.bonus_income.rub_sum} ‚ÇΩ\n`
    message += `   STARS: ${analysis.bonus_income.stars_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${analysis.bonus_income.stars_sum} ‚≠ê\n\n`

    message += `üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b>\n`
    message += `   –í–∞–ª—é—Ç—ã: ${analysis.unique_currencies.join(', ')}\n`
    message += `   –¢–∏–ø—ã: ${analysis.unique_types.join(', ')}\n`
    message += `   –°—Ç–∞—Ç—É—Å—ã: ${analysis.unique_statuses.join(', ')}\n\n`

    message += `‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã</b>\n`
    message += `   –ë–µ–∑ –≤–∞–ª—é—Ç—ã: ${analysis.problematic_records.null_currency}\n`
    message += `   –ë–µ–∑ —Ç–∏–ø–∞: ${analysis.problematic_records.null_type}\n`
    message += `   –ë–µ–∑ —Å—É–º–º—ã: ${analysis.problematic_records.null_stars_and_amount}\n`

    await ctx.reply(message, { parse_mode: 'HTML' })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (analysis.real_income.sample_transactions.length > 0) {
      let sampleMessage = `üìã <b>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö STARS –¥–æ—Ö–æ–¥–æ–≤:</b>\n\n`
      analysis.real_income.sample_transactions.forEach((t: any, i: number) => {
        sampleMessage += `${i + 1}. ID: ${t.id}\n`
        sampleMessage += `   üí∞ ${t.stars} ‚≠ê (${t.currency})\n`
        sampleMessage += `   üìÖ ${t.date.split('T')[0]}\n`
        sampleMessage += `   üìù "${t.description?.substring(0, 50) || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}...\n`
        sampleMessage += `   üè∑Ô∏è ${t.service_type || '–ë–µ–∑ —Ç–∏–ø–∞'}\n\n`
      })
      await ctx.reply(sampleMessage, { parse_mode: 'HTML' })
    }
  } catch (error) {
    console.error('Error in debugStatsCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö')
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function userSpendingCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    if (!isAdmin) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
      return
    }

    const args =
      ctx.message && 'text' in ctx.message
        ? ctx.message.text.split(' ').slice(1)
        : []

    const targetUserId = args[0]
    if (!targetUserId) {
      await ctx.reply(
        '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /user_spending 352374518'
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
    if (!targetUserId.trim()) {
      await ctx.reply('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      return
    }

    await ctx.reply(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}...`)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: userInfo, error: userError } = await supabase
      .from('users')
      .select('username, first_name, last_name, bot_name')
      .eq('telegram_id', targetUserId)
      .single()

    if (userError || !userInfo) {
      await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`)
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: payments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', targetUserId)
      .eq('status', 'COMPLETED')
      .order('payment_date', { ascending: false })

    if (paymentsError) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${paymentsError.message}`)
      return
    }

    if (!payments || payments.length === 0) {
      await ctx.reply(
        `üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
      )
      return
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const realIncomes = payments.filter(
      p => p.type === 'MONEY_INCOME' && p.category === 'REAL'
    )
    const bonusIncomes = payments.filter(
      p => p.type === 'MONEY_INCOME' && p.category === 'BONUS'
    )
    const outcomes = payments.filter(p => p.type === 'MONEY_OUTCOME')
    const refunds = payments.filter(p => p.type === 'REFUND')

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    const totalRealIncomeStars = realIncomes.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const totalRealIncomeRub = realIncomes.reduce(
      (sum, p) => sum + (p.amount || 0),
      0
    )
    const totalBonusStars = bonusIncomes.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const totalOutcomeStars = outcomes.reduce(
      (sum, p) => sum + (p.stars || 0),
      0
    )
    const totalRefundStars = refunds.reduce((sum, p) => sum + (p.stars || 0), 0)

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    const serviceStats = new Map<string, { count: number; stars: number }>()
    outcomes.forEach(payment => {
      const service = payment.service_type || 'unknown'
      const current = serviceStats.get(service) || { count: 0, stars: 0 }
      current.count += 1
      current.stars += payment.stars || 0
      serviceStats.set(service, current)
    })

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
    const monthlyStats = new Map<
      string,
      { income: number; outcome: number; transactions: number }
    >()
    const sixMonthsAgo = new Date()
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)

    payments
      .filter(p => new Date(p.payment_date) >= sixMonthsAgo)
      .forEach(payment => {
        const date = new Date(payment.payment_date)
        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`

        const current = monthlyStats.get(monthKey) || {
          income: 0,
          outcome: 0,
          transactions: 0,
        }
        current.transactions += 1

        if (payment.type === 'MONEY_INCOME' && payment.category === 'REAL') {
          current.income += payment.stars || 0
        } else if (payment.type === 'MONEY_OUTCOME') {
          current.outcome += payment.stars || 0
        }

        monthlyStats.set(monthKey, current)
      })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üë§ <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}</b>\n\n`

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    message += `üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n`
    message += `   üë§ –ò–º—è: ${userInfo.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${userInfo.last_name || ''}\n`
    message += `   üì± Username: ${userInfo.username ? '@' + userInfo.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`
    message += `   ü§ñ –ë–æ—Ç: @${userInfo.bot_name}\n\n`

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`
    message += `   üìà –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${payments.length}\n`
    message += `   üí∞ –†–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã: ${realIncomes.length} (${totalRealIncomeStars}‚≠ê, ${totalRealIncomeRub.toFixed(2)}‚ÇΩ)\n`
    message += `   üéÅ –ë–æ–Ω—É—Å—ã: ${bonusIncomes.length} (${totalBonusStars}‚≠ê)\n`
    message += `   üìâ –†–∞—Å—Ö–æ–¥—ã: ${outcomes.length} (${totalOutcomeStars}‚≠ê)\n`
    message += `   üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã: ${refunds.length} (${totalRefundStars}‚≠ê)\n`
    message += `   üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalRealIncomeStars + totalBonusStars - totalOutcomeStars + totalRefundStars}‚≠ê\n\n`

    // –¢–æ–ø —Å–µ—Ä–≤–∏—Å–æ–≤
    message += `üõ†Ô∏è <b>–¢–æ–ø —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ —Ç—Ä–∞—Ç–∞–º:</b>\n`
    const sortedServices = Array.from(serviceStats.entries())
      .sort(([, a], [, b]) => b.stars - a.stars)
      .slice(0, 5)

    sortedServices.forEach(([service, stats], index) => {
      const percentage =
        totalOutcomeStars > 0
          ? ((stats.stars / totalOutcomeStars) * 100).toFixed(1)
          : '0.0'
      message += `   ${index + 1}. ${service}: ${stats.stars}‚≠ê (${stats.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${percentage}%)\n`
    })

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
    if (monthlyStats.size > 0) {
      message += `\nüìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã:</b>\n`
      const sortedMonths = Array.from(monthlyStats.entries())
        .sort(([a], [b]) => b.localeCompare(a))
        .slice(0, 6)

      sortedMonths.forEach(([month, stats]) => {
        const [year, monthNum] = month.split('-')
        const monthName = new Date(
          parseInt(year),
          parseInt(monthNum) - 1
        ).toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })
        message += `   ${monthName}: ${stats.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (${stats.income}‚≠ê –¥–æ—Ö–æ–¥—ã, ${stats.outcome}‚≠ê —Ä–∞—Å—Ö–æ–¥—ã)\n`
      })
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    message += `\nüìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n`
    payments.slice(0, 5).forEach((payment, index) => {
      const date = new Date(payment.payment_date).toLocaleDateString('ru-RU')
      const typeEmoji =
        payment.type === 'MONEY_INCOME'
          ? 'üìà'
          : payment.type === 'MONEY_OUTCOME'
            ? 'üìâ'
            : 'üîÑ'
      const categoryInfo = payment.category ? ` (${payment.category})` : ''
      message += `   ${index + 1}. ${typeEmoji} ${date}: ${payment.stars || 0}‚≠ê - ${payment.service_type || 'unknown'}${categoryInfo}\n`
    })

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    const maxLength = 4000
    if (message.length > maxLength) {
      const parts = splitMessage(message, maxLength)
      for (const part of parts) {
        await ctx.reply(part, { parse_mode: 'HTML' })
      }
    } else {
      await ctx.reply(message, { parse_mode: 'HTML' })
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ userSpendingCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏/username (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function findUserCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    if (!isAdmin) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
      return
    }

    const args =
      ctx.message && 'text' in ctx.message
        ? ctx.message.text.split(' ').slice(1)
        : []

    const searchQuery = args.join(' ')
    if (!searchQuery) {
      await ctx.reply(
        '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /find_user –ò–≤–∞–Ω –∏–ª–∏ /find_user @username'
      )
      return
    }

    await ctx.reply(`üîç –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"...`)

    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanQuery = searchQuery.replace('@', '')

    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
    const { data: users, error } = await supabase
      .from('users')
      .select('telegram_id, username, first_name, last_name, bot_name')
      .or(
        `username.ilike.%${cleanQuery}%,first_name.ilike.%${cleanQuery}%,last_name.ilike.%${cleanQuery}%,telegram_id.eq.${cleanQuery}`
      )
      .order('telegram_id', { ascending: false })
      .limit(20)

    if (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`)
      return
    }

    if (!users || users.length === 0) {
      await ctx.reply(`üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userIds = users.map(u => u.telegram_id)
    const { data: userStats, error: statsError } = await supabase
      .from('payments_v2')
      .select('telegram_id, type, stars, amount, category')
      .in('telegram_id', userIds)
      .eq('status', 'COMPLETED')

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const statsMap = new Map<
      string,
      { transactions: number; realIncome: number; totalSpent: number }
    >()

    if (!statsError && userStats) {
      userStats.forEach(payment => {
        const userId = payment.telegram_id
        const current = statsMap.get(userId) || {
          transactions: 0,
          realIncome: 0,
          totalSpent: 0,
        }

        current.transactions += 1

        if (payment.type === 'MONEY_INCOME' && payment.category === 'REAL') {
          current.realIncome += payment.stars || payment.amount || 0
        } else if (payment.type === 'MONEY_OUTCOME') {
          current.totalSpent += payment.stars || 0
        }

        statsMap.set(userId, current)
      })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${searchQuery}"</b>\n\n`
    message += `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n`

    users.forEach((user, index) => {
      const stats = statsMap.get(user.telegram_id) || {
        transactions: 0,
        realIncome: 0,
        totalSpent: 0,
      }

      message += `${index + 1}. <b>ID: ${user.telegram_id}</b>\n`
      message += `   üë§ ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${user.last_name || ''}\n`
      message += `   üì± ${user.username ? '@' + user.username : 'Username –Ω–µ —É–∫–∞–∑–∞–Ω'}\n`
      message += `   ü§ñ –ë–æ—Ç: @${user.bot_name}\n`
      message += `   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactions}, –î–æ—Ö–æ–¥—ã: ${stats.realIncome}‚≠ê, –¢—Ä–∞—Ç—ã: ${stats.totalSpent}‚≠ê\n`
      message += `   üí° –ö–æ–º–∞–Ω–¥–∞: <code>/user_spending ${user.telegram_id}</code>\n\n`
    })

    if (users.length === 20) {
      message += `‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.`
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    const maxLength = 4000
    if (message.length > maxLength) {
      const parts = splitMessage(message, maxLength)
      for (const part of parts) {
        await ctx.reply(part, { parse_mode: 'HTML' })
      }
    } else {
      await ctx.reply(message, { parse_mode: 'HTML' })
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ findUserCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
  }
}

/**
 * –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º
 */
export async function adminHelpCommand(ctx: MyContext): Promise<void> {
  try {
    const userId = ctx.from?.id?.toString()
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = ADMIN_IDS_ARRAY.includes(parseInt(userId))
    if (!isAdmin) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
      return
    }

    const helpMessage = `üëë <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º</b>

üîç <b>–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
<code>/find_user –ò–≤–∞–Ω</code> - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
<code>/find_user @username</code> - –ø–æ–∏—Å–∫ –ø–æ username  
<code>/find_user 352374518</code> - –ø–æ–∏—Å–∫ –ø–æ ID
<code>/user_spending 352374518</code> - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç

üìä <b>–ê–Ω–∞–ª–∏–∑ –±–æ—Ç–æ–≤:</b>
<code>/stats bot_name</code> - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
<code>/stats bot_name --detailed</code> - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
<code>/stats bot_name month</code> - –∑–∞ –º–µ—Å—è—Ü
<code>/debug_stats bot_name</code> - –æ—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>
‚Ä¢ <code>today/—Å–µ–≥–æ–¥–Ω—è</code> - –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ <code>week/–Ω–µ–¥–µ–ª—è</code> - –∑–∞ –Ω–µ–¥–µ–ª—é  
‚Ä¢ <code>month/–º–µ—Å—è—Ü</code> - –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ <code>all</code> - –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

üõ†Ô∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ <code>--detailed</code> - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
‚Ä¢ <code>--export</code> - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV

üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>

<b>–ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
1. <code>/find_user –ò–≤–∞–Ω</code>
2. <code>/user_spending 352374518</code>

<b>–ê–Ω–∞–ª–∏–∑ –±–æ—Ç–∞:</b>
1. <code>/stats MetaMuse_Manifest_bot --detailed</code>
2. <code>/debug_stats MetaMuse_Manifest_bot</code>

üëë –£ –≤–∞—Å SuperAdmin –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–æ—Ç–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º.`

    await ctx.reply(helpMessage, { parse_mode: 'HTML' })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ adminHelpCommand:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏')
  }
}
