import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import {
  getUserBalanceStats,
  BotStatistics,
  UserBalanceStatsResult,
} from '@/core/supabase/getUserBalanceStats'
import {
  UserBalanceStats,
  RubPurchaseDetail,
  XtrPurchaseDetail,
  ServiceUsageDetail,
} from '@/core/supabase/getUserBalance'
import { ADMIN_IDS_ARRAY } from '@/config'
import { getOwnedBots } from '@/core/supabase/getOwnedBots'

// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é formatDate –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é formatDateSafe
const formatDateSafe = (dateString: any): string => {
  if (!dateString) return 'N/A' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'N/A' –µ—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  try {
    const date = new Date(dateString)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–π
    if (isNaN(date.getTime())) {
      logger.warn(`[formatDateSafe] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: ${dateString}`)
      return 'Invalid Date' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'Invalid Date' –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç
    }
    const day = String(date.getDate()).padStart(2, '0')
    const month = String(date.getMonth() + 1).padStart(2, '0') // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = date.getFullYear()
    return `${day}.${month}.${year}`
  } catch (e) {
    logger.error(`[formatDateSafe] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: ${dateString}`, {
      error: e,
    })
    return 'Error Formatting' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
  }
}

/**
 * Handles the /stats command, providing statistics to bot owners or admins.
 * @param bot The Telegraf bot instance.
 */
export const setupStatsCommand = (bot: Telegraf<MyContext>): void => {
  bot.command('stats', async ctx => {
    const telegramId = ctx.from?.id
    const username = ctx.from?.username || 'Anonymous'
    const chatId = ctx.chat.id
    const messageText = ctx.message?.text || ''
    const commandParts = messageText.split(' ')
    const targetBotNameArg =
      commandParts.length > 1 ? commandParts[1].replace('@', '') : null

    logger.info('üìä /stats command called', {
      telegram_id: telegramId,
      username,
      chat_id: chatId,
      target_bot_name_arg: targetBotNameArg,
    })

    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.')
      return
    }

    const isUserAdmin = ADMIN_IDS_ARRAY.includes(telegramId)

    try {
      if (targetBotNameArg) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π: –£–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ
        const botNameToFetchStats = targetBotNameArg
        const userIdForStats = String(telegramId) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if (isUserAdmin) {
          logger.info(
            `[statsCommand] Admin user ${telegramId} requested stats for bot: ${targetBotNameArg}`
          )
          // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á—å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å
          // –ü–æ–∫–∞ —á—Ç–æ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –°–í–û–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –±–æ—Ç–µ
          // –ï—Å–ª–∏ –ì—É—Ä—É —Ä–µ—à–∏—Ç, —á—Ç–æ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞, –∑–¥–µ—Å—å –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        } else {
          // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ - –ø–æ–∫–∞–∂–µ–º –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞,
          // –µ—Å–ª–∏ getUserBalanceStats —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç (—Ç.–µ. –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ)
          logger.info(
            `[statsCommand] User ${telegramId} requested stats for specific bot: ${targetBotNameArg}`
          )
        }

        const statsResult = await getUserBalanceStats(
          userIdForStats,
          botNameToFetchStats
        )
        if (!statsResult || statsResult.stats.length === 0) {
          await ctx.reply(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤–∞—Å –ø–æ –±–æ—Ç—É @${botNameToFetchStats}.`
          )
          return
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        const botStats = statsResult.stats[0]
        const message = formatBotStatsMessage(botStats, true)
        await ctx.replyWithHTML(message)
      } else if (isUserAdmin) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π: –ê–¥–º–∏–Ω –≤—ã–∑–≤–∞–ª /stats –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ.
        // –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –±–æ—Ç–∞.
        await ctx.reply(
          '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, /stats @–∏–º—è_–±–æ—Ç–∞'
        )
      } else {
        // –°—Ü–µ–Ω–∞—Ä–∏–π: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª /stats –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –µ–≥–æ –±–æ—Ç–∞–º
        const ownedBots = await getOwnedBots(String(telegramId))

        if (ownedBots === null) {
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤.')
          return
        }

        if (ownedBots.length === 0) {
          await ctx.reply(
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'
          )
          return
        }

        let fullMessage = 'üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º:</b>\n'

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const statsResult = await getUserBalanceStats(String(telegramId))

        if (!statsResult || statsResult.stats.length === 0) {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –±–æ—Ç–∞–º.')
          return
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
        for (const botStat of statsResult.stats) {
          fullMessage += `\n\n--- <b>@${botStat.bot_name}</b> ---\n`
          fullMessage += formatBotStatsMessage(botStat, false) // –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤—ã—à–µ
        }

        await ctx.replyWithHTML(fullMessage)
      }
    } catch (error) {
      logger.error('[statsCommand] Error fetching or processing stats:', {
        error,
        telegram_id: telegramId,
      })
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )
    }
  })
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É
function formatBotStatsMessage(
  stats: BotStatistics,
  includeMainHeader = true
): string {
  let message = ''
  if (includeMainHeader) {
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ @${stats.bot_name}</b>\n\n`
  }

  // –î–æ—Ö–æ–¥—ã
  message += `üí∞ <b>–î–æ—Ö–æ–¥—ã</b>\n`
  message += `   –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–∞: ${stats.total_income} ‚≠êÔ∏è\n`
  message += `   - NEUROVIDEO: ${stats.neurovideo_income} ‚≠êÔ∏è\n`
  message += `   - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.stars_topup_income} ‚≠êÔ∏è\n\n`

  // –†–∞—Å—Ö–æ–¥—ã
  message += `üí∏ <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n`
  message += `   –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.total_outcome} ‚≠êÔ∏è\n\n`

  // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–æ–≤–æ–µ)
  message += `üí≤ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</b>\n`
  message += `   –í—Å–µ–≥–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.total_cost} ‚≠êÔ∏è\n\n`

  // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–Ω–æ–≤–æ–µ)
  message += `üìà <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å</b>\n`
  message += `   –ü—Ä–∏–±—ã–ª—å: ${stats.net_profit} ‚≠êÔ∏è\n`
  message += `   (–î–æ—Ö–æ–¥ - –†–∞—Å—Ö–æ–¥—ã - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)\n\n`

  return message
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è formatStatsMessage - –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
function formatStatsMessage(
  stats: UserBalanceStats,
  botName: string,
  includeMainHeader = true
): string {
  let message = ''
  if (includeMainHeader) {
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ @${botName}</b>\n\n`
  }

  message += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${stats.user_telegram_id}\n`
  if (stats.user_first_name || stats.user_last_name) {
    message += `   –ò–º—è: ${stats.user_first_name || ''} ${stats.user_last_name || ''}`
    message += `\n`
  }
  if (stats.user_username) {
    message += `   Username: @${stats.user_username}`
    message += `\n`
  }
  message += `\n`

  message += `üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n`
  message += `   RUB: ${stats.balance_rub?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   XTR: ${stats.balance_xtr ?? 0} ‚≠êÔ∏è\n`
  message += `\n`

  message += `üìà <b>–í—Å–µ–≥–æ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π RUB</b>\n`
  message += `   –°—É–º–º–∞: ${stats.total_rub_deposited?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.total_rub_purchases_count ?? 0}\n`
  if (stats.rub_purchase_details && stats.rub_purchase_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π RUB:</i>\n`
    stats.rub_purchase_details.forEach((d: RubPurchaseDetail) => {
      message += `     - ${formatDateSafe(d.payment_date)}: ${d.amount_rub.toFixed(2)} ‚ÇΩ (${d.payment_system})`
      if (d.transaction_id) message += ` ID: ${d.transaction_id}`
      message += `\n`
    })
  }
  message += `\n`

  message += `üåü <b>–í—Å–µ–≥–æ –ü–æ–∫—É–ø–æ–∫ XTR (–∑–∞ RUB)</b>\n`
  message += `   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ RUB: ${stats.total_rub_spent_for_xtr?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   –ü–æ–ª—É—á–µ–Ω–æ XTR: ${stats.total_xtr_purchased ?? 0} ‚≠êÔ∏è\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: ${stats.total_xtr_purchases_count ?? 0}\n`
  if (stats.xtr_purchase_details && stats.xtr_purchase_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫ XTR:</i>\n`
    stats.xtr_purchase_details.forEach((d: XtrPurchaseDetail) => {
      message += `     - ${formatDateSafe(d.purchase_date)}: ${d.xtr_amount} ‚≠êÔ∏è –∑–∞ ${d.rub_amount.toFixed(2)} ‚ÇΩ (${d.payment_system})`
      if (d.transaction_id) message += ` ID: ${d.transaction_id}`
      message += `\n`
    })
  }
  message += `\n`

  message += `üîß <b>–í—Å–µ–≥–æ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ XTR –Ω–∞ –°–µ—Ä–≤–∏—Å—ã</b>\n`
  message += `   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ XTR: ${stats.total_xtr_spent_on_services ?? 0} ‚≠êÔ∏è\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${stats.total_service_usage_count ?? 0}\n`
  if (stats.service_usage_details && stats.service_usage_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:</i>\n`
    stats.service_usage_details.forEach((s: ServiceUsageDetail) => {
      message += `     - ${formatDateSafe(s.usage_date)}: ${s.xtr_cost} ‚≠êÔ∏è –Ω–∞ '${s.service_name}' (${s.model_name || 'N/A'})`
      if (s.transaction_id) message += ` ID: ${s.transaction_id}`
      if (s.details) message += ` (${s.details})`
      message += `\n`
    })
  }
  message += `\n`

  if (stats.first_payment_date) {
    message += `üóìÔ∏è <b>–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂:</b> ${formatDateSafe(stats.first_payment_date)}\n`
  }
  if (stats.last_payment_date) {
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂:</b> ${formatDateSafe(stats.last_payment_date)}\n`
  }
  message += `\n`
  message += `üí° <i>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ XTR –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∫–∞–∑–∞–Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–æ–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>`

  return message
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
function getServiceEmoji(serviceName: string): string {
  if (!serviceName) return '‚öôÔ∏è'
  const lowerServiceName = serviceName.toLowerCase()
  if (lowerServiceName.includes('photo')) return 'üì∏'
  if (
    lowerServiceName.includes('speech') ||
    lowerServiceName.includes('text-to-speech')
  )
    return 'üîä'
  if (lowerServiceName.includes('video')) return 'üé¨'
  return '‚öôÔ∏è' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}
