import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { getUserBalanceStats } from '@/core/supabase/getUserBalanceStats'
import {
  UserBalanceStats,
  RubPurchaseDetail,
  XtrPurchaseDetail,
  ServiceUsageDetail,
} from '@/core/supabase/getUserBalance'
import { ADMIN_IDS_ARRAY } from '@/config'

// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é formatDate –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é formatDateSafe
const formatDateSafe = (dateString: any): string => {
  if (!dateString) return 'N/A' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'N/A' –µ—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  try {
    const date = new Date(dateString)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–π
    if (isNaN(date.getTime())) {
      logger.warn(`[formatDateSafe] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: ${dateString}`)
      return 'Invalid Date' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'Invalid Date' –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç
    }
    const day = String(date.getDate()).padStart(2, '0')
    const month = String(date.getMonth() + 1).padStart(2, '0') // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = date.getFullYear()
    return `${day}.${month}.${year}`
  } catch (e) {
    logger.error(`[formatDateSafe] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: ${dateString}`, {
      error: e,
    })
    return 'Error Formatting' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
  }
}

/**
 * Handles the /stats command, providing statistics to bot owners.
 * @param bot The Telegraf bot instance.
 */
export const setupStatsCommand = (bot: Telegraf<MyContext>): void => {
  bot.command('stats', async ctx => {
    const telegramId = ctx.from?.id
    const username = ctx.from?.username || 'Anonymous'
    const chatId = ctx.chat.id
    const messageText = ctx.message?.text || ''
    const commandParts = messageText.split(' ')
    const targetBotNameArg =
      commandParts.length > 1 ? commandParts[1].replace('@', '') : null

    logger.info('üìä /stats command called', {
      telegram_id: telegramId,
      username,
      chat_id: chatId,
      target_bot_name_arg: targetBotNameArg,
    })

    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.')
      return
    }

    let botNameToFetchStats = ctx.botInfo.username // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –±–æ—Ç

    logger.info('[statsCommand] Initial params for fetching stats', {
      telegram_id_to_use: String(telegramId),
      bot_name_to_use: botNameToFetchStats,
      specified_target_bot: targetBotNameArg,
    })

    if (targetBotNameArg) {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!ADMIN_IDS_ARRAY.includes(telegramId)) {
        await ctx.reply(
          '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–æ—Ç—É. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞.'
        )
        // botNameToFetchStats –æ—Å—Ç–∞–µ—Ç—Å—è –∏–º–µ–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
      } else {
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–æ—Ç—É
        botNameToFetchStats = targetBotNameArg
        logger.info(
          `[statsCommand] Admin user ${telegramId} requested stats for bot: ${targetBotNameArg}`
        )
      }
    }

    if (!botNameToFetchStats) {
      await ctx.reply(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'
      )
      logger.warn(
        '[statsCommand] Could not determine bot name to fetch stats for (current or arg)',
        { telegram_id: telegramId }
      )
      return
    }

    try {
      const stats = await getUserBalanceStats(
        String(telegramId),
        botNameToFetchStats // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
      )

      logger.info('[statsCommand] Stats object received before formatting:', {
        stats_object: stats,
      })

      if (!stats) {
        await ctx.reply(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –±–æ—Ç–∞ @${botNameToFetchStats}.`
        )
        return
      }

      const message = formatStatsMessage(stats, botNameToFetchStats)
      await ctx.replyWithHTML(message)
    } catch (error) {
      logger.error('[statsCommand] Error fetching or processing stats:', {
        error,
        telegram_id: telegramId,
      })
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )
    }
  })
}

// Helper function to format the statistics message
function formatStatsMessage(stats: UserBalanceStats, botName: string): string {
  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ @${botName}</b>\n\n`

  message += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${stats.user_telegram_id}\n`
  if (stats.user_first_name || stats.user_last_name) {
    message += `   –ò–º—è: ${stats.user_first_name || ''} ${stats.user_last_name || ''}`
    message += `\n`
  }
  if (stats.user_username) {
    message += `   Username: @${stats.user_username}`
    message += `\n`
  }
  message += `\n`

  message += `üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n`
  message += `   RUB: ${stats.balance_rub?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   XTR: ${stats.balance_xtr ?? 0} ‚≠êÔ∏è\n`
  message += `\n`

  message += `üìà <b>–í—Å–µ–≥–æ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π RUB</b>\n`
  message += `   –°—É–º–º–∞: ${stats.total_rub_deposited?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stats.total_rub_purchases_count ?? 0}\n`
  if (stats.rub_purchase_details && stats.rub_purchase_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π RUB:</i>\n`
    stats.rub_purchase_details.forEach((d: RubPurchaseDetail) => {
      message += `     - ${formatDateSafe(d.payment_date)}: ${d.amount_rub.toFixed(2)} ‚ÇΩ (${d.payment_system})`
      if (d.transaction_id) message += ` ID: ${d.transaction_id}`
      message += `\n`
    })
  }
  message += `\n`

  message += `üåü <b>–í—Å–µ–≥–æ –ü–æ–∫—É–ø–æ–∫ XTR (–∑–∞ RUB)</b>\n`
  message += `   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ RUB: ${stats.total_rub_spent_for_xtr?.toFixed(2) ?? '0.00'} ‚ÇΩ\n`
  message += `   –ü–æ–ª—É—á–µ–Ω–æ XTR: ${stats.total_xtr_purchased ?? 0} ‚≠êÔ∏è\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: ${stats.total_xtr_purchases_count ?? 0}\n`
  if (stats.xtr_purchase_details && stats.xtr_purchase_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫ XTR:</i>\n`
    stats.xtr_purchase_details.forEach((d: XtrPurchaseDetail) => {
      message += `     - ${formatDateSafe(d.purchase_date)}: ${d.xtr_amount} ‚≠êÔ∏è –∑–∞ ${d.rub_amount.toFixed(2)} ‚ÇΩ (${d.payment_system})`
      if (d.transaction_id) message += ` ID: ${d.transaction_id}`
      message += `\n`
    })
  }
  message += `\n`

  message += `üîß <b>–í—Å–µ–≥–æ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ XTR –Ω–∞ –°–µ—Ä–≤–∏—Å—ã</b>\n`
  message += `   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ XTR: ${stats.total_xtr_spent_on_services ?? 0} ‚≠êÔ∏è\n`
  message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${stats.total_service_usage_count ?? 0}\n`
  if (stats.service_usage_details && stats.service_usage_details.length > 0) {
    message += `   <i>–î–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:</i>\n`
    stats.service_usage_details.forEach((s: ServiceUsageDetail) => {
      message += `     - ${formatDateSafe(s.usage_date)}: ${s.xtr_cost} ‚≠êÔ∏è –Ω–∞ '${s.service_name}' (${s.model_name || 'N/A'})`
      if (s.transaction_id) message += ` ID: ${s.transaction_id}`
      if (s.details) message += ` (${s.details})`
      message += `\n`
    })
  }
  message += `\n`

  if (stats.first_payment_date) {
    message += `üóìÔ∏è <b>–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂:</b> ${formatDateSafe(stats.first_payment_date)}\n`
  }
  if (stats.last_payment_date) {
    message += `üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂:</b> ${formatDateSafe(stats.last_payment_date)}\n`
  }
  message += `\n`
  message += `üí° <i>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ XTR –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∫–∞–∑–∞–Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–æ–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</i>`

  return message
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
function getServiceEmoji(serviceName: string): string {
  if (!serviceName) return '‚öôÔ∏è'
  const lowerServiceName = serviceName.toLowerCase()
  if (lowerServiceName.includes('photo')) return 'üì∏'
  if (
    lowerServiceName.includes('speech') ||
    lowerServiceName.includes('text-to-speech')
  )
    return 'üîä'
  if (lowerServiceName.includes('video')) return 'üé¨'
  return '‚öôÔ∏è' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}
