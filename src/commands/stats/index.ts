import { MyContext } from '../../interfaces'
import { isOwner } from '@/core/supabase'
import { isRussian } from '@/helpers'
import { isDev } from '@/config'
import { logger } from '@/utils/logger'
import { DEBUG_BOTS } from '@/config/debug'
import { supabase } from '@/core/supabase'
import { PostgrestError } from '@supabase/supabase-js'

const getStatsCommand = async (ctx: MyContext): Promise<void> => {
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–µ–±–∞–≥–∞
  const { userId, botName } = isDev
    ? DEBUG_BOTS[1]
    : {
        userId: ctx.from?.id,
        botName: ctx.botInfo.username,
      }

  logger.info({
    message: 'üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stats',
    description: 'Starting /stats command processing',
    user_id: userId,
    bot_name: botName,
    is_dev: isDev,
    bot_info: ctx.botInfo,
  })

  if (!userId) {
    logger.error({
      message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'User ID is missing',
      context: ctx,
    })
    await ctx.reply(
      isRussian(ctx)
        ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID'
        : '‚ùå Error: could not determine your ID'
    )
    return
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
  logger.info({
    message: 'üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
    description: 'Checking owner permissions',
    user_id: userId,
    bot_name: botName,
  })

  const isUserOwner = await isOwner(userId, botName)

  logger.info({
    message: isUserOwner ? '‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' : 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
    description: isUserOwner ? 'Access granted' : 'Access denied',
    user_id: userId,
    bot_name: botName,
    is_owner: isUserOwner,
  })

  if (!isUserOwner) {
    await ctx.reply(
      isRussian(ctx)
        ? 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
        : 'üö´ You do not have permission to view this information.'
    )
    return
  }

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    logger.info({
      message: 'üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      description: 'Requesting bot statistics',
      bot_name: botName,
    })

    const { data: stats, error } = await supabase.rpc('get_bot_statistics', {
      p_bot_name: botName,
    })

    if (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ SQL –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        description: 'SQL error while getting statistics',
        error: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code,
        user_id: userId,
        bot_name: botName,
      })
      throw error
    }

    if (!stats) {
      logger.error({
        message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        description: 'No statistics data returned',
        user_id: userId,
        bot_name: botName,
      })
      throw new Error('No statistics data returned')
    }

    const stat = stats[0]

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const paying_users_percent =
      stat.total_users > 0
        ? Math.round((stat.paying_users / stat.total_users) * 100)
        : 0

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const revenue_per_paying_user =
      stat.paying_users > 0
        ? Math.round(stat.total_rub_income / stat.paying_users)
        : 0

    logger.info({
      message: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
      description: 'Bot statistics received',
      bot_name: botName,
      statistics: stat,
    })

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = isRussian(ctx)
      ? `üìä *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ ${botName}*\n\n` +
        `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
        `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stat.total_users}\n` +
        `üí≥ –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stat.paying_users} (${paying_users_percent}%)\n` +
        `üí∞ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${revenue_per_paying_user} ‚ÇΩ\n\n` +
        `‚≠ê *–î–≤–∏–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥:*\n` +
        `üì• –ü–æ–ª—É—á–µ–Ω–æ:\n` +
        `‚Ä¢ –ö—É–ø–ª–µ–Ω–æ –∑–∞ —Ä—É–±–ª–∏: ${stat.total_rub_income} ‚ÇΩ ‚û°Ô∏è ${stat.stars_from_rub} ‚≠ê\n` +
        `‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –∑–≤–µ–∑–¥–∞–º–∏: ${stat.stars_income} ‚≠ê\n` +
        `‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã: ${stat.bonus_stars} ‚≠ê\n` +
        (stat.migration_stars > 0
          ? `‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞: ‚û°Ô∏è ${stat.migration_stars} ‚≠ê\n`
          : '') +
        `\nüí´ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${
          stat.stars_from_rub +
          stat.stars_income +
          stat.bonus_stars +
          stat.migration_stars
        } ‚≠ê\n` +
        `\nüì§ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stat.stars_spent} ‚≠ê\n` +
        `\nüìà –ë–∞–ª–∞–Ω—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: ${
          stat.stars_from_rub +
          stat.stars_income +
          stat.bonus_stars +
          stat.migration_stars -
          stat.stars_spent
        } ‚≠ê`
      : `üìä *Financial Statistics for Bot ${botName}*\n\n` +
        `üë• *Users:*\n` +
        `üë§ Total users: ${stat.total_users}\n` +
        `üí≥ Paying users: ${stat.paying_users} (${paying_users_percent}%)\n` +
        `üí∞ Average revenue per paying user: ${revenue_per_paying_user} ‚ÇΩ\n\n` +
        `‚≠ê *Stars Movement:*\n` +
        `üì• Received:\n` +
        `‚Ä¢ Purchased with rubles: ${stat.total_rub_income} ‚ÇΩ ‚û°Ô∏è ${stat.stars_from_rub} ‚≠ê\n` +
        `‚Ä¢ Stars deposits: ${stat.stars_income} ‚≠ê\n` +
        `‚Ä¢ Bonus stars: ${stat.bonus_stars} ‚≠ê\n` +
        (stat.migration_stars > 0
          ? `‚Ä¢ Balance migration: ${stat.migration_stars} ‚≠ê\n`
          : '') +
        `\nüí´ Total received: ${
          stat.stars_from_rub +
          stat.stars_income +
          stat.bonus_stars +
          stat.migration_stars
        } ‚≠ê\n` +
        `\nüì§ Spent: ${stat.stars_spent} ‚≠ê\n` +
        `\nüìà Current balance: ${
          stat.stars_from_rub +
          stat.stars_income +
          stat.bonus_stars +
          stat.migration_stars -
          stat.stars_spent
        } ‚≠ê`

    logger.info({
      message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      description: 'Sending statistics message',
      user_id: userId,
      bot_name: botName,
    })

    await ctx.reply(message, {
      parse_mode: 'Markdown',
    })

    logger.info({
      message: '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      description: 'Statistics sent successfully',
      user_id: userId,
      bot_name: botName,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      description: 'Error getting statistics',
      error:
        error instanceof PostgrestError
          ? {
              message: error.message,
              details: error.details,
              hint: error.hint,
              code: error.code,
            }
          : error instanceof Error
          ? error.message
          : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      user_id: userId,
      bot_name: botName,
    })

    await ctx.reply(
      isRussian(ctx)
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${
            error instanceof PostgrestError
              ? `${error.message}${
                  error.hint ? `\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: ${error.hint}` : ''
                }`
              : error instanceof Error
              ? error.message
              : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          }`
        : `‚ùå An error occurred while getting statistics: ${
            error instanceof PostgrestError
              ? `${error.message}${error.hint ? `\nHint: ${error.hint}` : ''}`
              : error instanceof Error
              ? error.message
              : 'Unknown error'
          }`
    )
  }
}

export { getStatsCommand }
