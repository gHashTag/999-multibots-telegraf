import { Composer } from 'telegraf'
import axios from 'axios'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä—è–º–æ –∏–∑ —á–∞—Ç–∞
 */
const httpRequestCommand = new Composer<MyContext>()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /http –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
httpRequestCommand.command('http', async ctx => {
  try {
    const text = ctx.message.text.trim()
    const parts = text.split(' ')

    if (parts.length < 3) {
      return await ctx.reply(
        '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /http GET|POST|PUT|DELETE url [data]\n' +
          '–ü—Ä–∏–º–µ—Ä: /http GET https://api.ipify.org?format=json'
      )
    }

    const method = parts[1].toUpperCase()
    const url = parts[2]
    let data = {}

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è POST/PUT)
    if (parts.length > 3) {
      try {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        const dataStr = parts.slice(3).join(' ')
        data = JSON.parse(dataStr)
      } catch (e) {
        return await ctx.reply(
          '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        )
      }
    }

    await ctx.reply(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${url}...`)

    logger.info({
      message: 'üåê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è HTTP –∑–∞–ø—Ä–æ—Å',
      method,
      url,
      dataLength: Object.keys(data).length,
    })

    const response = await axios({
      method,
      url,
      data: method !== 'GET' ? data : undefined,
      params:
        method === 'GET' && Object.keys(data).length > 0 ? data : undefined,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot/1.0',
      },
    })

    logger.info({
      message: '‚úÖ HTTP –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      status: response.status,
      statusText: response.statusText,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    const result = JSON.stringify(response.data, null, 2)

    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
    if (result.length > 4000) {
      await ctx.reply(
        `üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${response.status}). –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏:`
      )

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
      for (let i = 0; i < result.length; i += 4000) {
        await ctx.reply(result.substring(i, i + 4000))
      }
    } else {
      await ctx.reply(
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ç–∞—Ç—É—Å: ${response.status}):\n\n${result}`
      )
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞',
      error: error.message,
      stack: error.stack,
    })

    let errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (error.response) {
      errorMessage += `\n–°—Ç–∞—Ç—É—Å: ${error.response.status} ${error.response.statusText}`
      if (error.response.data) {
        const errorData =
          typeof error.response.data === 'object'
            ? JSON.stringify(error.response.data, null, 2)
            : error.response.data
        errorMessage += `\n–û—Ç–≤–µ—Ç:\n${errorData}`
      }
    }

    await ctx.reply(errorMessage)
  }
})

export { httpRequestCommand }
