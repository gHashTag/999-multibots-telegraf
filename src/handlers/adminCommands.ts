import { MyContext } from '@/interfaces'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { PaymentType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { isRussian } from '@/helpers/language'

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
const ADMIN_IDS = [144022504, 1254048880, 352374518, 1852726961] // –í–∞—à–∏ –∞–¥–º–∏–Ω ID

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
 */
function isAdmin(telegramId: number): boolean {
  return ADMIN_IDS.includes(telegramId)
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount> [reason]
 * –ü—Ä–∏–º–µ—Ä: /addbalance 484954118 1000 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export async function handleAddBalanceCommand(ctx: MyContext) {
  const isRu = isRussian(ctx)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
  if (!ctx.from?.id || !isAdmin(ctx.from.id)) {
    await ctx.reply(
      isRu
        ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã'
        : '‚ùå You do not have permission to execute this command'
    )
    return
  }

  const message = ctx.message
  if (!message || !('text' in message)) {
    await ctx.reply(
      isRu ? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã' : '‚ùå Invalid command format'
    )
    return
  }

  // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /addbalance <user_id> <amount> [reason]
  const parts = message.text.split(' ')
  if (parts.length < 3) {
    await ctx.reply(
      isRu
        ? `üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount> [–ø—Ä–∏—á–∏–Ω–∞]

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /addbalance 484954118 1000 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ /addbalance 484954118 -500 –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞

üí° –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - —Å–ø–∏—Å–∞–Ω–∏–µ`
        : `üìù Usage: /addbalance <user_id> <amount> [reason]

Examples:
‚Ä¢ /addbalance 484954118 1000 Activity bonus
‚Ä¢ /addbalance 484954118 -500 Balance correction

üí° Positive numbers - add balance, negative - deduct balance`
    )
    return
  }

  const targetUserId = parts[1]
  const amount = parseFloat(parts[2])
  const reason =
    parts.slice(3).join(' ') ||
    (isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' : 'Admin top-up')

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (isNaN(amount) || amount === 0) {
    await ctx.reply(
      isRu
        ? '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è)'
        : '‚ùå Invalid amount. Please specify a number (positive to add, negative to deduct)'
    )
    return
  }

  if (Math.abs(amount) > 10000) {
    await ctx.reply(
      isRu
        ? '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: 10,000 ‚≠ê'
        : '‚ùå Maximum operation amount: 10,000 ‚≠ê'
    )
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await getUserBalance(targetUserId)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Å—É–º–º—É
    const isDeduction = amount < 0
    const absoluteAmount = Math.abs(amount)
    const operationType = isDeduction
      ? PaymentType.MONEY_OUTCOME
      : PaymentType.MONEY_INCOME
    const operationText = isDeduction
      ? isRu
        ? '—Å–ø–∏—Å—ã–≤–∞—é'
        : 'deducting'
      : isRu
        ? '–ø–æ–ø–æ–ª–Ω—è—é'
        : 'adding'

    await ctx.reply(
      isRu
        ? `‚è≥ ${operationText} ${absoluteAmount} ‚≠ê ${isDeduction ? '—Å' : ''} –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}...`
        : `‚è≥ ${operationText} ${absoluteAmount} ‚≠ê ${isDeduction ? 'from' : 'to'} user ${targetUserId} balance...`
    )

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–ª–∞–Ω—Å–æ–º
    const result = await updateUserBalance(
      targetUserId,
      absoluteAmount,
      operationType,
      `Admin balance ${isDeduction ? 'deduction' : 'top-up'}: ${reason}`,
      {
        bot_name: ctx.botInfo?.username || 'admin_system',
        service_type: isDeduction ? 'admin_deduction' : 'admin_topup',
        payment_method: 'Admin',
        language: isRu ? 'ru' : 'en',
        operation_id: `admin-${isDeduction ? 'deduct' : 'topup'}-${Date.now()}-${ctx.from.id}`,
        admin_id: ctx.from.id,
        admin_username: ctx.from.username,
        reason: reason,
        category: 'BONUS',
      }
    )

    if (result) {
      const newBalance = await getUserBalance(targetUserId)

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      logger.info('üí∞ Admin balance top-up completed', {
        admin_id: ctx.from.id,
        admin_username: ctx.from.username,
        target_user_id: targetUserId,
        amount: amount,
        reason: reason,
        balance_before: currentBalance,
        balance_after: newBalance,
      })

      await ctx.reply(
        isRu
          ? `‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ ${isDeduction ? '—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω' : '–ø–æ–ø–æ–ª–Ω–µ–Ω'}!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${targetUserId}
üí∞ –ë—ã–ª–æ: ${currentBalance} ‚≠ê
üí∞ –°—Ç–∞–ª–æ: ${newBalance} ‚≠ê
${isDeduction ? '‚ûñ –°–ø–∏—Å–∞–Ω–æ' : '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ'}: ${absoluteAmount} ‚≠ê
üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}

üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${ctx.from.username || ctx.from.id}`
          : `‚úÖ Balance successfully ${isDeduction ? 'deducted' : 'added'}!

üë§ User: ${targetUserId}
üí∞ Was: ${currentBalance} ‚≠ê
üí∞ Now: ${newBalance} ‚≠ê
${isDeduction ? '‚ûñ Deducted' : '‚ûï Added'}: ${absoluteAmount} ‚≠ê
üìù Reason: ${reason}

üë®‚Äçüíº Administrator: ${ctx.from.username || ctx.from.id}`
      )
    } else {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.'
          : '‚ùå Error adding balance. Check logs.'
      )
    }
  } catch (error) {
    logger.error('‚ùå Error in admin balance top-up', {
      admin_id: ctx.from.id,
      target_user_id: targetUserId,
      amount: amount,
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    await ctx.reply(
      isRu
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        : `‚ùå An error occurred: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /checkbalance <user_id>
 */
export async function handleCheckBalanceCommand(ctx: MyContext) {
  const isRu = isRussian(ctx)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
  if (!ctx.from?.id || !isAdmin(ctx.from.id)) {
    await ctx.reply(
      isRu
        ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã'
        : '‚ùå You do not have permission to execute this command'
    )
    return
  }

  const message = ctx.message
  if (!message || !('text' in message)) {
    await ctx.reply(
      isRu ? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã' : '‚ùå Invalid command format'
    )
    return
  }

  const parts = message.text.split(' ')
  if (parts.length < 2) {
    await ctx.reply(
      isRu
        ? 'üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /checkbalance <user_id>'
        : 'üìù Usage: /checkbalance <user_id>'
    )
    return
  }

  const targetUserId = parts[1]

  try {
    const balance = await getUserBalance(targetUserId)

    await ctx.reply(
      isRu
        ? `üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}: ${balance} ‚≠ê`
        : `üí∞ User ${targetUserId} balance: ${balance} ‚≠ê`
    )
  } catch (error) {
    await ctx.reply(
      isRu
        ? `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        : `‚ùå Error getting balance: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
}
