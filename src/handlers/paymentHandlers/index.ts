import { Context } from 'telegraf'
import { Scenes } from 'telegraf'
import { Message } from 'telegraf/typings/core/types/typegram'
import { MyContext } from '../../interfaces'
import { logger } from '@/utils/logger'
import { inngest } from '@/core/inngest/clients'
import { v4 as uuidv4 } from 'uuid'
import { updateUserSubscription } from '../../core/supabase'
import { getTranslation } from '@/core'
import { isRussian } from '@/core/i18n/language'
import { sendNotification } from '../../core/notifications'

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SessionFlavor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
interface SessionData {
  subscription: string
  telegram_id: number
  email: string
  buttons: any[]
}

type PaymentContext = Context &
  MyContext &
  Scenes.SceneContext & {
    session: SessionData
    message: {
      successful_payment?: {
        total_amount: number
        invoice_payload: string
      }
    } & Message
  }

async function processPayment(
  ctx: PaymentContext,
  amount: number,
  subscriptionName: string,
  stars: number
) {
  const userId = ctx.from?.id.toString()
  const username = ctx.from?.username
  const payload = ctx.message?.successful_payment?.invoice_payload
  const isRu = isRussian(ctx)
  const operationId = `payment-${userId}-${Date.now()}-${uuidv4()}`

  logger.info('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram', {
    description: 'Processing payment via Telegram',
    userId,
    username,
    amount,
    stars,
    subscriptionName,
    operationId,
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateUserSubscription(userId, subscriptionName)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
  await inngest.send({
    id: operationId,
    name: 'payment/process',
    data: {
      telegram_id: userId,
      paymentAmount: stars,
      type: 'income',
      description: `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionName}`,
      bot_name: ctx.botInfo.username,
      is_ru: isRu,
      metadata: {
        payment_method: 'Telegram',
        subscription: subscriptionName,
        operation_id: operationId,
        invoice_payload: payload,
        amount_paid: amount,
      },
    },
  })

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await sendNotification(
    ctx,
    `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username} (ID: ${userId})\n` +
      `üì¶ –ö—É–ø–∏–ª: ${subscriptionName}\n –∏ –ø–æ–ª—É—á–∏–ª ${stars} –∑–≤–µ–∑–¥ üåü`
  )

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.reply(
    isRu
      ? `‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ ${stars} ‚≠êÔ∏è!**\n` +
          `‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n` +
          `üè† /menu\n` +
          `‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é /tech\n` +
          `–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!`
      : `‚úÖ **Thank you for your purchase! ${stars} stars added to your balance!**\n` +
          `‚ú® Now you can use your subscription. Go to the main menu by clicking the button below:\n` +
          `üè† /menu\n` +
          `‚ùì If you have any questions, feel free to ask for help /tech\n` +
          `We are always happy to help!`,
    {
      parse_mode: 'Markdown',
    }
  )

  ctx.session.subscription = ''
  ctx.session.buttons = []
}

export async function handleSuccessfulPayment(ctx: PaymentContext) {
  try {
    if (!ctx.chat) {
      logger.error('‚ùå Update does not belong to a chat')
      return
    }

    const stars = ctx.message?.successful_payment?.total_amount || 0
    const subscriptionType = ctx.session.subscription

    logger.info('üí´ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Processing successful payment',
      userId: ctx.from.id,
      stars,
      subscriptionType,
    })

    const { buttons } = await getTranslation({
      key: 'subscriptionScene',
      ctx,
    })

    const selectedButton = buttons.find(
      button => button.callback_data === subscriptionType
    )

    if (selectedButton) {
      const { stars_price, callback_data } = selectedButton
      await processPayment(ctx, stars_price, callback_data, stars)
    } else {
      const operationId = `payment-${ctx.from.id}-${Date.now()}-${uuidv4()}`

      await inngest.send({
        id: operationId,
        name: 'payment/process',
        data: {
          telegram_id: ctx.from.id.toString(),
          paymentAmount: stars,
          type: 'income',
          description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram',
          bot_name: ctx.botInfo.username,
          is_ru: isRussian(ctx),
          metadata: {
            payment_method: 'Telegram',
            operation_id: operationId,
            invoice_payload: ctx.message?.successful_payment?.invoice_payload,
          },
        },
      })

      await ctx.reply(
        isRussian(ctx)
          ? `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${stars}‚≠êÔ∏è –∑–≤–µ–∑–¥!`
          : `üí´ Your balance has been replenished by ${stars}‚≠êÔ∏è stars!`
      )

      await sendNotification(
        ctx,
        `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username} (ID: ${ctx.from.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${stars} –∑–≤–µ–∑–¥!`
      )

      ctx.session.subscription = ''
      ctx.session.buttons = []
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
      description: 'Error processing payment',
      error: error instanceof Error ? error.message : String(error),
      userId: ctx.from?.id,
    })
  }
}
