import { handleBuy } from '@/handlers'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

export async function handleTopUp(ctx: MyContext) {
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  try {
    logger.info(
      'üåü [handleTopUp] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏',
      {
        telegramId,
        callbackData: (ctx.callbackQuery as any)?.data,
        currentScene: ctx.scene?.current?.id,
        sessionMode: ctx.session?.mode,
      }
    )

    const data = ctx.match?.[0]
    logger.info('üåü [handleTopUp] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞', {
      telegramId,
      data,
      match: ctx.match,
    })

    const isRu = ctx.from?.language_code === 'ru'
    logger.info('üåü [handleTopUp] –í—ã–∑—ã–≤–∞–µ–º handleBuy', {
      telegramId,
      data,
      isRu,
    })

    await handleBuy(ctx)

    logger.info(
      'üåü [handleTopUp] handleBuy –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã',
      {
        telegramId,
      }
    )

    await ctx.scene.leave()

    logger.info('‚úÖ [handleTopUp] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
      telegramId,
    })
  } catch (error) {
    logger.error('‚ùå [handleTopUp] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while processing the payment. Please try again later.'
    )
  }
}
