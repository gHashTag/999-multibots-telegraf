import { MyContext } from '@/interfaces'
import { getSubscriptionInfo } from '@/utils/getSubscriptionInfo'
import { getUserBalance } from '@/core/supabase'
import { isRussian } from '@/helpers'
import { logger } from '@/utils/logger'
import { TransactionType } from '@/interfaces/payments.interface'

export async function handleBuySubscription(ctx: MyContext) {
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  if (!subscription) {
    await ctx.reply(
      isRu
        ? '‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω'
        : '‚ùå Error: subscription type not selected'
    )
    return
  }

  const subscriptionInfo = getSubscriptionInfo(subscription)
  if (!subscriptionInfo) {
    await ctx.reply(
      isRu
        ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏'
        : '‚ùå Error: invalid subscription type'
    )
    return
  }

  const telegramId = ctx.from?.id.toString()
  if (!telegramId) {
    await ctx.reply(
      isRu
        ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        : '‚ùå Error: could not get user ID'
    )
    return
  }

  try {
    const balance = await getUserBalance(telegramId)
    const price = isRu ? subscriptionInfo.price_ru : subscriptionInfo.price_en
    const stars = subscriptionInfo.stars
    const title = isRu ? subscriptionInfo.title_ru : subscriptionInfo.title_en

    if (balance < stars) {
      await ctx.reply(
        isRu
          ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${title}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${stars}‚≠êÔ∏è, —É –≤–∞—Å: ${balance}‚≠êÔ∏è`
          : `‚ùå Not enough stars to buy ${title} subscription. Required: ${stars}‚≠êÔ∏è, you have: ${balance}‚≠êÔ∏è`
      )
      return
    }

    // Store the subscription details in the session
    ctx.session.selectedPayment = {
      amount: price,
      stars,
      subscription,
      type: TransactionType.SUBSCRIPTION_PURCHASE,
    }

    await ctx.reply(
      isRu
        ? `üí´ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É ${title}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${stars}‚≠êÔ∏è`
        : `üí´ You selected ${title} subscription\nPrice: ${price} RUB\nYou will receive: ${stars}‚≠êÔ∏è`
    )
  } catch (error) {
    logger.error('Error in handleBuySubscription:', error)
    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏'
        : '‚ùå An error occurred while processing the subscription'
    )
  }
}
