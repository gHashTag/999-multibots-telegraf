import { Context } from 'telegraf'
import { starAmounts } from '@/price/helpers'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'

export async function handleBuy(ctx: MyContext) {
  const callbackData = (ctx.callbackQuery as any)?.data
  const isRu = isRussian(ctx)

  if (!callbackData) {
    console.error('CASE: handleBuy - –û—à–∏–±–∫–∞: callbackData –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    return
  }

  try {
    console.log('CASE: handleBuy - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏', { callbackData })

    let matchFound = false

    for (const amount of starAmounts) {
      if (callbackData.endsWith(`top_up_${amount}`)) {
        console.log(`CASE: handleBuy - –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è amount=${amount}`)
        matchFound = true

        try {
          console.log('CASE: handleBuy - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice –¥–ª—è', amount)
          await ctx.replyWithInvoice({
            title: `${amount} ‚≠êÔ∏è`,
            description: isRu
              ? `üí¨ –ü–æ–ª—É—á–∏—Ç–µ ${amount} –∑–≤–µ–∑–¥.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!`
              : `üí¨ Get ${amount} stars.\nUse stars for various functions of our bot and enjoy new opportunities!`,
            payload: `${amount}_${Date.now()}`,
            currency: 'XTR', // Pass "XTR" for payments in Telegram Stars.
            prices: [
              {
                label: isRu ? '–¶–µ–Ω–∞' : 'Price',
                amount: amount,
              },
            ],
            provider_token: '',
          })
          console.log('CASE: handleBuy - Invoice —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
          await ctx.answerCbQuery()
        } catch (invoiceError) {
          console.error(
            'CASE: handleBuy - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice:',
            invoiceError
          )
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞')
        }
        return
      }
    }
    //
    if (!matchFound) {
      console.warn(
        'CASE: handleBuy - –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è callbackData:',
        callbackData
      )
      console.warn(
        'CASE: handleBuy - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è starAmounts:',
        starAmounts
      )
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    }
  } catch (error) {
    console.error('CASE: handleBuy - –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')
    } catch (cbError) {
      console.error(
        'CASE: handleBuy - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callbackQuery –≤ catch –±–ª–æ–∫–µ',
        cbError
      )
    }
  }
}
