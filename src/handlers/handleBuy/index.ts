import { Context } from 'telegraf'
import { starAmounts } from '@/price/helpers'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { ADMIN_IDS_ARRAY } from '@/config'
import { logger } from '@/utils/logger'

export async function handleBuy(ctx: MyContext) {
  const callbackData = (ctx.callbackQuery as any)?.data
  const callerId = ctx.from?.id
  const isRu = isRussian(ctx)
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  if (!callbackData) {
    logger.error('üí∞ [handleBuy] –û—à–∏–±–∫–∞: callbackData –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', {
      telegramId,
    })
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    return
  }

  try {
    logger.info('üí∞ [handleBuy] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      telegramId,
      callbackData,
      currentScene: ctx.scene?.current?.id,
    })

    let matchFound = false
    let amountToSend: number | null = null

    if (callbackData === 'top_up_1') {
      logger.info('üí∞ [handleBuy] –û–±–Ω–∞—Ä—É–∂–µ–Ω top_up_1', { telegramId })
      if (callerId && ADMIN_IDS_ARRAY.includes(callerId)) {
        logger.info('üí∞ [handleBuy] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º 1 –∑–≤–µ–∑–¥—É', {
          telegramId,
          callerId,
        })
        matchFound = true
        amountToSend = 1
      } else {
        logger.warn('üí∞ [handleBuy] –ù–µ-–∞–¥–º–∏–Ω –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å top_up_1', {
          telegramId,
          callerId,
        })
        await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        return
      }
    } else {
      for (const amount of starAmounts) {
        if (callbackData.endsWith(`top_up_${amount}`)) {
          logger.info(
            `üí∞ [handleBuy] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è amount=${amount}`,
            {
              telegramId,
              amount,
              callbackData,
            }
          )
          matchFound = true
          amountToSend = amount
          break
        }
      }
    }

    if (matchFound && amountToSend !== null) {
      try {
        logger.info('üí∞ [handleBuy] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice', {
          telegramId,
          amountToSend,
        })

        await ctx.replyWithInvoice({
          title: `${amountToSend} ‚≠êÔ∏è${amountToSend === 1 ? ' (Admin Test)' : ''}`,
          description: isRu
            ? `üí¨ –ü–æ–ª—É—á–∏—Ç–µ ${amountToSend} –∑–≤–µ–∑–¥.`
            : `üí¨ Get ${amountToSend} stars.`,
          payload: `${amountToSend}_${Date.now()}`,
          currency: 'XTR',
          prices: [
            {
              label: isRu ? '–¶–µ–Ω–∞' : 'Price',
              amount: amountToSend,
            },
          ],
          provider_token: '',
        })

        logger.info('‚úÖ [handleBuy] Invoice —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', {
          telegramId,
          amountToSend,
        })

        await ctx.answerCbQuery()
      } catch (invoiceError) {
        logger.error('‚ùå [handleBuy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice', {
          telegramId,
          error:
            invoiceError instanceof Error
              ? invoiceError.message
              : String(invoiceError),
          amountToSend,
        })
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞')
      }
      return
    }

    if (!matchFound) {
      logger.warn('‚ö†Ô∏è [handleBuy] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è callbackData', {
        telegramId,
        callbackData,
        availableStarAmounts: starAmounts,
      })
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    }
  } catch (error) {
    logger.error('‚ùå [handleBuy] –û–±—â–∞—è –æ—à–∏–±–∫–∞', {
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')
    } catch (cbError) {
      logger.error(
        '‚ùå [handleBuy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callbackQuery –≤ catch –±–ª–æ–∫–µ',
        {
          telegramId,
          cbError: cbError instanceof Error ? cbError.message : String(cbError),
        }
      )
    }
  }
}
