import { MyContext } from '@/interfaces'
import { starAmounts } from '@/price/helpers'

export async function handleBuy(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'
  try {
    const data = ctx.match?.[0]
    const daysMatch = ctx.match?.[1]

    if (!data || !daysMatch) {
      console.warn('CASE: handleBuy - –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ ctx.match', {
        match: ctx.match,
      })
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.')
      return
    }

    console.log('CASE: handleBuy - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏', { data, days: daysMatch })

    const days = parseInt(daysMatch, 10)
    if (isNaN(days)) {
      console.warn('CASE: handleBuy - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:', daysMatch)
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.')
      return
    }

    let matchFound = false
    for (const amount of starAmounts) {
      if (days === amount) {
        console.log(
          `CASE: handleBuy - –ù–∞–π–¥–µ–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ?) —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è amount=${amount} (–∏–∑–≤–ª–µ–∫–ª–∏ –∫–∞–∫ days=${days})`
        )
        matchFound = true

        try {
          console.log('CASE: handleBuy - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice –¥–ª—è', amount)
          await ctx.replyWithInvoice({
            title: `${amount} ‚≠êÔ∏è`,
            description: isRu
              ? `ÔøΩÔøΩ –ü–æ–ª—É—á–∏—Ç–µ ${amount} –∑–≤–µ–∑–¥.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!`
              : `üí¨ Get ${amount} stars.\nUse stars for various functions of our bot and enjoy new opportunities!`,
            payload: `${amount}_${Date.now()}`,
            currency: 'XTR',
            prices: [
              {
                label: isRu ? '–¶–µ–Ω–∞' : 'Price',
                amount: amount,
              },
            ],
            provider_token: '',
          })
          console.log('CASE: handleBuy - Invoice —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
          await ctx.answerCbQuery()
        } catch (invoiceError) {
          console.error(
            'CASE: handleBuy - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice:',
            invoiceError
          )
          try {
            await ctx.answerCbQuery(
              isRu ? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞' : 'Invoice sending error'
            )
          } catch {
            /* ignore */
          }
        }

        return
      }
    }

    if (!matchFound) {
      console.warn(
        'CASE: handleBuy - –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ amount (days):',
        days
      )
      console.warn(
        'CASE: handleBuy - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è starAmounts:',
        starAmounts
      )
      await ctx.answerCbQuery(
        isRu ? '–û–ø—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' : 'Purchase option not found'
      )
    }
  } catch (error) {
    console.error('CASE: handleBuy - –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    try {
      await ctx.answerCbQuery(isRu ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞' : 'Internal error')
    } catch {
      /* ignore */
    }
  }
}
