/**
 * ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –§–ê–ô–õ! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
 *
 * –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –ú–ï–ù–Ø–¢–¨ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Æ
 * –ë–ï–ó –°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø –° –í–ï–î–£–©–ò–ú –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–ú!
 *
 * –î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö
 * –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é, –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫
 * –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
 */

import { MyContext } from '@/interfaces'
import { levels } from '@/menu/mainMenu'
import { isRussian } from '@/helpers/language'
import { priceCommand } from '@/commands/priceCommand'
import { handleTechSupport } from '@/commands/handleTechSupport'
import { mainMenuButton } from '@/menu/mainMenu'
import { get100Command } from '@/commands'
import { getStatsCommand } from '@/commands/stats'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å—Ü–µ–Ω—ã
export const handleMenu = async (ctx: MyContext) => {
  console.log('CASE: handleMenuCommand')
  const isRu = isRussian(ctx)
  if (ctx.message && 'text' in ctx.message) {
    const text = ctx.message.text || ''
    console.log('CASE: handleMenuCommand.text', text)

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const actions = {
      [isRu ? levels[0].title_ru : levels[0].title_en]: async () => {
        console.log('CASE: üí´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏')
        ctx.session.mode = ModeEnum.Subscribe
        await ctx.scene.enter(ModeEnum.SubscriptionScene)
      },
      [isRu ? levels[1].title_ru : levels[1].title_en]: async () => {
        console.log('CASE: ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ')
        ctx.session.mode = ModeEnum.DigitalAvatarBody
        await ctx.scene.enter(ModeEnum.DigitalAvatarBody)
      },
      [isRu ? levels[2].title_ru : levels[2].title_en]: async () => {
        console.log('CASE handleMenu: üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ')
        logger.info({
          message: 'üì∏ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏–∑ –º–µ–Ω—é',
          description: 'NeuroPhoto command selected from menu',
          telegram_id: ctx.from?.id,
          should_enter: ModeEnum.SelectNeuroPhoto,
          action: 'Entering selection scene',
        })
        await ctx.scene.enter(ModeEnum.SelectNeuroPhoto)
      },
      [isRu ? levels[3].title_ru : levels[3].title_en]: async () => {
        console.log('CASE: üîç –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ')
        ctx.session.mode = ModeEnum.ImageToPrompt
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[4].title_ru : levels[4].title_en]: async () => {
        console.log('CASE: üß† –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞')
        ctx.session.mode = ModeEnum.Avatar
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[5].title_ru : levels[5].title_en]: async () => {
        console.log('CASE: üí≠ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º')
        ctx.session.mode = ModeEnum.ChatWithAvatar
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[6].title_ru : levels[6].title_en]: async () => {
        console.log('CASE: ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò')
        ctx.session.mode = ModeEnum.SelectAiTextModel
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[7].title_ru : levels[7].title_en]: async () => {
        console.log('CASE: üé§ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞')
        ctx.session.mode = ModeEnum.Voice
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[8].title_ru : levels[8].title_en]: async () => {
        console.log('CASE: üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å')
        ctx.session.mode = ModeEnum.TextToSpeech
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[9].title_ru : levels[9].title_en]: async () => {
        console.log('CASE: üé• –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ')
        ctx.session.mode = ModeEnum.ImageToVideo
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[10].title_ru : levels[10].title_en]: async () => {
        console.log('CASE:  –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞')
        ctx.session.mode = ModeEnum.TextToVideo
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      [isRu ? levels[11].title_ru : levels[11].title_en]: async () => {
        console.log('CASE: üñºÔ∏è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ')
        ctx.session.mode = ModeEnum.TextToImage
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      },
      // [isRu ? levels[12].title_ru : levels[12].title_en]: async () => {
      //   console.log('CASE: üé§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±')
      //   ctx.session.mode = 'lip_sync'
      //   await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      // },
      // [isRu ? levels[13].title_ru : levels[13].title_en]: async () => {
      //   console.log('CASE: üé• –í–∏–¥–µ–æ –≤ URL')
      //   ctx.session.mode = 'video_in_url'
      //   await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      // },
      [isRu ? levels[100].title_ru : levels[100].title_en]: async () => {
        console.log('CASE: üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        ctx.session.mode = ModeEnum.TopUpBalance
        await ctx.scene.enter(ModeEnum.PaymentScene)
      },
      [isRu ? levels[101].title_ru : levels[101].title_en]: async () => {
        console.log('CASE: ü§ë –ë–∞–ª–∞–Ω—Å')
        ctx.session.mode = ModeEnum.Balance
        await ctx.scene.enter(ModeEnum.BalanceScene)
      },
      [isRu ? levels[102].title_ru : levels[102].title_en]: async () => {
        console.log('CASE: üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
        ctx.session.mode = ModeEnum.Invite
        await ctx.scene.enter(ModeEnum.InviteScene)
      },
      [isRu ? levels[103].title_ru : levels[103].title_en]: async () => {
        console.log('CASE: ‚ùì –ü–æ–º–æ—â—å')
        ctx.session.mode = ModeEnum.Help
        await ctx.scene.enter(ModeEnum.HelpScene)
      },
      [isRu ? levels[104].title_ru : levels[104].title_en]: async () => {
        console.log('CASE: üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ctx.session.mode = ModeEnum.Tech
        await handleTechSupport(ctx)
      },
      '/invite': async () => {
        console.log('CASE: üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
        ctx.session.mode = ModeEnum.Invite
        await ctx.scene.enter(ModeEnum.InviteScene)
      },
      '/price': async () => {
        console.log('CASE: üí∞ –¶–µ–Ω–∞')
        await priceCommand(ctx)
      },
      '/buy': async () => {
        console.log('CASE: üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        ctx.session.mode = ModeEnum.TopUpBalance
        await ctx.scene.enter(ModeEnum.PaymentScene)
      },
      '/balance': async () => {
        console.log('CASE: üí∞ –ë–∞–ª–∞–Ω—Å')
        ctx.session.mode = ModeEnum.Balance
        await ctx.scene.enter(ModeEnum.BalanceScene)
      },
      '/help': async () => {
        console.log('CASE: ‚ùì –ü–æ–º–æ—â—å')
        ctx.session.mode = ModeEnum.Help
        await ctx.scene.enter(ModeEnum.HelpScene)
      },
      '/menu': async () => {
        console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (command handler)')
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
        resetSessionForMenu(ctx.session)
        logger.info(
          '‚û°Ô∏è [HandleMenu /menu] Intending to enter MainMenu scene...'
        )
        await ctx.scene.enter(ModeEnum.MainMenu)
      },
      [isRu ? mainMenuButton.title_ru : mainMenuButton.title_en]: async () => {
        console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (text handler)')
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
        resetSessionForMenu(ctx.session)
        logger.info('‚û°Ô∏è [HandleMenu text] Intending to enter MainMenu scene...')
        await ctx.scene.enter(ModeEnum.MainMenu)
      },
      '/tech': async () => {
        console.log('CASE: üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ctx.session.mode = ModeEnum.Tech
        await handleTechSupport(ctx)
      },
      '/start': async () => {
        console.log('CASE: üöÄ Start')
        await ctx.scene.enter(ModeEnum.StartScene)
      },
      '/stats': async () => {
        console.log('CASE: üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP')
        ctx.session.mode = ModeEnum.Stats
        await getStatsCommand(ctx)
      },
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (actions[text]) {
      console.log('CASE: handleMenuCommand.if', text)
      await actions[text]()
    } else {
      if (text === '/get100') {
        console.log('CASE: handleMenuCommand.100', text)
        await get100Command(ctx)
      } else {
        console.log('CASE: handleMenuCommand.else', text)
      }
    }
  }
}

function resetSessionForMenu(session: MyContext['session']) {
  logger.info(
    'üîÑ [resetSessionForMenu HandleMenu] Resetting session before entering menu...'
  )
  session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –º–µ–Ω—é
  session.prompt = ''
  session.userModel = {
    model_name: '',
    trigger_word: '',
    model_url: '' as `${string}/${string}:${string}`,
    model_key: '' as `${string}/${string}:${string}`,
  }
  session.selectedModel = undefined
  session.audioUrl = undefined
  // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ–Ω—é
}

export default handleMenu
