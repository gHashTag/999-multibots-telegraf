export const sendReplyWithKeyboard = async ({
  ctx,
  message,
  inlineKeyboard,
  menu,
  photo_url,
  post_url,
}: SendReplyOptions) => {
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º inlineKeyboard –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    const keyboardArray = Array.isArray(inlineKeyboard)
      ? inlineKeyboard
      : inlineKeyboard
      ? [inlineKeyboard]
      : []

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const finalKeyboard = [...keyboardArray]

    // –ï—Å–ª–∏ –µ—Å—Ç—å URL –ø–æ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    if (post_url) {
      const isRu = isRussian(ctx)
      finalKeyboard.push([
        {
          text: isRu ? 'üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é' : 'üé¨ Watch tutorial',
          url: post_url,
        },
      ])
    }

    console.log('üõ†Ô∏è Final keyboard structure:', finalKeyboard)

    if (photo_url) {
      await ctx.replyWithPhoto(photo_url, {
        caption: message,
        reply_markup: { inline_keyboard: finalKeyboard },
        parse_mode: 'HTML',
        ...menu,
      })
    } else {
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: finalKeyboard },
        parse_mode: 'HTML',
        ...menu,
      })
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      hasPhoto: !!photo_url,
      hasPostButton: !!post_url,
    })

    return ctx.wizard.next()
  } catch (error) {
    console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    await ctx.reply(
      isRussian(ctx)
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred. Please try again later.'
    )
    throw error
  }
}
