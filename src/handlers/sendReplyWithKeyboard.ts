import { isRussian } from '@/helpers'
import { MyContext } from '@/types'
import { Markup } from 'telegraf'
import type {
  InlineKeyboardMarkup,
  InlineKeyboardButton,
} from 'telegraf/typings/core/types/typegram'

interface SendReplyOptions {
  ctx: MyContext
  message: string
  inlineKeyboard:
    | Markup.Markup<InlineKeyboardMarkup>
    | InlineKeyboardButton[][]
    | InlineKeyboardButton[]
  menu?: any
  photo_url?: string
  post_url?: string
}

export const sendReplyWithKeyboard = async ({
  ctx,
  message,
  inlineKeyboard,
  menu = {},
  photo_url,
  post_url,
}: SendReplyOptions) => {
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤
    let finalKeyboard: InlineKeyboardButton[][]

    if (Array.isArray(inlineKeyboard)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∫–Ω–æ–ø–æ–∫
      if (inlineKeyboard.length === 0) {
        finalKeyboard = []
      } else if (Array.isArray(inlineKeyboard[0])) {
        // –≠—Ç–æ —É–∂–µ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∫–Ω–æ–ø–æ–∫
        finalKeyboard = inlineKeyboard as InlineKeyboardButton[][]
      } else {
        // –≠—Ç–æ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫, –æ–±–µ—Ä–Ω–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
        finalKeyboard = [inlineKeyboard as InlineKeyboardButton[]]
      }
    } else if (
      inlineKeyboard &&
      typeof inlineKeyboard === 'object' &&
      'reply_markup' in inlineKeyboard
    ) {
      // –≠—Ç–æ –æ–±—ä–µ–∫—Ç Markup, –ø–æ–ª—É—á–∞–µ–º inline_keyboard
      finalKeyboard = inlineKeyboard.reply_markup.inline_keyboard
    } else {
      finalKeyboard = []
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å URL –ø–æ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    if (post_url) {
      const isRu = isRussian(ctx)
      finalKeyboard.push([
        {
          text: isRu ? 'üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é' : 'üé¨ Watch tutorial',
          url: post_url,
        },
      ])
    }

    console.log('üõ†Ô∏è Final keyboard structure:', JSON.stringify(finalKeyboard))

    if (photo_url) {
      await ctx.replyWithPhoto(photo_url, {
        caption: message,
        reply_markup: { inline_keyboard: finalKeyboard },
        parse_mode: 'HTML',
        ...menu,
      })
    } else {
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: finalKeyboard },
        parse_mode: 'HTML',
        ...menu,
      })
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      hasPhoto: !!photo_url,
      hasPostButton: !!post_url,
    })

    return ctx.wizard.next()
  } catch (error) {
    console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    await ctx.reply(
      isRussian(ctx)
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred. Please try again later.'
    )
    throw error
  }
}
