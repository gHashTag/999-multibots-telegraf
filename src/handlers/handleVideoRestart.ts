import type { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes';
import { isRussian } from '@/helpers/language'
import { logger } from '@/utils/logger'
import { isDev } from '@/config'
/**
 * Handles the logic for restarting the correct video generation scene
 * based on the *last completed* video scene stored in the session.
 * Called when the user clicks 'üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?'.
 */
export async function handleRestartVideoGeneration(
  ctx: MyContext
): Promise<void> {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å—Ü–µ–Ω—É –≤–∏–¥–µ–æ
  const lastCompletedScene = ctx.session.lastCompletedVideoScene
  logger.info({
    message:
      'üîÑ [handleRestartVideoGeneration] Attempting to restart video scene',
    telegramId,
    lastCompletedScene: lastCompletedScene ?? 'undefined',
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å—Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ ModeEnum
  const textToVideoSceneId = ModeEnum.TextToVideo
  const imageToVideoSceneId = ModeEnum.ImageToVideo

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º lastCompletedScene —Å ID —Å—Ü–µ–Ω
  if (lastCompletedScene === textToVideoSceneId) {
    logger.info({
      message: `[handleRestartVideoGeneration] Entering ${textToVideoSceneId}`,
      telegramId,
    })
    await ctx.scene.enter(textToVideoSceneId)
  } else if (lastCompletedScene === imageToVideoSceneId) {
    logger.info({
      message: `[handleRestartVideoGeneration] Entering ${imageToVideoSceneId}`,
      telegramId,
    })
    await ctx.scene.enter(imageToVideoSceneId)
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    logger.warn({
      message: `[handleRestartVideoGeneration] Cannot determine scene to restart. lastCompletedVideoScene: ${lastCompletedScene ?? 'undefined'}`,
      telegramId,
    })
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫—É–¥–∞-—Ç–æ
    if (isDev) {
      await ctx.reply(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ü–µ–Ω—É, –Ω–æ –≤ DEV —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ TextToVideo.'
      )
      await ctx.scene.enter(textToVideoSceneId)
      return
    }

    await ctx.reply(
      isRussian(ctx)
        ? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ /menu.'
        : 'Could not determine the previous video generation mode. Please return to /menu.'
    )
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±–æ–π –≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.scene.leave()
    await ctx.scene.enter(ModeEnum.MainMenu)
  }
}
