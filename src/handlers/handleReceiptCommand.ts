import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { generateReceiptUrl } from '@/helpers/generateReceiptUrl'
import { supabase } from '@/core/supabase'
import { Markup } from 'telegraf'
import { isRussian } from '@/helpers/language'

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏
 *
 * –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /receipt [operation_id]
 *
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns Promise<void>
 */
export async function handleReceiptCommand(ctx: MyContext): Promise<void> {
  try {
    const isRu = isRussian(ctx)

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const message = ctx.message && 'text' in ctx.message ? ctx.message.text : ''
    const args = message.split(' ')

    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (args.length < 2) {
      await ctx.reply(
        isRu
          ? '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /receipt 12345'
          : '‚ö†Ô∏è Please specify operation ID after the command.\nExample: /receipt 12345'
      )
      return
    }

    const operationId = args[1].trim()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–∫–∏–º ID
    const { data: paymentData, error: paymentError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('operation_id', operationId)
      .single()

    if (paymentError || !paymentData) {
      logger.warn('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        description: 'Payment not found',
        operationId,
        userId: ctx.from?.id,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –æ–ø–µ—Ä–∞—Ü–∏–∏.'
          : '‚ùå Payment with the specified ID not found. Please check the operation ID.'
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (paymentData.telegram_id !== ctx.from?.id) {
      logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–º—É –ø–ª–∞—Ç–µ–∂—É', {
        description: "Attempt to access another user's payment",
        operationId,
        paymentUserId: paymentData.telegram_id,
        requestUserId: ctx.from?.id,
      })

      await ctx.reply(
        isRu
          ? 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–ª–∞—Ç–µ–∂—É.'
          : 'üö´ You do not have access to this payment.'
      )
      return
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —á–µ–∫–∞
    const receiptUrl = generateReceiptUrl({
      operationId,
      amount: paymentData.amount,
      stars: paymentData.stars,
      botName: paymentData.bot_name,
      telegramId: String(paymentData.telegram_id),
      timestamp: paymentData.created_at,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(
      isRu
        ? `üßæ <b>–ß–µ–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ #${operationId}</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–µ–∫:`
        : `üßæ <b>Receipt for operation #${operationId}</b>\n\nClick the button below to open the receipt:`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          Markup.button.url(
            isRu ? 'üìÑ –û—Ç–∫—Ä—ã—Ç—å —á–µ–∫' : 'üìÑ Open Receipt',
            receiptUrl
          ),
        ]),
      }
    )

    logger.info('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω URL —á–µ–∫–∞', {
      description: 'Receipt URL sent',
      operationId,
      userId: ctx.from?.id,
    })
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —á–µ–∫–∞', {
      description: 'Error handling receipt command',
      error: error.message,
      userId: ctx.from?.id,
    })

    await ctx.reply(
      isRussian(ctx)
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred while generating the receipt. Please try again later.'
    )
  }
}
