import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers/language'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { inngest } from '@/inngest-functions/clients'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { calculateModeCost } from '@/price/helpers/modelsCost'

export async function handleVoiceMessage(ctx: MyContext) {
  const isRu = isRussian(ctx)

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å
    if (!ctx.message || !('voice' in ctx.message)) {
      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
          : '‚ùå Please send a voice message'
      )
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const file = await ctx.telegram.getFile(ctx.message.voice.file_id)
    if (!file.file_path) {
      throw new Error('File path not found')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const fileUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${file.file_path}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await ctx.reply(
      isRu
        ? 'üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
        : 'üéôÔ∏è Processing your voice message...'
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      id: `voice-to-text-${ctx.from?.id}-${Date.now()}-${uuidv4().substring(0, 8)}`,
      name: 'voice-to-text.requested',
      data: {
        fileUrl,
        telegram_id: ctx.from?.id.toString(),
        is_ru: isRu,
        bot_name: ctx.botInfo?.username,
        username: ctx.from?.username,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    await inngest.send({
      id: `payment-${ctx.from?.id}-${Date.now()}-${ModeEnum.VoiceToText}-${uuidv4()}`,
      name: 'payment/process',
      data: {
        telegram_id: ctx.from?.id.toString(),
        amount: calculateModeCost({ mode: ModeEnum.VoiceToText }).stars,
        type: 'money_expense',
        description: 'Payment for voice to text conversion',
        bot_name: ctx.botInfo?.username,
        service_type: ModeEnum.VoiceToText,
      },
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error processing voice message',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: ctx.from?.id,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred while processing your voice message. Please try again later.'
    )
  }
}
