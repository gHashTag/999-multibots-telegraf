import { Context, Markup } from 'telegraf'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { ADMIN_IDS_ARRAY } from '@/config'

interface SelectRubParams {
  ctx: Context
  isRu: boolean
}

export async function handleSelectRubAmount({ ctx, isRu }: SelectRubParams) {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ä—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
    const inlineKeyboardRows = rubTopUpOptions.map(option => [
      Markup.button.callback(
        `üí∞ ${option.amountRub} ‚ÇΩ (~${option.stars}‚≠êÔ∏è)`,
        `top_up_rub_${option.amountRub}`
      ),
    ])

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É "1 —Ä—É–±–ª—å" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    const userId = ctx.from?.id
    if (userId && ADMIN_IDS_ARRAY.includes(userId)) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      inlineKeyboardRows.unshift([
        Markup.button.callback(
          isRu ? 'üß™ 1 ‚ÇΩ (–ê–¥–º–∏–Ω-—Ç–µ—Å—Ç)' : 'üß™ 1 RUB (Admin Test)',
          'top_up_rub_1'
        ),
      ])
    }

    await ctx.reply(
      isRu
        ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:'
        : 'Choose the top-up amount in rubles:',
      // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ä—è–¥ - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
      Markup.inlineKeyboard(inlineKeyboardRows)
    )
  } catch (error) {
    console.error('Error in handleSelectRubAmount:', error)
    throw error
  }
}
