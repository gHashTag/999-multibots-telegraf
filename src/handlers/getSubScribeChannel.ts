import { MyContext } from '@/interfaces'

import { logger } from '@/utils/logger'

const DEFAULT_CHANNEL_ID = '@neuro_blogger_group' // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω
export const AVATARS_GROUP_ID = {
  ['neuro_blogger_bot']: '@neuro_blogger_group',
  ['MetaMuse_Manifest_bot']: '@MetaMuse_AI_Influencer',
  ['ZavaraBot']: '@NeuroLuna',
  ['LeeSolarbot']: '@SolarNeuroBlogger1',
  ['NeuroLenaAssistant_bot']: '@neuroLenka',
  ['NeurostylistShtogrina_bot']: '@neirostylist',
  ['Gaia_Kamskaia_bot']: '@neuromeets',
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –±–æ—Ç–∞
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
export const getSubScribeChannel = (ctx: MyContext): string | null => {
  logger.info('Executing getSubScribeChannel')
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ctx.botInfo.id –≤–º–µ—Å—Ç–æ ctx.botId
  if (!ctx || !ctx.botInfo?.id) {
    logger.error(
      'getSubScribeChannel: Bot info or bot ID is missing in context'
    )
    return DEFAULT_CHANNEL_ID // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ null/–æ—à–∏–±–∫—É
  }

  const botId = ctx.botInfo.id.toString()
  logger.info({ message: 'getSubScribeChannel - Got botId', botId })

  const botChannelMap = AVATARS_GROUP_ID

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –±–æ—Ç–∞ –≤ –∫–∞—Ä—Ç–µ
  if (botId in botChannelMap) {
    const channel = botChannelMap[botId as keyof typeof botChannelMap]
    logger.debug(`üîç –î–ª—è –±–æ—Ç–∞ ${botId} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–Ω–∞–ª: ${channel}`)
    return channel
  }

  // –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  logger.info(
    `‚ÑπÔ∏è –î–ª—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
  )
  return DEFAULT_CHANNEL_ID
}
