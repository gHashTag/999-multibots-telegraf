import express from 'express'
import { validateRobokassaSignature } from '@/core/robokassa'
import { getPaymentByInvId } from '@/core/supabase/payments'
import { supabaseAdmin } from '@/core/supabase'
import { PaymentStatus } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { ROBOKASSA_PASSWORD_2 } from '@/config'

const router = express.Router()

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Robokassa
 * POST /api/robokassa-result
 */
router.post('/robokassa-result', async (req: any, res: any) => {
  try {
    logger.info('üîî Received Robokassa webhook', {
      body: req.body,
      headers: req.headers,
    })

    const { OutSum, InvId, SignatureValue } = req.body

    if (!OutSum || !InvId || !SignatureValue) {
      logger.warn('‚ùå Missing required parameters in Robokassa webhook', {
        OutSum,
        InvId,
        SignatureValue: !!SignatureValue,
      })
      return res.status(400).send('Missing required parameters')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const isValidSignature = validateRobokassaSignature(
      OutSum,
      InvId,
      ROBOKASSA_PASSWORD_2 || '',
      SignatureValue
    )

    if (!isValidSignature) {
      logger.error('‚ùå Invalid Robokassa signature', {
        OutSum,
        InvId,
      })
      return res.status(400).send('Invalid signature')
    }

    logger.info('‚úÖ Robokassa signature validated', {
      OutSum,
      InvId,
    })

    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: payment, error } = await getPaymentByInvId(InvId)

    if (error || !payment) {
      logger.error('‚ùå Payment not found in database', {
        InvId,
        error,
      })
      return res.status(404).send('Payment not found')
    }

    if (payment.status === PaymentStatus.COMPLETED) {
      logger.info('‚ÑπÔ∏è Payment already processed', {
        InvId,
        status: payment.status,
      })
      return res.status(200).send('OK')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    const { error: updateError } = await supabaseAdmin
      .from('payments_v2')
      .update({
        status: PaymentStatus.COMPLETED,
        payment_date: new Date().toISOString(),
      })
      .eq('inv_id', InvId)

    if (updateError) {
      logger.error('‚ùå Error updating payment status', {
        InvId,
        error: updateError,
      })
      return res.status(500).send('Database error')
    }

    logger.info('‚úÖ Payment status updated to COMPLETED', {
      InvId,
      telegram_id: payment.telegram_id,
      subscription_type: payment.subscription,
    })

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —Ä—É–±–ª–µ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await sendPaymentSuccessNotification(payment)

    res.status(200).send('OK')
  } catch (error) {
    logger.error('‚ùå Error processing Robokassa webhook', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    res.status(500).send('Internal server error')
  }
})

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
 */
async function sendPaymentSuccessNotification(payment: any) {
  try {
    const { getBotByName } = await import('@/core/bot')
    const result = getBotByName(payment.bot_name)

    if (!result.bot || result.error) {
      logger.error('‚ùå Bot not found for payment notification', {
        bot_name: payment.bot_name,
        telegram_id: payment.telegram_id,
        error: result.error,
      })
      return
    }

    const bot = result.bot
    const isRu = payment.language === 'ru'
    const isSubscription = !!payment.subscription

    if (isSubscription) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await bot.telegram.sendMessage(
        payment.telegram_id,
        isRu
          ? `üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${payment.subscription}" —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º.`
          : `üéâ Your subscription "${payment.subscription}" has been successfully activated! Enjoy the bot.`
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç
      const { getSubScribeChannel } = await import(
        '@/handlers/getSubScribeChannel'
      )
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
      const tempCtx = { from: { language_code: payment.language } }
      const channelId = await getSubScribeChannel(tempCtx as any)

      if (channelId) {
        const chatInviteMessage = isRu
          ? `–ù–µ–π—Ä–æ –ø—É—Ç–Ω–∏–∫, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ú®

–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞?

–í —ç—Ç–æ–º —á–∞—Ç–µ —Ç—ã: 
üîπ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (–¥–∞, –ª–∏—á–Ω–æ –æ—Ç –º–µ–Ω—è)
üîπ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –±—ã—Ç—å –≤ —Å–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–µ–π—Ä–æ –ø—É—Ç–Ω–∏–∫–∞–º–∏  
üîπ—Å—Ç–∞–Ω–µ—à—å —á–∞—Å—Ç—å—é —Ç—ë–ø–ª–æ–≥–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏

–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø —Å –≤–∞–º–∏¬ª –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü§ó 

–ê –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–Ø —Å–∞–º¬ª`
          : `Neuro traveler, your subscription is activated ‚ú®

Want to join the chat for communication and become part of the creative community?

In this chat you:
üîπ can ask questions and get answers (yes, personally from me)
üîπ share your work and be in co-creation with other neuro travelers
üîπ become part of a warm, creative community

If yes, click the "I'm with you" button and welcome ü§ó

If not, continue on your own and click the "I myself" button`

        await bot.telegram.sendMessage(payment.telegram_id, chatInviteMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: isRu ? 'üëã ‚ò∫Ô∏è –Ø —Å –≤–∞–º–∏' : "üëã ‚ò∫Ô∏è I'm with you",
                  url: channelId.startsWith('@')
                    ? `https://t.me/${channelId.slice(1)}`
                    : channelId,
                },
              ],
              [
                {
                  text: isRu ? 'üôÖüôÖ‚Äç‚ôÄÔ∏è –Ø —Å–∞–º' : 'üôÖüôÖ‚Äç‚ôÄÔ∏è I myself',
                  callback_data: 'continue_solo',
                },
              ],
            ],
          },
        })
      }
    } else {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
      await bot.telegram.sendMessage(
        payment.telegram_id,
        isRu
          ? `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${payment.stars}‚≠ê –∑–≤–µ–∑–¥!`
          : `üí´ Your balance has been replenished by ${payment.stars}‚≠ê stars!`
      )
    }

    logger.info('‚úÖ Payment success notification sent', {
      telegram_id: payment.telegram_id,
      bot_name: payment.bot_name,
      subscription_type: payment.subscription,
    })
  } catch (error) {
    logger.error('‚ùå Error sending payment success notification', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id: payment.telegram_id,
      bot_name: payment.bot_name,
    })
  }
}

export default router
