/**
 * –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
 */

import { supabase } from '../core/supabase/client'

async function explainBillingLogic() {
  console.log('üîç –û–ë–™–Ø–°–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê –†–ê–°–•–û–î–û–í')
  console.log('='.repeat(60))

  try {
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã payments_v2
    console.log('\nüìã 1. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ payments_v2:')
    console.log('-'.repeat(40))

    const { data: samplePayments, error: paymentsError } = await supabase
      .from('payments_v2')
      .select('*')
      .gte('payment_date', '2025-05-01')
      .lt('payment_date', '2025-06-01')
      .eq('status', 'COMPLETED')
      .limit(5)

    if (paymentsError) throw paymentsError

    if (samplePayments.length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π –∏–∑ payments_v2:')
      samplePayments.forEach((payment, i) => {
        console.log(`\n${i + 1}. –ó–∞–ø–∏—Å—å ID: ${payment.id}`)
        console.log(`   telegram_id: ${payment.telegram_id}`)
        console.log(`   type: ${payment.type}`) // MONEY_OUTCOME –∏–ª–∏ MONEY_INCOME
        console.log(`   status: ${payment.status}`) // COMPLETED, PENDING, etc.
        console.log(`   cost: ${payment.cost} (—Ä–∞—Å—Ö–æ–¥—ã –≤ –∑–≤–µ–∑–¥–∞—Ö)`)
        console.log(`   stars: ${payment.stars} (–¥–æ—Ö–æ–¥—ã –≤ –∑–≤–µ–∑–¥–∞—Ö)`)
        console.log(`   payment_date: ${payment.payment_date}`)
        console.log(`   subscription_type: ${payment.subscription_type}`)
      })
    }

    // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã avatars
    console.log('\nüìã 2. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ avatars (–∞–º–±–∞—Å—Å–∞–¥–æ—Ä—ã):')
    console.log('-'.repeat(40))

    const { data: avatarsData, error: avatarsError } = await supabase
      .from('avatars')
      .select('telegram_id, group, bot_name, created_at')
      .limit(10)

    if (avatarsError) throw avatarsError

    console.log('–ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã –∏ –∏—Ö –±–æ—Ç—ã:')
    avatarsData.forEach((avatar, i) => {
      console.log(
        `${i + 1}. ID: ${avatar.telegram_id} | –ì—Ä—É–ø–ø–∞: ${avatar.group} | –ë–æ—Ç: ${avatar.bot_name}`
      )
    })

    // 3. –û–±—ä—è—Å–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
    console.log('\nüßÆ 3. –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê:')
    console.log('-'.repeat(40))
    console.log('–®–ê–ì 1: –ë–µ—Ä–µ–º –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã avatars')
    console.log(
      '–®–ê–ì 2: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –∏—â–µ–º –∑–∞–ø–∏—Å–∏ –≤ payments_v2 –∑–∞ –º–∞–π 2025:'
    )
    console.log('  - payment_date >= "2025-05-01"')
    console.log('  - payment_date < "2025-06-01"')
    console.log('  - status = "COMPLETED"')
    console.log('')
    console.log('–®–ê–ì 3: –°—á–∏—Ç–∞–µ–º –†–ê–°–•–û–î–´ (type = "MONEY_OUTCOME"):')
    console.log('  - –°—É–º–º–∏—Ä—É–µ–º –ø–æ–ª–µ "cost" (–≤ –∑–≤–µ–∑–¥–∞—Ö)')
    console.log('–®–ê–ì 4: –°—á–∏—Ç–∞–µ–º –î–û–•–û–î–´ (type = "MONEY_INCOME"):')
    console.log('  - –°—É–º–º–∏—Ä—É–µ–º –ø–æ–ª–µ "stars" (–≤ –∑–≤–µ–∑–¥–∞—Ö)')
    console.log('')
    console.log('–®–ê–ì 5: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –∫–∞–∂–¥–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞:')
    console.log(
      '  - –î–æ–ª—è (%) = (—Ä–∞—Å—Ö–æ–¥—ã_–∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ / –æ–±—â–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã_–≤—Å–µ—Ö) * 100'
    )
    console.log(
      '  - –ö –¥–æ–ø–ª–∞—Ç–µ ($) = (—Ä–∞—Å—Ö–æ–¥—ã_–∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ / –æ–±—â–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã_–≤—Å–µ—Ö) * $505.11'
    )

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
    console.log('\nüí° 4. –ü–†–ò–ú–ï–† –†–ê–°–ß–ï–¢–ê:')
    console.log('-'.repeat(40))

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if (avatarsData.length > 0) {
      const exampleAmbassador = avatarsData[0]

      const { data: ambassadorPayments, error } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('telegram_id', exampleAmbassador.telegram_id)
        .gte('payment_date', '2025-05-01')
        .lt('payment_date', '2025-06-01')
        .eq('status', 'COMPLETED')

      if (!error) {
        const expenses = ambassadorPayments
          .filter(p => p.type === 'MONEY_OUTCOME')
          .reduce((sum, p) => sum + (parseFloat(p.cost) || 0), 0)

        const income = ambassadorPayments
          .filter(p => p.type === 'MONEY_INCOME')
          .reduce((sum, p) => sum + (parseFloat(p.stars) || 0), 0)

        console.log(
          `–ê–º–±–∞—Å—Å–∞–¥–æ—Ä: ${exampleAmbassador.group} (ID: ${exampleAmbassador.telegram_id})`
        )
        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–∞–π: ${ambassadorPayments.length}`)
        console.log(`–†–∞—Å—Ö–æ–¥—ã (MONEY_OUTCOME): ${expenses.toFixed(2)} –∑–≤–µ–∑–¥`)
        console.log(`–î–æ—Ö–æ–¥—ã (MONEY_INCOME): ${income.toFixed(2)} –∑–≤–µ–∑–¥`)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (ambassadorPayments.length > 0) {
          console.log('\n–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:')
          ambassadorPayments.forEach((payment, i) => {
            console.log(
              `  ${i + 1}. ${payment.payment_date} | ${payment.type} | ${payment.type === 'MONEY_OUTCOME' ? payment.cost : payment.stars} –∑–≤–µ–∑–¥`
            )
          })
        }
      }
    }

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É–ª—É
    console.log('\nüìê 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê:')
    console.log('-'.repeat(40))
    console.log('–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤—Å–µ—Ö = Œ£(—Ä–∞—Å—Ö–æ–¥—ã –∫–∞–∂–¥–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞)')
    console.log('–î–æ–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ (%) = (–µ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã / –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã) * 100')
    console.log('–ö –¥–æ–ø–ª–∞—Ç–µ ($) = (–µ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã / –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã) * $505.11')
    console.log('')
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞: Œ£(–≤—Å–µ –¥–æ–ø–ª–∞—Ç—ã) –¥–æ–ª–∂–Ω–æ = $505.11')
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫
explainBillingLogic()
  .then(() => {
    console.log('\nüèÅ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
