/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –∑–∞ –º–∞–π 2025
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∏–∑ —Å—á–µ—Ç–∞ $505.11
 */

import { supabase } from '../core/supabase/client'
import { logger } from '../utils/logger'

interface AmbassadorExpenses {
  telegram_id: string
  ambassador_name: string
  bot_name: string
  total_transactions: number
  total_expenses_stars: number
  total_income_stars: number
  percentage_of_total: number
  amount_to_pay_usd: number
}

interface MonthlySummary {
  total_expenses_all_ambassadors: number
  total_income_all_ambassadors: number
  net_expenses: number
  bill_amount_usd: number
  star_to_usd_rate: number
}

async function analyzeMayBilling() {
  console.log('üí∞ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –∑–∞ –ú–ê–ô 2025')
  console.log('='.repeat(60))

  const BILL_AMOUNT_USD = 505.11
  const ANALYSIS_MONTH = '2025-05'

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º –∑–∞ –º–∞–π 2025
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–∞–π 2025...')

    const { data: expensesData, error } = await supabase.rpc(
      'calculate_ambassador_expenses',
      {
        start_date: '2025-05-01',
        end_date: '2025-06-01',
      }
    )

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ RPC:', error)

      // Fallback –∫ –ø—Ä—è–º–æ–º—É SQL –∑–∞–ø—Ä–æ—Å—É
      const { data: directData, error: directError } = await supabase.from(
        'avatars'
      ).select(`
          telegram_id,
          group,
          bot_name,
          created_at
        `)

      if (directError) {
        throw directError
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –æ—Ç–¥–µ–ª—å–Ω–æ
      const ambassadorExpenses: AmbassadorExpenses[] = []
      let totalExpenses = 0

      for (const ambassador of directData) {
        const { data: payments, error: paymentsError } = await supabase
          .from('payments_v2')
          .select('*')
          .eq('telegram_id', ambassador.telegram_id)
          .gte('payment_date', '2025-05-01')
          .lt('payment_date', '2025-06-01')
          .eq('status', 'COMPLETED')

        if (paymentsError) {
          console.warn(
            `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è ${ambassador.telegram_id}:`,
            paymentsError
          )
          continue
        }

        const expenses = payments
          .filter(p => p.type === 'MONEY_OUTCOME')
          .reduce((sum, p) => sum + (parseFloat(p.cost) || 0), 0)

        const income = payments
          .filter(p => p.type === 'MONEY_INCOME')
          .reduce((sum, p) => sum + (parseFloat(p.stars) || 0), 0)

        totalExpenses += expenses

        ambassadorExpenses.push({
          telegram_id: ambassador.telegram_id.toString(),
          ambassador_name: ambassador.group,
          bot_name: ambassador.bot_name,
          total_transactions: payments.length,
          total_expenses_stars: expenses,
          total_income_stars: income,
          percentage_of_total: 0, // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∂–µ
          amount_to_pay_usd: 0, // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∂–µ
        })
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Å—É–º–º—ã –∫ –¥–æ–ø–ª–∞—Ç–µ
      ambassadorExpenses.forEach(amb => {
        amb.percentage_of_total =
          totalExpenses > 0
            ? (amb.total_expenses_stars / totalExpenses) * 100
            : 0
        amb.amount_to_pay_usd =
          totalExpenses > 0
            ? (amb.total_expenses_stars / totalExpenses) * BILL_AMOUNT_USD
            : 0
      })

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
      ambassadorExpenses.sort(
        (a, b) => b.total_expenses_stars - a.total_expenses_stars
      )

      // 2. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log('\n' + '='.repeat(80))
      console.log('üìà –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í –ê–ú–ë–ê–°–°–ê–î–û–†–û–í –ó–ê –ú–ê–ô 2025')
      console.log('='.repeat(80))

      console.log(`\nüíµ –û–±—â–∏–π —Å—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ: $${BILL_AMOUNT_USD.toFixed(2)}`)
      console.log(
        `‚≠ê –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤: ${totalExpenses.toFixed(2)} –∑–≤–µ–∑–¥`
      )
      console.log(
        `üí∏ –ö—É—Ä—Å –∑–≤–µ–∑–¥—ã: $${totalExpenses > 0 ? (BILL_AMOUNT_USD / totalExpenses).toFixed(6) : 0}/‚≠ê`
      )

      console.log('\n' + '-'.repeat(80))
      console.log('üëë –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ê–°–•–û–î–û–í –ü–û –ê–ú–ë–ê–°–°–ê–î–û–†–ê–ú:')
      console.log('-'.repeat(80))

      ambassadorExpenses.forEach((amb, index) => {
        if (amb.total_expenses_stars > 0) {
          console.log(
            `\n${index + 1}. ü§ñ ${amb.ambassador_name} (${amb.bot_name})`
          )
          console.log(`   üë§ Telegram ID: ${amb.telegram_id}`)
          console.log(`   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${amb.total_transactions}`)
          console.log(
            `   ‚≠ê –†–∞—Å—Ö–æ–¥—ã: ${amb.total_expenses_stars.toFixed(2)} –∑–≤–µ–∑–¥`
          )
          console.log(
            `   üí∞ –î–æ—Ö–æ–¥—ã: ${amb.total_income_stars.toFixed(2)} –∑–≤–µ–∑–¥`
          )
          console.log(
            `   üìà –î–æ–ª—è –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö: ${amb.percentage_of_total.toFixed(2)}%`
          )
          console.log(`   üíµ –ö –¥–æ–ø–ª–∞—Ç–µ: $${amb.amount_to_pay_usd.toFixed(2)}`)
        }
      })

      // 3. –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
      const inactiveAmbassadors = ambassadorExpenses.filter(
        amb => amb.total_expenses_stars === 0
      )
      if (inactiveAmbassadors.length > 0) {
        console.log('\n' + '-'.repeat(80))
        console.log('üí§ –ê–ú–ë–ê–°–°–ê–î–û–†–´ –ë–ï–ó –†–ê–°–•–û–î–û–í –í –ú–ê–ï:')
        console.log('-'.repeat(80))
        inactiveAmbassadors.forEach(amb => {
          console.log(
            `‚Ä¢ ${amb.ambassador_name} (${amb.bot_name}) - ID: ${amb.telegram_id}`
          )
        })
      }

      // 4. –†–µ–∑—é–º–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      const activeAmbassadors = ambassadorExpenses.filter(
        amb => amb.total_expenses_stars > 0
      )
      console.log('\n' + '='.repeat(80))
      console.log('üìã –†–ï–ó–Æ–ú–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ê–ú–ë–ê–°–°–ê–î–û–†–ê–ú:')
      console.log('='.repeat(80))

      activeAmbassadors.forEach(amb => {
        console.log(
          `@${amb.ambassador_name}: $${amb.amount_to_pay_usd.toFixed(2)} (${amb.percentage_of_total.toFixed(1)}% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)`
        )
      })

      const totalToPay = activeAmbassadors.reduce(
        (sum, amb) => sum + amb.amount_to_pay_usd,
        0
      )
      console.log(`\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∫ —Å–±–æ—Ä—É: $${totalToPay.toFixed(2)}`)
      console.log(
        `‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞: ${((totalToPay / BILL_AMOUNT_USD) * 100).toFixed(1)}%`
      )

      // 5. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      logger.info('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        analysis_month: ANALYSIS_MONTH,
        bill_amount_usd: BILL_AMOUNT_USD,
        total_expenses_stars: totalExpenses,
        active_ambassadors: activeAmbassadors.length,
        inactive_ambassadors: inactiveAmbassadors.length,
        total_to_collect: totalToPay,
      })
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é')
      console.log(expensesData)
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤:', {
      error: error instanceof Error ? error.message : String(error),
      analysis_month: ANALYSIS_MONTH,
    })
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeMayBilling()
  .then(() => {
    console.log('\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
