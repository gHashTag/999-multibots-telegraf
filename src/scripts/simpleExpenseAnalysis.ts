import { supabase } from '../core/supabase/client'

async function simpleExpenseAnalysis() {
  console.log('‚≠ê –ü–†–û–°–¢–û–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í –í –ó–í–ï–ó–î–ê–•')
  console.log('='.repeat(70))
  console.log('–ú–∞–π 2025: MONEY_OUTCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
  console.log('='.repeat(70))

  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let allExpenses: any[] = []
    let from = 0
    const batchSize = 1000
    let hasMore = true

    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...')

    while (hasMore) {
      const { data: batchExpenses, error } = await supabase
        .from('payments_v2')
        .select(
          'bot_name, cost, stars, telegram_id, description, type, payment_date'
        )
        .eq('status', 'COMPLETED')
        .eq('type', 'MONEY_OUTCOME')
        .gte('payment_date', '2025-05-01')
        .lt('payment_date', '2025-06-01')
        .range(from, from + batchSize - 1)
        .order('payment_date', { ascending: false })

      if (error) throw error

      if (!batchExpenses || batchExpenses.length === 0) {
        hasMore = false
      } else {
        allExpenses = allExpenses.concat(batchExpenses)
        from += batchSize

        console.log(`   üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allExpenses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`)

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
        if (batchExpenses.length < batchSize) {
          hasMore = false
        }
      }
    }

    const expenses = allExpenses
    console.log(`üí≥ –í–°–ï–ì–û —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${expenses.length}`)

    // 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ bot_name
    const botExpenses: { [botName: string]: number } = {}
    const anomalies: any[] = []
    let totalStars = 0

    expenses.forEach(expense => {
      const cost = parseFloat(expense.cost || '0')
      totalStars += cost

      if (expense.bot_name && expense.bot_name.trim() !== '') {
        // –ï—Å—Ç—å bot_name - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if (!botExpenses[expense.bot_name]) {
          botExpenses[expense.bot_name] = 0
        }
        botExpenses[expense.bot_name] += cost
      } else {
        // –ù–ï–¢ bot_name - —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è!
        anomalies.push(expense)
      }
    })

    // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –±–æ—Ç–∞–º
    console.log('\nü§ñ –†–ê–°–•–û–î–´ –ü–û –ë–û–¢–ê–ú:')
    console.log('='.repeat(70))

    const sortedBots = Object.entries(botExpenses).sort(([, a], [, b]) => b - a)

    let totalBotExpenses = 0
    sortedBots.forEach(([botName, cost], index) => {
      const percentage = ((cost / totalStars) * 100).toFixed(1)
      console.log(
        `${index + 1}. ${botName}: ${cost.toFixed(0)}‚≠ê (${percentage}%)`
      )
      totalBotExpenses += cost
    })

    console.log('-'.repeat(70))
    console.log(`üí∞ –ò–¢–û–ì–û –ø–æ –±–æ—Ç–∞–º: ${totalBotExpenses.toFixed(0)}‚≠ê`)

    // 3. –ê–Ω–æ–º–∞–ª–∏–∏ - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–ï–ó bot_name
    if (anomalies.length > 0) {
      console.log('\nüö® –ê–ù–û–ú–ê–õ–ò–ò - –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ë–ï–ó BOT_NAME:')
      console.log('='.repeat(70))

      const anomalyExpenses = anomalies.reduce(
        (sum, a) => sum + parseFloat(a.cost || '0'),
        0
      )
      console.log(`‚ùå –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${anomalies.length}`)
      console.log(`üí∏ –†–∞—Å—Ö–æ–¥—ã –∞–Ω–æ–º–∞–ª–∏–π: ${anomalyExpenses.toFixed(0)}‚≠ê`)

      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–æ–º–∞–ª–∏–π:')
      anomalies.slice(0, 5).forEach((anomaly, index) => {
        console.log(
          `${index + 1}. ID: ${anomaly.telegram_id}, Cost: ${anomaly.cost}‚≠ê`
        )
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${anomaly.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`)
      })

      const anomalyPercentage = ((anomalyExpenses / totalStars) * 100).toFixed(
        1
      )
      console.log(`\nüìà –î–æ–ª—è –∞–Ω–æ–º–∞–ª–∏–π: ${anomalyPercentage}%`)
    } else {
      console.log('\n‚úÖ –ê–ù–û–ú–ê–õ–ò–ô –ù–ï–¢!')
      console.log('–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç bot_name')
    }

    // 4. –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:')
    console.log('='.repeat(70))
    console.log(`‚≠ê –í–°–ï–ì–û —Ä–∞—Å—Ö–æ–¥–æ–≤: ${totalStars.toFixed(0)} –∑–≤–µ–∑–¥`)
    console.log(`ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤: ${Object.keys(botExpenses).length}`)
    console.log(`üí≥ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${expenses.length}`)

    if (anomalies.length > 0) {
      console.log(`‚ùå –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${anomalies.length}`)
      const anomalyExpenses = anomalies.reduce(
        (sum, a) => sum + parseFloat(a.cost || '0'),
        0
      )
      console.log(`üí∏ –ù–µ—É—á—Ç–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${anomalyExpenses.toFixed(0)}‚≠ê`)
    }

    // 5. –ö—É—Ä—Å –¥–ª—è $505.11
    console.log('\nüíµ –†–ê–°–ß–ï–¢ –ö–£–†–°–ê –î–õ–Ø $505.11:')
    console.log('='.repeat(70))
    const rate = 505.11 / totalStars
    console.log(`üìà –ö—É—Ä—Å: $${rate.toFixed(6)} –∑–∞ ‚≠ê`)
    console.log(`üí∞ –ü—Ä–∏ ${totalStars.toFixed(0)}‚≠ê = $505.11`)

    // 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
    console.log('\nüìÖ –ê–ù–ê–õ–ò–ó –ü–û –î–ù–Ø–ú:')
    console.log('='.repeat(70))

    const dailyStats: {
      [date: string]: { transactions: number; cost: number }
    } = {}
    expenses.forEach(expense => {
      const date = expense.payment_date.split('T')[0]
      if (!dailyStats[date]) {
        dailyStats[date] = { transactions: 0, cost: 0 }
      }
      dailyStats[date].transactions++
      dailyStats[date].cost += parseFloat(expense.cost || '0')
    })

    const sortedDays = Object.entries(dailyStats)
      .sort(([, a], [, b]) => b.cost - a.cost)
      .slice(0, 10)

    console.log('–¢–æ–ø-10 –¥–Ω–µ–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:')
    sortedDays.forEach(([date, stats], index) => {
      console.log(
        `${index + 1}. ${date}: ${stats.cost.toFixed(0)}‚≠ê (${stats.transactions} —Ç—Ä–∞–Ω–∑.)`
      )
    })
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

simpleExpenseAnalysis()
  .then(() => {
    console.log('\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
