import { supabase } from '@/core/supabase'
import { Logger as logger } from '@/utils/logger'
import fs from 'fs'
import path from 'path'

import * as Excel from 'exceljs'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞
 * –ó–∞–ø—É—Å–∫: ts-node -r tsconfig-paths/register src/scripts/client-report.ts
 */

interface PaymentInfo {
  payment_id: number
  payment_date: string
  amount: number
  stars: number
  description: string
  status: string
  type: string
  payment_method: string
  currency: string
  service_type: string
  metadata?: Record<string, any>
}

interface DailyOperationSummary {
  date: string
  operations: PaymentInfo[]
  totalSpent: number
  totalImages: number
  byServiceType: Record<string, { count: number; stars: number }>
}

const formatDate = (date: Date) => {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  })
}

const SERVICE_TYPES_MAP: Record<string, string> = {
  text_to_image: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É',
  neuro_photo: '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ',
  image_to_prompt: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
  text_to_video: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É',
  image_to_video: '–ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
  voice: '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫',
  text_to_speech: '–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞',
  lip_sync: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±',
  digital_avatar_body: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä',
  digital_avatar_body_v2: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä v2',
  avatar: '–ê–≤–∞—Ç–∞—Ä',
  chat_with_avatar: '–ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
  select_model: '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏',
  select_model_wizard: '–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏',
}

async function generateClientReport(telegramId: string) {
  try {
    logger.info('üöÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', {
      description: 'Generating client report',
      telegram_id: telegramId,
    })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const { data: incomeData, error: incomeError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', telegramId)
      .eq('status', 'COMPLETED')
      .eq('type', 'money_income')
      .order('payment_date', { ascending: true })

    if (incomeError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö:', {
        description: 'Error getting income data',
        error: incomeError.message,
      })
      throw incomeError
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤
    const { data: expenseData, error: expenseError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', telegramId)
      .eq('status', 'COMPLETED')
      .eq('type', 'money_expense')
      .order('payment_date', { ascending: true })

    if (expenseError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö:', {
        description: 'Error getting expense data',
        error: expenseError.message,
      })
      throw expenseError
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: balanceData, error: balanceError } = await supabase
      .from('users')
      .select('balance, first_name, last_name, username')
      .eq('telegram_id', telegramId)
      .single()

    if (balanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ:', {
        description: 'Error getting balance data',
        error: balanceError.message,
      })
      throw balanceError
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const dailyOperations: Record<string, DailyOperationSummary> = {}

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º
    expenseData?.forEach(payment => {
      const date = new Date(payment.payment_date).toISOString().split('T')[0]

      if (!dailyOperations[date]) {
        dailyOperations[date] = {
          date,
          operations: [],
          totalSpent: 0,
          totalImages: 0,
          byServiceType: {},
        }
      }

      dailyOperations[date].operations.push(payment)
      dailyOperations[date].totalSpent += Math.abs(payment.amount)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
      const serviceType = payment.metadata?.service_type || 'unknown'

      if (!dailyOperations[date].byServiceType[serviceType]) {
        dailyOperations[date].byServiceType[serviceType] = {
          count: 0,
          stars: 0,
        }
      }

      dailyOperations[date].byServiceType[serviceType].count += 1
      dailyOperations[date].byServiceType[serviceType].stars += Math.abs(
        payment.amount
      )

      // –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (
        serviceType === 'text_to_image' ||
        serviceType === 'neuro_photo' ||
        serviceType === 'image_generation'
      ) {
        dailyOperations[date].totalImages += 1
      }
    })

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = `# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞ (ID: ${telegramId})\n\n`

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    const username = balanceData?.username
      ? `@${balanceData.username}`
      : '–ù–µ —É–∫–∞–∑–∞–Ω'
    const fullName =
      `${balanceData?.first_name || ''} ${
        balanceData?.last_name || ''
      }`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    report += `## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ\n\n`
    report += `- üë§ ID: ${telegramId}\n`
    report += `- üìù –ò–º—è: ${fullName}\n`
    report += `- üîñ Username: ${username}\n\n`

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalIncome =
      incomeData?.reduce((sum, payment) => sum + payment.amount, 0) || 0
    const totalExpense =
      expenseData?.reduce(
        (sum, payment) => sum + Math.abs(payment.amount),
        0
      ) || 0
    const currentBalance = balanceData?.balance || 0

    report += `## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`
    report += `- üí∞ –í—Å–µ–≥–æ –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤: ${totalIncome.toFixed(2)} –∑–≤–µ–∑–¥\n`
    report += `- üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${totalExpense.toFixed(2)} –∑–≤–µ–∑–¥\n`
    report += `- ‚≠ê –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} –∑–≤–µ–∑–¥\n\n`

    // –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤
    const serviceTypeSummary: Record<string, { count: number; stars: number }> =
      {}

    Object.values(dailyOperations).forEach(day => {
      Object.entries(day.byServiceType).forEach(([service, data]) => {
        if (!serviceTypeSummary[service]) {
          serviceTypeSummary[service] = { count: 0, stars: 0 }
        }
        serviceTypeSummary[service].count += data.count
        serviceTypeSummary[service].stars += data.stars
      })
    })

    report += `## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤\n\n`
    report += `| –°–µ—Ä–≤–∏—Å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π | –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥ | % –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ |\n`
    report += `|--------|---------------------|-----------------|--------------------|\n`

    Object.entries(serviceTypeSummary)
      .sort((a, b) => b[1].stars - a[1].stars)
      .forEach(([service, data]) => {
        const serviceName = SERVICE_TYPES_MAP[service] || service
        const percentage = ((data.stars / totalExpense) * 100).toFixed(2)

        report += `| ${serviceName} | ${data.count} | ${data.stars.toFixed(
          2
        )} | ${percentage}% |\n`
      })

    report += `\n`

    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
    report += `## –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤\n\n`
    report += `| –î–∞—Ç–∞ | –°—É–º–º–∞ (—Ä—É–±) | –ó–≤–µ–∑–¥—ã | –û–ø–∏—Å–∞–Ω–∏–µ | –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã |\n`
    report += `|------|------------|--------|----------|---------------|\n`

    incomeData?.forEach(payment => {
      const date = formatDate(new Date(payment.payment_date))
      const amount = payment.currency === 'RUB' ? payment.amount : '-'
      const stars = payment.stars || payment.amount

      report += `| ${date} | ${amount} | ${stars} | ${payment.description} | ${
        payment.payment_method || '–ù–µ —É–∫–∞–∑–∞–Ω'
      } |\n`
    })

    report += `\n## –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º\n\n`

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
    const sortedDays = Object.keys(dailyOperations).sort().reverse()

    sortedDays.forEach(date => {
      const dayData = dailyOperations[date]
      const formattedDate = formatDate(new Date(date))

      report += `### ${formattedDate}\n\n`
      report += `- üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${dayData.totalSpent.toFixed(2)} –∑–≤–µ–∑–¥\n`
      report += `- üñºÔ∏è –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${dayData.totalImages}\n\n`

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞ –¥–µ–Ω—å
      report += `#### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º\n\n`
      report += `| –°–µ—Ä–≤–∏—Å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥ |\n`
      report += `|--------|------------|----------------|\n`

      Object.entries(dayData.byServiceType)
        .sort((a, b) => b[1].stars - a[1].stars)
        .forEach(([service, data]) => {
          const serviceName = SERVICE_TYPES_MAP[service] || service

          report += `| ${serviceName} | ${data.count} | ${data.stars.toFixed(
            2
          )} |\n`
        })

      report += `\n#### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n\n`
      report += `| –í—Ä–µ–º—è | –û–ø–µ—Ä–∞—Ü–∏—è | –°—Ç–æ–∏–º–æ—Å—Ç—å (–∑–≤–µ–∑–¥) |\n`
      report += `|-------|----------|-------------------|\n`

      dayData.operations.forEach(op => {
        const time = new Date(op.payment_date).toLocaleTimeString('ru-RU')
        const description = op.description.replace(/^‚ùå /, '')

        report += `| ${time} | ${description} | ${Math.abs(op.amount).toFixed(
          2
        )} |\n`
      })

      report += `\n`
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportFileName = `client-report-${telegramId}-${
      new Date().toISOString().split('T')[0]
    }.md`
    const reportPath = path.join(process.cwd(), 'reports', reportFileName)

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(path.join(process.cwd(), 'reports'))) {
      fs.mkdirSync(path.join(process.cwd(), 'reports'))
    }

    fs.writeFileSync(reportPath, report)

    logger.info('‚úÖ –û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MD —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', {
      description: 'Markdown report generated and saved successfully',
      path: reportPath,
    })

    // –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
    await createExcelReport({
      telegramId,
      incomeData,
      expenseData,
      balanceData,
      dailyOperations,
      totalIncome,
      totalExpense,
      currentBalance,
      serviceTypeSummary,
    })

    return reportPath
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', {
      description: 'Error generating report',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: telegramId,
    })
    throw error
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
 */
async function createExcelReport(data: {
  telegramId: string
  incomeData: any[]
  expenseData: any[]
  balanceData: any
  dailyOperations: Record<string, DailyOperationSummary>
  totalIncome: number
  totalExpense: number
  currentBalance: number
  serviceTypeSummary: Record<string, { count: number; stars: number }>
}) {
  const {
    telegramId,
    incomeData,
    expenseData,
    balanceData,
    dailyOperations,
    totalIncome,
    totalExpense,
    currentBalance,
    serviceTypeSummary,
  } = data

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
  const workbook = new Excel.Workbook()

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
  workbook.creator = 'NeuroLenaAssistant_bot'
  workbook.lastModifiedBy = 'NeuroLenaAssistant_bot'
  workbook.created = new Date()
  workbook.modified = new Date()

  // 1. –õ–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const summarySheet = workbook.addWorksheet('–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  summarySheet.mergeCells('A1:E1')
  const titleCell = summarySheet.getCell('A1')
  titleCell.value = `–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞ (ID: ${telegramId})`
  titleCell.font = { bold: true, size: 16 }
  titleCell.alignment = { horizontal: 'center' }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  const username = balanceData?.username
    ? `@${balanceData.username}`
    : '–ù–µ —É–∫–∞–∑–∞–Ω'
  const fullName =
    `${balanceData?.first_name || ''} ${balanceData?.last_name || ''}`.trim() ||
    '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

  summarySheet.addRow([''])
  summarySheet.addRow(['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:', ''])
  summarySheet.addRow(['ID:', telegramId])
  summarySheet.addRow(['–ò–º—è:', fullName])
  summarySheet.addRow(['Username:', username])

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  summarySheet.addRow([''])
  summarySheet.addRow(['–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', ''])
  summarySheet.addRow([
    '–í—Å–µ–≥–æ –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤:',
    `${totalIncome.toFixed(2)} –∑–≤–µ–∑–¥`,
  ])
  summarySheet.addRow([
    '–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:',
    `${totalExpense.toFixed(2)} –∑–≤–µ–∑–¥`,
  ])
  summarySheet.addRow(['–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', `${currentBalance.toFixed(2)} –∑–≤–µ–∑–¥`])

  // –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤
  summarySheet.addRow([''])
  summarySheet.addRow(['–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤:', ''])

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const serviceHeader = summarySheet.addRow([
    '–°–µ—Ä–≤–∏—Å',
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π',
    '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥',
    '% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
  ])
  serviceHeader.eachCell(cell => {
    cell.font = { bold: true }
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' },
    }
    cell.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE0E0E0' },
    }
  })

  // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  Object.entries(serviceTypeSummary)
    .sort((a, b) => b[1].stars - a[1].stars)
    .forEach(([service, data]) => {
      const serviceName = SERVICE_TYPES_MAP[service] || service
      const percentage = ((data.stars / totalExpense) * 100).toFixed(2)

      const row = summarySheet.addRow([
        serviceName,
        data.count,
        data.stars.toFixed(2),
        `${percentage}%`,
      ])

      row.eachCell(cell => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        }
      })
    })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  summarySheet.columns.forEach(column => {
    column.width = 25
  })

  // 2. –õ–∏—Å—Ç —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏
  const incomeSheet = workbook.addWorksheet('–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤')

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  incomeSheet.mergeCells('A1:F1')
  const incomeTitle = incomeSheet.getCell('A1')
  incomeTitle.value = '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤'
  incomeTitle.font = { bold: true, size: 14 }
  incomeTitle.alignment = { horizontal: 'center' }

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const incomeHeader = incomeSheet.addRow([
    '–î–∞—Ç–∞',
    '–í—Ä–µ–º—è',
    '–°—É–º–º–∞ (—Ä—É–±)',
    '–ó–≤–µ–∑–¥—ã',
    '–û–ø–∏—Å–∞–Ω–∏–µ',
    '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
  ])

  incomeHeader.eachCell(cell => {
    cell.font = { bold: true }
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' },
    }
    cell.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE0E0E0' },
    }
  })

  // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  incomeData?.forEach(payment => {
    const paymentDate = new Date(payment.payment_date)
    const date = formatDate(paymentDate)
    const time = paymentDate.toLocaleTimeString('ru-RU')
    const amount = payment.currency === 'RUB' ? payment.amount : '-'
    const stars = payment.stars || payment.amount

    const row = incomeSheet.addRow([
      date,
      time,
      amount,
      stars,
      payment.description,
      payment.payment_method || '–ù–µ —É–∫–∞–∑–∞–Ω',
    ])

    row.eachCell(cell => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' },
      }
    })
  })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  incomeSheet.columns.forEach(column => {
    column.width = 25
  })

  // 3. –õ–∏—Å—Ç —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
  const expenseSheet = workbook.addWorksheet('–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º')

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  expenseSheet.mergeCells('A1:E1')
  const expenseTitle = expenseSheet.getCell('A1')
  expenseTitle.value = '–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º'
  expenseTitle.font = { bold: true, size: 14 }
  expenseTitle.alignment = { horizontal: 'center' }

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const expenseHeader = expenseSheet.addRow([
    '–î–∞—Ç–∞',
    '–í—Ä–µ–º—è',
    '–û–ø–µ—Ä–∞—Ü–∏—è',
    '–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞',
    '–°—Ç–æ–∏–º–æ—Å—Ç—å (–∑–≤–µ–∑–¥)',
  ])

  expenseHeader.eachCell(cell => {
    cell.font = { bold: true }
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' },
    }
    cell.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE0E0E0' },
    }
  })

  // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  expenseData?.forEach(payment => {
    const paymentDate = new Date(payment.payment_date)
    const date = formatDate(paymentDate)
    const time = paymentDate.toLocaleTimeString('ru-RU')
    const description = payment.description.replace(/^‚ùå /, '')
    const serviceType = payment.metadata?.service_type || 'unknown'
    const serviceName = SERVICE_TYPES_MAP[serviceType] || serviceType

    const row = expenseSheet.addRow([
      date,
      time,
      description,
      serviceName,
      Math.abs(payment.amount).toFixed(2),
    ])

    row.eachCell(cell => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' },
      }
    })
  })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  expenseSheet.columns.forEach(column => {
    column.width = 35
  })

  // 4. –õ–∏—Å—Ç —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  const dailyStatsSheet = workbook.addWorksheet('–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  dailyStatsSheet.mergeCells('A1:D1')
  const dailyStatsTitle = dailyStatsSheet.getCell('A1')
  dailyStatsTitle.value = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
  dailyStatsTitle.font = { bold: true, size: 14 }
  dailyStatsTitle.alignment = { horizontal: 'center' }

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const dailyStatsHeader = dailyStatsSheet.addRow([
    '–î–∞—Ç–∞',
    '–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π',
    '–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    '–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥',
  ])

  dailyStatsHeader.eachCell(cell => {
    cell.font = { bold: true }
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' },
    }
    cell.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE0E0E0' },
    }
  })

  // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  Object.keys(dailyOperations)
    .sort()
    .reverse()
    .forEach(date => {
      const dayData = dailyOperations[date]
      const formattedDate = formatDate(new Date(date))

      const row = dailyStatsSheet.addRow([
        formattedDate,
        dayData.operations.length,
        dayData.totalImages,
        dayData.totalSpent.toFixed(2),
      ])

      row.eachCell(cell => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        }
      })
    })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  dailyStatsSheet.columns.forEach(column => {
    column.width = 30
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const excelFileName = `client-report-${telegramId}-${
    new Date().toISOString().split('T')[0]
  }.xlsx`
  const excelPath = path.join(process.cwd(), 'reports', excelFileName)

  await workbook.xlsx.writeFile(excelPath)

  logger.info('‚úÖ –û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', {
    description: 'Excel report generated and saved successfully',
    path: excelPath,
  })

  console.log(`‚úÖ Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${excelPath}`)

  return excelPath
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å ID 2086031075
generateClientReport('2086031075')
  .then(reportPath => {
    console.log(`üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${reportPath}`)
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error)
    process.exit(1)
  })
