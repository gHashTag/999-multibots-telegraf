/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { createAgentRouter } from '@/core/mcp/agent/router'
import { TaskType, TaskStatus, Task } from '@/core/mcp/agent/state'
import { NetworkAgent } from '@/core/mcp/agent/router'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { Router } from '@/core/mcp/agent/router'
import { AgentState } from '@/core/mcp/agent/state'
import 'dotenv/config'

// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const TELEGRAM_ID = '144022504'
const BOT_NAME = 'neuro_blogger_bot'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface AgentTask {
  id: string
  external_id?: string
  type: string
  description: string
  status: string
  priority: number
  created_at: string
  updated_at: string
  dependencies: any[]
  metadata: Record<string, any>
  is_subtask: boolean
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç AgentTask –≤ Task –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
 */
function adaptAgentTaskToTask(agentTask: AgentTask): Task {
  return {
    id: agentTask.id,
    type: agentTask.type as TaskType,
    description: agentTask.description,
    status: agentTask.status as TaskStatus,
    priority: agentTask.priority,
    created: new Date(agentTask.created_at),
    updated: new Date(agentTask.updated_at),
    dependencies: agentTask.dependencies || [],
    metadata: agentTask.metadata || {},
    isSubtask: agentTask.is_subtask,
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramNotification(message: string) {
  try {
    const { bot, error } = getBotByName(BOT_NAME)

    if (error || !bot) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: ${error}`)
    }

    await bot.telegram.sendMessage(TELEGRAM_ID, message, {
      parse_mode: 'HTML',
    })

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram', {
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })

    return true
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ Supabase
 */
async function getNextAgentTask(): Promise<AgentTask | null> {
  try {
    logger.info('üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Supabase', {
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ
    const tgId = parseInt(TELEGRAM_ID, 10)

    // –í—ã–∑—ã–≤–∞–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
    const { data, error } = await supabase.rpc('get_next_agent_task', {
      p_telegram_id: tgId,
      p_bot_name: BOT_NAME,
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ Supabase', {
        error: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
      })
      return null
    }

    if (!data) {
      logger.info('‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
        telegram_id: TELEGRAM_ID,
        bot_name: BOT_NAME,
      })
      return null
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç AgentTask
    const task: AgentTask = {
      id: data.id,
      external_id: data.external_id,
      type: data.type,
      description: data.description,
      status: data.status,
      priority: data.priority,
      created_at: data.created_at,
      updated_at: data.updated_at,
      dependencies: data.dependencies || [],
      metadata: data.metadata || {},
      is_subtask: data.is_subtask || false,
    }

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      task_id: task.id,
      type: task.type,
      priority: task.priority,
    })

    return task
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return null
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Supabase
 */
async function updateAgentTaskStatus(
  taskId: string,
  status: string,
  result: any = null
): Promise<boolean> {
  try {
    logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Supabase', {
      task_id: taskId,
      status,
      has_result: !!result,
    })

    // –í—ã–∑—ã–≤–∞–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    const { data: updateResult, error } = await supabase.rpc(
      'update_agent_task_status',
      {
        p_task_id: taskId,
        p_status: status,
        p_result: result || null,
      }
    )

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Supabase', {
        error: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
        task_id: taskId,
      })
      return false
    }

    logger.info('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase', {
      task_id: taskId,
      status,
      success: !!updateResult,
    })
    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      task_id: taskId,
    })
    return false
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
 */
function createCodeGenerationAgent(router: Router) {
  const codeGenerationAgent: NetworkAgent = {
    id: 'code-generation-agent',
    name: '–ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
    description:
      '–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
    capabilities: ['code-generation', 'typescript', 'javascript', 'python'],

    async canHandle(task: Task): Promise<boolean> {
      return task.type === TaskType.CODE_GENERATION
    },

    async handle(task: Task, context: AgentState): Promise<any> {
      try {
        logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞', {
          task_id: task.id,
          description: task.description,
        })

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        logger.debug('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞', {
          agent_id: context.id,
          tasks_count: context.tasks.size,
          context_size: context.context.size,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        await sendTelegramNotification(
          `üöÄ <b>–ê–≥–µ–Ω—Ç "${this.name}" –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏</b>\n\n` +
            `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
            `–¢–∏–ø: ${task.type}\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ IN_PROGRESS
        await updateAgentTaskStatus(task.id, TaskStatus.IN_PROGRESS)

        logger.info(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ${task.id}...`)

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const { language = 'typescript' } = task.metadata || {}

        // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        await new Promise(resolve => setTimeout(resolve, 3000)) // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const code = `
/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param name - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
function greet(name: string): string {
  return \`–ü—Ä–∏–≤–µ—Ç, \${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É.\`;
}
`.trim()

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = {
          code,
          language,
          executionTime: new Date().toISOString(),
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ COMPLETED
        await updateAgentTaskStatus(task.id, TaskStatus.COMPLETED, result)

        logger.info(`‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`, { result })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        await sendTelegramNotification(
          `‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n` +
            `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
            `–¢–∏–ø: ${task.type}\n\n` +
            `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n` +
            `<pre><code>${language}\n${code}\n</code></pre>\n\n` +
            `–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º "${this.name}".`
        )

        return result
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ${task.id}`, {
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : undefined,
          task_id: task.id,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ FAILED
        await updateAgentTaskStatus(task.id, TaskStatus.FAILED, {
          error: error instanceof Error ? error.message : String(error),
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await sendTelegramNotification(
          `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏</b>\n\n` +
            `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
            `–¢–∏–ø: ${task.type}\n` +
            `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${error instanceof Error ? error.message : String(error)}`
        )

        throw error
      }
    },
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–µ
  router.registerAgent(codeGenerationAgent)

  logger.info('‚úÖ –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', {
    agent_id: codeGenerationAgent.id,
  })

  return codeGenerationAgent
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
 */
async function processAgentTasks() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await sendTelegramNotification(
      'üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞</b>'
    )

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤
    const router = createAgentRouter({
      mcpService: {
        // –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Service
        initialize: async () => {},
        close: async () => {},
        processTask: async () => ({}),
        getClient: () => ({}),
      },
    })

    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    const codeAgent = createCodeGenerationAgent(router)

    logger.info('‚úÖ –ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', {
      agents: router.getAgents().map(a => a.name),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
    await sendTelegramNotification(
      `‚úÖ <b>–ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n` +
        router
          .getAgents()
          .map(a => `ü§ñ ${a.name}`)
          .join('\n')
    )

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Supabase
    const nextAgentTask = await getNextAgentTask()

    if (!nextAgentTask) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      await sendTelegramNotification(
        '‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>'
      )
      return
    }

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      task_id: nextAgentTask.id,
      type: nextAgentTask.type,
      priority: nextAgentTask.priority,
    })

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    const nextTask = adaptAgentTaskToTask(nextAgentTask)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
    const canBeHandled = codeAgent.canHandle(nextTask)

    if (!canBeHandled) {
      logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏', {
        task_id: nextTask.id,
        type: nextTask.type,
      })

      await sendTelegramNotification(
        `‚ö†Ô∏è <b>–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏</b>\n\n` +
          `ID –∑–∞–¥–∞—á–∏: <code>${nextTask.id}</code>\n` +
          `–¢–∏–ø: ${nextTask.type}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${nextTask.description}`
      )
      return
    }

    logger.info('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏', {
      agent: codeAgent.name,
      task_id: nextTask.id,
    })

    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    const emptyAgentState: AgentState = {
      id: 'code-generation-agent-state',
      tasks: new Map<string, Task>(),
      context: new Map<string, any>(),
      history: [],
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    const result = await codeAgent.handle(nextTask, emptyAgentState)

    if (result) {
      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', {
        task_id: nextTask.id,
        type: nextTask.type,
      })
    } else {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏', {
        task_id: nextTask.id,
        type: nextTask.type,
      })
    }

    logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await sendTelegramNotification(
      '‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>'
    )
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    await sendTelegramNotification(
      `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á</b>\n\n` +
        `–°–æ–æ–±—â–µ–Ω–∏–µ: ${error instanceof Error ? error.message : String(error)}`
    )
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á
processAgentTasks()
  .then(() => {
    logger.info('‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch(error => {
    logger.error('‚ùå –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
