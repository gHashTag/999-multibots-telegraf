/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { createAgentRouter } from '@/core/mcp/agent/router'
import { TaskType, TaskStatus, AgentState, Task } from '@/core/mcp/agent/state'
import { NetworkAgent } from '@/core/mcp/agent/router'
import { getNextTask } from '@/core/supabase/task/getNextTask'
import { updateTaskStatus } from '@/core/supabase/task/updateTaskStatus'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { Client } from '@modelcontextprotocol/sdk/client/index.js'
import 'dotenv/config'

// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const TELEGRAM_ID = '144022504'
const BOT_NAME = 'neuro_blogger_bot'

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
const agentState: AgentState = {
  tasks: new Map<string, Task>(),
  currentTask: null,
  taskHistory: [],
  agentId: 'test-agent',
  agentName: 'Test Agent',
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramNotification(message: string) {
  try {
    const { bot, error } = getBotByName(BOT_NAME)

    if (error || !bot) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: ${error}`)
    }

    await bot.telegram.sendMessage(TELEGRAM_ID, message, {
      parse_mode: 'HTML',
    })

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram', {
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })

    return true
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })
    return false
  }
}

/**
 * –°–æ–∑–¥–∞–µ–º –ú–°–† –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å LLM
 */
const mcpClient = new Client({
  apiKey: process.env.MCP_API_KEY || '',
})

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
const codeGenerationAgent: NetworkAgent = {
  id: 'code-generation-agent',
  name: '–ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
  description: '–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
  capabilities: ['code-generation', 'typescript', 'javascript', 'python'],

  async canHandle(task: Task): Promise<boolean> {
    return task.type === TaskType.CODE_GENERATION
  },

  async handle(task: Task, _state: AgentState): Promise<any> {
    logger.info(`üöÄ –ê–≥–µ–Ω—Ç '${this.name}' –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏: ${task.id}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
    await sendTelegramNotification(
      `üöÄ <b>–ê–≥–µ–Ω—Ç "${this.name}" –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏</b>\n\n` +
        `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
        `–¢–∏–ø: ${task.type}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`
    )

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ IN_PROGRESS
      const taskId = (task.metadata?._originalId as string) || task.id
      await updateTaskStatus({
        task_id: taskId,
        status: TaskStatus.IN_PROGRESS,
      })

      logger.info(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ${task.id}...`)

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      const { language = 'typescript' } = task.metadata || {}

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
      const prompt = `
      –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ ${language} —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é:
      
      ${task.description}
      
      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
      `

      // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã LLM (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API)
      const code = `
function greet(name: string): string {
  return \`–ü—Ä–∏–≤–µ—Ç, \${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\`;
}
      `.trim()

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000))

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = {
        code,
        language,
        executionTime: new Date().toISOString(),
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ COMPLETED
      await updateTaskStatus({
        task_id: taskId,
        status: TaskStatus.COMPLETED,
        result,
      })

      logger.info(`‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`, {
        result,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
      await sendTelegramNotification(
        `‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n` +
          `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
          `–¢–∏–ø: ${task.type}\n\n` +
          `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n` +
          `<pre><code>${language}\n${code}\n</code></pre>\n\n` +
          `–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º "${this.name}".`
      )

      return result
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ${task.id}`, {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        task_id: task.id,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ FAILED
      const taskId = (task.metadata?._originalId as string) || task.id
      await updateTaskStatus({
        task_id: taskId,
        status: TaskStatus.FAILED,
        result: {
          error: error instanceof Error ? error.message : String(error),
        },
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await sendTelegramNotification(
        `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏</b>\n\n` +
          `ID –∑–∞–¥–∞—á–∏: <code>${task.id}</code>\n` +
          `–¢–∏–ø: ${task.type}\n` +
          `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${error instanceof Error ? error.message : String(error)}`
      )

      throw error
    }
  },
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
 */
async function processAgentTasks() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await sendTelegramNotification(
      'üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞</b>'
    )

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤
    const router = createAgentRouter({
      mcpService: {
        // –ü—É—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      },
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    router.registerAgent(codeGenerationAgent)

    logger.info('‚úÖ –ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', {
      agents: router.getAgents().map(a => a.name),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
    await sendTelegramNotification(
      `‚úÖ <b>–ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n` +
        router
          .getAgents()
          .map(a => `ü§ñ ${a.name}`)
          .join('\n')
    )

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Supabase
    const nextTask = await getNextTask({
      telegram_id: TELEGRAM_ID,
      bot_name: BOT_NAME,
    })

    if (!nextTask) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      await sendTelegramNotification(
        '‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>'
      )
      return
    }

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      task_id: nextTask.id,
      type: nextTask.type,
      priority: nextTask.priority,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (nextTask.metadata && nextTask._originalId) {
      nextTask.metadata._originalId = nextTask._originalId
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agentState.tasks.set(nextTask.id, nextTask)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const taskToProcess = await router.getNextTaskToProcess(agentState)

    if (!taskToProcess) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
      await sendTelegramNotification(
        '‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>'
      )
      return
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const agent = await router.routeTask(taskToProcess, agentState)

    if (!agent) {
      logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏', {
        task_id: taskToProcess.id,
        type: taskToProcess.type,
      })

      await sendTelegramNotification(
        `‚ö†Ô∏è <b>–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏</b>\n\n` +
          `ID –∑–∞–¥–∞—á–∏: <code>${taskToProcess.id}</code>\n` +
          `–¢–∏–ø: ${taskToProcess.type}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${taskToProcess.description}`
      )
      return
    }

    logger.info('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏', {
      agent: agent.name,
      task_id: taskToProcess.id,
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    await agent.handle(taskToProcess, agentState)

    logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await sendTelegramNotification(
      '‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>'
    )
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    await sendTelegramNotification(
      `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á</b>\n\n` +
        `–°–æ–æ–±—â–µ–Ω–∏–µ: ${error instanceof Error ? error.message : String(error)}`
    )
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á
processAgentTasks()
  .then(() => {
    logger.info('‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch(error => {
    logger.error('‚ùå –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
