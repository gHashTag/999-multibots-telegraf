/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ avatars
 * –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 */

import { supabase } from '../core/supabase/client'

async function checkAllBots() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ë–û–¢–û–í –ò –ê–ú–ë–ê–°–°–ê–î–û–†–û–í')
  console.log('='.repeat(60))

  try {
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ avatars –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    const { data: allAvatars, error: avatarsError } = await supabase
      .from('avatars')
      .select('telegram_id, group, bot_name, created_at')
      .order('group', { ascending: true })

    if (avatarsError) throw avatarsError

    console.log(`\nüìä –í–°–ï–ì–û –ó–ê–ü–ò–°–ï–ô –í –¢–ê–ë–õ–ò–¶–ï AVATARS: ${allAvatars.length}`)
    console.log('='.repeat(60))

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const groupedByGroup = new Map<
      string,
      Array<{ telegram_id: string; bot_name: string; created_at: string }>
    >()

    allAvatars.forEach(avatar => {
      const group = avatar.group
      if (!groupedByGroup.has(group)) {
        groupedByGroup.set(group, [])
      }
      groupedByGroup.get(group)!.push({
        telegram_id: avatar.telegram_id.toString(),
        bot_name: avatar.bot_name,
        created_at: avatar.created_at,
      })
    })

    console.log('\nüë• –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ê–ú–ë–ê–°–°–ê–î–û–†–û–í –ò –ò–• –ë–û–¢–û–í:')
    console.log('-'.repeat(60))

    let totalBots = 0
    Array.from(groupedByGroup.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .forEach(([group, bots], index) => {
        const telegram_id = bots[0].telegram_id
        console.log(`\n${index + 1}. üë§ –ì–†–£–ü–ü–ê: ${group}`)
        console.log(`   üìû Telegram ID: ${telegram_id}`)
        console.log(`   ü§ñ –ë–æ—Ç—ã (${bots.length}):`)

        bots.forEach((bot, botIndex) => {
          console.log(`      ${botIndex + 1}. ${bot.bot_name}`)
          totalBots++
        })
      })

    console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`)
    console.log(`üë• –í—Å–µ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤: ${groupedByGroup.size}`)
    console.log(`ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: ${totalBots}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Play-on –±–æ—Ç
    const playOnBots = allAvatars.filter(
      avatar =>
        avatar.bot_name.toLowerCase().includes('play') ||
        avatar.group.toLowerCase().includes('play')
    )

    if (playOnBots.length > 0) {
      console.log(`\nüéÆ –ù–ê–ô–î–ï–ù–´ PLAY-ON –ë–û–¢–´:`)
      console.log('-'.repeat(40))
      playOnBots.forEach(bot => {
        console.log(`‚Ä¢ –ì—Ä—É–ø–ø–∞: ${bot.group}`)
        console.log(`  –ë–æ—Ç: ${bot.bot_name}`)
        console.log(`  ID: ${bot.telegram_id}`)
        console.log('')
      })
    } else {
      console.log(`\n‚ùå PLAY-ON –ë–û–¢–´ –ù–ï –ù–ê–ô–î–ï–ù–´!`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å telegram_id
    const uniqueIds = new Set(allAvatars.map(a => a.telegram_id.toString()))
    console.log(`\nüî¢ –£–ù–ò–ö–ê–õ–¨–ù–´–• TELEGRAM_ID: ${uniqueIds.size}`)

    if (uniqueIds.size < allAvatars.length) {
      console.log(`‚ö†Ô∏è –ï–°–¢–¨ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø ID!`)

      // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const idCounts = new Map<string, number>()
      allAvatars.forEach(avatar => {
        const id = avatar.telegram_id.toString()
        idCounts.set(id, (idCounts.get(id) || 0) + 1)
      })

      console.log('\n–î–£–ë–õ–ò–ö–ê–¢–´:')
      idCounts.forEach((count, id) => {
        if (count > 1) {
          const duplicates = allAvatars.filter(
            a => a.telegram_id.toString() === id
          )
          console.log(`\nID ${id} (${count} –∑–∞–ø–∏—Å–µ–π):`)
          duplicates.forEach(dup => {
            console.log(`  ‚Ä¢ ${dup.group} - ${dup.bot_name}`)
          })
        }
      })
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫
checkAllBots()
  .then(() => {
    console.log('\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
