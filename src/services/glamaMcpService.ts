import axios from 'axios'
import { logger } from '@/utils/logger'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Glama MCP API
const GLAMA_MCP_API_URL = 'https://glama.ai/api/mcp/v1'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–µ—Ä–∞ Glama MCP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
 */
interface McpServer {
  id: string
  name: string
  description: string
  repository?: {
    url: string
  }
  url: string
  tools: any[]
  attributes: any[]
  environmentVariablesJsonSchema?: {
    properties: Record<string, any>
    type: string
    required: string[]
  }
  spdxLicense?: {
    name: string
    url: string
  } | null
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ API —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
 */
interface McpServersResponse {
  servers: McpServer[]
  pageInfo: {
    endCursor: string
    hasNextPage: boolean
    hasPreviousPage: boolean
    startCursor: string
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Glama MCP API
 */
export class GlamaMcpService {
  private readonly apiClient = axios.create({
    baseURL: GLAMA_MCP_API_URL,
    headers: {
      Authorization: `Bearer ${process.env.GLAMA_API_KEY}`,
      'Content-Type': 'application/json',
    },
  })

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
   */
  async getServers(): Promise<McpServer[]> {
    try {
      logger.info({
        message: 'üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP',
      })

      const response = await this.apiClient.get<McpServersResponse>('/servers')

      logger.info({
        message: '‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP',
        count: response.data.servers?.length || 0,
      })

      return response.data.servers || []
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP',
        error: error.message,
        url: `${GLAMA_MCP_API_URL}/servers`,
        status: error.response?.status,
        responseData: error.response?.data,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Glama MCP: ${error.message}`
      )
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø–æ ID
   */
  async getServerById(serverId: string): Promise<McpServer> {
    try {
      logger.info({
        message: 'üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP',
        serverId,
      })

      const response = await this.apiClient.get<McpServer>(
        `/servers/${serverId}`
      )

      logger.info({
        message: '‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP',
        serverId,
        serverName: response.data.name,
      })

      return response.data
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP',
        serverId,
        error: error.message,
        url: `${GLAMA_MCP_API_URL}/servers/${serverId}`,
        status: error.response?.status,
        responseData: error.response?.data,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Glama MCP: ${error.message}`
      )
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const glamaMcpService = new GlamaMcpService()
