import { INNGEST_EVENT_KEY } from '@/config'
import { supabase } from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'
import { TelegramId } from '@/interfaces/telegram.interface'

interface InngestError extends Error {
  message: string
  code?: string
  status?: number
}

interface FetchUsersOptions {
  bot_name?: string
  test_mode?: boolean
  test_telegram_id?: string
  sender_telegram_id?: string
}

interface BroadcastOptions {
  bot_name?: string
  sender_telegram_id?: string
  test_mode?: boolean
  test_telegram_id?: string
}

interface BroadcastResult {
  success: boolean
  successCount: number
  errorCount: number
  users?: any[]
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–≤–∞—Ç–∞—Ä–∞
// –ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç avatarService
const isAvatarOwner = async (
  telegram_id: TelegramId,
  bot_name: string
): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data, error } = await supabase
      .from('users')
      .select('id, telegram_id, bot_name')
      .eq('telegram_id', telegram_id)
      .eq('bot_name', bot_name)
      .single()

    if (error || !data) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error checking user permissions',
        error: error?.message || 'User not found',
        telegram_id,
        bot_name,
      })
      return false
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id –∏ bot_name, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    return true
  } catch (error: unknown) {
    const err = error as Error
    logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤–∞—Ç–∞—Ä–∞:', {
      description: 'Exception checking avatar owner',
      telegram_id,
      bot_name,
      error: err.message || 'Unknown error',
    })
    return false
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Inngest
 */
export class InngestService {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ Hello World
   * @param data –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
   */
  static async sendHelloWorldEvent(data: Record<string, any> = {}) {
    try {
      console.log('üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest')

      if (!INNGEST_EVENT_KEY) {
        console.error(
          '‚ùå INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
        )
        throw new Error('INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á:',
        INNGEST_EVENT_KEY.substring(0, 10) + '...'
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(data, null, 2))

      try {
        const result = await inngest.send({
          name: 'test/hello.world',
          data: {
            message: 'Hello from Telegram Bot!',
            timestamp: new Date().toISOString(),
            ...data,
          },
        })

        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
        return result
      } catch (sendError: unknown) {
        const error = sendError as InngestError
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Inngest API:', error)
        throw new Error(
          `–û—à–∏–±–∫–∞ Inngest API: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      }
    } catch (error: unknown) {
      const err = error as InngestError
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è:', err)
      throw err
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
   * @param eventName –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @param data –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  static async sendEvent(eventName: string, data: Record<string, any> = {}) {
    try {
      console.log(`üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${eventName}" –≤ Inngest`)

      if (!INNGEST_EVENT_KEY) {
        console.error(
          '‚ùå INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
        )
        throw new Error('INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      if (!eventName) {
        console.error('‚ùå –ò–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        throw new Error('–ò–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
      }

      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á:',
        INNGEST_EVENT_KEY.substring(0, 10) + '...'
      )

      console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(data, null, 2))

      try {
        const result = await inngest.send({
          name: eventName,
          data: {
            timestamp: new Date().toISOString(),
            ...data,
          },
        })

        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
        return result
      } catch (sendError: unknown) {
        const error = sendError as InngestError
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Inngest API:', error)
        throw new Error(
          `–û—à–∏–±–∫–∞ Inngest API: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      }
    } catch (error: unknown) {
      const err = error as InngestError
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è:', err)
      throw err
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Inngest
   * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param textRu –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   * @param options –û–ø—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  static async startBroadcast(
    imageUrl: string | undefined,
    textRu: string,
    options: BroadcastOptions = {}
  ) {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Inngest')

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (options.bot_name && options.sender_telegram_id) {
        const isOwner = await isAvatarOwner(
          options.sender_telegram_id,
          options.bot_name
        )
        if (!isOwner) {
          logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
            description: 'Unauthorized broadcast attempt',
            sender_telegram_id: options.sender_telegram_id,
            bot_name: options.bot_name,
          })
          throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞')
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ broadcast.start –≤ Inngest
      return await InngestService.sendEvent('broadcast.start', {
        imageUrl,
        textRu,
        options,
      })
    } catch (error: unknown) {
      const err = error as Error
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', err)
      throw err
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  static async checkOwnerPermissions(
    telegram_id: TelegramId,
    bot_name: string
  ): Promise<BroadcastResult> {
    try {
      const isOwner = await isAvatarOwner(telegram_id, bot_name)
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Unauthorized broadcast attempt',
          telegram_id,
          bot_name,
        })
        return {
          success: false,
          successCount: 0,
          errorCount: 0,
        }
      }
      return { success: true, successCount: 0, errorCount: 0 }
    } catch (error: unknown) {
      const err = error as Error
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:', {
        description: 'Error checking permissions',
        error: err.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  static async fetchUsers(
    options: FetchUsersOptions
  ): Promise<BroadcastResult> {
    const { bot_name, test_mode, test_telegram_id, sender_telegram_id } =
      options

    try {
      if (test_mode) {
        const testId = test_telegram_id || sender_telegram_id || '144022504'
        const users = bot_name
          ? [{ telegram_id: testId, bot_name }]
          : await supabase
              .from('users')
              .select('telegram_id, bot_name')
              .eq('telegram_id', testId)
              .single()
              .then(({ data }) => (data ? [data] : []))

        return { success: true, successCount: 0, errorCount: 0, users }
      }

      let query = supabase.from('users').select('telegram_id, bot_name')
      if (bot_name) {
        query = query.eq('bot_name', bot_name)
      }

      const { data: users, error } = await query
      if (error) {
        throw error
      }

      return {
        success: true,
        successCount: 0,
        errorCount: 0,
        users: users || [],
      }
    } catch (error: unknown) {
      const err = error as Error
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', {
        description: 'Error fetching users',
        error: err.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
        users: [],
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  static async getBotInstance(botName: string) {
    try {
      const bot = getBotByName(botName)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }
      return bot
    } catch (error: unknown) {
      const err = error as Error
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞:', {
        description: 'Error getting bot instance',
        error: err.message,
        botName,
      })
      throw err
    }
  }
}

export { inngest }
