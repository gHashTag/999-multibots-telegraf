import { Inngest } from 'inngest'
import { INNGEST_EVENT_KEY } from '@/config'

console.log('üìö Initializing Inngest Service')
console.log('üîë INNGEST_EVENT_KEY available:', !!INNGEST_EVENT_KEY)
if (INNGEST_EVENT_KEY) {
  console.log(
    'üîë INNGEST_EVENT_KEY first 10 chars:',
    INNGEST_EVENT_KEY.substring(0, 10) + '...'
  )
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Inngest
const inngestInstance = new Inngest({
  id: 'neuro-blogger',
  eventKey: INNGEST_EVENT_KEY || '',
})

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Inngest
 */
export class InngestService {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ Hello World
   * @param data –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
   */
  static async sendHelloWorldEvent(data: Record<string, any> = {}) {
    try {
      console.log('üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest')

      if (!INNGEST_EVENT_KEY) {
        console.error(
          '‚ùå INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
        )
        throw new Error('INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á:',
        INNGEST_EVENT_KEY.substring(0, 10) + '...'
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(data, null, 2))

      try {
        const result = await inngestInstance.send({
          name: 'test/hello.world',
          data: {
            message: 'Hello from Telegram Bot!',
            timestamp: new Date().toISOString(),
            ...data,
          },
        })

        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
        return result
      } catch (sendError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Inngest API:', sendError)
        throw new Error(
          `–û—à–∏–±–∫–∞ Inngest API: ${sendError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      }
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è:', error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
   * @param eventName –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @param data –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  static async sendEvent(eventName: string, data: Record<string, any> = {}) {
    try {
      console.log(`üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${eventName}" –≤ Inngest`)

      if (!INNGEST_EVENT_KEY) {
        console.error(
          '‚ùå INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
        )
        throw new Error('INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      if (!eventName) {
        console.error('‚ùå –ò–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        throw new Error('–ò–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
      }

      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á:',
        INNGEST_EVENT_KEY.substring(0, 10) + '...'
      )

      console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(data, null, 2))

      try {
        const result = await inngestInstance.send({
          name: eventName,
          data: {
            timestamp: new Date().toISOString(),
            ...data,
          },
        })

        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
        return result
      } catch (sendError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Inngest API:', sendError)
        throw new Error(
          `–û—à–∏–±–∫–∞ Inngest API: ${sendError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      }
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è:', error)
      throw error
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const inngest = inngestInstance
