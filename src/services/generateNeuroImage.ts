import { generateNeuroPhotoDirect } from './generateNeuroPhotoDirect'
import { isRussian } from '@/helpers/language'
import { MyContext, ModelUrl } from '@/interfaces'
import { logger } from '@/utils/logger'
import { InputMediaPhoto } from 'telegraf/types'
import { Markup } from 'telegraf'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
interface GenerateNeuroImageResult {
  success: boolean
  urls?: string[]
  data?: any // –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ data –æ—Ç generateNeuroPhotoDirect
  error?: string
  message?: string // –ü–æ–ª–µ message —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ generateNeuroPhotoDirect
}

export async function generateNeuroImage(
  prompt: string,
  model_url: ModelUrl,
  numImages: number,
  telegram_id: string,
  ctx: MyContext,
  botName: string
): Promise<GenerateNeuroImageResult | null> {
  if (!ctx.session.prompt) {
    throw new Error('Prompt not found')
  }

  // --- DEBUG LOG ---
  // console.log(
  //   '>>> generateNeuroImage: Called with',
  //   {
  //     telegram_id: telegram_id,
  //     numImages: numImages,
  //     promptSample: prompt ? prompt.substring(0, 70) + '...' : 'null',
  //     model_url: model_url,
  //     botName: botName,
  //     userModelFromSession: ctx.session.userModel ? String(ctx.session.userModel).substring(0,70) + '...' : 'null'
  //   }
  // );
  // --- END DEBUG LOG ---

  if (!ctx.session.userModel) {
    throw new Error('User model not found')
  }

  if (!numImages) {
    throw new Error('Num images not found')
  }

  console.log('Starting generateNeuroImage with:', {
    prompt,
    model_url,
    numImages,
    telegram_id,
    botName,
    userModelFromSession: ctx.session.userModel
      ? String(ctx.session.userModel).substring(0, 70) + '...'
      : 'null',
  })

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ generateNeuroPhotoDirect
    const directResult = await generateNeuroPhotoDirect(
      prompt,
      model_url,
      numImages,
      telegram_id,
      ctx as MyContext,
      botName
      // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏—é disable_telegram_sending, –µ—Å–ª–∏ –º—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    )
    console.log(directResult, 'directResult')

    if (
      directResult &&
      directResult.success &&
      directResult.urls &&
      directResult.urls.length > 0
    ) {
      for (const url of directResult.urls) {
        try {
          await ctx.replyWithPhoto(url)
          logger.info({
            message: `‚úÖ [generateNeuroImage] –§–æ—Ç–æ (${url}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤—ã–∑–æ–≤ Telegram API –≤—ã–ø–æ–ª–Ω–µ–Ω)`,
            telegram_id: telegram_id,
            url: url,
          })
        } catch (photoError: any) {
          logger.error({
            message: `‚ùå [generateNeuroImage] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (${url}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
            error: {
              message: photoError.message,
              stack: photoError.stack,
              description: photoError.description, // Telegraf errors often have this
              code: photoError.code, // And this
            },
            telegram_id: telegram_id,
            prompt: prompt,
            url: url,
          })
          // –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç.
          // –ï—Å–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è, –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å —ç—Ç–æ.
        }
      }
      // –ï—Å–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–∏–ª–∏ –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã)
      logger.info({
        message: '‚úÖ [generateNeuroImage] –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        description: 'Photo sent successfully to user',
        telegram_id,
        urls: directResult.urls,
      })

      // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –ö–õ–ê–í–ò–ê–¢–£–†–´
      await ctx.telegram.sendMessage(
        telegram_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ ctx.reply, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã —Å —Ç–µ–∫—É—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å—Ü–µ–Ω—ã
        isRussian(ctx)
          ? '–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.'
          : 'Your images have been generated!\n\nIf you want to generate more, select the number of images in the menu below or enter a new prompt.',
        Markup.keyboard([
          [
            Markup.button.text('1Ô∏è‚É£'),
            Markup.button.text('2Ô∏è‚É£'),
            Markup.button.text('3Ô∏è‚É£'),
            Markup.button.text('4Ô∏è‚É£'),
          ],
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", –∞ "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç" —É–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É –ì—É—Ä—É
          [
            Markup.button.text(
              isRussian(ctx) ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt'
            ),
          ],
          [
            Markup.button.text(
              isRussian(ctx) ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size'
            ),
          ],
          [
            Markup.button.text(
              isRussian(ctx) ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'
            ),
          ],
        ]).resize()
      )
    } else if (directResult && !directResult.success) {
      logger.warn({
        message:
          '‚ö†Ô∏è [generateNeuroImage] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É—Å–ø–µ—à–Ω–æ, —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        description: 'Generation was unsuccessful, photo not sent',
        telegram_id,
        directResult,
      })
    }

    return directResult
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)

    if (ctx.reply) {
      await ctx.reply(
        isRussian(ctx)
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred during image generation. Please try again later.'
      )
    }

    return null
  }
}
