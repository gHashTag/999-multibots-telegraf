import { v4 as uuidv4 } from 'uuid'
import { isRussian } from '@/helpers'
import { Context } from 'telegraf'
import { logger } from '@/utils/logger'
import { replicate } from '@/core/replicate'
import { processApiResponse } from '@/helpers/processApiResponse'
import { saveFileLocally } from '@/helpers'
import { calculateModeCost, ModeEnum } from '@/price/helpers'
import { inngest } from '@/inngest-functions/clients'
import path from 'path'
import fs from 'fs'
import { API_URL } from '@/config'
import { savePrompt } from '@/core/supabase/savePrompt'
import { getAspectRatio } from '@/core/supabase/ai'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { pulse } from '@/helpers/pulse'
import { getBotByName } from '@/core/bot'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Inngest
 */
export async function generateNeuroImage(
  prompt: string,
  model_url: string,
  numImages: number | string,
  telegram_id: string,
  ctx: Context,
  botName: string
): Promise<void> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!prompt) {
    throw new Error('Prompt not found')
  }

  if (!model_url) {
    throw new Error('Model URL not found')
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numImages –≤ —á–∏—Å–ª–æ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
  const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

  if (isNaN(validNumImages)) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ numImages:', {
      description: 'Invalid numImages value',
      received_value: numImages,
      received_type: typeof numImages,
    })
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
  try {
    await ctx.reply(
      isRussian(ctx)
        ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
    )
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id,
    })
  }

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      description: 'Starting direct image generation',
      prompt,
      model_url,
      numImages: validNumImages,
      telegram_id,
      botName,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getUserByTelegramIdString(telegram_id)
    if (!user) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found',
        telegram_id,
        botName,
      })
      await ctx.reply(
        isRussian(ctx)
          ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
          : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
      )
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (user.level === 1) {
      await updateUserLevelPlusOne(telegram_id, user.level)
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const cost = calculateModeCost({
      mode: ModeEnum.NeuroPhoto,
      steps: validNumImages,
    })

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = `neuro-photo-payment-${telegram_id}-${Date.now()}-${uuidv4().slice(
      0,
      8
    )}`

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    const paymentOperation = await inngest.send({
      id: operationId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      name: 'payment/process',
      data: {
        telegram_id,
        amount: Math.abs(cost.stars), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
        type: 'money_expense',
        description: `Payment for generating ${validNumImages} image${
          validNumImages === 1 ? '' : 's'
        } with prompt: ${prompt.substring(0, 30)}...`,
        bot_name: botName,
        operation_id: operationId, // –ü–µ—Ä–µ–¥–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        service_type: ModeEnum.NeuroPhoto,
        metadata: {
          service_type: ModeEnum.NeuroPhoto,
          prompt_preview: prompt.substring(0, 50),
          num_images: validNumImages,
          cost_per_image: cost.stars,
        },
      },
    })

    logger.info('üí∏ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
      description: 'Payment sent for processing',
      telegram_id,
      amount: -Math.abs(cost.stars),
      payment_id: paymentOperation.ids?.[0] || 'unknown',
    })

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å–ø–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const aspect_ratio = await getAspectRatio(telegram_id)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const generatedImages = []
    const is_ru = isRussian(ctx)
    const username = ctx.message?.from?.username
    let failedAttempts = 0

    for (let i = 0; i < validNumImages; i++) {
      try {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const botResult = getBotByName(botName)
        if (!botResult?.bot) {
          throw new Error('Bot instance not found')
        }
        const { bot } = botResult

        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${validNumImages}`
            : `‚è≥ Generating image ${i + 1} of ${validNumImages}`
        )

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const input = {
          prompt: `Fashionable: ${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
          negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
          num_inference_steps: 40,
          guidance_scale: 3,
          lora_scale: 1,
          megapixels: '1',
          output_quality: 80,
          prompt_strength: 0.8,
          extra_lora_scale: 1,
          go_fast: false,
          ...(aspect_ratio === '1:1'
            ? { width: 1024, height: 1024 }
            : aspect_ratio === '16:9'
            ? { width: 1368, height: 768 }
            : aspect_ratio === '9:16'
            ? { width: 768, height: 1368 }
            : { width: 1024, height: 1024 }),
          sampler: 'flowmatch',
          num_outputs: 1,
          aspect_ratio,
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º model_url –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Replicate
        // –¢–∞–∫ –∫–∞–∫ —Ç–∏–ø –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "namespace/model" –∏–ª–∏ "namespace/model:version"
        const formattedModelUrl = model_url.includes('/')
          ? (model_url as `${string}/${string}`)
          : (`replicate/${model_url}` as `${string}/${string}`)

        const output = await replicate.run(formattedModelUrl, { input })
        const imageUrl = await processApiResponse(output)

        if (!imageUrl) throw new Error('Image generation failed')

        const localPath = await saveFileLocally(
          telegram_id,
          imageUrl,
          'neuro-photo',
          '.jpeg'
        )

        const prompt_id = await savePrompt(
          prompt,
          model_url,
          ModeEnum.NeuroPhoto,
          imageUrl,
          telegram_id,
          'COMPLETED'
        )

        if (!prompt_id) {
          logger.error('Failed to save prompt')
          throw new Error('Prompt save failed')
        }

        await pulse(
          localPath,
          prompt,
          `/${model_url}`,
          telegram_id,
          username || '',
          is_ru,
          botName
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.telegram.sendPhoto(telegram_id, {
          source: fs.createReadStream(localPath),
        })

        generatedImages.push(
          `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
            localPath
          )}`
        )
      } catch (genError) {
        failedAttempts++
        logger.error({
          message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: 'Error generating single image',
          attempt: i + 1,
          total_attempts: validNumImages,
          error: genError instanceof Error ? genError.message : 'Unknown error',
          telegram_id,
        })

        // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        try {
          const refundAmount = calculateModeCost({
            mode: ModeEnum.NeuroPhoto,
            steps: 1, // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          }).stars

          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
          const refundOperationId = `refund-${telegram_id}-${Date.now()}-${uuidv4().slice(
            0,
            8
          )}`

          await inngest.send({
            id: refundOperationId,
            name: 'payment/process',
            data: {
              telegram_id,
              amount: refundAmount, // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              type: 'refund',
              description: `–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${
                i + 1
              }/${validNumImages}`,
              bot_name: botName,
              operation_id: refundOperationId, // –ü–µ—Ä–µ–¥–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
              metadata: {
                service_type: ModeEnum.NeuroPhoto,
                error:
                  genError instanceof Error
                    ? genError.message
                    : 'Unknown error',
                attempt: i + 1,
                total_attempts: validNumImages,
              },
            },
          })

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const botResult = getBotByName(botName)
          if (botResult?.bot) {
            const { bot } = botResult
            const message = is_ru
              ? `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${
                  i + 1
                }/${validNumImages}. ${refundAmount} ‚≠êÔ∏è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
              : `‚ùå Failed to generate image ${
                  i + 1
                }/${validNumImages}. ${refundAmount} ‚≠êÔ∏è have been refunded.`

            await bot.telegram.sendMessage(telegram_id, message)
          }
        } catch (refundError) {
          logger.error({
            message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
            error:
              refundError instanceof Error
                ? refundError.message
                : 'Unknown error',
            originalError:
              genError instanceof Error ? genError.message : 'Unknown error',
            telegram_id,
            attempt: i + 1,
          })
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (failedAttempts === validNumImages) {
      throw new Error('All image generation attempts failed')
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const botResult = getBotByName(botName)
    if (botResult?.bot) {
      const { bot } = botResult

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const message = is_ru
        ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! Ô∏è`
        : `Your images generated!`

      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const keyboard = {
        reply_markup: {
          keyboard: [
            [{ text: '1Ô∏è‚É£' }, { text: '2Ô∏è‚É£' }, { text: '3Ô∏è‚É£' }, { text: '4Ô∏è‚É£' }],
            [
              { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
              { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
            ],
            [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      }

      await bot.telegram.sendMessage(telegram_id, message, keyboard)
    }

    logger.info('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
      description: 'Image generation completed successfully',
      telegram_id,
      numImages: generatedImages.length,
    })
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      description: 'Critical error in image generation',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : null,
      telegram_id,
    })

    try {
      const botResult = getBotByName(botName)
      if (botResult?.bot) {
        const { bot } = botResult
        await bot.telegram.sendMessage(
          telegram_id,
          isRussian(ctx)
            ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            : 'üòî An error occurred while generating the image. Please try again later.'
        )
      }
    } catch (msgError) {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', {
        description: 'Failed to send error message',
        error: msgError instanceof Error ? msgError.message : 'Unknown error',
        telegram_id,
      })
    }
  }
}
