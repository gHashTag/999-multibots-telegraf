import { isRussian } from '@/helpers'
import { Context } from 'telegraf'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { inngest } from '@/inngest-functions/clients'
import { generateNeuroPhotoDirect } from './generateNeuroPhotoDirect'
import { MyContext } from '@/interfaces'
import { isDev, isTest } from '@/config'

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–π—Ä–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Inngest
 * –° —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest
 */
export async function generateNeuroImage(
  prompt: string,
  model_url: string,
  numImages: number | string,
  telegram_id: string,
  ctx: Context,
  botName: string
): Promise<void> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!prompt) {
    throw new Error('Prompt not found')
  }

  if (!model_url) {
    throw new Error('Model URL not found')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
  const isCorrectEnvironment = verifyEnvironmentAndBot(botName)

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numImages –≤ —á–∏—Å–ª–æ
  const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

  if (isNaN(validNumImages)) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ numImages:', {
      description: 'Invalid numImages value',
      received_value: numImages,
      received_type: typeof numImages,
      environment: isDev ? 'development' : isTest ? 'test' : 'production',
    })
  }

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const requestId = `np-${telegram_id}-${Date.now()}-${uuidv4().substring(0, 8)}`

  // –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  const eventData = {
    prompt,
    model_url,
    numImages: validNumImages,
    telegram_id,
    username: ctx.message?.from?.username || '',
    is_ru: isRussian(ctx),
    bot_name: botName,
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
  logger.info('üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:', {
    description: 'Preparing neuro photo generation request',
    request_id: requestId,
    telegram_id,
    prompt: prompt.substring(0, 30) + '...',
    model_url: model_url.substring(0, 30) + '...',
    numImages: validNumImages,
    bot_name: botName,
    is_ru: isRussian(ctx),
    environment: isDev ? 'development' : isTest ? 'test' : 'production',
  })

  try {
    // –ó–¥–µ—Å—å –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest, –Ω–æ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º fallback –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    let useDirectGeneration = false

    try {
      // –ü–ª–∞–Ω A: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest
      logger.info('üîÑ –ü–ª–∞–Ω A: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest', {
        description: 'Trying to use Inngest (Plan A)',
        request_id: requestId,
        environment: isDev ? 'development' : isTest ? 'test' : 'production',
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç —á–µ—Ä–µ–∑ Inngest
      // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
      if (isCorrectEnvironment) {
        await ctx.reply(
          isRussian(ctx)
            ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
        )
      } else {
        logger.info(
          '‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ/–±–æ—Ç)',
          {
            description: 'Skipping message sending (wrong environment/bot)',
            request_id: requestId,
            environment: isDev ? 'development' : isTest ? 'test' : 'production',
            bot_name: botName,
          }
        )
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ neuro/photo.generate
      const response = await inngest.send({
        id: requestId,
        name: 'neuro/photo.generate',
        data: eventData,
      })

      logger.info('üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Inngest:', {
        description: 'Image generation request sent via Inngest',
        request_id: requestId,
        prompt: prompt.substring(0, 30) + '...',
        model_url: model_url.substring(0, 30) + '...',
        numImages: validNumImages,
        telegram_id,
        botName,
        response: JSON.stringify(response || {}),
        environment: isDev ? 'development' : isTest ? 'test' : 'production',
      })
    } catch (inngestError) {
      // –ï—Å–ª–∏ Inngest –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      useDirectGeneration = true

      logger.info('‚ö†Ô∏è –ü–ª–∞–Ω B: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', {
        description: 'Switching to direct generation (Plan B)',
        error:
          inngestError instanceof Error
            ? inngestError.message
            : String(inngestError),
        request_id: requestId,
        environment: isDev ? 'development' : isTest ? 'test' : 'production',
      })
    }

    // –ï—Å–ª–∏ Inngest –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if (useDirectGeneration) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
      if (isCorrectEnvironment) {
        await ctx.reply(isRussian(ctx) ? '‚öôÔ∏è...' : '‚öôÔ∏è...')
      } else {
        logger.info(
          '‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ/–±–æ—Ç)',
          {
            description: 'Skipping message sending (wrong environment/bot)',
            request_id: requestId,
            environment: isDev ? 'development' : isTest ? 'test' : 'production',
            bot_name: botName,
          }
        )
      }

      logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        description: 'Starting direct generation',
        request_id: requestId,
        telegram_id,
        environment: isDev ? 'development' : isTest ? 'test' : 'production',
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ generateNeuroPhotoDirect
      const directResult = await generateNeuroPhotoDirect(
        prompt,
        model_url,
        validNumImages,
        telegram_id,
        ctx as MyContext,
        botName,
        // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏—é disable_telegram_sending, –µ—Å–ª–∏ –º—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        { disable_telegram_sending: !isCorrectEnvironment }
      )

      logger.info('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        description: 'Direct generation result',
        request_id: requestId,
        success: directResult?.success,
        urls_count: directResult?.urls?.length || 0,
        environment: isDev ? 'development' : isTest ? 'test' : 'production',
      })

      // –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
      if (!directResult?.success && isCorrectEnvironment) {
        await ctx.reply(
          isRussian(ctx)
            ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            : '‚ùå Failed to generate image. Please try again later.'
        )
      }
    }
  } catch (error) {
    const typedError = error as Error
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
      description: 'Critical error during generation',
      request_id: requestId,
      error: typedError.message,
      stack: typedError.stack,
      telegram_id,
      prompt: prompt.substring(0, 30) + '...',
      environment: isDev ? 'development' : isTest ? 'test' : 'production',
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if (isCorrectEnvironment) {
      await ctx.reply(
        isRussian(ctx)
          ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'üòî A critical error occurred during generation. Please try again later.'
      )
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–æ—Ç–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
 */
function verifyEnvironmentAndBot(botName: string): boolean {
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  if (isDev) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const devBotName = process.env.TEST_BOT_NAME || ''

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∏–º—è –±–æ—Ç–∞ —Å TEST_BOT_NAME
    const isCorrectBot = botName === devBotName

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', {
      description: 'Checking development bot',
      dev_bot_name: devBotName,
      current_bot_name: botName,
      is_correct_bot: isCorrectBot,
    })

    return isCorrectBot
  }

  // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  if (isTest) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const testBotName = process.env.TEST_BOT_NAME || ''

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∏–º—è –±–æ—Ç–∞ —Å TEST_BOT_NAME
    const isCorrectBot = botName === testBotName

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      description: 'Checking test bot',
      test_bot_name: testBotName,
      current_bot_name: botName,
      is_correct_bot: isCorrectBot,
    })

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –±–æ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å TEST_BOT_NAME
    return isCorrectBot
  }

  // –í —Ä–µ–∂–∏–º–µ production —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  const testBotName = process.env.TEST_BOT_NAME || ''
  const isTestBot = botName === testBotName

  if (isTestBot) {
    logger.info('‚ö†Ô∏è –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ production:', {
      description: 'Preventing test bot from sending in production',
      test_bot_name: testBotName,
      current_bot_name: botName,
      is_test_bot: isTestBot,
    })
    return false
  }

  return true
}
