import { isRussian } from '@/helpers'
import { Context } from 'telegraf'
import { Logger as logger } from '@/utils/logger'

import { inngest } from '@/inngest-functions/clients'
import { v4 as uuidv4 } from 'uuid'

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–π—Ä–æ–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Inngest
 */
export async function generateNeuroImage(
  prompt: string,
  model_url: string,
  numImages: number | string,
  telegram_id: string,
  ctx: Context,
  botName: string
): Promise<void> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!prompt) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç', {
      description: 'Prompt not found',
      telegram_id,
    })
    throw new Error('Prompt not found')
  }

  if (!model_url) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –º–æ–¥–µ–ª–∏', {
      description: 'Model URL not found',
      telegram_id,
    })
    throw new Error('Model URL not found')
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numImages –≤ —á–∏—Å–ª–æ
  const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

  if (isNaN(validNumImages)) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ numImages:', {
      description: 'Invalid numImages value',
      received_value: numImages,
      received_type: typeof numImages,
    })
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    await ctx.reply(
      isRussian(ctx)
        ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
    )

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
    const requestId = `neuro-photo-${uuidv4()}`

    logger.info('üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Inngest –∑–∞–ø—Ä–æ—Å–∞:', {
      description: 'Preparing Inngest request',
      event_id: requestId,
      endpoint:
        process.env.NODE_ENV === 'development'
          ? 'http://localhost:8288/e/dev-key'
          : undefined,
      telegram_id,
      model_url: model_url.substring(0, 50) + '...',
      numImages: validNumImages,
      prompt: prompt.substring(0, 30) + '...',
      is_ru: isRussian(ctx),
      bot_name: botName,
      timestamp: new Date().toISOString(),
    })

    const eventData = {
      prompt,
      model_url,
      numImages: validNumImages,
      telegram_id,
      username: ctx.message?.from?.username || '',
      is_ru: isRussian(ctx),
      bot_name: botName,
    }

    logger.info('üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
      description: 'Event data prepared',
      event_id: requestId,
      data: JSON.stringify(eventData),
      timestamp: new Date().toISOString(),
    })

    // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ neuro/photo.generate
    const response = await inngest.send({
      id: requestId, // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
      name: 'neuro/photo.generate',
      data: eventData,
    })

    logger.info('üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', {
      description: 'Image generation request sent',
      event_id: requestId,
      prompt,
      model_url,
      numImages: validNumImages,
      telegram_id,
      botName,
      response: JSON.stringify(response || {}),
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:', {
      description: 'Error sending generation request',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id,
      timestamp: new Date().toISOString(),
    })

    await ctx.reply(
      isRussian(ctx)
        ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'üòî An error occurred while sending the request. Please try again later.'
    )
  }
}
