import { inngest } from '@/inngest-functions/clients'
import { isRussian } from '@/helpers/language'
import { ModelUrl } from '@/interfaces'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { Context } from 'telegraf'
import { TelegramId } from '@/interfaces/telegram.interface'
export async function generateNeuroImage(
  prompt: string,
  model_url: ModelUrl,
  numImages: number | string,
  telegram_id: TelegramId,
  ctx: Context,
  botName: string
): Promise<void> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!prompt) {
    throw new Error('Prompt not found')
  }

  if (!model_url) {
    throw new Error('Model URL not found')
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numImages –≤ —á–∏—Å–ª–æ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
  const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

  if (isNaN(validNumImages)) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ numImages:', {
      description: 'Invalid numImages value',
      received_value: numImages,
      received_type: typeof numImages,
    })
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    numImages = 1
  }

  const chatId = ctx.message?.chat?.id
  const messageId = ctx.message?.message_id

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Inngest:', {
    description: 'Starting neuro image generation via Inngest',
    prompt,
    model_url,
    numImages: validNumImages,
    numImages_type: typeof validNumImages,
    original_numImages: numImages,
    original_numImages_type: typeof numImages,
    telegram_id,
    botName,
    chat_id: chatId,
    message_id: messageId,
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UUID
    const uniqueId = `neuro-photo-${uuidv4()}`

    logger.info('üìù –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å ID:', {
      description: 'Creating event with ID',
      event_id: uniqueId,
      prompt_preview: prompt.substring(0, 30),
      timestamp: new Date().toISOString(),
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      prompt,
      model_url,
      numImages: validNumImages,
      telegram_id,
      username: ctx.message?.from?.username,
      is_ru: isRussian(ctx),
      bot_name: botName,
      chat_id: chatId,
      message_id: messageId,
    }

    logger.info('üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
      description: 'Event data prepared',
      event_data: JSON.stringify(eventData),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const response = await inngest.send({
      id: `neuro-photo-${botName}-${uuidv4()}`,
      name: 'neuro/photo.generate',
      data: eventData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest:', {
      description: 'Event successfully sent to Inngest',
      event_id: uniqueId,
      response: JSON.stringify(response),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    await ctx.reply(
      isRussian(ctx)
        ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
    )
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest:', {
      description: 'Error sending event to Inngest',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : null,
      telegram_id,
      chat_id: chatId,
      prompt_preview: prompt.substring(0, 30),
      timestamp: new Date().toISOString(),
    })

    try {
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
      const retryId = `neuro-photo-retry-${uuidv4()}`
      logger.info('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è:', {
        description: 'Retrying event sending',
        retry_id: retryId,
      })

      await inngest.send({
        id: retryId,
        name: 'neuro/photo.generate',
        data: {
          prompt,
          model_url,
          numImages: validNumImages,
          telegram_id,
          username: ctx.message?.from?.username,
          is_ru: isRussian(ctx),
          bot_name: botName,
          chat_id: chatId,
          message_id: messageId,
          is_retry: true,
        },
      })

      logger.info('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:', {
        description: 'Retry successful',
        retry_id: retryId,
      })

      await ctx.reply(
        isRussian(ctx)
          ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
          : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
      )
      return
    } catch (retryError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:', {
        description: 'Retry error',
        error:
          retryError instanceof Error
            ? retryError.message
            : 'Unknown retry error',
        stack: retryError instanceof Error ? retryError.stack : null,
      })
    }

    await ctx.reply(
      isRussian(ctx)
        ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'üòî An error occurred while sending the generation request. Please try again later.'
    )
  }
}
