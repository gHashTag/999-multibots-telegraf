import { inngest } from '@/core/inngest/clients'
import { v4 as uuidv4 } from 'uuid'

interface TextToSpeechResponse {
  success: boolean
  audioUrl?: string
  message?: string
}

export async function generateTextToSpeech(
  text: string,
  voice_id: string,
  telegram_id: number,
  username: string,
  isRu: boolean,
  botName: string
): Promise<TextToSpeechResponse> {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!text) {
      throw new Error('Text is required')
    }
    if (!username) {
      throw new Error('Username is required')
    }
    if (!telegram_id) {
      throw new Error('Telegram ID is required')
    }
    if (!voice_id) {
      throw new Error('Voice ID is required')
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–±—ã—Ç–∏—è
    console.log('üì£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è text-to-speech.requested:', {
      description: 'Sending text-to-speech.requested event',
      telegram_id,
      voice_id,
      text_length: text.length,
      username,
      is_ru: isRu,
      bot_name: botName,
    })

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventId = `tts-${telegram_id}-${Date.now()}-${uuidv4().substring(
      0,
      8
    )}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      id: eventId,
      name: 'text-to-speech.requested',
      data: {
        text,
        voice_id,
        telegram_id: telegram_id.toString(),
        username,
        is_ru: isRu,
        bot_name: botName,
      },
    })

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      description: 'Event successfully sent',
      event_id: eventId,
      telegram_id,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      success: true,
      message: isRu
        ? '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        : 'Speech generation request sent, please wait for the result',
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è text-to-speech:', {
      description: 'Error sending text-to-speech event',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    throw new Error(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å'
        : 'Error occurred while converting text to speech'
    )
  }
}
