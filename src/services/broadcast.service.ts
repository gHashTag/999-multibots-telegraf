import { TelegramId } from '@/interfaces/telegram.interface';
import axios, { AxiosResponse } from 'axios'
import { supabase } from '@/core/supabase'
import { isDev, SECRET_API_KEY, ELESTIO_URL, LOCAL_SERVER_URL } from '@/config'
import { Telegraf } from 'telegraf'

import { logger } from '@/utils/logger'
import { getBotByName } from '../core/bot'
import { avatarService } from './avatar.service'

export interface BroadcastResult {
  successCount: number
  errorCount: number
  reason?: string
  success?: boolean
  users?: any[]
  message?: string
  totalSent?: number
  totalFailed?: number
}

interface BroadcastTestRequest {
  imageUrl?: string
  videoFileId?: string
  textRu: string // –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  textEn: string // –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
  botName: string
  sender_telegram_id: TelegramId
  contentType: string // 'photo', 'video', 'text', 'post_link'
  postLink?: string
}

interface BroadcastTestResponse {
  success: boolean
  message: string
}

export interface BroadcastOptions {
  bot_name?: string // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
  sender_telegram_id?: string // Telegram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  test_mode?: boolean // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
  test_telegram_id?: string // ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  contentType?: 'photo' | 'video' | 'post_link' // –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  postLink?: string // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–ª—è —Ç–∏–ø–∞ 'post_link'
  videoFileId?: string // ID –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∏–ø–∞ 'video'
  textEn?: string // –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
}

export interface FetchUsersOptions {
  bot_name?: string
  test_mode?: boolean
  test_telegram_id?: string
  sender_telegram_id?: string
}

export const broadcastService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
  async getBotUsers(
    botName: string,
    ignoreActiveFlag = false
  ): Promise<string[]> {
    try {
      let query = supabase
        .from('users')
        .select('telegram_id')
        .eq('bot_name', botName)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (!ignoreActiveFlag) {
        query = query.eq('is_active', true)
        logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ üë•:', {
          description: 'Getting active bot users',
          botName,
        })
      } else {
        logger.info(
          '–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üë•:',
          {
            description: 'Getting all bot users ignoring active flag',
            botName,
          }
        )
      }

      const { data, error } = await query

      if (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ‚ùå:', {
          description: 'Error getting bot users',
          error: error.message,
          botName,
        })
        return []
      }

      const status = ignoreActiveFlag ? '–≤—Å–µ—Ö' : '–∞–∫—Ç–∏–≤–Ω—ã—Ö'
      logger.info(
        `–ù–∞–π–¥–µ–Ω–æ ${data.length} ${status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ${botName} üìä:`,
        {
          description: 'Found bot users',
          count: data.length,
          botName,
          ignoreActiveFlag,
        }
      )

      return data.map(user => user.telegram_id.toString())
    } catch (error) {
      logger.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ‚ö†Ô∏è:', {
        description: 'Unexpected error getting bot users',
        error: error.message || 'Unknown error',
        botName,
      })
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
  async getAllBotUsers(botName: string): Promise<string[]> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('telegram_id')
        .eq('bot_name', botName)

      if (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:', {
          description: 'Error getting all bot users',
          error: error.message,
          botName,
        })
        return []
      }

      logger.info(
        `–ù–∞–π–¥–µ–Ω–æ ${data.length} –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ${botName}`,
        {
          description: 'Found all bot users',
          count: data.length,
          botName,
        }
      )

      return data.map(user => user.telegram_id.toString())
    } catch (error) {
      logger.error(
        '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:',
        {
          description: 'Unexpected error getting all bot users',
          error: error.message || 'Unknown error',
          botName,
        }
      )
      return []
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  async updateUserStatusAfterFailure(
    botName: string,
    userId: string,
    errorMessage: string
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isUserDeactivated =
        errorMessage.includes('user is deactivated') ||
        errorMessage.includes('chat not found') ||
        errorMessage.includes('bot was blocked by the user')

      if (isUserDeactivated) {
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: ${errorMessage}`, {
          description: 'User is inactive',
          userId,
          botName,
          error: errorMessage,
        })

        // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ is_active

        // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error } = await supabase
          .from('users')
          .update({ is_active: false })
          .eq('bot_name', botName)
          .eq('telegram_id', userId)

        if (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            description: 'Error updating user status',
            error: error.message,
            userId,
            botName,
          })
        } else {
          logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π`, {
            description: 'User marked as inactive',
            userId,
            botName,
          })
        }
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error processing inactive user',
        error: error.message || 'Unknown error',
        userId,
        botName,
      })
    }
  },

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  async activateUser(botName: string, userId: string): Promise<void> {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ`, {
        description: 'User received message successfully',
        userId,
        botName,
      })

      const { error } = await supabase
        .from('users')
        .update({ is_active: true })
        .eq('bot_name', botName)
        .eq('telegram_id', userId)

      if (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Error activating user',
          error: error.message,
          userId,
          botName,
        })
      } else {
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
          description: 'User activated',
          userId,
          botName,
        })
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error activating user',
        error: error.message || 'Unknown error',
        userId,
        botName,
      })
    }
  },

  // –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ Telegram
  async sendBroadcastDirectly(
    botToken: string,
    imageUrl: string,
    text: string,
    userIds: string[],
    ownerTelegramId?: string,
    botName?: string
  ): Promise<BroadcastResult> {
    try {
      const bot = new Telegraf(botToken)
      let successCount = 0
      let failCount = 0

      logger.info(
        `–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
        {
          description: 'Starting direct broadcast',
          userCount: userIds.length,
          imageUrl,
        }
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ imageUrl file_id
      let useRawFileId = false
      if (!imageUrl.startsWith('http') && !imageUrl.includes('/')) {
        useRawFileId = true
        logger.info('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', {
          description: 'Using raw file_id for message sending',
          fileId: imageUrl,
        })
      }

      // –ï—Å–ª–∏ –Ω–µ file_id - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let validImageUrl = imageUrl

      if (!useRawFileId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º Telegram
        if (imageUrl.includes('api.telegram.org/file/bot/')) {
          try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞ –∏–∑ URL
            const urlParts = imageUrl.split('/')
            const fileId = urlParts[urlParts.length - 1]

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª—Å—è –ª–∏ fileId
            if (fileId && fileId.length > 5) {
              try {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API Telegram
                const fileInfo = await bot.telegram.getFile(fileId)

                if (fileInfo && fileInfo.file_path) {
                  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å —Ç–æ–∫–µ–Ω–æ–º
                  validImageUrl = `https://api.telegram.org/file/bot${botToken}/${fileInfo.file_path}`

                  logger.info('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:', {
                    description: 'Image URL fixed',
                    originalUrl: imageUrl,
                    newUrl: validImageUrl,
                  })
                } else {
                  throw new Error('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
              } catch (fileError) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ ID, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º file_id –Ω–∞–ø—Ä—è–º—É—é
                logger.warn(
                  '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id –Ω–∞–ø—Ä—è–º—É—é:',
                  {
                    description:
                      'Failed to get file info, trying direct file_id',
                    fileId,
                    error: fileError.message || 'Unknown error',
                  }
                )

                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ file_id –Ω–∞–ø—Ä—è–º—É—é
                useRawFileId = true
                validImageUrl = fileId
              }
            } else {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å fileId –∏–∑ URL
              logger.warn(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ñ–∞–π–ª–∞ –∏–∑ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É:',
                {
                  description: 'Failed to extract file ID',
                  originalUrl: imageUrl,
                }
              )
              validImageUrl = 'https://i.imgur.com/4AiXzf8.jpg'
            }
          } catch (error) {
            // –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
              description: 'Error processing image URL',
              originalUrl: imageUrl,
              error: error.message || 'Unknown error',
            })
            validImageUrl = 'https://i.imgur.com/4AiXzf8.jpg'
          }
        } else if (!imageUrl.startsWith('http')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ file_id –≤–º–µ—Å—Ç–æ URL
          try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ file_id
            useRawFileId = true
            validImageUrl = imageUrl
            logger.info('–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ file_id:', {
              description: 'Using input as file_id',
              fileId: imageUrl,
            })
          } catch (fileError) {
            logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
              description: 'Invalid image URL or file_id',
              input: imageUrl,
              error: fileError.message || 'Unknown error',
            })
            validImageUrl = 'https://i.imgur.com/4AiXzf8.jpg'
            useRawFileId = false
          }
        }
      }

      // –î–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
      if (ownerTelegramId) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–ª–∏ file_id –Ω–∞–ø—Ä—è–º—É—é, –∏–ª–∏ URL
          await bot.telegram.sendPhoto(ownerTelegramId, validImageUrl, {
            caption: `${text}\n\n[–¢–ï–°–¢–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê]`,
            parse_mode: 'Markdown',
          })
          logger.info('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞', {
            description: 'Test message sent to bot owner',
            useRawFileId,
            mediaValue: validImageUrl.substring(0, 30) + '...',
          })
        } catch (devError) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É:', {
            description: 'Error sending test message to owner',
            error: devError.message || 'Unknown error',
            useRawFileId,
            mediaValue: validImageUrl.substring(0, 30) + '...',
          })

          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
          if (useRawFileId) {
            try {
              // –ï—Å–ª–∏ file_id –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL
              const fileInfo = await bot.telegram.getFile(validImageUrl)
              const fileUrl = `https://api.telegram.org/file/bot${botToken}/${fileInfo.file_path}`

              await bot.telegram.sendPhoto(ownerTelegramId, fileUrl, {
                caption: `${text}\n\n[–¢–ï–°–¢–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê]`,
                parse_mode: 'Markdown',
              })

              logger.info(
                '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–µ—Ä–µ–∑ URL:',
                {
                  description: 'Test message sent to owner using URL',
                  fileUrl,
                }
              )

              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ URL
              useRawFileId = false
              validImageUrl = fileUrl
            } catch (urlError) {
              logger.error(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –Ω–∏ —á–µ—Ä–µ–∑ file_id, –Ω–∏ —á–µ—Ä–µ–∑ URL:',
                {
                  description: 'Failed to send message to owner',
                  error: urlError.message || 'Unknown error',
                }
              )

              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
              validImageUrl = 'https://i.imgur.com/4AiXzf8.jpg'
              useRawFileId = false
            }
          }
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      for (const userId of userIds) {
        try {
          await bot.telegram.sendPhoto(userId, validImageUrl, {
            caption: text,
            parse_mode: 'Markdown',
          })
          successCount++

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
          if (botName) {
            await this.activateUser(botName, userId)
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API Telegram
          await new Promise(resolve => setTimeout(resolve, 100))
        } catch (error) {
          failCount++
          logger.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
            {
              description: 'Error sending message to user',
              error: error.message || 'Unknown error',
              userId,
              useRawFileId,
            }
          )
          if (botName) {
            await this.updateUserStatusAfterFailure(
              botName,
              userId,
              error.message || 'Unknown error'
            )
          }
        }
      }

      logger.info('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        description: 'Broadcast completed',
        totalSent: successCount,
        totalFailed: failCount,
      })

      return {
        success: true,
        message: `–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}, –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${failCount}`,
        totalSent: successCount,
        totalFailed: failCount,
        successCount: successCount,
        errorCount: failCount,
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø—Ä—è–º—É—é:', {
        description: 'Error sending direct broadcast',
        error: error.message || 'Unknown error',
      })

      return {
        success: false,
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏',
        totalSent: 0,
        totalFailed: userIds.length,
        successCount: 0,
        errorCount: userIds.length,
      }
    }
  },

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
  async sendBroadcastViaServer(data: {
    contentType: string
    botName: string
    mediaFileId?: string
    textRu: string // –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    textEn: string // –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    postLink?: string
    ownerTelegramId: string
  }): Promise<BroadcastResult> {
    try {
      const {
        contentType,
        botName,
        mediaFileId,
        textRu,
        textEn,
        postLink,
        ownerTelegramId,
      } = data

      const url = `${isDev ? LOCAL_SERVER_URL : ELESTIO_URL}/broadcast`

      logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä üåê:', {
        description: 'Sending bilingual broadcast via server API',
        contentType,
        botName,
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
      const requestBody = {
        bot_name: botName,
        textRu,
        textEn,
        sender_telegram_id: ownerTelegramId,
        imageUrl: contentType === 'photo' ? mediaFileId : undefined,
        videoFileId: contentType === 'video' ? mediaFileId : undefined,
        postLink: contentType === 'post_link' ? postLink : undefined,
        contentType: contentType,
      }

      logger.info('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä üìù:', {
        description: 'Server request parameters',
        url,
        body: requestBody,
      })

      const response = await axios.post(url, requestBody, {
        headers: {
          'Content-Type': 'application/json',
          'x-secret-key': SECRET_API_KEY,
        },
      })

      logger.info('–û—Ç–≤–µ—Ç –æ—Ç API —Å–µ—Ä–≤–µ—Ä–∞ ‚úÖ:', {
        description: 'Server API response',
        response: response.data,
      })

      return {
        success: true,
        message: '–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä',
        totalSent: response.data.totalSent || 0,
        totalFailed: response.data.totalFailed || 0,
        successCount: response.data.totalSent || 0,
        errorCount: response.data.totalFailed || 0,
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä ‚ùå:', {
        description: 'Error sending broadcast via server API',
        error: error.message || 'Unknown error',
      })

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ API: ${
          error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`,
        totalSent: 0,
        totalFailed: 0,
        successCount: 0,
        errorCount: 0,
      }
    }
  },

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–≤—É—è–∑—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  async sendBroadcastWithText(
    botName: string,
    textRu: string,
    textEn: string,
    ownerTelegramId: string
  ): Promise<BroadcastResult> {
    return this.sendBroadcastViaServer({
      contentType: 'text',
      botName,
      textRu,
      textEn,
      ownerTelegramId,
    })
  },

  async sendBroadcastWithVideo(
    botName: string,
    videoFileId: string,
    captionRu: string,
    captionEn: string,
    ownerTelegramId: string
  ): Promise<BroadcastResult> {
    return this.sendBroadcastViaServer({
      contentType: 'video',
      botName,
      mediaFileId: videoFileId,
      textRu: captionRu,
      textEn: captionEn,
      ownerTelegramId,
    })
  },

  async sendBroadcastToUsers(
    botName: string,
    imageUrl: string,
    textRu: string,
    textEn: string,
    ownerTelegramId: string
  ): Promise<BroadcastResult> {
    return this.sendBroadcastViaServer({
      contentType: 'photo',
      botName,
      mediaFileId: imageUrl,
      textRu,
      textEn,
      ownerTelegramId,
    })
  },

  async sendBroadcastWithPostLink(
    botName: string,
    postLink: string,
    textRu: string,
    textEn: string,
    ownerTelegramId: string
  ): Promise<BroadcastResult> {
    return this.sendBroadcastViaServer({
      contentType: 'post_link',
      botName,
      textRu,
      textEn,
      postLink,
      ownerTelegramId,
    })
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
  async sendBroadcastCompletionNotification(
    botToken: string,
    ownerTelegramId: string,
    totalSent: number,
    totalFailed: number
  ): Promise<void> {
    try {
      const bot = new Telegraf(botToken)

      await bot.telegram.sendMessage(
        ownerTelegramId,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalSent}\n‚úó –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFailed}`
      )

      logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
        description: 'Broadcast completion notification sent',
        ownerTelegramId,
        totalSent,
        totalFailed,
      })
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
        description: 'Error sending broadcast completion notification',
        error: error.message || 'Unknown error',
        ownerTelegramId,
      })
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ Telegram –ø–æ —Å—Å—ã–ª–∫–µ
  async extractPostContent(postLink: string): Promise<{
    text?: string
    fileId?: string
    mediaType?: string
    isSuccess: boolean
    errorMessage?: string
  }> {
    try {
      logger.info('–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ üîç:', {
        description: 'Starting post content extraction',
        postLink,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç Telegram
      if (!postLink.includes('t.me/')) {
        return {
          isSuccess: false,
          errorMessage:
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç Telegram.',
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
      // –§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫: https://t.me/channel_name/message_id –∏–ª–∏ t.me/channel_name/message_id
      const linkParts = postLink.split('t.me/')[1].split('/')

      if (linkParts.length < 2 || !linkParts[0] || !linkParts[1]) {
        return {
          isSuccess: false,
          errorMessage: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏',
        }
      }

      const channelName = linkParts[0]
      const messageId = parseInt(linkParts[1], 10)

      if (isNaN(messageId)) {
        return {
          isSuccess: false,
          errorMessage: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Å—ã–ª–∫–µ',
        }
      }

      logger.info('–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏ üìã:', {
        description: 'Extracted data from link',
        channelName,
        messageId,
      })

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –º–µ–¥–∏–∞
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ —Å—Å—ã–ª–∫–æ–π
      return {
        text: '', // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        isSuccess: true, // –°—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        mediaType: 'link', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
      }
    } catch (error) {
      logger.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞ ‚ö†Ô∏è:', {
        description: 'Unexpected error during post content extraction',
        error: error.message || 'Unknown error',
        postLink,
      })

      return {
        isSuccess: false,
        errorMessage: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${
          error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`,
      }
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  checkOwnerPermissions: async (
    telegram_id: TelegramId,
    bot_name: string
  ): Promise<BroadcastResult> => {
    try {
      const isOwner = await avatarService.isAvatarOwner(telegram_id, bot_name)
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Unauthorized broadcast attempt',
          telegram_id,
          bot_name,
        })
        return {
          success: false,
          successCount: 0,
          errorCount: 0,
          reason: 'unauthorized',
        }
      }
      return { success: true, successCount: 0, errorCount: 0 }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:', {
        description: 'Error checking permissions',
        error: error?.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
        reason: 'permission_check_error',
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  fetchUsers: async (options: FetchUsersOptions): Promise<BroadcastResult> => {
    const { bot_name, test_mode, test_telegram_id, sender_telegram_id } =
      options

    try {
      if (test_mode) {
        const testId = test_telegram_id || sender_telegram_id || '144022504'
        const users = bot_name
          ? [{ telegram_id: testId, bot_name }]
          : await supabase
              .from('users')
              .select('telegram_id, bot_name')
              .eq('telegram_id', testId)
              .single()
              .then(({ data }) => (data ? [data] : []))

        return { success: true, successCount: 0, errorCount: 0, users }
      }

      let query = supabase.from('users').select('telegram_id, bot_name')
      if (bot_name) {
        query = query.eq('bot_name', bot_name)
      }

      const { data: users, error } = await query
      if (error) {
        throw error
      }

      return {
        success: true,
        successCount: 0,
        errorCount: 0,
        users: users || [],
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', {
        description: 'Error fetching users',
        error: error?.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
        reason: 'fetch_users_error',
        users: [],
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  getBotInstance: async (botName: string) => {
    try {
      const result = getBotByName(botName)
      if (!result || !result.bot) {
        logger.error(`‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${botName}`, {
          description: `Bot not found: ${botName}`,
        })
        return null
      }
      return result.bot
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–∞:', {
        description: 'Error getting bot instance',
        error: error?.message || 'Unknown error',
        botName,
      })
      return null
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param textRu –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   * @param options –û–ø—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  sendToAllUsers: async (
    imageUrl: string | undefined,
    textRu: string,
    options: BroadcastOptions = {}
  ): Promise<BroadcastResult> => {
    const {
      bot_name,
      sender_telegram_id,
      test_mode,
      test_telegram_id,
      contentType,
      postLink,
      videoFileId,
      textEn,
    } = options

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è bot_name
    if (!bot_name || typeof bot_name !== 'string' || bot_name.trim() === '') {
      logger.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bot_name –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
        description: 'Invalid or missing bot_name for broadcast',
        bot_name,
        options: JSON.stringify(options),
      })
      return {
        successCount: 0,
        errorCount: 0,
        reason: 'invalid_bot_name',
      }
    }

    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      description: 'Starting broadcast with parameters',
      bot_name,
      test_mode: test_mode || false,
      contentType: contentType || 'photo',
      has_image: !!imageUrl,
      has_video: !!videoFileId,
      has_post_link: !!postLink,
      sender_telegram_id: sender_telegram_id || 'not_provided',
    })

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∏–º—è –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if (sender_telegram_id && bot_name) {
      const isOwner = await avatarService.isAvatarOwner(
        sender_telegram_id,
        bot_name
      )
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Unauthorized broadcast attempt',
          sender_telegram_id,
          bot_name,
        })
        return {
          successCount: 0,
          errorCount: 0,
          reason: 'unauthorized',
        }
      }
    }

    logger.info('üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', {
      description: 'Starting to fetch users from database',
      bot_name,
      test_mode: test_mode || false,
    })

    let users = []

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (test_mode) {
      const testId = test_telegram_id || sender_telegram_id || '144022504'

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω bot_name, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã
      if (bot_name) {
        users = [{ telegram_id: testId, bot_name }]
        logger.info(
          `üë§ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ ID ${testId}, –±–æ—Ç: ${bot_name}`,
          {
            description: `Test mode: sending only to ID ${testId}, bot: ${bot_name}`,
          }
        )
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const { data, error } = await supabase
          .from('users')
          .select('telegram_id, bot_name')
          .eq('telegram_id', testId)
          .single()

        if (error || !data) {
          logger.error(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`, {
            description: `Test user ${testId} not found in database`,
            error,
          })
          return {
            successCount: 0,
            errorCount: 0,
            reason: 'test_user_not_found',
          }
        }

        users = [data]
        logger.info(
          `üë§ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ ID ${testId}, –±–æ—Ç: ${data.bot_name}`,
          {
            description: `Test mode: sending only to ID ${testId}, bot: ${data.bot_name}`,
          }
        )
      }
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const query = supabase
        .from('users')
        .select('telegram_id, bot_name, language_code')
        .eq('bot_name', bot_name) // –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_name

      const { data, error } = await query

      if (error) {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã: ${error.message}`,
          {
            description: `Error fetching users: ${error.message}`,
            error,
            bot_name,
          }
        )
        return {
          successCount: 0,
          errorCount: 0,
          reason: 'database_error',
        }
      }

      users = data || []
    }

    logger.info(
      `üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞ ${bot_name}: ${users?.length || 0}`,
      {
        description: `Fetched users count for bot ${bot_name}: ${
          users?.length || 0
        }`,
        bot_name,
        test_mode: test_mode || false,
      }
    )

    if (!users || users.length === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
        description: 'No users found for broadcast',
        bot_name,
        test_mode: test_mode || false,
      })
      return { successCount: 0, errorCount: 0, reason: 'no_users' }
    }

    let successCount = 0
    let errorCount = 0

    if (users) {
      for (const user of users) {
        if (user.telegram_id && user.bot_name) {
          logger.info(
            `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegram_id}, –±–æ—Ç: ${user.bot_name}`,
            {
              description: `Processing user: ${user.telegram_id}, bot: ${user.bot_name}`,
            }
          )

          try {
            const botResult = getBotByName(user.bot_name)

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞
            logger.info('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞:', {
              description: 'Bot retrieval result',
              hasBot: !!botResult?.bot,
              hasError: !!botResult?.error,
              error: botResult?.error || null,
              botType: botResult?.bot ? typeof botResult.bot : 'undefined',
              botKeys: botResult?.bot ? Object.keys(botResult.bot) : [],
            })

            if (!botResult || !botResult.bot) {
              logger.error(`‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${user.bot_name}`, {
                description: `Bot not found: ${user.bot_name}`,
              })
              errorCount++
              continue
            }

            const { bot } = botResult

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º–∞
            if (
              !bot.telegram ||
              (contentType === 'post_link' &&
                typeof bot.telegram.sendMessage !== 'function') ||
              (contentType === 'video' &&
                typeof bot.telegram.sendVideo !== 'function') ||
              (!contentType && typeof bot.telegram.sendPhoto !== 'function')
            ) {
              logger.error(
                `‚ùå –£ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏`,
                {
                  description: `Bot has no required methods`,
                  contentType: contentType || 'photo',
                  botTelegramMethods: bot.telegram
                    ? Object.keys(bot.telegram)
                    : 'no_telegram',
                }
              )
              errorCount++
              continue
            }

            logger.info(`ü§ñ –ü–æ–ª—É—á–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: ${user.bot_name}`, {
              description: `Got bot instance: ${user.bot_name}`,
              telegramMethods: Object.keys(bot.telegram),
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if (contentType === 'post_link' && postLink) {
              logger.info(`üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç: ${postLink}`, {
                description: `Sending post link: ${postLink}`,
                language: user.language_code || 'ru',
              })

              const buttonText =
                user.language_code === 'en'
                  ? 'üîó Go to post'
                  : 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É'
              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendMessage(
                user.telegram_id.toString(),
                messageText,
                {
                  parse_mode: 'HTML',
                  link_preview_options: { is_disabled: false },
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: buttonText,
                          url: postLink,
                        },
                      ],
                    ],
                  },
                }
              )
            } else if (contentType === 'video' && videoFileId) {
              logger.info(`üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ: ${videoFileId}`, {
                description: `Sending video: ${videoFileId}`,
                language: user.language_code || 'ru',
              })

              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendVideo(
                user.telegram_id.toString(),
                videoFileId,
                {
                  caption: messageText,
                  parse_mode: 'Markdown',
                }
              )
            } else if (imageUrl) {
              logger.info(
                `üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl?.substring(0, 50)}...`,
                {
                  description: `Sending image: ${imageUrl?.substring(
                    0,
                    50
                  )}...`,
                  language: user.language_code || 'ru',
                }
              )

              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendPhoto(
                user.telegram_id.toString(),
                imageUrl,
                {
                  caption: messageText,
                  parse_mode: 'Markdown',
                }
              )
            } else {
              logger.error(
                `‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ contentType=${contentType}`,
                {
                  description: `No content specified for contentType=${contentType}`,
                  hasImageUrl: !!imageUrl,
                  hasVideoFileId: !!videoFileId,
                  hasPostLink: !!postLink,
                }
              )
              errorCount++
              continue
            }

            successCount++
            logger.info(
              `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.telegram_id}`,
              {
                description: `Message sent to user: ${user.telegram_id}`,
                contentType: contentType || 'photo',
              }
            )
          } catch (err) {
            errorCount++
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, {
              description: `Error sending message`,
              error: err?.message || 'Unknown error',
              stack: err?.stack,
              response: err?.response,
              telegram_id: user.telegram_id,
              bot_name: user.bot_name,
            })

            if (err.response) {
              const errorCode = err.response.error_code
              if (errorCode === 403 || errorCode === 400) {
                logger.error(
                  `‚ùå –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${err.response.description}`,
                  {
                    description: `Removing user ${user.telegram_id} due to error: ${err.response.description}`,
                    error: err,
                  }
                )
                await supabase
                  .from('users')
                  .delete()
                  .eq('telegram_id', user.telegram_id)
              } else {
                logger.error(
                  `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.telegram_id}`,
                  {
                    description: `Failed to send message to user: ${user.telegram_id}`,
                    error: err,
                  }
                )
              }
            } else {
              logger.error(
                `‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegram_id}`,
                {
                  description: `Unexpected error for user: ${user.telegram_id}`,
                  error: err,
                }
              )
            }
          }
        }
      }
    }

    logger.info(
      `üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: —É—Å–ø–µ—à–Ω–æ - ${successCount}, –æ—à–∏–±–æ–∫ - ${errorCount}`,
      {
        description: `Broadcast summary: success - ${successCount}, errors - ${errorCount}`,
        bot_name,
        test_mode: test_mode || false,
      }
    )

    return { successCount, errorCount }
  },
}

export async function sendTestBroadcast(
  requestData: BroadcastTestRequest
): Promise<BroadcastTestResponse> {
  try {
    const url = `${isDev ? LOCAL_SERVER_URL : ELESTIO_URL}/broadcast/test`

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ üß™:', {
      description: 'Sending test broadcast',
      ...requestData,
      botToken: '***—Å–∫—Ä—ã—Ç–æ***',
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä–æ–º
    const serverParams = {
      imageUrl:
        requestData.contentType === 'photo' ? requestData.imageUrl : undefined,
      videoFileId:
        requestData.contentType === 'video'
          ? requestData.videoFileId
          : undefined,
      textRu: requestData.textRu,
      textEn: requestData.textEn,
      bot_name: requestData.botName,
      target_telegram_id: requestData.sender_telegram_id,
      contentType: requestData.contentType,
      postLink:
        requestData.contentType === 'post_link'
          ? requestData.postLink
          : undefined,
    }

    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É üìù:', {
      description: 'Test broadcast request parameters',
      url,
      ...serverParams,
      botToken: '***—Å–∫—Ä—ã—Ç–æ***',
    })

    const response: AxiosResponse<BroadcastTestResponse> = await axios.post(
      url,
      serverParams,
      {
        headers: {
          'Content-Type': 'application/json',
          'x-secret-key': SECRET_API_KEY,
        },
      }
    )

    console.log('–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É ‚úÖ:', {
      description: 'Test broadcast response',
      data: response.data,
    })
    return response.data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ‚ùå:', {
      description: 'Error sending test broadcast',
      error: error.message || 'Unknown error',
    })
    throw error
  }
}
