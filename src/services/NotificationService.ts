import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'

export class NotificationService {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async sendTrainingError(
    telegramId: string,
    botName: string,
    errorMessage: string
  ): Promise<boolean> {
    try {
      const { bot } = getBotByName(botName)
      if (!bot) {
        logger.error({
          message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
          botName,
          telegramId,
        })
        return false
      }

      await bot.telegram.sendMessage(
        telegramId,
        `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –º–æ–¥–µ–ª–∏:</b>\n\n${errorMessage}`,
        { parse_mode: 'HTML' }
      )

      logger.info({
        message: '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        telegramId,
        botName,
      })

      return true
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
        error: error instanceof Error ? error.message : 'Unknown error',
        telegramId,
        botName,
      })
      return false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async sendSuccessNotification(
    telegramId: string,
    botName: string,
    isRussian: boolean
  ): Promise<boolean> {
    try {
      const { bot } = getBotByName(botName)
      if (!bot) {
        logger.error({
          message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ',
          botName,
          telegramId,
        })
        return false
      }

      const message = isRussian
        ? 'üéâ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É –º–æ–¥–µ–ª—å.'
        : 'üéâ <b>Model training completed successfully!</b>\n\nNow you can use your model.'

      await bot.telegram.sendMessage(telegramId, message, {
        parse_mode: 'HTML',
      })

      logger.info({
        message: '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
        telegramId,
        botName,
      })

      return true
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ',
        error: error instanceof Error ? error.message : 'Unknown error',
        telegramId,
        botName,
      })
      return false
    }
  }
}
