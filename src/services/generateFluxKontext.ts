import { ApiResponse, GenerationResult } from '@/interfaces'
import { replicate } from '@/core/replicate'
import { savePrompt } from '@/core/supabase'
import { downloadFile } from '@/helpers'
import { processApiResponse } from '@/helpers/error'
import { pulse } from '@/helpers/pulse'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { FLUX_KONTEXT_MODELS } from '@/price/models'
import { calculateFinalImageCostInStars } from '@/price/models/IMAGES_MODELS'
import { logger, logSessionSafely } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { processBalanceOperation } from '@/price/helpers'
import { refundUser } from '@/price/helpers/refundUser'
import { calculateFinalPriceInStars } from '@/interfaces/paidServices'
import { MyContext } from '@/interfaces'
import { saveFileLocally } from '@/helpers/saveFileLocally'
import path from 'path'
import fs from 'fs'
import { Markup } from 'telegraf'

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const createEditResultKeyboard = (is_ru: boolean) => {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        is_ru ? '‚ú® –ï—â—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '‚ú® More editing',
        'more_editing'
      ),
    ],
    [
      Markup.button.callback(
        is_ru ? '‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ' : '‚¨ÜÔ∏è Upscale',
        'upscale_image'
      ),
    ],
    [
      Markup.button.callback(
        is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu',
        'go_main_menu'
      ),
    ],
  ])
}

export interface FluxKontextParams {
  prompt: string
  inputImageUrl: string
  modelType: 'pro' | 'max'
  telegram_id: string
  username: string
  is_ru: boolean
  ctx: MyContext
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ FLUX Kontext
export interface AdvancedFluxKontextParams {
  prompt: string
  mode:
    | 'single'
    | 'multi'
    | 'portrait_series'
    | 'haircut'
    | 'landmarks'
    | 'headshot'
  imageA: string // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  imageB?: string // –í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è multi —Ä–µ–∂–∏–º–∞)
  modelType: 'pro' | 'max'
  telegram_id: string
  username: string
  is_ru: boolean
  ctx: MyContext
}

export const generateFluxKontext = async (
  params: FluxKontextParams
): Promise<GenerationResult> => {
  try {
    const {
      prompt,
      inputImageUrl,
      modelType,
      telegram_id,
      username,
      is_ru,
      ctx,
    } = params

    const modelKey = `black-forest-labs/flux-kontext-${modelType}`
    const modelConfig = FLUX_KONTEXT_MODELS[modelKey]

    if (!modelConfig) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: ${modelKey}`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    const level = userExists.level
    if (level === 10) {
      await updateUserLevelPlusOne(telegram_id, level)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balanceCheck = await processBalanceOperation({
      ctx,
      telegram_id: Number(telegram_id),
      paymentAmount: modelConfig.costPerImage,
      is_ru,
    })

    if (!balanceCheck.success) {
      throw new Error('Not enough stars')
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.telegram.sendMessage(
      telegram_id,
      is_ru
        ? '‚ú® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX Kontext...'
        : '‚ú® Editing image with FLUX Kontext...',
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è API
    const inputParams = {
      prompt,
      input_image: inputImageUrl,
    }

    logger.info(`FLUX Kontext editing started`, {
      modelKey,
      prompt,
      telegram_id,
      inputParams,
    })

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const output: ApiResponse = (await replicate.run(modelKey as any, {
      input: inputParams,
    })) as ApiResponse

    const editedImageUrl = await processApiResponse(output)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const imageLocalPath = await saveFileLocally(
      telegram_id,
      editedImageUrl,
      'flux-kontext-edit',
      '.jpeg'
    )

    const imageLocalUrl = `/uploads/${telegram_id}/flux-kontext-edit/${path.basename(
      imageLocalPath
    )}`

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    const prompt_id = await savePrompt(
      `KONTEXT EDIT: ${prompt}`,
      modelKey,
      imageLocalUrl,
      Number(telegram_id)
    )

    if (prompt_id === null) {
      throw new Error('prompt_id is null')
    }

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const image = await downloadFile(editedImageUrl)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await ctx.telegram.sendPhoto(
      telegram_id,
      {
        source: fs.createReadStream(imageLocalPath),
      },
      {
        caption: is_ru
          ? `‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\nüìù –ó–∞–ø—Ä–æ—Å: ${prompt}\nü§ñ –ú–æ–¥–µ–ª—å: FLUX Kontext ${modelType.toUpperCase()}`
          : `‚ú® Image edited!\n\nüìù Prompt: ${prompt}\nü§ñ Model: FLUX Kontext ${modelType.toUpperCase()}`,
        reply_markup: createEditResultKeyboard(is_ru).reply_markup,
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è upscaling
    if (ctx.session) {
      ctx.session.lastGeneratedImageUrl = editedImageUrl
      ctx.session.lastGeneratedPrompt = prompt
      logSessionSafely(
        {
          telegram_id,
          lastImageUrl: editedImageUrl,
          lastPrompt: prompt,
          sessionExists: !!ctx.session,
        },
        'üîç SAVE SESSION: Standard FLUX Kontext'
      )
    } else {
      console.log(
        '‚ùå SAVE SESSION: ctx.session is null for standard FLUX Kontext',
        { telegram_id }
      )
    }

    // Pulse –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await pulse(
      imageLocalPath,
      `KONTEXT: ${prompt}`,
      `/flux-kontext-${modelType}`,
      telegram_id,
      username,
      is_ru,
      ctx.botInfo?.username ?? 'unknown_bot'
    )

    logger.info(`FLUX Kontext editing completed successfully`, {
      prompt_id,
      telegram_id,
      modelKey,
    })

    return { image, prompt_id }
  } catch (error) {
    logger.error('FLUX Kontext editing failed', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: params.telegram_id,
      prompt: params.prompt,
    })

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.'
    if (error instanceof Error) {
      if (error.message && error.message.includes('NSFW content detected')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
          : '‚ùå NSFW content detected. Please try another prompt.'
      } else if (error.message && error.message.includes('Not enough stars')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå Not enough stars for image editing.'
      } else if (error.message) {
        const match = error.message.match(/{"detail":"(.*?)"/)
        if (match) {
          errorMessageToUser = `‚ùå ${match[1]}`
        }
      }
    }

    params.ctx.telegram.sendMessage(params.telegram_id, errorMessageToUser)
    throw error
  }
}

// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FLUX Kontext —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const generateAdvancedFluxKontext = async (
  params: AdvancedFluxKontextParams
): Promise<GenerationResult> => {
  try {
    const {
      prompt,
      mode,
      imageA,
      imageB,
      modelType,
      telegram_id,
      username,
      is_ru,
      ctx,
    } = params

    const modelKey = `black-forest-labs/flux-kontext-${modelType}`
    const modelConfig = FLUX_KONTEXT_MODELS[modelKey]

    if (!modelConfig) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: ${modelKey}`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    const level = userExists.level
    if (level === 10) {
      await updateUserLevelPlusOne(telegram_id, level)
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let cost = modelConfig.costPerImage
    const originalCost = cost

    if (mode === 'multi' || mode === 'portrait_series') {
      cost = Math.round(cost * 1.5) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤

      logger.info(`Advanced FLUX Kontext pricing applied`, {
        mode,
        originalCost,
        finalCost: cost,
        markup: '50%',
        telegram_id,
      })
    } else {
      logger.info(`Standard FLUX Kontext pricing`, {
        mode,
        cost,
        telegram_id,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balanceCheck = await processBalanceOperation({
      ctx,
      telegram_id: Number(telegram_id),
      paymentAmount: cost,
      is_ru,
    })

    if (!balanceCheck.success) {
      throw new Error('Not enough stars')
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const modeNames = {
      single: is_ru ? '–û–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : 'Single Image Edit',
      multi: is_ru ? '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' : 'Multi-Image Combine',
      portrait_series: is_ru ? '–°–µ—Ä–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤' : 'Portrait Series',
      haircut: is_ru ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∏–∂–∫–∏' : 'Change Haircut',
      landmarks: is_ru ? '–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –º–µ—Å—Ç–∞' : 'Iconic Locations',
      headshot: is_ru ? '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç' : 'Professional Headshot',
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await ctx.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ "${modeNames[mode]}"...\n\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} ‚≠ê${cost > originalCost ? ` (–±–∞–∑–æ–≤–∞—è ${originalCost}‚≠ê + –Ω–∞—Ü–µ–Ω–∫–∞ ${cost - originalCost}‚≠ê)` : ''}`
        : `‚ú® Processing image in "${modeNames[mode]}" mode...\n\nüíé Cost: ${cost} ‚≠ê${cost > originalCost ? ` (base ${originalCost}‚≠ê + markup ${cost - originalCost}‚≠ê)` : ''}`,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const inputParams: any = {
      prompt: enhancePromptForMode(prompt, mode, is_ru),
      input_image: imageA,
    }

    // –î–ª—è –º—É–ª—å—Ç–∏-—Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (mode === 'multi' && imageB) {
      // –í FLUX Kontext –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
      inputParams.prompt = `Combine with second image: ${prompt}. Merge the elements, people, or objects from both images seamlessly while maintaining natural lighting and composition.`

      // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    }

    logger.info(`Advanced FLUX Kontext editing started`, {
      modelKey,
      mode,
      prompt: inputParams.prompt,
      telegram_id,
      hasImageB: !!imageB,
    })

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const output: ApiResponse = (await replicate.run(modelKey as any, {
      input: inputParams,
    })) as ApiResponse

    const editedImageUrl = await processApiResponse(output)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const imageLocalPath = await saveFileLocally(
      telegram_id,
      editedImageUrl,
      `flux-kontext-${mode}`,
      '.jpeg'
    )

    const imageLocalUrl = `/uploads/${telegram_id}/flux-kontext-${mode}/${path.basename(
      imageLocalPath
    )}`

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞
    const prompt_id = await savePrompt(
      `FLUX KONTEXT [${mode.toUpperCase()}]: ${prompt}`,
      modelKey,
      imageLocalUrl,
      Number(telegram_id)
    )

    if (prompt_id === null) {
      throw new Error('prompt_id is null')
    }

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const image = await downloadFile(editedImageUrl)

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const advancedKeyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          is_ru ? '‚ú® –ï—â—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '‚ú® More editing',
          'more_editing'
        ),
        Markup.button.callback(
          is_ru ? 'üîÑ –î—Ä—É–≥–æ–π —Ä–µ–∂–∏–º' : 'üîÑ Different mode',
          'different_mode'
        ),
      ],
      [
        Markup.button.callback(
          is_ru ? '‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ' : '‚¨ÜÔ∏è Upscale',
          'upscale_image'
        ),
      ],
      [
        Markup.button.callback(
          is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu',
          'go_main_menu'
        ),
      ],
    ])

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await ctx.telegram.sendPhoto(
      telegram_id,
      {
        source: fs.createReadStream(imageLocalPath),
      },
      {
        caption: is_ru
          ? `‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\nüéØ –†–µ–∂–∏–º: ${modeNames[mode]}\nüìù –ó–∞–ø—Ä–æ—Å: ${prompt}\nü§ñ –ú–æ–¥–µ–ª—å: FLUX Kontext ${modelType.toUpperCase()}\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} ‚≠ê${cost > originalCost ? ` (–±–∞–∑–æ–≤–∞—è ${originalCost}‚≠ê + –Ω–∞—Ü–µ–Ω–∫–∞ ${cost - originalCost}‚≠ê)` : ''}`
          : `‚ú® Image processed!\n\nüéØ Mode: ${modeNames[mode]}\nüìù Prompt: ${prompt}\nü§ñ Model: FLUX Kontext ${modelType.toUpperCase()}\nüíé Cost: ${cost} ‚≠ê${cost > originalCost ? ` (base ${originalCost}‚≠ê + markup ${cost - originalCost}‚≠ê)` : ''}`,
        reply_markup: advancedKeyboard.reply_markup,
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è upscaling
    if (ctx.session) {
      ctx.session.lastGeneratedImageUrl = editedImageUrl
      ctx.session.lastGeneratedPrompt = prompt
      logSessionSafely(
        {
          telegram_id,
          lastImageUrl: editedImageUrl,
          lastPrompt: prompt,
          sessionExists: !!ctx.session,
        },
        'üîç SAVE SESSION: Advanced FLUX Kontext'
      )
    } else {
      console.log(
        '‚ùå SAVE SESSION: ctx.session is null for advanced FLUX Kontext',
        { telegram_id }
      )
    }

    // Pulse –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await pulse(
      imageLocalPath,
      `FLUX KONTEXT [${mode.toUpperCase()}]: ${prompt}`,
      `/flux-kontext-advanced-${mode}`,
      telegram_id,
      username,
      is_ru,
      ctx.botInfo?.username ?? 'unknown_bot'
    )

    logger.info(`Advanced FLUX Kontext editing completed successfully`, {
      prompt_id,
      telegram_id,
      modelKey,
      mode,
    })

    return { image, prompt_id }
  } catch (error) {
    logger.error('Advanced FLUX Kontext editing failed', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: params.telegram_id,
      prompt: params.prompt,
      mode: params.mode,
    })

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
    if (error instanceof Error) {
      if (error.message && error.message.includes('NSFW content detected')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
          : '‚ùå NSFW content detected. Please try another prompt.'
      } else if (error.message && error.message.includes('Not enough stars')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå Not enough stars for image processing.'
      }
    }

    await params.ctx.telegram.sendMessage(
      params.telegram_id,
      errorMessageToUser,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
const enhancePromptForMode = (
  prompt: string,
  mode: string,
  is_ru: boolean
): string => {
  const enhancements = {
    single: prompt, // –û–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    multi: `Combine and merge elements: ${prompt}. Seamlessly blend the composition, lighting, and style to create a cohesive single image.`,
    portrait_series: `Create a professional portrait series: ${prompt}. Generate multiple high-quality portrait variations with different expressions, lighting, and angles while maintaining the same person's identity.`,
    haircut: `Hair and hairstyle transformation: ${prompt}. Focus on changing the hairstyle, hair color, or hair length while preserving the person's facial features and identity perfectly.`,
    landmarks: `Place in iconic location: ${prompt}. Seamlessly integrate the person into a famous landmark or tourist destination background while maintaining realistic lighting and perspective.`,
    headshot: `Professional business headshot: ${prompt}. Create a clean, professional portrait suitable for business use with neutral background, professional lighting, and polished appearance.`,
  }

  return enhancements[mode as keyof typeof enhancements] || prompt
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è upscaling –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Real-ESRGAN
export const upscaleFluxKontextImage = async (params: {
  imageUrl: string
  telegram_id: string
  username: string
  is_ru: boolean
  ctx: MyContext
  originalPrompt?: string
}): Promise<GenerationResult> => {
  const { imageUrl, telegram_id, username, is_ru, ctx, originalPrompt } = params

  // –°—Ç–æ–∏–º–æ—Å—Ç—å upscaling - Clarity Upscaler —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π $0.04 –∏ –Ω–∞—Ü–µ–Ω–∫–æ–π 50%
  const clarityUpscalerCostUSD = 0.04 // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å Clarity Upscaler –¥–ª—è —Ä–∞–∑—É–º–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
  const upscaleCost = calculateFinalPriceInStars(clarityUpscalerCostUSD) // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 50%

  // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  let balanceCheck: any = null

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balanceCheck = await processBalanceOperation({
      ctx,
      telegram_id: Number(telegram_id),
      paymentAmount: upscaleCost,
      is_ru,
    })

    if (!balanceCheck.success) {
      throw new Error('Not enough stars')
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ upscaling
    await ctx.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Clarity Upscaler...\n\nüéØ –†–µ–∂–∏–º: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${upscaleCost} ‚≠ê`
        : `‚¨ÜÔ∏è Upscaling image quality with Clarity Upscaler...\n\nüéØ Mode: Maximum original preservation\nüíé Cost: ${upscaleCost} ‚≠ê`,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    logger.info(`Image upscaling started`, {
      model: 'philz1337x/clarity-upscaler',
      telegram_id,
      originalPrompt,
    })

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è philz1337x/clarity-upscaler - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    // –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞ –±–µ–∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const inputParams = {
      image: imageUrl,
      creativity: 0.1,
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è upscaled –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const output: ApiResponse = (await replicate.run(
      'philz1337x/clarity-upscaler:dfad41707589d68ecdccd1dfa600d55a208f9310748e44bfe35b4a6291453d5e',
      {
        input: inputParams,
      }
    )) as ApiResponse

    const upscaledImageUrl = await processApiResponse(output)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const imageLocalPath = await saveFileLocally(
      telegram_id,
      upscaledImageUrl,
      'flux-kontext-upscaled',
      '.webp'
    )

    const imageLocalUrl = `/uploads/${telegram_id}/flux-kontext-upscaled/${path.basename(
      imageLocalPath
    )}`

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    const prompt_id = await savePrompt(
      `FLUX KONTEXT UPSCALED: ${originalPrompt || 'Image upscaling'}`,
      'philz1337x/clarity-upscaler',
      imageLocalUrl,
      Number(telegram_id)
    )

    if (prompt_id === null) {
      throw new Error('prompt_id is null')
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ upscaled –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    await ctx.telegram.sendPhoto(
      telegram_id,
      {
        source: fs.createReadStream(imageLocalPath),
      },
      {
        caption: is_ru
          ? `‚¨ÜÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞!\n\nüîß –ú–æ–¥–µ–ª—å: Clarity Upscaler\nüéØ –†–µ–∂–∏–º: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞\n‚ú® –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${upscaleCost} ‚≠ê${originalPrompt ? `\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${originalPrompt}` : ''}`
          : `‚¨ÜÔ∏è Image quality enhanced 2x!\n\nüîß Model: Clarity Upscaler\nüéØ Mode: Original preservation\n‚ú® Quality: High without distortion\nüíé Cost: ${upscaleCost} ‚≠ê${originalPrompt ? `\nüìù Original prompt: ${originalPrompt}` : ''}`,
        reply_markup: createEditResultKeyboard(is_ru).reply_markup,
      }
    )

    // Pulse –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await pulse(
      imageLocalPath,
      `UPSCALED: ${originalPrompt || 'Image upscaling'}`,
      '/flux-kontext-upscale',
      telegram_id,
      username,
      is_ru,
      ctx.botInfo?.username ?? 'unknown_bot'
    )

    logger.info(`Image upscaling completed successfully`, {
      prompt_id,
      telegram_id,
      model: 'philz1337x/clarity-upscaler',
    })

    return { image: Buffer.alloc(0), prompt_id } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä, —Ç.–∫. —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
  } catch (error) {
    logger.error('Image upscaling failed', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: params.telegram_id,
      originalPrompt: params.originalPrompt,
    })

    // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –¥–µ–Ω—å–≥–∏ —É–∂–µ —Å–ø–∏—Å–∞–ª–∏—Å—å)
    if (balanceCheck?.success) {
      logger.info('Refunding user due to upscaling failure', {
        telegram_id: params.telegram_id,
        amount: upscaleCost,
      })
      try {
        await refundUser(params.ctx, upscaleCost)
      } catch (refundError) {
        logger.error('Failed to refund user after upscaling failure', {
          telegram_id: params.telegram_id,
          refundError:
            refundError instanceof Error
              ? refundError.message
              : 'Unknown refund error',
        })
      }
    }

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞.'
    if (error instanceof Error) {
      if (error.message && error.message.includes('Not enough stars')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå Not enough stars for image upscaling.'
      } else if (error.message) {
        const match = error.message.match(/{"detail":"(.*?)"/)
        if (match) {
          errorMessageToUser = `‚ùå ${match[1]}`
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        errorMessageToUser = params.is_ru
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.'
          : '‚ùå Error occurred during upscaling. Funds have been refunded.'
      }
    }

    await params.ctx.telegram.sendMessage(
      params.telegram_id,
      errorMessageToUser,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    throw error
  }
}
