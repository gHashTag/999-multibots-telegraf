import fs from 'fs'
import path from 'path'
import { v4 as uuidv4 } from 'uuid'
import { UPLOAD_DIR, API_URL } from '@/config'
import { logger } from '@/utils/logger'
import { TelegramId } from '@/interfaces/telegram.interface'

/**
 * –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
 */
export interface ModelFile {
  filePath: string
  fileSize: number
  fileName: string
}

export interface ModelTrainingConfig {
  filePath: string
  triggerWord: string
  modelName: string
  steps: number
  telegram_id: TelegramId
  is_ru: boolean
  botName: string
}

export interface ModelUploadResult {
  success: boolean
  url?: string
  error?: string
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
 */
export const generateModelRequestId = (telegram_id: string, modelName: string): string => {
  return `train-${telegram_id}-${modelName}-${Date.now()}-${uuidv4().substring(0, 8)}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
 */
export const validateModelFile = async (filePath: string): Promise<ModelFile> => {
  try {
    if (!fs.existsSync(filePath)) {
      throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + filePath)
    }

    const fileStats = fs.statSync(filePath)
    const fileSize = fileStats.size
    const fileName = path.basename(filePath)

    logger.info({
      message: 'üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏',
      fileSizeMB: (fileSize / (1024 * 1024)).toFixed(2) + ' –ú–ë',
      fileName,
    })

    return {
      filePath,
      fileSize,
      fileName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏',
      error: error instanceof Error ? error.message : 'Unknown error',
      filePath,
    })
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
 */
export const uploadModelFile = async (modelFile: ModelFile): Promise<ModelUploadResult> => {
  try {
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads
    const destPath = path.join(UPLOAD_DIR, modelFile.fileName)
    await fs.promises.copyFile(modelFile.filePath, destPath)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
    const fullUrl = `${API_URL}/uploads/${modelFile.fileName}`

    logger.info({
      message: '‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL',
      path: destPath,
      url: fullUrl,
    })

    return {
      success: true,
      url: fullUrl,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏',
      error: error instanceof Error ? error.message : 'Unknown error',
      fileName: modelFile.fileName,
    })

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const cleanupModelFiles = async (filePath: string): Promise<void> => {
  try {
    if (fs.existsSync(filePath)) {
      await fs.promises.unlink(filePath)
      logger.info({
        message: 'üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã',
        filePath,
      })
    }
  } catch (error) {
    logger.warn({
      message: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏',
      error: error instanceof Error ? error.message : 'Unknown error',
      filePath,
    })
  }
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
 */
export const getModelTrainingMessages = (is_ru: boolean) => ({
  started: is_ru
    ? 'üîÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.'
    : 'üîÑ <b>Model training request sent!</b>\n\nThis may take several hours. I will send a notification when the model is ready.',
  
  error: (message: string) => is_ru
    ? `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n${message}`
    : `‚ùå <b>Error while starting training:</b>\n\n${message}`,
    
  success: is_ru
    ? '‚úÖ <b>–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!</b>'
    : '‚úÖ <b>Model successfully sent for training!</b>'
})