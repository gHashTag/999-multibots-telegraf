import { logger } from '@/utils/logger'
import { VideoService } from '@/services/plan_b/videoService'

interface UploadVideoRequest {
  videoUrl: string
  telegram_id: number
  fileName: string
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VideoService.
 * @param requestData –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ.
 * @returns –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ.
 */
export const uploadVideoToServer = async (
  requestData: UploadVideoRequest
): Promise<string> => {
  try {
    const { videoUrl, telegram_id, fileName } = requestData

    logger.info('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ:', {
      videoUrl,
      telegram_id,
      fileName,
    })

    const videoService = new VideoService()

    const localPath = await videoService.processVideo(
      videoUrl,
      telegram_id,
      fileName
    )

    logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', { localPath })

    return localPath
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', {
      error: error instanceof Error ? error.message : String(error),
      requestData,
    })
    throw new Error(`Failed to process video locally: ${error}`)
  }
}
