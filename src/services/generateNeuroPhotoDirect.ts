import { ModeEnum } from '@/interfaces/modes'
import { isRussian } from '@/helpers/language'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  savePromptDirect,
} from '@/core/supabase'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { directPaymentProcessor } from '@/core/supabase/directPayment'
import { PaymentType } from '@/interfaces/payments.interface'
import { saveFileLocally } from '@/helpers/saveFileLocally'
import { sendMediaToPulse, MediaPulseOptions } from '@/helpers/pulse'
import { processApiResponse } from '@/helpers/error/processApiResponse'
import { replicate } from '@/core/replicate'
import { getAspectRatio } from '@/core/supabase/ai'
import { v4 as uuidv4 } from 'uuid'
import { ApiResponse } from '@/interfaces/api.interface'
import { BotName } from '@/interfaces/telegram-bot.interface'
/**
 * –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V1 –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Inngest.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Inngest.
 *
 * @param prompt –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param model_url URL –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param numImages –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param telegram_id ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param botName –ò–º—è –±–æ—Ç–∞
 * @param options –û–ø—Ü–∏–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
export async function generateNeuroPhotoDirect(
  prompt: string,
  model_url: string,
  numImages: number,
  telegram_id: string,
  ctx: MyContext,
  botName: string,
  options?: {
    disable_telegram_sending?: boolean
    bypass_payment_check?: boolean
  }
): Promise<{ data: string; success: boolean; urls?: string[] } | null> {
  // --- DEBUG LOG ---
  // console.log(
  //   '>>> generateNeuroPhotoDirect: Called with',
  //   {
  //     telegram_id: telegram_id,
  //     numImagesReceived: numImages, // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ numImages
  //     promptSample: prompt ? prompt.substring(0, 70) + '...' : 'null',
  //     model_url: model_url,
  //     botName: botName
  //   }
  // );
  // --- END DEBUG LOG ---

  logger.info({
    message: 'üöÄ [DIRECT] –ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Neurophoto V1',
    description: 'Starting direct Neurophoto V1 generation',
    prompt: prompt.substring(0, 50) + '...',
    model_url,
    numImages,
    telegram_id,
    botName,
    disable_telegram_sending: options?.disable_telegram_sending,
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
    if (!prompt) {
      logger.error({
        message: '‚ùå [DIRECT] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: 'No prompt found for direct generation',
        telegram_id,
      })
      throw new Error('Prompt not found')
    }

    if (!model_url) {
      logger.error({
        message: '‚ùå [DIRECT] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: 'No model URL found for direct generation',
        telegram_id,
      })
      throw new Error('Model URL not found')
    }

    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ numImages –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const validNumImages = numImages && numImages > 0 ? numImages : 1
    // --- DEBUG LOG ---
    // console.log(
    //   '>>> generateNeuroPhotoDirect: Validated numImages',
    //   {
    //     telegram_id: telegram_id,
    //     originalNumImages: numImages,
    //     validNumImages: validNumImages
    //   }
    // );
    // --- END DEBUG LOG ---
    const is_ru = isRussian(ctx)
    const username = ctx.from?.username || 'unknown'

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    logger.info({
      message: 'ü§ñ [DIRECT] –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
      description: 'Getting bot instance',
      botName,
    })

    const botResult = getBotByName(botName as BotName)
    if (!botResult.bot) {
      logger.error({
        message: '‚ùå [DIRECT] –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Bot not found for direct generation',
        botName,
        error: botResult.error,
      })
      console.error(
        `‚ùå [DIRECT] –ë–æ—Ç —Å –∏–º–µ–Ω–µ–º ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω: ${botResult.error}`
      )
      throw new Error(`Bot with name ${botName} not found`)
    }

    const bot = botResult.bot
    logger.info({
      message: '‚úÖ [DIRECT] –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
      description: 'Bot instance retrieved',
      botName,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info({
      message: 'üë§ [DIRECT] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Checking if user exists in database (direct)',
      telegram_id,
    })

    const user = await getUserByTelegramId(ctx)

    if (!user) {
      logger.error({
        message: '‚ùå [DIRECT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        description: 'User not found in database (direct)',
        telegram_id,
      })
      console.error(
        `‚ùå [DIRECT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`
      )

      if (bot && bot.telegram) {
        try {
          await bot.telegram.sendMessage(
            telegram_id,
            is_ru
              ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
              : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
          )
        } catch (sendError) {
          logger.error({
            message:
              '‚ùå [DIRECT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
            description: 'Failed to send error message to user (direct)',
            error:
              sendError instanceof Error ? sendError.message : 'Unknown error',
            telegram_id,
          })
        }
      }

      throw new Error(`User with ID ${telegram_id} not found in database`)
    }

    logger.info({
      message: '‚úÖ [DIRECT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      description: 'User found in database (direct)',
      telegram_id,
      user_id: user.id,
    })

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
    if (user.level === 1) {
      if (!user.level) {
        await updateUserLevelPlusOne(telegram_id, 1)
      } else {
        await updateUserLevelPlusOne(telegram_id, user.level)
      }
    }

    // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    logger.info({
      message: 'üí∞ [DIRECT] –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Calculating generation cost (direct)',
      num_images: validNumImages,
      mode: ModeEnum.NeuroPhoto,
    })

    const costResult = calculateModeCost({
      mode: ModeEnum.NeuroPhoto,
      steps: validNumImages,
    })
    const costPerImage = Number(costResult.stars)
    const totalCost = costPerImage * validNumImages

    logger.info({
      message: 'üí∏ [DIRECT] –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Generation cost calculated (direct)',
      costPerImage,
      totalCost,
      num_images: validNumImages,
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ directPaymentProcessor
    logger.info({
      message: 'üí≥ [DIRECT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã',
      description: 'Processing payment (direct)',
      telegram_id,
      totalCost,
    })

    const paymentOperationId = `payment-${telegram_id}-${Date.now()}-${validNumImages}-${uuidv4()}`

    const paymentResult = await directPaymentProcessor({
      telegram_id,
      amount: totalCost,
      type: PaymentType.MONEY_OUTCOME,
      description: `Payment for generating ${validNumImages} image${
        validNumImages > 1 ? 's' : ''
      } with prompt: ${prompt.slice(0, 50)}...`,
      bot_name: botName,
      service_type: ModeEnum.NeuroPhoto,
      inv_id: paymentOperationId,
      bypass_payment_check:
        options?.bypass_payment_check || ctx?.session?.bypass_payment_check,
      metadata: {
        prompt: prompt.substring(0, 100),
        num_images: validNumImages,
        model_url,
      },
    })

    if (!paymentResult.success) {
      logger.error({
        message: '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Payment processing error (direct)',
        error: paymentResult.error,
        telegram_id,
      })
      console.error(
        `‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${paymentResult.error}`
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É disable_telegram_sending
      if (!options?.disable_telegram_sending) {
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            : '‚ùå Failed to process payment. Please check your balance and try again.'
        )
      } else {
        logger.info({
          message:
            'üîá [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
          description: 'Skipping payment error message (test mode)',
          telegram_id,
        })
      }

      return {
        data: 'Payment failed',
        success: false,
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info({
      message: 'üìê [DIRECT] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω',
      description: 'Getting aspect ratio',
      telegram_id,
      user_id: user.id,
    })

    const aspect_ratio = await getAspectRatio(Number(user.telegram_id))

    logger.info({
      message: 'üìê [DIRECT] –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –ø–æ–ª—É—á–µ–Ω–æ',
      description: 'Aspect ratio retrieved',
      aspect_ratio,
      telegram_id,
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const generatedUrls = []

    for (let i = 0; i < validNumImages; i++) {
      // --- DEBUG LOG ---
      // console.log(
      //   '>>> generateNeuroPhotoDirect: LOOP Iteration',
      //   {
      //     telegram_id: telegram_id,
      //     iteration: i,
      //     totalIterations: validNumImages,
      //     promptSample: prompt ? prompt.substring(0, 70) + '...' : 'null'
      //   }
      // );
      // --- END DEBUG LOG ---
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (!options?.disable_telegram_sending) {
          if (validNumImages > 1) {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${validNumImages}`
                  : `‚è≥ Generating image ${i + 1} of ${validNumImages}`
              )
            } catch (sendError) {
              logger.error({
                message:
                  '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: 'Error sending generation message (direct)',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            }
          } else {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
                {
                  reply_markup: { remove_keyboard: true },
                }
              )
            } catch (sendError) {
              logger.error({
                message:
                  '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: 'Error sending generation message (direct)',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          }
        } else {
          logger.info({
            message:
              'üîá [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
            description: 'Skipping status message (test mode)',
            telegram_id,
            image_index: i,
          })
        }

        logger.info({
          message: 'üé® [DIRECT] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: 'Starting direct image generation',
          telegram_id,
          prompt: prompt.substring(0, 50) + '...',
          model_url,
          iteration: i,
        })

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
        const input = {
          prompt: `${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
          negative_prompt:
            'nsfw, erotic, violence, bad anatomy, bad hands, deformed fingers, blurry, grainy, ugly, lowres',
          num_inference_steps: 40,
          output_format: 'jpg',
          guidance_scale: 3,
          output_quality: 80,
          num_outputs: 1,
          aspect_ratio: aspect_ratio || '1:1',
        }

        // --- DEBUG LOG ---
        // console.log(
        //   '>>> generateNeuroPhotoDirect: Calling Replicate.run with input (num_outputs=1)',
        //   {
        //     telegram_id: telegram_id,
        //     iteration: i,
        //     model_url: model_url,
        //     // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å input, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º, —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        //     inputPromptSample: input.prompt.substring(0,70) + '...',
        //     inputNumOutputs: input.num_outputs
        //   }
        // );
        // --- END DEBUG LOG ---

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        logger.info({
          message: '[DIAGNOSTIC] –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º replicate.run()',
          iteration: i,
          telegram_id,
        }) // –ù–æ–≤—ã–π –ª–æ–≥
        const output = (await replicate.run(
          model_url as `${string}/${string}:${string}`,
          {
            input: input,
          }
        )) as ApiResponse
        logger.info({
          message: '[DIAGNOSTIC] –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ replicate.run()',
          output_is_null: output === null,
          output_is_undefined: output === undefined,
          iteration: i,
          telegram_id,
        }) // –ù–æ–≤—ã–π –ª–æ–≥
        // --- –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç API ---
        logger.info({
          message: 'üîç [DIRECT] –û—Ç–≤–µ—Ç –æ—Ç Replicate API –ø–æ–ª—É—á–µ–Ω',
          telegram_id,
          iteration: i,
          api_output: JSON.stringify(output),
        })
        // ---

        logger.info({
          message: '‚úÖ [DIRECT] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API',
          description: 'API response received (direct)',
          output_type: typeof output,
          telegram_id,
        })

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API-–æ—Ç–≤–µ—Ç
        logger.info({
          message: 'üîç [DIRECT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API Replicate',
          description: 'Processing Replicate API response',
          output_sample: JSON.stringify(output).substring(0, 100) + '...',
        })

        logger.info({
          message: '[DIAGNOSTIC] –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º processApiResponse()',
          iteration: i,
          telegram_id,
        }) // –ù–æ–≤—ã–π –ª–æ–≥
        const imageUrl = await processApiResponse(output)
        logger.info({
          message: '[DIAGNOSTIC] –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ processApiResponse()',
          imageUrl_is_null: imageUrl === null,
          imageUrl_is_undefined: imageUrl === undefined,
          iteration: i,
          telegram_id,
        }) // –ù–æ–≤—ã–π –ª–æ–≥

        // --- –õ–û–ì: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ ---
        logger.info({
          message: 'üîç [DIRECT] –†–µ–∑—É–ª—å—Ç–∞—Ç processApiResponse',
          telegram_id,
          iteration: i,
          processed_image_url: imageUrl,
        })
        // ---

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        if (!imageUrl || !imageUrl.startsWith('http')) {
          logger.error({
            message: '‚ùå [DIRECT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            description: 'Invalid image URL returned from API',
            url: imageUrl,
            output_sample: JSON.stringify(output).substring(0, 100) + '...',
          })
          throw new Error('Invalid image URL from API')
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        let localImageUrl = imageUrl
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
          const savedLocalPath = await saveFileLocally(
            telegram_id,
            imageUrl,
            'neuro-photo-direct',
            '.jpg'
          )

          // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
          if (savedLocalPath) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL + –ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            localImageUrl = imageUrl

            logger.info({
              message: '‚úÖ [DIRECT] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ',
              description: 'Image successfully saved locally',
              localImageUrl,
              savedLocalPath,
              telegram_id,
            })
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Pulse –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          const pulseOptions: MediaPulseOptions = {
            mediaType: 'photo',
            mediaSource: imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            telegramId: telegram_id,
            username: username || 'unknown',
            language: isRussian(ctx) ? 'ru' : 'en',
            serviceType: ModeEnum.NeuroPhoto,
            prompt: prompt, // –ü–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–ù–´–ô –ø—Ä–æ–º–ø—Ç, –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            botName: botName,
            additionalInfo: {
              model_url: model_url,
              aspect_ratio: aspect_ratio || '1:1',
              original_url: imageUrl.substring(0, 50) + '...',
            },
          }

          // ---> –õ–û–ì –ü–ï–†–ï–î –í–´–ó–û–í–û–ú
          logger.info({
            message: 'üö¶ [DIRECT] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ sendMediaToPulse',
            description: 'Options before calling sendMediaToPulse',
            pulseOptions,
            telegram_id,
          })
          // <--- –ö–û–ù–ï–¶ –õ–û–ì–ê

          await sendMediaToPulse(pulseOptions)

          logger.info({
            message: 'üìä [DIRECT] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Pulse',
            description: 'Image sent to Pulse analytics',
            telegram_id,
          })

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
          await savePromptDirect(
            prompt,
            model_url,
            ModeEnum.NeuroPhoto,
            imageUrl,
            telegram_id.toString(),
            'success'
          )

          logger.info({
            message: 'üìù [DIRECT] –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            description: 'Prompt saved to database',
            telegram_id,
          })
        } catch (saveError) {
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º URL
          logger.error({
            message: '‚ö†Ô∏è [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ',
            description: 'Error saving image locally',
            error:
              saveError instanceof Error ? saveError.message : 'Unknown error',
            originalUrl: imageUrl.substring(0, 50) + '...',
            telegram_id,
          })
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º URL, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        }

        // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        generatedUrls.push(localImageUrl)

        // --- –õ–û–ì: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ URL ---
        logger.info({
          message: 'üìù [DIRECT] URL –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤',
          telegram_id,
          iteration: i,
          current_url: localImageUrl.substring(0, 50) + '...',
          all_urls_so_far: generatedUrls.map(u => u.substring(u.length - 10)),
          all_urls_count: generatedUrls.length,
        })
        // ---

        logger.info({
          message: 'üì∏ [DIRECT] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ',
          description: 'Image URL obtained and added to results',
          imageUrl: localImageUrl.substring(0, 50) + '...',
          generatedUrls_count: generatedUrls.length,
          imageUrl_index: generatedUrls.indexOf(localImageUrl),
        })
      } catch (genError) {
        logger.error({
          message: '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: 'Error generating image (direct)',
          error: genError instanceof Error ? genError.message : 'Unknown error',
          prompt: prompt.substring(0, 50) + '...',
          telegram_id,
          index: i,
        })
        console.error(
          `‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}: ${
            genError instanceof Error ? genError.message : 'Unknown error'
          }`
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          if (!options?.disable_telegram_sending) {
            await bot.telegram.sendMessage(
              telegram_id,
              is_ru
                ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú—ã –≤–µ—Ä–Ω–µ–º –≤–∞–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
                : '‚ùå An error occurred while generating the image. We will refund your stars soon.'
            )
          } else {
            logger.info({
              message:
                'üîá [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
              description: 'Skipping generation error message (test mode)',
              telegram_id,
            })
          }
        } catch (sendError) {
          logger.error({
            message: '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
            description: 'Error sending error message (direct)',
            error:
              sendError instanceof Error ? sendError.message : 'Unknown error',
            telegram_id,
          })
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        try {
          const refundAmount = costPerImage
          const refundResult = await directPaymentProcessor({
            telegram_id,
            amount: refundAmount,
            type: PaymentType.REFUND,
            description: is_ru
              ? `–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${prompt.slice(
                  0,
                  30
                )}...`
              : `Refund for failed image generation with prompt: ${prompt.slice(
                  0,
                  30
                )}...`,
            bot_name: botName,
            service_type: ModeEnum.NeuroPhoto,
          })

          if (refundResult.success) {
            logger.info({
              message:
                'üí∞ [DIRECT] –í—ã–ø–æ–ª–Ω–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
              description: 'Refund processed for failed generation (direct)',
              refundAmount,
              telegram_id,
              refundResult,
            })

            try {
              if (!options?.disable_telegram_sending) {
                await bot.telegram.sendMessage(
                  telegram_id,
                  is_ru
                    ? `üí∞ –ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞–º ${refundAmount} –∑–≤–µ–∑–¥ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`
                    : `üí∞ We have refunded you ${refundAmount} stars for the failed image generation.`
                )
              } else {
                logger.info({
                  message:
                    'üîá [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
                  description: 'Skipping refund message (test mode)',
                  telegram_id,
                  refundAmount,
                })
              }
            } catch (sendError) {
              logger.error({
                message: '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ',
                description: 'Error sending refund message (direct)',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          } else {
            logger.error({
              message: '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤',
              description: 'Error processing refund (direct)',
              error: refundResult.error,
              telegram_id,
              refundAmount,
            })
          }
        } catch (refundError) {
          logger.error({
            message: '‚ùå [DIRECT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤',
            description: 'Critical error during refund processing (direct)',
            error:
              refundError instanceof Error
                ? refundError.message
                : 'Unknown error',
            telegram_id,
          })
        }
      }
    }

    logger.info({
      message: 'üéâ [DIRECT] –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
      description: 'All generation tasks successfully completed (direct)',
      urlsCount: generatedUrls.length,
      urls: generatedUrls,
      telegram_id,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö URL –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    const validUrls = generatedUrls.filter(
      url => typeof url === 'string' && url.startsWith('http')
    )

    logger.info({
      message: 'üîÑ [DIRECT] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Preparing generation results',
      all_urls_count: generatedUrls.length,
      valid_urls_count: validUrls.length,
      urls: validUrls,
    })

    if (validUrls.length === 0) {
      logger.warn({
        message: '‚ö†Ô∏è [DIRECT] –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: 'No valid URLs in generation results',
        generatedUrls: generatedUrls,
      })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
    logger.info({
      message: 'üèÅ [DIRECT] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ generateNeuroPhotoDirect',
      description: 'Completing generateNeuroPhotoDirect function',
      success: true,
      url_count: generatedUrls.length,
      telegram_id,
    })

    // –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (generatedUrls.length === 0) {
      logger.error({
        message: '‚ùå [DIRECT] API –Ω–µ –≤–µ—Ä–Ω—É–ª URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: 'API returned success but no image URLs',
        telegram_id,
      })

      return {
        data: 'API returned no images',
        success: false,
      }
    }

    return {
      data: 'Processing completed',
      success: true,
      urls: generatedUrls,
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : 'Unknown error'
    const errorStack = error instanceof Error ? error.stack : undefined

    logger.error({
      message: '‚ùå [DIRECT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Critical error during direct neurophoto generation',
      error: errorMessage,
      stack: errorStack,
      telegram_id,
      session_data: JSON.stringify(ctx.session || {}),
    })

    console.error(
      `‚ùå [DIRECT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${errorMessage}`
    )
    console.error(`üìö [DIRECT] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:`)
    console.error(errorStack)
    console.error(
      `üìä [DIRECT] –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: ${JSON.stringify(ctx.session || {})}`
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try {
      if (
        ctx.reply &&
        typeof ctx.reply === 'function' &&
        !options?.disable_telegram_sending
      ) {
        const errorMessageRu =
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.'
        const errorMessageEn =
          'Sorry, an error occurred while generating the image. We are already working on fixing it.'

        await ctx.reply(isRussian(ctx) ? errorMessageRu : errorMessageEn)
      } else if (options?.disable_telegram_sending) {
        logger.info({
          message:
            'üîá [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
          description: 'Skipping critical error message (test mode)',
          telegram_id,
          errorMessage,
        })
      }
    } catch (replyError) {
      logger.error({
        message: '‚ùå [DIRECT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
        description: 'Failed to send error message (direct)',
        error:
          replyError instanceof Error ? replyError.message : 'Unknown error',
        telegram_id,
      })
    }

    return null
  }
}
