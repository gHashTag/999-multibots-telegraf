import { ApiResponse, GenerationResult } from '@/interfaces'
import { replicate } from '@/core/replicate'
import { savePrompt } from '@/core/supabase'
import { processApiResponse } from '@/helpers/error'
import { pulse } from '@/helpers/pulse'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { processBalanceOperation } from '@/price/helpers'
import { refundUser } from '@/price/helpers/refundUser'
import { calculateFinalPriceInStars } from '@/interfaces/paidServices'
import { MyContext } from '@/interfaces'
import { saveFileLocally } from '@/helpers/saveFileLocally'
import path from 'path'
import fs from 'fs'
import { Markup } from 'telegraf'

// –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è upscaler'–∞
const createUpscalerResultKeyboard = (is_ru: boolean) => {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        is_ru ? '‚¨ÜÔ∏è –ï—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ' : '‚¨ÜÔ∏è Another photo',
        'upscale_another_photo'
      ),
    ],
    [
      Markup.button.callback(
        is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu',
        'go_main_menu'
      ),
    ],
  ])
}

export interface ImageUpscalerParams {
  imageUrl: string
  telegram_id: string
  username: string
  is_ru: boolean
  ctx: MyContext
  originalPrompt?: string
}

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const upscaleImage = async (
  params: ImageUpscalerParams
): Promise<GenerationResult> => {
  const { imageUrl, telegram_id, username, is_ru, ctx, originalPrompt } = params

  // –°—Ç–æ–∏–º–æ—Å—Ç—å upscaling - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ $0.04 —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 50%
  const clarityUpscalerCostUSD = 0.04
  const upscaleCost = calculateFinalPriceInStars(clarityUpscalerCostUSD)

  let balanceCheck: any = null

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balanceCheck = await processBalanceOperation({
      ctx,
      telegram_id: Number(telegram_id),
      paymentAmount: upscaleCost,
      is_ru,
    })

    if (!balanceCheck.success) {
      throw new Error('Not enough stars')
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ upscaling
    await ctx.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Clarity Upscaler...\n\nüéØ –†–µ–∂–∏–º: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${upscaleCost} ‚≠ê`
        : `‚¨ÜÔ∏è Upscaling image quality with Clarity Upscaler...\n\nüéØ Mode: 2x enhancement\nüíé Cost: ${upscaleCost} ‚≠ê`,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    logger.info(`Image upscaling started`, {
      model: 'philz1337x/clarity-upscaler',
      telegram_id,
      originalPrompt: originalPrompt || 'Manual upscale',
      service: 'standalone_upscaler',
    })

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Clarity Upscaler
    const inputParams = {
      image: imageUrl,
      creativity: 0.1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è upscaled –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const output: ApiResponse = (await replicate.run(
      'philz1337x/clarity-upscaler:dfad41707589d68ecdccd1dfa600d55a208f9310748e44bfe35b4a6291453d5e',
      {
        input: inputParams,
      }
    )) as ApiResponse

    const upscaledImageUrl = await processApiResponse(output)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    logger.info('Starting local file save', { telegram_id, upscaledImageUrl })
    const imageLocalPath = await saveFileLocally(
      telegram_id,
      upscaledImageUrl,
      'image-upscaler',
      '.webp'
    )
    logger.info('File saved locally', { telegram_id, imageLocalPath })

    const imageLocalUrl = `/uploads/${telegram_id}/image-upscaler/${path.basename(
      imageLocalPath
    )}`

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    logger.info('Saving prompt to database', { telegram_id })
    const prompt_id = await savePrompt(
      `IMAGE UPSCALER: ${originalPrompt || 'Manual image upscaling'}`,
      'philz1337x/clarity-upscaler',
      imageLocalUrl,
      Number(telegram_id)
    )

    if (prompt_id === null) {
      throw new Error('prompt_id is null')
    }
    logger.info('Prompt saved successfully', { telegram_id, prompt_id })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!fs.existsSync(imageLocalPath)) {
      throw new Error(`File not found: ${imageLocalPath}`)
    }
    logger.info('File exists, preparing to send', {
      telegram_id,
      imageLocalPath,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    logger.info('Sending photo to Telegram', { telegram_id })
    await ctx.telegram.sendPhoto(
      telegram_id,
      {
        source: fs.createReadStream(imageLocalPath),
      },
      {
        caption: is_ru
          ? `‚¨ÜÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞!\n\nüîß –ú–æ–¥–µ–ª—å: Clarity Upscaler\n‚ú® –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${upscaleCost} ‚≠ê${originalPrompt ? `\nüìù –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalPrompt}` : ''}`
          : `‚¨ÜÔ∏è Photo quality enhanced 2x!\n\nüîß Model: Clarity Upscaler\n‚ú® Quality: High resolution\nüíé Cost: ${upscaleCost} ‚≠ê${originalPrompt ? `\nüìù Original image: ${originalPrompt}` : ''}`,
        reply_markup: createUpscalerResultKeyboard(is_ru).reply_markup,
      }
    )
    logger.info('Photo sent successfully', { telegram_id })

    // Pulse –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await pulse(
      imageLocalPath,
      `UPSCALED: ${originalPrompt || 'Manual image upscaling'}`,
      '/image-upscaler',
      telegram_id,
      username,
      is_ru,
      ctx.botInfo?.username ?? 'unknown_bot'
    )

    logger.info(`Image upscaling completed successfully`, {
      prompt_id,
      telegram_id,
      model: 'philz1337x/clarity-upscaler',
      service: 'standalone_upscaler',
    })

    return { image: Buffer.alloc(0), prompt_id }
  } catch (error) {
    logger.error('Image upscaling failed', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: params.telegram_id,
      originalPrompt: params.originalPrompt,
      service: 'standalone_upscaler',
    })

    // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (balanceCheck?.success) {
      logger.info('Refunding user due to upscaling failure', {
        telegram_id: params.telegram_id,
        amount: upscaleCost,
      })
      try {
        await refundUser(params.ctx, upscaleCost)
      } catch (refundError) {
        logger.error('Failed to refund user after upscaling failure', {
          telegram_id: params.telegram_id,
          refundError:
            refundError instanceof Error
              ? refundError.message
              : 'Unknown refund error',
        })
      }
    }

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞.'
    if (error instanceof Error) {
      if (error.message && error.message.includes('Not enough stars')) {
        errorMessageToUser = params.is_ru
          ? '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå Not enough stars for image upscaling.'
      } else if (error.message) {
        const match = error.message.match(/{"detail":"(.*?)"/)
        if (match) {
          errorMessageToUser = `‚ùå ${match[1]}`
        }
      } else {
        errorMessageToUser = params.is_ru
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.'
          : '‚ùå Error occurred during upscaling. Funds have been refunded.'
      }
    }

    await params.ctx.telegram.sendMessage(
      params.telegram_id,
      errorMessageToUser,
      {
        reply_markup: { remove_keyboard: true },
      }
    )

    throw error
  }
}
