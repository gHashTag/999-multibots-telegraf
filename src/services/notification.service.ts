import { getBotByName } from '../core/bot' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å
import type { Telegraf } from 'telegraf'
import { logger } from '../utils/logger' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å –∫ –ª–æ–≥–≥–µ—Ä—É

interface NotificationOptions {
  truncateError?: boolean
  maxLength?: number
}

export class NotificationService {
  private async getBotInstance(botName: string): Promise<Telegraf> {
    // –û—Å—Ç–∞–≤–ª—è–µ–º try-catch, —Ç–∞–∫ –∫–∞–∫ getBotByName –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å { error: ... }
    try {
      const botData = getBotByName(botName) // getBotByName –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
      if (botData.error || !botData.bot) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
        logger.error({
          message: `–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.`,
          error: botData.error,
        })
        throw new Error(`–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: ${botData.error}`)
      }
      return botData.bot
    } catch (error: any) {
      logger.error({
        message: 'ü§ñ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
        botName,
        error: error.message,
      })
      throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  }

  async sendTrainingError(
    telegramId: string | undefined,
    botName: string,
    error: string,
    options: NotificationOptions = {}
  ): Promise<void> {
    if (!telegramId) {
      logger.warn(
        '‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ–±—É—á–µ–Ω–∏—è'
      )
      return
    }

    try {
      const bot = await this.getBotInstance(botName)
      const maxLength = options.maxLength || 2000 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å Telegram API
      let message = error
      if (options.truncateError && error.length > maxLength) {
        message = `‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å):\n${error.substring(0, maxLength)}...`
      } else {
        message = `üö® *–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏*\n\n\`\`\`\n${error}\n\`\`\``
      }

      await bot.telegram.sendMessage(
        telegramId,
        message,
        { parse_mode: 'Markdown' } // parse_mode –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```
      )

      logger.info({
        message: `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`,
        botName,
      })
    } catch (e: any) {
      logger.error({
        message: 'üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ–±—É—á–µ–Ω–∏—è',
        telegramId,
        botName,
        error: e.message,
        stack: e.stack,
      })
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback-–ª–æ–≥–∏–∫—É (email, SMS –∏ —Ç.–¥.)
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
  async sendSuccessNotification(
    telegramId: string,
    botName: string,
    is_ru: boolean
  ): Promise<void> {
    if (!telegramId) {
      logger.warn(
        '‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –æ–±—É—á–µ–Ω–∏—è'
      )
      return
    }
    try {
      const bot = await this.getBotInstance(botName)
      const message = is_ru
        ? 'üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n\n–ù–∞–∂–º–∏—Ç–µ üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å.'
        : 'üéâ Training completed! üéâ\n\nModel is ready to use!\n\nClick üì∏ Neurophoto in the main menu to use the model.'
      await bot.telegram.sendMessage(telegramId, message, {
        parse_mode: 'Markdown', // Markdown –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      })
      logger.info({
        message: `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`,
        botName,
      })
    } catch (error: any) {
      logger.error({
        message: 'üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –æ–±—É—á–µ–Ω–∏—è',
        telegramId,
        botName,
        error: error.message,
        stack: error.stack,
      })
    }
  }
}
