import { errorMessageAdmin } from '@/helpers'

import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'

export class PaymentService {
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Inngest
  public async processPaymentWithInngest(
    roundedIncSum: number,
    inv_id: string
  ): Promise<void> {
    try {
      console.log(
        'üöÄ PaymentService: –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞',
        roundedIncSum
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await inngest.send({
        name: 'payment/process-ai-server',
        data: {
          IncSum: Math.round(Number(roundedIncSum)),
          inv_id,
        },
      })

      logger.info('üîÑ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', {
        description: 'Payment sent for background processing',
        inv_id,
        amount: roundedIncSum,
      })
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:', error)
      errorMessageAdmin(error as Error)
      throw error
    }
  }
}
