import { supabase } from '@/core/supabase'
import { createVoiceElevenLabs } from '@/core/elevenlabs/createVoiceElevenLabs'
import {
  sendServiceErrorToUser,
  sendServiceErrorToAdmin,
} from '@/helpers/error'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { logger } from '@/utils/logger'

export async function createVoiceAvatar(
  fileUrl: string,
  telegram_id: string,
  username: string,
  isRu: boolean,
  ctx: MyContext
): Promise<{ voiceId: string }> {
  try {
    const userExists = await getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }
    const level = userExists.level
    if (level === 6) {
      await updateUserLevelPlusOne(telegram_id, level)
    }
    console.log('createVoiceAvatar', { fileUrl, telegram_id, username, isRu })

    logger.info(
      "[createVoiceAvatar] Attempting to send '‚è≥ Creating...' message",
      { telegram_id }
    )
    await ctx.telegram.sendMessage(
      telegram_id,
      isRu ? '‚è≥ –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä...' : '‚è≥ Creating voice avatar...'
    )
    logger.info(
      "[createVoiceAvatar] '‚è≥ Creating...' message sent. Attempting to call createVoiceElevenLabs",
      { telegram_id }
    )

    const voiceId = await createVoiceElevenLabs({
      fileUrl,
      username,
    })
    logger.info('[createVoiceAvatar] createVoiceElevenLabs call finished.', {
      telegram_id,
      voiceId,
    })

    console.log('Received voiceId:', voiceId)

    if (!voiceId) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: voiceId –Ω–µ –ø–æ–ª—É—á–µ–Ω')
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞')
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ voiceId –≤ —Ç–∞–±–ª–∏—Ü—É users
    const { error } = await supabase
      .from('users')
      .update({ voice_id_elevenlabs: voiceId })
      .eq('username', username)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ voiceId –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error)
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
    }

    await ctx.telegram.sendMessage(
      telegram_id,
      isRu
        ? 'üé§ –ì–æ–ª–æ—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. \n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'
        : 'üé§ Voice for avatar successfully created! \n Use the üéôÔ∏è Text to speech in the menu to check'
    )

    return { voiceId }
  } catch (error) {
    console.error('Error in createVoiceAvatar:', error)
    await sendServiceErrorToUser(ctx, telegram_id, error as Error, isRu)
    await sendServiceErrorToAdmin(ctx, telegram_id, error as Error)
    throw error
  }
}
