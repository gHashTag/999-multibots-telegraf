// –í —Ñ–∞–π–ª–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è generateImageToVideo –Ω–∞ api-server

import { replicate } from '@/core/replicate'
// ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
import { VIDEO_MODELS_CONFIG } from '@/price/models/VIDEO_MODELS_CONFIG'
import { logger } from '@/utils/logger' // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
import { downloadFile } from '@/helpers/downloadFile'
import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { processBalanceVideoOperation } from '@/price/helpers'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import { mkdir, writeFile } from 'fs/promises'
import path from 'path'
// import { errorMessageAdmin } from '@/helpers/errorMessageAdmin' <-- Removed
import { MyContext, VideoModelKey } from '@/interfaces' // <-- Added for ctx type
import { Update } from 'telegraf/types' // <-- Added for ctx type
import { errorMessageAdmin } from '@/helpers/error/errorMessageAdmin' // <-- Corrected path
import { Markup } from 'telegraf' // Added import

interface ReplicateResponse {
  id: string // ID –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–ª—è replicate.run, –Ω–æ output —Ç–æ—á–Ω–æ –µ—Å—Ç—å
  output: string | string[] // Output –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É: –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
export const generateImageToVideo = async (
  ctx: MyContext, // <-- Added ctx
  imageUrl: string | null, // null –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  prompt: string | null, // null –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  videoModel: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot_name: string,
  is_morphing = false, // –ù–æ–≤—ã–π —Ñ–ª–∞–≥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
  imageAUrl: string | null = null, // –ù–æ–≤—ã–π URL A –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  imageBUrl: string | null = null // –ù–æ–≤—ã–π URL B –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
): Promise<{ videoUrl?: string; prediction_id?: string } | string> => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    logger.info('API Server: Start generateImageToVideo (Task)', {
      imageUrl: imageUrl ? 'present' : 'absent',
      prompt: prompt ? 'present' : 'absent',
      videoModel,
      telegram_id,
      username,
      is_ru,
      bot_name,
      is_morphing,
      imageAUrl: imageAUrl ? 'present' : 'absent',
      imageBUrl: imageBUrl ? 'present' : 'absent',
    })

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
    const modelConfig = VIDEO_MODELS_CONFIG[videoModel]
    if (!modelConfig) {
      throw new Error(
        `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ ${videoModel} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`
      )
    }

    // ---> üïâÔ∏è –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ú–û–î–ï–õ–ò –ü–ï–†–ï–ú–ï–©–ï–ù–ê –í–´–®–ï üïâÔ∏è <---
    if (is_morphing) {
      if (!imageAUrl || !imageBUrl) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: imageAUrl –∏ imageBUrl –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞'
        )
      }
      // ---> –ü–†–û–í–ï–†–ö–ê –ù–ê canMorph <---
      if (!modelConfig.canMorph) {
        logger.warn(
          'API Server (Task): Attempt to use non-morphable model for morphing',
          { telegram_id, videoModel }
        )
        throw new Error(
          is_ru
            ? `–ú–æ–¥–µ–ª—å ${modelConfig.title} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –º–æ—Ä—Ñ–∏–Ω–≥–∞.`
            : `Model ${modelConfig.title} does not support morphing mode.`
        )
      }
      logger.info('API Server (Task): Morphing mode detected', { telegram_id })
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
      if (!imageUrl) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: imageUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
        )
      }
      if (!prompt) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
        )
      }
      // ---> –ü–†–û–í–ï–†–ö–ê –ù–ê imageKey <---
      if (!modelConfig.imageKey) {
        logger.warn(
          'API Server (Task): Attempt to use model without imageKey for standard mode',
          { telegram_id, videoModel }
        )
        throw new Error(
          `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç imageKey –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ ${videoModel}`
        )
      }
      logger.info('API Server (Task): Standard mode detected', { telegram_id })
    }
    // –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!videoModel || !telegram_id || !username || !bot_name) {
      throw new Error(
        '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      )
    }
    // ---> –°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ canMorph –∏ imageKey —É–¥–∞–ª–µ–Ω–∞ –æ—Ç—Å—é–¥–∞ <---

    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò—Å–ø–æ–ª—å–∑—É–µ–º ctx) ---
    const userExists = await getUserByTelegramId(ctx) // Pass ctx
    if (!userExists) {
      throw new Error(
        `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
      )
    }
    const level = userExists.level
    if (level === 8) {
      // –ò–ª–∏ –∫–∞–∫–∞—è —Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è? –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ.
      await updateUserLevelPlusOne(telegram_id, level) // Keep using telegram_id here for DB consistency
      logger.info('API Server (Task): User level updated', {
        telegram_id,
        oldLevel: level,
      })
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–ò—Å–ø–æ–ª—å–∑—É–µ–º ctx) ---
    const balanceResult = await processBalanceVideoOperation(
      ctx,
      videoModel,
      is_ru
    )

    if (!balanceResult.success) {
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –æ—Ç–≤–µ—Ç 202 —É–∂–µ —É—à–µ–ª
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      logger.error('API Server (Task): Balance check failed', {
        telegram_id,
        error: balanceResult.error,
      })
      throw new Error(
        balanceResult.error || '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å'
      )
    }
    const { newBalance, paymentAmount } = balanceResult
    logger.info('API Server (Task): Balance sufficient and deducted', {
      telegram_id,
      paymentAmount,
      newBalance,
    })

    // --- –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ..." ---
    // await ctx.telegram.sendMessage(...) // Use ctx.reply or ctx.telegram if needed

    // --- –í—ã–∑–æ–≤ Replicate (–æ—Å—Ç–∞–µ—Ç—Å—è replicate.run) ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    const runModel = async (
      model: `${string}/${string}` | `${string}/${string}:${string}`,
      input: any
    ): Promise<unknown> => {
      logger.info('API Server (Task): Calling replicate.run', {
        model,
        inputKeys: Object.keys(input),
        telegram_id,
      })
      const result = await replicate.run(model, {
        input,
      })
      logger.info('API Server (Task): replicate.run finished', { telegram_id })
      return result
    }

    // --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Input –¥–ª—è Replicate ---
    const replicateModelId: string = modelConfig.api.model // –ü–æ–ª–Ω—ã–π ID –º–æ–¥–µ–ª–∏ 'owner/model:version'

    let modelInput: any = {}

    if (is_morphing) {
      // --- Input –¥–ª—è –ú–æ—Ä—Ñ–∏–Ω–≥–∞ --- UPDATED for Kling
      if (videoModel.startsWith('kling-') && modelConfig.imageKey) {
        // Specific handling for Kling based on error -> Re-adding end_image
        modelInput = {
          ...modelConfig.api.input,
          [modelConfig.imageKey]: imageAUrl, // Use imageA as the start_image
          end_image: imageBUrl, // Try adding imageB as end_image
          prompt: prompt || '', // Use provided prompt or empty string
        }
        logger.info(
          'API Server (Task): Prepared Replicate input for Kling morphing (with start_image and end_image)',
          {
            telegram_id,
            inputKeys: Object.keys(modelInput),
          }
        )
      } else {
        // Default morphing input for other potential models
        modelInput = {
          ...modelConfig.api.input,
          image_a: imageAUrl, // –ü–µ—Ä–µ–¥–∞–µ–º URL
          image_b: imageBUrl, // –ü–µ—Ä–µ–¥–∞–µ–º URL
          prompt: prompt || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        }
        logger.info(
          'API Server (Task): Prepared Replicate input for generic morphing',
          {
            telegram_id,
            inputKeys: Object.keys(modelInput),
          }
        )
      }
    } else {
      // --- Input –¥–ª—è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ---
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (!imageUrl || !prompt) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ imageUrl/prompt –ø—Ä–æ–≤–∞–ª–µ–Ω–∞'
        ) // –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞
      }
      if (!modelConfig.imageKey) {
        // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è imageKey –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        throw new Error(
          `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç imageKey –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ ${videoModel}`
        )
      }
      // –£–ë–ò–†–ê–ï–ú –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –ö–û–ù–í–ï–†–¢–ê–¶–ò–Æ –í DATA URI
      // const imageBuffer = await downloadFile(imageUrl)
      // // Convert buffer to data URI string
      // const imageMimeType = 'image/jpeg'; // Assuming JPEG, adjust if needed or detect dynamically
      // const imageDataUri = `data:${imageMimeType};base64,${imageBuffer.toString('base64')}`;

      modelInput = {
        ...modelConfig.api.input,
        prompt,
        aspect_ratio: userExists.aspect_ratio, // –°–æ—Ö—Ä–∞–Ω—è–µ–º aspect_ratio
        [modelConfig.imageKey]: imageUrl, // <--- –ü–ï–†–ï–î–ê–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô imageUrl
      }
      logger.info(
        'API Server (Task): Prepared Replicate input for standard (with direct URL)',
        {
          // Updated log message
          telegram_id,
          inputKeys: Object.keys(modelInput),
        }
      )
    }

    // --- –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ Replicate ---
    const replicateResult = await runModel(replicateModelId as any, modelInput) // –í—ã–∑—ã–≤–∞–µ–º runModel, –ø–æ–ª—É—á–∞–µ–º unknown

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate ---
    let videoUrl: string | undefined
    if (
      Array.isArray(replicateResult) &&
      replicateResult.length > 0 &&
      typeof replicateResult[0] === 'string'
    ) {
      videoUrl = replicateResult[0]
    } else if (typeof replicateResult === 'string') {
      videoUrl = replicateResult
    } else {
      logger.error(
        'API Server (Task): Failed to extract video URL from Replicate',
        {
          telegram_id,
          replicateResult,
        }
      )
      // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–∞ –Ω–∏–∂–µ
      throw new Error(
        'Server Error: Failed to extract video URL from Replicate response'
      )
    }

    logger.info('API Server (Task): Video URL extracted', {
      telegram_id,
      videoUrl,
    })

    // --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ --- –ü–û–†–Ø–î–û–ö –ò–°–ü–†–ê–í–õ–ï–ù
    const videoFileName = `${Date.now()}_${path.basename(videoUrl || 'video.mp4')}`
    const userUploadDir = path.join('uploads', telegram_id, 'image-to-video')
    const localVideoPath = path.join(userUploadDir, videoFileName)

    // 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    const videoBuffer = await downloadFile(videoUrl)
    logger.info('API Server (Task): Video downloaded', {
      telegram_id,
      url: videoUrl,
    })

    // 2. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await mkdir(userUploadDir, { recursive: true })
    logger.info('API Server (Task): Directory created/ensured', {
      telegram_id,
      path: userUploadDir,
    })

    // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    await writeFile(localVideoPath, videoBuffer)
    logger.info('API Server (Task): Video saved locally', {
      telegram_id,
      path: localVideoPath,
    })

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î --- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    await saveVideoUrlToSupabase(
      telegram_id,
      videoUrl,
      localVideoPath,
      modelConfig.id as VideoModelKey
    )
    logger.info('API Server (Task): Video URL saved to DB', { telegram_id })

    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é --- –ò–°–ü–†–ê–í–õ–Ø–ï–ú –î–û–°–¢–£–ü –ö TELEGRAM
    const botInstanceData = getBotByName(bot_name)
    if (!botInstanceData || !botInstanceData.bot) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ botInstanceData –∏ botInstanceData.bot
      throw new Error(
        `Bot instance or bot object not found for name: ${bot_name}`
      )
    }
    const bot = botInstanceData.bot // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç Telegraf

    await bot.telegram.sendVideo(
      telegram_id,
      { source: localVideoPath },
      {
        // ... –æ–ø—Ü–∏–∏ ...
      }
    )
    logger.info('API Server (Task): Video sent to user', { telegram_id })

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –ü–û–°–õ–ï –≤–∏–¥–µ–æ ---
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç–æ–∏–º–æ—Å—Ç—å: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} ‚≠êÔ∏è.`
        : `‚úÖ Done! Cost: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è. Your new balance: ${newBalance.toFixed(2)} ‚≠êÔ∏è.`
    )
    logger.info('API Server (Task): Balance message sent to user', {
      telegram_id,
    })

    // --- –õ–æ–≥–∏–∫–∞ Pulse (–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ---
    // if (pulse) {
    //   await pulse(...);
    //   logger.info('API Server (Task): Sent to Pulse', { telegram_id });
    // }

    return { videoUrl } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL
  } catch (error: any) {
    logger.error('API Server (Task): Error in generateImageToVideo task', {
      telegram_id,
      errorType: typeof error,
      errorDetails: { message: error.message, stack: error.stack },
    })
    // Send error message to admin - –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    errorMessageAdmin(ctx, error)
    throw error // Re-throw the error to reject the promise
  }
}
