import { createWriteStream } from 'fs'
import path from 'path'
import os from 'os'
import { elevenlabs } from '@/core/elevenlabs'

import { InputFile } from 'telegraf/typings/core/types/typegram'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import {
  sendServiceErrorToUser,
  sendServiceErrorToAdmin,
} from '@/helpers/error'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import { calculateFinalStarPrice } from '@/price/calculator'
import { processBalanceOperation } from '@/price/helpers'
import { PaymentType } from '@/interfaces/payments.interface'
import { getBotByName } from '@/core/bot'
import { toBotName } from '@/helpers/botName.helper'
import logger from '@/utils/logger'

export const generateSpeech = async ({
  text,
  voice_id,
  telegram_id,
  is_ru,
  bot_name,
  ctx,
}: {
  text: string
  voice_id: string
  telegram_id: string
  is_ru: boolean
  bot_name: string
  ctx: MyContext
}): Promise<{ audioUrl: string }> => {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ - –í–ù–ï –ø—Ä–æ–º–∏—Å–∞
  console.log('telegram_id', telegram_id)
  const userExists = await getUserByTelegramIdString(telegram_id)
  console.log('userExists', userExists)
  if (!userExists) {
    throw new Error(`User with ID ${telegram_id} does not exist.`)
  }
  const level = userExists.level
  if (level === 7) {
    await updateUserLevelPlusOne(telegram_id, level)
  }

  const costResult = calculateFinalStarPrice(ModeEnum.TextToSpeech)
  if (!costResult) {
    throw new Error('Could not calculate the cost for TextToSpeech.')
  }
  const paymentAmount = costResult.stars

  const balanceCheck = await processBalanceOperation({
    ctx,
    telegram_id: Number(telegram_id),
    paymentAmount,
    is_ru,
  })

  if (!balanceCheck.success) {
    throw new Error(balanceCheck.error)
  }

  if (!process.env.ELEVENLABS_API_KEY) {
    throw new Error('ELEVENLABS_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const botResult = getBotByName(toBotName(bot_name))
  if (!botResult.bot) {
    // –ï—Å–ª–∏ –±–æ—Ç–∞ –Ω–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –±–µ–∑ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.error('Failed to get bot instance in generateSpeech', {
      bot_name,
      error: botResult.error,
      telegram_id,
    })
    throw new Error(`Bot instance ${bot_name} not found.`)
  }
  const bot = botResult.bot // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞

  // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ API –∏ –ø–æ—Ç–æ–∫–æ–≤ - –í–ù–ï –ø—Ä–æ–º–∏—Å–∞ (–Ω–æ –≤ try/catch)
  let audioStream
  try {
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...' : '‚è≥ Generating audio...'
    )

    audioStream = await elevenlabs.generate({
      voice: voice_id,
      model_id: 'eleven_turbo_v2_5',
      text,
    })
  } catch (error: any) {
    console.error('Error during API call or message sending:', error)
    await sendServiceErrorToUser(bot_name, telegram_id, error as Error, is_ru)
    await sendServiceErrorToAdmin(bot_name, telegram_id, error as Error)
    // –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤–Ω–µ—à–Ω–∏–º try/catch, –µ—Å–ª–∏ generateSpeech –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
    throw error
  }

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –∏ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏ - –í–ù–ï –ø—Ä–æ–º–∏—Å–∞
  const audioUrl = path.join(os.tmpdir(), `audio_${Date.now()}.mp3`)
  const writeStream = createWriteStream(audioUrl)

  // 4. –ü—Ä–æ–º–∏—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
  await new Promise<void>((resolve, reject) => {
    writeStream.on('finish', async () => {
      try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
        const audio = { source: audioUrl }
        await bot.telegram.sendAudio(telegram_id, audio as InputFile, {
          reply_markup: {
            keyboard: [
              [
                {
                  text: is_ru ? 'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å' : 'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å',
                },
                { text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' },
              ],
            ],
          },
        })
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${(balanceCheck.newBalance || 0).toFixed(2)} ‚≠êÔ∏è`
            : `Cost: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è\nYour balance: ${(balanceCheck.newBalance || 0).toFixed(2)} ‚≠êÔ∏è`
        )
        resolve() // –ü—Ä–æ–º–∏—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω
      } catch (sendError) {
        console.error(
          'Error sending audio or message after write finish:',
          sendError
        )
        // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        try {
          await sendServiceErrorToAdmin(
            bot_name,
            telegram_id,
            sendError as Error
          )
        } catch (adminError) {
          console.error('Failed to send error to admin:', adminError)
        }
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        reject(sendError)
      }
    })

    writeStream.on('error', async error => {
      console.error('Error writing audio file:', error)
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        await sendServiceErrorToUser(
          bot_name,
          telegram_id,
          error as Error,
          is_ru
        )
        await sendServiceErrorToAdmin(bot_name, telegram_id, error as Error)
      } catch (notifyError) {
        console.error('Failed to send write error notification:', notifyError)
      }
      reject(error) // –ü—Ä–æ–º–∏—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
    audioStream.pipe(writeStream)
  })

  // 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞
  return { audioUrl }

  // –í–Ω–µ—à–Ω–∏–π try/catch –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∏ API/–ø–æ—Ç–æ–∫–æ–≤
  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏ –ª–∏–±–æ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è (API), –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω—è—é—Ç –ø—Ä–æ–º–∏—Å (–∑–∞–ø–∏—Å—å)
}
