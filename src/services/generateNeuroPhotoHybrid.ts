import axios, { isAxiosError } from 'axios'
import {
  isDev,
  SECRET_API_KEY,
  API_SERVER_URL,
  LOCAL_SERVER_URL,
} from '@/config'
import { isRussian } from '@/helpers/language'
import { MyContext, ModelUrl } from '@/interfaces'
import { logger } from '@/utils/logger'
import { generateNeuroPhotoDirect } from './generateNeuroPhotoDirect'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –ì–∏–±—Ä–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ neuro_photo:
 * –ü–ª–∞–Ω –ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
 * –ü–ª–∞–Ω –ë: –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
 *
 * –ò–°–ü–†–ê–í–õ–Ø–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –û–ö–†–£–ì–õ–ï–ù–ò–Ø: –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É 7.5‚≠ê –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
export async function generateNeuroPhotoHybrid(
  prompt: string,
  model_url: ModelUrl,
  numImages: number,
  telegram_id: string,
  ctx: MyContext,
  botName: string,
  explicitAspectRatio?: string | null
): Promise<{ data: string; success: boolean; urls?: string[] } | null> {
  logger.info({
    message: 'üîÑ [HYBRID] –ù–∞—á–∞–ª–æ –≥–∏–±—Ä–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ neuro_photo',
    telegram_id,
    numImages,
    prompt: prompt.substring(0, 50) + '...',
    model_url,
    botName,
  })

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!ctx.session.prompt) {
    throw new Error('Prompt not found')
  }

  if (!ctx.session.userModel) {
    throw new Error('User model not found')
  }

  if (!numImages || numImages <= 0) {
    throw new Error('Invalid number of images')
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ë–ï–ó –û–ö–†–£–ì–õ–ï–ù–ò–Ø!)
  const costResult = calculateModeCost({
    mode: ModeEnum.NeuroPhoto,
    steps: numImages,
  })
  const exactCostPerImage = Number(costResult.stars) // 7.5‚≠ê
  const exactTotalCost = exactCostPerImage * numImages

  logger.info({
    message: 'üí∞ [HYBRID] –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    exactCostPerImage,
    exactTotalCost,
    numImages,
  })

  // –ü–õ–ê–ù –ê: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å —Ç–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π
  try {
    logger.info({
      message: 'üåê [HYBRID] –ü–ª–∞–Ω –ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
      telegram_id,
    })

    await ctx.telegram.sendChatAction(ctx.chat.id, 'typing')

    const url = `${isDev ? LOCAL_SERVER_URL : API_SERVER_URL}/generate/neuro-photo`

    const serverPayload = {
      prompt,
      model_url,
      num_images: numImages,
      telegram_id,
      username: ctx.from?.username,
      is_ru: isRussian(ctx),
      bot_name: botName,
      // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      exact_cost_per_image: exactCostPerImage, // 7.5‚≠ê
      exact_total_cost: exactTotalCost,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
      user_model: ctx.session.userModel,
      aspect_ratio: explicitAspectRatio,
    }

    logger.info({
      message: 'üì§ [HYBRID] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
      url,
      exact_cost_per_image: exactCostPerImage,
      exact_total_cost: exactTotalCost,
    })

    const response = await axios.post(url, serverPayload, {
      headers: {
        'Content-Type': 'application/json',
        'x-secret-key': SECRET_API_KEY,
      },
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    })

    logger.info({
      message: '‚úÖ [HYBRID] –ü–ª–∞–Ω –ê —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª',
      telegram_id,
      response_status: response.status,
    })

    return response.data
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    if (isAxiosError(error)) {
      logger.warn({
        message: '‚ö†Ô∏è [HYBRID] –ü–ª–∞–Ω –ê –Ω–µ—É–¥–∞—á–µ–Ω - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        telegram_id,
        error_status: error.response?.status,
        error_message: error.response?.data?.error || error.message,
        error_code: error.code,
      })

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NSFW
      if (error.response?.data?.error?.includes('NSFW')) {
        await ctx.reply(
          isRussian(ctx)
            ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.'
            : 'Sorry, image generation failed due to inappropriate content detection.'
        )
        return null
      }
    } else {
      logger.warn({
        message: '‚ö†Ô∏è [HYBRID] –ü–ª–∞–Ω –ê –Ω–µ—É–¥–∞—á–µ–Ω - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        telegram_id,
        error: String(error),
      })
    }

    // –ü–õ–ê–ù –ë: –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    logger.info({
      message: 'üîÑ [HYBRID] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ü–ª–∞–Ω –ë: –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
      telegram_id,
    })

    try {
      const localResult = await generateNeuroPhotoDirect(
        prompt,
        model_url,
        numImages,
        telegram_id,
        ctx,
        botName,
        explicitAspectRatio,
        {
          disable_telegram_sending: false, // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
          bypass_payment_check: false, // –ù–ï –æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞
        }
      )

      if (localResult && localResult.success) {
        logger.info({
          message: '‚úÖ [HYBRID] –ü–ª–∞–Ω –ë —É—Å–ø–µ—à–µ–Ω - –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
          telegram_id,
        })
      } else {
        logger.error({
          message:
            '‚ùå [HYBRID] –ü–ª–∞–Ω –ë –Ω–µ—É–¥–∞—á–µ–Ω - –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å',
          telegram_id,
        })
      }

      return localResult
    } catch (localError) {
      logger.error({
        message: '‚ùå [HYBRID] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –æ–±–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å',
        telegram_id,
        server_error: String(error),
        local_error: String(localError),
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        isRussian(ctx)
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred during image generation. Please try again later.'
      )

      return null
    }
  }
}
