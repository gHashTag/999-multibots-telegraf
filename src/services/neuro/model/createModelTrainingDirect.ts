import { MyContext } from '@/interfaces/telegram-bot.interface'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/mode.interface'
import {
  ModelTrainingConfig,
  validateModelFile,
  uploadModelFile,
  cleanupModelFiles,
  getModelTrainingMessages,
  generateModelRequestId,
} from '@/services/shared/model.utils'

export interface ModelTrainingDirectResult {
  success: boolean
  error?: string
  requestId?: string
}

export const createModelTrainingDirect = async (
  ctx: MyContext,
  filePath: string,
  config: ModelTrainingConfig,
  sendMessage = true
): Promise<ModelTrainingDirectResult> => {
  const requestId = generateModelRequestId(config.telegram_id, config.modelName)

  try {
    logger.info({
      message: 'üöÄ –ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏',
      modelName: config.modelName,
      telegram_id: config.telegram_id,
      requestId,
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const modelFile = await validateModelFile(filePath)

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const uploadResult = await uploadModelFile(modelFile)
    if (!uploadResult.success || !uploadResult.url) {
      throw new Error(uploadResult.error || 'Failed to upload model file')
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ —Å–µ—Å—Å–∏–∏
    const apiVersion = ctx.session.mode === ModeEnum.PROD ? 'v2' : 'v1'

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    const apiData = {
      model_url: uploadResult.url,
      trigger_word: config.triggerWord,
      steps: config.steps,
      request_id: requestId,
      api_version: apiVersion,
    }

    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info({
      message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ API',
      apiData,
      requestId,
    })

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await cleanupModelFiles(filePath)

    if (sendMessage) {
      const messages = getModelTrainingMessages(ctx.session.is_ru)
      await ctx.reply(messages.success, { parse_mode: 'HTML' })
    }

    return {
      success: true,
      requestId,
    }

  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏',
      error: error instanceof Error ? error.message : 'Unknown error',
      requestId,
    })

    if (sendMessage) {
      const messages = getModelTrainingMessages(ctx.session.is_ru)
      await ctx.reply(messages.error(error instanceof Error ? error.message : 'Unknown error'), {
        parse_mode: 'HTML',
      })
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}