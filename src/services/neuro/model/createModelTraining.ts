import { MyContext } from '@/interfaces/telegram-bot.interface'
import { inngest } from '@/services/inngest.service'
import { logger } from '@/utils/logger'
import { isDev, isTest } from '@/config'
import { createModelTrainingDirect } from './createModelTrainingDirect'
import {
  ModelTrainingConfig,
  generateModelRequestId,
  getModelTrainingMessages,
} from '../../shared/model.utils'
import { ModelTrainingRequest, ModelTrainingDirectResult } from '@/interfaces/neuro/model.interface'

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Inngest
export interface ModelTrainingResult {
  success: boolean
  error?: string
  eventId?: string
  direct?: boolean
  requestId?: string
  bot_name?: string
  message?: string
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–æ—Ç–∞
 */
const verifyEnvironmentAndBot = (botName: string): boolean => {
  if (isDev || isTest) {
    const testBotName = process.env.TEST_BOT_NAME || ''
    const isCorrectBot = botName === testBotName

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:', {
      description: isDev ? 'Checking development bot' : 'Checking test bot',
      test_bot_name: testBotName,
      current_bot_name: botName,
      is_correct_bot: isCorrectBot,
    })

    return isCorrectBot
  }

  // –í production –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
  const testBotName = process.env.TEST_BOT_NAME || ''
  return botName !== testBotName
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Inngest —Å fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
 */
export async function createModelTraining(
  config: ModelTrainingConfig,
  ctx: MyContext
): Promise<ModelTrainingResult> {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Inngest
    const response = await inngest.send({
      name: 'model/training.create',
      data: {
        config,
        telegram_id: ctx.message?.from?.id.toString() || '',
        is_ru: ctx.session?.is_ru || false
      }
    }) as unknown as { id: string; success: boolean }

    return {
      success: true,
      eventId: response.id
    }
  } catch (error) {
    logger.error('Failed to create model training via Inngest, falling back to direct', {
      error: error instanceof Error ? error.message : 'Unknown error'
    })

    // Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    const directResult = await createModelTrainingDirect(
      ctx,
      config.filePath,
      config,
      true // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    )
    return {
      success: directResult.success,
      error: directResult.error,
      direct: true,
      requestId: directResult.requestId
    }
  }
}

export async function createModelTrainingOld(
  filePath: string,
  config: ModelTrainingConfig,
  ctx: MyContext
): Promise<ModelTrainingResult> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –±–æ—Ç–∞
    const isCorrectEnvironment = verifyEnvironmentAndBot(config.botName)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
    const requestId = generateModelRequestId(config.telegram_id, config.modelName)

    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏',
      request_id: requestId,
      model_name: config.modelName,
      telegram_id: config.telegram_id,
      environment: isDev ? 'development' : isTest ? 'test' : 'production',
    })

    let useDirectGeneration = false

    try {
      // –ü–ª–∞–Ω A: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest
      logger.info('üîÑ –ü–ª–∞–Ω A: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest', {
        description: 'Trying to use Inngest (Plan A)',
        request_id: requestId,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
      if (isCorrectEnvironment) {
        const messages = getModelTrainingMessages(config.is_ru)
        await ctx.replyWithHTML(messages.started)
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      const eventName = ctx.session?.mode === 'DigitalAvatarBodyV2'
        ? 'model-training/v2/requested'
        : 'model-training/start'

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
      await inngest.send({
        id: requestId,
        name: eventName,
        data: {
          ...config,
          filePath,
        },
      })

      logger.info('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Inngest', {
        request_id: requestId,
        event_name: eventName,
      })

      return {
        success: true,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        bot_name: config.botName,
      }
    } catch (inngestError) {
      // –ï—Å–ª–∏ Inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      useDirectGeneration = true

      logger.info('‚ö†Ô∏è –ü–ª–∞–Ω B: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', {
        description: 'Switching to direct generation (Plan B)',
        error: inngestError instanceof Error ? inngestError.message : String(inngestError),
        request_id: requestId,
      })
    }

    // –ü–ª–∞–Ω B: –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if (useDirectGeneration) {
      if (isCorrectEnvironment) {
        await ctx.replyWithHTML('‚öôÔ∏è...')
      }

      const directResult = await createModelTrainingDirect(
        ctx,
        filePath,
        config,
        !isCorrectEnvironment
      )

      if (!directResult.success) {
        throw new Error(directResult.error || 'Unknown error in direct generation')
      }

      return {
        success: true,
        message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ (–ø—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)',
        requestId: directResult.requestId,
        bot_name: config.botName,
      }
    }

    throw new Error('Unexpected flow: neither Inngest nor direct generation was used')
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', {
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined,
      model_name: config.modelName,
      telegram_id: config.telegram_id,
    })

    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏',
      error: errorMessage,
      bot_name: config.botName,
    }
  }
} 