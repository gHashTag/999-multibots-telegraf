import axios, { AxiosError, AxiosResponse } from 'axios'
import FormData from 'form-data'
import fs from 'fs'
import path from 'path'
import {
  isDev,
  SECRET_API_KEY,
  ELESTIO_URL,
  LOCAL_SERVER_URL,
  UPLOAD_DIR,
  API_URL,
} from '@/config'
import { MyContext } from '@/interfaces'
import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'

interface ModelTrainingRequest {
  filePath: string
  triggerWord: string
  modelName: string
  telegram_id: string
  is_ru: boolean
  steps: number
  botName: string
}

interface ModelTrainingResponse {
  message: string
  model_id?: string
  bot_name?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ base64
async function encodeFileToBase64(filePath: string): Promise<string> {
  try {
    const fileBuffer = fs.readFileSync(filePath)
    return fileBuffer.toString('base64')
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64',
      error: error.message,
      filePath,
    })
    throw error
  }
}

export async function createModelTraining(
  requestData: ModelTrainingRequest,
  ctx: MyContext
): Promise<ModelTrainingResponse> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Inngest',
      requestData: {
        ...requestData,
        filePath: `${requestData.filePath.substring(0, 20)}...`, // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø—É—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      },
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(requestData.filePath)) {
      throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + requestData.filePath)
    }

    // –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
    logger.info({
      message: 'üì¶ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ZIP —Ñ–∞–π–ª–∞ –≤ base64',
      filePath: requestData.filePath,
    })

    const encodedZip = await encodeFileToBase64(requestData.filePath)

    logger.info({
      message: '‚úÖ ZIP —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω',
      filePath: requestData.filePath,
      encodedLength: encodedZip.length,
    })

    logger.info({
      message: 'üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest',
      modelName: requestData.modelName,
      telegramId: requestData.telegram_id,
      encodedZip: encodedZip,
    })

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let eventName = 'model-training/start'
    const zipUrl = await uploadFileAndGetUrl(requestData.filePath)
    logger.info({
      message: 'üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest',
      modelName: requestData.modelName,
      telegramId: requestData.telegram_id,
      encodedZip: encodedZip,
      zipUrl: zipUrl,
    })

    // –î–ª—è digital_avatar_body_2 –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if (ctx.session.mode === 'digital_avatar_body_2') {
      eventName = 'model-training/v2/requested'
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: eventName,
      data: {
        zipUrl,
        triggerWord: requestData.triggerWord,
        modelName: requestData.modelName,
        steps: requestData.steps,
        telegram_id: requestData.telegram_id,
        is_ru: requestData.is_ru,
        bot_name: requestData.botName,
      },
    })

    logger.info({
      message: '‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
      eventId,
      telegram_id: requestData.telegram_id,
    })

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await fs.promises.unlink(requestData.filePath)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const isRu = requestData.is_ru === true
    await ctx.replyWithHTML(
      isRu
        ? 'üîÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.'
        : 'üîÑ <b>Model training request sent!</b>\n\nThis may take several hours. I will send a notification when the model is ready.'
    )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return {
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.',
      bot_name: requestData.botName,
    }
  } catch (error) {
    logger.error({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      error: error.message,
      stack: error.stack,
      requestData: {
        modelName: requestData.modelName,
        telegram_id: requestData.telegram_id,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    const isRu = requestData.is_ru === true
    await ctx.replyWithHTML(
      isRu
        ? `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n${error.message}`
        : `‚ùå <b>Error while starting training:</b>\n\n${error.message}`
    )

    throw error
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è URL
async function uploadFileAndGetUrl(filePath: string): Promise<string> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const fileStats = fs.statSync(filePath)
    const fileSizeMB = fileStats.size / (1024 * 1024)

    logger.info({
      message: 'üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏',
      fileSizeMB: fileSizeMB.toFixed(2) + ' –ú–ë',
      fileSize: fileStats.size,
    })

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const fileName = path.basename(filePath)
    const timestamp = Date.now()
    const permanentDir = path.join(UPLOAD_DIR, 'training_archives')

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(permanentDir)) {
      fs.mkdirSync(permanentDir, { recursive: true })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const destFileName = `${path.parse(fileName).name}_${timestamp}${
      path.parse(fileName).ext
    }`
    const destPath = path.join(permanentDir, destFileName)

    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fs.copyFileSync(filePath, destPath)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API_URL
    const fullUrl = `${API_URL}/uploads/training_archives/${destFileName}`

    logger.info({
      message: '‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL',
      path: destPath,
      fullUrl,
      urlLength: fullUrl.length,
    })

    return fullUrl
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞',
      error: error.message,
    })
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`)
  }
}
