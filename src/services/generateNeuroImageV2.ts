import { v4 as uuidv4 } from 'uuid'
import { inngest } from '@/inngest-functions/clients'
import { TelegramId } from '@/interfaces/telegram.interface'
import { isRussian } from '@/helpers/language'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

export async function generateNeuroImageV2(
  prompt: string,
  numImages: number,
  telegram_id: TelegramId,
  ctx: MyContext,
  botName: string
): Promise<{ data: string } | null> {
  logger.info({
    message: 'üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeurophotoV2',
    description: 'Starting NeurophotoV2 generation',
    prompt: prompt.substring(0, 50) + '...',
    numImages,
    telegram_id,
    botName,
    hasPrompt: !!ctx.session.prompt,
    hasUserModel: !!ctx.session.userModel,
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    if (!prompt && !ctx.session.prompt) {
      logger.error({
        message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: 'No prompt found for generation',
        telegram_id,
        session_data: JSON.stringify(ctx.session || {}),
      })
      throw new Error('Prompt not found')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–µ–π
    if (!ctx.session.userModel) {
      logger.warn({
        message: '‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
        description: 'User model not found, but continuing generation',
        telegram_id,
        session_data: JSON.stringify(ctx.session || {}),
      })
    }

    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ numImages –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const validNumImages = numImages && numImages > 0 ? numImages : 1

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const uniqueId = `neuro-photo-v2-${uuidv4()}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const response = await inngest.send({
      id: uniqueId,
      name: 'neuro/photo-v2.generate',
      data: {
        prompt: prompt || ctx.session.prompt,
        num_images: validNumImages,
        telegram_id,
        is_ru: isRussian(ctx),
        bot_name: botName,
        username: ctx.from?.username,
      },
    })

    logger.info({
      message: '‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
      description: 'Event successfully sent to Inngest',
      event_id: uniqueId,
      response: JSON.stringify(response),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    await ctx.reply(
      isRussian(ctx)
        ? 'üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        : 'üöÄ Your image generation request has been accepted! The result will be sent to this chat shortly.'
    )

    return { data: 'Processing started' }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest',
      description: 'Error sending event to Inngest',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id,
      session_data: JSON.stringify(ctx.session || {}),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(
      isRussian(ctx)
        ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 1.1.1'
        : 'üòî An error occurred while sending the request. Please try again later. Neurophoto 1.1.1'
    )

    return null
  }
}
