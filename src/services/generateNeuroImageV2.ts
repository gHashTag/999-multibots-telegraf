import { v4 as uuidv4 } from 'uuid'
import { inngest } from '@/inngest-functions/clients'
import { TelegramId } from '@/interfaces/telegram.interface'
import { isRussian } from '@/helpers/language'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { generateNeuroImageV2 as PlanBGenerateNeuroImageV2 } from './plan_b/generateNeuroImageV2'

// TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã (unit/integration) –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function generateNeuroImageV2(
  prompt: string,
  numImages: number,
  telegram_id: TelegramId,
  ctx: MyContext,
  botName: string
): Promise<any> { // –≤—Ä–µ–º–µ–Ω–Ω–æ any –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!ctx.session.prompt) {
    logger.warn('generateNeuroImageV2: prompt not found –≤ ctx.session', { telegram_id, ctxSession: ctx.session })
    throw new Error('Prompt not found')
  }

  if (!ctx.session.userModel) {
    logger.warn('generateNeuroImageV2: userModel not found –≤ ctx.session', { telegram_id, ctxSession: ctx.session })
    throw new Error('User model not found')
  }

  if (!numImages) {
    logger.warn('generateNeuroImageV2: numImages not found', { telegram_id, numImages })
    throw new Error('Num images not found')
  }

  logger.info({
    message: 'üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeurophotoV2',
    description: 'Starting NeurophotoV2 generation',
    prompt: prompt.substring(0, 50) + '...',
    numImages,
    telegram_id,
    botName,
  })

  try {
    logger.info('–ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º Plan B generateNeuroImageV2', { prompt, numImages, telegram_id, is_ru: ctx.session.is_ru, botName })
    return await PlanBGenerateNeuroImageV2(
      prompt,
      numImages,
      telegram_id.toString(),
      ctx.session.is_ru,
      botName
    )
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest',
      description: 'Error sending event to Inngest',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(
      isRussian(ctx)
        ? 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'üòî An error occurred while sending the request. Please try again later.'
    )

    return null
  }
}
