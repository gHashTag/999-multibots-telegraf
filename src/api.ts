import express from 'express'
import cors from 'cors'
import dotenv from 'dotenv'
import { serve } from 'inngest/express'
import { inngest } from './core/inngest/clients'
import {
  neuroImageGeneration,
  generateModelTraining,
  modelTrainingV2,
  broadcastMessage,
  paymentProcessor,
  neuroPhotoV2Generation,
  textToImageFunction,
  createVoiceAvatarFunction,
  textToSpeechFunction,
  ruPaymentProcessPayment,
} from './inngest-functions'
import { uploadZipFile } from './controllers/uploadZipFile'
import { handleReplicateWebhook } from './controllers/replicateWebhook'
import { handleBFLWebhook } from './controllers/bflWebhook'
import {
  handleWebhookNeurophoto,
  handleWebhookNeurophotoDebug,
} from './controllers/neurophotoWebhook'
import { UPLOAD_DIR } from './config'
import { logger } from './utils/logger'

dotenv.config()

const app = express()

const port = 2999

// Middleware
app.use(cors())
// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ JSON –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ 50 –ú–ë
app.use(express.json({ limit: '50mb' }))
// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
app.use(express.urlencoded({ extended: true, limit: '50mb' }))

// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ raw body –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
app.use('/payment-success', express.raw({ type: '*/*' }))

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(UPLOAD_DIR))

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.get('/api', (req, res) => {
  logger.info({
    message: 'üöÄ API –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!',
    description: 'API request received!',
  })
  res.json({
    message: 'Hello World API!',
    status: 'success',
    timestamp: new Date().toISOString(),
  })
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
  logger.info({
    message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    description: 'Server status check',
  })
  res.json({
    status: 'online',
    timestamp: new Date().toISOString(),
  })
})

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ zip —Ñ–∞–π–ª–æ–≤
app.post('/generate/upload-zip-file', uploadZipFile)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç Replicate
app.post('/webhooks/replicate', handleReplicateWebhook)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç BFL (Brain Force Labs)
app.post('/webhooks/bfl', handleBFLWebhook)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
app.post('/webhooks/neurophoto', handleWebhookNeurophoto)
app.post('/webhooks/neurophoto-debug', handleWebhookNeurophotoDebug)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç Robokassa
app.post('/payment-success', express.raw({ type: '*/*' }), async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    const rawBody = req.body?.toString() || ''
    const contentType = req.headers['content-type'] || ''
    const query = req.query || {}

    logger.info({
      message: 'üîç –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Robokassa',
      description: 'Received webhook from Robokassa',
      headers: req.headers,
      contentType,
      rawBody,
      query,
      method: req.method,
      url: req.url,
    })

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Robokassa
    interface RobokassaWebhookData {
      inv_id?: string
      IncSum?: string
      OutSum?: string
      out_summ?: string
      [key: string]: string | undefined
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Content-Type
    let parsedBody: RobokassaWebhookData = {}

    try {
      if (contentType.includes('application/json')) {
        try {
          parsedBody = JSON.parse(rawBody)
          logger.info({
            message: 'üì¶ –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON',
            description: 'Parsed JSON body',
            parsedBody,
          })
        } catch (jsonError) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON',
            description: 'JSON parse error',
            error:
              jsonError instanceof Error ? jsonError.message : 'Unknown error',
            rawBody,
          })
        }
      } else if (contentType.includes('application/x-www-form-urlencoded')) {
        try {
          parsedBody = Object.fromEntries(
            new URLSearchParams(rawBody)
          ) as RobokassaWebhookData
          logger.info({
            message: 'üì¶ –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ form-urlencoded',
            description: 'Parsed form-urlencoded body',
            parsedBody,
          })
        } catch (formError) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ form-urlencoded',
            description: 'Form-urlencoded parse error',
            error:
              formError instanceof Error ? formError.message : 'Unknown error',
            rawBody,
          })
        }
      } else {
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form-urlencoded
        try {
          parsedBody = Object.fromEntries(
            new URLSearchParams(rawBody)
          ) as RobokassaWebhookData
          logger.info({
            message: 'üì¶ –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –∫–∞–∫ form-urlencoded',
            description: 'Parsed as form-urlencoded',
            parsedBody,
          })
        } catch (defaultError) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ unknown content-type',
            description: 'Unknown content-type parse error',
            error:
              defaultError instanceof Error
                ? defaultError.message
                : 'Unknown error',
            rawBody,
          })
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ URL
      if (
        Object.keys(parsedBody).length === 0 &&
        Object.keys(query).length > 0
      ) {
        parsedBody = query as unknown as RobokassaWebhookData
        logger.info({
          message: 'üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL',
          description: 'Using URL parameters',
          parsedBody,
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
      if (Object.keys(parsedBody).length === 0) {
        throw new Error(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞, –Ω–∏ –∏–∑ URL'
        )
      }

      logger.info({
        message: '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
        description: 'Data successfully retrieved',
        parsedBody,
      })
    } catch (parseError) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
        description: 'Data retrieval error',
        error:
          parseError instanceof Error ? parseError.message : 'Unknown error',
        rawBody,
        contentType,
        query,
      })
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK
      return res.send('OK')
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    const { inv_id, IncSum, OutSum, out_summ } = parsedBody

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!inv_id) {
      logger.error({
        message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç inv_id',
        description: 'Missing inv_id',
        parsedBody,
      })
      return res.send('OK')
    }

    // Robokassa –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Å—É–º–º—É –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    const amount = IncSum || OutSum || out_summ
    if (!amount) {
      logger.error({
        message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Missing payment amount',
        parsedBody,
      })
      return res.send('OK')
    }

    const roundedIncSum = Number(amount)
    if (isNaN(roundedIncSum)) {
      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Invalid payment amount',
        amount,
        parsedBody,
      })
      return res.send('OK')
    }

    logger.info({
      message: 'üí∞ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω—ã',
      description: 'Payment data received',
      inv_id,
      amount: roundedIncSum,
      originalAmount: amount,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      name: 'ru-payment/process-payment',
      data: {
        IncSum: Math.round(roundedIncSum),
        inv_id,
      },
    })

    logger.info({
      message: '‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest',
      description: 'Payment event sent to Inngest',
      inv_id,
      amount: roundedIncSum,
    })

    // –û—Ç–≤–µ—á–∞–µ–º OK
    return res.send('OK')
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –≤–µ–±-—Ö—É–∫–∞',
      description: 'Error processing payment webhook',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      body: req.body?.toString(),
      headers: req.headers,
      query: req.query,
      method: req.method,
      url: req.url,
    })

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å—ã
    return res.send('OK')
  }
})

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Inngest middleware
app.use(
  '/api/inngest',
  serve({
    client: inngest,
    functions: [
      textToImageFunction,
      textToSpeechFunction,
      neuroImageGeneration,
      generateModelTraining,
      modelTrainingV2,
      broadcastMessage,
      paymentProcessor,
      neuroPhotoV2Generation,
      createVoiceAvatarFunction,
      ruPaymentProcessPayment,
    ],
  })
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 404
app.use((req, res) => {
  logger.warn({
    message: '‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    description: 'Route not found',
    path: req.originalUrl,
    method: req.method,
  })
  res.status(404).json({
    message: 'Route not found',
    status: 'error',
  })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ API
const startApiServer = () => {
  app.listen(port, () => {
    logger.info('üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω', {
      description: 'API server is running',
      port,
    })
  })
}

export default startApiServer
