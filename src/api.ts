import express, { Request, Response } from 'express'
import cors from 'cors'
import dotenv from 'dotenv'
import { serve } from 'inngest/express'
import { inngest } from './inngest-functions/clients'

import {
  neuroImageGeneration,
  generateModelTraining,
  modelTrainingV2,
  broadcastMessage,
  paymentProcessor,
  neuroPhotoV2Generation,
  textToImageFunction,
  createVoiceAvatarFunction,
  textToSpeechFunction,
  ruPaymentProcessPayment,
  imageToPromptFunction,
  voiceToTextProcessor,
} from './inngest-functions'
import { uploadZipFile } from './controllers/uploadZipFile'
import { handleReplicateWebhook } from './controllers/replicateWebhook'
import { handleBFLWebhook } from './controllers/bflWebhook'
import {
  handleWebhookNeurophoto,
  handleWebhookNeurophotoDebug,
} from './controllers/neurophotoWebhook'
import { UPLOAD_DIR } from './config'
import { logger } from './utils/logger'
import multer from 'multer'
import path from 'path'
import fs from 'fs'

dotenv.config()

const app = express()

const port = 2999

// Middleware
app.use(cors())
// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ JSON –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ 50 –ú–ë
app.use(express.json({ limit: '50mb' }))
// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
app.use(express.urlencoded({ extended: true, limit: '50mb' }))

// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ raw body –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
app.use('/payment-success', express.raw({ type: '*/*' }))

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(UPLOAD_DIR)) {
  logger.info('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫', {
    description: 'Creating uploads directory',
    path: UPLOAD_DIR,
  })
  fs.mkdirSync(UPLOAD_DIR, { recursive: true })
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (
    _req: Request,
    _file: Express.Multer.File,
    cb: (error: Error | null, destination: string) => void
  ) => {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(UPLOAD_DIR)) {
      fs.mkdirSync(UPLOAD_DIR, { recursive: true })
    }
    cb(null, UPLOAD_DIR)
  },
  filename: (
    _req: Request,
    file: Express.Multer.File,
    cb: (error: Error | null, filename: string) => void
  ) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    cb(null, file.originalname)
  },
})

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB –ª–∏–º–∏—Ç
  },
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.post(
  '/uploads',
  upload.single('file'),
  (req: Request, res: Response): void => {
    try {
      logger.info('üì§ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', {
        description: 'File upload received',
        filename: req.file?.originalname,
        size: req.file?.size,
      })

      if (!req.file) {
        logger.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ', {
          description: 'No file in request',
        })
        res.status(400).json({
          message: 'No file uploaded',
          status: 'error',
        })
        return
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
      const fileUrl = `/uploads/${req.file.filename}`

      logger.info('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', {
        description: 'File uploaded successfully',
        filename: req.file.originalname,
        path: fileUrl,
        fullPath: path.join(UPLOAD_DIR, req.file.filename),
      })

      res.json({
        message: 'File uploaded successfully',
        status: 'success',
        url: fileUrl,
        path: req.file.path,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', {
        description: 'File upload error',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      res.status(500).json({
        message: 'Error uploading file',
        status: 'error',
      })
    }
  }
)

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(UPLOAD_DIR))

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.get('/api', (_req: Request, res: Response): void => {
  logger.info({
    message: 'üöÄ API –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!',
    description: 'API request received!',
  })
  res.json({
    message: 'Hello World API!',
    status: 'success',
    timestamp: new Date().toISOString(),
  })
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (_req: Request, res: Response): void => {
  logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
    description: 'Server status check',
  })
  res.json({
    status: 'online',
    timestamp: new Date().toISOString(),
  })
})

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ zip —Ñ–∞–π–ª–æ–≤
app.post('/generate/upload-zip-file', uploadZipFile)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç Replicate
app.post('/webhooks/replicate', handleReplicateWebhook)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç BFL (Brain Force Labs)
app.post('/webhooks/bfl', handleBFLWebhook)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
app.post('/webhooks/neurophoto', handleWebhookNeurophoto)
app.post('/webhooks/neurophoto-debug', handleWebhookNeurophotoDebug)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç Robokassa
app.post(
  '/payment-success',
  express.raw({ type: '*/*' }),
  async (req: Request, res: Response): Promise<void> => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      const rawBody =
        req.body instanceof Buffer
          ? req.body.toString('utf8')
          : typeof req.body === 'string'
            ? req.body
            : JSON.stringify(req.body)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–ª–æ JWT —Ç–æ–∫–µ–Ω–æ–º
      if (rawBody.startsWith('eyJ')) {
        logger.info({
          message: 'üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º JWT —Ç–æ–∫–µ–Ω',
          description: 'Skipping JWT token',
          bodyType: typeof req.body,
          isBuffer: req.body instanceof Buffer,
          method: req.method,
          url: req.url,
        })
        res.send('OK')
        return
      }

      const contentType = req.headers['content-type'] || ''
      const query = req.query || {}

      logger.info({
        message: 'üîç –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Robokassa',
        description: 'Received webhook from Robokassa',
        headers: req.headers,
        contentType,
        rawBody,
        query,
      })

      res.send('OK')
    } catch (error: unknown) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –æ—Ç Robokassa', {
        description: 'Error processing Robokassa webhook',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      res.status(500).send('Error')
    }
  }
)

// Serve Inngest functions
app.use(
  '/api/inngest',
  serve({
    client: inngest,
    functions: [
      neuroImageGeneration,
      generateModelTraining,
      modelTrainingV2,
      broadcastMessage,
      paymentProcessor,
      neuroPhotoV2Generation,
      textToImageFunction,
      createVoiceAvatarFunction,
      textToSpeechFunction,
      ruPaymentProcessPayment,
      imageToPromptFunction,
      voiceToTextProcessor,
    ],
  })
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 404
app.use((req, res) => {
  logger.warn({
    message: '‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    description: 'Route not found',
    path: req.originalUrl,
    method: req.method,
  })
  res.status(404).json({
    message: 'Route not found',
    status: 'error',
  })
})

export function startApiServer(): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...', {
        description: 'Starting API server',
        port,
      })

      const server = app.listen(port, () => {
        logger.info('‚úÖ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', {
          description: 'API server started successfully',
          port,
          url: `http://localhost:${port}`,
        })
        resolve()
      })

      server.on('error', error => {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API —Å–µ—Ä–≤–µ—Ä–∞', {
          description: 'API server error',
          error: error instanceof Error ? error.message : 'Unknown error',
          port,
        })
        reject(error)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('SIGTERM', () => {
        logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM', {
          description: 'SIGTERM signal received',
        })
        server.close(() => {
          logger.info('üëã API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
            description: 'API server stopped successfully',
          })
          process.exit(0)
        })
      })
    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API —Å–µ—Ä–≤–µ—Ä–∞', {
        description: 'Critical API server error',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      reject(error)
    }
  })
}

export default app
