import { isDev } from './config'
import fs from 'fs'
import path from 'path'
import os from 'os'
import { checkAndCreateLockFile } from './utils/checkAndCreateLockFile'
import { logger } from './utils/logger'
import startApiServer from './api-server'
import initializeApiServer from './api-server'
import type { FastifyInstance } from 'fastify'
import type { MyContext } from '@/interfaces'
import { Composer, Telegraf, Scenes, Context } from 'telegraf'
import type { Message, Update } from 'telegraf/types'
import { registerCommands } from './registerCommands'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –±–æ—Ç–æ–≤
export const botInstances: Telegraf<MyContext>[] = []

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
const CONFLICT_LOG_PATH = path.join(process.cwd(), 'logs', 'telegram_conflicts')

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(CONFLICT_LOG_PATH)) {
  fs.mkdirSync(CONFLICT_LOG_PATH, { recursive: true })
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ 409 –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * @param errorMessage –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param forceStartActive –ë—ã–ª –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
 * @param additionalInfo –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
 */
function recordTelegramConflict(
  errorMessage: string,
  forceStartActive: boolean,
  additionalInfo: Record<string, any> = {}
): void {
  try {
    const timestamp = new Date().toISOString()
    const fileName = path.join(
      CONFLICT_LOG_PATH,
      `conflict_${timestamp.replace(/[:.]/g, '_')}.json`
    )

    const conflictData = {
      timestamp,
      error_message: errorMessage,
      force_start_active: forceStartActive,
      computer_name: os.hostname(),
      username: os.userInfo().username,
      platform: process.platform,
      node_version: process.version,
      environment: process.env.NODE_ENV,
      pid: process.pid,
      ...additionalInfo,
    }

    fs.writeFileSync(fileName, JSON.stringify(conflictData, null, 2))
    logger.info(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ 409 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${fileName}`, {
      description: 'Telegram 409 conflict recorded to file',
      file_path: fileName,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ', {
      description: 'Failed to save conflict information',
      error: error instanceof Error ? error.message : String(error),
    })
  }
}

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${(error as Error).message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
export async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç–∞ API —Å–µ—Ä–≤–µ—Ä–∞
function checkAndKillPort(port: number): Promise<void> {
  return new Promise((resolve, reject) => {
    logger.info(`Checking port ${port}...`)
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç
    const exec = require('child_process').exec
    exec(
      `lsof -i :${port} -t`,
      (error: any, stdout: string, stderr: string) => {
        if (stdout) {
          const pids = stdout.trim().split('\n')
          pids.forEach(pid => {
            try {
              // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
              process.kill(parseInt(pid), 'SIGKILL')
              logger.info(`Successfully killed process on port ${port}`)
            } catch (e) {
              logger.error(`Failed to kill process ${pid}: ${e}`)
            }
          })
        } else {
          logger.info(`No process found using port ${port}`)
        }
        resolve()
      }
    )
  })
}

// –î–æ–±–∞–≤–ª—è—é –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤
async function initializeBots() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º Hello World —Å–µ—Ä–≤–µ—Ä –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
  logger.info('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  logger.info('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  logger.info('üîÑ [SCENE_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ stage –∏–∑ registerCommands...')
  const { stage } = await import('./registerCommands')
  logger.info('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ü–µ–Ω—ã –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
  try {
    const stageInfo = (stage as any)._handlers || []
    logger.info(
      'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
      stageInfo.length
    )
  } catch (error) {
    logger.info(
      '‚ö†Ô∏è [SCENE_DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ü–µ–Ω:',
      (error as Error).message
    )
  }

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ TEST_BOT_NAME
    const targetBotUsername = process.env.TEST_BOT_NAME
    if (!targetBotUsername) {
      throw new Error(
        '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ username –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ development.'
      )
    }

    logger.info(`üîß –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å username: ${targetBotUsername}`)

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ env
    const potentialTokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('BOT_TOKEN'))
      .map(([, value]) => value)
      .filter(Boolean) as string[]

    let bot: Telegraf<MyContext> | null = null
    let foundBotInfo: Awaited<
      ReturnType<Telegraf<MyContext>['telegram']['getMe']>
    > | null = null

    for (const token of potentialTokens) {
      try {
        const tempBot = new Telegraf<MyContext>(token)
        const botInfo = await tempBot.telegram.getMe()
        if (botInfo.username === targetBotUsername) {
          logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç ${botInfo.username}`)
          bot = tempBot // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          foundBotInfo = botInfo
          break // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –±–æ—Ç –Ω–∞–π–¥–µ–Ω
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
        // console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ${token.substring(0, 10)}...: ${error.message}`);
      }
    }

    if (!bot || !foundBotInfo) {
      throw new Error(
        `‚ùå –ë–æ—Ç —Å username '${targetBotUsername}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
    logger.info(
      'üîÑ [SCENE_DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ stage middleware...'
    )

    // –£–±–∏—Ä–∞–µ–º composer –∏–∑ –≤—ã–∑–æ–≤–∞
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ bot
    registerCommands({ bot })

    logger.info('‚úÖ [SCENE_DEBUG] –ö–æ–º–∞–Ω–¥—ã –∏ middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    botInstances.push(bot) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    logger.info(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: [
        'message',
        'callback_query',
        'pre_checkout_query' as any,
        'successful_payment' as any,
      ],
    })
    logger.info(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (polling)`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    logger.info(
      '[Production Mode] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ACTIVE_BOTS...'
    )

    const activeBotVarNames = (process.env.ACTIVE_BOTS || '')
      .split(',')
      .map(name => name.trim())
      .filter(Boolean)

    if (activeBotVarNames.length === 0) {
      logger.warn(
        '[Production Mode] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ACTIVE_BOTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –ë–æ—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã.'
      )
      // –í —Ä–µ–∂–∏–º–µ Vercel –Ω–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Fastify, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç–æ–≤ –Ω–µ—Ç
      // –ü–æ—ç—Ç–æ–º—É –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–¥–µ—Å—å
    } else {
      logger.info(
        `[Production Mode] –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–≤: ${activeBotVarNames.join(', ')}`
      )
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fastify —Å–µ—Ä–≤–µ—Ä –ó–î–ï–°–¨, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º listen
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å fastify –∏–∑ fastify-server
    const fastifyInstance = (await import('./fastify-server')).default
    // –í—ã–∑–æ–≤–µ–º setupServer –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    // –í–æ–∑–º–æ–∂–Ω–æ, setupServer –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ setupServer –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–µ–Ω –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
    // –í fastify-server.ts setupServer –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ startFastifyServer,
    // –∫–æ—Ç–æ—Ä—ã–π –º—ã –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ listen.
    // –ù—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å setupServer() –≥–¥–µ-—Ç–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    // –ü–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ fastifyInstance —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.

    for (const varName of activeBotVarNames) {
      const token = process.env[varName]
      if (!token) {
        logger.warn(`[Production Mode] –¢–æ–∫–µ–Ω –¥–ª—è ${varName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env.`)
        continue
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
      if (!(await validateBotToken(token))) {
        logger.error(
          `‚ùå [Production Mode] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è ${varName}. –ü—Ä–æ–ø—É—Å–∫ –±–æ—Ç–∞.`
        )
        continue
      }

      try {
        const bot = new Telegraf<MyContext>(token)

        const botInfo = await bot.telegram.getMe()
        logger.info(
          `ü§ñ [Production Mode] –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.`
        )

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Ü–µ–Ω—ã
        registerCommands({ bot })
        logger.info(
          `‚úÖ [Production Mode] –ö–æ–º–∞–Ω–¥—ã –∏ middleware –¥–ª—è ${botInfo.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`
        )

        botInstances.push(bot) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        // --- –£–î–ê–õ–Ø–ï–ú –£–°–¢–ê–ù–û–í–ö–£ –í–ï–ë–•–£–ö–ê –ò –ó–ê–ü–£–°–ö –ó–î–ï–°–¨ ---
        // const webhookUrl = `${process.env.WEBHOOK_DOMAIN}/api/webhook/${botInfo.id}`
        // logger.info(`[Production Mode] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è ${botInfo.username} –Ω–∞ ${webhookUrl}`)
        // await bot.telegram.setWebhook(webhookUrl, {
        //   allowed_updates: [
        //     'message',
        //     'callback_query',
        //     'pre_checkout_query' as any,
        //     'successful_payment' as any,
        //   ],
        //   secret_token: process.env.SECRET_API_KEY, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        // })
        // logger.info(`‚úÖ [Production Mode] Webhook –¥–ª—è ${botInfo.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`)

        // --- –£–î–ê–õ–Ø–ï–ú bot.launch() ---
        // –í–º–µ—Å—Ç–æ bot.launch(), –≤–µ–±—Ö—É–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Fastify
      } catch (error) {
        logger.error(
          `‚ùå [Production Mode] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${varName}:`,
          error
        )
      }
    } // end for

    // --- –£–î–ê–õ–Ø–ï–ú –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê –ó–î–ï–°–¨ ---
    // await initializeApiServer() // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å listen()
  } // end else (production)

  // –õ–æ–≥–∏–∫–∞ –¥–ª—è graceful shutdown –æ—Å—Ç–∞–µ—Ç—Å—è
  process.once('SIGINT', () => gracefulShutdown('SIGINT'))
  process.once('SIGTERM', () => gracefulShutdown('SIGTERM'))

  logger.info('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  return botInstances
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async function gracefulShutdown(signal: string) {
  logger.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

  logger.info(`[${signal}] Stopping ${botInstances.length} bot instance(s)...`) // –ò—Å–ø–æ–ª—å–∑—É–µ–º botInstances
  const stopPromises = botInstances.map(async (bot, index) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º botInstances
    try {
      logger.info(
        `[${signal}] Initiating stop for bot instance index ${index}...`
      )
      bot.stop(signal)
      logger.info(
        `[${signal}] Successfully stopped bot instance index ${index}.`
      )
    } catch (error) {
      logger.error(
        `[${signal}] Error stopping bot instance index ${index}:`,
        error
      )
    }
  })
  logger.info(`[${signal}] All bot instances processed for stopping.`)

  logger.info(`[${signal}] Adding a short delay before exiting...`)
  await new Promise(resolve => setTimeout(resolve, 1500))

  logger.info(`[${signal}] Graceful shutdown completed. Exiting.`)
  process.exit(0)
}

// --- –≠–ö–°–ü–û–†–¢ –î–õ–Ø VERCEL ---
import server from './fastify-server' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å Fastify

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false
let initPromise: Promise<any> | null = null

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function ensureInitialized() {
  if (!isInitialized && !initPromise) {
    console.log('Starting initialization...')
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–æ–≤ (–∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç listen/launch)
    // –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Fastify —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    initPromise = initializeBots()
      .then(() => {
        console.log('Initialization complete.')
        isInitialized = true
        initPromise = null // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        // –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–æ—É—Ç –≤–µ–±—Ö—É–∫–∞ –≤ Fastify –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ü–†–ê–í–ò–õ–¨–ù–û
        // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å botInstances
      })
      .catch(err => {
        console.error('Initialization failed:', err)
        initPromise = null // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Vercel –∑–Ω–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–µ
        throw err
      })
    await initPromise
  } else if (initPromise) {
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –∏–¥–µ—Ç, –¥–æ–∂–∏–¥–∞–µ–º—Å—è –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await initPromise
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
export default async (req: any, res: any) => {
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    await ensureInitialized()

    // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Fastify
    // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º server.server.emit, —Ç–∞–∫ –∫–∞–∫ Fastify –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç http.Server
    server.server.emit('request', req, res)
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º
    console.error('Error handling request in Vercel function:', error)
    res.statusCode = 500
    res.setHeader('Content-Type', 'application/json')
    res.end(
      JSON.stringify({
        error:
          'Internal Server Error during initialization or request handling.',
      })
    )
  }
}

// --- –°—Ç–∞—Ä—ã–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Vercel) ---
// export async function startBot(): Promise<void> {
//   await initializeBots();
//   // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –ù–ï —á–µ—Ä–µ–∑ Vercel, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ listen –∑–¥–µ—Å—å
//   // if (isDev || process.env.START_LOCAL === 'true') {
//   //   const localPort = parseInt(process.env.PORT || '3000', 10);
//   //   await server.listen({ port: localPort, host: '0.0.0.0' });
//   // }
// }
