import dotenv from 'dotenv'

dotenv.config()

<<<<<<< HEAD
import { Composer, Telegraf, Scenes, Context } from 'telegraf'
import { Update, BotCommand } from 'telegraf/types'
import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'
import { logger } from './utils/logger'
import { ADMIN_IDS_ARRAY } from './config'

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
export const botInstances: Telegraf<MyContext>[] = []
=======
import { NODE_ENV } from '@/config'
import { Telegraf } from 'telegraf'
import type { MyContext } from '@/interfaces'
import type { BotName } from '@/interfaces/telegram-bot.interface'
import { logger } from '@/utils/logger'
import { toBotName } from '@/helpers/botName.helper'

<<<<<<< HEAD
import { getBotGroupFromAvatars } from '@/core/supabase'
>>>>>>> adf7ec30 (bugfix)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if (!process.env.BOT_TOKEN_1) throw new Error('BOT_TOKEN_1 is not set')
if (!process.env.BOT_TOKEN_2) throw new Error('BOT_TOKEN_2 is not set')
if (!process.env.BOT_TOKEN_3) throw new Error('BOT_TOKEN_3 is not set')
if (!process.env.BOT_TOKEN_4) throw new Error('BOT_TOKEN_4 is not set')
if (!process.env.BOT_TOKEN_5) throw new Error('BOT_TOKEN_5 is not set')
if (!process.env.BOT_TOKEN_6) throw new Error('BOT_TOKEN_6 is not set')
if (!process.env.BOT_TOKEN_7) throw new Error('BOT_TOKEN_7 is not set')

if (!process.env.BOT_TOKEN_TEST_1)
  throw new Error('BOT_TOKEN_TEST_1 is not set')
if (!process.env.BOT_TOKEN_TEST_2)
  throw new Error('BOT_TOKEN_TEST_2 is not set')

const BOT_TOKENS_PROD: string[] = [
  process.env.BOT_TOKEN_1,
  process.env.BOT_TOKEN_2,
  process.env.BOT_TOKEN_3,
  process.env.BOT_TOKEN_4,
  process.env.BOT_TOKEN_5,
  process.env.BOT_TOKEN_6,
  process.env.BOT_TOKEN_7,
]

const BOT_TOKENS_TEST: string[] = [
  process.env.BOT_TOKEN_TEST_1,
  process.env.BOT_TOKEN_TEST_2,
]

export const BOT_NAMES: Record<BotName, string> = {
  ['neuro_blogger_bot']: process.env.BOT_TOKEN_1,
  ['MetaMuse_Manifest_bot']: process.env.BOT_TOKEN_2,
  ['ZavaraBot']: process.env.BOT_TOKEN_3,
  ['LeeSolarbot']: process.env.BOT_TOKEN_4,
  ['NeuroLenaAssistant_bot']: process.env.BOT_TOKEN_5,
  ['NeurostylistShtogrina_bot']: process.env.BOT_TOKEN_6,
  ['Gaia_Kamskaia_bot']: process.env.BOT_TOKEN_7,
  ['ai_koshey_bot']: process.env.BOT_TOKEN_TEST_1,
  ['clip_maker_neuro_bot']: process.env.BOT_TOKEN_TEST_2,
} as const

// Tutorial URLs
export const BOT_URLS: Partial<Record<BotName, string>> = {
  MetaMuse_Manifest_bot: 'https://t.me/MetaMuse_manifestation/16',
  neuro_blogger_bot: 'https://t.me/neuro_coder_ai/1212',
  ai_koshey_bot: 'https://t.me/neuro_coder_ai/1212',
=======
// Define the commands for private chats
const privateCommands: BotCommand[] = [
  { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å / Restart' },
  { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main Menu' },
  { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å / Help' },
  { command: 'balance', description: 'üí∞ –ë–∞–ª–∞–Ω—Å / Balance' },
  { command: 'buy', description: 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å / Top up' },
  { command: 'invite', description: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ / Invite' },
  { command: 'support', description: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support' },
  // Add other relevant commands here
  { command: 'neuro_coder', description: 'ü§ñ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä / NeuroCoder' },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${(error as Error).message}`)
    return false
  }
>>>>>>> origin/feat/vitest-integration
}

export const BOT_TOKENS =
  NODE_ENV === 'production' ? BOT_TOKENS_PROD : BOT_TOKENS_TEST

export const DEFAULT_BOT_TOKEN = process.env.BOT_TOKEN_1

export const DEFAULT_BOT_NAME = 'neuro_blogger_bot'
export const defaultBot = new Telegraf<MyContext>(DEFAULT_BOT_TOKEN)

logger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è defaultBot:', {
  description: 'DefaultBot initialization',
  tokenLength: DEFAULT_BOT_TOKEN.length,
})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const bots = Object.entries(BOT_NAMES)
  .filter(([, token]) => token) // –§–∏–ª—å—Ç—Ä—É–µ–º undefined —Ç–æ–∫–µ–Ω—ã
  .filter(([name, token]) => {
    // –í development —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
    if (NODE_ENV === 'development') {
      return BOT_TOKENS_TEST.includes(token)
    }
    // –í production —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç–æ–≤
    return BOT_TOKENS_PROD.includes(token)
  })
  .map(([name, token]) => {
    // –ï—Å–ª–∏ —ç—Ç–æ defaultBot, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (name === DEFAULT_BOT_NAME) {
      logger.info('ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ defaultBot:', {
        description: 'Using existing defaultBot',
        bot_name: name,
      })
      return defaultBot
    }

    const bot = new Telegraf<MyContext>(token)

    logger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞:', {
      description: 'Bot initialization',
      bot_name: name,
      tokenLength: token.length,
    })

    return bot
  })

logger.info('üåü –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–≤:', {
  description: 'Bots initialized',
  count: bots.length,
  bot_names: Object.keys(BOT_NAMES),
})

export const PULSE_BOT_TOKEN = process.env.BOT_TOKEN_1
export const pulseBot = new Telegraf<MyContext>(PULSE_BOT_TOKEN)

logger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pulseBot:', {
  description: 'PulseBot initialization',
  tokenLength: PULSE_BOT_TOKEN.length,
})

export function getBotNameByToken(token: string): { bot_name: BotName } {
  const entry = Object.entries(BOT_NAMES).find(([_, value]) => value === token)
  if (!entry) {
    return { bot_name: 'neuro_blogger_bot' }
  }

  const [bot_name] = entry
  return { bot_name: bot_name as BotName }
}

export function getTokenByBotName(botName: string): string | undefined {
  const validBotName = toBotName(botName)
  const entry = Object.entries(BOT_NAMES).find(
    ([name, _]) => name === validBotName
  )
  if (!entry) {
    logger.warn(`Bot name ${validBotName} not found.`)
    return undefined
  }

  const [, token] = entry
  return token
}

export async function createBotByName(botName: string): Promise<
  | {
      token: string
      groupId: string
      bot: Telegraf<MyContext>
    }
  | undefined
> {
  const validBotName = toBotName(botName)
  const token = getTokenByBotName(validBotName)
  if (!token) {
    logger.error('‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
      description: 'Token not found for bot',
      botName: validBotName,
    })
    return undefined
  }

  const groupIdResult = await getBotGroupFromAvatars(validBotName)
  if (!groupIdResult) {
    logger.error('‚ùå –ì—Ä—É–ø–ø–∞ –¥–ª—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', {
      description: 'Group not found for bot',
      botName: validBotName,
    })
    return undefined
  }

  const botIndex = Object.keys(BOT_NAMES).indexOf(validBotName)
  const bot = bots[botIndex]

  if (!bot) {
    logger.error('‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
      description: 'Bot instance not found',
      botName: validBotName,
      botIndex,
      availableBots: Object.keys(BOT_NAMES),
    })
    return undefined
  }

  return {
    token,
    groupId: groupIdResult,
    bot,
  }
}

export function getBotByName(bot_name: string): {
  bot?: Telegraf<MyContext>
  error?: string | null
} {
  try {
    const validBotName = toBotName(bot_name)
    logger.info({
      message: 'üîé getBotByName –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è',
      description: 'getBotByName requested for',
      bot_name: validBotName,
    })

    const token = BOT_NAMES[validBotName]
    if (!token) {
      logger.error({
        message: '‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        description: 'Bot token not found in configuration',
        bot_name: validBotName,
        availableBots: Object.keys(BOT_NAMES),
      })
      return { error: 'Bot not found in configuration' }
    }

    logger.info({
      message: 'üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      description: 'Bot token retrieved from configuration',
      bot_name: validBotName,
      tokenLength: token.length,
    })

    const botIndex = Object.keys(BOT_NAMES).indexOf(validBotName)
    let bot = bots[botIndex]

    if (!bot || !bot.telegram?.sendMessage) {
      logger.info({
        message: 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
        description: 'Creating new bot instance',
        bot_name: validBotName,
      })
      bot = new Telegraf<MyContext>(token)
      if (!bot.telegram?.sendMessage) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞',
          description: 'Bot initialization error',
          bot_name: validBotName,
          hasTelegram: !!bot.telegram,
          methods: bot.telegram ? Object.keys(bot.telegram) : [],
        })
        return { error: 'Bot initialization failed' }
      }
      bots[botIndex] = bot
    }

    logger.info({
      message: '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      description: 'Bot successfully retrieved',
      bot_name: validBotName,
      hasSendMessage: typeof bot.telegram?.sendMessage === 'function',
    })

    return { bot }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–∞',
      description: 'Error getting bot',
      bot_name,
      error,
    })
    return { error: 'Invalid bot name' }
  }
}

export const supportRequest = async (title: string, data: any) => {
  try {
    await pulseBot.telegram.sendMessage(
      process.env.SUPPORT_CHAT_ID!,
      `üöÄ ${title}\n\n${JSON.stringify(data)}`
    )
  } catch (error) {
    throw new Error(`Error supportRequest: ${JSON.stringify(error)}`)
  }
<<<<<<< HEAD
=======

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ TEST_BOT_NAME
    const targetBotUsername = process.env.TEST_BOT_NAME
    if (!targetBotUsername) {
      throw new Error(
        '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ username –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ development.'
      )
    }

    console.log(`üîß –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å username: ${targetBotUsername}`)

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ env
    const potentialTokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('BOT_TOKEN'))
      .map(([, value]) => value)
      .filter(Boolean) as string[]

    let bot: Telegraf<MyContext> | null = null
    let foundBotInfo: Awaited<
      ReturnType<Telegraf<MyContext>['telegram']['getMe']>
    > | null = null

    for (const token of potentialTokens) {
      try {
        const tempBot = new Telegraf<MyContext>(token)
        const botInfo = await tempBot.telegram.getMe()
        if (botInfo.username === targetBotUsername) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç ${botInfo.username}`)
          bot = tempBot // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          foundBotInfo = botInfo
          break // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –±–æ—Ç –Ω–∞–π–¥–µ–Ω
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
        // console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ${token.substring(0, 10)}...: ${error.message}`);
      }
    }

    if (!bot || !foundBotInfo) {
      throw new Error(
        `‚ùå –ë–æ—Ç —Å username '${targetBotUsername}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
    console.log(
      'üîÑ [SCENE_DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ stage middleware...'
    )

    // –£–±–∏—Ä–∞–µ–º composer –∏–∑ –≤—ã–∑–æ–≤–∞
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ bot
    registerCommands({ bot })

    // <<<--- Set commands scope for the development bot ---<<<
    try {
      await bot.telegram.setMyCommands(privateCommands, {
        scope: { type: 'all_private_chats' },
      })
      await bot.telegram.setMyCommands([], {
        scope: { type: 'all_group_chats' },
      }) // Empty commands for groups
      await bot.telegram.setMyCommands([], {
        scope: { type: 'all_chat_administrators' },
      }) // Optional: Empty for admins too
      console.log(
        `‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ ${foundBotInfo.username}`
      )
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è ${foundBotInfo.username}:`,
        error
      )
    }
    // >>>--------------------------------------------------->>>

    botInstances.push(bot)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: [
        'message',
        'callback_query',
        'pre_checkout_query' as any,
        'successful_payment' as any,
      ],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
    ].filter((token): token is string => Boolean(token))

    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token)
        bot.use(Composer.log())

        registerCommands({ bot })

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // <<<--- Set commands scope for the production bot ---<<<
        try {
          await bot.telegram.setMyCommands(privateCommands, {
            scope: { type: 'all_private_chats' },
          })
          await bot.telegram.setMyCommands([], {
            scope: { type: 'all_group_chats' },
          }) // Empty commands for groups
          await bot.telegram.setMyCommands([], {
            scope: { type: 'all_chat_administrators' },
          }) // Optional: Empty for admins too
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`)
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è ${botInfo.username}:`,
            error
          )
        }
        // >>>---------------------------------------------------->>>

        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        const webhookDomain = process.env.WEBHOOK_DOMAIN
        if (!webhookDomain) {
          throw new Error('WEBHOOK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –±–æ—Ç–∞
        const webhookPath = `/${botInfo.username}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∫–∞–∫ –ø—É—Ç—å

        bot.launch({
          webhook: {
            domain: webhookDomain,
            port: currentPort,
            hookPath: webhookPath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º hookPath, –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
          },
          allowedUpdates: [
            'message',
            'callback_query',
            'pre_checkout_query' as any,
            'successful_payment' as any,
          ],
        })

        console.log(
          `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
        )
        await new Promise(resolve => setTimeout(resolve, 2000))
        currentPort++
      }
    }
  }

  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω...')
  // –ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é –ª–æ–≥
  console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã: payment_scene')
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω ...

  // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω –¥–æ–±–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥:
  console.log('‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
>>>>>>> origin/feat/vitest-integration
}
<<<<<<< HEAD

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async function gracefulShutdown(signal: string) {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

  // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–æ–≤
  console.log(`[${signal}] Stopping ${botInstances.length} bot instance(s)...`)
  const stopPromises = botInstances.map(async (bot, index) => {
    try {
      console.log(
        `[${signal}] Initiating stop for bot instance index ${index}...`
      )
      // bot.stop() –¥–ª—è long polling –æ–±—ã—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å
      // –•–æ—Ç—è Telegraf 4.x stop() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç void –¥–ª—è polling
      bot.stop(signal)
      console.log(
        `[${signal}] Successfully stopped bot instance index ${index}.`
      )
    } catch (error) {
      console.error(
        `[${signal}] Error stopping bot instance index ${index}:`,
        error // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
      )
    }
  })
  // –ù–µ –Ω—É–∂–Ω–æ Promise.all, —Ç–∞–∫ –∫–∞–∫ bot.stop() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è polling
  // await Promise.all(stopPromises) // –£–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ
  console.log(`[${signal}] All bot instances processed for stopping.`)

  // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
  console.log(`[${signal}] Adding a short delay before exiting...`)
  await new Promise(resolve => setTimeout(resolve, 3000))

  console.log(`[${signal}] Graceful shutdown completed. Exiting.`)
  process.exit(0)
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => gracefulShutdown('SIGINT'))
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'))

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
initializeBots()
  .then(() => {
    console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã')
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤:', error)
    process.exit(1)
  })

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ process.env.BOT_TOKENS.
 */
export async function launchBots() {
  const botTokensEnv = process.env.BOT_TOKENS
  if (!botTokensEnv) {
    // logger.error( // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ logger –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    //  '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKENS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤.'
    // )
    console.error(
      '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKENS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤.'
    )
    return
  }

  const tokens = botTokensEnv.split(',').map(token => token.trim())
  logger.info(`Found ${tokens.length} bot tokens. Initializing...`)

  for (const token of tokens) {
    if (!token) continue
    try {
      const bot = new Telegraf<MyContext>(token)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const botInfo = await bot.telegram.getMe()
      bot.botInfo = botInfo // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      logger.info(`Initializing bot: ${botInfo.username} (ID: ${botInfo.id})`)

      botInstances.push(bot) // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ –º–∞—Å—Å–∏–≤

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ (—Å—Ü–µ–Ω—ã, –∫–æ–º–∞–Ω–¥—ã, –º–∏–¥–ª–≤–∞—Ä—ã) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ registerCommands
      // await startBotInstance(bot) // Removed unused call
    } catch (error) {
      logger.error(
        `‚ùå Failed to initialize bot with token fragment: ...${token.slice(-5)}`,
        error
      )
    }
  }

  if (botInstances.length === 0) {
    logger.warn('No bots were launched. Check BOT_TOKENS environment variable.')
  }

  // –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
  if (botInstances.length > 0) {
    // await registerCommands(botInstances[0]) // –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å
    logger.info('Command registration might be needed here.')
  }

  logger.info(`Total bots launched: ${botInstances.length}`)
}
=======
>>>>>>> adf7ec30 (bugfix)
