import { isDev } from './config'

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

import { Composer, Telegraf } from 'telegraf'
import { config } from 'dotenv'
import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const botInstances: Telegraf[] = []

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Composer –≥–ª–æ–±–∞–ª—å–Ω–æ
export const composer = new Composer<MyContext>()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
async function initializeBots() {
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    const testBotToken = process.env.BOT_TOKEN_TEST_1
    if (!testBotToken) {
      throw new Error('‚ùå BOT_TOKEN_TEST_1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.development')
    }

    const bot = new Telegraf<MyContext>(testBotToken)
    bot.use(Composer.log())

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π composer
    registerCommands({ bot, composer })

    botInstances.push(bot)
    const botInfo = await bot.telegram.getMe()
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: ['message', 'callback_query'],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
    ].filter(Boolean)

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Ä—Ç–∞ 3001 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token)
        bot.use(Composer.log())

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π composer
        registerCommands({ bot, composer })

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        try {
          bot.launch({
            webhook: {
              domain: process.env.WEBHOOK_DOMAIN,
              port: currentPort,
            },
            allowedUpdates: ['message', 'callback_query'],
          })
          console.log(
            `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
          )
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botInfo.username}:`, error)
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
        currentPort++
      }
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
  botInstances.forEach(bot => bot.stop('SIGINT'))
  process.exit(0)
})

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
  botInstances.forEach(bot => bot.stop('SIGTERM'))
  process.exit(0)
})

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
initializeBots()
  .then(() => console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤:', error))
