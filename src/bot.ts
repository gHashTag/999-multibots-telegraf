import { isDev } from './config'

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

import { Composer, Telegraf, Scenes, Context } from 'telegraf'
import { Update, BotCommand } from 'telegraf/types'
import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'
import { session } from 'telegraf'
import {
  handleSuccessfulPayment,
  handlePreCheckoutQuery,
} from './handlers/paymentHandlers'
import { setBotCommands } from './setCommands'

// –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
import { setupStatsCommand } from './commands/statsCommand'

import { handleTextMessage } from './handlers/handleTextMessage'
import { message } from 'telegraf/filters'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à API —Å–µ—Ä–≤–µ—Ä –∏–∑ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
import { startApiServer } from './api_server'
import { setupHearsHandlers } from './hearsHandlers'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const botInstances: Telegraf<MyContext>[] = []

// Define the commands for private chats
// const privateCommands: BotCommand[] = [
//   { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å / Restart' },
//   { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main Menu' },
//   { command: 'support', description: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support' },
// ]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${(error as Error).message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
export async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –î–æ–±–∞–≤–ª—è—é –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤
async function initializeBots() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º Hello World —Å–µ—Ä–≤–µ—Ä –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  console.log('üîÑ [SCENE_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ stage –∏–∑ registerCommands...')
  const { stage } = await import('./registerCommands')
  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ü–µ–Ω—ã –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
  try {
    const stageInfo = (stage as any)._handlers || []
    console.log(
      'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
      stageInfo.length
    )
  } catch (error) {
    console.log(
      '‚ö†Ô∏è [SCENE_DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ü–µ–Ω:',
      (error as Error).message
    )
  }

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ TEST_BOT_NAME
    const targetBotUsername = process.env.TEST_BOT_NAME
    if (!targetBotUsername) {
      throw new Error(
        '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ username –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ development.'
      )
    }

    console.log(`üîß –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å username: ${targetBotUsername}`)

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ env
    const potentialTokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('BOT_TOKEN'))
      .map(([, value]) => value)
      .filter(Boolean) as string[]

    let bot: Telegraf<MyContext> | null = null
    let foundBotInfo: Awaited<
      ReturnType<Telegraf<MyContext>['telegram']['getMe']>
    > | null = null

    for (const token of potentialTokens) {
      try {
        const tempBot = new Telegraf<MyContext>(token, {
          handlerTimeout: Infinity,
        })
        const botInfo = await tempBot.telegram.getMe()
        if (botInfo.username === targetBotUsername) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç ${botInfo.username}`)
          bot = tempBot // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          foundBotInfo = botInfo
          break // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –±–æ—Ç –Ω–∞–π–¥–µ–Ω
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
        // console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ${token.substring(0, 10)}...: ${error.message}`);
      }
    }

    if (!bot || !foundBotInfo) {
      throw new Error(
        `‚ùå –ë–æ—Ç —Å username '${targetBotUsername}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
    console.log(
      'üîÑ [SCENE_DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ stage middleware...'
    )
    //
    // <<<--- –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–†–Ø–î–û–ö: stage –ü–ï–†–ï–î paymentHandlers --->>>
    bot.use(session()) // 1. –°–µ—Å—Å–∏—è (–∏–∑ bot.ts)
    bot.use(Telegraf.log(console.log)) // Log all Telegraf updates and middleware flow
    registerCommands({ bot }) // 2. –°—Ü–µ–Ω—ã –∏ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è stage.middleware())
    // –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ù–û–í–£–Æ –ö–û–ú–ê–ù–î–£ STATS
    setupStatsCommand(bot) // <--- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
    // 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ü–û–°–õ–ï stage)
    bot.on('pre_checkout_query', handlePreCheckoutQuery as any)
    bot.on('successful_payment', handleSuccessfulPayment as any)
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    setupHearsHandlers(bot) // 4. Hears (–í–æ–∑–≤—Ä–∞—â–∞–µ–º)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    bot.on(message('text'), handleTextMessage)
    // <<<---------------------------------------------------->>>

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é setBotCommands
    await setBotCommands(bot)

    botInstances.push(bot)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: [
        'message',
        'callback_query',
        'pre_checkout_query' as any,
        'successful_payment' as any,
      ],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
      process.env.BOT_TOKEN_8,
    ].filter((token): token is string => Boolean(token))

    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token, {
          handlerTimeout: Infinity,
        })
        bot.use(Telegraf.log(console.log)) // Log all Telegraf updates and middleware flow

        // <<<--- –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–†–Ø–î–û–ö: stage –ü–ï–†–ï–î paymentHandlers --->>>
        bot.use(session()) // 1. –°–µ—Å—Å–∏—è (–∏–∑ bot.ts)
        registerCommands({ bot }) // 2. –°—Ü–µ–Ω—ã –∏ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è stage.middleware())
        // –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ù–û–í–£–Æ –ö–û–ú–ê–ù–î–£ STATS
        setupStatsCommand(bot) // <--- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
        // 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ü–û–°–õ–ï stage)
        bot.on('pre_checkout_query', handlePreCheckoutQuery as any)
        bot.on('successful_payment', handleSuccessfulPayment as any)
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        setupHearsHandlers(bot) // 4. Hears (–í–æ–∑–≤—Ä–∞—â–∞–µ–º)

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
        bot.on(message('text'), handleTextMessage)
        // <<<---------------------------------------------------->>>

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é setBotCommands
        await setBotCommands(bot)

        // –ó–∞–ø—É—Å–∫–∞–µ–º webhook –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        // –°—Ç–∞—Ä—ã–π –±–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω

        // webhook settings
        // ... existing code ...

        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        const webhookDomain = process.env.WEBHOOK_DOMAIN
        if (!webhookDomain) {
          throw new Error('WEBHOOK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –±–æ—Ç–∞
        const webhookPath = `/${botInfo.username}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∫–∞–∫ –ø—É—Ç—å

        bot.launch({
          webhook: {
            domain: webhookDomain,
            port: currentPort,
            hookPath: webhookPath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º hookPath, –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
          },
          allowedUpdates: [
            'message',
            'callback_query',
            'pre_checkout_query' as any,
            'successful_payment' as any,
          ],
        })

        console.log(
          `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
        )
        await new Promise(resolve => setTimeout(resolve, 2000))
        currentPort++
      }
    }
  }

  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω...')
  // –ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é –ª–æ–≥
  console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã: payment_scene')
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω ...

  // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω –¥–æ–±–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥:
  console.log('‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async function gracefulShutdown(signal: string) {
  console.log(`üö® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`)
  for (const bot of botInstances) {
    console.log(`üö´ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${bot.botInfo?.username}...`)
    await bot.stop()
  }
  process.exit(0)
}

// –õ–æ–≤–∏–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => gracefulShutdown('SIGINT'))
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'))

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

// –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
// –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ src/bot.ts
startApiServer()

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
initializeBots()
  .then(() => {
    console.log('‚úÖ –ë–æ—Ç—ã –∏ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã') // –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  })
  .catch(error => {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–æ—Ç—ã –∏–ª–∏ API —Å–µ—Ä–≤–µ—Ä):',
      error
    )
    process.exit(1)
  })
