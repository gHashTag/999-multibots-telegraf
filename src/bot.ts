import dotenv from 'dotenv'
dotenv.config()

import { Composer, TelegramError } from 'telegraf'
import { MyContext } from '@/interfaces'
import { NODE_ENV } from './config'

import { development, production } from '@/utils/launch'
import express from 'express'
import { registerCallbackActions } from './handlers/—ÅallbackActions'
import { registerPaymentActions } from './handlers/paymentActions'
import { registerHearsActions } from './handlers/hearsActions'
import { registerCommands } from './registerCommands'
import { setBotCommands } from './setCommands'
import { getBotNameByToken } from './core/bot'
import startApiServer from './api'
import { bots } from './core/bot'
import { logger } from '@/utils/logger'

dotenv.config()

export const composer = new Composer<MyContext>()

type NextFunction = (err?: Error) => void

export const createBots = async () => {
  startApiServer()
  logger.info('üöÄ –ó–∞–ø—É—â–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä', {
    description: 'Public API server started',
  })

  if (!process.env.TEST_BOT_NAME) {
    logger.error('‚ùå TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
      description: 'TEST_BOT_NAME is not set',
    })
    throw new Error('TEST_BOT_NAME is required')
  }

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  const testBot =
    NODE_ENV === 'development'
      ? bots.find(bot => {
          const { bot_name } = getBotNameByToken(bot.telegram.token)
          return bot_name === process.env.TEST_BOT_NAME
        })
      : null

  const activeBots =
    NODE_ENV === 'development' ? (testBot ? [testBot] : []) : bots

  if (NODE_ENV === 'development' && activeBots.length === 0) {
    logger.error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
      description: 'Test bot not found',
      environment: NODE_ENV,
    })
    throw new Error('Test bot not found')
  }

  activeBots.forEach(async (bot, index) => {
    const telegramToken = bot.telegram.token
    const { bot_name } = getBotNameByToken(telegramToken)
    logger.info('ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', {
      description: 'Attempting to start bot',
      bot_name,
      environment: NODE_ENV,
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ó–î–ï–°–¨
    const app = express()
    const webhookPath = `/${bot_name}` // webhookPath —Ç–æ–∂–µ –Ω—É–∂–µ–Ω —Å–Ω–∞—Ä—É–∂–∏ try

    try {
      // –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é app –æ—Ç—Å—é–¥–∞
      const port = 3001 + index
      logger.info('üîå –ü–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞:', {
        description: 'Bot port',
        bot_name,
        port,
      })

      await setBotCommands(bot)
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ bot, —Ç–∞–∫ –∫–∞–∫ composer –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ registerCommands
      registerCommands({ bot })

      registerCallbackActions(bot)
      registerPaymentActions(bot)
      registerHearsActions(bot)

      // Log every incoming update
      bot.use(async (ctx: MyContext, next) => {
        logger.info('üì• [BOT] Incoming Update:', {
          updateId: ctx.update.update_id,
          type: ctx.updateType,
          userId: ctx.from?.id,
          chatId: ctx.chat?.id,
          sessionMode: ctx.session?.mode, // Log current session mode
          sceneState: ctx.scene?.current?.id, // Log current scene ID
        })
        try {
          await next()
        } catch (error) {
          logger.error('üí• [BOT] Uncaught Error in middleware:', {
            error: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
            updateId: ctx.update.update_id,
          })
          // Handle or report error appropriately
        }
      })

      // webhookPath –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—ã—à–µ
      const webhookUrl = `https://999-multibots-telegraf-u14194.vm.elestio.app`

      if (NODE_ENV === 'development') {
        await development(bot)
      } else {
        await production(bot, port, webhookUrl, webhookPath)
      }

      bot.use((ctx: MyContext, next: NextFunction) => {
        logger.info('üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ/–∫–æ–º–∞–Ω–¥–∞:', {
          description: 'Message/command received',
          text:
            ctx.message && 'text' in ctx.message ? ctx.message.text : undefined,
          from: ctx.from?.id,
          chat: ctx.chat?.id,
          bot: ctx.botInfo?.username,
          timestamp: new Date().toISOString(),
        })
        return next()
      })

      logger.info(`‚úÖ –ë–æ—Ç @${bot.botInfo?.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`, {
        description: 'Bot started successfully',
        bot_name,
        environment: NODE_ENV,
      })
    } catch (error) {
      if (
        error instanceof TelegramError &&
        error.response?.error_code === 401
      ) {
        logger.error(
          `‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${bot_name} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401 Unauthorized). –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.`,
          {
            description: 'Bot start error: Invalid token (401). Skipping bot.',
            bot_name,
            error: error.message,
            error_code: error.response?.error_code,
          }
        )
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–æ—Ç
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–∞—á–µ
        logger.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ ${bot_name}:`, {
          description: 'Critical error during bot startup',
          bot_name,
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : undefined,
        })
        // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ
        // throw error;
      }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Express
    // –¢–µ–ø–µ—Ä—å app –∏ webhookPath –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å
    app.use(webhookPath, express.json(), (req, res) => {
      logger.info('üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', {
        description: 'Webhook received',
        path: req.path,
        query: req.query,
        bot_expected: bot_name, // –õ–æ–≥–∏—Ä—É–µ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –æ–∂–∏–¥–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏
      })

      const botInstance = activeBots.find(
        b => b.telegram.token === telegramToken
      )

      if (botInstance) {
        botInstance.handleUpdate(req.body, res)
      } else {
        logger.error(
          `üö® –ù–µ –Ω–∞–π–¥–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø—É—Ç–∏ ${webhookPath}`,
          {
            description: 'Bot instance not found for webhook handling',
            webhookPath,
            expected_bot_name: bot_name,
            token_snippet: telegramToken.substring(0, 10) + '...',
          }
        )
        res.status(404).send('Bot instance not found for this path')
      }
    })
  })
}

createBots()
