import { isDev } from './config'

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

import { Composer, Telegraf, Scenes, Context } from 'telegraf'
import { Update, BotCommand } from 'telegraf/types'
import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'
import { setupHearsHandlers } from './hearsHandlers'
import { session } from 'telegraf'
import {
  handleSuccessfulPayment,
  handlePreCheckoutQuery,
} from './handlers/paymentHandlers'

import { handleTextMessage } from './handlers/handleTextMessage'
import { message } from 'telegraf/filters'
import { logger } from './utils/logger'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à API —Å–µ—Ä–≤–µ—Ä –∏–∑ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
// import { startApiServer } from './api_server'

// –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è digitalAvatarBodyModule
import { initDigitalAvatarBodyModule } from '@/modules/digitalAvatarBody'
import {
  inngest,
  functions as inngestFunctions,
  helloWorld as helloWorldFunction,
} from '@/inngest_app/client' // –ö–ª–∏–µ–Ω—Ç Inngest
import { replicate } from '@/core/replicate' // –ö–ª–∏–µ–Ω—Ç Replicate
import {
  getUserBalance,
  updateUserBalance,
  supabase,
  getUserByTelegramId,
  updateUserLevelPlusOne,
  createModelTraining,
} from '@/core/supabase' // –§—É–Ω–∫—Ü–∏–∏ Supabase
import { COSTS, UPLOAD_DIR, API_URL } from './config' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º COSTS, UPLOAD_DIR –∏ API_URL
import {
  calculateCost as actualCalculateCost,
  type CostDetails,
} from './price/priceCalculator' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ actualCalculateCost –∏ —Ç–∏–ø CostDetails
import { PaymentType } from './interfaces/payments.interface' // –ò–º–ø–æ—Ä—Ç PaymentType
import { getBotByName } from './core/bot' // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
// import type { GenerateModelTrainingDependencies } from '@/modules/digitalAvatarBody/inngest/generateModelTraining' // –¢–∏–ø —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
import { ModeEnum } from '@/interfaces/modes' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import { calculateCost } from '@/price/priceCalculator' // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const botInstances: Telegraf<MyContext>[] = []

// Define the commands for private chats
const privateCommands: BotCommand[] = [
  { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å / Restart' },
  { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main Menu' },

  { command: 'support', description: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support' },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${(error as Error).message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
export async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è calculateCost
const calculateCostAdapter = (params: {
  steps: number
  mode: ModeEnum // mode –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π, –Ω–æ —Ç–∏–ø –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å
  telegram_id?: string
  bot_name?: string
}): CostDetails => {
  // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  return actualCalculateCost(params.steps)
}

// –î–æ–±–∞–≤–ª—è—é –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤
async function initializeBots() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º Hello World —Å–µ—Ä–≤–µ—Ä –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  console.log('üîÑ [SCENE_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ stage –∏–∑ registerCommands...')
  const { stage } = await import('./registerCommands')
  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ü–µ–Ω—ã –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
  try {
    const stageInfo = (stage as any)._handlers || []
    console.log(
      'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
      stageInfo.length
    )
  } catch (error) {
    console.log(
      '‚ö†Ô∏è [SCENE_DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ü–µ–Ω:',
      (error as Error).message
    )
  }

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ TEST_BOT_NAME
    const targetBotUsername = process.env.TEST_BOT_NAME
    if (!targetBotUsername) {
      throw new Error(
        '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ username –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ development.'
      )
    }

    console.log(`üîß –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å username: ${targetBotUsername}`)

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ env
    const potentialTokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('BOT_TOKEN'))
      .map(([, value]) => value)
      .filter(Boolean) as string[]

    let bot: Telegraf<MyContext> | null = null
    let foundBotInfo: Awaited<
      ReturnType<Telegraf<MyContext>['telegram']['getMe']>
    > | null = null
    // üëá –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è API –º–æ–¥—É–ª—è –ó–î–ï–°–¨, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ
    let digitalAvatarModuleAPI: ReturnType<
      typeof initDigitalAvatarBodyModule
    > | null = null

    for (const token of potentialTokens) {
      try {
        const tempBot = new Telegraf<MyContext>(token, {
          handlerTimeout: Infinity,
        })
        const botInfo = await tempBot.telegram.getMe()
        if (botInfo.username === targetBotUsername) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç ${botInfo.username}`)
          bot = tempBot // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          foundBotInfo = botInfo
          // –ù–∞—à–ª–∏ –±–æ—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
          break
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
      }
    }

    if (!bot || !foundBotInfo) {
      throw new Error(
        `‚ùå –ë–æ—Ç —Å username '${targetBotUsername}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.`
      )
    }

    // üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ü–û–°–õ–ï –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞
    // !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô !!!
    // DigitalAvatarBodyDependencies –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ inngest –∏ sendTelegramMessage
    const digitalAvatarDependencies = {
      inngest: inngest,
      sendTelegramMessage: async (
        chatId: string | number,
        text: string,
        extra?: any
      ) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º bot, –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–æ–º –≤—ã—à–µ
        if (bot) {
          return await bot.telegram.sendMessage(chatId, text, extra)
        } else {
          logger.error(
            '[Dependencies] Bot instance not found for sendTelegramMessage'
          )
          return Promise.reject('Bot instance not found')
        }
      },
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
    digitalAvatarModuleAPI = initDigitalAvatarBodyModule(
      digitalAvatarDependencies // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    )
    logger.info(
      `[Module Init] digitalAvatarBodyModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${foundBotInfo.username}`
    )

    // üëá –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –º–æ–¥—É–ª—è
    if (
      digitalAvatarModuleAPI && // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      digitalAvatarModuleAPI.inngestFunctions &&
      digitalAvatarModuleAPI.inngestFunctions.length > 0
    ) {
      digitalAvatarModuleAPI.inngestFunctions.forEach(funcConfig => {
        // @ts-ignore // –û—Å—Ç–∞–≤–ª—è–µ–º ts-ignore, —Ç–∞–∫ –∫–∞–∫ —Ç–∏–ø funcConfig –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º
        const createdFunction = inngest.createFunction(funcConfig)
        // üëá –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ù–ê–ü–†–Ø–ú–£–Æ –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        inngestFunctions.push(createdFunction)
        logger.info(
          `[Inngest Func Add] –§—É–Ω–∫—Ü–∏—è '${funcConfig.id || funcConfig.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${foundBotInfo.username}`
        )
      })
    } else {
      logger.warn(
        `[Inngest Func Add] –ú–æ–¥—É–ª—å digitalAvatarBody –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è ${foundBotInfo.username}`
      )
    }
    // –î–æ–±–∞–≤–ª—è–µ–º helloWorld —Ñ—É–Ω–∫—Ü–∏—é –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    if (!inngestFunctions.includes(helloWorldFunction)) {
      inngestFunctions.push(helloWorldFunction)
      logger.info(
        `[Inngest Func Add] –§—É–Ω–∫—Ü–∏—è helloWorld –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${foundBotInfo.username}`
      )
    }

    // Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è digitalAvatarAPI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    // !!! –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò startModelTraining –ò –°–í–Ø–ó–ê–ù–ù–û–ô –û–®–ò–ë–ö–ò !!!
    if (digitalAvatarModuleAPI) {
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –µ—Å—Ç—å
      const api = digitalAvatarModuleAPI // –ö–æ–ø–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è
      bot.use((ctx, next) => {
        // üëá –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MyContext
        ctx.digitalAvatarAPI = api // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç API
        return next()
      })
      logger.info(
        `[Middleware] digitalAvatarAPI –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ${foundBotInfo.username}`
      )
    } else {
      logger.warn(
        `[Middleware] digitalAvatarModuleAPI –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, middleware –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${foundBotInfo.username}`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
    console.log(
      'üîÑ [SCENE_DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ stage middleware...'
    )

    // <<<--- –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–†–Ø–î–û–ö: stage –ü–ï–†–ï–î paymentHandlers --->>>
    bot.use(session()) // 1. –°–µ—Å—Å–∏—è (–∏–∑ bot.ts)
    registerCommands({ bot }) // 2. –°—Ü–µ–Ω—ã –∏ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è stage.middleware())
    // 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ü–û–°–õ–ï stage)
    bot.on('pre_checkout_query', handlePreCheckoutQuery as any)
    bot.on('successful_payment', handleSuccessfulPayment as any)
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    setupHearsHandlers(bot) // 4. Hears (–°—Ç–∞—Ä—ã–µ)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    bot.on(message('text'), handleTextMessage)
    // <<<---------------------------------------------------->>>

    // <<<--- Set commands scope for the development bot ---<<<\
    try {
      await bot.telegram.setMyCommands(privateCommands, {
        scope: { type: 'all_private_chats' },
      })
      await bot.telegram.setMyCommands([], {
        scope: { type: 'all_group_chats' },
      }) // Empty commands for groups
      await bot.telegram.setMyCommands([], {
        scope: { type: 'all_chat_administrators' },
      }) // Optional: Empty for admins too
      console.log(
        `‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ ${foundBotInfo.username}`
      )
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è ${foundBotInfo.username}:`,
        error
      )
    }
    // >>>--------------------------------------------------->>>\

    botInstances.push(bot)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: [
        'message',
        'callback_query',
        'pre_checkout_query' as any,
        'successful_payment' as any,
      ],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
      process.env.BOT_TOKEN_8,
    ].filter((token): token is string => Boolean(token))

    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token, {
          handlerTimeout: Infinity,
        })
        bot.use(Composer.log())

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è digitalAvatarBodyModule –¥–ª—è –∫–∞–∂–¥–æ–≥–æ production –±–æ—Ç–∞
        // !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô !!!
        const digitalAvatarDependencies = {
          inngest: inngest,
          // üëá –ò—Å–ø—Ä–∞–≤–ª—è–µ–º sendTelegramMessage –¥–ª—è prod
          sendTelegramMessage: async (
            chatId: string | number,
            messageText: string,
            extra?: any
          ) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ö–ï–ù –¢–ï–ö–£–©–ï–ì–û –ë–û–¢–ê –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞
            // –í–ê–ñ–ù–û: botInstances –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
            // –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å `bot`.
            return bot.telegram.sendMessage(chatId, messageText, extra)
          },
        }
        const currentDigitalAvatarAPI = initDigitalAvatarBodyModule(
          digitalAvatarDependencies // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        )
        const botInfoForLog = await bot.telegram.getMe() // –ü–æ–ª—É—á–∞–µ–º botInfo –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(
          `[Module Init Prod] digitalAvatarBodyModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${botInfoForLog.username}`
        )

        // üëá –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è production –±–æ—Ç–∞
        if (
          currentDigitalAvatarAPI.inngestFunctions &&
          currentDigitalAvatarAPI.inngestFunctions.length > 0
        ) {
          currentDigitalAvatarAPI.inngestFunctions.forEach(funcConfig => {
            // @ts-ignore
            const createdFunction = inngest.createFunction(funcConfig)
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ id/name)
            const alreadyExists = inngestFunctions.some(
              f => (f.id || f.name) === (funcConfig.id || funcConfig.name)
            )
            if (!alreadyExists) {
              inngestFunctions.push(createdFunction)
              logger.info(
                `[Inngest Func Add Prod] –§—É–Ω–∫—Ü–∏—è '${funcConfig.id || funcConfig.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${botInfoForLog.username}`
              )
            }
          })
        } else {
          logger.warn(
            `[Inngest Func Add Prod] –ú–æ–¥—É–ª—å digitalAvatarBody –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è ${botInfoForLog.username}`
          )
        }
        // –î–æ–±–∞–≤–ª—è–µ–º helloWorld —Ñ—É–Ω–∫—Ü–∏—é –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
        const helloWorldExists = inngestFunctions.some(
          f =>
            (f.id || f.name) ===
            (helloWorldFunction.id || helloWorldFunction.name)
        )
        if (!helloWorldExists) {
          inngestFunctions.push(helloWorldFunction)
          logger.info(
            `[Inngest Func Add Prod] –§—É–Ω–∫—Ü–∏—è helloWorld –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${botInfoForLog.username}`
          )
        }

        // Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è digitalAvatarAPI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        // !!! –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò startModelTraining !!!
        if (currentDigitalAvatarAPI) {
          // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –µ—Å—Ç—å
          bot.use(
            // üëá –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è ctx.digitalAvatarAPI
            (apiInstance => (ctx: MyContext, next: () => Promise<void>) => {
              ctx.digitalAvatarAPI = apiInstance // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç API
              return next()
            })(currentDigitalAvatarAPI)
          )
          logger.info(
            `[Middleware Prod] digitalAvatarAPI –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ${botInfoForLog.username}`
          )
        } else {
          logger.warn(
            `[Middleware Prod] currentDigitalAvatarAPI –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, middleware –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${botInfoForLog.username}`
          )
        }

        // <<<--- –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–†–Ø–î–û–ö: stage –ü–ï–†–ï–î paymentHandlers --->>>
        bot.use(session()) // 1. –°–µ—Å—Å–∏—è (–∏–∑ bot.ts)
        registerCommands({ bot }) // 2. –°—Ü–µ–Ω—ã –∏ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è stage.middleware())
        // 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ü–û–°–õ–ï stage)
        bot.on('pre_checkout_query', handlePreCheckoutQuery as any)
        bot.on('successful_payment', handleSuccessfulPayment as any)
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        setupHearsHandlers(bot) // 4. Hears (–°—Ç–∞—Ä—ã–µ)

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
        bot.on(message('text'), handleTextMessage)
        // <<<---------------------------------------------------->>>

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // <<<--- Set commands scope for the production bot ---<<<\
        try {
          await bot.telegram.setMyCommands(privateCommands, {
            scope: { type: 'all_private_chats' },
          })
          await bot.telegram.setMyCommands([], {
            scope: { type: 'all_group_chats' },
          }) // Empty commands for groups
          await bot.telegram.setMyCommands([], {
            scope: { type: 'all_chat_administrators' },
          }) // Optional: Empty for admins too
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`)
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è ${botInfo.username}:`,
            error
          )
        }
        // >>>---------------------------------------------------->>>\

        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        const webhookDomain = process.env.WEBHOOK_DOMAIN
        if (!webhookDomain) {
          throw new Error('WEBHOOK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –±–æ—Ç–∞
        const webhookPath = `/${botInfo.username}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∫–∞–∫ –ø—É—Ç—å

        bot.launch({
          webhook: {
            domain: webhookDomain,
            port: currentPort,
            hookPath: webhookPath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º hookPath, –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
          },
          allowedUpdates: [
            'message',
            'callback_query',
            'pre_checkout_query' as any,
            'successful_payment' as any,
          ],
        })

        console.log(
          `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
        )
        await new Promise(resolve => setTimeout(resolve, 2000))
        currentPort++
      }
    }
  }

  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω...')
  // –ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é –ª–æ–≥
  console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã: payment_scene')
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω ...

  // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω –¥–æ–±–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥:
  console.log('‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async function gracefulShutdown(signal: string) {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

  // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–æ–≤
  console.log(`[${signal}] Stopping ${botInstances.length} bot instance(s)...`)
  const stopPromises = botInstances.map(async (bot, index) => {
    try {
      console.log(
        `[${signal}] Initiating stop for bot instance index ${index}...`
      )
      // bot.stop() –¥–ª—è long polling –æ–±—ã—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å
      // –•–æ—Ç—è Telegraf 4.x stop() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç void –¥–ª—è polling
      bot.stop(signal)
      console.log(
        `[${signal}] Successfully stopped bot instance index ${index}.`
      )
    } catch (error) {
      console.error(
        `[${signal}] Error stopping bot instance index ${index}:`,
        error // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
      )
    }
  })
  // –ù–µ –Ω—É–∂–Ω–æ Promise.all, —Ç–∞–∫ –∫–∞–∫ bot.stop() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è polling
  // await Promise.all(stopPromises) // –£–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ
  console.log(`[${signal}] All bot instances processed for stopping.`)

  // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
  console.log(`[${signal}] Adding a short delay before exiting...`)
  await new Promise(resolve => setTimeout(resolve, 3000))

  console.log(`[${signal}] Graceful shutdown completed. Exiting.`)
  process.exit(0)
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => gracefulShutdown('SIGINT'))
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'))

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

// –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
// –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ src/bot.ts
// startApiServer()

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
initializeBots()
  .then(() => {
    console.log(
      '‚úÖ –ë–æ—Ç—ã –∏ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Ñ—É–Ω–∫—Ü–∏–∏ Inngest –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–∞—Å—Å–∏–≤)'
    )
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤:', error)
    process.exit(1)
  })
