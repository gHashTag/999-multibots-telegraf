import md5 from 'md5'
import { isDev, TEST_PASSWORD1 } from '@/config'
import { logger } from '@/utils/logger'

const useTestMode = isDev

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa
 */
export async function generateRobokassaUrl(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string,
  isTest: boolean = useTestMode
): Promise<string> {
  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const actualPassword = isTest && TEST_PASSWORD1 ? TEST_PASSWORD1 : password1

  logger.info('üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è Robokassa', {
    description: 'Generating Robokassa URL',
    merchantLogin,
    outSum,
    invId,
    isTestMode: isTest,
    usingTestPassword: isTest && TEST_PASSWORD1 ? true : false,
    mode: isTest ? '–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú',
  })

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ invId - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
  if (!Number.isInteger(invId) || invId > 2147483647) {
    logger.error('‚ùå –û—à–∏–±–∫–∞: InvId –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω', {
      description: 'Error: InvId is incorrect, will be converted',
      originalInvId: invId,
    })
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    invId = Math.floor(invId % 1000000)
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
  if (outSum <= 0) {
    logger.error('‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π', {
      description: 'Error: Sum must be positive',
      originalSum: outSum,
    })
    outSum = Math.abs(outSum) || 1 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 1 –µ—Å–ª–∏ 0
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º description
  if (!description || description.trim() === '') {
    logger.warn(
      '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      {
        description: 'Warning: Description is empty, using default',
      }
    )
    description = '–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥'
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const signatureString = `${merchantLogin}:${outSum}:${invId}:${actualPassword}`
  logger.info('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
    description: 'Signature string',
    signatureString,
  })

  const signatureValue = md5(signatureString).toUpperCase()

  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL Robokassa
  const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx'

  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const params = new URLSearchParams()

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  params.append('MerchantLogin', merchantLogin)
  params.append('OutSum', outSum.toString())
  params.append('InvId', invId.toString())
  params.append('Description', description)
  params.append('SignatureValue', signatureValue)

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  if (isTest) {
    params.append('IsTest', '1')
  }

  const url = `${baseUrl}?${params.toString()}`

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–π URL
  try {
    const parsedUrl = new URL(url)
    const requiredParams = [
      'MerchantLogin',
      'OutSum',
      'InvId',
      'Description',
      'SignatureValue',
    ]
    const missingParams = []

    for (const param of requiredParams) {
      if (!parsedUrl.searchParams.has(param)) {
        missingParams.push(param)
      }
    }

    if (missingParams.length > 0) {
      logger.error('‚ùå –û—à–∏–±–∫–∞: –í URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', {
        description: 'Error: URL is missing required parameters',
        missingParams,
      })
      throw new Error(
        `URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${missingParams.join(', ')}`
      )
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL:', {
      description: 'Error checking URL',
      error,
    })
    throw error
  }

  logger.info('‚úÖ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è Robokassa:', {
    message: 'URL generated for Robokassa',
    testMode: isTest,
    paymentUrl: url,
  })

  return url
}
