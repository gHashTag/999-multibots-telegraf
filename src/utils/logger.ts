import { createLogger, format, transports } from 'winston'

import path from 'path'
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å fs
import fs from 'fs'

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logDir = path.join(process.cwd(), 'logs')
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true })
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securityLogsDir = path.join(logDir, 'security')
if (!fs.existsSync(securityLogsDir)) {
  fs.mkdirSync(securityLogsDir, { recursive: true })
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—ä–µ–∫—Ç–æ–≤
const prettyJson = format(info => {
  const { timestamp, level, message, ...rest } = info

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const formatMetadata = (obj: Record<string, any>, indent = 2): string => {
    if (!obj || Object.keys(obj).length === 0) return ''

    let result = ''
    for (const [key, value] of Object.entries(obj)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º stack, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
      if (key === 'stack') continue

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á
      result += ' '.repeat(indent) + `${key}: `

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
      if (value === null) {
        result += 'null\n'
      } else if (value === undefined) {
        result += 'undefined\n'
      } else if (typeof value === 'object' && !Array.isArray(value)) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        result += '\n' + formatMetadata(value, indent + 2)
      } else if (Array.isArray(value)) {
        if (value.length === 0) {
          result += '[]\n'
        } else {
          result += '[\n'
          value.forEach((item, index) => {
            if (typeof item === 'object' && item !== null) {
              result +=
                ' '.repeat(indent + 2) +
                `${index}: \n` +
                formatMetadata(item, indent + 4)
            } else {
              result += ' '.repeat(indent + 2) + `${index}: ${String(item)}\n`
            }
          })
          result += ' '.repeat(indent) + ']\n'
        }
      } else {
        // –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        result += `${String(value)}\n`
      }
    }
    return result
  }

  return { ...info, formattedMetadata: formatMetadata(rest) }
})

// –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
const commonFormat = format.combine(
  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
  format.errors({ stack: true }),
  prettyJson(),
  format.printf(({ level, message, timestamp, stack, formattedMetadata }) => {
    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
    const levelEmoji =
      {
        error: '‚ùå',
        warn: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è',
        debug: 'üîç',
        verbose: 'üìù',
        silly: 'ü§™',
      }[level] || ''

    return `${timestamp} ${levelEmoji} [${level.toUpperCase()}]: ${message}${
      stack ? `\n${'='.repeat(80)}\n${stack}\n${'='.repeat(80)}` : ''
    }${formattedMetadata ? `\n${formattedMetadata}` : ''}`
  })
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã (–∫–æ–Ω—Å–æ–ª—å)
// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø any[], —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
const baseTransports: any[] = [new transports.Console()]

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞
if (process.env.NODE_ENV !== 'test') {
  baseTransports.push(
    new transports.File({
      filename: path.join(logDir, 'error.log'),
      level: 'error',
    }),
    new transports.File({
      filename: path.join(logDir, 'combined.log'),
    })
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const logger = createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: commonFormat,
  transports: baseTransports, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
})

// –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–º–µ–Ω–∏ –±–æ—Ç–∞
export const botLogger = {
  info: (botName: string, message: string, meta?: Record<string, any>) => {
    logger.info(`[${botName}] ${message}`, meta)
  },
  warn: (botName: string, message: string, meta?: Record<string, any>) => {
    logger.warn(`[${botName}] ${message}`, meta)
  },
  error: (botName: string, message: string, meta?: Record<string, any>) => {
    logger.error(`[${botName}] ${message}`, meta)
  },
  debug: (botName: string, message: string, meta?: Record<string, any>) => {
    logger.debug(`[${botName}] ${message}`, meta)
  },
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø any[], —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
const securityTransports: any[] = []

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞
if (process.env.NODE_ENV !== 'test') {
  securityTransports.push(
    new transports.File({
      filename: path.join(securityLogsDir, 'security.log'),
    }),
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –∏–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –æ—à–∏–±–æ–∫
    new transports.File({
      filename: path.join(logDir, 'error.log'),
      level: 'error',
    })
  )
}

// –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ò –Ω–µ –≤ —Ç–µ—Å—Ç–µ, —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
  // –î–æ–±–∞–≤–ª—è–µ–º Console —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  if (!securityTransports.some(t => t instanceof transports.Console)) {
    securityTransports.push(
      new transports.Console({
        format: format.combine(format.colorize(), format.simple()),
      })
    )
  }
}

// –õ–æ–≥–≥–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export const securityLogger = createLogger({
  level: 'info',
  format: format.combine(
    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    format.json()
  ),
  defaultMeta: { service: 'security' },
  transports: securityTransports, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
})

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export const logSecurityEvent = (
  eventType: string,
  details: Record<string, any>,
  severity: 'info' | 'warn' | 'error' = 'warn'
) => {
  securityLogger[severity](`–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${eventType}`, {
    ...details,
    timestamp: new Date().toISOString(),
    eventType,
  })
}

export default logger
