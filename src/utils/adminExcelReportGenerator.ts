/**
 * –ì–ï–ù–ï–†–ê–¢–û–† EXCEL-–û–¢–ß–ï–¢–û–í –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ï–í –ë–û–¢–û–í –ò –°–£–ü–ï–†-–ê–î–ú–ò–ù–û–í
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –±–æ—Ç–∞–º —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
 */

import * as XLSX from 'xlsx'
import { z } from 'zod'
import { supabase } from '@/core/supabase'
import {
  getServiceDisplayTitle,
  getServiceEmoji,
  UserService,
} from './serviceMapping'

// Zod —Å—Ö–µ–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î)
const PaymentSchema = z.object({
  id: z.number(),
  telegram_id: z.union([z.string(), z.number()]).transform(val => String(val)),
  bot_name: z.string(),
  type: z.enum(['MONEY_INCOME', 'MONEY_OUTCOME', 'REFUND']),
  category: z.enum(['REAL', 'BONUS']).nullable().optional(),
  currency: z.enum(['RUB', 'XTR', 'STARS']).nullable().optional(),
  payment_method: z.string().nullable().optional(),
  service_type: z.string().nullable().optional(),
  stars: z.number().nullable().optional(),
  amount: z.number().nullable().optional(),
  cost: z.number().nullable().optional(),
  payment_date: z.string(),
  description: z.string().nullable().optional(),
  status: z.string(),
})

const UserSchema = z.object({
  telegram_id: z.union([z.string(), z.number()]).transform(val => String(val)),
  username: z.string().nullable().optional(),
  first_name: z.string().nullable().optional(),
  last_name: z.string().nullable().optional(),
  bot_name: z.string(),
})

const ServiceStatsSchema = z.object({
  count: z.number(),
  revenue: z.number(),
  cost: z.number(),
})

const TopUserSchema = z.object({
  telegram_id: z.string(),
  username: z.string().nullable().optional(),
  first_name: z.string().nullable().optional(),
  last_name: z.string().nullable().optional(),
  total_spending: z.number(),
  transactions_count: z.number(),
})

const MonthlyStatsSchema = z.object({
  period: z.string(),
  income: z.number(),
  income_rub: z.number(),
  outcome: z.number(),
  cost: z.number(),
  profit: z.number(),
  margin: z.number(),
  transactions: z.number(),
  active_users: z.number(),
})

const DailyStatsSchema = z.object({
  date: z.string(),
  income: z.number(),
  outcome: z.number(),
  cost: z.number(),
  profit: z.number(),
  transactions: z.number(),
})

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Map (—Ç–∞–∫ –∫–∞–∫ Zod –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Map)
interface BotReportData {
  botName: string
  totalIncome: number
  totalOutcome: number
  totalCost: number
  netProfit: number
  profitMargin: number
  totalUsers: number
  activeUsersMonth: number
  totalTransactions: number

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º
  rubIncome: number
  rubOutcome: number
  starsIncome: number
  starsOutcome: number
  starsCost: number

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
  robokassaPayments: z.infer<typeof PaymentSchema>[]
  telegramStarsPayments: z.infer<typeof PaymentSchema>[]
  bonusPayments: z.infer<typeof PaymentSchema>[]

  // –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  serviceStats: Map<string, { count: number; revenue: number; cost: number }>

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  topUsers: z.infer<typeof TopUserSchema>[]
  userSegments: any[]

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  monthlyStats: z.infer<typeof MonthlyStatsSchema>[]
  dailyStats: z.infer<typeof DailyStatsSchema>[]

  // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  allTransactions: z.infer<typeof PaymentSchema>[]
}

export async function generateAdminExcelReport(
  botName: string
): Promise<Buffer> {
  try {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const validatedBotName = z.string().min(1).parse(botName)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    const reportData = await getBotReportData(validatedBotName)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
    const workbook = XLSX.utils.book_new()

    // –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
    const summarySheet = createBotSummarySheet(reportData)
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞')

    // –õ–∏—Å—Ç 2: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    const financialSheet = createFinancialAnalyticsSheet(reportData)
    XLSX.utils.book_append_sheet(workbook, financialSheet, 'üí∞ –§–∏–Ω–∞–Ω—Å—ã')

    // –õ–∏—Å—Ç 3: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    const servicesSheet = createServicesAnalyticsSheet(reportData)
    XLSX.utils.book_append_sheet(workbook, servicesSheet, 'üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã')

    // –õ–∏—Å—Ç 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const usersSheet = createUsersAnalyticsSheet(reportData)
    XLSX.utils.book_append_sheet(workbook, usersSheet, 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')

    // –õ–∏—Å—Ç 5: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    const timeSheet = createTimeAnalyticsSheet(reportData)
    XLSX.utils.book_append_sheet(workbook, timeSheet, 'üìÖ –î–∏–Ω–∞–º–∏–∫–∞')

    // –õ–∏—Å—Ç 6: –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionsSheet = createTransactionsSheet(reportData)
    XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
    const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' })
    return buffer
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞:', error)
    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel –æ—Ç—á–µ—Ç: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    )
  }
}

async function getBotReportData(botName: string): Promise<BotReportData> {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ—Ç–∞
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –∑–∞–ø–∏—Å–µ–π
  let allPayments: any[] = []
  let from = 0
  const batchSize = 1000
  let hasMore = true

  while (hasMore) {
    const { data: batchPayments, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .range(from, from + batchSize - 1)
      .order('payment_date', { ascending: false })

    if (error) throw error

    if (!batchPayments || batchPayments.length === 0) {
      hasMore = false
    } else {
      allPayments = allPayments.concat(batchPayments)
      from += batchSize

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
      if (batchPayments.length < batchSize) {
        hasMore = false
      }
    }
  }

  const payments = allPayments

  if (!payments) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö')

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
  const { data: users } = await supabase
    .from('users')
    .select('*')
    .eq('bot_name', botName)

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const validatedPayments = payments.map(p => PaymentSchema.parse(p))
  const validatedUsers = users ? users.map(u => UserSchema.parse(u)) : []

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const incomes = validatedPayments.filter(p => p.type === 'MONEY_INCOME')
  const outcomes = validatedPayments.filter(p => p.type === 'MONEY_OUTCOME')
  const realIncomes = incomes.filter(p => p.category === 'REAL')
  const bonusIncomes = incomes.filter(p => p.category === 'BONUS')

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
  const robokassaPayments = realIncomes.filter(
    p =>
      p.currency === 'RUB' &&
      (p.payment_method === 'Robokassa' || p.payment_method === 'Manual')
  )
  const telegramStarsPayments = realIncomes.filter(
    p =>
      (p.currency === 'XTR' || p.currency === 'STARS') &&
      p.payment_method === 'Telegram'
  )

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const totalIncome = realIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const totalOutcome = outcomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const totalCost = outcomes.reduce((sum, p) => sum + (p.cost || 0), 0)
  const netProfit = totalIncome - totalOutcome - totalCost
  const profitMargin = totalIncome > 0 ? (netProfit / totalIncome) * 100 : 0

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≤–∞–ª—é—Ç–∞–º
  const rubIncome = robokassaPayments.reduce(
    (sum, p) => sum + (p.amount || 0),
    0
  )
  const rubOutcome = outcomes
    .filter(p => p.currency === 'RUB')
    .reduce((sum, p) => sum + (p.amount || 0), 0)
  const starsIncome = telegramStarsPayments.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const starsOutcome = outcomes
    .filter(p => p.currency !== 'RUB')
    .reduce((sum, p) => sum + (p.stars || 0), 0)
  const starsCost = outcomes.reduce((sum, p) => sum + (p.cost || 0), 0)

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  const serviceStats = new Map<
    string,
    { count: number; revenue: number; cost: number }
  >()
  outcomes.forEach(payment => {
    const service = payment.service_type || 'unknown'
    const current = serviceStats.get(service) || {
      count: 0,
      revenue: 0,
      cost: 0,
    }
    current.count += 1
    current.revenue += payment.stars || 0
    current.cost += payment.cost || 0
    serviceStats.set(service, current)
  })

  // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ç—Ä–∞—Ç–∞–º
  const userSpending = new Map<string, number>()
  outcomes.forEach(payment => {
    const userId = payment.telegram_id
    const current = userSpending.get(userId) || 0
    userSpending.set(userId, current + (payment.stars || 0))
  })

  const topUsers = Array.from(userSpending.entries())
    .sort(([, a], [, b]) => b - a)
    .slice(0, 20)
    .map(([userId, spending]) => {
      const user = validatedUsers.find(u => u.telegram_id === userId)
      return TopUserSchema.parse({
        telegram_id: userId,
        username: user?.username,
        first_name: user?.first_name,
        last_name: user?.last_name,
        total_spending: spending,
        transactions_count: outcomes.filter(p => p.telegram_id === userId)
          .length,
      })
    })

  // –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const monthlyStats = getMonthlyStats(validatedPayments).map(stat =>
    MonthlyStatsSchema.parse(stat)
  )
  const dailyStats = getDailyStats(
    validatedPayments.filter(p => {
      const date = new Date(p.payment_date)
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      return date >= thirtyDaysAgo
    })
  ).map(stat => DailyStatsSchema.parse(stat))

  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü
  const oneMonthAgo = new Date()
  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)
  const activeUsersMonth = new Set(
    validatedPayments
      .filter(p => new Date(p.payment_date) >= oneMonthAgo)
      .map(p => p.telegram_id)
  ).size

  return {
    botName,
    totalIncome,
    totalOutcome,
    totalCost,
    netProfit,
    profitMargin,
    totalUsers: validatedUsers.length,
    activeUsersMonth,
    totalTransactions: validatedPayments.length,
    rubIncome,
    rubOutcome,
    starsIncome,
    starsOutcome,
    starsCost,
    robokassaPayments,
    telegramStarsPayments,
    bonusPayments: bonusIncomes,
    serviceStats,
    topUsers,
    userSegments: [], // TODO: implement user segmentation
    monthlyStats,
    dailyStats,
    allTransactions: validatedPayments,
  }
}

function createBotSummarySheet(data: BotReportData) {
  const summaryData = [
    ['ü§ñ –û–¢–ß–ï–¢ –ü–û –ë–û–¢–£ - –û–ë–©–ê–Ø –°–í–û–î–ö–ê', '', '', ''],
    ['', '', '', ''],
    ['ü§ñ –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞:', `@${data.botName}`, '', ''],
    ['üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞:', new Date().toLocaleDateString('ru-RU'), '', ''],
    ['', '', '', ''],
  ]

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–±–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
  if (data.rubIncome > 0 || data.robokassaPayments.length > 0) {
    summaryData.push(
      ['üí∞ –†–£–ë–õ–ï–í–´–ï –û–ü–ï–†–ê–¶–ò–ò', '', '', ''],
      ['', '', '', ''],
      [
        'üìà –î–æ—Ö–æ–¥—ã:',
        `${Math.round(data.rubIncome * 100) / 100} —Ä—É–±.`,
        `(${data.robokassaPayments.length} –æ–ø–µ—Ä–∞—Ü–∏–π)`,
        '',
      ],
      [
        'üìâ –†–∞—Å—Ö–æ–¥—ã:',
        `${Math.round(data.rubOutcome * 100) / 100} —Ä—É–±.`,
        '',
        '',
      ],
      [
        'üíé –†–µ–∑—É–ª—å—Ç–∞—Ç:',
        `${Math.round((data.rubIncome - data.rubOutcome) * 100) / 100} —Ä—É–±.`,
        '',
        '',
      ],
      ['', '', '', '']
    )
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
  if (data.starsIncome > 0 || data.telegramStarsPayments.length > 0) {
    summaryData.push(
      ['‚≠ê –ó–í–ï–ó–î–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò', '', '', ''],
      ['', '', '', ''],
      [
        'üìà –î–æ—Ö–æ–¥—ã:',
        `${Math.round(data.starsIncome * 100) / 100} ‚≠ê`,
        `(${data.telegramStarsPayments.length} –æ–ø–µ—Ä–∞—Ü–∏–π)`,
        '',
      ],
      [
        'üìâ –†–∞—Å—Ö–æ–¥—ã:',
        `${Math.round(data.starsOutcome * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:',
        `${Math.round(data.starsCost * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üíé –†–µ–∑—É–ª—å—Ç–∞—Ç:',
        `${Math.round((data.starsIncome - data.starsOutcome - data.starsCost) * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      ['', '', '', '']
    )
  }

  // –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
  if (data.totalIncome > 0 || data.totalOutcome > 0) {
    summaryData.push(
      ['üí∞ –û–ë–©–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', '', '', ''],
      ['', '', '', ''],
      [
        'üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥:',
        `${Math.round(data.totalIncome * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üìâ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:',
        `${Math.round(data.totalOutcome * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:',
        `${Math.round(data.totalCost * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:',
        `${Math.round(data.netProfit * 100) / 100} ‚≠ê`,
        '',
        '',
      ],
      [
        'üìä –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:',
        `${Math.round(data.profitMargin * 100) / 100}%`,
        '',
        '',
      ],
      ['', '', '', '']
    )
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
  summaryData.push(
    ['', '', '', ''],
    ['üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò', '', '', ''],
    ['', '', '', ''],
    ['üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.totalUsers.toString(), '', ''],
    ['üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü:', data.activeUsersMonth.toString(), '', ''],
    [
      'üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è:',
      `${data.totalUsers > 0 ? Math.round((data.activeUsersMonth / data.totalUsers) * 10000) / 100 : 0}%`,
      '',
      '',
    ],
    ['', '', '', ''],
    ['‚ö° –û–ü–ï–†–ê–¶–ò–ò', '', '', ''],
    ['', '', '', ''],
    ['üî¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', data.totalTransactions.toString(), '', ''],
    [
      'üí≥ Robokassa –ø–ª–∞—Ç–µ–∂–µ–π:',
      data.robokassaPayments.length.toString(),
      '',
      '',
    ],
    [
      '‚≠ê Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π:',
      data.telegramStarsPayments.length.toString(),
      '',
      '',
    ],
    ['üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', data.bonusPayments.length.toString(), '', ''],
    ['', '', '', ''],
    ['üèÜ –¢–û–ü –°–ï–†–í–ò–°–´', '', '', ''],
    ['', '', '', ''],
    ...Array.from(data.serviceStats.entries())
      .sort(([, a], [, b]) => b.revenue - a.revenue)
      .slice(0, 5)
      .map(([service, stats], index) => [
        `${index + 1}. ${getServiceEmoji(service)} ${getServiceDisplayTitle(service as UserService)}:`,
        `${Math.round(stats.revenue * 100) / 100} ‚≠ê`,
        `(${stats.count} –æ–ø–µ—Ä–∞—Ü–∏–π)`,
        '',
      ])
  )

  return XLSX.utils.aoa_to_sheet(summaryData)
}

function createFinancialAnalyticsSheet(data: BotReportData) {
  const headers = [
    'üìÖ –ü–µ—Ä–∏–æ–¥',
    'üí∞ –î–æ—Ö–æ–¥—ã (‚≠ê)',
    'üí∞ –î–æ—Ö–æ–¥—ã (—Ä—É–±.)',
    'üìâ –†–∞—Å—Ö–æ–¥—ã (‚≠ê)',
    'üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (‚≠ê)',
    'üíé –ü—Ä–∏–±—ã–ª—å (‚≠ê)',
    'üìä –ú–∞—Ä–∂–∞ (%)',
    'üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
  ]

  const financialData = [
    ['üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', ''],
    headers,
    ['', '', '', '', '', '', '', ''],
    ...data.monthlyStats.map(stat => [
      stat.period,
      Math.round(stat.income * 100) / 100,
      Math.round(stat.income_rub * 100) / 100,
      Math.round(stat.outcome * 100) / 100,
      Math.round(stat.cost * 100) / 100,
      Math.round(stat.profit * 100) / 100,
      Math.round(stat.margin * 100) / 100,
      stat.transactions,
    ]),
    ['', '', '', '', '', '', '', ''],
    ['üí≥ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –°–ü–û–°–û–ë–ê–ú –û–ü–õ–ê–¢–´', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', ''],
    [
      '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      '–°—É–º–º–∞ (‚≠ê)',
      '–°—É–º–º–∞ (—Ä—É–±.)',
      '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
      '',
      '',
      '',
    ],
    ['', '', '', '', '', '', '', ''],
    [
      'üí≥ Robokassa',
      data.robokassaPayments.length,
      data.robokassaPayments.reduce((sum, p) => sum + (p.stars || 0), 0),
      data.robokassaPayments.reduce((sum, p) => sum + (p.amount || 0), 0),
      data.robokassaPayments.length > 0
        ? Math.round(
            (data.robokassaPayments.reduce(
              (sum, p) => sum + (p.stars || 0),
              0
            ) /
              data.robokassaPayments.length) *
              100
          ) / 100
        : 0,
      '',
      '',
      '',
    ],
    [
      '‚≠ê Telegram Stars',
      data.telegramStarsPayments.length,
      data.telegramStarsPayments.reduce((sum, p) => sum + (p.stars || 0), 0),
      0,
      data.telegramStarsPayments.length > 0
        ? Math.round(
            (data.telegramStarsPayments.reduce(
              (sum, p) => sum + (p.stars || 0),
              0
            ) /
              data.telegramStarsPayments.length) *
              100
          ) / 100
        : 0,
      '',
      '',
      '',
    ],
    [
      'üéÅ –ë–æ–Ω—É—Å—ã',
      data.bonusPayments.length,
      data.bonusPayments.reduce((sum, p) => sum + (p.stars || 0), 0),
      0,
      data.bonusPayments.length > 0
        ? Math.round(
            (data.bonusPayments.reduce((sum, p) => sum + (p.stars || 0), 0) /
              data.bonusPayments.length) *
              100
          ) / 100
        : 0,
      '',
      '',
      '',
    ],
  ]

  return XLSX.utils.aoa_to_sheet(financialData)
}

function createServicesAnalyticsSheet(data: BotReportData) {
  const headers = [
    'üõ†Ô∏è –°–µ—Ä–≤–∏—Å',
    'üî¢ –û–ø–µ—Ä–∞—Ü–∏–π',
    'üí∞ –í—ã—Ä—É—á–∫–∞ (‚≠ê)',
    'üè≠ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (‚≠ê)',
    'üíé –ü—Ä–∏–±—ã–ª—å (‚≠ê)',
    'üìä –ú–∞—Ä–∂–∞ (%)',
    'üìà % –æ—Ç –æ–±–æ—Ä–æ—Ç–∞',
  ]

  const totalRevenue = Array.from(data.serviceStats.values()).reduce(
    (sum, s) => sum + s.revenue,
    0
  )

  const servicesData = [
    ['üõ†Ô∏è –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–ê–ú', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    headers,
    ['', '', '', '', '', '', ''],
    ...Array.from(data.serviceStats.entries())
      .sort(([, a], [, b]) => b.revenue - a.revenue)
      .map(([service, stats]) => {
        const profit = stats.revenue - stats.cost
        const margin = stats.revenue > 0 ? (profit / stats.revenue) * 100 : 0
        const revenueShare =
          totalRevenue > 0 ? (stats.revenue / totalRevenue) * 100 : 0

        return [
          `${getServiceEmoji(service)} ${getServiceDisplayTitle(service as UserService)}`,
          stats.count,
          Math.round(stats.revenue * 100) / 100,
          Math.round(stats.cost * 100) / 100,
          Math.round(profit * 100) / 100,
          Math.round(margin * 100) / 100,
          Math.round(revenueShare * 100) / 100,
        ]
      }),
  ]

  return XLSX.utils.aoa_to_sheet(servicesData)
}

function createUsersAnalyticsSheet(data: BotReportData) {
  const headers = [
    'üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'üì± Username',
    'üë§ –ò–º—è',
    'üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ (‚≠ê)',
    'üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
    'üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
    'üìä % –æ—Ç –æ–±–æ—Ä–æ—Ç–∞',
  ]

  const totalSpending = data.topUsers.reduce(
    (sum, u) => sum + u.total_spending,
    0
  )

  const usersData = [
    ['üë• –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['üìä –¢–û–ü-20 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –¢–†–ê–¢–ê–ú', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    headers,
    ['', '', '', '', '', '', ''],
    ...data.topUsers.map(user => {
      const avgCheck =
        user.transactions_count > 0
          ? user.total_spending / user.transactions_count
          : 0
      const spendingShare =
        totalSpending > 0 ? (user.total_spending / totalSpending) * 100 : 0

      return [
        user.telegram_id,
        user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω',
        `${user.first_name || ''} ${user.last_name || ''}`.trim() ||
          '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        Math.round(user.total_spending * 100) / 100,
        user.transactions_count,
        Math.round(avgCheck * 100) / 100,
        Math.round(spendingShare * 100) / 100,
      ]
    }),
  ]

  return XLSX.utils.aoa_to_sheet(usersData)
}

function createTimeAnalyticsSheet(data: BotReportData) {
  const monthlyHeaders = [
    'üìÖ –ú–µ—Å—è—Ü',
    'üí∞ –î–æ—Ö–æ–¥—ã (‚≠ê)',
    'üìâ –†–∞—Å—Ö–æ–¥—ã (‚≠ê)',
    'üíé –ü—Ä–∏–±—ã–ª—å (‚≠ê)',
    'üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
    'üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
  ]

  const dailyHeaders = [
    'üìÖ –î–∞—Ç–∞',
    'üí∞ –î–æ—Ö–æ–¥—ã (‚≠ê)',
    'üìâ –†–∞—Å—Ö–æ–¥—ã (‚≠ê)',
    'üíé –ü—Ä–∏–±—ã–ª—å (‚≠ê)',
    'üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
  ]

  const timeData = [
    ['üìÖ –í–†–ï–ú–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê', '', '', '', '', ''],
    ['', '', '', '', '', ''],
    ['üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú', '', '', '', '', ''],
    ['', '', '', '', '', ''],
    monthlyHeaders,
    ['', '', '', '', '', ''],
    ...data.monthlyStats.map(stat => [
      stat.period,
      Math.round(stat.income * 100) / 100,
      Math.round(stat.outcome * 100) / 100,
      Math.round(stat.profit * 100) / 100,
      stat.transactions,
      stat.active_users || 0,
    ]),
    ['', '', '', '', '', ''],
    ['üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú (–ü–û–°–õ–ï–î–ù–ò–ï 30 –î–ù–ï–ô)', '', '', '', '', ''],
    ['', '', '', '', '', ''],
    dailyHeaders,
    ['', '', '', '', '', ''],
    ...data.dailyStats.map(stat => [
      stat.date,
      Math.round(stat.income * 100) / 100,
      Math.round(stat.outcome * 100) / 100,
      Math.round(stat.profit * 100) / 100,
      stat.transactions,
    ]),
  ]

  return XLSX.utils.aoa_to_sheet(timeData)
}

function createTransactionsSheet(data: BotReportData) {
  const headers = [
    'üìÖ –î–∞—Ç–∞',
    'üìä –¢–∏–ø',
    'üí∞ –°—É–º–º–∞ (‚≠ê)',
    'üíµ –°—É–º–º–∞ (—Ä—É–±.)',
    'üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
    'üõ†Ô∏è –°–µ—Ä–≤–∏—Å',
    'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'üìù –û–ø–∏—Å–∞–Ω–∏–µ',
    'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
  ]

  const transactionsData = [
    ['üìã –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', ''],
    headers,
    ['', '', '', '', '', '', '', '', ''],
    ...data.allTransactions.map(payment => [
      new Date(payment.payment_date).toLocaleDateString('ru-RU'),
      payment.type === 'MONEY_INCOME' ? 'üìà –î–æ—Ö–æ–¥' : 'üìâ –†–∞—Å—Ö–æ–¥',
      Math.round((payment.stars || 0) * 100) / 100,
      payment.currency === 'RUB'
        ? Math.round((payment.amount || 0) * 100) / 100
        : '',
      getPaymentMethodDisplay(payment),
      payment.service_type
        ? `${getServiceEmoji(payment.service_type)} ${getServiceDisplayTitle(payment.service_type as UserService)}`
        : '',
      payment.telegram_id,
      payment.description || '',
      payment.category === 'REAL' ? 'üíé –†–µ–∞–ª—å–Ω—ã–µ' : 'üéÅ –ë–æ–Ω—É—Å—ã',
    ]),
  ]

  return XLSX.utils.aoa_to_sheet(transactionsData)
}

function getPaymentMethodDisplay(payment: any): string {
  if (
    payment.currency === 'RUB' &&
    (payment.payment_method === 'Robokassa' ||
      payment.payment_method === 'Manual')
  ) {
    return 'üí≥ Robokassa'
  } else if (
    (payment.currency === 'XTR' || payment.currency === 'STARS') &&
    payment.payment_method === 'Telegram'
  ) {
    return '‚≠ê Telegram Stars'
  } else if (payment.payment_method === 'System') {
    return 'ü§ñ –°–∏—Å—Ç–µ–º–∞'
  } else if (payment.payment_method === 'Bonus') {
    return 'üéÅ –ë–æ–Ω—É—Å'
  } else if (payment.payment_method === 'Manual') {
    return '‚úã –†—É—á–Ω–æ–µ'
  }
  return payment.payment_method || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

function getMonthlyStats(payments: any[]) {
  const monthlyMap = new Map<string, any>()

  payments.forEach(payment => {
    const date = new Date(payment.payment_date)
    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`

    const current = monthlyMap.get(monthKey) || {
      period: monthKey,
      income: 0,
      income_rub: 0,
      outcome: 0,
      cost: 0,
      profit: 0,
      margin: 0,
      transactions: 0,
      active_users: new Set(),
    }

    current.transactions += 1
    current.active_users.add(payment.telegram_id)

    if (payment.type === 'MONEY_INCOME' && payment.category === 'REAL') {
      current.income += payment.stars || 0
      if (payment.currency === 'RUB') {
        current.income_rub += payment.amount || 0
      }
    } else if (payment.type === 'MONEY_OUTCOME') {
      current.outcome += payment.stars || 0
      current.cost += payment.cost || 0
    }

    current.profit = current.income - current.outcome - current.cost
    current.margin =
      current.income > 0 ? (current.profit / current.income) * 100 : 0

    monthlyMap.set(monthKey, current)
  })

  return Array.from(monthlyMap.values())
    .map(stat => ({
      ...stat,
      active_users: stat.active_users.size,
    }))
    .sort((a, b) => b.period.localeCompare(a.period))
}

function getDailyStats(payments: any[]) {
  const dailyMap = new Map<string, any>()

  payments.forEach(payment => {
    const date = new Date(payment.payment_date).toISOString().split('T')[0]

    const current = dailyMap.get(date) || {
      date,
      income: 0,
      outcome: 0,
      cost: 0,
      profit: 0,
      transactions: 0,
    }

    current.transactions += 1

    if (payment.type === 'MONEY_INCOME' && payment.category === 'REAL') {
      current.income += payment.stars || 0
    } else if (payment.type === 'MONEY_OUTCOME') {
      current.outcome += payment.stars || 0
      current.cost += payment.cost || 0
    }

    current.profit = current.income - current.outcome - current.cost

    dailyMap.set(date, current)
  })

  return Array.from(dailyMap.values()).sort((a, b) =>
    b.date.localeCompare(a.date)
  )
}
