import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

export interface StatsDebugInfo {
  botName: string
  userId: string
  databaseChecks: {
    paymentsCount: number
    usersCount: number
    botsCount: number
    samplePayments: any[]
    sampleUsers: any[]
  }
  sqlFunctionChecks: {
    getUserBalanceWorks: boolean
    getUserBalanceStatsWorks: boolean
    rawResults: any
  }
  dataConsistency: {
    totalIncome: number
    totalOutcome: number
    calculatedBalance: number
    actualBalance: number
    discrepancy: number
  }
  recommendations: string[]
}

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function debugBotStats(
  botName: string,
  userId: string
): Promise<StatsDebugInfo> {
  logger.info('üîç Starting stats debugging for:', { botName, userId })

  const debugInfo: StatsDebugInfo = {
    botName,
    userId,
    databaseChecks: {
      paymentsCount: 0,
      usersCount: 0,
      botsCount: 0,
      samplePayments: [],
      sampleUsers: [],
    },
    sqlFunctionChecks: {
      getUserBalanceWorks: false,
      getUserBalanceStatsWorks: false,
      rawResults: null,
    },
    dataConsistency: {
      totalIncome: 0,
      totalOutcome: 0,
      calculatedBalance: 0,
      actualBalance: 0,
      discrepancy: 0,
    },
    recommendations: [],
  }

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    await checkDatabaseTables(debugInfo)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL —Ñ—É–Ω–∫—Ü–∏–∏
    await checkSqlFunctions(debugInfo)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    await checkDataConsistency(debugInfo)

    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateRecommendations(debugInfo)

    logger.info('‚úÖ Stats debugging completed:', debugInfo)
    return debugInfo
  } catch (error) {
    logger.error('‚ùå Stats debugging failed:', error)
    debugInfo.recommendations.push(
      `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: ${error instanceof Error ? error.message : String(error)}`
    )
    return debugInfo
  }
}

async function checkDatabaseTables(debugInfo: StatsDebugInfo): Promise<void> {
  const { botName, userId } = debugInfo

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º payments_v2
  const { data: payments, error: paymentsError } = await supabase
    .from('payments_v2')
    .select('*')
    .eq('bot_name', botName)
    .eq('telegram_id', parseInt(userId))
    .order('created_at', { ascending: false })
    .limit(10)

  if (paymentsError) {
    logger.error('Payments query error:', paymentsError)
    debugInfo.recommendations.push(
      `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ payments_v2: ${paymentsError.message}`
    )
  } else {
    debugInfo.databaseChecks.paymentsCount = payments?.length || 0
    debugInfo.databaseChecks.samplePayments = payments?.slice(0, 3) || []
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º users
  const { data: users, error: usersError } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', parseInt(userId))
    .limit(5)

  if (usersError) {
    logger.error('Users query error:', usersError)
    debugInfo.recommendations.push(
      `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ users: ${usersError.message}`
    )
  } else {
    debugInfo.databaseChecks.usersCount = users?.length || 0
    debugInfo.databaseChecks.sampleUsers = users || []
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º bots
  const { data: bots, error: botsError } = await supabase
    .from('bots')
    .select('*')
    .eq('bot_name', botName)

  if (botsError) {
    logger.error('Bots query error:', botsError)
  } else {
    debugInfo.databaseChecks.botsCount = bots?.length || 0
  }

  logger.info('üìä Database checks completed:', debugInfo.databaseChecks)
}

async function checkSqlFunctions(debugInfo: StatsDebugInfo): Promise<void> {
  const { userId, botName } = debugInfo

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º get_user_balance
  try {
    const { data: balanceData, error: balanceError } = await supabase.rpc(
      'get_user_balance',
      {
        user_telegram_id: userId,
      }
    )

    if (balanceError) {
      logger.error('get_user_balance error:', balanceError)
      debugInfo.recommendations.push(
        `SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_balance –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${balanceError.message}`
      )
    } else {
      debugInfo.sqlFunctionChecks.getUserBalanceWorks = true
      debugInfo.dataConsistency.actualBalance = balanceData || 0
    }
  } catch (error) {
    logger.error('get_user_balance exception:', error)
    debugInfo.recommendations.push(
      `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ get_user_balance: ${error instanceof Error ? error.message : String(error)}`
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º get_user_balance_stats
  try {
    const { data: statsData, error: statsError } = await supabase.rpc(
      'get_user_balance_stats',
      {
        user_telegram_id: userId,
      }
    )

    if (statsError) {
      logger.error('get_user_balance_stats error:', statsError)
      debugInfo.recommendations.push(
        `SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_balance_stats –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${statsError.message}`
      )
    } else {
      debugInfo.sqlFunctionChecks.getUserBalanceStatsWorks = true
      debugInfo.sqlFunctionChecks.rawResults = statsData
    }
  } catch (error) {
    logger.error('get_user_balance_stats exception:', error)
    debugInfo.recommendations.push(
      `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ get_user_balance_stats: ${error instanceof Error ? error.message : String(error)}`
    )
  }

  logger.info('üîß SQL functions checks completed:', debugInfo.sqlFunctionChecks)
}

async function checkDataConsistency(debugInfo: StatsDebugInfo): Promise<void> {
  const { botName, userId } = debugInfo

  // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Ä—É—á–Ω—É—é –∏–∑ payments_v2
  const { data: allPayments } = await supabase
    .from('payments_v2')
    .select('stars, type')
    .eq('bot_name', botName)
    .eq('telegram_id', parseInt(userId))
    .eq('status', 'COMPLETED')

  if (allPayments) {
    let totalIncome = 0
    let totalOutcome = 0

    allPayments.forEach(payment => {
      const stars = payment.stars || 0
      if (payment.type === 'MONEY_INCOME') {
        totalIncome += stars
      } else if (payment.type === 'MONEY_OUTCOME') {
        totalOutcome += stars
      }
    })

    debugInfo.dataConsistency.totalIncome = totalIncome
    debugInfo.dataConsistency.totalOutcome = totalOutcome
    debugInfo.dataConsistency.calculatedBalance = totalIncome - totalOutcome
    debugInfo.dataConsistency.discrepancy =
      debugInfo.dataConsistency.actualBalance -
      debugInfo.dataConsistency.calculatedBalance
  }

  logger.info(
    'üìà Data consistency checks completed:',
    debugInfo.dataConsistency
  )
}

function generateRecommendations(debugInfo: StatsDebugInfo): void {
  const { databaseChecks, sqlFunctionChecks, dataConsistency } = debugInfo

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
  if (databaseChecks.paymentsCount === 0) {
    debugInfo.recommendations.push(
      '‚ö†Ô∏è –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å bot_name –∏ telegram_id.'
    )
  }

  if (databaseChecks.usersCount === 0) {
    debugInfo.recommendations.push(
      '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
    )
  }

  if (databaseChecks.botsCount === 0) {
    debugInfo.recommendations.push(
      '‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ bots. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –±–æ—Ç–∞.'
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL —Ñ—É–Ω–∫—Ü–∏–∏
  if (!sqlFunctionChecks.getUserBalanceWorks) {
    debugInfo.recommendations.push(
      'üîß SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_balance –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
    )
  }

  if (!sqlFunctionChecks.getUserBalanceStatsWorks) {
    debugInfo.recommendations.push(
      'üîß SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_balance_stats –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
  if (Math.abs(dataConsistency.discrepancy) > 0.01) {
    debugInfo.recommendations.push(
      `üí∞ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –±–∞–ª–∞–Ω—Å–µ: —Ä–∞—Å—á–µ—Ç–Ω—ã–π ${dataConsistency.calculatedBalance}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ${dataConsistency.actualBalance}. –†–∞–∑–Ω–∏—Ü–∞: ${dataConsistency.discrepancy}`
    )
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (debugInfo.recommendations.length === 0) {
    debugInfo.recommendations.push(
      '‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
    )
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
  if (databaseChecks.paymentsCount > 0 && databaseChecks.paymentsCount < 10) {
    debugInfo.recommendations.push(
      'üìä –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.'
    )
  }
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export async function quickStatsHealthCheck(): Promise<{
  healthy: boolean
  issues: string[]
  summary: string
}> {
  const issues: string[] = []

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    const { error: paymentsError } = await supabase
      .from('payments_v2')
      .select('id')
      .limit(1)

    if (paymentsError) {
      issues.push(`–¢–∞–±–ª–∏—Ü–∞ payments_v2 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${paymentsError.message}`)
    }

    const { error: usersError } = await supabase
      .from('users')
      .select('id')
      .limit(1)

    if (usersError) {
      issues.push(`–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${usersError.message}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL —Ñ—É–Ω–∫—Ü–∏–∏
    const { error: balanceError } = await supabase.rpc('get_user_balance', {
      user_telegram_id: '1',
    })

    if (balanceError && !balanceError.message.includes('not found')) {
      issues.push(
        `–§—É–Ω–∫—Ü–∏—è get_user_balance –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${balanceError.message}`
      )
    }

    const { error: statsError } = await supabase.rpc('get_user_balance_stats', {
      user_telegram_id: '1',
    })

    if (statsError && !statsError.message.includes('not found')) {
      issues.push(
        `–§—É–Ω–∫—Ü–∏—è get_user_balance_stats –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${statsError.message}`
      )
    }

    const healthy = issues.length === 0
    const summary = healthy
      ? '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      : `‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`

    return { healthy, issues, summary }
  } catch (error) {
    issues.push(
      `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error instanceof Error ? error.message : String(error)}`
    )
    return {
      healthy: false,
      issues,
      summary: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
export async function generateStatsReport(): Promise<{
  totalBots: number
  botsWithData: number
  botsWithoutData: number
  totalUsers: number
  totalPayments: number
  issues: string[]
}> {
  const report = {
    totalBots: 0,
    botsWithData: 0,
    botsWithoutData: 0,
    totalUsers: 0,
    totalPayments: 0,
    issues: [] as string[],
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const { data: bots, error: botsError } = await supabase
      .from('bots')
      .select('bot_name')
      .eq('is_active', true)

    if (botsError) {
      report.issues.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: ${botsError.message}`)
      return report
    }

    report.totalBots = bots?.length || 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    for (const bot of bots || []) {
      const { data: payments } = await supabase
        .from('payments_v2')
        .select('id')
        .eq('bot_name', bot.bot_name)

      if (payments && payments.length > 0) {
        report.botsWithData++
      } else {
        report.botsWithoutData++
      }
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const { count: usersCount } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })

    const { count: paymentsCount } = await supabase
      .from('payments_v2')
      .select('*', { count: 'exact', head: true })

    report.totalUsers = usersCount || 0
    report.totalPayments = paymentsCount || 0

    logger.info('üìä Stats report generated:', report)
    return report
  } catch (error) {
    report.issues.push(
      `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
    )
    return report
  }
}
