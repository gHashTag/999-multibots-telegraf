import { logger } from './logger'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π inv_id –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
 * @param telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param amount - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @returns –£–Ω–∏–∫–∞–ª—å–Ω—ã–π inv_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ: timestamp + random
 */
export const generateInvId = (
  telegram_id: string | number,
  amount: number
): string => {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ timestamp –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    const timestamp = Date.now()
    const random = Math.floor(Math.random() * 1000)
    const invId = `${timestamp}${random}`

    logger.info({
      message: 'üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω inv_id',
      description: 'Generated inv_id',
      inv_id: invId,
      telegram_id,
      amount,
    })

    return invId
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inv_id',
      description: 'Error generating inv_id',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      amount,
    })
    throw error
  }
}
