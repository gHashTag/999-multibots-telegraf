/**
 * –ì–ï–ù–ï–†–ê–¢–û–† –ö–†–ê–°–ò–í–´–• EXCEL-–û–¢–ß–ï–¢–û–í –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
 */

import * as XLSX from 'xlsx'
import { supabase } from '@/core/supabase'
import {
  getServiceDisplayTitle,
  getServiceEmoji,
  UserService,
} from './serviceMapping'

interface UserReportData {
  userId: string
  username?: string
  totalBalance: number
  realIncomes: any[]
  bonusIncomes: any[]
  outcomes: any[]
  serviceStats: Map<string, { count: number; stars: number }>
}

export async function generateUserExcelReport(userId: string): Promise<Buffer> {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const reportData = await getUserReportData(userId)

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
  const workbook = XLSX.utils.book_new()

  // –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
  const summarySheet = createSummarySheet(reportData)
  XLSX.utils.book_append_sheet(workbook, summarySheet, 'üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞')

  // –õ–∏—Å—Ç 2: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const incomesSheet = createIncomesSheet(reportData)
  XLSX.utils.book_append_sheet(workbook, incomesSheet, 'üìà –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è')

  // –õ–∏—Å—Ç 3: –¢—Ä–∞—Ç—ã
  const expensesSheet = createExpensesSheet(reportData)
  XLSX.utils.book_append_sheet(workbook, expensesSheet, 'üìâ –¢—Ä–∞—Ç—ã')

  // –õ–∏—Å—Ç 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  const servicesSheet = createServicesSheet(reportData)
  XLSX.utils.book_append_sheet(workbook, servicesSheet, 'üõ†Ô∏è –°–µ—Ä–≤–∏—Å—ã')

  // –õ–∏—Å—Ç 5: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
  const historySheet = createHistorySheet(reportData)
  XLSX.utils.book_append_sheet(workbook, historySheet, 'üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π')

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
  const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' })
  return buffer
}

async function getUserReportData(userId: string): Promise<UserReportData> {
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const { data: userInfo } = await supabase
    .from('users')
    .select('username')
    .eq('telegram_id', userId)
    .single()

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: payments } = await supabase
    .from('payments_v2')
    .select('*')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .order('payment_date', { ascending: false })

  if (!payments) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö')

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const incomes = payments.filter(p => p.type === 'MONEY_INCOME')
  const outcomes = payments.filter(p => p.type === 'MONEY_OUTCOME')
  const realIncomes = incomes.filter(p => p.category === 'REAL')
  const bonusIncomes = incomes.filter(p => p.category === 'BONUS')

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
  const totalRealStars = realIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const totalBonusStars = bonusIncomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const totalOutcomeStars = outcomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const totalBalance = totalRealStars + totalBonusStars - totalOutcomeStars

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
  const serviceStats = new Map<string, { count: number; stars: number }>()
  outcomes.forEach(payment => {
    const service = payment.service_type || 'unknown'
    const current = serviceStats.get(service) || { count: 0, stars: 0 }
    current.count += 1
    current.stars += payment.stars || 0
    serviceStats.set(service, current)
  })

  return {
    userId,
    username: userInfo?.username,
    totalBalance,
    realIncomes,
    bonusIncomes,
    outcomes,
    serviceStats,
  }
}

function createSummarySheet(data: UserReportData) {
  const totalRealStars = data.realIncomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const totalBonusStars = data.bonusIncomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const totalOutcomeStars = data.outcomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
  const rublesIncomes = data.realIncomes.filter(
    p =>
      p.currency === 'RUB' &&
      (p.payment_method === 'Robokassa' || p.payment_method === 'Manual')
  )
  const starsIncomes = data.realIncomes.filter(
    p =>
      (p.currency === 'XTR' || p.currency === 'STARS') &&
      p.payment_method === 'Telegram'
  )

  const rublesStars = rublesIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const rublesAmount = rublesIncomes.reduce(
    (sum, p) => sum + (p.amount || 0),
    0
  )
  const telegramStars = starsIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)

  const summaryData = [
    ['üí∞ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢', '', '', ''],
    ['', '', '', ''],
    ['üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.username || `ID: ${data.userId}`, '', ''],
    ['üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞:', new Date().toLocaleDateString('ru-RU'), '', ''],
    ['', '', '', ''],
    [
      'üíé –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°',
      `${Math.round(data.totalBalance * 100) / 100} ‚≠ê`,
      '',
      '',
    ],
    ['', '', '', ''],
    ['üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê', '', '', ''],
    ['', '', '', ''],
    ['üìà –ü–û–ü–û–õ–ù–ï–ù–ò–Ø:', '', '', ''],
    ...(rublesIncomes.length > 0
      ? [
          [
            'üí≥ –ß–µ—Ä–µ–∑ Robokassa:',
            `${Math.round(rublesStars * 100) / 100} ‚≠ê`,
            `(${Math.round(rublesAmount * 100) / 100} —Ä—É–±.)`,
            '',
          ],
        ]
      : []),
    ...(starsIncomes.length > 0
      ? [
          [
            '‚≠ê –ß–µ—Ä–µ–∑ Telegram Stars:',
            `${Math.round(telegramStars * 100) / 100} ‚≠ê`,
            '',
            '',
          ],
        ]
      : []),
    [
      'üìà –ò—Ç–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:',
      `${Math.round(totalRealStars * 100) / 100} ‚≠ê`,
      '',
      '',
    ],
    ...(totalBonusStars > 0
      ? [
          [
            'üéÅ –ë–æ–Ω—É—Å—ã –ø–æ–ª—É—á–µ–Ω–æ:',
            `${Math.round(totalBonusStars * 100) / 100} ‚≠ê`,
            '',
            '',
          ],
        ]
      : []),
    [
      'üìâ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:',
      `${Math.round(totalOutcomeStars * 100) / 100} ‚≠ê`,
      '',
      '',
    ],
    ['', '', '', ''],
    ['üî¢ –ö–û–õ–ò–ß–ï–°–¢–í–û –û–ü–ï–†–ê–¶–ò–ô:', '', '', ''],
    ['üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π:', data.realIncomes.length.toString(), '', ''],
    ['üéÅ –ë–æ–Ω—É—Å–æ–≤:', data.bonusIncomes.length.toString(), '', ''],
    ['üìâ –¢—Ä–∞—Ç:', data.outcomes.length.toString(), '', ''],
    [
      'üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:',
      (
        data.realIncomes.length +
        data.bonusIncomes.length +
        data.outcomes.length
      ).toString(),
      '',
      '',
    ],
  ]

  return XLSX.utils.aoa_to_sheet(summaryData)
}

function createIncomesSheet(data: UserReportData) {
  const headers = [
    'üìÖ –î–∞—Ç–∞',
    'üí∞ –°—É–º–º–∞ (‚≠ê)',
    'üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
    'üíµ –°—É–º–º–∞ (—Ä—É–±.)',
    'üìù –û–ø–∏—Å–∞–Ω–∏–µ',
    'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
  ]

  const incomesData = [
    headers,
    ['', '', '', '', '', ''],
    ...data.realIncomes.map(payment => [
      new Date(payment.payment_date).toLocaleDateString('ru-RU'),
      Math.round((payment.stars || 0) * 100) / 100,
      getPaymentMethodDisplay(payment),
      payment.currency === 'RUB'
        ? Math.round((payment.amount || 0) * 100) / 100
        : '',
      payment.description || '',
      'üíé –†–µ–∞–ª—å–Ω—ã–µ',
    ]),
    ...(data.bonusIncomes.length > 0
      ? [
          ['', '', '', '', '', ''],
          ['üéÅ –ë–û–ù–£–°–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò', '', '', '', '', ''],
          ['', '', '', '', '', ''],
          ...data.bonusIncomes.map(payment => [
            new Date(payment.payment_date).toLocaleDateString('ru-RU'),
            Math.round((payment.stars || 0) * 100) / 100,
            getPaymentMethodDisplay(payment),
            payment.currency === 'RUB'
              ? Math.round((payment.amount || 0) * 100) / 100
              : '',
            payment.description || '',
            'üéÅ –ë–æ–Ω—É—Å—ã',
          ]),
        ]
      : []),
  ]

  return XLSX.utils.aoa_to_sheet(incomesData)
}

function createExpensesSheet(data: UserReportData) {
  const headers = ['üìÖ –î–∞—Ç–∞', 'üí∞ –°—É–º–º–∞ (‚≠ê)', 'üõ†Ô∏è –°–µ—Ä–≤–∏—Å', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ']

  const expensesData = [
    headers,
    ['', '', '', ''],
    ...data.outcomes.map(payment => [
      new Date(payment.payment_date).toLocaleDateString('ru-RU'),
      Math.round((payment.stars || 0) * 100) / 100,
      `${getServiceEmoji(payment.service_type || 'unknown')} ${getServiceDisplayTitle((payment.service_type || 'unknown') as UserService)}`,
      payment.description || '',
    ]),
  ]

  return XLSX.utils.aoa_to_sheet(expensesData)
}

function createServicesSheet(data: UserReportData) {
  const headers = [
    'üõ†Ô∏è –°–µ—Ä–≤–∏—Å',
    'üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ (‚≠ê)',
    'üî¢ –û–ø–µ—Ä–∞—Ü–∏–π',
    'üìä % –æ—Ç —Ç—Ä–∞—Ç',
    'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
  ]

  const totalSpent = data.outcomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const sortedServices = Array.from(data.serviceStats.entries()).sort(
    ([, a], [, b]) => b.stars - a.stars
  )

  const servicesData = [
    headers,
    ['', '', '', '', ''],
    ...sortedServices.map(([service, stats]) => {
      const percentage =
        totalSpent > 0 ? Math.round((stats.stars / totalSpent) * 1000) / 10 : 0
      const avgPrice =
        stats.count > 0
          ? Math.round((stats.stars / stats.count) * 100) / 100
          : 0

      return [
        `${getServiceEmoji(service)} ${getServiceDisplayTitle(service as UserService)}`,
        Math.round(stats.stars * 100) / 100,
        stats.count,
        `${percentage}%`,
        avgPrice,
      ]
    }),
  ]

  return XLSX.utils.aoa_to_sheet(servicesData)
}

function createHistorySheet(data: UserReportData) {
  const headers = [
    'üìÖ –î–∞—Ç–∞',
    'üìä –¢–∏–ø',
    'üí∞ –°—É–º–º–∞ (‚≠ê)',
    'üõ†Ô∏è –°–µ—Ä–≤–∏—Å/–°–ø–æ—Å–æ–±',
    'üìù –û–ø–∏—Å–∞–Ω–∏–µ',
    'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
  ]

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
  const allOperations = [
    ...data.realIncomes.map(p => ({
      ...p,
      operationType: 'income',
      category: 'real',
    })),
    ...data.bonusIncomes.map(p => ({
      ...p,
      operationType: 'income',
      category: 'bonus',
    })),
    ...data.outcomes.map(p => ({
      ...p,
      operationType: 'outcome',
      category: 'expense',
    })),
  ].sort(
    (a, b) =>
      new Date(b.payment_date).getTime() - new Date(a.payment_date).getTime()
  )

  const historyData = [
    headers,
    ['', '', '', '', '', ''],
    ...allOperations.map(payment => [
      new Date(payment.payment_date).toLocaleDateString('ru-RU'),
      payment.operationType === 'income' ? 'üìà –î–æ—Ö–æ–¥' : 'üìâ –†–∞—Å—Ö–æ–¥',
      Math.round((payment.stars || 0) * 100) / 100,
      payment.operationType === 'income'
        ? getPaymentMethodDisplay(payment)
        : `${getServiceEmoji(payment.service_type || 'unknown')} ${getServiceDisplayTitle((payment.service_type || 'unknown') as UserService)}`,
      payment.description || '',
      payment.category === 'real'
        ? 'üíé –†–µ–∞–ª—å–Ω—ã–µ'
        : payment.category === 'bonus'
          ? 'üéÅ –ë–æ–Ω—É—Å—ã'
          : 'üí∏ –¢—Ä–∞—Ç—ã',
    ]),
  ]

  return XLSX.utils.aoa_to_sheet(historyData)
}

function getPaymentMethodDisplay(payment: any): string {
  if (
    payment.currency === 'RUB' &&
    (payment.payment_method === 'Robokassa' ||
      payment.payment_method === 'Manual')
  ) {
    return 'üí≥ Robokassa'
  } else if (
    (payment.currency === 'XTR' || payment.currency === 'STARS') &&
    payment.payment_method === 'Telegram'
  ) {
    return '‚≠ê Telegram Stars'
  } else if (payment.payment_method === 'System') {
    return 'ü§ñ –°–∏—Å—Ç–µ–º–∞'
  } else if (payment.payment_method === 'Bonus') {
    return 'üéÅ –ë–æ–Ω—É—Å'
  } else if (payment.payment_method === 'Manual') {
    return '‚úã –†—É—á–Ω–æ–µ'
  }
  return payment.payment_method || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}
