import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase'
import { getBotByName } from '@/core/bot'

interface CheckBalanceParams {
  telegram_id: string
  bot_name: string
  required_amount: number
  is_ru: boolean
  operation_type?: string
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
 * @returns –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º
 */
export async function checkUserBalance({
  telegram_id,
  bot_name,
  required_amount,
  is_ru,
  operation_type = 'operation',
}: CheckBalanceParams): Promise<{
  hasBalance: boolean
  currentBalance: number
}> {
  logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
    description: 'Checking user balance',
    telegram_id,
    required_amount,
    operation_type,
  })

  const currentBalance = await getUserBalance(telegram_id, bot_name)

  if (currentBalance < required_amount) {
    logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
      description: 'Insufficient funds',
      telegram_id,
      balance: currentBalance,
      required: required_amount,
    })

    const { bot } = getBotByName(bot_name)
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${operation_type}.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${required_amount} ‚≠êÔ∏è\n–î–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance} ‚≠êÔ∏è`
        : `‚ùå Insufficient funds for ${operation_type}.\nRequired: ${required_amount} ‚≠êÔ∏è\nAvailable: ${currentBalance} ‚≠êÔ∏è`
    )

    return {
      hasBalance: false,
      currentBalance,
    }
  }

  logger.info('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Sufficient funds available',
    telegram_id,
    balance: currentBalance,
    required: required_amount,
  })

  return {
    hasBalance: true,
    currentBalance,
  }
}
