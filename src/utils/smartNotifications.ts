/**
 * üîî –°–ò–°–¢–ï–ú–ê –£–ú–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–æ–≤ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
 */

import { supabase } from '@/core/supabase'
import { analyzeTrends, generateSmartRecommendations } from './trendAnalysis'
import { logger } from './logger'

export interface SmartAlert {
  type:
    | 'revenue_milestone'
    | 'user_milestone'
    | 'performance_alert'
    | 'opportunity'
    | 'weekly_summary'
  severity: 'info' | 'warning' | 'critical' | 'success'
  title: string
  message: string
  action_required: boolean
  recommendations: string[]
  data?: any
}

export interface NotificationSettings {
  revenue_alerts: boolean
  user_alerts: boolean
  performance_alerts: boolean
  weekly_summaries: boolean
  daily_summaries: boolean
  threshold_revenue_drop: number // %
  threshold_user_drop: number // %
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –±–æ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function checkAllBotsForAlerts(): Promise<
  Map<string, SmartAlert[]>
> {
  const botAlerts = new Map<string, SmartAlert[]>()

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã avatars
    const { data: bots } = await supabase
      .from('avatars')
      .select('bot_name')
      .not('bot_name', 'is', null)

    if (!bots) return botAlerts

    const uniqueBots = Array.from(new Set(bots.map(b => b.bot_name))).filter(
      bot => bot && bot.trim() !== ''
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    for (const botName of uniqueBots) {
      try {
        const alerts = await generateAlertsForBot(botName)
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤
        botAlerts.set(botName, alerts)
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è ${botName}:`, error)
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        botAlerts.set(botName, [])
      }
    }

    return botAlerts
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤:', error)
    return botAlerts
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
 */
export async function generateAlertsForBot(
  botName: string
): Promise<SmartAlert[]> {
  const alerts: SmartAlert[] = []

  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: recentPayments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .gte(
        'payment_date',
        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
      )
      .order('payment_date', { ascending: false })

    if (!recentPayments) return alerts

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ö–æ–¥–∞–º
    const revenueAlerts = await checkRevenueAlerts(botName, recentPayments)
    alerts.push(...revenueAlerts)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    const userAlerts = await checkUserAlerts(botName, recentPayments)
    alerts.push(...userAlerts)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const performanceAlerts = await checkPerformanceAlerts(
      botName,
      recentPayments
    )
    alerts.push(...performanceAlerts)

    // 4. –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    const opportunityAlerts = await checkOpportunityAlerts(botName)
    alerts.push(...opportunityAlerts)

    return alerts
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è ${botName}:`, error)
    return alerts
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º
 */
async function checkRevenueAlerts(
  botName: string,
  recentPayments: any[]
): Promise<SmartAlert[]> {
  const alerts: SmartAlert[] = []

  try {
    // –î–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const weekRevenue = recentPayments
      .filter(p => p.type === 'MONEY_INCOME' && p.category === 'REAL')
      .reduce((sum, p) => sum + (p.stars || 0), 0)

    // –î–æ—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
    const { data: prevWeekPayments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .eq('type', 'MONEY_INCOME')
      .eq('category', 'REAL')
      .gte(
        'payment_date',
        new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()
      )
      .lt(
        'payment_date',
        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
      )

    const prevWeekRevenue = prevWeekPayments
      ? prevWeekPayments.reduce((sum, p) => sum + (p.stars || 0), 0)
      : 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤
    if (weekRevenue > 0 && prevWeekRevenue > 0) {
      const growthRate =
        ((weekRevenue - prevWeekRevenue) / prevWeekRevenue) * 100

      if (growthRate > 50) {
        alerts.push({
          type: 'revenue_milestone',
          severity: 'success',
          title: 'üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤!',
          message: `–î–æ—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ ${Math.round(growthRate)}% –∑–∞ –Ω–µ–¥–µ–ª—é (${weekRevenue.toLocaleString()}‚≠ê)`,
          action_required: false,
          recommendations: [
            '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–æ—Å—Ç—É',
            '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
            '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏',
          ],
          data: {
            growth_rate: growthRate,
            current_revenue: weekRevenue,
            prev_revenue: prevWeekRevenue,
          },
        })
      } else if (growthRate < -30) {
        alerts.push({
          type: 'revenue_milestone',
          severity: 'warning',
          title: 'üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤',
          message: `–î–æ—Ö–æ–¥—ã —É–ø–∞–ª–∏ –Ω–∞ ${Math.round(Math.abs(growthRate))}% –∑–∞ –Ω–µ–¥–µ–ª—é`,
          action_required: true,
          recommendations: [
            '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è',
            '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏—é',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤',
            '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
          ],
          data: {
            growth_rate: growthRate,
            current_revenue: weekRevenue,
            prev_revenue: prevWeekRevenue,
          },
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã—Ö —Å—É–º–º
    const totalRevenue = await getTotalRevenue(botName)
    const milestones = [
      1000, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000,
    ]

    for (const milestone of milestones) {
      if (totalRevenue >= milestone && totalRevenue - weekRevenue < milestone) {
        alerts.push({
          type: 'revenue_milestone',
          severity: 'success',
          title: 'üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
          message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–±—â–∏–π –¥–æ—Ö–æ–¥ –¥–æ—Å—Ç–∏–≥ ${milestone.toLocaleString()}‚≠ê`,
          action_required: false,
          recommendations: [
            '–û—Ç–ø—Ä–∞–∑–¥–Ω—É–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π',
            '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
            '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å',
          ],
          data: { milestone, total_revenue: totalRevenue },
        })
        break // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑
      }
    }

    return alerts
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –¥–æ—Ö–æ–¥–∞–º:', error)
    return alerts
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
async function checkUserAlerts(
  botName: string,
  recentPayments: any[]
): Promise<SmartAlert[]> {
  const alerts: SmartAlert[] = []

  try {
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    const activeUsers = new Set(recentPayments.map(p => p.telegram_id)).size

    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    const { data: allUsers } = await supabase
      .from('users')
      .select('telegram_id, created_at')
      .eq('bot_name', botName)

    if (!allUsers) return alerts

    const newUsers = allUsers.filter(u => {
      const createdAt = new Date(u.created_at)
      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      return createdAt >= weekAgo
    }).length

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (newUsers > 10) {
      alerts.push({
        type: 'user_milestone',
        severity: 'success',
        title: 'üë• –ü—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!',
        message: `–ó–∞ –Ω–µ–¥–µ–ª—é –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å ${newUsers} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
        action_required: false,
        recommendations: [
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
          '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞',
        ],
        data: { new_users: newUsers, active_users: activeUsers },
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = allUsers.length
    const userMilestones = [
      100, 500, 1000, 2500, 5000, 10000, 25000, 50000, 100000,
    ]

    for (const milestone of userMilestones) {
      if (totalUsers >= milestone && totalUsers - newUsers < milestone) {
        alerts.push({
          type: 'user_milestone',
          severity: 'success',
          title: 'üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–µ—Ö–∞!',
          message: `–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å ${totalUsers.toLocaleString()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`,
          action_required: false,
          recommendations: [
            '–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
            '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ü–∏—é',
            '–†–∞—Å—à–∏—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
          ],
          data: { milestone, total_users: totalUsers },
        })
        break
      }
    }

    return alerts
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤:', error)
    return alerts
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
async function checkPerformanceAlerts(
  botName: string,
  recentPayments: any[]
): Promise<SmartAlert[]> {
  const alerts: SmartAlert[] = []

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    const outcomes = recentPayments.filter(p => p.type === 'MONEY_OUTCOME')
    const avgTransactionValue =
      outcomes.length > 0
        ? outcomes.reduce((sum, p) => sum + (p.stars || 0), 0) / outcomes.length
        : 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ —Ç—Ä–∞—Ç—ã
    if (outcomes.length > 10 && avgTransactionValue < 5) {
      alerts.push({
        type: 'performance_alert',
        severity: 'warning',
        title: '‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫',
        message: `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${avgTransactionValue.toFixed(1)}‚≠ê`,
        action_required: true,
        recommendations: [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω',
          '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏',
          '–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤',
        ],
        data: {
          avg_transaction: avgTransactionValue,
          transaction_count: outcomes.length,
        },
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (outcomes.length > 100) {
      alerts.push({
        type: 'performance_alert',
        severity: 'info',
        title: 'üî• –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!',
        message: `${outcomes.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é`,
        action_required: false,
        recommendations: [
          '–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤',
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
        ],
        data: { transaction_count: outcomes.length },
      })
    }

    return alerts
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error)
    return alerts
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
 */
async function checkOpportunityAlerts(botName: string): Promise<SmartAlert[]> {
  const alerts: SmartAlert[] = []

  try {
    const recommendations = await generateSmartRecommendations(botName)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω
    const pricingOpportunities = recommendations.pricing_optimization.filter(
      p =>
        p.suggested_action.includes('–ø–æ–≤—ã—à–µ–Ω–∏–µ') ||
        p.suggested_action.includes('—Å–Ω–∏–∂–µ–Ω–∏–µ')
    )

    if (pricingOpportunities.length > 0) {
      alerts.push({
        type: 'opportunity',
        severity: 'info',
        title: 'üí∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω',
        message: `–ù–∞–π–¥–µ–Ω–æ ${pricingOpportunities.length} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è`,
        action_required: false,
        recommendations: pricingOpportunities.map(
          p => `${p.service}: ${p.suggested_action} (${p.expected_impact})`
        ),
        data: { opportunities: pricingOpportunities },
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —Ä–∏—Å–∫–æ–º
    if (recommendations.user_retention.at_risk_users > 0) {
      alerts.push({
        type: 'opportunity',
        severity: 'warning',
        title: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥ —Ä–∏—Å–∫–æ–º',
        message: `${recommendations.user_retention.at_risk_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å`,
        action_required: true,
        recommendations: recommendations.user_retention.retention_strategies,
        data: { at_risk_users: recommendations.user_retention.at_risk_users },
      })
    }

    return alerts
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:', error)
    return alerts
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
 */
export async function generateWeeklySummary(
  botName: string
): Promise<SmartAlert> {
  try {
    const trends = await analyzeTrends(botName)
    const recommendations = await generateSmartRecommendations(botName)

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
    const { data: weekPayments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .gte(
        'payment_date',
        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
      )

    const weekRevenue =
      weekPayments
        ?.filter(p => p.type === 'MONEY_INCOME' && p.category === 'REAL')
        .reduce((sum, p) => sum + (p.stars || 0), 0) || 0

    const weekTransactions =
      weekPayments?.filter(p => p.type === 'MONEY_OUTCOME').length || 0
    const activeUsers = new Set(weekPayments?.map(p => p.telegram_id) || [])
      .size

    let summaryMessage = `üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n\n`
    summaryMessage += `üí∞ –î–æ—Ö–æ–¥—ã: ${weekRevenue.toLocaleString()}‚≠ê\n`
    summaryMessage += `üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${weekTransactions}\n`
    summaryMessage += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}\n\n`

    if (trends.revenue_forecast.growth_rate !== 0) {
      const trendEmoji = trends.revenue_forecast.growth_rate > 0 ? 'üìà' : 'üìâ'
      summaryMessage += `${trendEmoji} –¢—Ä–µ–Ω–¥: ${trends.revenue_forecast.growth_rate > 0 ? '+' : ''}${trends.revenue_forecast.growth_rate}%\n`
    }

    summaryMessage += `üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: ${trends.revenue_forecast.predicted_amount.toLocaleString()}‚≠ê\n`
    summaryMessage += `‚è∞ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${trends.seasonality.peak_activity_time}`

    const weeklyRecommendations = [
      '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏',
      '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    ]

    if (recommendations.user_retention.at_risk_users > 0) {
      weeklyRecommendations.push(
        `–°–≤—è–∂–∏—Ç–µ—Å—å —Å ${recommendations.user_retention.at_risk_users} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`
      )
    }

    return {
      type: 'weekly_summary',
      severity: 'info',
      title: 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞',
      message: summaryMessage,
      action_required: false,
      recommendations: weeklyRecommendations,
      data: {
        week_revenue: weekRevenue,
        week_transactions: weekTransactions,
        active_users: activeUsers,
        growth_rate: trends.revenue_forecast.growth_rate,
      },
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error)
    return {
      type: 'weekly_summary',
      severity: 'warning',
      title: 'üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏',
      action_required: false,
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'],
      data: {},
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export function formatAlertMessage(alert: SmartAlert): string {
  const severityEmoji = {
    info: '‚ÑπÔ∏è',
    warning: '‚ö†Ô∏è',
    critical: 'üö®',
    success: '‚úÖ',
  }[alert.severity]

  let message = `${severityEmoji} <b>${alert.title}</b>\n\n`
  message += `${alert.message}\n\n`

  if (alert.recommendations.length > 0) {
    message += `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`
    alert.recommendations.forEach((rec, index) => {
      message += `${index + 1}. ${rec}\n`
    })
  }

  if (alert.action_required) {
    message += `\nüéØ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ!</b>`
  }

  return message
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function getTotalRevenue(botName: string): Promise<number> {
  const { data: payments } = await supabase
    .from('payments_v2')
    .select('stars')
    .eq('bot_name', botName)
    .eq('status', 'COMPLETED')
    .eq('type', 'MONEY_INCOME')
    .eq('category', 'REAL')

  return payments?.reduce((sum, p) => sum + (p.stars || 0), 0) || 0
}
