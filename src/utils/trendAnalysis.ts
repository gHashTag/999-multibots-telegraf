/**
 * üìà –ú–û–î–£–õ–¨ –ê–ù–ê–õ–ò–ó–ê –¢–†–ï–ù–î–û–í –ò –£–ú–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–æ–≤
 */

import { supabase } from '@/core/supabase'

export interface TrendAnalysis {
  revenue_forecast: {
    predicted_amount: number
    confidence_level: number
    trend_direction: 'growing' | 'declining' | 'stable'
    growth_rate: number
  }

  seasonality: {
    best_day_of_week: string
    best_hour_of_day: number
    peak_activity_time: string
  }

  alerts: Array<{
    type: 'revenue_drop' | 'user_churn' | 'cost_spike' | 'growth_opportunity'
    severity: 'low' | 'medium' | 'high'
    message: string
    recommendation: string
  }>
}

export interface SmartRecommendations {
  pricing_optimization: Array<{
    service: string
    current_avg_price: number
    suggested_action: string
    expected_impact: string
  }>

  user_retention: {
    at_risk_users: number
    retention_strategies: string[]
  }

  growth_opportunities: {
    underperforming_services: string[]
    trending_services: string[]
    expansion_suggestions: string[]
  }
}

export interface UserSegmentation {
  segments: Array<{
    name: 'VIP' | 'Regular' | 'Occasional' | 'At_Risk' | 'New'
    count: number
    avg_revenue: number
    characteristics: string[]
    retention_rate: number
    recommended_actions: string[]
  }>

  user_journey: {
    avg_time_to_first_purchase: number
    avg_lifetime_value: number
    churn_rate: number
    most_popular_first_service: string
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
 */
export async function analyzeTrends(botName: string): Promise<TrendAnalysis> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    const threeMonthsAgo = new Date()
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3)

    const { data: payments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .gte('payment_date', threeMonthsAgo.toISOString())
      .order('payment_date', { ascending: true })

    if (!payments || payments.length === 0) {
      return getDefaultTrendAnalysis()
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyRevenue = getMonthlyRevenue(payments)
    const forecast = calculateRevenueForecast(monthlyRevenue)

    // –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    const seasonality = analyzeSeasonality(payments)

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
    const alerts = generateAlerts(payments, monthlyRevenue)

    return {
      revenue_forecast: forecast,
      seasonality,
      alerts,
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', error)
    return getDefaultTrendAnalysis()
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */
export async function generateSmartRecommendations(
  botName: string
): Promise<SmartRecommendations> {
  try {
    const { data: payments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .order('payment_date', { ascending: false })
      .limit(1000)

    if (!payments || payments.length === 0) {
      return getDefaultRecommendations()
    }

    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    const pricingOptimization = analyzePricingOptimization(payments)

    // –ê–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userRetention = analyzeUserRetention(payments)

    // –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–æ—Å—Ç–∞
    const growthOpportunities = analyzeGrowthOpportunities(payments)

    return {
      pricing_optimization: pricingOptimization,
      user_retention: userRetention,
      growth_opportunities: growthOpportunities,
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
    return getDefaultRecommendations()
  }
}

/**
 * –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function segmentUsers(botName: string): Promise<UserSegmentation> {
  try {
    const oneMonthAgo = new Date()
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)

    const { data: payments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('bot_name', botName)
      .eq('status', 'COMPLETED')
      .order('payment_date', { ascending: false })

    if (!payments || payments.length === 0) {
      return getDefaultSegmentation()
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const userStats = getUserStats(payments)
    const segments = createUserSegments(userStats, oneMonthAgo)
    const userJourney = analyzeUserJourney(payments)

    return {
      segments,
      user_journey: userJourney,
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    return getDefaultSegmentation()
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getMonthlyRevenue(
  payments: any[]
): Array<{ month: string; revenue: number }> {
  const monthlyMap = new Map<string, number>()

  payments
    .filter(p => p.type === 'MONEY_INCOME' && p.category === 'REAL')
    .forEach(payment => {
      const date = new Date(payment.payment_date)
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`

      const current = monthlyMap.get(monthKey) || 0
      monthlyMap.set(monthKey, current + (payment.stars || 0))
    })

  return Array.from(monthlyMap.entries())
    .map(([month, revenue]) => ({ month, revenue }))
    .sort((a, b) => a.month.localeCompare(b.month))
}

function calculateRevenueForecast(
  monthlyRevenue: Array<{ month: string; revenue: number }>
) {
  if (monthlyRevenue.length < 2) {
    return {
      predicted_amount: 0,
      confidence_level: 0,
      trend_direction: 'stable' as const,
      growth_rate: 0,
    }
  }

  const revenues = monthlyRevenue.map(m => m.revenue)
  const lastMonth = revenues[revenues.length - 1]
  const prevMonth = revenues[revenues.length - 2]

  // –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
  const growthRate =
    prevMonth > 0 ? ((lastMonth - prevMonth) / prevMonth) * 100 : 0
  const predictedAmount = Math.max(0, lastMonth * (1 + growthRate / 100))

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
  let trendDirection: 'growing' | 'declining' | 'stable' = 'stable'
  if (Math.abs(growthRate) > 5) {
    trendDirection = growthRate > 0 ? 'growing' : 'declining'
  }

  // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
  const confidenceLevel = Math.min(90, monthlyRevenue.length * 20)

  return {
    predicted_amount: Math.round(predictedAmount),
    confidence_level: confidenceLevel,
    trend_direction: trendDirection,
    growth_rate: Math.round(growthRate * 10) / 10,
  }
}

function analyzeSeasonality(payments: any[]) {
  const dayStats = new Map<string, number>()
  const hourStats = new Map<number, number>()

  payments.forEach(payment => {
    const date = new Date(payment.payment_date)
    const dayOfWeek = date.toLocaleDateString('ru-RU', { weekday: 'long' })
    const hour = date.getHours()

    dayStats.set(dayOfWeek, (dayStats.get(dayOfWeek) || 0) + 1)
    hourStats.set(hour, (hourStats.get(hour) || 0) + 1)
  })

  // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  const bestDay =
    Array.from(dayStats.entries()).sort(([, a], [, b]) => b - a)[0]?.[0] ||
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'

  // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —á–∞—Å
  const bestHour =
    Array.from(hourStats.entries()).sort(([, a], [, b]) => b - a)[0]?.[0] || 12

  return {
    best_day_of_week: bestDay,
    best_hour_of_day: bestHour,
    peak_activity_time: `${bestHour}:00-${bestHour + 1}:00`,
  }
}

function generateAlerts(
  payments: any[],
  monthlyRevenue: Array<{ month: string; revenue: number }>
) {
  const alerts: TrendAnalysis['alerts'] = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤
  if (monthlyRevenue.length >= 2) {
    const lastMonth = monthlyRevenue[monthlyRevenue.length - 1].revenue
    const prevMonth = monthlyRevenue[monthlyRevenue.length - 2].revenue

    if (prevMonth > 0 && lastMonth / prevMonth < 0.8) {
      alerts.push({
        type: 'revenue_drop',
        severity: 'high',
        message: `–î–æ—Ö–æ–¥—ã —É–ø–∞–ª–∏ –Ω–∞ ${Math.round((1 - lastMonth / prevMonth) * 100)}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º`,
        recommendation:
          '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–∏',
      })
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const recentUsers = new Set(
    payments
      .filter(p => {
        const date = new Date(p.payment_date)
        const weekAgo = new Date()
        weekAgo.setDate(weekAgo.getDate() - 7)
        return date >= weekAgo
      })
      .map(p => p.telegram_id)
  )

  const prevWeekUsers = new Set(
    payments
      .filter(p => {
        const date = new Date(p.payment_date)
        const twoWeeksAgo = new Date()
        twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14)
        const weekAgo = new Date()
        weekAgo.setDate(weekAgo.getDate() - 7)
        return date >= twoWeeksAgo && date < weekAgo
      })
      .map(p => p.telegram_id)
  )

  if (prevWeekUsers.size > 0 && recentUsers.size < prevWeekUsers.size * 0.7) {
    alerts.push({
      type: 'user_churn',
      severity: 'medium',
      message: `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ ${Math.round((1 - recentUsers.size / prevWeekUsers.size) * 100)}%`,
      recommendation: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –ø–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    })
  }

  // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
  const serviceStats = new Map<string, number>()
  payments
    .filter(p => p.type === 'MONEY_OUTCOME')
    .forEach(p => {
      const service = p.service_type || 'unknown'
      serviceStats.set(service, (serviceStats.get(service) || 0) + 1)
    })

  const topService = Array.from(serviceStats.entries()).sort(
    ([, a], [, b]) => b - a
  )[0]

  if (topService && topService[1] > 10) {
    alerts.push({
      type: 'growth_opportunity',
      severity: 'low',
      message: `–°–µ—Ä–≤–∏—Å "${topService[0]}" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å`,
      recommendation:
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö',
    })
  }

  return alerts
}

function analyzePricingOptimization(payments: any[]) {
  const serviceStats = new Map<string, { total: number; count: number }>()

  payments
    .filter(p => p.type === 'MONEY_OUTCOME' && p.service_type)
    .forEach(payment => {
      const service = payment.service_type
      const current = serviceStats.get(service) || { total: 0, count: 0 }
      current.total += payment.stars || 0
      current.count += 1
      serviceStats.set(service, current)
    })

  return Array.from(serviceStats.entries())
    .filter(([, stats]) => stats.count >= 5) // –ú–∏–Ω–∏–º—É–º 5 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    .map(([service, stats]) => {
      const avgPrice = stats.total / stats.count
      let suggestion = ''
      let impact = ''

      if (avgPrice < 10) {
        suggestion = '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã'
        impact = '–ú–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –Ω–∞ 15-25%'
      } else if (avgPrice > 100) {
        suggestion = '–¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤—ã—à–µ–Ω–∞'
        impact = '–°–Ω–∏–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –Ω–∞ 20-30%'
      } else {
        suggestion = '–¶–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞'
        impact = '–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'
      }

      return {
        service,
        current_avg_price: Math.round(avgPrice * 10) / 10,
        suggested_action: suggestion,
        expected_impact: impact,
      }
    })
    .slice(0, 5) // –¢–æ–ø-5 —Å–µ—Ä–≤–∏—Å–æ–≤
}

function analyzeUserRetention(payments: any[]) {
  const twoWeeksAgo = new Date()
  twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14)

  const inactiveUsers = new Set<string>()
  const allUsers = new Set<string>()

  payments.forEach(payment => {
    allUsers.add(payment.telegram_id)
    const paymentDate = new Date(payment.payment_date)
    if (paymentDate < twoWeeksAgo) {
      inactiveUsers.add(payment.telegram_id)
    }
  })

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
  const recentActiveUsers = new Set<string>()
  payments
    .filter(p => new Date(p.payment_date) >= twoWeeksAgo)
    .forEach(p => recentActiveUsers.add(p.telegram_id))

  const atRiskUsers = Array.from(inactiveUsers).filter(
    user => !recentActiveUsers.has(user)
  ).length

  const strategies = [
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
    '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —Å—Ä–µ–¥–∏ —É—à–µ–¥—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É',
  ]

  return {
    at_risk_users: atRiskUsers,
    retention_strategies: strategies,
  }
}

function analyzeGrowthOpportunities(payments: any[]) {
  const serviceStats = new Map<string, number>()
  const recentServiceStats = new Map<string, number>()

  const oneMonthAgo = new Date()
  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)

  payments
    .filter(p => p.type === 'MONEY_OUTCOME' && p.service_type)
    .forEach(payment => {
      const service = payment.service_type
      serviceStats.set(service, (serviceStats.get(service) || 0) + 1)

      if (new Date(payment.payment_date) >= oneMonthAgo) {
        recentServiceStats.set(
          service,
          (recentServiceStats.get(service) || 0) + 1
        )
      }
    })

  // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  const underperforming = Array.from(serviceStats.entries())
    .filter(([, count]) => count < 5)
    .map(([service]) => service)
    .slice(0, 3)

  // –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Ç—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  const trending = Array.from(recentServiceStats.entries())
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3)
    .map(([service]) => service)

  const expansionSuggestions = [
    '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
    '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏',
    '–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
  ]

  return {
    underperforming_services: underperforming,
    trending_services: trending,
    expansion_suggestions: expansionSuggestions,
  }
}

function getUserStats(payments: any[]) {
  const userStats = new Map<
    string,
    {
      totalSpent: number
      transactionCount: number
      lastActivity: Date
      firstActivity: Date
    }
  >()

  payments.forEach(payment => {
    const userId = payment.telegram_id
    const paymentDate = new Date(payment.payment_date)
    const amount = payment.stars || 0

    const current = userStats.get(userId) || {
      totalSpent: 0,
      transactionCount: 0,
      lastActivity: paymentDate,
      firstActivity: paymentDate,
    }

    if (payment.type === 'MONEY_OUTCOME') {
      current.totalSpent += amount
      current.transactionCount += 1
    }

    if (paymentDate > current.lastActivity) {
      current.lastActivity = paymentDate
    }
    if (paymentDate < current.firstActivity) {
      current.firstActivity = paymentDate
    }

    userStats.set(userId, current)
  })

  return userStats
}

function createUserSegments(userStats: Map<string, any>, oneMonthAgo: Date) {
  const segments = {
    VIP: {
      users: [],
      avg_revenue: 0,
      characteristics: [
        '–¢—Ä–∞—Ç—è—Ç >1000‚≠ê/–º–µ—Å—è—Ü',
        '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–õ–æ—è–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      ],
    },
    Regular: {
      users: [],
      avg_revenue: 0,
      characteristics: [
        '–¢—Ä–∞—Ç—è—Ç 100-1000‚≠ê/–º–µ—Å—è—Ü',
        '–†–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      ],
    },
    Occasional: {
      users: [],
      avg_revenue: 0,
      characteristics: [
        '–¢—Ä–∞—Ç—è—Ç <100‚≠ê/–º–µ—Å—è—Ü',
        '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
      ],
    },
    At_Risk: {
      users: [],
      avg_revenue: 0,
      characteristics: [
        '–ù–µ –∞–∫—Ç–∏–≤–Ω—ã >14 –¥–Ω–µ–π',
        '–°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        '–ù—É–∂–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è',
      ],
    },
    New: {
      users: [],
      avg_revenue: 0,
      characteristics: [
        '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ <30 –¥–Ω–µ–π',
        '–ò–∑—É—á–∞—é—Ç —Å–µ—Ä–≤–∏—Å',
        '–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
      ],
    },
  }

  const twoWeeksAgo = new Date()
  twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14)

  Array.from(userStats.entries()).forEach(([userId, stats]) => {
    const monthlySpending = stats.totalSpent // –£–ø—Ä–æ—â–µ–Ω–∏–µ: —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Ç—Ä–∞—Ç—ã –∫–∞–∫ –º–µ—Å—è—á–Ω—ã–µ
    const daysSinceLastActivity =
      (new Date().getTime() - stats.lastActivity.getTime()) /
      (1000 * 60 * 60 * 24)
    const daysSinceFirstActivity =
      (new Date().getTime() - stats.firstActivity.getTime()) /
      (1000 * 60 * 60 * 24)

    if (daysSinceLastActivity > 14) {
      segments.At_Risk.users.push(userId)
      segments.At_Risk.avg_revenue += monthlySpending
    } else if (daysSinceFirstActivity < 30) {
      segments.New.users.push(userId)
      segments.New.avg_revenue += monthlySpending
    } else if (monthlySpending > 1000) {
      segments.VIP.users.push(userId)
      segments.VIP.avg_revenue += monthlySpending
    } else if (monthlySpending > 100) {
      segments.Regular.users.push(userId)
      segments.Regular.avg_revenue += monthlySpending
    } else {
      segments.Occasional.users.push(userId)
      segments.Occasional.avg_revenue += monthlySpending
    }
  })

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  return Object.entries(segments).map(([name, data]) => {
    const count = data.users.length
    const avgRevenue = count > 0 ? data.avg_revenue / count : 0

    let recommendedActions: string[] = []
    switch (name) {
      case 'VIP':
        recommendedActions = [
          '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
          '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
          '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
        ]
        break
      case 'Regular':
        recommendedActions = [
          '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ø–≥—Ä–µ–π–¥–∞',
          '–ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
        ]
        break
      case 'Occasional':
        recommendedActions = [
          '–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏',
        ]
        break
      case 'At_Risk':
        recommendedActions = [
          '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏',
          '–û–ø—Ä–æ—Å –æ–± —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
          '–í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏',
        ]
        break
      case 'New':
        recommendedActions = [
          '–û–Ω–±–æ—Ä–¥–∏–Ω–≥',
          '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã',
          '–û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        ]
        break
    }

    return {
      name: name as 'VIP' | 'Regular' | 'Occasional' | 'At_Risk' | 'New',
      count,
      avg_revenue: Math.round(avgRevenue),
      characteristics: data.characteristics,
      retention_rate: 85, // –£–ø—Ä–æ—â–µ–Ω–∏–µ: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      recommended_actions: recommendedActions,
    }
  })
}

function analyzeUserJourney(payments: any[]) {
  const userFirstPurchase = new Map<string, Date>()
  const userServices = new Map<string, string>()

  payments
    .filter(p => p.type === 'MONEY_OUTCOME')
    .forEach(payment => {
      const userId = payment.telegram_id
      const paymentDate = new Date(payment.payment_date)

      if (
        !userFirstPurchase.has(userId) ||
        paymentDate < userFirstPurchase.get(userId)!
      ) {
        userFirstPurchase.set(userId, paymentDate)
        userServices.set(userId, payment.service_type || 'unknown')
      }
    })

  // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–∏–µ)
  const avgTimeToFirstPurchase = 3 // –¥–Ω–µ–π

  // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
  const userStats = getUserStats(payments)
  const totalValue = Array.from(userStats.values()).reduce(
    (sum, stats) => sum + stats.totalSpent,
    0
  )
  const avgLifetimeValue = userStats.size > 0 ? totalValue / userStats.size : 0

  // –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–∏—Å
  const serviceCount = new Map<string, number>()
  Array.from(userServices.values()).forEach(service => {
    serviceCount.set(service, (serviceCount.get(service) || 0) + 1)
  })

  const mostPopularFirstService =
    Array.from(serviceCount.entries()).sort(([, a], [, b]) => b - a)[0]?.[0] ||
    'unknown'

  return {
    avg_time_to_first_purchase: avgTimeToFirstPurchase,
    avg_lifetime_value: Math.round(avgLifetimeValue),
    churn_rate: 15, // –£–ø—Ä–æ—â–µ–Ω–∏–µ: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    most_popular_first_service: mostPopularFirstService,
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –¥–∞–Ω–Ω—ã—Ö

function getDefaultTrendAnalysis(): TrendAnalysis {
  return {
    revenue_forecast: {
      predicted_amount: 0,
      confidence_level: 0,
      trend_direction: 'stable',
      growth_rate: 0,
    },
    seasonality: {
      best_day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      best_hour_of_day: 12,
      peak_activity_time: '12:00-13:00',
    },
    alerts: [
      {
        type: 'growth_opportunity',
        severity: 'low',
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤',
        recommendation: '–ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤',
      },
    ],
  }
}

function getDefaultRecommendations(): SmartRecommendations {
  return {
    pricing_optimization: [],
    user_retention: {
      at_risk_users: 0,
      retention_strategies: [
        '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
        '–£–ª—É—á—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç',
        '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
      ],
    },
    growth_opportunities: {
      underperforming_services: [],
      trending_services: [],
      expansion_suggestions: [
        '–ò–∑—É—á–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã',
        '–£–ª—É—á—à–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
      ],
    },
  }
}

function getDefaultSegmentation(): UserSegmentation {
  return {
    segments: [
      {
        name: 'New',
        count: 0,
        avg_revenue: 0,
        characteristics: ['–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
        retention_rate: 0,
        recommended_actions: ['–ü—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'],
      },
    ],
    user_journey: {
      avg_time_to_first_purchase: 0,
      avg_lifetime_value: 0,
      churn_rate: 0,
      most_popular_first_service: 'unknown',
    },
  }
}
