import { Telegraf } from 'telegraf'
import express from 'express'
import { MyContext } from '@/interfaces'
import { removeWebhooks } from './removeWebhooks'
import { logger } from '@/utils/logger'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (polling)
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export async function development(bot: Telegraf<MyContext>) {
  try {
    // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ —Ä–µ–∂–∏–º–µ polling
    await bot.telegram.deleteWebhook()
    await bot.launch()
    logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', {
      description: 'Bot launched in development mode',
      bot_name: bot.botInfo?.username,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', {
      description: 'Development launch error',
      bot_name: bot.botInfo?.username,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∫—à–Ω (webhook)
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param port –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 * @param url URL –≤–µ–±—Ö—É–∫–∞
 * @param path –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞
 */
export async function production(
  bot: Telegraf<MyContext>,
  port: number,
  url: string,
  path: string
) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏
    await removeWebhooks(bot)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    await bot.telegram.getMe()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    await bot.telegram.setWebhook(url, {
      drop_pending_updates: true,
      allowed_updates: ['message', 'callback_query', 'pre_checkout_query'],
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    const webhookInfo = await bot.telegram.getWebhookInfo()
    logger.info('üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:', {
      description: 'Webhook info',
      bot_name: bot.botInfo?.username,
      url: webhookInfo.url,
      has_custom_certificate: webhookInfo.has_custom_certificate,
      pending_update_count: webhookInfo.pending_update_count,
    })

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
    const app = express()
    app.use(express.json())

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    app.use(path, async (req, res) => {
      try {
        await bot.handleUpdate(req.body, res)
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', {
          description: 'Webhook handling error',
          bot_name: bot.botInfo?.username,
          error: error instanceof Error ? error.message : String(error),
        })
        res.status(500).send('Webhook handling error')
      }
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(port, () => {
      logger.info('‚úÖ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏:', {
        description: 'Bot webhook listening',
        bot_name: bot.botInfo?.username,
        port,
        path,
      })
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∫—à–Ω:', {
      description: 'Production launch error',
      bot_name: bot.botInfo?.username,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è utils/launch
 * –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º –≤ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ
 */

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å –º–æ–≥ –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
export const launch = {
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
  init: () => {
    console.log('Launch module initialized')
    return true
  },

  configureWebhook: (options: any) => {
    console.log('Webhook configured with options:', options)
    return true
  },

  configureLongPolling: (options: any) => {
    console.log('Long polling configured with options:', options)
    return true
  },
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
export default launch
