import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

const production = async (
  bot: Telegraf<MyContext>,
  port: number,
  webhookUrl: string,
  path: string
): Promise<void> => {
  try {
    logger.info('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫...', {
      description: 'Deleting old webhook',
      webhookUrl,
      path,
    })

    await bot.telegram.deleteWebhook({ drop_pending_updates: true })
    logger.info('‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω', {
      description: 'Old webhook deleted',
    })

    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    await new Promise(resolve => setTimeout(resolve, 3000))

    logger.info('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫...', {
      description: 'Setting up new webhook',
      webhookUrl,
      path,
    })

    await bot.launch({
      webhook: {
        domain: webhookUrl,
        port,
        path,
        secretToken: process.env.SECRET_TOKEN,
      },
    })

    logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook', {
      description: 'Bot launched in webhook mode',
      webhookUrl,
      path,
    })

    return
  } catch (e) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ production —Ä–µ–∂–∏–º–∞:', {
      description: 'Error in production setup',
      error: e instanceof Error ? e.message : String(e),
    })
    throw e
  }
}

const development = async (bot: Telegraf<MyContext>): Promise<void> => {
  try {
    logger.info('üîÑ –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è development —Ä–µ–∂–∏–º–∞...', {
      description: 'Deleting webhook for development mode',
    })

    await bot.telegram.deleteWebhook({ drop_pending_updates: true })
    logger.info('‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...', {
      description: 'Webhook deleted, starting polling',
    })

    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await new Promise(resolve => setTimeout(resolve, 2000))

    await bot.launch()
    logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling', {
      description: 'Bot launched in polling mode',
    })

    return
  } catch (e) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ development —Ä–µ–∂–∏–º–∞:', {
      description: 'Error in development setup',
      error: e instanceof Error ? e.message : String(e),
    })
    throw e
  }
}

export { production, development }
