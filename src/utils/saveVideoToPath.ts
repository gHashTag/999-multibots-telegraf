import { writeFile } from 'fs/promises'
import { logger } from './logger'
import axios from 'axios'

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å
 * @param videoUrl URL –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param videoLocalPath –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
 * @returns –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
 */
export async function saveVideoToPath(
  videoUrl: string,
  videoLocalPath: string
): Promise<string> {
  try {
    logger.info('üé• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ', {
      description: 'Downloading video',
      url: videoUrl,
    })

    // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    const response = await axios.get(videoUrl, {
      responseType: 'arraybuffer',
    })

    const videoBuffer = Buffer.from(response.data)

    logger.info('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ', {
      description: 'Writing video to file',
      path: videoLocalPath,
      bufferSize: videoBuffer.length,
    })

    await writeFile(videoLocalPath, videoBuffer.toString('base64'), 'base64')

    logger.info('‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', {
      description: 'Video saved',
      path: videoLocalPath,
    })

    return videoLocalPath
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ', {
      description: 'Error saving video',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      videoUrl,
    })
    throw error
  }
}
