import { logger } from '@/utils/logger' // Import logger
import { Markup } from 'telegraf'
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç InlineKeyboardMarkup, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
import type { ReplyKeyboardMarkup } from 'telegraf/types'
// import { VIDEO_MODELS } from '@/interfaces' // –°—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ –Ω—É–∂–µ–Ω
import { VIDEO_MODELS_CONFIG } from '@/modules/videoGenerator/config/models.config' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
import { calculateFinalPrice } from '@/price/helpers'
import { levels } from './mainMenu'
import { Translation } from '@/interfaces/translations.interface'

export const videoModelKeyboard = (
  isRu: boolean,
  inputType: 'text' | 'image' | 'morph'
): Markup.Markup<ReplyKeyboardMarkup> => {
  // --- DEBUG LOGGING START ---
  logger.debug(
    '[videoModelKeyboard] Generating keyboard. Config used:',
    VIDEO_MODELS_CONFIG,
    'Filtering by inputType:',
    inputType
  )
  // --- DEBUG LOGGING END ---

  // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ inputType, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –° –¶–ï–ù–û–ô –í –ó–í–ï–ó–î–ê–• ‚≠ê
  const buttons = Object.entries(VIDEO_MODELS_CONFIG)
    .filter(([key, config]) => config.inputType.includes(inputType))
    .map(([key, config]) => {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–≤–µ–∑–¥–∞—Ö (—É–∂–µ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)
      const finalPriceInStars = calculateFinalPrice(key)
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ü–µ–Ω–æ–π –≤ –∑–≤–µ–∑–¥–∞—Ö –∏ —ç–º–æ–¥–∑–∏ ‚≠ê
      return `${config.title} (${finalPriceInStars} ‚≠ê)` // –ó–∞–º–µ–Ω—è–µ–º ‚òÖ –Ω–∞ ‚≠ê
    })

  // --- DEBUG LOGGING START ---
  logger.debug('[videoModelKeyboard] Generated button texts:', buttons)
  // --- DEBUG LOGGING END ---

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π –ø–æ 2 –≤ —Ä—è–¥
  const rows: string[][] = [] // –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ç—Ä–æ–∫
  const buttonsPerRow = 2 // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 3
  for (let i = 0; i < buttons.length; i += buttonsPerRow) {
    rows.push(buttons.slice(i, i + buttonsPerRow))
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ü–æ–º–æ—â—å –∏ –û—Ç–º–µ–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ levels
  const helpButtonText = isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command' // –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  const cancelButtonText = isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel' // –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º levels[104] –¥–ª—è "–ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
  const mainMenuButtonText = levels[104]
    ? isRu
      ? levels[104].title_ru
      : levels[104].title_en
    : isRu
      ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
      : 'üè† Main menu' // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç

  rows.push(
    [helpButtonText, cancelButtonText], // –†—è–¥ 1: –°–ø—Ä–∞–≤–∫–∞, –û—Ç–º–µ–Ω–∞
    [mainMenuButtonText] // –†—è–¥ 2: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  )

  // --- DEBUG LOGGING START ---
  logger.debug('[videoModelKeyboard] Final rows structure:', rows)
  // --- DEBUG LOGGING END ---

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markup.keyboard –∏ –¥–æ–±–∞–≤–ª—è–µ–º .resize()
  return Markup.keyboard(rows).resize()
}
