import { SubscriptionType } from '@/interfaces/subscription.interface'
import { Markup } from 'telegraf'
import { ReplyKeyboardMarkup } from 'telegraf/typings/core/types/typegram'
import { MyContext, Level } from '@/interfaces/telegram-bot.interface'
import { SUBSCRIPTION_CONFIG } from '@/config/subscription.config'

export const levels: Record<number, Level> = {
  // digital_avatar_body
  1: {
    title_ru: 'ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ',
    title_en: 'ü§ñ Digital Body',
  },
  // neuro_photo
  2: {
    title_ru: 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    title_en: 'üì∏ NeuroPhoto',
  },
  // image_to_prompt
  3: {
    title_ru: 'üîç –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ',
    title_en: 'üîç Prompt from Photo',
  },
  // avatar
  4: {
    title_ru: 'üß† –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞',
    title_en: 'üß† Avatar Brain',
  },
  // chat_with_avatar
  5: {
    title_ru: 'üí≠ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
    title_en: 'üí≠ Chat with avatar',
  },
  // select_model
  6: {
    title_ru: 'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò',
    title_en: 'ü§ñ Choose AI Model',
  },
  // voice
  7: {
    title_ru: 'üé§ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞',
    title_en: 'üé§ Avatar Voice',
  },
  // text_to_speech
  8: {
    title_ru: 'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å',
    title_en: 'üéôÔ∏è Text to Voice',
  },
  // image_to_video
  9: {
    title_ru: 'üé• –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ',
    title_en: 'üé• Photo to Video',
  },
  // text_to_video
  10: {
    title_ru: 'üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    title_en: 'üé• Text to Video',
  },
  // text_to_image
  11: {
    title_ru: 'üñºÔ∏è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ',
    title_en: 'üñºÔ∏è Text to Image',
  },
  // lip_sync
  // 12: {
  //   title_ru: 'üé§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±',
  //   title_en: 'üé§ Lip Sync',
  // },
  // 13: {
  //   title_ru: 'üé• –í–∏–¥–µ–æ –≤ URL',
  //   title_en: 'üé• Video in URL',
  // },
  // step0
  // paymentScene
  100: {
    title_ru: 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
    title_en: 'üíé Top up balance',
  },
  // balanceCommand
  101: {
    title_ru: 'ü§ë –ë–∞–ª–∞–Ω—Å',
    title_en: 'ü§ë Balance',
  },
  // inviteCommand
  102: {
    title_ru: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
    title_en: 'üë• Invite a friend',
  },
  // helpCommand
  103: {
    title_ru: '‚ùì –ü–æ–º–æ—â—å',
    title_en: '‚ùì Help',
  },
  104: {
    title_ru: 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    title_en: 'üõ† Tech Support',
  },
  105: {
    title_ru: 'üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
    title_en: 'üí´ Subscribe',
  },
}

export const mainMenuButton = {
  title_ru: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  title_en: 'üè† Main menu',
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
export const subscriptionLevels = Object.values(SUBSCRIPTION_CONFIG).map(
  config => ({
    type: config.type,
    title_ru: config.title_ru,
    title_en: config.title_en,
    price_ru: config.price_ru,
    price_en: config.price_en,
  })
)

export async function mainMenu({
  isRu,
  subscription = SubscriptionType.NEUROTESTER,
  level,
  additionalButtons = [],
}: {
  isRu: boolean
  inviteCount: number
  subscription: SubscriptionType
  level: number
  ctx: MyContext
  additionalButtons?: Level[]
}): Promise<Markup.Markup<ReplyKeyboardMarkup>> {
  console.log('üíª CASE: mainMenu')

  // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω—é
  const subscriptionLevelsMap = {
    [SubscriptionType.STARS]: Object.values(levels),
    [SubscriptionType.NEUROTESTER]: Object.values(levels),
    [SubscriptionType.NEUROPHOTO]: [
      levels[1],
      levels[2],
      levels[3],
      levels[100],
      levels[101],
      levels[102],
      levels[103],
      levels[104],
      levels[105],
    ],
    [SubscriptionType.NEUROBASE]: Object.values(levels),
    [SubscriptionType.NEUROBLOGGER]: Object.values(levels),
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
  let availableLevels =
    subscriptionLevelsMap[subscription as keyof typeof subscriptionLevelsMap] ||
    []

  // –î–ª—è neurophoto –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ 3 –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  if (subscription === SubscriptionType.NEUROPHOTO && level >= 3) {
    availableLevels = [
      ...availableLevels.filter(l => l.title_ru !== mainMenuButton.title_ru),
      ...additionalButtons,
    ]
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Ä–æ–≤–Ω–µ–π
  availableLevels = Array.from(new Set(availableLevels))

  // –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é
  if (
    ![SubscriptionType.NEUROTESTER, SubscriptionType.NEUROBASE].includes(
      subscription
    )
  ) {
    availableLevels = availableLevels.filter(
      l =>
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ subscriptionLevelsMap
        subscriptionLevelsMap[
          subscription as keyof typeof subscriptionLevelsMap
        ].includes(l) ||
        // –ò–ª–∏ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        additionalButtons.includes(l)
    )
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
  const buttons = availableLevels.map(level =>
    Markup.button.text(isRu ? level.title_ru : level.title_en)
  )

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  const buttonRows = []
  for (let i = 0; i < buttons.length; i += 2) {
    buttonRows.push(buttons.slice(i, i + 2))
  }

  console.log(
    'üëâ Available buttons:',
    buttons.map(b => b.text)
  )
  return Markup.keyboard(buttonRows).resize()
}
