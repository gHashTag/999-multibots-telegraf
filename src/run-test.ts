#!/usr/bin/env node

import {
  apiTests,
  paymentTests,
  inngestTests,
  neuroTests,
  systemTests,
  TestResult,
} from './test-utils'

// –¢–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤
type TestCategory =
  | 'api'
  | 'database'
  | 'inngest'
  | 'neuro'
  | 'payment'
  | 'speech'
  | 'translations'
  | 'webhook'
  | 'system'

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
 * @param {TestCategory} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
 */
async function runTestsForCategory(category: TestCategory): Promise<void> {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`)

  try {
    let results: TestResult[] = []

    switch (category) {
      case 'api':
        results = await apiTests.runApiTests()
        break
      case 'database':
        console.log('‚ÑπÔ∏è –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')
        results = []
        break
      case 'inngest':
        results = await Promise.all([
          inngestTests.runInngestDirectTest(),
          inngestTests.runInngestSDKTest(),
          inngestTests.runInngestFunctionRegistrationTest(),
          inngestTests.runInngestFullTest(),
        ])
        break
      case 'neuro':
        results = await Promise.all([neuroTests.runNeuroPhotoTests()])
        break
      case 'payment':
        results = await Promise.all([
          paymentTests.runBalanceTests(),
          paymentTests.runPaymentNotificationTests(),
        ])
        break
      case 'speech':
        console.log('‚ÑπÔ∏è –¢–µ—Å—Ç—ã —Ä–µ—á–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')
        results = []
        break
      case 'translations':
        console.log('‚ÑπÔ∏è –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')
        results = []
        break
      case 'webhook':
        console.log('‚ÑπÔ∏è –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã')
        results = []
        break
      case 'system':
        results = await systemTests.runSystemTests()
        break
      default:
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: ${category}`)
        process.exit(1)
    }

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤
    const totalTests = results.length
    const passedTests = results.filter(result => result.success).length
    const failedTests = totalTests - passedTests

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:')
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`)

    if (failedTests > 0) {
      console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}/${totalTests}`)

      // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      console.log('\n‚ùå –ù–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:')
      results
        .filter(result => !result.success)
        .forEach(result => {
          console.log(`   ‚ùå ${result.name}: ${result.message}`)
        })

      process.exit(1)
    } else {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
      process.exit(0)
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`)
    process.exit(1)
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤')

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤
  const categories: TestCategory[] = [
    'api',
    'database',
    'inngest',
    'neuro',
    'payment',
    'speech',
    'translations',
    'webhook',
    'system',
  ]

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  for (const category of categories) {
    await runTestsForCategory(category)
  }
}

/**
 * –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function showHelp(): void {
  console.log(`
üß™ –£—Ç–∏–ª–∏—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ NeuroBlogger

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run test [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤:
  api          - API —Ç–µ—Å—Ç—ã
  database     - –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  inngest      - –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  neuro        - –¢–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  payment      - –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
  speech       - –¢–µ—Å—Ç—ã —Ä–µ—á–∏
  translations - –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  webhook      - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
  system       - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
  
–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã.
  `)
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
 */
async function main(): Promise<void> {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2)

  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞
  if (args.includes('--help') || args.includes('-h')) {
    showHelp()
    return
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  if (args.length === 0) {
    await runAllTests()
  } else {
    const category = args[0] as TestCategory
    await runTestsForCategory(category)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(error => {
  const errorMessage = error instanceof Error ? error.message : String(error)
  console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`)
  process.exit(1)
})
