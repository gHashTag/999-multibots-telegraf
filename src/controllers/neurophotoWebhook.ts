import { Request, Response } from 'express'
import { getTaskData } from '@/core/supabase/'
import { logger } from '@/utils/logger'
import { NeurophotoWebhookBody } from '@/types/api'
import { sendMessageToUser } from '@/core/telegram/sendMessageToUser'

// –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedTaskIds = new Set<string>()

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ-—Å–µ—Ä–≤–∏—Å–∞
 */
export async function handleWebhookNeurophoto(
  req: Request<{}, {}, NeurophotoWebhookBody>,
  res: Response
): Promise<void> {
  const { task_id, status, result } = req.body

  logger.info('üé® Received neurophoto webhook', { task_id, status })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
  if (processedTaskIds.has(task_id)) {
    logger.info('üîÑ Task already processed', { task_id })
    res.status(200).json({ message: 'Task already processed' })
    return
  }

  try {
    const taskData = await getTaskData(task_id)
    if (!taskData) {
      throw new Error('Task data not found')
    }

    const { telegram_id, bot_name } = taskData

    if (
      status === 'Content Moderated' ||
      status === 'GENERATED CONTENT MODERATED'
    ) {
      logger.warn('‚ö†Ô∏è Content moderated', { task_id })
      await sendMessageToUser({
        telegram_id,
        bot_name,
        text: 'Content moderated. Please try again with different prompt.',
      })
    } else if (status === 'completed' && result?.urls) {
      logger.info('‚úÖ Task completed', { task_id })
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    } else if (status === 'failed') {
      logger.error('‚ùå Task failed', { task_id, error: result?.error })
      await sendMessageToUser({
        telegram_id,
        bot_name,
        text: 'Generation failed. Please try again.',
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    processedTaskIds.add(task_id)
    res.status(200).json({ message: 'Webhook processed' })
  } catch (error) {
    logger.error('‚ùå Error processing webhook', { task_id, error })
    res.status(500).json({ error: 'Internal server error' })
  }
}

// –û—á–∏—Å—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(
  () => {
    if (processedTaskIds.size > 0) {
      processedTaskIds.clear()
      logger.info({
        message: 'üßπ –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
        description: 'Processed tasks cleared',
        count: processedTaskIds.size,
      })
    }
  },
  24 * 60 * 60 * 1000
)

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
 * –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
 */
export const handleWebhookNeurophotoDebug = async (
  req: Request,
  res: Response
) => {
  try {
    const payload = req.body

    logger.info({
      message: 'üîç –í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ (–û–¢–õ–ê–î–ö–ê)',
      description: 'Debug neurophoto webhook request',
      payload,
    })

    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return res.status(200).json({
      message: 'Webhook processed in debug mode',
      payload,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Error in debug neurophoto webhook handler',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    return res
      .status(500)
      .json({ error: 'Internal server error in debug mode' })
  }
}
