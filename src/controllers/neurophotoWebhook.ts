import { Request, Response } from 'express'
import { updatePrompt, getTaskData, getUserByTaskId } from '@/core/supabase/'
import { pulseNeuroImageV2, saveFileLocally } from '@/helpers'
import { API_URL } from '@/config'
import { getBotByName } from '@/core/bot'
import { errorMessageAdmin } from '@/helpers'
import fs from 'fs'
import path from 'path'
import { logger } from '@/utils/logger'

// –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedTaskIds = new Set<string>()

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ-—Å–µ—Ä–≤–∏—Å–∞
 */
export const handleWebhookNeurophoto = async (req: Request, res: Response) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const { task_id, status, result } = req.body

  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫
    logger.info({
      message: 'üõ∞ –í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –æ—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Incoming webhook from neurophoto service',
      task_id,
      status,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç task_id
    if (processedTaskIds.has(task_id)) {
      logger.info({
        message: '‚ö†Ô∏è –í–µ–±—Ö—É–∫ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        description: 'Webhook already processed',
        task_id,
      })
      return res
        .status(200)
        .json({ message: `Webhook already processed for task_id: ${task_id}` })
    }

    // –°—Ç–∞—Ç—É—Å "processing" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    if (status === 'processing') {
      logger.info({
        message: '‚è≥ –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        description: 'Task is being processed',
        task_id,
      })
      return res
        .status(200)
        .json({ message: 'Webhook processed successfully: processing' })
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    let taskData
    try {
      logger.info({
        message: 'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏',
        description: 'Fetching task data',
        task_id,
      })
      taskData = await getTaskData(task_id)
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏',
        description: 'Failed to fetch task data',
        error: error.message,
        task_id,
        status,
      })
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      // –≤–º–µ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (
      status === 'Content Moderated' ||
      status === 'GENERATED CONTENT MODERATED'
    ) {
      // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å telegram_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–ø—Ç–æ–≤
      if (!taskData) {
        try {
          logger.info({
            message: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∑–∞–¥–∞—á–∏',
            description: 'Searching for user by task ID',
            task_id,
          })

          const userData = await getUserByTaskId(task_id)

          if (userData) {
            logger.info({
              message: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID –∑–∞–¥–∞—á–∏',
              description: 'User found by task ID',
              task_id,
              telegram_id: userData.telegram_id,
              bot_name: userData.bot_name,
            })

            const { bot } = getBotByName(userData.bot_name)
            const is_ru = userData.language_code === 'ru'

            if (bot) {
              try {
                await bot.telegram.sendMessage(
                  userData.telegram_id,
                  is_ru
                    ? `üö´ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –µ—â–µ —Ä–∞–∑.`
                    : `üö´ Content rejected by moderation. Try another prompt or try again.`,
                  {
                    reply_markup: {
                      keyboard: [
                        [
                          { text: '1Ô∏è‚É£' },
                          { text: '2Ô∏è‚É£' },
                          { text: '3Ô∏è‚É£' },
                          { text: '4Ô∏è‚É£' },
                        ],
                        [
                          {
                            text: is_ru
                              ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç'
                              : '‚¨ÜÔ∏è Improve prompt',
                          },
                          {
                            text: is_ru
                              ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä'
                              : 'üìê Change size',
                          },
                        ],
                        [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
                      ],
                      resize_keyboard: true,
                      one_time_keyboard: false,
                    },
                  }
                )

                logger.info({
                  message: 'üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                  description: 'Moderation notification sent',
                  task_id,
                  telegram_id: userData.telegram_id,
                })

                // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                processedTaskIds.add(task_id)
                return res.status(200).json({
                  message:
                    'Webhook processed successfully: content moderated, notification sent',
                })
              } catch (sendError) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                  description: 'Error sending moderation notification',
                  error: sendError.message,
                  task_id,
                  telegram_id: userData.telegram_id,
                })
              }
            } else {
              logger.error({
                message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞',
                description: 'Failed to get bot instance',
                task_id,
                bot_name: userData.bot_name,
              })
            }
          } else {
            logger.warn({
              message: '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID –∑–∞–¥–∞—á–∏',
              description: 'User not found by task ID',
              task_id,
            })
          }
        } catch (userLookupError) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∑–∞–¥–∞—á–∏',
            description: 'Error looking up user by task ID',
            error: userLookupError.message,
            task_id,
          })
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ,
        // –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        logger.warn({
          message: 'üö´ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é, –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          description: 'Content moderation without task data',
          task_id,
        })

        // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        processedTaskIds.add(task_id)
        return res.status(200).json({
          message: 'Webhook processed successfully: content moderated',
        })
      }

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
      const { bot_name } = taskData
      const { bot } = getBotByName(bot_name)

      if (!bot) {
        logger.error({
          message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞',
          description: 'Failed to get bot instance',
          bot_name,
          task_id,
        })

        // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        processedTaskIds.add(task_id)
        return res.status(200).json({
          message: 'Webhook processed: content moderated, but bot not found',
        })
      }

      const { telegram_id, language_code } = await updatePrompt(
        task_id,
        result?.sample || ''
      )
      const is_ru = language_code === 'ru'

      logger.warn({
        message: 'üö´ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é',
        description: 'Content moderated',
        task_id,
        telegram_id,
      })

      try {
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `üö´ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –µ—â–µ —Ä–∞–∑.`
            : `üö´ Content rejected by moderation. Try another prompt or try again.`,
          {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }
        )

        logger.info({
          message: 'üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          description: 'Moderation notification sent',
          task_id,
          telegram_id,
        })
      } catch (sendError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
          description: 'Error sending moderation notification',
          error: sendError.message,
          task_id,
          telegram_id,
        })
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
      processedTaskIds.add(task_id)
      return res
        .status(200)
        .json({ message: 'Webhook processed successfully: content moderated' })
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å—Ç–∞—Ç—É—Å SUCCESS, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (!taskData && status === 'SUCCESS') {
      logger.warn({
        message:
          '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
        description: 'Task data not found, continuing with minimal data',
        task_id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      if (!result || !result.sample) {
        logger.error({
          message: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sample',
          description: 'Invalid result: sample missing',
          task_id,
          result,
        })
        return res.status(500).json({ error: 'Internal server error' })
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      processedTaskIds.add(task_id)
      return res
        .status(200)
        .json({ message: 'Webhook processed successfully with minimal data' })
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!taskData) {
      logger.error({
        message: '‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        description: 'Task data not found',
        task_id,
      })
      return res.status(500).json({ error: 'Internal server error' })
    }

    const { bot_name } = taskData
    logger.info({
      message: 'ü§ñ –ò–º—è –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ',
      description: 'Bot name retrieved',
      bot_name,
      task_id,
    })

    const { bot } = getBotByName(bot_name)

    if (status === 'SUCCESS') {
      if (!result?.sample) {
        logger.error({
          message: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sample',
          description: 'Invalid result: sample is missing',
          task_id,
        })
        throw new Error('Invalid result: sample is missing')
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
      processedTaskIds.add(task_id)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const { telegram_id, username, bot_name, language_code, prompt } =
        await updatePrompt(task_id, result.sample)
      const is_ru = language_code === 'ru'

      logger.info({
        message: '‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        description: 'Prompt data updated',
        task_id,
        telegram_id,
      })

      const imageLocalPath = await saveFileLocally(
        telegram_id,
        result.sample,
        'neuro-photo-v2',
        '.jpeg'
      )

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      const imageUrl = `${API_URL}/uploads/${telegram_id}/neuro-photo-v2/${path.basename(
        imageLocalPath
      )}`

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await updatePrompt(task_id, imageUrl, 'SUCCESS')

      logger.info({
        message: 'üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
        description: 'Image saved successfully',
        task_id,
        imageUrl,
      })

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.telegram.sendPhoto(
          telegram_id,
          {
            source: fs.createReadStream(imageLocalPath),
          },
          {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }
        )

        logger.info({
          message: 'üì§ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          description: 'Image sent to user',
          task_id,
          telegram_id,
        })
      } catch (sendError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          description: 'Error sending image to user',
          error: sendError.message,
          task_id,
          telegram_id,
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ pulse
      try {
        await pulseNeuroImageV2(
          imageLocalPath,
          prompt,
          'neurophoto V2',
          telegram_id,
          username,
          is_ru
        )

        logger.info({
          message: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
          description: 'Analytics sent',
          task_id,
          telegram_id,
        })
      } catch (pulseError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
          description: 'Error sending analytics',
          error: pulseError.message,
          task_id,
          telegram_id,
        })
      }

      res.status(200).json({ message: 'Webhook processed successfully' })
    } else {
      const { telegram_id, language_code } = await updatePrompt(
        task_id,
        result?.sample || ''
      )
      const is_ru = language_code === 'ru'

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞',
        description: 'Webhook processing error',
        task_id,
        status,
        telegram_id,
      })

      try {
        await bot.telegram.sendMessage(telegram_id, `üö´ ${status}`, {
          reply_markup: {
            keyboard: [
              [{ text: '1Ô∏è‚É£' }, { text: '2Ô∏è‚É£' }, { text: '3Ô∏è‚É£' }, { text: '4Ô∏è‚É£' }],
              [
                { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
              ],
              [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
          },
        })
      } catch (sendError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
          description: 'Error sending error message',
          error: sendError.message,
          task_id,
          telegram_id,
        })
      }

      errorMessageAdmin(
        new Error(`üö´ Webhook received: ${JSON.stringify(req.body)}`)
      )
      res.status(200).json({ message: 'Webhook processed successfully' })
    }
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞',
      description: 'Critical error processing neurophoto webhook',
      error: error.message,
      stack: error.stack,
      request: req.body,
    })

    res.status(500).json({ error: 'Internal server error' })
  }
}

// –û—á–∏—Å—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(() => {
  if (processedTaskIds.size > 0) {
    processedTaskIds.clear()
    logger.info({
      message: 'üßπ –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
      description: 'Processed tasks cleared',
      count: processedTaskIds.size,
    })
  }
}, 24 * 60 * 60 * 1000)

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
 * –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
 */
export const handleWebhookNeurophotoDebug = async (
  req: Request,
  res: Response
) => {
  try {
    const payload = req.body

    logger.info({
      message: 'üîç –í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ (–û–¢–õ–ê–î–ö–ê)',
      description: 'Debug neurophoto webhook request',
      payload,
    })

    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return res.status(200).json({
      message: 'Webhook processed in debug mode',
      payload,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Error in debug neurophoto webhook handler',
      error: error.message,
      stack: error.stack,
    })

    return res
      .status(500)
      .json({ error: 'Internal server error in debug mode' })
  }
}
