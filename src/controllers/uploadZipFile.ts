import { Request, Response } from 'express'
import multer from 'multer'
import path from 'path'
import fs from 'fs'
import { v4 as uuidv4 } from 'uuid'
import { Logger as logger } from '@/utils/logger'
import { UPLOAD_DIR } from '@/config'
import { API_URL } from '@/config'
import { Readable } from 'stream'

// –¢–∏–ø—ã –¥–ª—è multer
interface MulterFile {
  fieldname: string
  originalname: string
  encoding: string
  mimetype: string
  size: number
  destination: string
  filename: string
  path: string
  buffer: Buffer
  stream: Readable
  lastModifiedDate?: Date
  hash?: string
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø Request –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç multer
interface MulterRequest extends Request {
  file?: MulterFile | undefined
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR, { recursive: true })
  logger.info({
    message: 'üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫',
    dir: UPLOAD_DIR,
  })
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è multer
const storage = multer.diskStorage({
  destination: function (_req, _file, cb) {
    cb(null, UPLOAD_DIR)
  },
  filename: function (_req, file, cb) {
    const uniqueSuffix = uuidv4()
    cb(null, `${uniqueSuffix}${path.extname(file.originalname)}`)
  },
})

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50 –ú–ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  },
  fileFilter: (_req, file, cb) => {
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ zip —Ñ–∞–π–ª—ã
    if (
      file.mimetype === 'application/zip' ||
      file.originalname.toLowerCase().endsWith('.zip')
    ) {
      cb(null, true)
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ ZIP —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'))
    }
  },
}).single('zipUrl')

export const uploadZipFile = async (req: Request, res: Response) => {
  try {
    logger.info({
      message: 'üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É zip —Ñ–∞–π–ª–∞',
      ip: req.ip,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secretKey = req.headers['x-secret-key']
    if (secretKey !== process.env.SECRET_API_KEY) {
      logger.warn({
        message: 'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á',
        ip: req.ip,
      })
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á' })
    }

    upload(req, res, function (err) {
      if (err) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
          error: err.message,
        })
        return res.status(400).json({ error: err.message })
      }

      const multerReq = req as MulterRequest

      if (!multerReq.file) {
        logger.error({
          message: '‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          ip: req.ip,
        })
        return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' })
      }

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
      const fileUrl = `${API_URL}/uploads/${multerReq.file.filename}`

      logger.info({
        message: '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        filename: multerReq.file.filename,
        size: multerReq.file.size,
        url: fileUrl,
      })

      return res.status(200).json({
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        zipUrl: fileUrl,
      })
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
