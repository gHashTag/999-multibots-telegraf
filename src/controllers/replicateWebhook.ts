import { Request, Response } from 'express'
import { logger } from '@/utils/logger'
import { inngest } from '@/core/inngest/clients'
import { updateLatestModelTraining, getTrainingWithUser } from '@/core/supabase'
import { NotificationService } from '@/services'

interface ReplicateWebhookPayload {
  id: string
  model: string
  version: string
  status: 'starting' | 'processing' | 'succeeded' | 'failed' | 'canceled'
  output?: {
    uri?: string
    version?: string
    weights?: string
    [key: string]: any
  }
  error?: string
  logs?: string
  metrics?: {
    predict_time?: number
    [key: string]: any
  }
  webhook_events_filter?: string[]
  metadata?: Record<string, any>
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationService = new NotificationService()

export const handleReplicateWebhook = async (req: Request, res: Response) => {
  try {
    const payload = req.body as ReplicateWebhookPayload

    logger.info({
      message: 'üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±-—Ö—É–∫ –æ—Ç Replicate',
      trainingId: payload.id,
      status: payload.status,
      model: payload.model,
      requestId: req.headers['x-request-id'],
    })

    // üîí –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!payload.id) {
      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-—Ö—É–∫–µ',
        payload: JSON.stringify(payload).substring(0, 500) + '...', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
      })
      return res.status(400).json({ error: 'Invalid webhook payload' })
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
      const training = await getTrainingWithUser(payload.id)

      if (!training || !training.users) {
        logger.error({
          message: '‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          trainingId: payload.id,
        })
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã Replicate –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        return res.status(200).json({
          success: false,
          message: 'Training not found in database, but webhook acknowledged',
        })
      }

      logger.info({
        message: '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        trainingId: payload.id,
        telegram_id: training.users.telegram_id,
        model_name: training.model_name,
        status: payload.status,
      })

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      const newStatus =
        payload.status === 'succeeded'
          ? 'SUCCESS'
          : payload.status === 'failed'
          ? 'FAILED'
          : payload.status === 'canceled'
          ? 'CANCELED'
          : 'PROCESSING'

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–µ
      await updateLatestModelTraining(
        training.users.telegram_id.toString(),
        training.model_name,
        {
          status: newStatus,
          output_url: payload.output?.uri || payload.output?.version || null,
          weights: payload.output?.weights || null,
          error: payload.error || null,
          replicate_training_id: payload.id,
        },
        'replicate'
      )

      logger.info({
        message: 'üìù –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        trainingId: payload.id,
        telegram_id: training.users.telegram_id,
        model_name: training.model_name,
        newStatus,
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      const terminalStatuses = ['succeeded', 'failed', 'canceled']
      const isTerminal = terminalStatuses.includes(payload.status)

      if (isTerminal) {
        try {
          const isSuccessful = payload.status === 'succeeded'
          const isRussian = training.users.language_code === 'ru'

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          await inngest.send({
            name: 'model-training/completed',
            data: {
              trainingId: payload.id,
              recordId: training.id,
              telegramId: training.users.telegram_id.toString(),
              modelName: training.model_name,
              status: payload.status,
              isSuccessful,
              isTerminal,
              output: payload.output,
              error: payload.error,
              botName: training.users.bot_name,
              metadata: payload.metadata || {},
            },
          })

          logger.info({
            message: 'üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest',
            event_name: 'model-training/completed',
            trainingId: payload.id,
            status: payload.status,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          if (isSuccessful) {
            await notificationService.sendSuccessNotification(
              training.users.telegram_id.toString(),
              training.users.bot_name,
              isRussian
            )
          } else if (payload.error) {
            await notificationService.sendTrainingError(
              training.users.telegram_id.toString(),
              training.users.bot_name,
              payload.error
            )
          }
        } catch (notificationError) {
          logger.error({
            message:
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            error: notificationError.message,
            trainingId: payload.id,
          })
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Replicate
      return res.status(200).json({
        success: true,
        message: 'Webhook processed successfully',
        trainingId: payload.id,
        status: newStatus,
      })
    } catch (dbError) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        error: dbError.message,
        stack: dbError.stack,
        trainingId: payload.id,
      })

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Replicate –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
      return res.status(200).json({
        success: false,
        message: 'Database error, but webhook acknowledged',
        error: dbError.message,
      })
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±-—Ö—É–∫–∞ Replicate',
      error: error.message,
      stack: error.stack,
      requestId: req.headers['x-request-id'],
    })

    // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    return res.status(200).json({
      success: false,
      message: 'Critical error but webhook acknowledged',
      requestId: req.headers['x-request-id'],
      timestamp: new Date().toISOString(),
    })
  }
}
