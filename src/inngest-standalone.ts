/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Inngest Connect –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
 */
import { connect } from 'inngest/connect'
import { serve } from 'inngest/node'
import { logger } from './utils/logger'
import 'dotenv/config'
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø—É—Ç–∏ –∏–∑ tsconfig
require('tsconfig-paths/register')

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Inngest –Ω–∞–ø—Ä—è–º—É—é
const inngest = serve({
  id: 'neuro-blogger-2.0',
  eventKey: process.env.INNGEST_EVENT_KEY || 'dev-key',
  logger: logger,
})

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Inngest
const testFunction = inngest.createFunction(
  { id: 'test-function', name: 'Test Function' },
  { event: 'test/event' },
  async ({ event, step }) => {
    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞',
      description: 'Test function called',
      event,
      timestamp: new Date().toISOString(),
    })
    return { success: true }
  }
)

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const testConnection = inngest.createFunction(
  { id: 'test-connection', name: 'Test Connection' },
  { cron: '*/5 * * * *' }, // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  async ({ step }) => {
    logger.info({
      message: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Inngest',
      description: 'Inngest connection check',
      timestamp: new Date().toISOString(),
    })
    return { timestamp: new Date().toISOString() }
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
const neuroPhotoFunction = inngest.createFunction(
  { id: 'neurophoto-standalone', name: 'Neurophoto Standalone' },
  { event: 'neuro/photo-v2.generate' },
  async ({ event, step }) => {
    logger.info({
      message: 'üé® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Neurophoto generation request received',
      event_data: event.data,
      timestamp: new Date().toISOString(),
    })
    return { success: true }
  }
)

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Inngest Connect
 */
async function startInngestStandalone() {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ Inngest Connect',
      description: 'Starting standalone Inngest Connect',
      timestamp: new Date().toISOString(),
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const connection = await connect({
      apps: [
        {
          client: inngest,
          functions: [testFunction, testConnection, neuroPhotoFunction],
        },
      ],
      instanceId: `neuro-blogger-standalone-${process.pid}`,
      handleShutdownSignals: ['SIGTERM', 'SIGINT'],
    })

    logger.info({
      message: `‚úÖ Inngest Connect —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${connection.state}`,
      description: 'Inngest Connect connection established',
      state: connection.state,
      timestamp: new Date().toISOString(),
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    setTimeout(async () => {
      try {
        await inngest.send({
          name: 'test/event',
          data: {
            message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
            timestamp: new Date().toISOString(),
          },
        })

        logger.info({
          message: 'üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          description: 'Test event sent',
          timestamp: new Date().toISOString(),
        })
      } catch (error) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
          description: 'Error sending test event',
          error: error instanceof Error ? error.message : 'Unknown error',
          timestamp: new Date().toISOString(),
        })
      }
    }, 3000)

    // –û–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await connection.closed
    logger.info({
      message: 'üëã Inngest Connect —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ',
      description: 'Inngest Connect connection closed',
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Inngest Connect',
      description: 'Error starting Inngest Connect',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString(),
    })
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
if (require.main === module) {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ Inngest Connect –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ',
    description: 'Starting Inngest Connect in standalone mode',
    timestamp: new Date().toISOString(),
  })

  startInngestStandalone()
}

export { startInngestStandalone }
