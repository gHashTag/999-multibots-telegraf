// src/__tests__/services/generateImageToVideo/common-scenarios.test.ts

import { describe, it, expect, beforeEach, afterEach, Mock, vi } from 'vitest'
// –ò—Å–ø–æ–ª—å–∑—É–µ–º generateImageToVideoIsolated –∏ —Ç–∏–ø—ã
import {
  generateImageToVideo,
  type VideoModelConfig,
} from '@/modules/videoGenerator'
import { logger } from '@/utils/logger'
import * as downloadHelper from '@/helpers/downloadFile'
import * as supabaseUserHelper from '@/core/supabase/getUserByTelegramId'
import * as botHelper from '@/core/bot'
import * as priceHelper from '@/price/helpers'
import * as supabaseSaveHelper from '@/core/supabase/saveVideoUrlToSupabase'
import * as errorHelper from '@/helpers/error/errorMessageAdmin'
import { replicate } from '@/core/replicate'
import { BalanceOperationResult, MyContext } from '@/interfaces'
import { calculateFinalPrice } from '@/price/helpers/calculateFinalPrice'
import {
  createMockContext,
  createMockUser,
  setupSpies,
  teardownSpies,
  MOCK_VIDEO_MODELS_CONFIG,
} from './helpers'
import * as ConfigModule from '@/modules/videoGenerator/config/models.config'
import fsPromises from 'fs/promises'
import { Telegraf } from 'telegraf'
import * as generateVideoHelpers from '../helpers' // Import the local helpers module

// Mock the local helpers module
vi.mock('../helpers', async importOriginal => {
  const actual = await importOriginal<typeof generateVideoHelpers>()
  return {
    ...actual,
    getUserHelper: vi.fn(),
    processBalanceVideoOperationHelper: vi.fn(),
    saveVideoUrlHelper: vi.fn(),
    updateUserLevelHelper: vi.fn(),
    downloadFileHelper: vi.fn(),
  }
})

// Cast the mocked module for easier use
const mockedHelpers = generateVideoHelpers as Mocked<
  typeof generateVideoHelpers
>

// --- Test Data ---
const telegram_id = '12345'
const username = 'testuser'
const bot_name = 'test_bot'
const is_ru = false
const videoModel = 'stable-video-diffusion' // Use a valid key from MOCK_VIDEO_MODELS_CONFIG
const imageUrl = 'http://example.com/image.jpg'
const prompt = 'Test prompt'

// --- Test Suite ---
describe('generateImageToVideo Service: –û–±—â–∏–µ –°—Ü–µ–Ω–∞—Ä–∏–∏', () => {
  let ctx: MyContext
  let mockSendMessage: Mock
  let mockSendVideo: Mock
  // Declare necessary spies for external modules
  let getUserByTelegramIdSpy: MockInstance
  let getBotByNameSpy: MockInstance
  let replicateRunSpy: MockInstance
  let saveVideoUrlToSupabaseSpy: MockInstance
  let errorMessageAdminSpy: MockInstance

  beforeEach(async () => {
    vi.resetAllMocks()
    vi.spyOn(ConfigModule, 'VIDEO_MODELS_CONFIG', 'get').mockReturnValue(
      MOCK_VIDEO_MODELS_CONFIG
    )
    const {
      ctx: mockCtx,
      mockSendMessage: msgSpy,
      mockSendVideo: vidSpy,
    } = createMockContext(telegram_id)
    ctx = mockCtx
    mockSendMessage = msgSpy
    mockSendVideo = vidSpy

    // Create spies for external modules
    getUserByTelegramIdSpy = vi.spyOn(supabaseUserHelper, 'getUserByTelegramId')
    getBotByNameSpy = vi.spyOn(botHelper, 'getBotByName')
    replicateRunSpy = vi.spyOn(replicate, 'run')
    saveVideoUrlToSupabaseSpy = vi.spyOn(
      supabaseSaveHelper,
      'saveVideoUrlToSupabase'
    )
    errorMessageAdminSpy = vi.spyOn(errorHelper, 'errorMessageAdmin')

    // Default successful resolutions using MOCKED helpers and external spies
    const defaultUser = createMockUser(telegram_id, 200000)
    mockedHelpers.getUserHelper.mockResolvedValue(defaultUser)

    const fakeBotInstance = { telegram: ctx.telegram }
    getBotByNameSpy.mockResolvedValue({
      bot: fakeBotInstance as any,
      error: null,
    } as any)

    mockedHelpers.processBalanceVideoOperationHelper.mockResolvedValue({
      success: true,
      newBalance: 199999,
      paymentAmount: 1,
      modePrice: 10, // Default price for setup
    })

    replicateRunSpy.mockResolvedValue(['http://replicate.com/success.mp4'])
    mockedHelpers.downloadFileHelper.mockResolvedValue(
      Buffer.from('fake success data')
    )
    mockedHelpers.saveVideoUrlHelper.mockResolvedValue(undefined)

    errorMessageAdminSpy.mockImplementation(() => {}) // Should not be called by default
    mockedHelpers.updateUserLevelHelper.mockResolvedValue(undefined)
  })

  afterEach(() => {
    // Restore external spies
    getUserByTelegramIdSpy?.mockRestore()
    getBotByNameSpy.mockRestore()
    replicateRunSpy.mockRestore()
    saveVideoUrlToSupabaseSpy?.mockRestore()
    errorMessageAdminSpy.mockRestore()
    vi.restoreAllMocks()
  })

  // --- –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã ---
  it('‚úÖ [–ö–µ–π—Å 3.1] –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º)', async () => {
    const fakeVideoUrl = 'http://replicate.com/success.mp4'
    replicateRunSpy.mockResolvedValueOnce([fakeVideoUrl]) // Ensure correct mock for this test if needed

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false, // isMorphing
      null, // imageAUrl
      null, // imageBUrl
      ctx.telegram, // Pass mock instance
      Number(telegram_id) // Pass chat id
    )

    // --- –ü–†–û–í–ï–†–ö–ò —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤ ---
    expect(mockedHelpers.getUserHelper).toHaveBeenCalledTimes(1)
    expect(
      mockedHelpers.processBalanceVideoOperationHelper
    ).toHaveBeenCalledTimes(1)
    expect(replicateRunSpy).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.downloadFileHelper).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.saveVideoUrlHelper).toHaveBeenCalledTimes(1)
    // expect(getBotByNameSpy).toHaveBeenCalledWith(bot_name); // Spy check if needed
    expect(mockSendVideo).toHaveBeenCalledTimes(1)
    // Check caption content based on mocked balance result
    const expectedCaption = is_ru
      ? `‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ (Stable Video Diffusion) –≥–æ—Ç–æ–≤–æ!\nüí∞ –°–ø–∏—Å–∞–Ω–æ: 1 ‚ú®\nüíé –û—Å—Ç–∞—Ç–æ–∫: 199999 ‚ú®`
      : `‚ú® Your video (Stable Video Diffusion) is ready!\nüí∞ Cost: 1 ‚ú®\nüíé Balance: 199999 ‚ú®`
    expect(mockSendVideo).toHaveBeenCalledWith(
      Number(telegram_id),
      { source: expect.stringContaining('.mp4') },
      { caption: expectedCaption }
    )
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
  })

  // --- –ö–µ–π—Å—ã –æ—à–∏–±–æ–∫ (–æ–±—â–∏–µ) ---
  it('‚úÖ [–ö–µ–π—Å 3.1] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API Replicate', async () => {
    const replicateError = new Error('Replicate Failed')
    // –ë–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–µ–Ω (–∏–∑ beforeEach)
    replicateRunSpy.mockRejectedValueOnce(replicateError)
    errorMessageAdminSpy.mockImplementationOnce(() => {}) // Expect it to be called

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false, // isMorphing
      null, // imageAUrl
      null, // imageBUrl
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining('‚ùå Video generation error: Replicate Failed') // Check specific error message
    )
    expect(mockedHelpers.getUserHelper).toHaveBeenCalledTimes(1)
    expect(
      mockedHelpers.processBalanceVideoOperationHelper
    ).toHaveBeenCalledTimes(1)
    expect(replicateRunSpy).toHaveBeenCalledTimes(1) // –í—ã–∑–≤–∞–ª–∏, –Ω–æ —É–ø–∞–ª
    expect(mockedHelpers.downloadFileHelper).not.toHaveBeenCalled()
    expect(mockedHelpers.saveVideoUrlHelper).not.toHaveBeenCalled()
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  it('‚úÖ [–ö–µ–π—Å 3.2] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –≤–∏–¥–µ–æ (null)', async () => {
    replicateRunSpy.mockResolvedValue(null) // Replicate returns null
    errorMessageAdminSpy.mockImplementationOnce(() => {})

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false, // isMorphing
      null, // imageAUrl
      null, // imageBUrl
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining('Failed to get video URL from Replicate')
    )
    expect(replicateRunSpy).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.downloadFileHelper).not.toHaveBeenCalled()
    expect(mockedHelpers.saveVideoUrlHelper).not.toHaveBeenCalled()
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  it('‚úÖ [–ö–µ–π—Å 3.2] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –≤–∏–¥–µ–æ (–Ω–µ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)', async () => {
    replicateRunSpy.mockResolvedValue({ output: 123 }) // Invalid format
    errorMessageAdminSpy.mockImplementationOnce(() => {})

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false, // isMorphing
      null, // imageAUrl
      null, // imageBUrl
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining('Failed to get video URL from Replicate')
    )
    expect(replicateRunSpy).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.downloadFileHelper).not.toHaveBeenCalled()
    expect(mockedHelpers.saveVideoUrlHelper).not.toHaveBeenCalled()
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  it('‚úÖ [–ö–µ–π—Å 3.3] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (saveVideoUrlToSupabase)', async () => {
    const dbSaveError = new Error('DB Save Error')
    const fakeVideoUrl = 'http://replicate.com/db_fail.mp4'
    // –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    replicateRunSpy.mockResolvedValueOnce([fakeVideoUrl])
    mockedHelpers.downloadFileHelper.mockResolvedValueOnce(
      Buffer.from('fake video data')
    )
    // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    mockedHelpers.saveVideoUrlHelper.mockRejectedValueOnce(dbSaveError)
    errorMessageAdminSpy.mockImplementationOnce(() => {})

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false, // isMorphing
      null, // imageAUrl
      null, // imageBUrl
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining('‚ùå Video generation error: DB Save Error') // Check error message
    )
    expect(replicateRunSpy).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.downloadFileHelper).toHaveBeenCalledWith(fakeVideoUrl)
    expect(mockedHelpers.saveVideoUrlHelper).toHaveBeenCalledTimes(1) // –í—ã–∑–≤–∞–ª–∏, –Ω–æ —É–ø–∞–ª
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ updateUserLevel --- (–ê–¥–∞–ø—Ç–∞—Ü–∏—è expect)
  it('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω 8', async () => {
    const userLevel8 = createMockUser(telegram_id, 200000, 8)
    mockedHelpers.getUserHelper.mockResolvedValueOnce(userLevel8)
    // mockedHelpers.updateUserLevelHelper.mockResolvedValueOnce(undefined); // Already default

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false,
      null,
      null,
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockedHelpers.getUserHelper).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.updateUserLevelHelper).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.updateUserLevelHelper).toHaveBeenCalledWith(
      telegram_id
    )
  })

  it('‚úÖ –ù–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω 8', async () => {
    const userLevel7 = createMockUser(telegram_id, 200000, 7)
    mockedHelpers.getUserHelper.mockResolvedValueOnce(userLevel7)

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false,
      null,
      null,
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockedHelpers.getUserHelper).toHaveBeenCalledTimes(1)
    expect(mockedHelpers.updateUserLevelHelper).not.toHaveBeenCalled()
  })

  // --- –î—Ä—É–≥–∏–µ –∫–µ–π—Å—ã –æ—à–∏–±–æ–∫ --- (–ê–¥–∞–ø—Ç–∞—Ü–∏—è expect)
  it('‚úÖ [–ö–µ–π—Å 3.7] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î', async () => {
    const userNotFoundError = new Error(
      `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    )
    // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É getUserHelper
    mockedHelpers.getUserHelper.mockRejectedValueOnce(userNotFoundError)
    errorMessageAdminSpy.mockImplementationOnce(() => {})

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      videoModel,
      imageUrl,
      prompt,
      false,
      null,
      null,
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining(
        `‚ùå Video generation error: –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
      )
    )
    expect(mockedHelpers.getUserHelper).toHaveBeenCalledTimes(1)
    expect(
      mockedHelpers.processBalanceVideoOperationHelper
    ).not.toHaveBeenCalled()
    expect(replicateRunSpy).not.toHaveBeenCalled()
    expect(errorMessageAdminSpy).not.toHaveBeenCalled()
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  it('‚úÖ [–ö–µ–π—Å 3.8] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ', async () => {
    const nonExistentModel = 'non-existent-model'

    await generateImageToVideo(
      telegram_id,
      username,
      is_ru,
      bot_name,
      nonExistentModel,
      imageUrl,
      prompt,
      false,
      null,
      null,
      ctx.telegram,
      Number(telegram_id)
    )

    expect(mockSendMessage).toHaveBeenCalledWith(
      Number(telegram_id),
      expect.stringContaining(
        `Configuration for model ${nonExistentModel} not found`
      )
    )
    expect(mockedHelpers.getUserHelper).not.toHaveBeenCalled()
    expect(
      mockedHelpers.processBalanceVideoOperationHelper
    ).not.toHaveBeenCalled()
    expect(replicateRunSpy).not.toHaveBeenCalled()
    expect(errorMessageAdminSpy).not.toHaveBeenCalled() // Error handled before main try-catch
    expect(mockSendVideo).not.toHaveBeenCalled()
  })

  // –£–¥–∞–ª–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ö–µ–π—Å–æ–≤ 3.9

  // Helper test to demonstrate calculateFinalPrice usage if needed
  it('–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º calculateFinalPrice', () => {
    const price = calculateFinalPrice(videoModel) // Use a valid model key
    expect(price).toBeGreaterThan(0)
    logger.info('calculateFinalPrice result for testing:', { price })
  })
})
