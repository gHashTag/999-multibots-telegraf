import { mkdir, writeFile } from 'fs/promises'
import path from 'path'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import {
  VIDEO_MODELS_CONFIG,
  type VideoModelConfig,
} from '@/modules/videoGenerator/config/models.config'
import { logger } from '@/utils/logger'
import { replicate } from '@/core/replicate'
import {
  downloadFileHelper,
  getUserHelper,
  processBalanceVideoOperationHelper,
  saveVideoUrlHelper,
  updateUserLevelHelper,
} from './helpers'
import { VIDEO_MODELS } from './config/videoModels'

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –º–æ—Ä—Ñ–∏–Ω–≥–∞.
 * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param username –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param isRu –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
 * @param botName –ò–º—è –±–æ—Ç–∞
 * @param videoModel –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * @param prompt –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
 * @param isMorphing –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –º–æ—Ä—Ñ–∏–Ω–≥–∞
 * @param imageAUrl URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
 * @param imageBUrl URL –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
 * @param telegram Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param dependencies –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 */
export async function generateImageToVideo(
  telegramId: string,
  username: string,
  isRu: boolean,
  botName: string,
  videoModel: string,
  imageUrl: string | null,
  prompt: string | null,
  isMorphing: boolean,
  imageAUrl: string | null,
  imageBUrl: string | null,
  telegram: Telegraf<MyContext>['telegram'],
  chatId: number,
  dependencies: any
): Promise<void> {
  try {
    logger.info('[generateImageToVideo] Starting video generation', {
      telegramId,
      videoModel,
      isMorphing,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–∂–∏–º–∞
    if (!(videoModel in VIDEO_MODELS)) {
      throw new Error(`Unsupported video model: ${videoModel}`)
    }
    const modelConfig = VIDEO_MODELS[videoModel]
    if (isMorphing && !modelConfig.canMorph) {
      throw new Error(`Model ${modelConfig.name} does not support morphing`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (isMorphing) {
      if (!imageAUrl || !imageBUrl) {
        throw new Error('Both Image A and Image B are required for morphing')
      }
    } else {
      if (!imageUrl) {
        throw new Error('Image URL is required for standard video generation')
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await telegram.sendMessage(
      chatId,
      isRu ? 'üïí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å...' : 'üïí Video generation started...'
    )

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Replicate)
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    const videoUrl = 'mocked_video_url'
    const videoPath = '/mocked/path/to/video.mp4'

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const caption = isRu
      ? `–í–∞—à–µ –≤–∏–¥–µ–æ (${modelConfig.name}) –≥–æ—Ç–æ–≤–æ!`
      : `Your video (${modelConfig.name}) is ready!`
    await telegram.sendVideo(chatId, { source: videoPath }, { caption })

    logger.info('[generateImageToVideo] Video generation completed', {
      telegramId,
      videoModel,
      isMorphing,
    })
  } catch (error) {
    logger.error('[generateImageToVideo] Error during video generation', {
      error,
      telegramId,
      videoModel,
      isMorphing,
    })
    const errorMessage = isRu
      ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.'
      : '‚ùå Error during video generation.'
    await telegram.sendMessage(chatId, errorMessage)
    throw error
  }
}
