import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ü–µ–Ω—ã Telegram
 */
export interface TelegramSceneAdapter {
  onGenerationStart: (chatId: number, isRu: boolean) => Promise<void>
  onGenerationComplete: (
    chatId: number,
    isRu: boolean,
    videoPath: string,
    caption: string
  ) => Promise<void>
  onError: (
    chatId: number,
    isRu: boolean,
    errorMessage: string
  ) => Promise<void>
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
 * @param telegramInstance –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @returns –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ü–µ–Ω—ã Telegram
 */
export function createTelegramSceneAdapter(
  telegramInstance: Telegraf<MyContext>
): TelegramSceneAdapter {
  return {
    onGenerationStart: async (chatId: number, isRu: boolean) => {
      const text = isRu
        ? 'üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
        : 'üé• Video generation started. Please wait...'
      await (telegramInstance as any).sendMessage(chatId, text)
      logger.info('[Telegram Adapter] Generation started notification sent', {
        chatId,
      })
    },
    onGenerationComplete: async (
      chatId: number,
      isRu: boolean,
      videoPath: string,
      caption: string
    ) => {
      await (telegramInstance as any).sendVideo(
        chatId,
        { source: videoPath },
        { caption }
      )
      logger.info('[Telegram Adapter] Video sent to user', {
        chatId,
        videoPath,
      })
    },
    onError: async (chatId: number, isRu: boolean, errorMessage: string) => {
      const text = isRu
        ? `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${errorMessage}`
        : `‚ùå Error during video generation: ${errorMessage}`
      await (telegramInstance as any).sendMessage(chatId, text)
      logger.error('[Telegram Adapter] Error notification sent', {
        chatId,
        errorMessage,
      })
    },
  }
}
