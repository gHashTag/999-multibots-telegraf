import type {
  GenerateSpeechDependencies,
  GenerateSpeechRequest,
  GenerateSpeechResponse,
} from './types'
import { ModeEnum } from '@/interfaces/modes' // –ù—É–∂–Ω–æ –¥–ª—è priceCalculator
import type { InputFile } from 'telegraf/typings/core/types/typegram' // –ù—É–∂–Ω–æ –¥–ª—è sendAudio

export const generateSpeech = async (
  request: GenerateSpeechRequest,
  dependencies: GenerateSpeechDependencies
): Promise<GenerateSpeechResponse> => {
  const { text, voice_id, telegram_id, is_ru, bot_name } = request
  const {
    logger,
    elevenlabs,
    fs,
    path,
    os,
    supabase,
    errorHandlers,
    priceCalculator,
    balanceProcessor,
    telegramApiProvider,
    helpers,
    elevenlabsApiKey,
  } = dependencies

  logger.info('–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏', { ...request })

  try {
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
    const validBotName = helpers.toBotName(bot_name)
    if (!validBotName) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞.')
    }

    const userExists = await supabase.getUserByTelegramIdString(telegram_id)
    if (!userExists) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const level = userExists.level
    if (level === 7) {
      await supabase.updateUserLevelPlusOne(telegram_id, level)
      logger.info('–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', { telegram_id, newLevel: 8 })
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const costResult = priceCalculator(ModeEnum.TextToSpeech)
    if (!costResult) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è TextToSpeech.')
    }
    const paymentAmount = costResult.stars
    logger.info('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞', { telegram_id, paymentAmount })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const balanceCheck = await balanceProcessor({
      telegram_id: Number(telegram_id),
      paymentAmount,
      is_ru,
      // TODO: –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ processBalanceOperation –∏–∑–º–µ–Ω–∏–ª—Å—è
    })

    if (!balanceCheck.success || !balanceCheck.newBalance) {
      throw new Error(
        balanceCheck.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.'
      )
    }
    logger.info('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–ø–∏—Å–∞–Ω', {
      telegram_id,
      newBalance: balanceCheck.newBalance,
    })

    if (!elevenlabsApiKey) {
      throw new Error('API –∫–ª—é—á ElevenLabs –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram API
    const telegram = await telegramApiProvider.getTelegramApi(validBotName)
    if (!telegram) {
      throw new Error(
        `–ò–Ω—Å—Ç–∞–Ω—Å Telegram API –¥–ª—è –±–æ—Ç–∞ ${validBotName} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
      )
    }

    // --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ API –∏ –ø–æ—Ç–æ–∫–æ–≤ ---
    await telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...' : '‚è≥ Generating audio...'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', { telegram_id })

    const audioStream = await elevenlabs.generate({
      voice: voice_id,
      model_id: 'eleven_turbo_v2_5',
      text,
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: API –∫–ª—é—á –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ elevenlabs,
      // –Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç, –µ–≥–æ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ.
    })
    logger.info('–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Ç ElevenLabs', { telegram_id })

    // --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ---
    const audioPath = path.join(os.tmpdir(), `audio_${Date.now()}.mp3`)
    const writeStream = fs.createWriteStream(audioPath)
    logger.info('–°–æ–∑–¥–∞–Ω –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞', { audioPath })

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    await new Promise<void>((resolve, reject) => {
      writeStream.on('finish', async () => {
        logger.info('–ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { audioPath })
        try {
          // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const audio: InputFile = { source: audioPath } // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
          await telegram.sendAudio(telegram_id, audio, {
            reply_markup: {
              keyboard: [
                [
                  { text: is_ru ? 'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å' : 'üéôÔ∏è Text to Speech' },
                  { text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' },
                ],
              ],
              resize_keyboard: true, // –û–±—ã—á–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–∞–∫–∏—Ö –º–µ–Ω—é
            },
          })
          logger.info('–ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { telegram_id })

          await telegram.sendMessage(
            telegram_id,
            is_ru
              ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${balanceCheck.newBalance?.toFixed(2)} ‚≠êÔ∏è`
              : `Cost: ${paymentAmount.toFixed(2)} ‚≠êÔ∏è\nYour balance: ${balanceCheck.newBalance?.toFixed(2)} ‚≠êÔ∏è`
          )
          logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
            telegram_id,
          })

          resolve() // –ü—Ä–æ–º–∏—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω
        } catch (sendError) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ/—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏', {
            telegram_id,
            error:
              sendError instanceof Error
                ? sendError.message
                : String(sendError),
          })
          try {
            await errorHandlers.sendServiceErrorToAdmin(
              validBotName,
              telegram_id,
              sendError as Error
            )
          } catch (adminError) {
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É', { adminError })
          }
          reject(sendError) // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å
        }
      })

      writeStream.on('error', async error => {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞', {
          audioPath,
          error: error.message,
        })
        try {
          await errorHandlers.sendServiceErrorToUser(
            validBotName,
            telegram_id,
            error,
            is_ru
          )
          await errorHandlers.sendServiceErrorToAdmin(
            validBotName,
            telegram_id,
            error
          )
        } catch (notifyError) {
          logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏', {
            notifyError,
          })
        }
        reject(error) // –ü—Ä–æ–º–∏—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
      audioStream.pipe(writeStream)
      logger.info('–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞', { audioPath })
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    return { audioPath }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ generateSpeech', {
      ...(error instanceof Error
        ? { error: error.message, stack: error.stack }
        : { error }),
      ...request,
    })
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
    try {
      const validBotName = helpers.toBotName(bot_name) ?? 'unknown_bot' // Fallback
      await errorHandlers.sendServiceErrorToUser(
        validBotName,
        telegram_id,
        error as Error,
        is_ru
      )
      await errorHandlers.sendServiceErrorToAdmin(
        validBotName,
        telegram_id,
        error as Error
      )
    } catch (notifyError) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ catch',
        {
          notifyError,
        }
      )
    }
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –∑–Ω–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–µ
    throw error
  }
}
