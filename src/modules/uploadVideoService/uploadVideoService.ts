import type {
  UploadVideoServiceDependencies,
  UploadVideoServiceRequest,
  UploadVideoServiceResponse,
} from './types'

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ VideoService.
 * @param requestData –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ.
 * @param dependencies –í–Ω–µ–¥—Ä–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (logger, videoService).
 * @returns –û–±—ä–µ–∫—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ.
 */
export const uploadVideoService = async (
  requestData: UploadVideoServiceRequest,
  dependencies: UploadVideoServiceDependencies
): Promise<UploadVideoServiceResponse> => {
  const { logger, videoService } = dependencies
  const { videoUrl, telegram_id, fileName } = requestData

  logger.info('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å):', {
    videoUrl,
    telegram_id,
    fileName,
  })

  try {
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ processVideo –∏–∑ –≤–Ω–µ–¥—Ä–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ videoService
    const localPath = await videoService.processVideo(
      videoUrl,
      telegram_id,
      fileName
    )

    logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å):', {
      localPath,
    })

    return { localPath }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å):', {
      error: error instanceof Error ? error.message : String(error),
      requestData,
    })
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –æ–±–µ—Ä—Ç–∫—É –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å
    throw new Error(
      `Failed to process video locally via module: ${error instanceof Error ? error.message : String(error)}`
    )
  }
}
