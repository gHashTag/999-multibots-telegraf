import { logger } from '../utils/logger'
// import { User } from '@/interfaces/user.interface' // REMOVED: No longer used
import {
  type ReplicateTrainingResponse as Training,
  TrainingStatus,
} from '../types' // CHANGED: Using local ReplicateTrainingResponse aliased as Training and added TrainingStatus import
import { PaymentType } from '../types' // CHANGED: Using local PaymentType
import { getDigitalAvatarBodyConfig } from '../config'
import { sendTelegramMessageFromWorker } from '@/utils/telegramHelpers'
import { getReplicateClient } from '../utils/replicateClient'
import {
  updateDigitalAvatarTraining,
  setDigitalAvatarTrainingError,
} from './modelTrainingsDb'
import {
  getDigitalAvatarUserProfile,
  updateUserNeuroTokens,
  DigitalAvatarUserProfile,
} from './userProfileDb'
import { Prediction, Page, WebhookEventType } from 'replicate' // Removed ReplicateError

interface ReplicateModelResponseForHelper {
  latest_version?: {
    id: string
  }
}

// Localized messages (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)
export const TRAINING_MESSAGES = {
  start: {
    ru: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
    en: 'üîç Starting model training...',
  },
  success: (modelName: string) => ({
    ru: `üéâ –ú–æ–¥–µ–ª—å ${modelName} –≥–æ—Ç–æ–≤–∞!`,
    en: `üéâ Model ${modelName} ready!`,
  }),
  error: (error: string) => ({
    ru: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
    en: `‚ùå Error: ${error}`,
  }),
  duplicateRequest: {
    ru: '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    en: '‚ö†Ô∏è Your training request is already processing. Please wait...',
  },
}

/**
 * –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–ª—É—á–∞–µ–º–∞—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.
 */
export interface PreparedTrainingData {
  user: DigitalAvatarUserProfile
  currentBalance: number
  costInStars: number
  publicUrl: string
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –±–∞–ª–∞–Ω—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 * @param telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
 * @param archivePublicUrl - –ü–£–ë–õ–ò–ß–ù–´–ô URL –∫ –∞—Ä—Ö–∏–≤—É –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å Pinata).
 * @param modelName - –ò–º—è –º–æ–¥–µ–ª–∏.
 * @param triggerWord - –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ.
 * @param isRu - –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö).
 * @param botName - –ò–º—è –±–æ—Ç–∞.
 * @param paymentOperationType - –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞.
 * @param costForTraining - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
 * @returns –û–±—ä–µ–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –±–∞–ª–∞–Ω—Å–æ–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ –ø—É–±–ª–∏—á–Ω—ã–º URL, –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
export const validateAndPrepareTrainingRequest = async (
  telegramId: number,
  zipUrl: string, // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –ø—É–±–ª–∏—á–Ω—ã–π URL
  modelName: string,
  triggerWord: string | undefined,
  isRu: boolean,
  botName: string,
  paymentOperationType: PaymentType,
  costForTraining: number // –°—Ç–æ–∏–º–æ—Å—Ç—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
): Promise<PreparedTrainingData | null> => {
  const user = await getDigitalAvatarUserProfile(String(telegramId))

  if (!user) {
    logger.warn('User not found for training request', { telegramId })
    await sendTelegramMessageFromWorker(
      String(telegramId), // Corrected
      TRAINING_MESSAGES.error(
        isRu ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' : 'User not found'
      )[isRu ? 'ru' : 'en'],
      botName
    )
    return null
  }

  if (!user.replicate_username) {
    logger.warn('User replicate_username is missing', { telegramId })
    await sendTelegramMessageFromWorker(
      String(telegramId), // Corrected
      TRAINING_MESSAGES.error(
        isRu
          ? '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Replicate'
          : "User's Replicate username is missing"
      )[isRu ? 'ru' : 'en'],
      botName
    )
    return null
  }
  if (!user.api) {
    logger.warn('User replicate_api (user.api) is missing', { telegramId })
    await sendTelegramMessageFromWorker(
      String(telegramId), // Corrected
      TRAINING_MESSAGES.error(
        isRu
          ? '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á Replicate'
          : "User's Replicate API key is missing"
      )[isRu ? 'ru' : 'en'],
      botName
    )
    return null
  }

  const currentBalance = user.neuro_tokens || 0
  if (currentBalance < costForTraining) {
    logger.warn('Insufficient balance for training', {
      telegramId,
      currentBalance,
      costForTraining,
    })
    await sendTelegramMessageFromWorker(
      String(telegramId), // Corrected
      TRAINING_MESSAGES.error(
        isRu
          ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (${currentBalance} < ${costForTraining})`
          : `Insufficient funds (${currentBalance} < ${costForTraining})`
      )[isRu ? 'ru' : 'en'],
      botName
    )
    return null
  }

  // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
  const paymentSuccess = await updateUserNeuroTokens(
    user.id, // Use user.id (string, UUID)
    costForTraining, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    String(paymentOperationType) // New argument
  )
  if (!paymentSuccess) {
    logger.error('Payment failed during training preparation', {
      telegramId,
      userId: user.id,
    })
    await sendTelegramMessageFromWorker(
      String(telegramId), // Corrected
      TRAINING_MESSAGES.error(isRu ? '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã' : 'Payment failed')[
        isRu ? 'ru' : 'en'
      ],
      botName
    )
    return null
  }

  return {
    user,
    currentBalance, // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
    costInStars: costForTraining,
    publicUrl: zipUrl,
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è ID –∑–∞–ø–∏—Å–∏.
 * @param trainingId - ID –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ë–î.
 * @param error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
 */
export async function updateTrainingRecordOnError(
  trainingId: string, // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–∏–Ω–∏–º–∞–µ–º ID –∑–∞–ø–∏—Å–∏
  error: string
): Promise<void> {
  try {
    // const updateResult = await setLatestDigitalAvatarTrainingToError( // –°—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤
    //   userId,
    //   modelName,
    //   error
    // )
    const updateResult = await setDigitalAvatarTrainingError(trainingId, error) // –ù–æ–≤—ã–π –≤—ã–∑–æ–≤

    if (!updateResult) {
      logger.error(
        '[DB Error Handling] Failed to update training record on error using specific ID',
        {
          trainingId, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–≥–∞
          originalError: error,
        }
      )
    } else {
      logger.info(
        '[DB Update via Helper] Training record updated to ERROR for specific ID',
        {
          trainingId, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–≥–∞
          error,
        }
      )
    }
  } catch (dbError: any) {
    logger.error(
      '[DB Exception Catch] Exception during updateTrainingRecordOnError (using specific ID)',
      {
        trainingId, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–≥–∞
        originalError: error,
        exceptionMessage: dbError.message,
      }
    )
  }
}

// Helper to map Replicate SDK's Prediction status to our internal TrainingStatus
const mapReplicateStatusToTrainingStatus = (
  replicateStatus: Prediction['status']
): TrainingStatus => {
  switch (replicateStatus) {
    case 'starting':
    case 'processing':
      return 'PROCESSING'
    case 'succeeded':
      return 'SUCCEEDED'
    case 'failed':
      return 'FAILED'
    case 'canceled':
      return 'CANCELED'
    default:
      logger.warn(`Unknown Replicate status received: ${replicateStatus}`)
      return 'FAILED' // Default to FAILED for unknown statuses
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ –Ω–∞ Replicate.
 * @param user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param modelName - –ò–º—è –º–æ–¥–µ–ª–∏.
 * @param zipUrl - –ü—É–±–ª–∏—á–Ω—ã–π URL –∞—Ä—Ö–∏–≤–∞.
 * @param triggerWord - –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ.
 * @param stepsFromCaller - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ).
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ Replicate.
 */
export async function startReplicateTraining(
  user: DigitalAvatarUserProfile,
  modelName: string,
  zipUrl: string,
  triggerWord: string,
  stepsFromCaller?: number // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
): Promise<Prediction> {
  const config = getDigitalAvatarBodyConfig()
  const replicate = getReplicateClient()

  const destinationModel = formatReplicateModelName(
    user.replicate_username || config.replicateUsername, // Use user's replicate_username first, then config
    modelName
  )

  const effectiveSteps = stepsFromCaller || config.replicateDefaultSteps || 1500
  // instanceClass is not directly used by replicate.trainings.create in this way.
  // It's part of the input to the trainer model itself.
  // const instanceClass = triggerWord

  const webhookUrl = config.apiUrl
    ? `${config.apiUrl}/replicate-webhook`
    : undefined
  if (!webhookUrl) {
    logger.error(
      '[startReplicateTraining] API_URL is not defined in config, cannot create webhook URL'
    )
    throw new Error('API_URL is not defined, webhook URL cannot be created.')
  }

  const webhookEventsFilter: WebhookEventType[] = [
    'start',
    'output',
    'logs',
    'completed',
  ]

  const trainingInput = {
    input_images_zip_url: zipUrl,
    token_string: triggerWord,
    // instance_prompt: `a photo of a ${triggerWord} person`, // Example: this is model specific
    // gender: user.gender, // Example: this is model specific
    steps: effectiveSteps,
    // Any other specific inputs required by config.replicateTrainingModelVersion
  }

  logger.info(
    `[startReplicateTraining] Starting Replicate training for user ${user.id} with destination model ${destinationModel}, version ${config.replicateTrainingModelVersion}`,
    { trainingInput, webhookUrl, webhookEventsFilter }
  )

  try {
    const training = await replicate.trainings.create(
      config.replicateUsername, // Owner
      modelName, // Name of the model (without owner prefix)
      config.replicateTrainingModelVersion || 'version-not-set', // Version
      {
        // Fourth argument: object containing input and other options
        input: trainingInput, // trainingInput goes inside the 'input' field
        destination: destinationModel as `${string}/${string}`,
        webhook: webhookUrl,
        webhook_events_filter: webhookEventsFilter,
      }
    )
    logger.info(
      `[startReplicateTraining] Training started successfully for user ${user.id} with destination model ${destinationModel}, version ${config.replicateTrainingModelVersion}`,
      { trainingInput, webhookUrl, webhookEventsFilter }
    )
    return training as Prediction
  } catch (error: any) {
    logger.error('[Replicate API Error] Failed to start training:', {
      user_id: user.id,
      model_name: destinationModel,
      error_message: error.message,
      error_stack: error.stack,
      error_response: error.response?.data,
    })
    throw new Error(`Replicate API error: ${error.message}`)
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è Replicate.
 * @param username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Replicate.
 * @param modelName - –ë–∞–∑–æ–≤–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏.
 * @returns –ü–æ–ª–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "username/modelName".
 */
export function formatReplicateModelName(
  username: string | null,
  modelName: string
): string {
  const config = getDigitalAvatarBodyConfig()
  const owner = username || config.replicateUsername
  if (!owner) {
    throw new Error(
      'Cannot determine Replicate model owner: username is null and config.replicateUsername is also not set.'
    )
  }
  return `${owner}/${modelName}`
}

// TODO: –î–æ–±–∞–≤–∏—Ç—å —Ö–µ–ª–ø–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞?
// export async function copyTrainingFile(...) { ... }

// --- Cache Logic --- (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ generateModelTraining.ts)
const replicateTrainingCache = new Map<
  string,
  {
    timestamp: number
    status: 'PENDING' | 'COMPLETED' | 'FAILED'
    trainingId?: string
  }
>()
export const CACHE_TTL_MS = 5 * 60 * 1000 // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º

export function checkAndSetTrainingCache(
  telegramId: string | number,
  modelName: string,
  status: 'PENDING' | 'COMPLETED' | 'FAILED',
  loggerInstance: typeof logger
): boolean {
  const cacheKey = `${telegramId}:${modelName}`
  const now = Date.now()
  const currentEntry = replicateTrainingCache.get(cacheKey)

  if (
    currentEntry &&
    currentEntry.status === 'PENDING' &&
    now - currentEntry.timestamp < CACHE_TTL_MS
  ) {
    loggerInstance.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∫—ç—à–µ', {
      telegram_id: telegramId,
      modelName,
      currentStatus: currentEntry.status,
      startedAt: new Date(currentEntry.timestamp).toISOString(),
    })
    return false
  }

  replicateTrainingCache.set(cacheKey, { timestamp: now, status })
  loggerInstance.info('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ', {
    telegram_id: telegramId,
    modelName,
    status: 'PENDING',
    timestamp: new Date(now).toISOString(),
  })

  for (const [key, entry] of replicateTrainingCache.entries()) {
    if (now - entry.timestamp > CACHE_TTL_MS) {
      replicateTrainingCache.delete(key)
    }
  }
  return true
}

export function updateTrainingStatus(
  telegramId: string | number,
  modelName: string,
  status: 'PENDING' | 'COMPLETED' | 'FAILED',
  loggerInstance: typeof logger,
  trainingId?: string
): void {
  const cacheKey = `${telegramId}:${modelName}`
  const entry = replicateTrainingCache.get(cacheKey)
  if (entry) {
    replicateTrainingCache.set(cacheKey, { ...entry, status, trainingId })
    loggerInstance.info('–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ', {
      telegram_id: telegramId,
      modelName,
      oldStatus: entry.status,
      newStatus: status,
      trainingId,
    })
  }
}
// --- End Cache Logic ---

/**
 * Fetches the latest model URL from Replicate.
 * @param modelName - The name of the model.
 * @param loggerInstance - Logger instance.
 * @returns The full model URL with version.
 */
export async function getLatestModelUrl(
  modelName: string,
  loggerInstance: typeof logger
): Promise<string> {
  const config = getDigitalAvatarBodyConfig()
  try {
    const username = config.replicateUsername
    if (!username) {
      throw new Error('REPLICATE_USERNAME is not set in module config')
    }
    // Assuming process.env.REPLICATE_API_TOKEN is still how the global Replicate client is authenticated.
    // If not, config.replicateApiToken needs to be used here for the fetch call authorization.
    const response = await fetch(
      `https://api.replicate.com/v1/models/${username}/${modelName}`,
      {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${config.replicateApiToken}`, // USE MODULE CONFIG TOKEN
          'Content-Type': 'application/json',
        },
      }
    )

    if (!response.ok) {
      if (response.status === 404) {
        loggerInstance.warn(
          `Model ${username}/${modelName} not found or has no version yet.`
        )
        throw new Error(
          `Model ${username}/${modelName} not found or has no version yet.`
        )
      }
      throw new Error(
        `Failed to fetch latest version id, status: ${response.status}`
      )
    }

    const data = (await response.json()) as ReplicateModelResponseForHelper
    loggerInstance.debug('data from getLatestModelUrl (helper):', data)
    if (!data.latest_version?.id) {
      throw new Error(
        `Latest version ID not found for model ${username}/${modelName}`
      )
    }
    const model_url = `${username}/${modelName}:${data.latest_version.id}`
    loggerInstance.debug(
      'model_url from getLatestModelUrl (helper):',
      model_url
    )
    return model_url
  } catch (error) {
    loggerInstance.error('Error fetching latest model url (helper):', {
      error: (error as Error).message,
      stack: (error as Error).stack,
    })
    throw error
  }
}

/**
 * Ensures a model exists on Replicate, creating it if necessary.
 * @param ownerUsername - The Replicate username of the model owner.
 * @param modelName - The name of the model.
 * @param triggerWord - The trigger word for the model (used in description if creating).
 * @param loggerInstance - Logger instance.
 * @param telegram_id - Optional telegram ID for logging context.
 */
export async function ensureReplicateModelExists(
  ownerUsername: string, // –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å replicate_username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  modelName: string,
  triggerWord: string, // triggerWord –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
  loggerInstance: typeof logger,
  telegram_id?: number
): Promise<void> {
  const config = getDigitalAvatarBodyConfig()
  const replicate = getReplicateClient()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerUsername, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º replicate_username
  const destination = `${ownerUsername}/${modelName}`

  try {
    loggerInstance.debug(
      `[Replicate Helper] Checking if model exists: ${destination}`,
      { telegram_id }
    )
    await replicate.models.get(ownerUsername, modelName)
    loggerInstance.info(
      `[Replicate Helper] Model ${destination} already exists.`,
      { telegram_id }
    )
  } catch (error: any) {
    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–±—ã—á–Ω–æ –æ—à–∏–±–∫–∞ 404), —Å–æ–∑–¥–∞–µ–º –µ–µ
    if (error.response && error.response.status === 404) {
      loggerInstance.info(
        `[Replicate Helper] Model ${destination} not found. Creating...`,
        { telegram_id }
      )
      try {
        await replicate.models.create(
          ownerUsername, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerUsername
          modelName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º modelName
          {
            // –û–ø—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
            visibility: 'private', // –∏–ª–∏ 'public', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            hardware: 'gpu-a40-small', // –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∂–µ–ª–µ–∑–æ
            description: `Custom model for ${ownerUsername}, trigger: ${triggerWord}`,
            // cover_image_url: 'URL_–ö_–û–ë–õ–û–ñ–ö–ï_–ú–û–î–ï–õ–ò', // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            // paper_url: 'URL_–ö_–û–ü–ò–°–ê–ù–ò–Æ_–ú–û–î–ï–õ–ò', // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            // github_url: 'URL_–ö_GITHUB_–†–ï–ü–û–ó–ò–¢–û–†–ò–Æ', // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            // category: 'image-generation', // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
          }
        )
        loggerInstance.info(
          `[Replicate Helper] Model ${destination} created successfully.`,
          { telegram_id }
        )
      } catch (createError: any) {
        loggerInstance.error(
          `[Replicate API Error] Failed to create model ${destination}:`,
          {
            error_message: createError.message,
            error_stack: createError.stack,
            error_response: createError.response?.data,
            telegram_id,
          }
        )
        // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–≥–ª–∞ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        throw new Error(
          `Failed to create Replicate model ${destination}: ${createError.message}`
        )
      }
    } else {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ 404), —Ç–∞–∫–∂–µ –±—Ä–æ—Å–∞–µ–º –µ–µ
      loggerInstance.error(
        `[Replicate API Error] Failed to check model ${destination}:`,
        {
          error_message: error.message,
          error_stack: error.stack,
          error_response: error.response?.data,
          telegram_id,
        }
      )
      throw new Error(
        `Failed to check Replicate model ${destination}: ${error.message}`
      )
    }
  }
}

/**
 * Polls Replicate for training status and updates the database.
 * @param initialTrainingDetails - The initial response from Replicate after starting a training.
 * @param dbTrainingRecordId - The ID of the training record in the local database.
 * @param loggerInstance - Logger instance.
 * @param telegram_id - Optional telegram ID for logging context.
 * @returns The final status of the training ('succeeded', 'failed', or 'canceled').
 */
export async function pollReplicateTrainingStatus(
  initialTrainingDetails: { id: string; status: string },
  dbTrainingRecordId: string,
  loggerInstance: typeof logger,
  telegram_id?: number
): Promise<string> {
  const currentReplicateTrainingId = initialTrainingDetails.id
  let currentPolledStatus = initialTrainingDetails.status
  let lastDbUpdatedStatus = initialTrainingDetails.status
  const replicateClient = getReplicateClient()

  loggerInstance.debug(
    `Starting polling for Replicate training: ${currentReplicateTrainingId}`,
    { telegram_id, initialStatus: currentPolledStatus }
  )

  while (
    currentPolledStatus !== 'succeeded' &&
    currentPolledStatus !== 'failed' &&
    currentPolledStatus !== 'canceled'
  ) {
    await new Promise(resolve => setTimeout(resolve, 10000)) // Polling interval

    if (!currentReplicateTrainingId) {
      loggerInstance.warn(
        'Replicate training ID became unavailable during polling, breaking loop.',
        { telegram_id }
      )
      throw new Error('Training ID became unavailable during polling.')
    }

    try {
      const updatedTrainingFromServer = await replicateClient.trainings.get(
        currentReplicateTrainingId
      )
      currentPolledStatus = updatedTrainingFromServer.status
      loggerInstance.debug(`Polled Replicate status: ${currentPolledStatus}`, {
        telegram_id,
        trainingId: currentReplicateTrainingId,
      })

      // Update DB only if the status has changed from what we last wrote
      if (
        currentPolledStatus.toUpperCase() !== lastDbUpdatedStatus.toUpperCase()
      ) {
        const updateResult = await updateDigitalAvatarTraining(
          dbTrainingRecordId,
          {
            status: currentPolledStatus.toUpperCase() as
              | 'PENDING'
              | 'PROCESSING'
              | 'SUCCEEDED'
              | 'FAILED',
          }
        )

        if (!updateResult) {
          loggerInstance.error(
            'Failed to update training status in DB during polling using helper',
            {
              dbTrainingRecordId,
              newStatus: currentPolledStatus,
              telegram_id,
            }
          )
          // Decide if we should throw or continue polling. For now, log and continue.
        } else {
          lastDbUpdatedStatus = currentPolledStatus // Update our tracker
          loggerInstance.info(
            `Updated DB training status to ${currentPolledStatus.toUpperCase()}`,
            { dbTrainingRecordId, telegram_id }
          )
        }
      }
    } catch (pollingError) {
      loggerInstance.error('Error during Replicate polling:', {
        trainingId: currentReplicateTrainingId,
        error: (pollingError as Error).message,
        stack: (pollingError as Error).stack,
        telegram_id,
      })
      // If polling fails, we might be in an inconsistent state.
      // Depending on the error, we might want to break or retry.
      // For now, let's break and let the main function handle it as a failed poll.
      // Consider returning a specific status like 'POLLING_FAILED'
      throw new Error(
        `Polling failed for training ID ${currentReplicateTrainingId}: ${(pollingError as Error).message}`
      )
    }
  }
  loggerInstance.info(
    `Polling finished for Replicate training: ${currentReplicateTrainingId}, final status: ${currentPolledStatus}`,
    { telegram_id }
  )
  return currentPolledStatus
}
