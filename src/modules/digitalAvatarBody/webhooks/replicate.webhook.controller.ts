import { Request, Response } from 'express'
import { inngest } from '@/inngest_app/client' // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨
import {
  updateLatestModelTrainingQuick,
  getTrainingWithUser,
  UpdateLatestModelTrainingData,
} from '@/core/supabase/trainings' // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨
import { NotificationService } from '@/services/notification.service' // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨
import { logger } from '@/utils/logger' // –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨
import { User } from '@/interfaces/user.interface'
import { sendTelegramMessageFromWorker } from '@/utils/telegramHelpers'

export class ReplicateWebhookController {
  private notificationService = new NotificationService()

  async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      const event = req.body
      logger.info({
        message: 'üîî –í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –æ—Ç Replicate',
        predictionId: event.id,
        status: event.status,
      })

      // üîí –£—Å–∏–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!event.id || !event.status) {
        logger.warn({
          message: '‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ–±—Ö—É–∫',
          payload: JSON.stringify(event).substring(0, 500) + '...', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ª–æ–≥–æ–≤
        })
        res.status(400).json({ error: 'Missing required fields' })
        return
      }

      logger.debug({
        message: 'üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        predictionId: event.id,
      })

      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏–∑ –±–∞–∑—ã
        const training = await getTrainingWithUser(event.id)
        console.log('training', training)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!training || !training.users) {
          logger.error({
            message: '‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            predictionId: event.id,
          })

          // –û—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —á—Ç–æ–±—ã Replicate –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          res.status(200).json({
            success: false,
            message: 'Training not found in database, but webhook acknowledged',
          })
          return
        }

        logger.info({
          message: '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          predictionId: event.id,
          telegram_id: training.users.telegram_id,
          model_name: training.model_name,
          status: event.status,
        })

        // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        const terminalStatuses = ['succeeded']
        const failedStatuses = ['failed', 'canceled']

        if (
          terminalStatuses.includes(event.status) ||
          failedStatuses.includes(event.status)
        ) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º api –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          const apiString = training?.api ?? ''
          if (!apiString) {
            logger.warn({
              message:
                '‚ö†Ô∏è API string not found in training data during updateLatestModelTrainingQuick call. Using empty string.',
              predictionId: event.id,
            })
          }

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç updates
          const updates: UpdateLatestModelTrainingData = {
            replicate_training_id: event.id, // –î–æ–±–∞–≤–ª—è–µ–º ID —Å—é–¥–∞
            status: event.status.toUpperCase(),
            model_url: event.output?.version,
            weights: event.output?.weights,
            error: event.error,
          }

          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
          await updateLatestModelTrainingQuick(updates, apiString)

          logger.info({
            message: 'üìù –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            predictionId: event.id,
            telegram_id: training.users.telegram_id,
            newDbStatus: event.status.toUpperCase(),
          })
        }

        // üö® –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–±–æ–µ–≤
        if (failedStatuses.includes(event.status)) {
          try {
            await this.notificationService.sendTrainingError(
              String(training.users.telegram_id),
              training.users.bot_name,
              event.error || 'Unknown error'
            )
            logger.info({
              message: 'üö® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
              predictionId: event.id,
              telegram_id: training.users.telegram_id,
            })
          } catch (notifyError: any) {
            logger.error({
              message: '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
              error: notifyError.message,
              telegram_id: training.users.telegram_id,
            })
          }
        }

        if (event.status === 'succeeded') {
          try {
            await this.notificationService.sendSuccessNotification(
              String(training.users.telegram_id),
              training.users.bot_name,
              training.users.language_code === 'ru'
            )
            logger.info({
              message: 'üéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ',
              predictionId: event.id,
              telegram_id: training.users.telegram_id,
            })
          } catch (notifyError: any) {
            logger.error({
              message: '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ',
              error: notifyError.message,
              telegram_id: training.users.telegram_id,
            })
          }
        }

        // üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Inngest
        await inngest.send({
          name: 'model/training.completed',
          data: {
            training_id: event.id,
            telegram_id: String(training.users.telegram_id),
            model_name: training.model_name,
            status: event.status,
            is_terminal:
              terminalStatuses.includes(event.status) ||
              failedStatuses.includes(event.status),
            metadata: {
              ...(event.metadata || {}),
              bot_name: training.users.bot_name,
            },
            error: event.error,
            output: event.output,
          },
        })

        logger.info({
          message: 'üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest',
          event_name: 'model/training.completed',
          predictionId: event.id,
          status: event.status,
        })

        res.status(200).json({ success: true })
      } catch (dbError: any) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          error: dbError.message,
          stack: dbError.stack,
          predictionId: event.id,
        })

        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Replicate –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        res.status(200).json({
          success: false,
          message: 'Database error, but webhook acknowledged',
        })
      }
    } catch (error: any) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error.message,
        stack: error.stack,
        request_id: req.headers['x-request-id'],
      })

      // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      res.status(200).json({
        success: false,
        message: 'Critical error but webhook acknowledged',
        request_id: req.headers['x-request-id'],
        timestamp: new Date().toISOString(),
      })
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
const controllerInstance = new ReplicateWebhookController()
export const replicateWebhookHandler =
  controllerInstance.handleWebhook.bind(controllerInstance)
