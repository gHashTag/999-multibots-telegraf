import { inngest } from '@/inngest_app/client'
import { NonRetriableError, EventPayload } from 'inngest'

import {
  updateUserBalance as updateUserBalanceInDB,
  updateUserLevelPlusOne as updateUserLevelPlusOneInDB,
  getUserByTelegramId, // <--- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–£–ñ–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
} from '@/core/supabase'
import { INNGEST_EVENT_KEY } from '@/config' // Direct imports
import { logger } from '@/utils/logger' // Direct import
import type { ModelTraining } from '@/core/supabase/createModelTraining'

import type { ModelTrainingInngestEventData } from '../types'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã
import {
  validateAndPrepareTrainingRequest,
  createTrainingRecord,
  startReplicateTraining,
  updateTrainingRecordOnError,
  formatReplicateModelName,
  getReplicateWebhookUrl,
} from '../helpers/trainingHelpers'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'
import { sendTelegramMessageFromWorker } from '@/utils/telegramHelpers' // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

const EVENT_NAME = 'app/digital-avatar-body.generate-model-training'
if (!INNGEST_EVENT_KEY) {
  logger.warn(
    `INNGEST_EVENT_KEY is not set, using default event name: ${EVENT_NAME}`
  )
}

// Event interface (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è data)
export interface GenerateModelTrainingEvent {
  name: typeof EVENT_NAME
  data: ModelTrainingInngestEventData // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
}

// --- Cache Logic (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
const replicateTrainingCache = new Map<
  string,
  {
    timestamp: number
    status: 'starting' | 'running' | 'completed' | 'failed'
    trainingId?: string
    // –î–æ–±–∞–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ ActiveCheckFromDB –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏?
    // source?: 'cache' | 'db'; // –ù–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    // replicate_id?: string | null;
    // created_at?: string;
    // model_name?: string;
  }
>()
const CACHE_TTL_MS = 5 * 60 * 1000

function checkAndSetTrainingCache(
  telegramId: string | number,
  modelName: string,
  status: 'starting',
  loggerInstance: typeof logger // Pass logger instance
): boolean {
  const cacheKey = `${telegramId}:${modelName}`
  const now = Date.now()
  const currentEntry = replicateTrainingCache.get(cacheKey)

  if (
    currentEntry &&
    currentEntry.status === 'running' &&
    now - currentEntry.timestamp < CACHE_TTL_MS
  ) {
    loggerInstance.warn({
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∫—ç—à–µ',
      telegram_id: telegramId,
      modelName,
      currentStatus: currentEntry.status,
      startedAt: new Date(currentEntry.timestamp).toISOString(),
    })
    return false
  }

  replicateTrainingCache.set(cacheKey, { timestamp: now, status })
  loggerInstance.info({
    message: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
    telegram_id: telegramId,
    modelName,
    status: 'starting',
    timestamp: new Date(now).toISOString(),
  })

  for (const [key, entry] of replicateTrainingCache.entries()) {
    if (now - entry.timestamp > CACHE_TTL_MS) {
      replicateTrainingCache.delete(key)
    }
  }
  return true
}

function updateTrainingStatus(
  telegramId: string | number,
  modelName: string,
  status: 'running' | 'completed' | 'failed',
  loggerInstance: typeof logger, // Pass logger instance
  trainingId?: string
): void {
  const cacheKey = `${telegramId}:${modelName}`
  const entry = replicateTrainingCache.get(cacheKey)
  if (entry) {
    replicateTrainingCache.set(cacheKey, { ...entry, status, trainingId })
    loggerInstance.info({
      message: '–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
      telegram_id: telegramId,
      modelName,
      oldStatus: entry.status,
      newStatus: status,
      trainingId,
    })
  }
}
// --- End Cache Logic ---

// Localized messages (copied)
const TRAINING_MESSAGES = {
  start: {
    ru: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
    en: 'üîç Starting model training...',
  },
  success: (modelName: string) => ({
    ru: `üéâ –ú–æ–¥–µ–ª—å ${modelName} –≥–æ—Ç–æ–≤–∞!`,
    en: `üéâ Model ${modelName} ready!`,
  }),
  error: (error: string) => ({
    ru: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
    en: `‚ùå Error: ${error}`,
  }),
  duplicateRequest: {
    ru: '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    en: '‚ö†Ô∏è Your training request is already processing. Please wait...',
  },
}

// Active trainings map (copied)
const activeTrainings = new Map<string, { cancel: () => void }>()

// Directly export the Inngest function
export const generateModelTraining = inngest.createFunction(
  {
    id: 'digital-avatar-body-generate-model-training-refactored',
    name: 'Digital Avatar Body - Generate Model Training (Refactored)',
    retries: 3,
    rateLimit: {
      key: 'event.data.telegramId',
      limit: 1,
      period: '10s',
    },
    // concurrency: { key: "event.data.telegramId", limit: 1 }, // Consider enabling
  },
  { event: 'digital-avatar/generate.model.training.requested' },
  async ({ event, step }: { event: EventPayload; step: any }) => {
    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      eventName: event.name,
      timestamp: new Date(event.ts).toISOString(),
      telegramId: event.data.telegram_id,
    })

    const eventData = event.data as ModelTrainingInngestEventData
    const {
      telegram_id,
      is_ru,
      bot_name,
      model_name,
      zipUrl,
      steps,
      trigger_word,
      user_api,
      user_replicate_username,
      calculatedCost, // <--- –ß–∏—Ç–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Å–æ–±—ã—Ç–∏—è
      // paymentType, // –£–¥–∞–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º operation_type_for_refund
      operation_type_for_refund,
    } = eventData

    // const operationTypeForRefund = eventData.operation_type_for_refund // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ã—à–µ
    const telegramIdNumber = Number(telegram_id) // <--- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ
    if (isNaN(telegramIdNumber)) {
      logger.error('Invalid telegram_id received in event', { telegram_id })
      throw new NonRetriableError('Invalid telegram_id')
    }

    // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
    const validationResult = await step.run(
      'validate-user-and-balance',
      async () => {
        return await validateAndPrepareTrainingRequest(
          telegramIdNumber, // <--- –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ
          zipUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º zipUrl –∏–∑ —Å–æ–±—ã—Ç–∏—è
          model_name,
          trigger_word,
          is_ru,
          bot_name,
          operation_type_for_refund, // –ò—Å–ø–æ–ª—å–∑—É–µ–º operation_type_for_refund –∫–∞–∫ PaymentType
          calculatedCost // <--- –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        )
      }
    )

    if (!validationResult) {
      logger.warn({
        message: '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.',
        telegramId: telegram_id,
      })
      await sendTelegramMessageFromWorker(
        telegram_id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
        bot_name
      )
      throw new NonRetriableError('User validation or balance check failed.')
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º costInStars –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const { user, publicUrl, costInStars } = validationResult // costInStars —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω calculatedCost

    logger.info('User validation and cost calculation successful', {
      functionName: 'generateModelTraining',
      userId: user.id,
      cost: costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º costInStars (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω calculatedCost)
      publicUrl: publicUrl,
    })

    // –®–∞–≥ 2: –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    await step.run('deduct-balance', async () => {
      logger.info('Attempting to deduct balance...', {
        functionName: 'generateModelTraining',
        userId: user.id,
        cost: costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ validationResult
      })
      await updateUserBalance(
        String(user.id),
        user.balance - costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ validationResult
        operation_type_for_refund, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ —Å–æ–±—ã—Ç–∏—è
        `Training ${model_name}`,
        {
          bot_name: bot_name,
          amount: costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ validationResult
          model_name: model_name,
        }
      )
      logger.info('Balance deducted successfully', {
        functionName: 'generateModelTraining',
        userId: user.id,
        newBalance: user.balance - costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ validationResult
      })
    })

    // –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    let replicateTrainingId: string | null = null
    let dbRecordId: string | null = null

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã
      const replicateModelName = formatReplicateModelName(
        user_replicate_username,
        model_name
      )
      const webhookUrl = getReplicateWebhookUrl()

      const trainingResult = await step.run('start-replicate-training', () => {
        logger.info('Starting Replicate training...', {
          functionName: 'generateModelTraining',
          userId: user.id,
        })
        return startReplicateTraining(
          user, // <--- –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç user
          model_name,
          publicUrl, // <--- –ü—Ä–∞–≤–∏–ª—å–Ω–æ: URL –∞—Ä—Ö–∏–≤–∞
          trigger_word, // <--- –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
          steps // <--- –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        )
      })

      if (!trainingResult) {
        throw new Error(
          'Replicate training failed to start (null response from helper)'
        )
      }
      replicateTrainingId = trainingResult.id

      logger.info('Replicate training started successfully', {
        functionName: 'generateModelTraining',
        userId: user.id,
        replicateId: replicateTrainingId,
      })

      // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      const dbResult = await step.run('create-db-record', () => {
        logger.info('Creating/updating training record in DB...', {
          functionName: 'generateModelTraining',
          userId: user.id,
        })
        const recordData: ModelTraining = {
          id: '', // ID –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ë–î
          created_at: new Date().toISOString(), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
          user_id: String(user.id),
          model_name: model_name,
          zip_url: publicUrl,
          cost: costInStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ validationResult
          status: 'STARTING', // –°—Ä–∞–∑—É STARTING
          replicate_training_id: replicateTrainingId,
          replicate_model_name: replicateModelName,
          webhook_url: webhookUrl,
          trigger_word: trigger_word,
          steps: steps, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
          model_url: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ null
          error: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ null
        }
        return createTrainingRecord(recordData)
      })

      if (!dbResult || dbResult.length === 0) {
        logger.error('Failed to create DB record after Replicate start', {
          functionName: 'generateModelTraining',
          userId: user.id,
          replicateId: replicateTrainingId,
        })
        // Consider step.sleep and retry or fail the function?
        // For now, log error and continue (training is running)
      } else {
        dbRecordId = dbResult[0].id
        logger.info('DB record created/updated successfully', {
          functionName: 'generateModelTraining',
          userId: user.id,
          dbRecordId: dbRecordId,
        })
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sendTelegramMessageFromWorker
      await sendTelegramMessageFromWorker(
        String(user.telegram_id), // –ü–µ—Ä–µ–¥–∞–µ–º telegram_id
        `‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ ${model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! ID: ${replicateTrainingId}`,
        bot_name
      )
    } catch (error: any) {
      const errorMessage = error.message || 'Unknown error during training'
      logger.error(`[Inngest Training Error] ${errorMessage}`, {
        eventName: event.name,
        eventTs: event.ts, // <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º event.ts –≤–º–µ—Å—Ç–æ event.id
        data: event.data,
        error,
      })

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–± –æ—à–∏–±–∫–µ
      const {
        model_name,
        trigger_word,
        zipUrl: publicUrl,
        steps,
        calculatedCost,
      } = event.data // –î–æ—Å—Ç–∞–µ–º steps
      const user = await getUserByTelegramId(event.data.telegram_id) // <-- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ

      if (!user) {
        logger.error(
          '[Inngest Training Error] User not found, cannot update error record in DB for refund an cost.',
          { telegram_id: event.data.telegram_id }
        )
        throw new NonRetriableError('User not found for error update.')
      }

      await step.run('update-db-on-error', async () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ö–µ–ª–ø–µ—Ä
        await updateTrainingRecordOnError(
          String(user.id), // userId
          model_name, // modelName
          errorMessage // error
        )
      })

      // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º NonRetriableError, —á—Ç–æ–±—ã Inngest –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –ø–æ–ø—ã—Ç–∫–∏
      throw new NonRetriableError(errorMessage)
    }
  }
)
