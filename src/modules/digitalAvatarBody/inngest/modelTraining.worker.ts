// import { inngest } from '@/inngest_app/client' // –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π inngest –∑–¥–µ—Å—å
// import { ‡§Æ‡§æ‡§®‡§µ_av_event_names } from '@/interfaces/inngest.interface' // <--- –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import type { ModelTrainingInngestEventData } from '../types'
import type { DigitalAvatarBodyDependencies } from '../index' // –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –§–ê–ë–†–ò–ö–û–ô –¥–ª—è Inngest-–≤–æ—Ä–∫–µ—Ä–∞
export function createModelTrainingWorker(dependencies: DigitalAvatarBodyDependencies) {
  const { replicate, logger, sendTelegramMessage, updateUserBalance } = dependencies

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ inngest.createFunction
  // –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è inngest.serve
  return {
    id: 'model-training-worker', // –±—ã–ª–æ generate-model-training-from-file
    name: 'Model Training Worker',
    trigger: { event: 'digital-avatar-body/model-training.requested' as const }, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º—è —Å–æ–±—ã—Ç–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    fn: async ({ event, step }: { event: { data: ModelTrainingInngestEventData }, step: any }) => {
      const { 
        telegram_id, 
        bot_name, // –ò–ó–ú–ï–ù–ï–ù–û —Å bot_username –Ω–∞ bot_name
        model_name, 
        trigger_word, 
        zipUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º zipUrl –≤–º–µ—Å—Ç–æ file_path
        steps, 
        is_ru, 
        cost_for_refund,         // <--- –ò–∑–≤–ª–µ–∫–∞–µ–º cost_for_refund
        operation_type_for_refund, // <--- –ò–∑–≤–ª–µ–∫–∞–µ–º operation_type_for_refund
        original_message_id,
        chat_id,
      } = event.data
      logger.info(
        '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ (—á–µ—Ä–µ–∑ DI)',
        {
          telegram_id,
          bot_name, // –õ–æ–≥–∏—Ä—É–µ–º bot_name
          model_name,
          trigger_word,
          zipUrl_sample: zipUrl ? `${zipUrl.substring(0,20)}...` : 'undefined', // –õ–æ–≥–∏—Ä—É–µ–º zipUrl
          steps,
          is_ru,
          cost_for_refund, // –õ–æ–≥–∏—Ä—É–µ–º
          operation_type_for_refund // –õ–æ–≥–∏—Ä—É–µ–º
        }
      )

      if (!zipUrl) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º zipUrl
        logger.error('zipUrl is undefined in Inngest event (DI)', { eventData: event.data })
        await sendTelegramMessage(
          telegram_id,
          is_ru
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: URL —Ñ–∞–π–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏.'
            : 'An error occurred: File URL is undefined for model training.'
        )
        return { event, body: 'Error: zipUrl is undefined' }
      }

      try {
        const webhookUrl = `https://neuro-api.playg.dev/api/replicate-webhook-model-training?telegram_id=${telegram_id}&bot_name=${bot_name}` 
        logger.info(`–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Replicate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id} (DI)`);

        const replicateModelOwner = 'replicate'
        const replicateModelName = 'sdxl-lora-trainer'
        const replicateModelVersion = 'c221b2b8ef527988fb59bf24a8b97c4561f1c671f73bd389f866fe846a6de608'

        const trainingInput = {
            input_images: zipUrl, 
            instance_prompt: `a photo of ${trigger_word} person`, 
            max_train_steps: steps || 2000, 
        };

        logger.info({ message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è Replicate (DI Worker)', input: trainingInput, model: `${replicateModelOwner}/${replicateModelName}:${replicateModelVersion}` });

        const prediction = await step.run('start-replicate-training-di', async () => {
          return await replicate.trainings.create(
            replicateModelOwner, 
            replicateModelName, 
            replicateModelVersion, 
          {
            destination: `neuroblogger/${model_name}`, 
            input: trainingInput,
            webhook: webhookUrl,
            webhook_events_filter: ['completed'],
          })
        })

        logger.info(
          `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${telegram_id} (DI). Replicate ID: ${prediction.id}. –°—Ç–∞—Ç—É—Å: ${prediction.status}`
        )
        await sendTelegramMessage(
          telegram_id,
          is_ru
            ? `‚è≥ –í–∞—à–∞ –º–æ–¥–µ–ª—å "${model_name}" –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.`
            : `‚è≥ Your model "${model_name}" has started training. This may take anywhere from 30 minutes to several hours. I will notify you when it is ready.`
        )
        
        return {
          event,
          body: `Model training started successfully for ${telegram_id} (DI). Replicate ID: ${prediction.id}`,
        }
      } catch (e: any) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Replicate (DI)', {
          telegram_id,
          error: e.message,
          error_stack: e.stack,
          error_details: e,
        })
        
        if (cost_for_refund && cost_for_refund > 0 && operation_type_for_refund) {
          logger.info(`[Worker Refund] Refunding ${cost_for_refund} for user ${telegram_id} due to Replicate failure. Operation type: ${operation_type_for_refund}`);
          try {
            const refundSuccess = await updateUserBalance(
              telegram_id,
              cost_for_refund,
              operation_type_for_refund, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —ç–≤–µ–Ω—Ç–∞
              `REFUND_REPLICATE_FAILURE_WORKER`,
              { bot_name: bot_name, replicate_error: e.message }
            );
            if (refundSuccess) {
              logger.info({
                message: `üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ (${cost_for_refund}) –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –≤–æ—Ä–∫–µ—Ä–µ –¥–ª—è ${operation_type_for_refund}`,
                telegramId: telegram_id.toString(),
                amountRefunded: cost_for_refund,
                operationType: `${operation_type_for_refund}_REFUND_WORKER_FAILURE`
              });
              await sendTelegramMessage(
                telegram_id,
                is_ru
                  ? `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ (${cost_for_refund} –∑–≤–µ–∑–¥) –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
                  : `‚ö†Ô∏è An error occurred while processing your training request. Funds (${cost_for_refund} stars) have been refunded.`
              );
            } else {
              logger.error({
                message: `üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (${cost_for_refund}) –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –≤–æ—Ä–∫–µ—Ä–µ –¥–ª—è ${operation_type_for_refund}`,
                telegramId: telegram_id.toString(),
                originalError: e.message, 
              });
              await sendTelegramMessage(
                telegram_id,
                is_ru
                  ? `üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –ò –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º.`
                  : `üÜò CRITICAL ERROR during training AND refund. Please contact support to resolve your balance.`
              );
            }
          } catch (refundError: any) {
            logger.error({
              message: `üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (${cost_for_refund}) –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –≤–æ—Ä–∫–µ—Ä–µ –¥–ª—è ${operation_type_for_refund}`,
              telegramId: telegram_id.toString(),
              originalError: e.message, 
              refundError: refundError.message,
            });
            await sendTelegramMessage(
              telegram_id,
              is_ru
                ? `üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –ò –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º.`
                : `üÜò CRITICAL ERROR during training AND refund. Please contact support to resolve your balance.`
            );
          }
        } else {
          logger.warn({
            message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ (cost_for_refund –∏–ª–∏ operation_type_for_refund) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–±—ã—Ç–∏–∏ –∏–ª–∏ cost_for_refund <=0. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Replicate.',
            eventData: event.data,
            telegramId: telegram_id.toString(),
          });
        }

        await sendTelegramMessage(
          telegram_id,
          is_ru
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ "${model_name}". –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.`
            : `‚ùå An error occurred while starting the training of model "${model_name}". The administrator has been notified.`
        )
        return {
          event,
          body: `Replicate training failed. Error: ${e.message || 'Unknown error'}`,
          details: e.stack
        }
      }
    }
  }
}

// –í–∞–∂–Ω–æ: –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –≤–æ—Ä–∫–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ —Ñ—É–Ω–∫—Ü–∏–π Inngest
// –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ src/inngest/functions.ts (–∏–ª–∏ –∫—É–¥–∞ –æ–Ω –ø–µ—Ä–µ–µ–¥–µ—Ç)
// export const functions = [helloWorldFunction, modelTrainingWorker];