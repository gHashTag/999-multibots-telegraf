import { inngest } from '@/inngest_app/client'
import { NonRetriableError, EventPayload } from 'inngest'
import type { Prediction } from 'replicate'
import Replicate from 'replicate' // Direct import

import {
  getUserByTelegramId as fetchUserByTelegramId, // Renamed for clarity
  updateUserBalance as updateUserBalanceInDB, // Renamed for clarity
  updateUserLevelPlusOne as updateUserLevelPlusOneInDB, // Renamed for clarity
  getUserBalance as fetchUserBalanceFromDB, // Renamed for clarity
  createModelTraining as createModelTrainingInDB, // Renamed for clarity
  supabase, // Direct import
} from '@/core/supabase'
import { getBotByName as fetchBotByName } from '@/core/bot' // Direct import
import { ModeEnum } from '@/interfaces/modes'
// Removed import for calculateModeCost as calculateOverallCost seems more appropriate here
import {
  API_URL,
  COSTS, // Make sure COSTS includes NEURO_TRAIN_LORA
  REPLICATE_USERNAME,
  REPLICATE_TRAINING_MODEL_VERSION, // Assuming this is the correct var name now
  INNGEST_EVENT_KEY,
} from '@/config' // Direct imports
import { logger } from '@/utils/logger' // Direct import
import { PaymentType } from '@/interfaces/payments.interface'
import {
  CostDetails,
  calculateCost as calculateOverallCost, // Using the main cost calculator
} from '@/price/priceCalculator'

import type { User } from '@/interfaces/user.interface'
import type { ModelTraining } from '@/core/supabase/createModelTraining'
import type { SupabaseClient } from '@supabase/supabase-js'

// ========= –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ô –ë–õ–û–ö (–°–¢–†–û–ö–ò ~36-42) =========
// import {
//   type ActiveCheckResult,
//   ErrorActiveCheck,
//   ActiveCheckFromDB,
//   ActiveCheckFromCache,
//   NoActiveCheck,
//   WebhookEventType, // Added type for WebhookEventType
// } from '../types'
// =====================================================================

import type { ModelTrainingInngestEventData } from '../types'

const EVENT_NAME = 'app/digital-avatar-body.generate-model-training'
if (!INNGEST_EVENT_KEY) {
  logger.warn(
    `INNGEST_EVENT_KEY is not set, using default event name: ${EVENT_NAME}`
  )
}

// Event interface (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è data)
export interface GenerateModelTrainingEvent {
  name: typeof EVENT_NAME
  data: ModelTrainingInngestEventData // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
}

// --- Cache Logic (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
const replicateTrainingCache = new Map<
  string,
  {
    timestamp: number
    status: 'starting' | 'running' | 'completed' | 'failed'
    trainingId?: string
    // –î–æ–±–∞–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ ActiveCheckFromDB –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏?
    // source?: 'cache' | 'db'; // –ù–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    // replicate_id?: string | null;
    // created_at?: string;
    // model_name?: string;
  }
>()
const CACHE_TTL_MS = 5 * 60 * 1000

function checkAndSetTrainingCache(
  telegramId: string | number,
  modelName: string,
  status: 'starting',
  loggerInstance: typeof logger // Pass logger instance
): boolean {
  const cacheKey = `${telegramId}:${modelName}`
  const now = Date.now()
  const currentEntry = replicateTrainingCache.get(cacheKey)

  if (
    currentEntry &&
    currentEntry.status === 'running' &&
    now - currentEntry.timestamp < CACHE_TTL_MS
  ) {
    loggerInstance.warn({
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∫—ç—à–µ',
      telegram_id: telegramId,
      modelName,
      currentStatus: currentEntry.status,
      startedAt: new Date(currentEntry.timestamp).toISOString(),
    })
    return false
  }

  replicateTrainingCache.set(cacheKey, { timestamp: now, status })
  loggerInstance.info({
    message: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
    telegram_id: telegramId,
    modelName,
    status: 'starting',
    timestamp: new Date(now).toISOString(),
  })

  for (const [key, entry] of replicateTrainingCache.entries()) {
    if (now - entry.timestamp > CACHE_TTL_MS) {
      replicateTrainingCache.delete(key)
    }
  }
  return true
}

function updateTrainingStatus(
  telegramId: string | number,
  modelName: string,
  status: 'running' | 'completed' | 'failed',
  loggerInstance: typeof logger, // Pass logger instance
  trainingId?: string
): void {
  const cacheKey = `${telegramId}:${modelName}`
  const entry = replicateTrainingCache.get(cacheKey)
  if (entry) {
    replicateTrainingCache.set(cacheKey, { ...entry, status, trainingId })
    loggerInstance.info({
      message: '–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
      telegram_id: telegramId,
      modelName,
      oldStatus: entry.status,
      newStatus: status,
      trainingId,
    })
  }
}
// --- End Cache Logic ---

// Localized messages (copied)
const TRAINING_MESSAGES = {
  start: {
    ru: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
    en: 'üîç Starting model training...',
  },
  success: (modelName: string) => ({
    ru: `üéâ –ú–æ–¥–µ–ª—å ${modelName} –≥–æ—Ç–æ–≤–∞!`,
    en: `üéâ Model ${modelName} ready!`,
  }),
  error: (error: string) => ({
    ru: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
    en: `‚ùå Error: ${error}`,
  }),
  duplicateRequest: {
    ru: '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    en: '‚ö†Ô∏è Your training request is already processing. Please wait...',
  },
}

// Active trainings map (copied)
const activeTrainings = new Map<string, { cancel: () => void }>()

// Directly export the Inngest function
export const generateModelTraining = inngest.createFunction(
  {
    id: 'digital-avatar-body-generate-model-training-refactored',
    name: 'Digital Avatar Body - Generate Model Training (Refactored)',
    retries: 3,
    rateLimit: {
      key: 'event.data.telegramId',
      limit: 1,
      period: '10s',
    },
    // concurrency: { key: "event.data.telegramId", limit: 1 }, // Consider enabling
  },
  { event: 'digital-avatar/generate.model.training.requested' },
  async ({ event, step }: { event: EventPayload; step: any }) => {
    // Use the directly imported logger
    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      eventName: event.name,
      timestamp: new Date(event.ts).toISOString(),
      telegramId: event.data.telegram_id, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ telegram_id
    })

    // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º data —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
    const eventData = event.data as ModelTrainingInngestEventData
    const {
      telegram_id: telegramId,
      is_ru,
      bot_name,
      model_name: modelName,
      zipUrl,
      steps,
      trigger_word,
    } = eventData

    // –ü—Ä–∏–≤–æ–¥–∏–º steps –∫ —á–∏—Å–ª—É, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
    const numSteps = typeof steps === 'string' ? parseInt(steps, 10) : steps

    const cacheKey = `${telegramId}:${modelName}`

    // --- Check for active training using direct Supabase call ---
    const activeCheck = await step.run(
      'check-active-training-refactored',
      async () => {
        try {
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º cache.get
          const cached = replicateTrainingCache.get(cacheKey)
          if (cached) {
            logger.info({
              message: '–ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ',
              cacheKey,
              cachedStatus: cached.status,
              telegram_id: telegramId,
            })
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ DB –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            return {
              exists: true,
              source: 'cache',
              status: cached.status,
              replicate_id: cached.trainingId,
              created_at: new Date(cached.timestamp).toISOString(),
              model_name: modelName,
            }
          }

          const { data: existingTrainings, error: dbError } = await supabase
            .from('trainings')
            .select('id, status, replicate_id, model_name, created_at')
            .eq('user_id', String(telegramId))
            .eq('model_name', modelName)
            .in('status', ['starting', 'processing'])
            .order('created_at', { ascending: false })
            .limit(1)

          if (dbError) throw dbError // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ë–î

          if (existingTrainings && existingTrainings.length > 0) {
            const latestTraining = existingTrainings[0]
            logger.info({
              message: '–ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î',
              ...latestTraining,
              telegram_id: telegramId,
            })
            const result = {
              exists: true,
              source: 'db',
              id: latestTraining.id,
              status: latestTraining.status,
              replicate_id: latestTraining.replicate_id,
              created_at: latestTraining.created_at,
              model_name: latestTraining.model_name,
            }
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º cache.set
            replicateTrainingCache.set(cacheKey, {
              timestamp: Date.now(),
              status: latestTraining.status as 'starting' | 'running', // –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø
              trainingId: latestTraining.replicate_id ?? undefined,
            })
            return result
          } else {
            return { exists: false }
          }
        } catch (error: any) {
          logger.error({
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            error: error.message,
            stack: error.stack,
            telegram_id: telegramId,
          })
          return { exists: false, error: error.message }
        }
      }
    ) // –£–±–∏—Ä–∞–µ–º as ActiveCheckResult, —Ç–∏–ø –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω

    // --- Get Bot instance ---
    const { bot } = await fetchBotByName(bot_name)
    if (!bot) {
      logger.error({ message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', botName: bot_name })
      throw new NonRetriableError(`‚ùå –ë–æ—Ç ${bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    // --- Handle existing active training ---
    if (activeCheck?.exists) {
      const isRussian = is_ru === true
      try {
        await bot.telegram.sendMessage(
          telegramId,
          TRAINING_MESSAGES.duplicateRequest[isRussian ? 'ru' : 'en']
        )
      } catch (error: any) {
        logger.error({
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ',
          error: error.message,
        })
      }
      logger.info({
        message:
          '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        telegram_id: telegramId,
        modelName: activeCheck.model_name,
        activeCheckSource: activeCheck.source,
      })
      return {
        success: false,
        message: 'Active training already exists',
        activeTrainingExists: true,
        trainingId: activeCheck.replicate_id,
      }
    }

    // --- Set Cache ---
    if (!checkAndSetTrainingCache(telegramId, modelName, 'starting', logger)) {
      // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    }

    // --- Instantiate Replicate Client ---
    const replicateClient = new Replicate({
      auth: process.env.REPLICATE_API_TOKEN, // Ensure this is set in your environment
    })
    if (!process.env.REPLICATE_API_TOKEN) {
      logger.error('REPLICATE_API_TOKEN is not set in environment variables!')
      throw new NonRetriableError('Replicate API token is not configured.')
    }

    // --- Local helper to send messages ---
    const sendHelperMessage = async (
      text: string,
      parseMode?: 'MarkdownV2' | 'HTML'
    ) => {
      await step.run('send-message-refactored', async () => {
        try {
          await bot.telegram.sendMessage(telegramId, text, {
            parse_mode: parseMode,
          })
          logger.info({
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            telegram_id: telegramId,
          })
          return true
        } catch (error: any) {
          logger.error({
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
            error: error.message,
            telegram_id: telegramId,
          })
          return false // Don't fail the step for notification error
        }
      })
    }

    // --- Main Training Logic ---
    let balanceCheckResult: {
      success?: boolean
      currentBalance?: number
    } | null = null
    let calculatedCost: CostDetails | null = null
    let user: User | null = null
    const effectiveModelName = modelName

    try {
      const isRussian = is_ru === true
      await sendHelperMessage(TRAINING_MESSAGES.start[isRussian ? 'ru' : 'en'])

      // Step: Fetch user
      user = await step.run('fetch-user-refactored', async () => {
        const fetchedUser = await fetchUserByTelegramId(String(telegramId)) // Cast to string, Use direct fetchUserByTelegramId
        if (!fetchedUser) {
          logger.error({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            telegram_id: telegramId,
          })
          throw new NonRetriableError('User not found') // Use NonRetriableError
        }
        logger.info({
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
          userId: fetchedUser.id,
          telegram_id: telegramId,
        })
        return fetchedUser
      })

      // Step: Update user level if needed
      if (user.level === 0) {
        await step.run('update-level-refactored', async () => {
          await updateUserLevelPlusOneInDB(String(telegramId), 0) // Cast to string, Use direct updateUserLevelPlusOneInDB
          logger.info({
            message: '–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 1',
            telegram_id: telegramId,
          })
        })
        user.level = 1 // Update local user object
      }

      // Step: Calculate Cost
      calculatedCost = await step.run('calculate-cost-refactored', async () => {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ calculateCost
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ numSteps –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ steps –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        const stepsToCalculate = numSteps ?? 1000 // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ steps –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        if (!numSteps) {
          logger.warn({
            message:
              'Steps –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–æ–±—ã—Ç–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            defaultSteps: stepsToCalculate,
            telegram_id: telegramId,
          })
          // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –±—Ä–æ—Å–∏—Ç—å NonRetriableError, –µ—Å–ª–∏ —à–∞–≥–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
          // throw new NonRetriableError('Number of steps not provided in the event data');
        }
        // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (v1 –∏–ª–∏ v2)
        const modelVersion: 'v1' | 'v2' = 'v1' // –ü–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏–º v1
        const costDetails = calculateOverallCost(stepsToCalculate, modelVersion)
        if (!costDetails || typeof costDetails.stars !== 'number') {
          logger.error({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            telegram_id: telegramId,
            costDetails,
          })
          throw new Error('Failed to calculate training cost') // Allow retry
        }
        logger.info({
          message: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞',
          cost: costDetails.stars,
          steps: stepsToCalculate,
          version: modelVersion,
          telegram_id: telegramId,
        })
        return costDetails
      })
      const paymentAmount = calculatedCost.stars!

      // Step: Check Balance
      balanceCheckResult = await step.run(
        'check-balance-refactored',
        async () => {
          const currentBalance = await fetchUserBalanceFromDB(
            String(telegramId)
          ) // Cast to string, Use direct fetchUserBalanceFromDB
          if (currentBalance === null || currentBalance < paymentAmount) {
            logger.warn({
              message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
              required: paymentAmount,
              balance: currentBalance,
              telegram_id: telegramId,
            })
            return { success: false, currentBalance }
          }
          logger.info({
            message: '–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω',
            balance: currentBalance,
            telegram_id: telegramId,
          })
          return { success: true, currentBalance }
        }
      )

      if (!balanceCheckResult?.success) {
        await sendHelperMessage(
          is_ru === true
            ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${paymentAmount}, —É –≤–∞—Å: ${balanceCheckResult?.currentBalance ?? 0}`
            : `Insufficient funds. Required: ${paymentAmount}, balance: ${balanceCheckResult?.currentBalance ?? 0}`
        )
        throw new NonRetriableError('Insufficient balance')
      }
      const initialBalance = balanceCheckResult.currentBalance!

      // Step: Charge User
      const chargeResult = await step.run(
        'charge-user-refactored',
        async () => {
          const newBalance = initialBalance - paymentAmount
          await updateUserBalanceInDB(
            String(telegramId),
            newBalance,
            PaymentType.MONEY_OUTCOME,
            `–û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ ${effectiveModelName} (—à–∞–≥–æ–≤: ${numSteps ?? 'N/A'})`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º numSteps
            {
              /* metadata */
            }
          )
          logger.info({
            message: '–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã',
            amount: paymentAmount,
            newBalance: newBalance,
            telegram_id: telegramId,
          })
          return {
            success: true,
            oldBalance: initialBalance,
            newBalance,
            paymentAmount,
          }
        }
      )

      // Step: Create/Get Replicate Model Destination
      const destination = await step.run(
        'create-replicate-model-refactored',
        async () => {
          const username = REPLICATE_USERNAME
          if (!username) {
            logger.error('REPLICATE_USERNAME is not set in config!')
            throw new NonRetriableError('REPLICATE_USERNAME not set in config')
          }
          try {
            // Check if model exists
            await replicateClient.models.get(username, effectiveModelName) // Use replicateClient
            logger.info({
              message: '–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å Replicate –Ω–∞–π–¥–µ–Ω–∞',
              destination: `${username}/${effectiveModelName}`,
            })
            return `${username}/${effectiveModelName}`
          } catch (error: any) {
            if (error?.response?.status === 404) {
              logger.info({
                message: '–ú–æ–¥–µ–ª—å Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...',
                modelName: effectiveModelName,
              })
              try {
                if (!trigger_word) {
                  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É triggerWord
                  logger.error('Cannot create model without triggerWord')
                  throw new NonRetriableError(
                    'Trigger word is required to create a model'
                  )
                }
                const newModel = await replicateClient.models.create(
                  username,
                  effectiveModelName,
                  {
                    description: `LoRA: ${trigger_word}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º triggerWord
                    visibility: 'public', // Or 'private' if needed
                    hardware: 'gpu-t4', // Or other suitable hardware
                  }
                )
                logger.info({
                  message: '–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å Replicate —Å–æ–∑–¥–∞–Ω–∞',
                  url: newModel.url,
                })
                // Add a small delay maybe? Replicate sometimes needs a moment
                await new Promise(resolve => setTimeout(resolve, 3000))
                return `${username}/${effectiveModelName}`
              } catch (createError: any) {
                logger.error({
                  message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Replicate',
                  error: createError?.message || createError,
                })
                throw new Error(
                  `Failed to create Replicate model: ${createError?.message || createError}`
                ) // Allow retry
              }
            } else {
              // Other error during model check
              logger.error({
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ Replicate',
                error: error?.message || error,
              })
              throw new Error(
                `Failed to check Replicate model: ${error?.message || error}`
              ) // Allow retry
            }
          }
        }
      )

      // Step: Start Replicate Training
      const trainingResult = await step.run(
        'start-replicate-training-refactored',
        async () => {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          if (!trigger_word) {
            logger.error('trigger_word is missing!')
            throw new NonRetriableError('trigger_word is missing')
          }
          if (!numSteps) {
            logger.error('steps is missing!')
            throw new NonRetriableError('steps is missing')
          }
          if (!zipUrl) {
            logger.error('zipUrl is missing!')
            throw new NonRetriableError('zipUrl is missing')
          }

          try {
            const trainingInput = {
              input_images: zipUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º zipUrl
              // ... (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LoRA trainer) ...
              trigger_word, // –ò—Å–ø–æ–ª—å–∑—É–µ–º triggerWord
              steps: numSteps, // –ò—Å–ø–æ–ª—å–∑—É–µ–º numSteps
              // ... –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ...
            }

            logger.info({
              message: 'Starting Replicate training with input',
              input: trainingInput,
              destination,
            })

            const training = await replicateClient.trainings.create(
              REPLICATE_USERNAME!, // owner
              'sdxl-lora-trainer', // model_name - **UPDATE THIS**
              REPLICATE_TRAINING_MODEL_VERSION!, // version_id - **UPDATE THIS**
              {
                destination: destination as `${string}/${string}`,
                input: trainingInput,
                webhook: `${API_URL}/webhooks/replicate`,
                // –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –≤—ã–≤–æ–¥ —Ç–∏–ø–∞, —É–¥–∞–ª—è–µ–º as string[]
                webhook_events_filter: ['completed'],
              }
            )

            logger.info({
              message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ Replicate –∑–∞–ø—É—â–µ–Ω–∞',
              trainingId: training.id,
              status: training.status,
            })

            // Create DB record
            const trainingRecordData: Omit<
              ModelTraining,
              'id' | 'created_at' | 'telegram_id'
            > = {
              user_id: String(user.id),
              replicate_training_id: training.id,
              model_name: effectiveModelName,
              status: training.status as ModelTraining['status'],
              cost: paymentAmount,
              zip_url: zipUrl,
              webhook_url: `${API_URL}/webhooks/replicate`,
              replicate_model_name: destination,
              error: null,
              trigger_word,
              steps: numSteps,
            }
            const dbRecord = (await createModelTrainingInDB(
              trainingRecordData
            )) as ModelTraining[] | null

            if (!dbRecord || dbRecord.length === 0) {
              logger.error({
                message: '–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î',
                telegram_id: telegramId,
                replicateId: training.id,
              })
            }

            logger.info({
              message: '–ó–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î',
              replicateTrainingIdFromDB:
                dbRecord && dbRecord.length > 0
                  ? dbRecord[0]?.replicate_training_id
                  : 'Error: Record not created or replicate_training_id missing',
              replicateIdFromTrainingObject: training.id,
            })

            updateTrainingStatus(
              telegramId,
              effectiveModelName,
              'running',
              logger,
              training.id
            )
            return { training, dbRecord }
          } catch (error: any) {
            logger.error({
              message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ Replicate',
              error: error?.message || error,
            })
            replicateTrainingCache.delete(cacheKey) // Clean cache on failure
            throw error // Allow retry
          }
        }
      )

      // --- Success ---
      logger.info({
        message: '–ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
        trainingId: trainingResult.training.id,
        telegram_id: telegramId,
      })
      await sendHelperMessage(
        `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: \`${trainingResult.training.id}\`\\. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏\\.`,
        'MarkdownV2'
      )

      return {
        status: 'submitted',
        trainingId: trainingResult.training.id,
        message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: ${trainingResult.training.id}.`,
        currentBalance: initialBalance - paymentAmount, // Return updated balance
      }
    } catch (error: any) {
      logger.error({
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        error: error.message,
        stack: error.stack,
        telegram_id: telegramId,
      })
      replicateTrainingCache.delete(cacheKey) // Ensure cache is cleared on any error exit

      // --- Refund Logic on Error ---
      if (balanceCheckResult?.success && calculatedCost?.stars) {
        const refundAmount = calculatedCost.stars
        logger.info({
          message: 'üí∏ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏',
          amount: refundAmount,
          telegram_id: telegramId,
        })
        try {
          await step.run('refund-user-on-error-refactored', async () => {
            const currentBalance = await fetchUserBalanceFromDB(
              String(telegramId)
            ) // Check balance again just in case
            if (currentBalance === null) {
              logger.error({
                message: 'Cannot refund: User balance not found!',
                telegram_id: telegramId,
              })
            } else {
              await updateUserBalanceInDB(
                String(telegramId),
                currentBalance + refundAmount,
                PaymentType.MONEY_INCOME,
                `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞–≤—à—É—é—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ ${effectiveModelName}`,
                {
                  /* metadata */
                }
              )
              logger.info({
                message: '‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã',
                amount: refundAmount,
                newBalance: currentBalance + refundAmount,
                telegram_id: telegramId,
              })
            }
          })
          await sendHelperMessage(
            is_ru === true
              ? `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${error.message}. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`
              : `An error occurred during training: ${error.message}. Funds have been refunded.`
          )
        } catch (refundError: any) {
          logger.error({
            message: 'CRITICAL: –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤!',
            refundError: refundError.message,
            originalError: error.message,
            telegram_id: telegramId,
          })
          await sendHelperMessage(
            is_ru === true
              ? `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (${error.message}), –ò –ù–ï –£–î–ê–õ–û–°–¨ –í–ï–†–ù–£–¢–¨ –°–†–ï–î–°–¢–í–ê! –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
              : `Training error (${error.message}), AND FAILED TO REFUND! Contact support urgently.`
          )
        }
      } else {
        await sendHelperMessage(
          is_ru === true
            ? `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${error.message}`
            : `An error occurred during training: ${error.message}`
        )
      }

      // Cancel active training if applicable (copied logic)
      if (activeTrainings.has(String(telegramId))) {
        activeTrainings.get(String(telegramId))?.cancel()
        logger.info({
          message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏',
          telegram_id: telegramId,
        })
        activeTrainings.delete(String(telegramId)) // Remove from map after canceling
      }

      // Rethrow the original error for Inngest to handle retries/failures
      // Use NonRetriableError for errors that shouldn't be retried (like validation, config issues)
      if (error instanceof NonRetriableError) {
        throw error
      } else {
        // Allow retries for potentially transient errors (DB connection, Replicate API hiccups)
        throw error // Rethrow the original error that triggered the main catch block
      }
    } // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ try...catch
  } // –ó–∞–∫—Ä—ã–≤–∞–µ–º async ({ event, step }) => { ... }
) // –ó–∞–∫—Ä—ã–≤–∞–µ–º inngest.createFunction
