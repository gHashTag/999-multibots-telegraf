import axios, { AxiosError, AxiosResponse } from 'axios'
import FormData from 'form-data'
import fs from 'fs'
import path from 'path'
import type { ModelTrainingRequest, ModelTrainingResponse, ModelTrainingInngestEventData } from '../types'
import type { DigitalAvatarBodyDependencies } from '../index'
import { MyContext } from '@/interfaces'
import { PaymentType } from '@/interfaces/payments.interface'

/* // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å logger
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ base64 (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
async function encodeFileToBase64(filePath: string): Promise<string> {
  try {
    const fileBuffer = fs.readFileSync(filePath)
    return fileBuffer.toString('base64')
  } catch (error) {
    // logger.error({ // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –±—ã —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
    //   message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64',
    //   error: (error as Error).message, 
    //   filePath,
    // })
    throw error
  }
}
*/

// –§—É–Ω–∫—Ü–∏—è-—Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
export function createModelTrainingService(dependencies: DigitalAvatarBodyDependencies) {
  const {
    inngest,
    logger,
    config,
    replicate,
    updateUserBalance,
    getUserBalance,
    sendTelegramMessage
  } = dependencies

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è URL
  async function uploadFileAndGetUrl(filePath: string): Promise<string> {
    try {
      const fileStats = fs.statSync(filePath)
      const fileSizeMB = fileStats.size / (1024 * 1024)

      logger.info({
        message: 'üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏',
        fileSizeMB: fileSizeMB.toFixed(2) + ' –ú–ë',
        fileSize: fileStats.size,
      })

      const fileName = path.basename(filePath)
      const timestamp = Date.now()
      
      const uploadBaseDir = config.CONFIG_UPLOAD_DIR || path.join(process.cwd(), 'uploads');
      const permanentDir = path.join(uploadBaseDir, 'training_archives');

      if (!fs.existsSync(permanentDir)) {
        fs.mkdirSync(permanentDir, { recursive: true })
      }

      const destFileName = `${path.parse(fileName).name}_${timestamp}${
        path.parse(fileName).ext
      }`
      const destPath = path.join(permanentDir, destFileName)

      fs.copyFileSync(filePath, destPath)
      
      const apiUrlForUpload = config.API_URL || 'http://localhost:3000';
      const fullUrl = `${apiUrlForUpload}/uploads/training_archives/${destFileName}`

      logger.info({
        message: '‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL',
        path: destPath,
        fullUrl,
        urlLength: fullUrl.length,
      })
      return fullUrl
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞',
        error: (error as Error).message, // –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É Error
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${(error as Error).message}`)
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ–∞–±—Ä–∏–∫–æ–π
  return async function modelTrainingService(
    requestData: ModelTrainingRequest,
    ctx: MyContext 
  ): Promise<ModelTrainingResponse> {
    const telegramId = requestData.telegram_id;
    const isRu = requestData.is_ru;

    // --- 1. –õ–æ–≥–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---
    const operationTypeForCost = PaymentType.NEURO_TRAIN_LORA;
    const cost = config.COSTS?.[operationTypeForCost];

    if (cost === undefined || cost === null) {
      logger.error({
        message: `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationTypeForCost} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`,
        telegramId,
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await sendTelegramMessage?.(
        telegramId,
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
          : '‚ùå Configuration error: could not determine the operation cost. Please notify an administrator.'
      );
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.',
        error: 'cost_configuration_error',
        details: `–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è ${operationTypeForCost} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
        cost: 0, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
      };
    }
    
    logger.info({
      message: `üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationTypeForCost}`,
      telegramId,
      cost,
    });
    // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---

    const USE_PLAN_B_DIRECT_CALL = process.env.USE_MODEL_TRAINING_PLAN_B === 'true'

    if (USE_PLAN_B_DIRECT_CALL) {
      // ================= PLAN B LOGIC (–ª–æ–∫–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Replicate) =================
      logger.info({
        message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ü–õ–ê–ù –ë (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Replicate)',
        requestData: { ...requestData, file_path: `${requestData.file_path.substring(0,20)}...` },
        cost, // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–ª—è –ü–ª–∞–Ω–∞ –ë
      })
      try {
        if (!fs.existsSync(requestData.file_path)) {
          throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–ü–ª–∞–Ω –ë): ' + requestData.file_path)
        }

        const zipUrl = await uploadFileAndGetUrl(requestData.file_path);
        logger.info({
          message: 'üîó –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è Replicate (–ü–ª–∞–Ω –ë)',
          model_name: requestData.model_name,
          telegramId: requestData.telegram_id,
          zipUrl: zipUrl,
        });

        const modelIdString = config.REPLICATE?.TRAINING_MODEL_ID || 'stability-ai/sdxl';
        const modelVersion = config.REPLICATE?.TRAINING_MODEL_VERSION || 'c221b2b8ef527988fb59bf24a8b97c4561f1c671f73bd389f866fe846a6de608';
        
        const [modelOwner, modelName] = modelIdString.split('/');
        if (!modelOwner || !modelName) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TRAINING_MODEL_ID: ${modelIdString}. –û–∂–∏–¥–∞–µ—Ç—Å—è 'owner/name'.`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ model_name –∏–∑ requestData –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if (!requestData.model_name || typeof requestData.model_name !== 'string' || requestData.model_name.trim() === '') {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ (model_name) –≤ –∑–∞–ø—Ä–æ—Å–µ.');
        }
        
        const webhookUrl = `${config.API_URL}/replicate-webhook/training-complete`;
        const replicateDestination = `neuroblogger/${requestData.model_name}` as const; // –ò—Å–ø–æ–ª—å–∑—É–µ–º as const –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ç–∏–ø–∞

        const trainingInput = {
          input_images: zipUrl,
          //lora_training_urls: zipUrl, // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫
          instance_prompt: `a photo of ${requestData.trigger_word} person`,
          class_prompt: 'a photo of a person',
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate
          // model_name: requestData.model_name, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
          // ckpt_base: 'sdxl_1_0.safetensors', // –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        };
        
        logger.info({ message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è Replicate (–ü–ª–∞–Ω –ë)', input: trainingInput, model: `${modelOwner}/${modelName}:${modelVersion}`, destination: replicateDestination, webhookUrl });

        const prediction = await replicate.trainings.create(
          modelOwner,
          modelName,
          modelVersion,
          {
            // destination: webhookUrl, // –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –ë–´–õ–û –ó–î–ï–°–¨
            destination: replicateDestination, // –ü–†–ê–í–ò–õ–¨–ù–û
            input: trainingInput,
            webhook: webhookUrl, // –ü–†–ê–í–ò–õ–¨–ù–û
            webhook_events_filter: ['completed'],
          }
        );
        
        logger.info({
          message: '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ Replicate —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ (–ü–ª–∞–Ω –ë)',
          replicateTrainingId: prediction.id,
          status: prediction.status,
          telegram_id: requestData.telegram_id,
        });
        
        if (fs.existsSync(requestData.file_path)) {
          await fs.promises.unlink(requestData.file_path).catch(e => logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª (–ü–ª–∞–Ω –ë)', { error: (e as Error).message }));
        }
        
        await ctx.replyWithHTML(requestData.is_ru ? `üöÄ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ (–ü–ª–∞–Ω –ë - Replicate) –∑–∞–ø—É—â–µ–Ω–∞!</b> ID: ${prediction.id}. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.` : `üöÄ <b>Model training (Plan B - Replicate) started!</b> ID: ${prediction.id}. Await notification.`);
        
        return { 
          success: true,
          message: '–ü–ª–∞–Ω –ë (Replicate) –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.', 
          replicateTrainingId: prediction.id,
          replicateStatus: prediction.status,
          cost,
        };

      } catch (error) {
        const errorMessage = axios.isAxiosError(error) && error.response?.data?.message 
          ? error.response.data.message 
          : (error as Error).message;

        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ü–õ–ê–ù–ê –ë (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Replicate)',
          error: errorMessage,
          stack: (error as Error).stack,
          requestData: { model_name: requestData.model_name, telegram_id: requestData.telegram_id },
        });
        
        // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
        // –í—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ (—Å—Ü–µ–Ω–∞) –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∏ —Ä–µ—à–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç.
        await sendTelegramMessage?.(telegramId, isRu ? `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è (–ü–ª–∞–Ω –ë): ${errorMessage}. –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.` : `‚ö†Ô∏è An error occurred starting training (Plan B): ${errorMessage}. If funds were debited, please contact support for a refund.`);
        
        if (fs.existsSync(requestData.file_path)) {
          await fs.promises.unlink(requestData.file_path).catch(e => logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ü–ª–∞–Ω–∞ –ë', { error: (e as Error).message }));
        }
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ü–ª–∞–Ω–∞ –ë (Replicate).',
          error: 'plan_b_replicate_error',
          details: errorMessage,
          cost,
        };
      }
    } else {
      // ================= PLAN A LOGIC (—á–µ—Ä–µ–∑ Inngest) =================
      logger.info({
        message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ü–õ–ê–ù –ê (Inngest)',
        requestData: { ...requestData, file_path: `${requestData.file_path.substring(0,20)}...` },
        cost, // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–ª—è –ü–ª–∞–Ω–∞ –ê
      });
      try {
        if (!fs.existsSync(requestData.file_path)) {
          throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–ü–ª–∞–Ω –ê): ' + requestData.file_path);
        }

        const zipUrlForInngest = await uploadFileAndGetUrl(requestData.file_path);
        logger.info({
          message: 'üîó –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è Inngest (–ü–ª–∞–Ω –ê)',
          model_name: requestData.model_name,
          telegramId: requestData.telegram_id,
          zipUrl: zipUrlForInngest,
        });

        const eventPayload: ModelTrainingInngestEventData = {
          telegram_id: requestData.telegram_id,
          bot_name: requestData.bot_name,
          model_name: requestData.model_name,
          trigger_word: requestData.trigger_word,
          zipUrl: zipUrlForInngest,
          is_ru: requestData.is_ru,
          cost_for_refund: cost, 
          operation_type_for_refund: operationTypeForCost,
          original_message_id: ctx.message?.message_id,
          chat_id: ctx.chat?.id
        };
        
        const result = await inngest.send({
          name: 'digital-avatar-body/model-training.requested',
          data: eventPayload
        });

        logger.info('–°–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest (–ü–ª–∞–Ω –ê)', { eventName: 'digital-avatar-body/model-training.requested', eventIds: result.ids });

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
        if (fs.existsSync(requestData.file_path)) {
          await fs.promises.unlink(requestData.file_path).catch(e => logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª (–ü–ª–∞–Ω –ê) –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞', { error: (e as Error).message, filePath: requestData.file_path }));
        }

        if (ctx.message?.message_id && ctx.chat?.id) {
          await sendTelegramMessage?.(
            telegramId,
            isRu
              ? `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ "${requestData.model_name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É (–ü–ª–∞–Ω –ê). ID —Å–æ–±—ã—Ç–∏—è: ${result.ids?.[0]}. –í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.`
              : `‚úÖ Model training request "${requestData.model_name}" successfully sent for processing (Plan A). Event ID: ${result.ids?.[0]}. You will be notified upon completion.`
          );
        }

        return {
          success: true,
          message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É (–ü–ª–∞–Ω –ê).',
          eventId: result.ids?.[0],
          cost: cost,
        };
      } catch (error) {
        const errorMessage = axios.isAxiosError(error) && error.response?.data?.message 
          ? error.response.data.message 
          : (error as Error).message;

        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ü–õ–ê–ù–ê –ê (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Inngest)',
          error: errorMessage,
          stack: (error as Error).stack,
          requestData: { model_name: requestData.model_name, telegram_id: requestData.telegram_id },
        })

        // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
        // –í—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ (—Å—Ü–µ–Ω–∞) –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∏ —Ä–µ—à–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç.
        await sendTelegramMessage?.(telegramId, isRu ? `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ (–ü–ª–∞–Ω –ê): ${errorMessage}. –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.` : `‚ö†Ô∏è An error occurred sending training request (Plan A): ${errorMessage}. If funds were debited, please contact support for a refund.`);

        if (fs.existsSync(requestData.file_path)) {
          await fs.promises.unlink(requestData.file_path).catch(e => logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ü–ª–∞–Ω–∞ –ê', { error: (e as Error).message }));
        }
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest (–ü–ª–∞–Ω –ê).',
          error: 'plan_a_inngest_send_error',
          details: errorMessage,
          cost,
        }
      }
    }
  }
} 