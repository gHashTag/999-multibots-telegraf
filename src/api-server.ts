import { startFastifyServer } from './fastify-server'
import { logger } from '@/utils/logger'
import { API_SERVER_URL, PORT } from '@/config'

// –ü–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000
const port = parseInt(PORT || '3000', 10)

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä.
 */
async function startApiServer() {
  try {
    logger.info('Starting API server...')
    // –ó–∞–ø—É—Å–∫–∞–µ–º Fastify —Å–µ—Ä–≤–µ—Ä
    await startFastifyServer(port)

    logger.info(
      `üì° API Server URL: ${API_SERVER_URL || `http://localhost:${port}`}`
    )
    logger.info('‚úÖ API Server started successfully')
  } catch (error) {
    logger.error('‚ùå Failed to start API server:', error)
    process.exit(1) // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startApiServer().catch(error => {
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    logger.error('Unhandled error starting API server:', error)
    process.exit(1)
  })
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
export default startApiServer
