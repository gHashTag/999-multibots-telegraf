import { TestResult } from './types'
import { logger } from '@/utils/logger'
import { MyContext } from '@/interfaces'
import { ZepClient } from '@/core/zep'

interface TestMemoryConfig {
  sessionId: string
  messages: Array<{
    role: 'user' | 'assistant'
    content: string
  }>
}

export async function testZepMemory(): Promise<TestResult> {
  const results: TestResult = {
    name: '–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞',
    success: true,
    message: '–¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
    error: undefined,
    details: {},
    metadata: {
      startTime: Date.now(),
      testType: 'memory'
    }
  }

  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞:', {
    description: 'Starting chat memory tests'
  })

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ sessionId
    const mockContext = {
      from: { id: 123456 },
      botInfo: { username: 'test_bot' },
    } as MyContext

    const expectedSessionId = `${mockContext.from?.id}_${mockContext.botInfo?.username}`
    
    if (expectedSessionId !== '123456_test_bot') {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è sessionId'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 1 - –°–æ–∑–¥–∞–Ω–∏–µ sessionId –ø—Ä–æ–π–¥–µ–Ω:', {
      description: 'SessionId creation test passed',
      sessionId: expectedSessionId
    })

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏
    const zepClient = ZepClient.getInstance()
    const testConfig: TestMemoryConfig = {
      sessionId: expectedSessionId,
      messages: [
        { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç!' },
        { role: 'assistant', content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' }
      ]
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
    await zepClient.saveMemory(testConfig.sessionId, {
      messages: testConfig.messages
    })

    logger.info('‚úÖ –¢–µ—Å—Ç 2.1 - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', {
      description: 'Memory saved successfully',
      config: testConfig
    })

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    const loadedMemory = await zepClient.getMemory(testConfig.sessionId)
    
    if (!loadedMemory) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ü–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
      return results
    }

    if (loadedMemory.messages.length !== testConfig.messages.length) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
      return results
    }

    if (loadedMemory.messages[0].content !== testConfig.messages[0].content) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 2.2 - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–∞:', {
      description: 'Memory loaded successfully',
      loadedMemory
    })

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
    await zepClient.clearMemory(testConfig.sessionId)
    const clearedMemory = await zepClient.getMemory(testConfig.sessionId)

    if (clearedMemory !== null) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ü–∞–º—è—Ç—å –Ω–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 3 - –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —É—Å–ø–µ—à–Ω–∞:', {
      description: 'Memory cleared successfully'
    })

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    try {
      await zepClient.saveMemory('', { messages: [] })
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º sessionId'
      return results
    } catch (error) {
      logger.info('‚úÖ –¢–µ—Å—Ç 4 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É—Å–ø–µ—à–Ω–∞:', {
        description: 'Error handling test passed',
        error: error instanceof Error ? error.message : String(error)
      })
    }

    results.metadata = {
      ...results.metadata,
      endTime: Date.now()
    }

    results.details = {
      testsRun: 4,
      sessionIdTested: expectedSessionId,
      memorySizeChecked: testConfig.messages.length
    }

    logger.info('üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', {
      description: 'All tests completed successfully',
      success: results.success,
      details: results.details
    })

  } catch (error) {
    results.success = false
    results.error = `‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error during test execution',
      error: error instanceof Error ? error.message : String(error)
    })
  }

  return results
} 