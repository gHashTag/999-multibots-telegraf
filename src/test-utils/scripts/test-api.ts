import { runAllApiTests, runApiTests } from '../tests/api'
import { logger } from '@/utils/logger'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API
 */
async function main() {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
    description: 'Starting API tests',
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2)
    const detailed = args.includes('--detailed')

    if (detailed) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
      const result = await runApiTests({ generateReport: true })

      if (result.report) {
        console.log('\n' + result.report + '\n')
      }

      if (result.success) {
        logger.info({
          message: '‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          description: 'API testing completed successfully',
        })
        process.exit(0)
      } else {
        logger.error({
          message: '‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏',
          description: 'API testing completed with errors',
        })
        process.exit(1)
      }
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ API —Ç–µ—Å—Ç—ã
      const results = await runAllApiTests()

      const successCount = results.filter(r => r.success).length
      const totalCount = results.length

      logger.info({
        message: `üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ${successCount}/${totalCount} —É—Å–ø–µ—à–Ω–æ`,
        description: `API testing results: ${successCount}/${totalCount} successful`,
      })

      if (successCount === totalCount) {
        process.exit(0)
      } else {
        process.exit(1)
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${errorMessage}`,
      description: `Critical error during API testing: ${errorMessage}`,
      stack: error instanceof Error ? error.stack : undefined,
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main()
}
