import { logger } from '@/utils/logger'
import { TestRunner } from '@/test-utils/core/TestRunner'
import assert from '@/test-utils/core/assert'

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ Inngest-—Ñ—É–Ω–∫—Ü–∏–∏
 * @param fn –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * @param eventName –ò–º—è —Å–æ–±—ã—Ç–∏—è Inngest
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
 */
export const createInngestTest = (
  fn: Function,
  eventName: string,
  params: Record<string, any>
) => {
  const testRunner = new TestRunner(`Inngest Test: ${eventName}`)

  testRunner.test('–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', async () => {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞:', {
      event: eventName,
      params
    })

    const result = await fn(params)
    assert(result.success, '–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ')
  })

  testRunner.test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Inngest', async () => {
    const paramsWithError = {
      ...params,
      _test: { inngest_error: true }
    }

    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –æ—à–∏–±–∫–æ–π:', {
      event: eventName,
      params: paramsWithError
    })

    const result = await fn(paramsWithError)
    assert(!result.success, '–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É')
    assert(result.error !== undefined, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ')
  })

  return testRunner
} 