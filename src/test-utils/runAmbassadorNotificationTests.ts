import { logger } from '@/utils/logger'
import { runTests } from './runTests'
import { testAmbassadorNotifications } from './tests/payment/ambassadorNotificationTest'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º
 */
export async function runAmbassadorNotificationTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º', {
    description: 'Running ambassador notification tests',
  })

  try {
    const results = await runTests([
      testAmbassadorNotifications,
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º
    ])

    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const totalTests = results.length

    if (failedTests === 0) {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', {
        description: 'All ambassador notification tests passed successfully',
        passedTests,
        totalTests,
      })
    } else {
      logger.error('‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º', {
        description: 'Some ambassador notification tests failed',
        passedTests,
        failedTests,
        totalTests,
      })
    }

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º', {
      description: 'Error running ambassador notification tests',
      error: error instanceof Error ? error.message : String(error),
    })

    throw error
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runAmbassadorNotificationTests()
    .then(() => {
      process.exit(0)
    })
    .catch(error => {
      logger.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º',
        {
          description: 'Critical error running ambassador notification tests',
          error: error instanceof Error ? error.message : String(error),
        }
      )
      process.exit(1)
    })
}
