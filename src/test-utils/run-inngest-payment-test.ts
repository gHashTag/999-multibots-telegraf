import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { inngestTestEngine } from './test-config'
import { ModeEnum } from '@/price/helpers/modelsCost'

export async function runInngestPaymentTest(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const testUserId = '123456789'

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ Inngest', {
      description: 'Starting payment system tests via Inngest',
      test_user_id: testUserId,
    })

    // –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const depositAmount = 100
    await inngestTestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testUserId,
        amount: depositAmount,
        type: 'money_income',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
        bot_name: 'test_bot',
        service_type: ModeEnum.TopUpBalance,
      },
    })

    logger.info('üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance deposit request sent',
      amount: depositAmount,
      user_id: testUserId,
    })

    results.push({
      name: '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      success: true,
      message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${depositAmount} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`,
    })

    // –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const withdrawAmount = 50
    await inngestTestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testUserId,
        amount: withdrawAmount,
        type: 'money_expense',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
        bot_name: 'test_bot',
        service_type: ModeEnum.TextToVideo,
      },
    })

    logger.info('üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Balance withdrawal request sent',
      amount: withdrawAmount,
      user_id: testUserId,
    })

    results.push({
      name: '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
      success: true,
      message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ ${withdrawAmount} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`,
    })

    return results
  } catch (error) {
    const err = error instanceof Error ? error : new Error(String(error))

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Error in payment system tests',
      error: err.message,
      stack: err.stack,
    })

    results.push({
      name: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${err.message}`,
      error: err,
    })

    return results
  }
}
