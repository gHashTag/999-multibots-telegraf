/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ–æ
 */
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { TestResult } from './test-config'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { inngest } from '@/inngest-functions/clients'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
export async function testTextToVideoProcessing(): Promise<TestResult[]> {
  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Text-to-Video', {
    description: 'Running Text-to-Video tests',
  })

  const results: TestResult[] = []

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const validTest = await testValidTextToVideo()
    results.push(validTest)

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    const insufficientBalanceTest = await testInsufficientBalance()
    results.push(insufficientBalanceTest)

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const invalidParamsTest = await testInvalidParams()
    results.push(invalidParamsTest)

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API
    const apiErrorTest = await testApiError()
    results.push(apiErrorTest)

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
    const invalidModelTest = await testInvalidModel()
    results.push(invalidModelTest)

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Text-to-Video –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
      description: 'All Text-to-Video tests completed',
      results,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ Text-to-Video', {
      description: 'Error running Text-to-Video tests',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    results.push({
      name: 'Text-to-Video Tests',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return results
  }
}

/**
 * –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
async function testValidTextToVideo(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞', {
      description: 'Starting valid text-to-video test',
    })

    const testData = {
      prompt: 'A beautiful sunset over the ocean',
      telegram_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      model_id: 'wan-text-to-video', // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      is_ru: true,
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞', {
      description: 'Checking test data',
      testData,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: 'text-to-video.requested',
      data: testData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ text-to-video.requested –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Event text-to-video.requested sent',
      eventId,
    })

    return {
      name: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞', {
      description: 'Error in valid text-to-video test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
 */
async function testInsufficientBalance(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º', {
      description: 'Starting text-to-video test with insufficient balance',
    })

    // –î–∞–Ω–Ω—ã–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ñ–ª–∞–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const testData = {
      prompt: 'A beautiful sunset over the ocean',
      telegram_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      model_id: 'wan-text-to-video',
      is_ru: true,
      _test: {
        insufficient_balance: true,
      },
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Checking insufficient balance test data',
      testData,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: 'text-to-video.requested',
      data: testData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ text-to-video.requested –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å)', {
      description: 'Event text-to-video.requested sent (insufficient balance)',
      eventId,
    })

    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º', {
      description: 'Error in insufficient balance text-to-video test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
async function testInvalidParams(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', {
      description: 'Starting text-to-video test with invalid parameters',
    })

    // –î–∞–Ω–Ω—ã–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const testData = {
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prompt
      telegram_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      is_ru: true,
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', {
      description: 'Checking invalid parameters test data',
      testData,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: 'text-to-video.requested',
      data: testData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ text-to-video.requested –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)', {
      description: 'Event text-to-video.requested sent (invalid parameters)',
      eventId,
    })

    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', {
      description: 'Error in invalid parameters text-to-video test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π API
 */
async function testApiError(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API', {
      description: 'Starting API error test',
    })

    // –î–∞–Ω–Ω—ã–µ —Å —Ñ–ª–∞–≥–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ API
    const testData = {
      prompt: 'A beautiful sunset over the ocean',
      telegram_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      model_id: 'wan-text-to-video',
      is_ru: true,
      _test: {
        api_error: true,
      },
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—à–∏–±–∫–∏ API', {
      description: 'Checking API error test data',
      testData,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: 'text-to-video.requested',
      data: testData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ text-to-video.requested –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ—à–∏–±–∫–∞ API)', {
      description: 'Event text-to-video.requested sent (API error)',
      eventId,
    })

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API',
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API', {
      description: 'Error in API error test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
 */
async function testInvalidModel(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏', {
      description: 'Starting test for non-existent model',
    })

    // –î–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
    const testData = {
      prompt: 'A beautiful sunset over the ocean',
      telegram_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      model_id: 'non-existent-model',
      is_ru: true,
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏', {
      description: 'Checking non-existent model test data',
      testData,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const eventId = await inngest.send({
      name: 'text-to-video.requested',
      data: testData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ text-to-video.requested –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å)', {
      description: 'Event text-to-video.requested sent (non-existent model)',
      eventId,
    })

    return {
      name: '–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏',
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏', {
      description: 'Error in non-existent model test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: '–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
} 