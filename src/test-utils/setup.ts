import dotenv from 'dotenv'
import path from 'path'
import mockApi from './core/mock'
import * as database from '@/libs/database'
import { logger } from '@/utils/logger'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
import './types/global'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.NODE_ENV = 'test'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
dotenv.config({ 
  path: path.resolve(process.cwd(), '.env.test'),
  override: true
})

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫-–∫–ª—é—á –¥–ª—è ElevenLabs API
process.env.ELEVENLABS_API_KEY = 'mock_key'

// –ú–æ–∫–∞–µ–º ElevenLabs API
const { elevenlabs } = require('./mocks/elevenlabs.mock')

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
;(global as any).elevenlabs = elevenlabs

// Configure logger for testing
logger.level = process.env.LOG_LEVEL || 'error'

// Mock database functions
Object.defineProperty(database, 'getUserSub', {
  value: mockApi.create(),
  configurable: true,
})

Object.defineProperty(database, 'getUserBalance', {
  value: mockApi.create(),
  configurable: true,
})

Object.defineProperty(database, 'getUser', {
  value: mockApi.create(),
  configurable: true,
})

Object.defineProperty(database, 'updateUserSettings', {
  value: mockApi.create(),
  configurable: true,
})

Object.defineProperty(database, 'getUserBalanceNotificationSettings', {
  value: mockApi.create(),
  configurable: true,
})

Object.defineProperty(database, 'updateUserBalanceNotificationSettings', {
  value: mockApi.create(),
  configurable: true,
})

// Add more mocks as needed

logger.info('üõ† –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')

console.log('üîß Test environment setup complete')
