import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { generateInvId } from '@/utils/generateInvId'
import { TEST_CONFIG } from './test-config'

const runRuPaymentTest = async () => {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest', {
      description: 'Starting RU payment system testing via Inngest',
    })

    const telegram_id = Date.now().toString()
    const amount = 500 // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    const operation_id = generateInvId(telegram_id, amount)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await inngest.send({
      name: 'ru-payment/process-payment',
      data: {
        IncSum: amount,
        inv_id: operation_id,
        telegram_id,
        bot_name: 'test_bot',
        description: 'test ru payment',
        metadata: {
          service_type: 'System',
          test: true,
        },
      },
    })

    logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Test event sent',
      telegram_id,
      operation_id,
    })

    // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    let attempts = 0
    const maxAttempts = 5
    const checkInterval = TEST_CONFIG.CHECK_INTERVAL

    while (attempts < maxAttempts) {
      attempts++

      logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Checking payment status',
        attempt: attempts,
        telegram_id,
        operation_id,
      })

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
      logger.info('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        description: 'Payment not found',
        operation_id,
        attempt: attempts,
        telegram_id,
      })

      if (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, checkInterval))
      }
    }

    logger.info('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
      description: 'Operation timeout',
      operation_id,
      attempts,
    })

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error during money_income operation',
      telegram_id,
      operation_id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä—É—Å—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π', {
      description: 'Error in RU payment test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })
    throw error
  }
}

runRuPaymentTest().catch(console.error)
