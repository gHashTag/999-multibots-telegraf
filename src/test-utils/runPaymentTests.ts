import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { runBalanceTests } from './tests/payment/balance.test'
import { runTransactionTests } from './tests/payment/transaction.test'
import { runPaymentFormTests } from './tests/payment/paymentForm.test'

async function runAllPaymentTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
  
  const results: TestResult[] = []
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞
    const balanceResults = await runBalanceTests()
    results.push(...balanceResults)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionResults = await runTransactionTests()
    results.push(...transactionResults)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
    const formResults = await runPaymentFormTests()
    results.push(...formResults)
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = totalTests - passedTests
    
    logger.info(`
      ‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:
      ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}
      ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failedTests}
      üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}
    `)
    
    return results
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤', {
      error: error instanceof Error ? error.message : String(error)
    })
    return [{
      success: false,
      name: 'Payment System Tests',
      message: 'Failed to run payment tests'
    }]
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllPaymentTests()
}
