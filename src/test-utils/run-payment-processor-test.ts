/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
import { Logger as logger } from '@/utils/logger'
import { testPaymentProcessor } from './tests/paymentProcessor.test'

async function runTest() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
    description: 'Starting payment processor test',
  })

  try {
    const result = await testPaymentProcessor()

    if (result.success) {
      logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        description: 'Test completed successfully',
        name: result.name,
      })
      process.exit(0)
    } else {
      logger.error('‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
        description: 'Test failed',
        name: result.name,
        message: result.message,
      })
      process.exit(1)
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Error running test',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    process.exit(1)
  }
}

runTest()
