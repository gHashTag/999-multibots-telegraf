import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { TestResult } from './types'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export class DatabaseTester {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async testConnection(): Promise<TestResult> {
    try {
      const { count, error } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true })

      if (error) {
        throw new Error(error.message)
      }

      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        description: 'Database connection test',
        count,
      })

      return {
        name: 'Database Connection Test',
        success: true,
        message: `–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`,
        startTime: Date.now(),
      }
    } catch (err) {
      const error = err instanceof Error ? err : new Error(String(err))

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        description: 'Database connection error',
        error,
      })

      return {
        name: 'Database Connection Test',
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        error,
        startTime: Date.now(),
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID
   */
  async testTrainingExists(trainingId: string): Promise<TestResult> {
    const testName = `Training existence test: ${trainingId}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        description: 'Training existence test',
        trainingId,
      })

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      const { data, error } = await supabase
        .from('model_trainings')
        .select('*')
        .eq('replicate_training_id', trainingId)
        .limit(1)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          // –ö–æ–¥ –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          return {
            name: testName,
            success: false,
            message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${trainingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
            startTime: Date.now(),
          }
        }
        throw new Error(error.message)
      }

      logger.info({
        message: '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞',
        description: 'Training found',
        training: {
          id: data.id,
          modelName: data.model_name,
          status: data.status,
          createdAt: data.created_at,
        },
      })

      return {
        name: testName,
        success: true,
        message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${trainingId} –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
        startTime: Date.now(),
      }
    } catch (err) {
      const error = err instanceof Error ? err : new Error(String(err))

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        description: 'Error during training existence test',
        error,
        trainingId,
      })

      return {
        name: testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        error,
        startTime: Date.now(),
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testUserTrainings(telegramId: string): Promise<TestResult> {
    const testName = `User trainings test: ${telegramId}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'User trainings test',
        telegramId,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await supabase
        .from('model_trainings')
        .select('*')
        .eq('telegram_id', telegramId)
        .order('created_at', { ascending: false })
        .limit(5)

      if (error) {
        throw new Error(error.message)
      }

      const trainingsCount = data.length

      const trainings = data.map(t => ({
        id: t.id,
        modelName: t.model_name,
        status: t.status,
        createdAt: t.created_at,
      }))

      logger.info({
        message: '‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã',
        description: 'User trainings retrieved',
        trainings,
      })

      return {
        name: testName,
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${trainingsCount} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
        startTime: Date.now(),
      }
    } catch (err) {
      const error = err instanceof Error ? err : new Error(String(err))

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'Error during user trainings test',
        error,
        telegramId,
      })

      return {
        name: testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        error,
        startTime: Date.now(),
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connectionResult = await this.testConnection()
    results.push(connectionResult)

    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (connectionResult.success) {
      // –¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const trainingResult = await this.testTrainingExists('test-training-1')
      results.push(trainingResult)

      // –¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTrainingsResult = await this.testUserTrainings('123456789')
      results.push(userTrainingsResult)
    }

    return results
  }
}
