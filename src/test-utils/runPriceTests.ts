import { runPriceCalculationTests } from './tests/price/priceCalculationTest'
import { logger } from '@/utils/logger'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 */
async function runAllTests() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const results = await runPriceCalculationTests()

    // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const successCount = results.filter(r => r.success).length
    const totalCount = results.length

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:`)
    logger.info(`   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalCount}`)
    logger.info(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}`)
    logger.info(`   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalCount - successCount}`)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
    if (successCount < totalCount) {
      const failedTests = results.filter(r => !r.success)

      logger.error('‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:')
      failedTests.forEach((test, index) => {
        logger.error(`   ${index + 1}. ${test.name}: ${test.message}`)
      })

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
      process.exit(1)
    }

    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
    process.exit(0)
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runAllTests()
}
