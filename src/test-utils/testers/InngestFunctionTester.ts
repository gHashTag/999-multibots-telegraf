import { InngestTester } from '../inngest/inngest-tests.test'
import { InngestFunctionTester as BaseInngestFunctionTester } from '../core/InngestFunctionTester'
import { logger } from '@/utils/logger'

/**
 * –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export enum InngestTestMethod {
  ModelTraining = 'testModelTraining',
  ModelTrainingV2 = 'testModelTrainingV2',
  NeuroImageGeneration = 'testNeuroImageGeneration',
  NeuroPhotoV2Generation = 'testNeuroPhotoV2Generation',
  TextToImage = 'testTextToImage',
  TextToVideo = 'testTextToVideo',
  VoiceAvatarCreation = 'testVoiceAvatarCreation',
  TextToSpeech = 'testTextToSpeech',
  PaymentProcessorIncome = 'testPaymentProcessorIncome',
  PaymentProcessorExpense = 'testPaymentProcessorExpense',
  RunAllTests = 'runAllTests',
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ Inngest —Ñ—É–Ω–∫—Ü–∏–∏
 */
export interface InngestTestResult {
  success: boolean
  message?: string
  data?: unknown
  error?: Error | string
  duration?: number
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
 */
export interface InngestTestData {
  [key: string]: unknown
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–∞ Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export interface InngestFunctionTestInput {
  method?: InngestTestMethod | string
  data?: InngestTestData
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export interface InngestFunctionTesterOptions {
  name?: string
  verbose?: boolean
  timeout?: number
}

/**
 * –¢–µ—Å—Ç–µ—Ä –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 *
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º InngestTester –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class InngestFunctionTester extends BaseInngestFunctionTester<
  InngestFunctionTestInput,
  InngestTestResult
> {
  private inngestTester: InngestTester;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É
  [key: string]: unknown

  constructor(options: Partial<InngestFunctionTesterOptions> = {}) {
    super('inngest/function.test', {
      name: options.name || 'Inngest Function Tester',
      verbose: options.verbose || false,
    })

    this.inngestTester = new InngestTester()
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async testModelTraining(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      description: 'Testing model training function',
    })

    try {
      const result = await this.inngestTester.testModelTraining()
      return {
        success: true,
        message: '–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
   */
  async testModelTrainingV2(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
      description: 'Testing model training V2 function',
    })

    try {
      const result = await this.inngestTester.testModelTrainingV2()
      return {
        success: true,
        message: '–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
   */
  async testNeuroImageGeneration(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: 'Testing neuro image generation function',
    })

    try {
      const result = await this.inngestTester.testNeuroImageGeneration()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
   */
  async testNeuroPhotoV2Generation(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
      description: 'Testing neurophoto V2 generation function',
    })

    try {
      const result = await this.inngestTester.testNeuroPhotoV2Generation()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async testTextToImage(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      description: 'Testing text to image function',
    })

    try {
      const result = await this.inngestTester.testTextToImage()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message:
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ
   */
  async testTextToVideo(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ',
      description: 'Testing text to video function',
    })

    try {
      const result = await this.inngestTester.testTextToVideo()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
   */
  async testVoiceAvatarCreation(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      description: 'Testing voice avatar creation function',
    })

    try {
      const result = await this.inngestTester.testVoiceAvatarCreation()
      return {
        success: true,
        message: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å
   */
  async testTextToSpeech(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å',
      description: 'Testing text to speech function',
    })

    try {
      const results = await this.inngestTester.runTextToSpeechTests()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: results[0], // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
   */
  async testPaymentProcessorIncome(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)',
      description: 'Testing payment processor income function',
    })

    try {
      const result = await this.inngestTester.testPaymentProcessorIncome()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message:
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ)
   */
  async testPaymentProcessorExpense(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ)',
      description: 'Testing payment processor expense function',
    })

    try {
      const result = await this.inngestTester.testPaymentProcessorExpense()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ)',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)
   */
  async testPaymentProcessorDirectInvoke(): Promise<InngestTestResult> {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Testing direct invoke payment processor function',
    })

    try {
      const result = await this.inngestTester.testPaymentProcessorDirectInvoke()
      return {
        success: true,
        message: '–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        data: result,
      }
    } catch (error) {
      return {
        success: false,
        message:
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞',
        error: error instanceof Error ? error : String(error),
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
   */
  async testAllPaymentProcessorFunctions(): Promise<InngestTestResult[]> {
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
      description: 'Running all payment processor function tests',
    })

    const results: InngestTestResult[] = []

    try {
      // –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      const incomeResult = await this.testPaymentProcessorIncome()
      results.push(incomeResult)

      // –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
      const expenseResult = await this.testPaymentProcessorExpense()
      results.push(expenseResult)

      // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
      const directResult = await this.testPaymentProcessorDirectInvoke()
      results.push(directResult)

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
        description: 'Error running payment processor function tests',
        error: error instanceof Error ? error.message : String(error),
      })

      return [
        {
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
          error: error instanceof Error ? error : String(error),
        },
      ]
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π)
   */
  async runAllTests(): Promise<InngestTestResult[]> {
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
      description: 'Running all Inngest function tests',
    })

    const results: InngestTestResult[] = []

    try {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
      const standardResults = await this.inngestTester.runAllTests()
      for (const result of standardResults) {
        results.push({
          success: result.success,
          message: result.message,
          data: result.details,
          error: result.error,
          duration: result.duration,
        })
      }

      // –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ runAllTests –≤ InngestTester)

      return results
    } catch (error) {
      return [
        {
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤',
          error: error instanceof Error ? error : String(error),
        },
      ]
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
   */
  protected async executeTest(
    input: InngestFunctionTestInput
  ): Promise<InngestTestResult> {
    const methodName = input.method || InngestTestMethod.RunAllTests

    if (typeof this[methodName] === 'function') {
      try {
        return await this[methodName](input.data)
      } catch (error) {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ ${methodName}`,
          error: error instanceof Error ? error : String(error),
        }
      }
    }

    return {
      success: false,
      message: `–ú–µ—Ç–æ–¥ ${methodName} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
      error: new Error(`Method ${methodName} not found`),
    }
  }
}
