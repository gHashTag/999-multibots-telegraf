import { logger } from '@/utils/logger'
import { MyContext } from '@/interfaces/telegram-bot.interface'
import { createMockBot, MockTelegraf } from '../mocks/botMock'
import { createMockContext } from '../helpers/createMockContext'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegraf –±–æ—Ç–æ–≤
 */
export class TelegrafBotTester {
  bot: MockTelegraf
  mockContexts: Map<number, MyContext> = new Map()

  constructor(token: string = 'test_token') {
    this.bot = createMockBot(token)
    logger.info('ü§ñ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Telegraf –±–æ—Ç–∞', {
      description: 'Created Telegraf bot tester',
      token,
    })
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  createUserContext(
    userId: number,
    options: Parameters<typeof createMockContext>[0] = {}
  ): MyContext {
    const context = createMockContext({
      userId,
      ...options,
    })

    this.mockContexts.set(userId, context)
    logger.info('üë§ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Created user context',
      userId,
    })

    return context
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserContext(
    userId: number,
    options: Parameters<typeof createMockContext>[0] = {}
  ): MyContext {
    if (this.mockContexts.has(userId)) {
      return this.mockContexts.get(userId)!
    }

    return this.createUserContext(userId, options)
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç—É
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async simulateMessage(userId: number, text: string): Promise<MyContext> {
    const context = this.getUserContext(userId, { messageText: text })

    logger.info('üì© –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Simulating message from user',
      userId,
      text,
    })

    return context
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getSentMessages(userId: number): any[] {
    const context = this.getUserContext(userId)
    return (context as any).sentReplies || []
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param text –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
   */
  hasMessageWithText(userId: number, text: string): boolean {
    const messages = this.getSentMessages(userId)
    return messages.some(msg => msg.text && msg.text.includes(text))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param buttonText –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
   */
  hasInlineButton(userId: number, buttonText: string): boolean {
    const messages = this.getSentMessages(userId)

    return messages.some(msg => {
      const keyboard = msg.extra?.reply_markup?.inline_keyboard
      if (!keyboard) return false

      return keyboard.some((row: any[]) =>
        row.some((button: any) => button.text === buttonText)
      )
    })
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param buttonText –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param callbackData –î–∞–Ω–Ω—ã–µ callback (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
   * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
   */
  async simulateInlineButtonClick(
    userId: number,
    buttonText: string,
    callbackData?: string
  ): Promise<MyContext> {
    const context = this.getUserContext(userId)
    const messages = this.getSentMessages(userId)

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    for (const msg of messages) {
      const keyboard = msg.extra?.reply_markup?.inline_keyboard
      if (!keyboard) continue

      let buttonFound = false
      let data = callbackData

      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
      for (const row of keyboard) {
        for (const button of row) {
          if (button.text === buttonText) {
            // –ï—Å–ª–∏ callbackData –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data –∏–∑ –∫–Ω–æ–ø–∫–∏
            if (!data && button.callback_data) {
              data = button.callback_data
            }
            buttonFound = true
            break
          }
        }
        if (buttonFound) break
      }

      if (buttonFound && data) {
        logger.info('üëÜ –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É', {
          description: 'Simulating inline button click',
          userId,
          buttonText,
          callbackData: data,
        })

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç callback_query –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.callbackQuery = {
          id: `mock_${Date.now()}`,
          from: context.from!,
          chat_instance: `mock_chat_${userId}`,
          message: msg,
          data,
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ answerCbQuery
        context.answerCbQuery = async (text?: string) => {
          logger.info('‚úì –û—Ç–≤–µ—Ç –Ω–∞ callback query', {
            description: 'Answer to callback query',
            text,
          })
          return true
        }

        return context
      }
    }

    throw new Error(`–ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearMessages(userId: number): void {
    const context = this.getUserContext(userId)
    ;(context as any).sentReplies = []

    logger.info('üßπ –û—á–∏—â–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Cleared messages for user',
      userId,
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ü–µ–Ω—É
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param sceneId ID —Å—Ü–µ–Ω—ã
   * @returns true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω–µ
   */
  isInScene(userId: number, sceneId: string): boolean {
    const context = this.getUserContext(userId)
    return context.session.__scenes.current === sceneId
  }
}
