import { logger } from '@/utils/logger'
import { testCache } from './tests/cache.test'
import { runAllPaymentTests } from './tests/payment.test'
import { testChatWithAvatar } from './tests/chatWithAvatar.test'
import { runClientsMigrationTests } from './tests/clients-migration.test'

async function runTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:', {
    description: 'Starting all tests'
  })

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cacheResults = await testCache()
    if (!cacheResults.success) {
      logger.error('‚ùå –¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
        description: 'Cache tests failed',
        error: cacheResults.error
      })
      process.exit(1)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
    const paymentResults = await runAllPaymentTests()
    if (paymentResults.some(result => !result.success)) {
      logger.error('‚ùå –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
        description: 'Payment tests failed',
        results: paymentResults
      })
      process.exit(1)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    const chatResults = await testChatWithAvatar()
    if (!chatResults.success) {
      logger.error('‚ùå –¢–µ—Å—Ç—ã —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
        description: 'Chat tests failed',
        error: chatResults.error
      })
      process.exit(1)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const migrationResults = await runClientsMigrationTests()
    if (migrationResults.some(result => !result.success)) {
      logger.error('‚ùå –¢–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
        description: 'Client migration tests failed',
        results: migrationResults
      })
      process.exit(1)
    }

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
      description: 'All tests passed successfully',
      results: {
        cache: cacheResults,
        payment: paymentResults,
        chat: chatResults,
        migration: migrationResults
      }
    })

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error)
    })
    process.exit(1)
  }
}

runTests() 