import { logger } from '@/utils/logger'
import { TestResult } from './core/types'
// –£—Å–ª–æ–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã - —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
import { runSystemTests } from './tests/system'

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
const runNeuroTests = async (): Promise<TestResult[]> => []
const runDatabaseTests = async (): Promise<TestResult[]> => []
const runWebhookTests = async (): Promise<TestResult[]> => []
const runApiTests = async (): Promise<TestResult[]> => []

import { TestRunner } from './core/TestRunner'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤:
 * - tests/neuro - —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π
 * - tests/database - —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * - tests/webhooks - —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
 * - tests/api - —Ç–µ—Å—Ç—ã API
 * - tests/system - —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export async function runTests(options: {
  categories?: string[]
  verbose?: boolean
  test?: string
}): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...')

  const results: TestResult[] = []
  const testRunner = new TestRunner({
    verbose: options.verbose,
    only: options.test ? [options.test] : [],
  })

  await testRunner.init()

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    registerTestsByCategory(testRunner, options.categories || [])

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testResults = await testRunner.runTestsInParallel(4)
    results.push(...testResults)

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.length - successCount

    logger.info(`
    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}
    ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failCount}
    üîç –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}
    `)

    if (failCount > 0) {
      logger.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö')
    } else {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã')
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`)
  } finally {
    await testRunner.cleanup()
  }

  return results
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
function registerTestsByCategory(
  testRunner: TestRunner,
  categories: string[]
): void {
  const allCategories = categories.length === 0

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
  if (allCategories || categories.includes('neuro')) {
    registerNeuroTests(testRunner)
  }

  if (allCategories || categories.includes('database')) {
    registerDatabaseTests(testRunner)
  }

  if (allCategories || categories.includes('webhooks')) {
    registerWebhookTests(testRunner)
  }

  if (allCategories || categories.includes('api')) {
    registerApiTests(testRunner)
  }

  if (allCategories || categories.includes('system')) {
    registerSystemTests(testRunner)
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */
function registerSystemTests(testRunner: TestRunner): void {
  testRunner.addTests([
    {
      name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
      category: 'system',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      run: async () => {
        const results = await runSystemTests()
        const failedTests = results.filter((r: TestResult) => !r.success)

        if (failedTests.length > 0) {
          const errors = failedTests
            .map((t: TestResult) => `${t.name}: ${t.message}`)
            .join('\n')
          throw new Error(`–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:\n${errors}`)
        }

        return results
      },
    },
  ])
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π
 */
function registerNeuroTests(testRunner: TestRunner): void {
  testRunner.addTests([
    {
      name: '–ù–µ–π—Ä–æ—Ç–µ—Å—Ç—ã',
      category: 'neuro',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π',
      run: async () => {
        const results = await runNeuroTests()
        const failedTests = results.filter((r: TestResult) => !r.success)

        if (failedTests.length > 0) {
          const errors = failedTests
            .map((t: TestResult) => `${t.name}: ${t.message}`)
            .join('\n')
          throw new Error(`–ù–µ–π—Ä–æ—Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:\n${errors}`)
        }

        return results
      },
    },
  ])
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
function registerDatabaseTests(testRunner: TestRunner): void {
  testRunner.addTests([
    {
      name: '–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      category: 'database',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
      run: async () => {
        const results = await runDatabaseTests()
        const failedTests = results.filter((r: TestResult) => !r.success)

        if (failedTests.length > 0) {
          const errors = failedTests
            .map((t: TestResult) => `${t.name}: ${t.message}`)
            .join('\n')
          throw new Error(`–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:\n${errors}`)
        }

        return results
      },
    },
  ])
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
 */
function registerWebhookTests(testRunner: TestRunner): void {
  testRunner.addTests([
    {
      name: '–¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤',
      category: 'webhooks',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤',
      run: async () => {
        const results = await runWebhookTests()
        const failedTests = results.filter((r: TestResult) => !r.success)

        if (failedTests.length > 0) {
          const errors = failedTests
            .map((t: TestResult) => `${t.name}: ${t.message}`)
            .join('\n')
          throw new Error(`–¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:\n${errors}`)
        }

        return results
      },
    },
  ])
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã API
 */
function registerApiTests(testRunner: TestRunner): void {
  testRunner.addTests([
    {
      name: '–¢–µ—Å—Ç—ã API',
      category: 'api',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API',
      run: async () => {
        const results = await runApiTests()
        const failedTests = results.filter((r: TestResult) => !r.success)

        if (failedTests.length > 0) {
          const errors = failedTests
            .map((t: TestResult) => `${t.name}: ${t.message}`)
            .join('\n')
          throw new Error(`–¢–µ—Å—Ç—ã API –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:\n${errors}`)
        }

        return results
      },
    },
  ])
}
