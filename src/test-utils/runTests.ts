import { TestFunction, TestResult } from './types'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
 * @param tests –ú–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runTests(tests: TestFunction[]): Promise<TestResult[]> {
  console.log(`üöÄ [TEST_RUNNER]: –ó–∞–ø—É—Å–∫ ${tests.length} —Ç–µ—Å—Ç–æ–≤...`)

  const results: TestResult[] = []

  for (const testFn of tests) {
    try {
      const result = await testFn()
      results.push(result)

      if (result.success) {
        console.log(`‚úÖ [TEST_RUNNER]: –¢–µ—Å—Ç "${result.name}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω`)
      } else {
        console.error(
          `‚ùå [TEST_RUNNER]: –¢–µ—Å—Ç "${result.name}" –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${result.message}`
        )
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      const result: TestResult = {
        success: false,
        name: testFn.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç',
        message: `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`,
        details: error,
      }

      results.push(result)
      console.error(
        `‚ùå [TEST_RUNNER]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ "${result.name}": ${errorMessage}`,
        error
      )
    }
  }

  // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const totalTests = results.length
  const passedTests = results.filter(r => r.success).length
  const failedTests = totalTests - passedTests

  console.log(`\nüèÅ [TEST_RUNNER]: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
  console.log(
    `üìä [TEST_RUNNER]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ=${totalTests}, —É—Å–ø–µ—à–Ω–æ=${passedTests}, –Ω–µ—É–¥–∞—á–Ω–æ=${failedTests}`
  )

  if (failedTests > 0) {
    console.log(`\nüìù [TEST_RUNNER]: –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:`)
    results
      .filter(r => !r.success)
      .forEach(r => {
        console.log(`  ‚õî ${r.name}: ${r.message}`)
      })
  }

  return results
}
