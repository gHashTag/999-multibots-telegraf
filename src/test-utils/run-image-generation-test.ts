import { Logger as logger } from '@/utils/logger'
import { InngestService } from '@/test-utils/inngest'
import { supabase } from '@/core/supabase'
import { generateRandomTelegramId } from '@/utils/generateRandomTelegramId'

const testImageGeneration = async () => {
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', {
      description: 'Starting image generation testing',
    })

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testTelegramId = generateRandomTelegramId()
    logger.info('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Creating test user',
      telegram_id: testTelegramId,
    })

    const { data: userData, error: userError } = await supabase
      .from('users')
      .insert([
        {
          telegram_id: testTelegramId,
          first_name: 'Test',
          last_name: 'User',
          username: `test_user_${Math.floor(Math.random() * 1000000)}`,
          language_code: 'ru',
          bot_name: 'test_bot',
          balance: 1000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
          subscription: 'stars',
        },
      ])
      .select()

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error creating test user',
        error: userError.message,
      })
      throw userError
    }

    logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      user_data: userData,
    })

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info('üé® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
      description: 'Sending image generation event',
      telegram_id: testTelegramId,
    })

    await InngestService.sendEvent('text-to-image.requested', {
      prompt: 'Test prompt for image generation',
      model: 'FLUX1.1 [pro]',
      num_images: 1,
      telegram_id: testTelegramId.toString(),
      username: 'test_user',
      is_ru: true,
      bot_name: 'test_bot',
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Image generation event sent',
      telegram_id: testTelegramId,
    })

    // 3. –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 5000))

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: balanceData, error: balanceError } = await supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', testTelegramId)
      .single()

    if (balanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞', {
        description: 'Error checking balance',
        error: balanceError.message,
      })
      throw balanceError
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', {
      description: 'User balance after generation',
      telegram_id: testTelegramId,
      initial_balance: 1000,
      final_balance: balanceData.balance,
    })

    logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
      description: 'Image generation testing completed',
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

testImageGeneration().catch(error => {
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', {
    description: 'Critical error',
    error: error instanceof Error ? error.message : String(error),
  })
  process.exit(1)
})
