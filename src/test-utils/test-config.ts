/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { InngestTestEngine } from '@inngest/test'

import { paymentProcessor } from '@/inngest-functions/paymentProcessor'

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
const mockBot = {
  telegram: {
    sendMessage: async () => {
      logger.info('ü§ñ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        description: 'Mock: Sending message',
      })
      return true
    },
    sendPhoto: async () => {
      logger.info('üì∏ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ', {
        description: 'Mock: Sending photo',
      })
      return true
    },
    sendVideo: async () => {
      logger.info('üé• Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ', {
        description: 'Mock: Sending video',
      })
      return true
    },
    sendDocument: async () => {
      logger.info('üìÑ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞', {
        description: 'Mock: Sending document',
      })
      return true
    },
    sendMediaGroup: async () => {
      logger.info('üñºÔ∏è Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã', {
        description: 'Mock: Sending media group',
      })
      return true
    },
    deleteMessage: async () => {
      logger.info('üóëÔ∏è Mock: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        description: 'Mock: Deleting message',
      })
      return true
    },
  },
} as unknown as Telegraf<MyContext>

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest
export const inngestTestEngine = new InngestTestEngine({
  function: paymentProcessor,
})

export interface TestResult {
  success: boolean
  name: string
  message?: string
  error?: string | Error
  details?: Record<string, any>
  testName?: string
}

export const TEST_CONFIG = {
  // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  mockBot,
  mocks: {
    bot: mockBot,
  },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  server: {
    apiUrl: 'http://localhost:3000',
    webhookPath: '/api/webhook',
    bflWebhookPath: '/api/bfl-webhook',
    neurophotoWebhookPath: '/api/neurophoto-webhook',
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  users: {
    main: {
      telegramId: '123456789',
      botName: 'test_bot',
      isRussian: true,
    },
    default: {
      telegramId: '123456789',
      botName: 'test_bot',
      isRussian: true,
    },
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –±–æ—Ç—ã
  bots: {
    test_bot: mockBot,
    neurophoto: mockBot,
    default: mockBot,
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
  modelTraining: {
    samples: [
      {
        trainingId: 'test-training-id-1',
        status: 'completed',
        outputUrl: 'https://example.com/model.safetensors',
        version: '1.0.0',
        metrics: {
          loss: 0.001,
          accuracy: 0.99,
          predict_time: 120,
        },
        error: null,
      },
    ],
  },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  bflTraining: {
    samples: [
      {
        trainingId: 'test-bfl-id-1',
        status: 'completed',
        outputUrl: 'https://example.com/bfl-model.safetensors',
        version: '1.0.0',
        metrics: {
          loss: 0.001,
          accuracy: 0.99,
          predict_time: 120,
        },
      },
    ],
  },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Neurophoto
  neurophoto: {
    samples: [
      {
        generationId: 'test-neurophoto-id-1',
        task_id: 'test-task-id-1',
        status: 'completed',
        outputUrl: 'https://example.com/generated-image.jpg',
        prompt: 'Test prompt',
        result: {
          url: 'https://example.com/generated-image.jpg',
          status: 'completed',
        },
        metrics: {
          predict_time: 10,
        },
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
  payments: {
    success: {
      amount: 100,
      type: 'money_income',
      description: 'Test payment',
    },
    error: {
      amount: -50,
      type: 'money_outcome',
      description: 'Test error payment',
    },
  },

  TIMEOUT: 30000, // 30 seconds
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000, // 1 second
  LOG_LEVEL: 'info',
  EMOJI: {
    START: 'üöÄ',
    SUCCESS: '‚úÖ',
    ERROR: '‚ùå',
    INFO: '‚ÑπÔ∏è',
    WARNING: '‚ö†Ô∏è',
    DEBUG: 'üîç',
    RETRY: 'üîÑ',
    TEST: 'üéØ',
    DATA: 'üíæ',
    EVENT: '‚ö°Ô∏è',
  },

  inngestEngine: inngestTestEngine,

  // –¢–∞–π–º–∞—É—Ç—ã
  PAYMENT_PROCESSING_TIMEOUT: 1000,

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
  cleanupAfterEach: true,

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  TEST_USER_ID: '123456789',
  TEST_OWNER_ID: '123456789',
  TEST_BOT_NAME: 'test_bot',
  TEST_IMAGE_URL: 'https://example.com/test-image.jpg',
  TEST_TELEGRAM_ID: '123456789',
}
