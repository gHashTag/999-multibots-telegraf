// import { Inngest } from 'inngest'
// import fetch from 'node-fetch'
import { ModeEnum } from '../interfaces/modes'
import { logger } from '../utils/logger'
import { MockTelegraf } from './mocks/botMock'
import { MyContext } from '../interfaces'
import { Telegraf } from 'telegraf'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 *
 * @module src/test-utils/test-config
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ Inngest —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export class InngestTestEngine {
  private events: any[] = []
  private logger = logger

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest (–º–æ–∫)
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @param data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async send(event: any) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = [
      'telegram_id',
      'amount',
      'type',
      'description',
      'bot_name',
      'service_type',
    ]
    for (const field of requiredFields) {
      if (!event.data[field]) {
        throw new Error(`Missing required field: ${field}`)
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (!Object.values(TransactionType).includes(event.data.type)) {
      throw new Error(`Invalid transaction type: ${event.data.type}`)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    if (!Object.values(ModeEnum).includes(event.data.service_type)) {
      throw new Error(`Invalid service type: ${event.data.service_type}`)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (typeof event.data.amount !== 'number' || event.data.amount <= 0) {
      throw new Error('Amount must be a positive number')
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–≤–µ–∑–¥ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
    if (
      event.data.stars !== undefined &&
      (typeof event.data.stars !== 'number' || event.data.stars <= 0)
    ) {
      throw new Error('Stars must be a positive number')
    }

    this.logger.info('üöÄ Processing payment event:', event)
    this.events.push(event)
    return { success: true }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @returns Array - –ú–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  getEventsByName(
    eventName: string
  ): { name: string; data: any; timestamp: number }[] {
    return this.events.filter(event => event.name === eventName)
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  clearEvents(): void {
    this.events = []
    console.log('üßπ [TEST_ENGINE_MOCK]: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞')
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export const TEST_CONFIG = {
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  TIMEOUTS: {
    SHORT: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
    MEDIUM: 5000, // 5 —Å–µ–∫—É–Ω–¥
    LONG: 10000, // 10 —Å–µ–∫—É–Ω–¥
    DATABASE: 3000, // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  },

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  TEST_DATA: {
    TEST_USER_TELEGRAM_ID: '123456789',
    TEST_USER_USERNAME: 'testuser',
    TEST_USER_FIRST_NAME: 'Test',
    TEST_USER_LAST_NAME: 'User',
    TEST_DESCRIPTION: 'Test description',

    TEST_AMOUNT: 100, // –°—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_STARS: 100, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_OPERATION_ID: 'test-op-123', // ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_BOT_NAME: 'test_bot', // –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
  PAYMENT_TESTS: {
    MODES: {
      TEXT_TO_IMAGE: ModeEnum.TextToImage,
      TEXT_TO_VIDEO: ModeEnum.TextToVideo,
      TOP_UP_BALANCE: ModeEnum.TopUpBalance,
    },

    // –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
    COSTS: {
      TEXT_TO_IMAGE: 10,
      TEXT_TO_VIDEO: 20,
    },
  },

  // –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  mocks: {
    bot: new MockTelegraf('test-token') as unknown as Telegraf<MyContext>, // –ú–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  },
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest
export const inngestTestEngine = {
  events: [] as any[],
  clearEvents: () => {
    inngestTestEngine.events = []
    logger.info('üßπ [TEST_ENGINE_MOCK]: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞')
  },
  sendEvent: async (name: string, data: any) => {
    const event = { name, data }
    inngestTestEngine.events.push(event)

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
    if (name === 'payment/process') {
      logger.info(
        `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${name}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
        data
      )
      logger.info(
        `‚úÖ [TEST_ENGINE_MOCK]: –ü–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.telegram_id}, —Å—É–º–º–∞: ${data.stars} –∑–≤–µ–∑–¥, —Ç–∏–ø: ${data.type}`
      )
    } else {
      logger.info(
        `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${name}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
        data
      )
    }

    return { success: true, event }
  },
  getEventsByName: (name: string) => {
    return inngestTestEngine.events.filter(event => event.name === name)
  },
  getEventsForTelegramId: (telegramId: string) => {
    return inngestTestEngine.events.filter(
      event => event.data?.telegram_id === telegramId
    )
  },
  getAllEvents: () => {
    return inngestTestEngine.events
  },
  printEvents: (message: string = '–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–≤–∏–∂–∫–µ:') => {
    logger.info(`üìã ${message}`)
    logger.info(`üíæ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${inngestTestEngine.events.length}`)
    inngestTestEngine.events.forEach((event, index) => {
      logger.info(`üìù –°–æ–±—ã—Ç–∏–µ #${index + 1}: ${event.name}`, {
        data: event.data,
      })
    })
  },
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const configureTestLogging = () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  process.env.LOG_LEVEL = 'info'

  // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  logger.info('üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤', {
    description: 'Setting up logging for tests',
  })
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–º–æ–∫
 */
export const createMockFn = <T = any, R = any>() => {
  const mockFn = (...args: T[]): R => {
    mockFn.calls.push(args)
    return mockFn.returnValue as R
  }

  mockFn.calls = [] as T[][]
  mockFn.returnValue = undefined as unknown as R

  mockFn.mockReturnValue = (value: R) => {
    mockFn.returnValue = value
    return mockFn
  }

  mockFn.mockClear = () => {
    mockFn.calls = []
    return mockFn
  }

  return mockFn
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Inngest
 */
export const testInngestClient = {
  id: 'test-app',
  eventKey: 'test-key',
  send: async (event: any) => {
    logger.info('üì§ [TEST_INNGEST_CLIENT]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è', event)
    return { success: true, event }
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –º–µ—Ç–æ–¥–∞ createFunction –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  createFunction: (
    options: any,
    trigger: any,
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */ _handler: any
  ) => {
    return {
      id: options.id || 'test-function',
      event: trigger.event || 'test-event',
    }
  },
}

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä-–±–æ—Ç–æ–≤
 */
export const AVATAR_BOT_DEFAULTS = {
  /** –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  botName: 'test_avatar_bot',
  /** ID –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  ambassadorId: 12345,
  /** URL –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  avatarUrl: 'https://example.com/avatar.jpg',
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  userId: 67890,
}
