/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'

// –ò–º–ø–æ—Ä—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∞ –Ω–µ –∏–∑ –ø–∞–∫–µ—Ç–∞
import { InngestTestEngine } from './inngest-test-engine'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è jest
// –ú–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const mockTelegram = {
  sendMessage: async () => ({}),
  editMessageText: async () => ({}),
  sendPhoto: async () => ({}),
  sendVideo: async () => ({}),
  sendAnimation: async () => ({}),
}

// –ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBot = {
  telegram: mockTelegram,
  use: () => Promise.resolve(mockBot),
  command: () => Promise.resolve(mockBot),
  action: () => Promise.resolve(mockBot),
  on: () => Promise.resolve(mockBot),
  options: {},
  context: {},
  webhookFilter: () => true,
  handleError: () => Promise.resolve(),
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è Telegraf
  telegram_response: {},
  botInfo: {
    id: 123456789,
    is_bot: true,
    first_name: 'Test Bot',
    username: 'test_bot',
    can_join_groups: true,
    can_read_all_group_messages: true,
    supports_inline_queries: true,
  },
  secretPathComponent: () => '',
  launch: () => Promise.resolve({ stopPolling: () => Promise.resolve() }),
  stop: () => Promise.resolve({}),
  catch: () => mockBot,
  startPolling: () => Promise.resolve({}),
  startWebhook: () => Promise.resolve({}),
  handleUpdate: () => Promise.resolve({}),
  login: () => '',
} as unknown as Telegraf<MyContext>

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
export const inngestTestEngine = new InngestTestEngine({
  maxWaitTime: 10000,
  eventBufferSize: 200,
})

export interface TestResult {
  success: boolean
  name: string
  message?: string
  error?: string
  details?: Record<string, any>
}

export const TEST_CONFIG = {
  // –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  mockBot: { telegram: mockTelegram },
  mocks: { bot: mockBot },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  server: {
    apiUrl: 'http://localhost:3000',
    webhookPath: '/api/webhook',
    bflWebhookPath: '/api/bfl-webhook',
    neurophotoWebhookPath: '/api/neurophoto-webhook',
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  users: {
    main: {
      id: 123456789,
      username: 'test_user',
      is_bot: false,
      first_name: 'Test',
      last_name: 'User',
      telegramId: '123456789',
      botName: 'test_bot',
      isRussian: true,
    },
    default: {
      id: 987654321,
      username: 'default_user',
      is_bot: false,
      first_name: 'Default',
      last_name: 'User',
    },
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –±–æ—Ç—ã
  bots: {
    test_bot: {
      name: 'test_bot',
      token: 'test_token',
    },
    neurophoto: {
      name: 'neurophoto_bot',
      token: 'neurophoto_token',
    },
    default: {
      name: 'default_bot',
      token: 'default_token',
    },
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
  modelTraining: {
    samples: [
      {
        prompt: 'Test prompt 1',
        negative_prompt: 'Test negative prompt 1',
        image_url: 'https://example.com/test1.jpg',
      },
      {
        prompt: 'Test prompt 2',
        negative_prompt: 'Test negative prompt 2',
        image_url: 'https://example.com/test2.jpg',
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BFL –æ–±—É—á–µ–Ω–∏—è
  bflTraining: {
    samples: [
      {
        text: 'Test text 1',
        image_url: 'https://example.com/bfl1.jpg',
      },
      {
        text: 'Test text 2',
        image_url: 'https://example.com/bfl2.jpg',
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è neurophoto
  neurophoto: {
    samples: [
      {
        url: 'https://example.com/neurophoto1.jpg',
        prompt: 'Test neurophoto prompt 1',
      },
      {
        url: 'https://example.com/neurophoto2.jpg',
        prompt: 'Test neurophoto prompt 2',
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
  payments: {
    success: {
      amount: 100,
      inv_id: 'test_payment_123',
      sign: 'test_sign_123',
    },
    error: {
      amount: -1,
      inv_id: 'error_payment_123',
      sign: 'error_sign_123',
    },
  },

  // –¢–∞–π–º–∞—É—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—ã
  TIMEOUT: 30000,
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000,
  LOG_LEVEL: 'info',

  // –≠–º–æ–¥–∑–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  EMOJI: {
    START: 'üöÄ',
    SUCCESS: '‚úÖ',
    ERROR: '‚ùå',
    INFO: '‚ÑπÔ∏è',
    WARNING: '‚ö†Ô∏è',
    DEBUG: 'üîç',
    RETRY: 'üîÑ',
    TEST: 'üéØ',
    DATA: 'üíæ',
    EVENT: '‚ö°Ô∏è',
  },

  // –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  inngestEngine: inngestTestEngine,

  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  PAYMENT_PROCESSING_TIMEOUT: 1000,

  // –§–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  cleanupAfterEach: true,

  // –¢–µ—Å—Ç–æ–≤—ã–µ ID
  TEST_USER_ID: '123456789',
  TEST_OWNER_ID: '123456789',
  TEST_BOT_NAME: 'test_bot',

  // URL —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è image-to-prompt
  TEST_IMAGE_URL: 'https://example.com/test.jpg',

  // –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è Telegram
  TEST_TELEGRAM_ID: '123456789',

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  CHECK_INTERVAL: 1000,
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export default TEST_CONFIG
