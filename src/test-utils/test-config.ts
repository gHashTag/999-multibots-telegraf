// import { Inngest } from 'inngest'
// import fetch from 'node-fetch'
import { ModeEnum } from '../interfaces/modes'
import { logger } from '../utils/logger'
import { MockTelegraf } from './mocks/botMock'
import { MyContext } from '../interfaces'
import { Telegraf } from 'telegraf'
import { TestConfig, TestRunnerConfig } from '../types/test'

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 *
 * @module src/test-utils/test-config
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ Inngest —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export class InngestTestEngineMock {
  /**
   * –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public sentEvents: { name: string; data: any; timestamp: number }[] = []

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest (–º–æ–∫)
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @param data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendEvent(eventName: string, data: any): Promise<boolean> {
    console.log(
      `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${eventName}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
      data
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (eventName === 'payment/process') {
      if (!data.telegram_id) {
        console.log(
          '‚ùå [TEST_ENGINE_MOCK]: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ telegram_id'
        )
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ telegram_id')
      }

      if (!data.amount && data.amount !== 0) {
        console.log(
          '‚ùå [TEST_ENGINE_MOCK]: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ amount'
        )
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ amount')
      }

      if (!data.type) {
        console.log('‚ùå [TEST_ENGINE_MOCK]: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ type')
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ type')
      }

      if (data.amount < 0) {
        console.log(
          '‚ùå [TEST_ENGINE_MOCK]: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'
        )
        throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
      }

      if (data.stars < 0) {
        console.log(
          '‚ùå [TEST_ENGINE_MOCK]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'
        )
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º')
      }

      console.log(
        `‚úÖ [TEST_ENGINE_MOCK]: –ü–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "${eventName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.telegram_id}, —Å—É–º–º–∞: ${data.amount} –∑–≤–µ–∑–¥, —Ç–∏–ø: ${data.type}`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
    this.sentEvents.push({
      name: eventName,
      data,
      timestamp: Date.now(),
    })

    return true
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @returns Array - –ú–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  getEventsByName(
    eventName: string
  ): { name: string; data: any; timestamp: number }[] {
    return this.sentEvents.filter(event => event.name === eventName)
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  clearEvents(): void {
    this.sentEvents = []
    console.log('üßπ [TEST_ENGINE_MOCK]: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞')
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export const TEST_CONFIG: TestRunnerConfig = {
  parallel: false,
  stopOnFirstFailure: false,
  timeouts: {
    default: 5000, // 5 seconds
    long: 30000,   // 30 seconds
    short: 1000    // 1 second
  },
  retries: {
    default: 2,
    max: 5,
    min: 0
  },
  logging: {
    level: 'info',
    emoji: true
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const TEST_CONSTANTS = {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  USER: {
    telegram_id: '123456789',
    username: 'test_user',
    first_name: 'Test',
    last_name: 'User'
  },
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
  PAYMENT: {
    amount: 100,
    stars: 1000,
    type: 'money_income',
    description: 'Test payment',
    bot_name: 'test_bot',
    service_type: 'TopUpBalance'
  },
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á
  TASK: {
    id: 'test-task-id',
    type: 'test',
    data: {
      prompt: 'Test prompt',
      model: 'gpt-3.5-turbo'
    }
  },
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
  AGENT: {
    id: 'test-agent-id',
    name: 'TestAgent',
    type: 'test',
    status: 'ready'
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const TEST_UTILS = {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
  generateId: () => Math.random().toString(36).substring(7),
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  delay: (ms: number) => new Promise(resolve => setTimeout(resolve, ms)),
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏
  createMockFn: () => {
    const fn = () => {}
    fn.calls = [] as any[]
    fn.mockImplementation = (impl: Function) => {
      fn.implementation = impl
      return fn
    }
    fn.mockReset = () => {
      fn.calls = []
      fn.implementation = undefined
    }
    return fn
  }
}

// Test runner configuration
export const TEST_RUNNER_CONFIG = {
  parallel: true, // Run tests in parallel
  stopOnFirstFailure: false,
  timeout: TEST_CONFIG.timeouts.default,
  retries: TEST_CONFIG.retries.default
}

// Test environment configuration
export const TEST_ENV = {
  isCI: process.env.CI === 'true',
  isDevelopment: process.env.NODE_ENV === 'development',
  isProduction: process.env.NODE_ENV === 'production'
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest
export const inngestTestEngine = {
  events: [] as any[],
  clearEvents: () => {
    inngestTestEngine.events = []
    logger.info('üßπ [TEST_ENGINE_MOCK]: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞')
  },
  sendEvent: async (name: string, data: any) => {
    const event = { name, data }
    inngestTestEngine.events.push(event)

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
    if (name === 'payment/process') {
      logger.info(
        `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${name}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
        data
      )
      logger.info(
        `‚úÖ [TEST_ENGINE_MOCK]: –ü–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.telegram_id}, —Å—É–º–º–∞: ${data.stars} –∑–≤–µ–∑–¥, —Ç–∏–ø: ${data.type}`
      )
    } else {
      logger.info(
        `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${name}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
        data
      )
    }

    return { success: true, event }
  },
  getEventsByName: (name: string) => {
    return inngestTestEngine.events.filter(event => event.name === name)
  },
  getEventsForTelegramId: (telegramId: string) => {
    return inngestTestEngine.events.filter(
      event => event.data?.telegram_id === telegramId
    )
  },
  getAllEvents: () => {
    return inngestTestEngine.events
  },
  printEvents: (message: string = '–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–≤–∏–∂–∫–µ:') => {
    logger.info(`üìã ${message}`)
    logger.info(`üíæ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${inngestTestEngine.events.length}`)
    inngestTestEngine.events.forEach((event, index) => {
      logger.info(`üìù –°–æ–±—ã—Ç–∏–µ #${index + 1}: ${event.name}`, {
        data: event.data,
      })
    })
  },
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const configureTestLogging = () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  process.env.LOG_LEVEL = 'info'

  // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  logger.info('üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤', {
    description: 'Setting up logging for tests',
  })
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–º–æ–∫
 */
export const createMockFn = <T = any, R = any>() => {
  const mockFn = (...args: T[]): R => {
    mockFn.calls.push(args)
    return mockFn.returnValue as R
  }

  mockFn.calls = [] as T[][]
  mockFn.returnValue = undefined as unknown as R

  mockFn.mockReturnValue = (value: R) => {
    mockFn.returnValue = value
    return mockFn
  }

  mockFn.mockClear = () => {
    mockFn.calls = []
    return mockFn
  }

  return mockFn
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Inngest
 */
export const testInngestClient = {
  id: 'test-app',
  eventKey: 'test-key',
  send: async (event: any) => {
    logger.info('üì§ [TEST_INNGEST_CLIENT]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è', event)
    return { success: true, event }
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –º–µ—Ç–æ–¥–∞ createFunction –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  createFunction: (
    options: any,
    trigger: any,
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */ _handler: any
  ) => {
    return {
      id: options.id || 'test-function',
      event: trigger.event || 'test-event',
    }
  },
}

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä-–±–æ—Ç–æ–≤
 */
export const AVATAR_BOT_DEFAULTS = {
  /** –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  botName: 'test_avatar_bot',
  /** ID –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  ambassadorId: 12345,
  /** URL –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  avatarUrl: 'https://example.com/avatar.jpg',
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
  userId: 67890,
}
