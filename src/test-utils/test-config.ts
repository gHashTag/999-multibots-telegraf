/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

import { PaymentStatus } from '@/core/supabase/updatePaymentStatus'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'

const mockBot = {
  telegram: {
    sendMessage: async () => {
      logger.info({
        message: 'ü§ñ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
        description: 'Mock: Sending message',
      })
      return true
    },
    sendAudio: async () => {
      logger.info({
        message: 'üéµ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ',
        description: 'Mock: Sending audio',
      })
      return true
    },
    sendPhoto: async () => {
      logger.info({
        message: 'üì∏ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ',
        description: 'Mock: Sending photo',
      })
      return true
    },
    sendVideo: async () => {
      logger.info({
        message: 'üé• Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ',
        description: 'Mock: Sending video',
      })
      return true
    },
  },
  options: {},
  context: {},
  webhookFilter: () => true,
  handleError: () => Promise.resolve(),
  command: () => {
    logger.info({
      message: 'üéØ Mock: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã',
      description: 'Mock: Command registration',
    })
    return mockBot
  },
  on: () => {
    logger.info({
      message: 'üëÇ Mock: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ',
      description: 'Mock: Event subscription',
    })
    return mockBot
  },
  start: () => {
    logger.info({
      message: 'üöÄ Mock: –ö–æ–º–∞–Ω–¥–∞ start',
      description: 'Mock: Start command',
    })
    return mockBot
  },
  help: () => {
    logger.info({
      message: '‚ùì Mock: –ö–æ–º–∞–Ω–¥–∞ help',
      description: 'Mock: Help command',
    })
    return mockBot
  },
  settings: () => mockBot,
  catch: () => mockBot,
  use: () => mockBot,
  launch: async () => {
    logger.info({
      message: 'üöÄ Mock: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
      description: 'Mock: Bot launch',
    })
  },
  stop: async () => {
    logger.info({
      message: 'üõë Mock: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞',
      description: 'Mock: Bot stop',
    })
  },
  botInfo: {},
} as unknown as Telegraf<MyContext>

export const TEST_CONFIG = {
  // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  server: {
    apiUrl: 'http://localhost:2999',
    webhookPath: '/webhooks/replicate',
    bflWebhookPath: '/webhooks/bfl',
    neurophotoWebhookPath: '/webhooks/neurophoto',
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  users: {
    main: {
      telegramId: '123456789',
      botName: 'test_bot',
      isRussian: true,
    },
    default: {
      telegramId: '144022504',
      voiceId: 'test-voice-id',
      isRussian: true,
      botName: 'test_bot',
    },
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
  bots: {
    default: 'neuro_blogger_bot',
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
  modelTraining: {
    samples: [
      {
        trainingId: 'kvb60ecsf9rme0cntzqrhca1y4',
        modelName: 'test_model_1',
        status: 'SUCCESS',
        outputUrl:
          'https://replicate.delivery/xezq/output-model/trained_model.tar',
        version: 'ghashtag/neuro_sage:af5678e9a7b6552f3f8c6875e5e9f1c3f7d5f1e8',
        metrics: {
          predict_time: 7230.5,
        },
      },
      {
        trainingId: 'failed-training-id',
        modelName: 'test_model_2',
        status: 'failed',
        error: 'Not enough training images',
        metrics: {
          predict_time: 120.5,
        },
      },
      {
        trainingId: 'canceled-training-id',
        modelName: 'test_model_3',
        status: 'canceled',
        metrics: {
          predict_time: 45.2,
        },
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  bflTraining: {
    samples: [
      {
        task_id: 'bfl-task-123456',
        status: 'COMPLETED',
        result: JSON.stringify({
          model_id: 'bfl-model-123',
          model_name: 'test_bfl_model',
          version: '1.0.0',
        }),
      },
      {
        task_id: 'bfl-task-error',
        status: 'ERROR',
        result: JSON.stringify({
          error: 'Training failed due to insufficient data',
          details: 'Minimum of 10 samples required',
        }),
      },
      {
        task_id: 'bfl-task-pending',
        status: 'PENDING',
        result: null,
      },
    ],
  },

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  neurophoto: {
    samples: [
      {
        task_id: 'neurophoto-success-test',
        status: 'COMPLETED',
        result: {
          sample: 'https://example.com/test-image.jpg',
          seed: 123456,
          prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        },
      },
      {
        task_id: 'neurophoto-processing-test',
        status: 'processing',
      },
      {
        task_id: 'neurophoto-moderated-test',
        status: 'Content Moderated',
      },
    ],
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  options: {
    retryAttempts: 3,
    retryDelay: 1000,
    timeout: 5000,
  },

  TEST_USER_ID: '144022504',
  TEST_BOT_NAME: 'test_bot',

  PAYMENT_STATUS: {
    PENDING: 'PENDING' as PaymentStatus,
    COMPLETED: 'COMPLETED' as PaymentStatus,
    FAILED: 'FAILED' as PaymentStatus,
  },

  mocks: {
    bot: mockBot,
  },
}
