import { testLogger } from './logger'
import { InngestTestEngine } from './inngest-test-engine'
import { Telegraf, Context } from 'telegraf'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'
import { getUserBalance } from '@/core/supabase'
import { supabase } from '@/core/supabase'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
export interface MyContext extends Context {
  session?: any
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
export enum PAYMENT_STATUS {
  PENDING = 'PENDING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
}

export enum PAYMENT_METHOD {
  CRYPTO = 'CRYPTO',
  CARD = 'CARD',
  SYSTEM = 'SYSTEM',
  TEST = 'TEST',
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
export interface BaseEventData {
  telegram_id: string
  bot_name: string
  [key: string]: any
}

export interface PaymentEventData extends BaseEventData {
  amount: number
  type: string
  description: string
  cost_per_image?: number
  is_ru?: boolean
  operation_id?: string
  service_type?: string
  metadata?: Record<string, any>
}

export interface ImageProcessEventData extends BaseEventData {
  event_id: string
  event_name: string
  event_data: Record<string, any>
}

export interface ImageToPromptEventData extends BaseEventData {
  image: string
  cost_per_image: number
  is_ru: boolean
}

export interface InngestEvent<T extends BaseEventData> {
  id: string
  name: string
  data: T
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ –¥–ª—è Telegram
export const TelegramMock = {
  sendMessage: jest.fn(),
  sendPhoto: jest.fn(),
  sendVideo: jest.fn(),
}

export const TEST_CONFIG = {
  logger: testLogger,
  mockBot: {
    telegram: TelegramMock,
  },
  mocks: {
    bot: {} as Telegraf<MyContext>,
  },
  server: {
    apiUrl: 'http://localhost:3000',
    webhookPath: '/webhook',
    bflWebhookPath: '/bfl-webhook',
    neurophotoWebhookPath: '/neurophoto-webhook',
  },
  users: {
    main: {
      id: 123456789,
      telegram_id: '123456789',
      username: 'test_user',
      first_name: 'Test',
      last_name: 'User',
      language_code: 'ru',
      isRussian: true,
    },
  },
  supabase: {
    url: process.env.SUPABASE_URL || 'http://localhost:54321',
    key: process.env.SUPABASE_SERVICE_KEY || 'your-service-key',
  },
  bots: {
    test_bot: {
      name: 'test_bot',
      token: 'test_token',
    },
    neurophoto: {
      name: 'neurophoto_bot',
      token: 'neurophoto_token',
    },
    default: {
      name: 'default_bot',
      token: 'default_token',
    },
  },
  TEST_USER_ID: '123456789',
  TEST_BOT_NAME: 'test_bot',
  TEST_TELEGRAM_ID: '123456789',
  TEST_IMAGE_URL: 'https://example.com/test-image.jpg',
  TEST_VOICE_ID: 'pNInz6obpgDQGcFmaJgB',
  IMAGE_TO_PROMPT_COST: 30,
  VOICE_GENERATION_COST: 50,
  PAYMENT_PROCESSING_TIMEOUT: 5000,
  inngestEngine: new InngestTestEngine(),
  models: {
    default: 'test-model',
    stable: 'stable-model',
    neurophoto: {
      name: 'neurophoto-model',
    },
  },
  cleanupAfterEach: true,
  CLEANUP_TEST_DATA: true,
  modelTraining: [
    {
      id: 'test-training-1',
      name: 'Test Training 1',
      description: 'Test training description',
      status: 'COMPLETED' as const,
    },
  ],
  CHECK_INTERVAL: 1000,
  TIMEOUT: 30000,
  endpoints: {
    payment: 'http://localhost:3000/api/payment',
    generate: 'http://localhost:3000/api/generate',
    check: 'http://localhost:3000/api/check',
  },
  prompts: {
    test: 'Test prompt for image generation',
  },
  bot_name: 'test_bot',
  test_user_id: '123456789',
  timeouts: {
    short: 1000,
    medium: 5000,
    long: 15000,
  },
  retries: {
    max: 3,
    delay: 1000,
  },
  testUserId: '123456789',
  testBotName: 'test_bot',
} as const

export interface TestResult {
  success: boolean
  message: string
  name: string
  error?: Error
  data?: any
}

export type TestConfig = typeof TEST_CONFIG

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ */
export interface PaymentConfig {
  status: PAYMENT_STATUS
  method: PAYMENT_METHOD
  amount: number
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
 * –ù–∞—Å—Ç—Ä–æ–µ–Ω —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –±—É—Ñ–µ—Ä–æ–º –Ω–∞ 200 —Å–æ–±—ã—Ç–∏–π
 */
export const inngestTestEngine = new InngestTestEngine({
  maxWaitTime: 10000,
  eventBufferSize: 200,
})

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2 —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º COMPLETED
 */
inngestTestEngine.register(
  'payment/process',
  async ({ event }: { event: InngestEvent<PaymentEventData> }) => {
    try {
      logger.info('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏', {
        description: 'Processing payment in test environment',
        event_id: event.id,
        event_data: event.data,
      })

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id
      const normalizedTelegramId = normalizeTelegramId(event.data.telegram_id)

      logger.info('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Preparing payment data',
        normalized_telegram_id: normalizedTelegramId,
        amount: event.data.amount,
        type: event.data.type,
        payment_description: event.data.description,
        bot_name: event.data.bot_name,
        inv_id: event.data.inv_id,
        service_type: event.data.service_type || ModeEnum.TopUpBalance,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (event.data.type === 'money_expense') {
        const currentBalance = await getUserBalance(event.data.telegram_id)

        logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º', {
          description: 'Checking balance before withdrawal',
          telegram_id: event.data.telegram_id,
          current_balance: currentBalance,
          required_amount: event.data.amount,
        })

        if (currentBalance < event.data.amount) {
          logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', {
            description: 'Insufficient funds for withdrawal',
            telegram_id: event.data.telegram_id,
            current_balance: currentBalance,
            required_amount: event.data.amount,
          })

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è
          const { error: insertError } = await supabase
            .from('payments_v2')
            .insert({
              telegram_id: normalizedTelegramId,
              payment_date: new Date().toISOString(),
              amount: event.data.amount,
              description: event.data.description,
              stars: event.data.amount,
              currency: 'STARS',
              subscription: 'none',
              inv_id: event.data.inv_id,
              status: 'FAILED',
              type: event.data.type,
              service_type: event.data.service_type,
              bot_name: event.data.bot_name,
              language: 'ru',
              payment_method: 'test',
            })

          if (insertError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ', {
              description: 'Error creating failed payment record',
              error: insertError.message,
            })
          }

          return {
            success: false,
            error: 'Insufficient funds',
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
      const { data, error } = await supabase
        .from('payments_v2')
        .insert({
          telegram_id: normalizedTelegramId,
          amount: event.data.amount,
          stars: event.data.amount,
          type: event.data.type,
          description: event.data.description,
          bot_name: event.data.bot_name,
          status: PAYMENT_STATUS.COMPLETED,
          payment_method: PAYMENT_METHOD.TEST,
          inv_id: event.data.inv_id,
          service_type: event.data.service_type || ModeEnum.TopUpBalance,
        })
        .select()

      if (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', {
          description: 'Error creating payment',
          error: error.message,
          details: error.details,
          hint: error.hint,
        })
        throw error
      }

      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
        description: 'Payment created successfully',
        event_id: event.id,
        telegram_id: normalizedTelegramId,
        amount: event.data.amount,
        payment_data: data?.[0],
      })

      return { success: true, payment: data?.[0] }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : String(error),
        event_id: event.id,
      })
      throw error
    }
  }
)

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è image/process
inngestTestEngine.register(
  'image/process',
  async ({ event }: { event: InngestEvent<ImageProcessEventData> }) => {
    try {
      logger.info('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        description: 'Processing image analysis request',
        event_id: event.id,
        event_data: event.data,
      })

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ events
      const { error: eventError } = await supabase.from('events').insert({
        id: event.data.event_id,
        telegram_id: event.data.telegram_id,
        bot_name: event.data.bot_name,
        event_name: event.name,
        event_data: event.data,
        status: 'completed',
        created_at: new Date().toISOString(),
      })

      if (eventError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–æ–±—ã—Ç–∏–∏', {
          description: 'Error creating event record',
          error: eventError.message,
          event_id: event.data.event_id,
        })
        throw eventError
      }

      logger.info('‚úÖ –ó–∞–ø–∏—Å—å –æ —Å–æ–±—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω–∞', {
        description: 'Event record created',
        event_id: event.data.event_id,
      })

      return { success: true }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        description: 'Error processing image analysis request',
        error: error instanceof Error ? error.message : String(error),
        event_id: event.id,
      })
      throw error
    }
  }
)

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è image/to-prompt.generate
inngestTestEngine.register(
  'image/to-prompt.generate',
  async ({ event }: { event: InngestEvent<ImageToPromptEventData> }) => {
    try {
      logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞', {
        description: 'Starting prompt generation request',
        event_id: event.id,
        event_data: event.data,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
      const payment_operation_id = `image-to-prompt-${
        event.data.telegram_id
      }-${Date.now()}`
      await inngestTestEngine.send({
        name: 'payment/process',
        data: {
          telegram_id: event.data.telegram_id,
          amount: event.data.cost_per_image,
          is_ru: event.data.is_ru,
          bot_name: event.data.bot_name,
          type: 'money_expense',
          description: 'Payment for image to prompt conversion',
          operation_id: payment_operation_id,
          service_type: ModeEnum.ImageToPrompt,
          metadata: {
            service_type: ModeEnum.ImageToPrompt,
            image_url: event.data.image,
          },
        },
      })

      logger.info('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        description: 'Prompt generation request processed',
        event_id: event.id,
        telegram_id: event.data.telegram_id,
      })

      return { success: true }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞', {
        description: 'Error processing prompt generation request',
        error: error instanceof Error ? error.message : String(error),
        event_id: event.id,
      })
      throw error
    }
  }
)
