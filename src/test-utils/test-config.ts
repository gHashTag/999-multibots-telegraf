import { Inngest } from 'inngest'
import fetch from 'node-fetch'

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 */
export const TEST_CONFIG = {
  /**
   * –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
   */
  TIMEOUTS: {
    /** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ */
    DEFAULT: 5000,
    /** –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö */
    DATABASE: 3000,
    /** –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å API */
    API: 2000,
    /** –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */
    ASYNC: 1000,
  },

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  TEST_DATA: {
    /** –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    TEST_USER_TELEGRAM_ID: '123456789',
    /** –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º */
    TEST_AMOUNT: 100,
    /** –¢–µ—Å—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º */
    TEST_STARS: 50,
    /** –ò–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ */
    TEST_BOT_NAME: 'test_bot',
    /** –¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π */
    TEST_DESCRIPTION: 'Test payment description',
  },

  /**
   * –§–ª–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
   */
  FLAGS: {
    /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ */
    VERBOSE_LOGGING: true,
    /** –û—á–∏—â–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
    CLEANUP_AFTER_TEST: true,
    /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ */
    USE_MOCKS: true,
  },
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–º–æ–∫
 */
export const createMockFn = <T = any, R = any>() => {
  const mockFn = (...args: T[]): R => {
    mockFn.calls.push(args)
    return mockFn.returnValue as R
  }

  mockFn.calls = [] as T[][]
  mockFn.returnValue = undefined as unknown as R

  mockFn.mockReturnValue = (value: R) => {
    mockFn.returnValue = value
    return mockFn
  }

  mockFn.mockClear = () => {
    mockFn.calls = []
    return mockFn
  }

  return mockFn
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 */
export class InngestTestEngineMock {
  async sendEvent(eventName: string, data: any): Promise<any> {
    console.log(
      `üöÄ [TEST_ENGINE_MOCK]: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è "${eventName}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
      data
    )
    return Promise.resolve({ success: true })
  }

  registerHandler(eventName: string, _handler: any): void {
    console.log(
      `‚ÑπÔ∏è [TEST_ENGINE_MOCK]: –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${eventName}"`
    )
  }

  wasEventSent(): boolean {
    return true
  }

  getEventData(): any[] {
    return []
  }

  clear(): void {
    console.log('üßπ [TEST_ENGINE_MOCK]: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞')
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 */
export const inngestTestEngine = new InngestTestEngineMock()

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Inngest
 */
export const testInngestClient = new Inngest({
  id: 'test-app',
  eventKey: 'test-key',
  fetch: fetch as any,
})
