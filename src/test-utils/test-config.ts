import { Inngest } from 'inngest'
import fetch from 'node-fetch'
import { ModeEnum } from '../price/helpers/modelsCost'
import { logger } from '../utils/logger'

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 *
 * @module src/test-utils/test-config
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ Inngest —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export class InngestTestEngineMock {
  /**
   * –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public sentEvents: { name: string; data: any; timestamp: number }[] = []

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest (–º–æ–∫)
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @param data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendEvent(eventName: string, data: any): Promise<boolean> {
    console.log(
      `üöÄ [TEST_ENGINE_MOCK]: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "${eventName}" —Å –¥–∞–Ω–Ω—ã–º–∏:`,
      data
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (eventName === 'payment/process') {
      if (!data.telegram_id) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ telegram_id')
      }

      if (!data.amount && data.amount !== 0) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ amount')
      }

      if (!data.type) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ type')
      }

      if (data.amount < 0) {
        throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
      }

      if (data.stars < 0) {
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º')
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
    this.sentEvents.push({
      name: eventName,
      data,
      timestamp: Date.now(),
    })

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    // –ù–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

    return true
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   *
   * @param eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @returns Array - –ú–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  getEventsByName(
    eventName: string
  ): { name: string; data: any; timestamp: number }[] {
    return this.sentEvents.filter(event => event.name === eventName)
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  clearEvents(): void {
    this.sentEvents = []
    console.log('üßπ [TEST_ENGINE_MOCK]: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞')
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export const TEST_CONFIG = {
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  TIMEOUTS: {
    SHORT: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
    MEDIUM: 5000, // 5 —Å–µ–∫—É–Ω–¥
    LONG: 10000, // 10 —Å–µ–∫—É–Ω–¥
    DATABASE: 3000, // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  },

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  TEST_DATA: {
    TEST_USER_TELEGRAM_ID: '123456789',
    TEST_USER_USERNAME: 'testuser',
    TEST_USER_FIRST_NAME: 'Test',
    TEST_USER_LAST_NAME: 'User',

    TEST_AMOUNT: 100, // –°—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_STARS: 100, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_OPERATION_ID: 'test-op-123', // ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    TEST_BOT_NAME: 'test_bot', // –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
  PAYMENT_TESTS: {
    MODES: {
      TEXT_TO_IMAGE: ModeEnum.TextToImage,
      TEXT_TO_VIDEO: ModeEnum.TextToVideo,
      TOP_UP_BALANCE: ModeEnum.TopUpBalance,
    },

    // –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
    COSTS: {
      TEXT_TO_IMAGE: 10,
      TEXT_TO_VIDEO: 20,
    },
  },
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest
export const inngestTestEngine = new InngestTestEngineMock()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const configureTestLogging = () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  process.env.LOG_LEVEL = 'info'

  // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  logger.info('üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤', {
    description: 'Setting up logging for tests',
  })
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–º–æ–∫
 */
export const createMockFn = <T = any, R = any>() => {
  const mockFn = (...args: T[]): R => {
    mockFn.calls.push(args)
    return mockFn.returnValue as R
  }

  mockFn.calls = [] as T[][]
  mockFn.returnValue = undefined as unknown as R

  mockFn.mockReturnValue = (value: R) => {
    mockFn.returnValue = value
    return mockFn
  }

  mockFn.mockClear = () => {
    mockFn.calls = []
    return mockFn
  }

  return mockFn
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Inngest
 */
export const testInngestClient = new Inngest({
  id: 'test-app',
  eventKey: 'test-key',
  fetch: fetch as any,
})
