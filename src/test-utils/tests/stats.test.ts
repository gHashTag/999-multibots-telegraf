import { TEST_CONFIG } from '../test-config'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { MyContext } from '@/interfaces'
import { TestResult } from '../types'

const mockSession = {
  __scenes: {
    data: {},
    cursor: 0,
    severity: 'info',
  },
  data: {},
  imageUrl: '',
  text: '',
  amount: 0,
  attempts: 0,
  severity: 'info',
  cursor: 0,
}

export async function statsTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats', {
      description: 'Starting /stats command test',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞)
    const ownerTelegramId = '123456789'
    const botName = 'test_bot'

    const { error: ownerError } = await supabase.from('users').insert({
      telegram_id: ownerTelegramId,
      bot_name: botName,
      balance: 1000,
    })

    if (ownerError) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞: ${ownerError.message}`
      )
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userTelegramId = '987654321'
    const { error: userError } = await supabase.from('users').insert({
      telegram_id: userTelegramId,
      bot_name: botName,
      balance: 500,
    })

    if (userError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`)
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const { error: paymentError } = await supabase.from('payments_v2').insert([
      {
        telegram_id: ownerTelegramId,
        bot_name: botName,
        amount: 100,
        stars: 100,
        type: 'money_income',
        status: 'COMPLETED',
        payment_method: 'rub',
        description: 'Test payment 1',
      },
      {
        telegram_id: ownerTelegramId,
        bot_name: botName,
        amount: -50,
        stars: 50,
        type: 'money_expense',
        status: 'COMPLETED',
        description: 'Test payment 2',
      },
    ])

    if (paymentError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentError.message}`)
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    const ownerContext = {
      from: {
        id: parseInt(ownerTelegramId),
        is_bot: false,
        first_name: 'Owner',
      },
      botInfo: {
        username: botName,
      },
      session: mockSession,
    } as unknown as MyContext

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userContext = {
      from: {
        id: parseInt(userTelegramId),
        is_bot: false,
        first_name: 'User',
      },
      botInfo: {
        username: botName,
      },
      session: mockSession,
    } as unknown as MyContext

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    logger.info('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞', {
      description: 'Testing /stats command for bot owner',
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Testing /stats command for regular user',
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã /stats:', {
      description: 'Error in /stats command test',
      error: error instanceof Error ? error.message : String(error),
    })
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã /stats: ${
        error instanceof Error ? error.message : String(error)
      }`,
    }
  }
}
