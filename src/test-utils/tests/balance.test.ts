import { logger } from '@/utils/logger'
import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'
import { supabase } from '@/core/supabase'

import { getUserBalance } from '@/core/supabase'

export const runBalanceTests = async (): Promise<TestResult[]> => {
  const results: TestResult[] = []
  const { TEST_BOT_NAME, TEST_OWNER_ID } = TEST_CONFIG

  try {
    logger.info('üéØ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Starting balance tests',
      test_bot: TEST_BOT_NAME,
    })

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const { error: deletePaymentsError } = await supabase
      .from('payments_v2')
      .delete()
      .eq('bot_name', TEST_BOT_NAME)
      .eq('telegram_id', String(TEST_OWNER_ID))

    if (deletePaymentsError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', {
        description: 'Error cleaning test payments',
        error: deletePaymentsError.message,
        details: deletePaymentsError,
      })
      throw deletePaymentsError
    }

    const { error: deleteUserError } = await supabase
      .from('users')
      .delete()
      .eq('bot_name', TEST_BOT_NAME)
      .eq('telegram_id', String(TEST_OWNER_ID))

    if (deleteUserError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error cleaning test user',
        error: deleteUserError.message,
        details: deleteUserError,
      })
      throw deleteUserError
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: userError } = await supabase.from('users').insert({
      telegram_id: String(TEST_OWNER_ID),
      bot_name: TEST_BOT_NAME,
      is_active: true,
      is_bot_owner: true,
    })

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error creating test user',
        error: userError.message,
        details: userError,
      })
      throw userError
    }

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(TEST_OWNER_ID, TEST_BOT_NAME)

    results.push({
      name: 'Initial Balance Check',
      success: initialBalance === 0,
      message:
        initialBalance === 0
          ? '‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0'
          : '‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ',
      details: { expected: 0, actual: initialBalance },
    })

    // –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    const { error: paymentError } = await supabase.from('payments_v2').insert({
      telegram_id: String(TEST_OWNER_ID),
      amount: 100,
      stars: 100,
      bot_name: TEST_BOT_NAME,
      status: 'COMPLETED',
      type: 'money_income',
      payment_method: 'rub',
      description: 'Test payment',
    })

    if (paymentError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error creating test payment',
        error: paymentError.message,
        details: paymentError,
      })
      throw paymentError
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const updatedBalance = await getUserBalance(TEST_OWNER_ID, TEST_BOT_NAME)

    results.push({
      name: 'Balance Update After Payment',
      success: updatedBalance === 100,
      message:
        updatedBalance === 100
          ? '‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞'
          : '‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞',
      details: { expected: 100, actual: updatedBalance },
    })

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { error: cleanupPaymentsError } = await supabase
      .from('payments_v2')
      .delete()
      .eq('bot_name', TEST_BOT_NAME)
      .eq('telegram_id', String(TEST_OWNER_ID))

    if (cleanupPaymentsError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', {
        description: 'Error cleaning up test payments',
        error: cleanupPaymentsError.message,
        details: cleanupPaymentsError,
      })
      throw cleanupPaymentsError
    }

    const { error: cleanupUserError } = await supabase
      .from('users')
      .delete()
      .eq('bot_name', TEST_BOT_NAME)
      .eq('telegram_id', String(TEST_OWNER_ID))

    if (cleanupUserError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error cleaning up test user',
        error: cleanupUserError.message,
        details: cleanupUserError,
      })
      throw cleanupUserError
    }

    logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
      description: 'Balance testing completed',
      results,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error during balance testing',
      error: error instanceof Error ? error.message : String(error),
      details: error,
    })

    results.push({
      name: 'Balance Testing',
      success: false,
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${
        error instanceof Error ? error.message : String(error)
      }`,
      details: error,
    })
  }

  return results
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ add_stars_to_balance
 */
export async function testAddStarsToBalance(): Promise<TestResult> {
  const testName = 'add_stars_to_balance'

  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç add_stars_to_balance:', {
    description: 'Starting add_stars_to_balance test',
    test_config: TEST_CONFIG,
  })

  try {
    // –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID
    const testTelegramId = TEST_CONFIG.TEST_TELEGRAM_ID
    const botName = TEST_CONFIG.TEST_BOT_NAME

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é getUserBalance –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–æ–ª–æ–Ω–∫–µ balance
    const initialBalance = await getUserBalance(testTelegramId, botName)

    logger.info('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', {
      description: 'Test user information',
      telegram_id: testTelegramId,
      initial_balance: initialBalance,
    })

    // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å
    const testAmount = 5

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_stars_to_balance
    const { data: result, error: balanceError } = await supabase.rpc(
      'add_stars_to_balance',
      {
        p_telegram_id: testTelegramId,
        p_stars: testAmount,
        p_description: 'Test balance update',
        p_bot_name: botName,
        p_type: 'money_income',
        p_service_type: 'test',
      }
    )

    if (balanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ add_stars_to_balance:', {
        description: 'Error calling add_stars_to_balance',
        error: balanceError,
        telegram_id: testTelegramId,
        amount: testAmount,
        bot_name: botName,
      })
      throw balanceError
    }

    logger.info('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç add_stars_to_balance:', {
      description: 'add_stars_to_balance result',
      result,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º getUserBalance –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ balance
    const newBalance = await getUserBalance(testTelegramId, botName)
    const expectedBalance = Number(initialBalance) + testAmount

    logger.info('‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
      description: 'Balance change results',
      initialBalance,
      testAmount,
      expectedBalance,
      actualNewBalance: newBalance,
      isCorrect: newBalance === expectedBalance,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ payments_v2
    const { data: paymentData, error: paymentError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', testTelegramId)
      .eq('stars', testAmount)
      .eq('bot_name', botName)
      .order('payment_date', { ascending: false })
      .limit(1)

    if (paymentError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ payment_v2:', {
        description: 'Error checking payment_v2 record',
        error: paymentError,
        telegram_id: testTelegramId,
        currentBalance: newBalance,
      })
      throw paymentError
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ payments_v2 –∏ –æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
    const paymentExists = paymentData && paymentData.length > 0
    const paymentIsCorrect =
      paymentExists &&
      paymentData[0].stars === testAmount &&
      paymentData[0].type === 'money_income'

    logger.info('‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ payments_v2:', {
      description: 'Payment record check results',
      payment_exists: paymentExists,
      payment_is_correct: paymentIsCorrect,
      payment_data:
        paymentData && paymentData.length > 0 ? paymentData[0] : null,
      currentBalance: newBalance,
    })

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —É–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–±–∞–≤–∏–ª–∏
    const { error: cleanupError } = await supabase
      .from('payments_v2')
      .delete()
      .eq('telegram_id', testTelegramId)
      .eq('stars', testAmount)
      .eq('bot_name', botName)

    if (cleanupError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', {
        description: 'Error cleaning up test payments',
        error: cleanupError,
      })
    }

    const isBalanceCorrect = newBalance === expectedBalance

    return {
      name: testName,
      success: isBalanceCorrect && !balanceError,
      message: isBalanceCorrect
        ? '‚úÖ –§—É–Ω–∫—Ü–∏—è add_stars_to_balance —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        : `‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ add_stars_to_balance. –û–∂–∏–¥–∞–ª—Å—è –±–∞–ª–∞–Ω—Å ${expectedBalance}, –ø–æ–ª—É—á–µ–Ω ${newBalance}`,
      details: {
        initialBalance,
        added: testAmount,
        expectedBalance,
        actualNewBalance: newBalance,
        paymentRecordFound: paymentExists,
        paymentRecordCorrect: paymentIsCorrect,
      },
    }
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ add_stars_to_balance:', {
      description: 'Critical error in add_stars_to_balance test',
      error: error instanceof Error ? error.message : String(error),
      details: error,
    })

    return {
      name: testName,
      success: false,
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${
        error instanceof Error ? error.message : String(error)
      }`,
      details: error,
    }
  }
}
