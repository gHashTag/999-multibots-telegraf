import { logger } from '@/utils/logger'
import { TestResult } from '@/test-utils/types'
import { TEST_CONFIG } from '@/test-utils/test-config'
import { InngestTestEngine } from '@/test-utils/inngest-test-engine'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { supabase } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'

// –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
const inngestTestEngine = new InngestTestEngine()

export async function runBalanceTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Starting balance tests',
      test_user_id: TEST_CONFIG.TEST_TELEGRAM_ID,
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    await inngestTestEngine.init()

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await Promise.all([
      supabase
        .from('users')
        .delete()
        .eq('telegram_id', TEST_CONFIG.TEST_TELEGRAM_ID)
        .eq('bot_name', TEST_CONFIG.TEST_BOT_NAME),
      supabase
        .from('payments_v2')
        .delete()
        .eq('telegram_id', TEST_CONFIG.TEST_TELEGRAM_ID)
        .eq('bot_name', TEST_CONFIG.TEST_BOT_NAME),
    ])

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
      username: `test_user_${TEST_CONFIG.TEST_TELEGRAM_ID}`,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
    })

    if (createError) {
      throw createError
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
    inngestTestEngine.registerEventHandler(
      'payment/process',
      async ({ event }: { event: any }) => {
        logger.info('üí∞ Processing test payment:', {
          description: 'Processing test payment',
          eventData: event.data,
        })
        return { success: true }
      }
    )

    logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ', {
      description: 'Payment handler registered successfully',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(TEST_CONFIG.TEST_TELEGRAM_ID)

    results.push({
      success: initialBalance === 0,
      name: 'Initial Balance Test',
      message:
        initialBalance === 0
          ? '‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0'
          : `‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${initialBalance}, –æ–∂–∏–¥–∞–ª–æ—Å—å 0`,
      startTime: Date.now(),
    })

    // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    try {
      await inngestTestEngine.send({
        name: 'payment/process',
        data: {
          telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
          amount: 100,
          type: 'money_income',
          description: 'Test balance add',
          bot_name: TEST_CONFIG.TEST_BOT_NAME,
          service_type: ModeEnum.TopUpBalance,
        },
      })

      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
        description: 'Payment event sent successfully',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error sending payment event',
        error: error instanceof Error ? error.message : String(error),
      })
      throw error
    }

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    await new Promise(resolve => setTimeout(resolve, 1000))
    const balanceAfterAdd = await getUserBalance(TEST_CONFIG.TEST_TELEGRAM_ID)

    results.push({
      success: balanceAfterAdd === 100,
      name: 'Balance After Add Test',
      message:
        balanceAfterAdd === 100
          ? '‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–≤–µ–Ω 100'
          : `‚ùå –û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${balanceAfterAdd}, –æ–∂–∏–¥–∞–ª–æ—Å—å 100`,
      startTime: Date.now(),
    })

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', {
      description: 'All balance tests passed successfully',
    })

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await Promise.all([
      supabase
        .from('users')
        .delete()
        .eq('telegram_id', TEST_CONFIG.TEST_TELEGRAM_ID)
        .eq('bot_name', TEST_CONFIG.TEST_BOT_NAME),
      supabase
        .from('payments_v2')
        .delete()
        .eq('telegram_id', TEST_CONFIG.TEST_TELEGRAM_ID)
        .eq('bot_name', TEST_CONFIG.TEST_BOT_NAME),
    ])

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–∞–ª–∞–Ω—Å–∞:', {
      description: 'Error in balance tests',
      error: error instanceof Error ? error.message : String(error),
    })

    results.push({
      success: false,
      name: 'Balance Tests',
      message: '–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–∞–ª–∞–Ω—Å–∞',
      error: error instanceof Error ? error : new Error(String(error)),
      startTime: Date.now(),
    })

    return results
  }
}
