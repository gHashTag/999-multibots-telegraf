import { inngest } from '@/inngest-functions/clients'
import { TestResult } from '@/test-utils/types'
import { logger } from '@/lib/logger'
import { InngestTestEngine } from '../inngest-test-engine'
import { TEST_CONFIG } from '../test-config'
import { createTestError } from '../test-logger'
import { getUserBalance } from '@/core/supabase'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'
import { calculateFinalPrice } from '@/price/helpers/calculateFinalPrice'
import { imageToVideoFunction } from '@/inngest-functions/imageToVideo.inngest'

const inngestTestEngine = new InngestTestEngine()

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è image/video
inngestTestEngine.registerEventHandler('image/video', imageToVideoFunction)

interface ImageToVideoEventData {
  imageUrl: string
  prompt: string
  videoModel: string
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
}

const TEST_DATA = {
  telegram_id: TEST_CONFIG.test_user_id,
  bot_name: TEST_CONFIG.TEST_BOT_NAME,
  test_image_url:
    'https://raw.githubusercontent.com/gHashTag/999-multibots-telegraf/main/test-assets/test-image.jpg',
  model_id: 'kling-v1.6-pro',
  prompt: 'Make this image move naturally with smooth motion',
  is_ru: false,
  username: 'test_user',
}

async function waitForVideoGeneration(
  eventId: string,
  maxAttempts = 30
): Promise<boolean> {
  for (let i = 0; i < maxAttempts; i++) {
    const status = await inngestTestEngine.getEventStatus(eventId)
    if (status?.status === 'completed') {
      return true
    }
    if (status?.status === 'failed') {
      throw new Error(`Video generation failed: ${status.error}`)
    }
    await new Promise(resolve => setTimeout(resolve, 5000)) // Wait 5 seconds between checks
  }
  return false
}

async function checkUserBalance(telegram_id: string): Promise<number> {
  try {
    const balance = await getUserBalance(telegram_id)
    logger.info('üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { balance, telegram_id })
    return balance
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', { error, telegram_id })
    throw error
  }
}

export const testImageToVideo = async (): Promise<TestResult[]> => {
  const results: TestResult[] = []
  const startTime = Date.now()

  try {
    logger.info('üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ image-to-video')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await checkUserBalance(TEST_DATA.telegram_id)

    // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    logger.info('üöÄ –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ')
    const eventData = {
      imageUrl: TEST_DATA.test_image_url,
      prompt: TEST_DATA.prompt,
      videoModel: TEST_DATA.model_id,
      telegram_id: TEST_DATA.telegram_id,
      username: TEST_DATA.username,
      is_ru: TEST_DATA.is_ru,
      bot_name: TEST_DATA.bot_name,
    } as ImageToVideoEventData

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–≤–∏–∂–∫–µ
    const eventId = `test-${Date.now()}`
    inngestTestEngine.setEventStatus(eventId, { status: 'pending' })

    try {
      await inngestTestEngine.send({
        name: 'image/video',
        data: eventData,
      })
      inngestTestEngine.setEventStatus(eventId, { status: 'completed' })
    } catch (error) {
      inngestTestEngine.setEventStatus(eventId, {
        status: 'failed',
        error: error instanceof Error ? error.message : String(error),
      })
      throw error
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const isCompleted = await waitForVideoGeneration(eventId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const balanceAfterGeneration = await checkUserBalance(TEST_DATA.telegram_id)
    const expectedCost = calculateFinalPrice(TEST_DATA.model_id)
    const actualCost = initialBalance - balanceAfterGeneration

    results.push({
      name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      success: isCompleted && actualCost === expectedCost,
      message: isCompleted
        ? `–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ. –°–ø–∏—Å–∞–Ω–æ ${actualCost} –∑–≤–µ–∑–¥ (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedCost})`
        : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
      details: {
        eventId,
        initialBalance,
        finalBalance: balanceAfterGeneration,
        actualCost,
        expectedCost,
        model: TEST_DATA.model_id,
        modelConfig: VIDEO_MODELS_CONFIG[TEST_DATA.model_id],
      },
      startTime,
    })

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    logger.info('üí∞ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞')
    const insufficientBalanceResult = await inngest.send({
      name: 'image/video',
      data: {
        imageUrl: TEST_DATA.test_image_url,
        prompt: TEST_DATA.prompt,
        videoModel: TEST_DATA.model_id,
        telegram_id: '999999999', // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        username: 'zero_balance_user',
        is_ru: TEST_DATA.is_ru,
        bot_name: TEST_DATA.bot_name,
      } as ImageToVideoEventData,
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: insufficientBalanceResult,
      startTime,
    })

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏
    logger.info('üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏')
    const unsupportedModelResult = await inngest.send({
      name: 'image/video',
      data: {
        imageUrl: TEST_DATA.test_image_url,
        prompt: TEST_DATA.prompt,
        videoModel: 'unsupported-model',
        telegram_id: TEST_DATA.telegram_id,
        username: TEST_DATA.username,
        is_ru: TEST_DATA.is_ru,
        bot_name: TEST_DATA.bot_name,
      } as ImageToVideoEventData,
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: unsupportedModelResult,
      startTime,
    })

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info('üñºÔ∏è –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    const invalidImageResult = await inngest.send({
      name: 'image/video',
      data: {
        imageUrl: 'https://invalid-image-url.jpg',
        prompt: TEST_DATA.prompt,
        videoModel: TEST_DATA.model_id,
        telegram_id: TEST_DATA.telegram_id,
        username: TEST_DATA.username,
        is_ru: TEST_DATA.is_ru,
        bot_name: TEST_DATA.bot_name,
      } as ImageToVideoEventData,
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: invalidImageResult,
      startTime,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ image-to-video:', error)
    results.push({
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ image-to-video',
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      error: createTestError(error),
      startTime,
    })
    return results
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
export async function runImageToVideoTests(): Promise<void> {
  try {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    await inngestTestEngine.init()

    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ image-to-video')
    const results = await testImageToVideo()

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', {
      total: results.length,
      passed: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length,
    })

    // –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results.forEach(result => {
      if (result.success) {
        logger.info(`‚úÖ ${result.name}: ${result.message}`, result.details)
      } else {
        logger.error(`‚ùå ${result.name}: ${result.message}`, {
          error: result.error,
          details: result.details,
        })
      }
    })
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error)
    throw error
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runImageToVideoTests()
    .then(() => process.exit(0))
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
