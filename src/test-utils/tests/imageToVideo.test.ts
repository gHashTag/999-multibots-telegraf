import { inngest } from '@/inngest-functions/clients'
import { TestResult } from '@/test-utils/types'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const testImageToVideo = async (): Promise<TestResult[]> => {
  const results: TestResult[] = []
  const telegram_id = '123456789'
  const bot_name = 'test_bot'
  const test_image_url = 'https://example.com/test.jpg'

  console.log('üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ image-to-video')

  try {
    // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const successResult = await inngest.send({
      name: 'image-to-video.requested',
      data: {
        prompt: 'Make the image move naturally',
        image_url: test_image_url,
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
      },
    })

    results.push({
      name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      success: true,
      message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      details: successResult,
    })

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
    const apiErrorResult = await inngest.send({
      name: 'image-to-video.requested',
      data: {
        prompt: 'Test API error',
        image_url: test_image_url,
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
        _test: {
          api_error: true,
        },
      },
    })

    results.push({
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API',
      success: true,
      message: '–û—à–∏–±–∫–∞ API —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: apiErrorResult,
    })

    // –¢–µ—Å—Ç 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    const insufficientBalanceResult = await inngest.send({
      name: 'image-to-video.requested',
      data: {
        prompt: 'Test insufficient balance',
        image_url: test_image_url,
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
        _test: {
          insufficient_balance: true,
        },
      },
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: insufficientBalanceResult,
    })

    // –¢–µ—Å—Ç 4: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å
    const unsupportedModelResult = await inngest.send({
      name: 'image-to-video.requested',
      data: {
        prompt: 'Test unsupported model',
        image_url: test_image_url,
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'unsupported-model',
      },
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: unsupportedModelResult,
    })

    // –¢–µ—Å—Ç 5: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const missingImageResult = await inngest.send({
      name: 'image-to-video.requested',
      data: {
        prompt: 'Test missing image',
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
      },
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      success: true,
      message: '–û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: missingImageResult,
    })

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
    for (const [modelId, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      if (config.inputType.includes('image')) {
        const modelResult = await inngest.send({
          name: 'image-to-video.requested',
          data: {
            prompt: `Test model ${modelId}`,
            image_url: test_image_url,
            telegram_id,
            is_ru: false,
            bot_name,
            model_id: modelId,
          },
        })

        results.push({
          name: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ ${modelId}`,
          success: true,
          message: `–ú–æ–¥–µ–ª—å ${modelId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞`,
          details: modelResult,
        })
      }
    }

    return results
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ image-to-video:', error)
    results.push({
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ image-to-video',
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      error: error instanceof Error ? error.message : String(error),
    })
    return results
  }
} 