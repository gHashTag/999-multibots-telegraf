import { runApiMonitoring } from './apiMonitoringTest'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API
 */
export async function runApiTests(): Promise<TestResult> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API',
    description: 'Starting API tests',
  })

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API
    const monitoringResult = await runApiMonitoring({ generateReport: true })

    // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
    if (monitoringResult.report) {
      logger.info({
        message: 'üìä –û—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API:',
        description: 'API monitoring report:',
      })
      // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
      monitoringResult.report.split('\n').forEach(line => {
        if (line.trim()) {
          logger.info({
            message: line,
            description: line,
          })
        }
      })
    }

    if (monitoringResult.success) {
      logger.info({
        message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
        description: 'All API tests passed successfully',
      })
    } else {
      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
        description: 'Some API tests failed',
      })
    }

    return {
      success: monitoringResult.success,
      name: 'API —Ç–µ—Å—Ç—ã',
      message: monitoringResult.message,
      category: TestCategory.Api,
      details: { report: monitoringResult.report },
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API: ${errorMessage}`,
      description: `Error running API tests: ${errorMessage}`,
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      name: 'API —Ç–µ—Å—Ç—ã',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API: ${errorMessage}`,
      category: TestCategory.Api,
      error: errorMessage,
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤ API
 */
export { runApiMonitoring }

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ CLI
 */
if (require.main === module) {
  ;(async () => {
    try {
      const result = await runApiTests()
      console.log(
        result.success
          ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã'
          : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã'
      )
      process.exit(result.success ? 0 : 1)
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ API:', error)
      process.exit(1)
    }
  })()
}
