import axios from 'axios'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TEST_CONFIG } from '../../test-config'
import fs from 'fs'
import path from 'path'

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
interface ApiMonitoringResult extends TestResult {
  report?: string
  statusHistory?: Record<string, ApiEndpointHistory[]>
}

// –¢–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ API
interface ApiEndpointHistory {
  timestamp: number
  name: string
  path: string
  status: 'up' | 'down'
  responseTime: number
  statusCode?: number
  error?: string
}

// –ë–∞–∑–æ–≤—ã–π URL API
const API_URL = process.env.API_URL || 'http://localhost:2999'

// –í–Ω–µ—à–Ω–∏–µ API
const EXTERNAL_API = {
  NEURAL_PHOTO: process.env.NEURAL_PHOTO_API_URL || 'https://api.neural.love',
  STABLE_DIFFUSION:
    process.env.STABLE_DIFFUSION_API_URL || 'https://api.stability.ai',
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API
interface ApiEndpoint {
  name: string
  path: string
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  expectedStatus: number
  description: string
  headers?: Record<string, string>
  data?: any
  disabled?: boolean
}

// –°–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–û—Å–Ω–æ–≤–Ω–æ–π API',
    path: `${API_URL}/`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API',
  },
  {
    name: 'API –ö–æ–Ω—Ç–µ–Ω—Ç-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
    path: `${API_URL}/api/content/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
  },
  {
    name: 'Inngest API',
    path: `${API_URL}/api/inngest`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API',
  },
  {
    name: 'Webhook API (DEBUG)',
    path: `${API_URL}/webhooks/ping`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook API',
  },
  {
    name: 'Webhook –ù–µ–π—Ä–æ–§–æ—Ç–æ',
    path: `${API_URL}/webhooks/neurophoto-debug`,
    method: 'POST',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ',
    data: {
      task_id: `test-${Date.now()}`,
      status: 'COMPLETED',
      result: { sample: 'https://example.com/test-image.jpg' },
    },
  },
  {
    name: '–ë–æ—Ç #1',
    path: `${API_URL}/bot1/webhook`,
    method: 'POST',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ë–æ—Ç–∞ #1',
    data: { update_id: 123, message: { text: '/ping' } },
  },
  {
    name: '–ë–æ—Ç #2',
    path: `${API_URL}/bot2/webhook`,
    method: 'POST',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ë–æ—Ç–∞ #2',
    data: { update_id: 123, message: { text: '/ping' } },
  },
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API
]

// –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const EXTERNAL_API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: 'Neural Photo API',
    path: `${EXTERNAL_API.NEURAL_PHOTO}/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Neural Photo',
    disabled: !process.env.NEURAL_PHOTO_API_KEY,
  },
  {
    name: 'Stable Diffusion API',
    path: `${EXTERNAL_API.STABLE_DIFFUSION}/v1/engines/list`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Stable Diffusion',
    headers: {
      Authorization: `Bearer ${process.env.STABILITY_API_KEY || ''}`,
    },
    disabled: !process.env.STABILITY_API_KEY,
  },
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–Ω–µ—à–Ω–∏–µ API
]

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
const HISTORY_FILE_PATH = path.join(
  __dirname,
  '../../../logs/api-status-history.json'
)

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ API
 */
function loadStatusHistory(): Record<string, ApiEndpointHistory[]> {
  try {
    if (fs.existsSync(HISTORY_FILE_PATH)) {
      const data = fs.readFileSync(HISTORY_FILE_PATH, 'utf8')
      return JSON.parse(data)
    }
  } catch (error) {
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ API: ${error instanceof Error ? error.message : String(error)}`,
      description: `Error loading API status history: ${error instanceof Error ? error.message : String(error)}`,
    })
  }
  return {}
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ API
 */
function saveStatusHistory(
  history: Record<string, ApiEndpointHistory[]>
): void {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(HISTORY_FILE_PATH)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }

    fs.writeFileSync(
      HISTORY_FILE_PATH,
      JSON.stringify(history, null, 2),
      'utf8'
    )
    logger.info({
      message: 'üíæ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ API —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      description: 'API status history saved successfully',
    })
  } catch (error) {
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ API: ${error instanceof Error ? error.message : String(error)}`,
      description: `Error saving API status history: ${error instanceof Error ? error.message : String(error)}`,
    })
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testEndpoint(endpoint: ApiEndpoint): Promise<{
  success: boolean
  error?: string
  statusCode?: number
  responseTime: number
}> {
  const startTime = Date.now()

  try {
    logger.info({
      message: `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name} (${endpoint.path})`,
      description: `Testing endpoint: ${endpoint.name} (${endpoint.path})`,
    })

    const response = await axios({
      method: endpoint.method,
      url: endpoint.path,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      headers: endpoint.headers,
      data: endpoint.data,
      validateStatus: () => true, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    })

    const responseTime = Date.now() - startTime

    if (response.status === endpoint.expectedStatus) {
      logger.info({
        message: `‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status}, ${responseTime}ms)`,
        description: `Endpoint ${endpoint.name} is available (${response.status}, ${responseTime}ms)`,
      })
      return {
        success: true,
        statusCode: response.status,
        responseTime,
      }
    } else {
      logger.warn({
        message: `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`,
        description: `Endpoint ${endpoint.name} returned unexpected status: ${response.status} (expected ${endpoint.expectedStatus})`,
        responseTime,
      })
      return {
        success: false,
        error: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
        statusCode: response.status,
        responseTime,
      }
    }
  } catch (error) {
    const responseTime = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`,
      description: `Error testing endpoint ${endpoint.name}: ${errorMessage}`,
      responseTime,
    })

    return {
      success: false,
      error: errorMessage,
      responseTime,
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
function updateEndpointHistory(
  history: Record<string, ApiEndpointHistory[]>,
  endpoint: ApiEndpoint,
  result: {
    success: boolean
    error?: string
    statusCode?: number
    responseTime: number
  }
): void {
  const key = `${endpoint.method}:${endpoint.path}`

  if (!history[key]) {
    history[key] = []
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
  if (history[key].length >= 100) {
    history[key] = history[key].slice(-99)
  }

  history[key].push({
    timestamp: Date.now(),
    name: endpoint.name,
    path: endpoint.path,
    status: result.success ? 'up' : 'down',
    responseTime: result.responseTime,
    statusCode: result.statusCode,
    error: result.error,
  })
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API
 */
function generateMonitoringReport(
  internalResults: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
    responseTime: number
  }[],
  externalResults: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
    responseTime: number
  }[],
  history: Record<string, ApiEndpointHistory[]>
): string {
  const internalSuccess = internalResults.filter(r => r.success).length
  const internalTotal = internalResults.length
  const externalSuccess = externalResults.filter(r => r.success).length
  const externalTotal = externalResults.length

  const timestamp = new Date().toISOString()

  let report = `üìä –û—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API (${timestamp})\n\n`
  report += `üì° –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API: ${internalSuccess}/${internalTotal} –¥–æ—Å—Ç—É–ø–Ω—ã\n`
  report += `üåê –í–Ω–µ—à–Ω–∏–µ API: ${externalSuccess}/${externalTotal} –¥–æ—Å—Ç—É–ø–Ω—ã\n\n`

  report += 'üìà –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API):\n'
  internalResults.forEach(r => {
    const statusEmoji = r.success ? '‚úÖ' : '‚ùå'
    report += `${statusEmoji} ${r.endpoint.name}: ${r.responseTime}ms ${r.success ? '' : `(${r.error || '–û—à–∏–±–∫–∞'})`}\n`
  })

  report += '\nüìà –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–≤–Ω–µ—à–Ω–∏–µ API):\n'
  externalResults.forEach(r => {
    if (!r.endpoint.disabled) {
      const statusEmoji = r.success ? '‚úÖ' : '‚ùå'
      report += `${statusEmoji} ${r.endpoint.name}: ${r.responseTime}ms ${r.success ? '' : `(${r.error || '–û—à–∏–±–∫–∞'})`}\n`
    } else {
      report += `‚è© ${r.endpoint.name}: –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)\n`
    }
  })

  report += '\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:\n'
  const problemEndpoints = [...internalResults, ...externalResults].filter(
    r => !r.success && !r.endpoint.disabled
  )

  if (problemEndpoints.length > 0) {
    problemEndpoints.forEach(r => {
      report += `‚ùå ${r.endpoint.name}: ${r.error || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`

      // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
      const key = `${r.endpoint.method}:${r.endpoint.path}`
      const endpointHistory = history[key] || []
      const last5 = endpointHistory.slice(-5)

      if (last5.length > 0) {
        const downCount = last5.filter(h => h.status === 'down').length
        if (downCount === last5.length) {
          report += `   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${downCount} –ø—Ä–æ–≤–µ—Ä–æ–∫\n`
        } else {
          report += `   ‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ${downCount} –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${last5.length} –ø—Ä–æ–≤–µ—Ä–æ–∫\n`
        }
      }
    })
  } else {
    report += '‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ API –¥–æ—Å—Ç—É–ø–Ω—ã\n'
  }

  return report
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API
 */
export async function runApiMonitoring(
  options: {
    generateReport?: boolean
  } = {}
): Promise<ApiMonitoringResult> {
  const { generateReport = true } = options

  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API',
    description: 'Starting API monitoring',
  })

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusHistory = loadStatusHistory()

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API
    const internalResults = []
    for (const endpoint of API_ENDPOINTS) {
      const result = await testEndpoint(endpoint)
      internalResults.push({
        endpoint,
        ...result,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
      updateEndpointHistory(statusHistory, endpoint, result)
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö API
    const externalResults = []
    for (const endpoint of EXTERNAL_API_ENDPOINTS) {
      if (endpoint.disabled) {
        logger.info({
          message: `‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
          description: `Skipping disabled endpoint: ${endpoint.name}`,
        })
        externalResults.push({
          endpoint,
          success: false,
          error: 'API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
          responseTime: 0,
        })
        continue
      }

      const result = await testEndpoint(endpoint)
      externalResults.push({
        endpoint,
        ...result,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
      updateEndpointHistory(statusHistory, endpoint, result)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    saveStatusHistory(statusHistory)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const internalSuccess = internalResults.every(r => r.success)
    const externalSuccessCount = externalResults.filter(
      r => r.success || r.endpoint.disabled
    ).length
    const externalTotal = externalResults.filter(
      r => !r.endpoint.disabled
    ).length
    const externalSuccess = externalSuccessCount === externalTotal

    const success = internalSuccess && externalSuccess

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    let report: string | undefined
    if (generateReport) {
      report = generateMonitoringReport(
        internalResults,
        externalResults,
        statusHistory
      )
      logger.info({
        message: 'üìä –û—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        description: 'API monitoring report generated',
      })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (success) {
      logger.info({
        message: '‚úÖ –í—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        description: 'All APIs are available and working correctly',
      })
    } else {
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        description: 'Some APIs are unavailable or not working correctly',
        internalApiSuccess: internalSuccess,
        externalApiSuccess: externalSuccess,
      })
    }

    return {
      success,
      name: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API',
      message: success
        ? '–í—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        : '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      category: 'Api',
      report,
      statusHistory,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API: ${errorMessage}`,
      description: `Critical error during API monitoring: ${errorMessage}`,
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      name: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API',
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API',
      category: 'Api',
      error: errorMessage,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
 */
async function main() {
  try {
    const result = await runApiMonitoring({ generateReport: true })

    if (result.report) {
      console.log(result.report)
    }

    process.exit(result.success ? 0 : 1)
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API:', error)
    process.exit(1)
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if (require.main === module) {
  main()
}
