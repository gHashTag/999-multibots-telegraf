import { TestResult } from '../../types'
import axios from 'axios'
import { logger } from '@/utils/logger'
import { TestCategory } from '../../core/categories'
import { TEST_CONFIG } from '../../test-config'
import { inngest } from '@/inngest-functions/clients'

const API_BASE_URL = process.env.API_URL || 'http://localhost:3000'
const INNGEST_BASE_URL = process.env.INNGEST_BASE_URL || 'http://localhost:8288'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Inngest API
 */
export async function testInngestAPI(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API', {
      description: 'Testing Inngest API availability and functionality',
      inngest_api_url: `${API_BASE_URL}/api/inngest`,
      inngest_server_url: INNGEST_BASE_URL,
    })

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/inngest
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/inngest', {
      description: 'Checking /api/inngest endpoint availability',
      url: `${API_BASE_URL}/api/inngest`,
    })

    const apiResponse = await axios({
      method: 'get',
      url: `${API_BASE_URL}/api/inngest`,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
    })

    if (apiResponse.status !== 200) {
      logger.error('‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', {
        description: 'Inngest API endpoint is not available',
        status: apiResponse.status,
        data: apiResponse.data,
      })

      return {
        success: false,
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API',
        message: `–≠–Ω–¥–ø–æ–∏–Ω—Ç /api/inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${apiResponse.status})`,
        category: TestCategory.Api,
        error: `Inngest API returned status ${apiResponse.status}`,
      }
    }

    logger.info('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/inngest –¥–æ—Å—Ç—É–ø–µ–Ω', {
      description: 'Inngest API endpoint is available',
      status: apiResponse.status,
    })

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ Inngest
    logger.info('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
      description: 'Sending test event to Inngest',
      event_name: 'test/api-connectivity',
    })

    try {
      await inngest.send({
        name: 'test/api-connectivity',
        data: {
          timestamp: new Date().toISOString(),
          test_id: `test-${Date.now()}`,
          source: 'api-test',
        },
      })

      logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        description: 'Test event successfully sent to Inngest',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', {
        description: 'Error sending test event to Inngest',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })

      return {
        success: false,
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ Inngest',
        category: TestCategory.Api,
        error: error instanceof Error ? error.message : String(error),
      }
    }

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ Inngest
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ Inngest', {
      description: 'Checking Inngest server availability',
      url: INNGEST_BASE_URL,
    })

    try {
      const serverResponse = await axios({
        method: 'get',
        url: INNGEST_BASE_URL,
        timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
        validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
      })

      // –°–µ—Ä–≤–µ—Ä Inngest –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 404 –∏–ª–∏ 200, –æ–±–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏
      if (serverResponse.status !== 200 && serverResponse.status !== 404) {
        logger.error('‚ùå –°–µ—Ä–≤–µ—Ä Inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', {
          description: 'Inngest server is not available',
          status: serverResponse.status,
          data: serverResponse.data,
        })

        return {
          success: false,
          name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API',
          message: `–°–µ—Ä–≤–µ—Ä Inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${serverResponse.status})`,
          category: TestCategory.Api,
          error: `Inngest server returned status ${serverResponse.status}`,
        }
      }

      logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä Inngest –¥–æ—Å—Ç—É–ø–µ–Ω', {
        description: 'Inngest server is available',
        status: serverResponse.status,
      })
    } catch (error) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Inngest', {
        description: 'Could not check Inngest server availability',
        error: error instanceof Error ? error.message : String(error),
      })

      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
      // –Ω–æ API –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', {
      description: 'Inngest API test completed successfully',
    })

    return {
      success: true,
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API',
      message: 'Inngest API –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      category: TestCategory.Api,
    }
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Inngest API', {
      description: 'Critical error while testing Inngest API',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest API',
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Inngest API',
      category: TestCategory.Api,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç Inngest API
 */
export async function runInngestApiTest(): Promise<TestResult> {
  return await testInngestAPI()
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runInngestApiTest()
    .then(result => {
      logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest API', {
        description: 'Inngest API test result',
        success: result.success,
        message: result.message,
      })

      process.exit(result.success ? 0 : 1)
    })
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ Inngest API', {
        description: 'Error running Inngest API test',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })

      process.exit(1)
    })
}
