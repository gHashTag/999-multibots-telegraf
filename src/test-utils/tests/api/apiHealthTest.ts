import axios from 'axios'
import { logger } from '@/utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { TEST_CONFIG } from '../../test-config'

// –¢–∏–ø—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—è report –¥–ª—è –æ—Ç—á–µ—Ç–∞
type ApiTestResult = TestResult & {
  report?: string
}

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
const BASE_API_URL = process.env.API_BASE_URL || 'http://localhost:3000'
const API_URL = process.env.API_URL || BASE_API_URL

// –í–Ω–µ—à–Ω–∏–µ API URL
const EXTERNAL_API = {
  bfl: 'https://api.us1.bfl.ai/v1',
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface ApiEndpoint {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  name: string
  /** –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É */
  path: string
  /** HTTP –º–µ—Ç–æ–¥ */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ */
  expectedStatus: number
  /** –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  description: string
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  headers?: Record<string, string>
  /** –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  data?: any
  /** –û—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  disabled?: boolean
}

/**
 * –°–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–û—Å–Ω–æ–≤–Ω–æ–π API',
    path: `${API_URL}/api`,
    method: 'GET',
    expectedStatus: 200,
    description: '–û—Å–Ω–æ–≤–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä–∞',
  },
  {
    name: 'Inngest API',
    path: `${API_URL}/api/inngest`,
    method: 'GET',
    expectedStatus: 200,
    description: 'API Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π',
  },
  {
    name: 'Inngest Dev Tools',
    path: `${API_URL}/api/inngest/dev`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Inngest',
  },
  {
    name: 'Uploads',
    path: `${API_URL}/uploads`,
    method: 'GET',
    expectedStatus: 200,
    description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º',
  },
  {
    name: 'Webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    path: `${API_URL}/webhooks/neurophoto`,
    method: 'POST',
    expectedStatus: 500, // –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
    description: 'Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
  },
  {
    name: 'Webhook BFL',
    path: `${API_URL}/webhooks/bfl`,
    method: 'POST',
    expectedStatus: 500, // –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
    description: 'Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BFL API',
  },
  {
    name: 'Webhook Replicate',
    path: `${API_URL}/webhooks/replicate`,
    method: 'POST',
    expectedStatus: 500, // –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
    description: 'Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Replicate',
  },
]

/**
 * –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
const EXTERNAL_API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: 'BFL API - Flux Pro',
    path: `${EXTERNAL_API.bfl}/flux-pro-1.1-ultra`,
    method: 'GET',
    expectedStatus: 401, // –ë–µ–∑ –∫–ª—é—á–∞ API –æ–∂–∏–¥–∞–µ–º 401 Unauthorized
    description: 'API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flux Pro',
    disabled: !process.env.BFL_API_KEY, // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ API
  },
  {
    name: 'BFL API - Flux Pro Finetuned',
    path: `${EXTERNAL_API.bfl}/flux-pro-1.1-ultra-finetuned`,
    method: 'GET',
    expectedStatus: 401, // –ë–µ–∑ –∫–ª—é—á–∞ API –æ–∂–∏–¥–∞–µ–º 401 Unauthorized
    description: 'API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å fine-tuning',
    disabled: !process.env.BFL_API_KEY, // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ API
  },
  {
    name: 'BFL API —Å –∫–ª—é—á–æ–º',
    path: `${EXTERNAL_API.bfl}/flux-pro-1.1-ultra`,
    method: 'GET',
    expectedStatus: 400, // –° –∫–ª—é—á–æ–º API –æ–∂–∏–¥–∞–µ–º 400 Bad Request (–Ω–µ—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞)
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API —Å –∫–ª—é—á–æ–º',
    headers: { 'X-Key': process.env.BFL_API_KEY || '' },
    disabled: !process.env.BFL_API_KEY, // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ API
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testEndpoint(
  endpoint: ApiEndpoint,
  baseUrl: string = ''
): Promise<{ success: boolean; error?: string; statusCode?: number }> {
  try {
    // –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (endpoint.disabled) {
      logger.info({
        message: `‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
        description: `Skipping disabled endpoint: ${endpoint.name}`,
      })
      return { success: true }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    const url = endpoint.path.startsWith('http')
      ? endpoint.path
      : `${baseUrl}${endpoint.path}`

    logger.info({
      message: `üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name} (${url})`,
      description: `Testing endpoint: ${endpoint.name} (${url})`,
    })

    const response = await axios({
      method: endpoint.method,
      url,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      headers: endpoint.headers,
      data: endpoint.data,
      validateStatus: () => true, // –ß—Ç–æ–±—ã axios –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞—Ö, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç 2xx
    })

    const statusCode = response.status
    const success = statusCode === endpoint.expectedStatus

    if (success) {
      logger.info({
        message: `‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (${statusCode})`,
        description: `Endpoint ${endpoint.name} is available (${statusCode})`,
      })
      return { success: true, statusCode }
    } else {
      logger.error({
        message: `‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusCode}, –æ–∂–∏–¥–∞–ª—Å—è: ${endpoint.expectedStatus}`,
        description: `Endpoint ${endpoint.name} returned unexpected status: ${statusCode}, expected: ${endpoint.expectedStatus}`,
      })
      return {
        success: false,
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusCode}, –æ–∂–∏–¥–∞–ª—Å—è: ${endpoint.expectedStatus}`,
        statusCode,
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`,
      description: `Error testing endpoint ${endpoint.name}: ${errorMessage}`,
    })
    return { success: false, error: errorMessage }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
 */
async function testInternalApis(): Promise<{
  success: boolean
  results: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
  }[]
  error?: string
}> {
  logger.info({
    message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
    description: 'Testing internal API endpoints',
  })

  const results = []
  let allSuccess = true

  for (const endpoint of API_ENDPOINTS) {
    const result = await testEndpoint(endpoint)
    results.push({
      endpoint,
      success: result.success,
      error: result.error,
      statusCode: result.statusCode,
    })

    if (!result.success) {
      allSuccess = false
    }
  }

  if (allSuccess) {
    logger.info({
      message: '‚úÖ –í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã',
      description: 'All internal API endpoints are available',
    })
    return { success: true, results }
  } else {
    const errors = results
      .filter(r => !r.success)
      .map(r => `${r.endpoint.name}: ${r.error}`)
      .join('; ')

    logger.error({
      message: `‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${errors}`,
      description: `Some internal API endpoints are unavailable: ${errors}`,
    })
    return {
      success: false,
      results,
      error: `–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API: ${errors}`,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
 */
async function testExternalApis(): Promise<{
  success: boolean
  results: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
  }[]
  error?: string
}> {
  logger.info({
    message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
    description: 'Testing external APIs for NeuroPhoto V2',
  })

  const results = []
  let allSuccess = true

  for (const endpoint of EXTERNAL_API_ENDPOINTS) {
    if (endpoint.disabled) {
      logger.info({
        message: `‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
        description: `Skipping disabled endpoint: ${endpoint.name}`,
      })
      continue
    }

    const result = await testEndpoint(endpoint)
    results.push({
      endpoint,
      success: result.success,
      error: result.error,
      statusCode: result.statusCode,
    })

    if (!result.success) {
      allSuccess = false
    }
  }

  if (allSuccess) {
    logger.info({
      message: '‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ API –¥–æ—Å—Ç—É–ø–Ω—ã',
      description: 'All external APIs are available',
    })
    return { success: true, results }
  } else {
    const errors = results
      .filter(r => !r.success)
      .map(r => `${r.endpoint.name}: ${r.error}`)
      .join('; ')

    logger.error({
      message: `‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${errors}`,
      description: `Some external APIs are unavailable: ${errors}`,
    })
    return {
      success: false,
      results,
      error: `–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ API: ${errors}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å webhook –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function testNeuroPhotoWebhook(): Promise<{
  success: boolean
  message: string
  error?: string
}> {
  logger.info({
    message: 'üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
    description: 'Testing neurophoto webhook with test data',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
    const testData = {
      task_id: `test-${Date.now()}`,
      status: 'COMPLETED',
      result: {
        sample: 'https://example.com/test-image.jpg',
      },
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook
    const response = await axios({
      method: 'POST',
      url: `${API_URL}/webhooks/neurophoto-debug`,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      data: testData,
      validateStatus: () => true,
    })

    if (response.status === 200) {
      logger.info({
        message: '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        description: 'Test neurophoto webhook processed successfully',
        status: response.status,
      })
      return {
        success: true,
        message: 'Webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      }
    } else {
      logger.error({
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status}`,
        description: `Error testing neurophoto webhook: invalid status ${response.status}`,
      })
      return {
        success: false,
        message: 'Webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É',
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${errorMessage}`,
      description: `Error testing neurophoto webhook: ${errorMessage}`,
    })
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      error: errorMessage,
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API
 */
function generateApiTestReport(
  internalResults: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
  }[],
  externalResults: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
    statusCode?: number
  }[],
  webhookResult: { success: boolean; message: string; error?: string }
): string {
  const internalSuccess = internalResults.filter(r => r.success).length
  const internalTotal = internalResults.length
  const externalSuccess = externalResults.filter(r => r.success).length
  const externalTotal = externalResults.length

  let report = 'üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API\n\n'
  report += `üì° –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API: ${internalSuccess}/${internalTotal} —É—Å–ø–µ—à–Ω–æ\n`
  report += `üåê –í–Ω–µ—à–Ω–∏–µ API: ${externalSuccess}/${externalTotal} —É—Å–ø–µ—à–Ω–æ\n`
  report += `üîÑ Webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${webhookResult.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}\n\n`

  if (internalTotal - internalSuccess > 0) {
    report += '‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API:\n'
    internalResults
      .filter(r => !r.success)
      .forEach(r => {
        report += `- ${r.endpoint.name}: ${r.error}\n`
      })
    report += '\n'
  }

  if (externalTotal - externalSuccess > 0) {
    report += '‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ API:\n'
    externalResults
      .filter(r => !r.success)
      .forEach(r => {
        report += `- ${r.endpoint.name}: ${r.error}\n`
      })
    report += '\n'
  }

  if (!webhookResult.success) {
    report += `‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${webhookResult.error}\n\n`
  }

  report += '‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n'
  if (
    internalTotal - internalSuccess > 0 ||
    externalTotal - externalSuccess > 0 ||
    !webhookResult.success
  ) {
    report += '- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n'
    report += '- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n'
    report += '- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é NGINX –∏ Docker\n'
    report +=
      '- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n'
  } else {
    report += '- –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n'
  }

  return report
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
 */
export async function runApiTests(
  options: {
    generateReport?: boolean
  } = {}
): Promise<ApiTestResult> {
  const { generateReport = false } = options

  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
    description: 'Starting API tests',
  })

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API
    const internalApiResults = await testInternalApis()

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API
    const externalApiResults = await testExternalApis()

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    const webhookResult = await testNeuroPhotoWebhook()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const success =
      internalApiResults.success &&
      externalApiResults.success &&
      webhookResult.success

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
    const details = {
      internalApi: internalApiResults,
      externalApi: externalApiResults,
      webhook: webhookResult,
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    let report: string | undefined
    if (generateReport) {
      report = generateApiTestReport(
        internalApiResults.results,
        externalApiResults.results,
        webhookResult
      )
      logger.info({
        message: 'üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        description: 'API test report generated',
        report,
      })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (success) {
      logger.info({
        message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ',
        description: 'All API tests passed successfully',
      })
    } else {
      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ—à–ª–∏',
        description: 'Some API tests failed',
        internalApiSuccess: internalApiResults.success,
        externalApiSuccess: externalApiResults.success,
        webhookSuccess: webhookResult.success,
      })
    }

    return {
      success,
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
      message: success
        ? '–í—Å–µ —Ç–µ—Å—Ç—ã API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ'
        : '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ—à–ª–∏',
      category: TestCategory.Api,
      details,
      report,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${errorMessage}`,
      description: `Critical error during API testing: ${errorMessage}`,
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API',
      category: TestCategory.Api,
      error: errorMessage,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
 */
async function main() {
  try {
    const result = await runApiTests({ generateReport: true })

    console.log(result.report)

    if (!result.success) {
      process.exit(1)
    }

    process.exit(0)
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ API:', error)
    process.exit(1)
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  main()
}
