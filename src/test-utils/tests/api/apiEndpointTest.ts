import axios from 'axios'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TEST_CONFIG } from '../../test-config'
import { TestCategory } from '../../core/categories'

// –ë–∞–∑–æ–≤—ã–π URL API
const API_URL = process.env.API_URL || 'http://localhost:2999'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
interface ApiEndpoint {
  name: string
  path: string
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  expectedStatus: number
  description: string
  headers?: Record<string, string>
  data?: any
  disabled?: boolean
  requiresAuth?: boolean
  testWithBody?: boolean
  expectedResponsePattern?: RegExp | string
}

// –°–ø–∏—Å–æ–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–û—Å–Ω–æ–≤–Ω–æ–π API',
    path: `${API_URL}/`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API',
  },
  {
    name: 'API –ö–æ–Ω—Ç–µ–Ω—Ç-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
    path: `${API_URL}/api/content/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
  },
  {
    name: 'Inngest API',
    path: `${API_URL}/api/inngest`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API',
  },
  {
    name: 'Webhook API',
    path: `${API_URL}/webhooks/ping`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook API',
  },
  {
    name: '–ë–æ—Ç #1 webhook',
    path: `${API_URL}/bot1/webhook`,
    method: 'POST',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ë–æ—Ç–∞ #1',
    data: { update_id: 123, message: { text: '/ping' } },
  },
  {
    name: '–ë–æ—Ç #2 webhook',
    path: `${API_URL}/bot2/webhook`,
    method: 'POST',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ë–æ—Ç–∞ #2',
    data: { update_id: 123, message: { text: '/ping' } },
  },
  {
    name: '–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å',
    path: `${API_URL}/files/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞',
  },
  {
    name: 'API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    path: `${API_URL}/api/stats/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
  },
]

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
interface EndpointTestResult {
  endpoint: ApiEndpoint
  success: boolean
  error?: string
  statusCode?: number
  responseTime: number
  responseData?: any
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testEndpoint(
  endpoint: ApiEndpoint
): Promise<EndpointTestResult> {
  const startTime = Date.now()

  try {
    logger.info({
      message: `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name} (${endpoint.path})`,
      description: `Testing endpoint: ${endpoint.name} (${endpoint.path})`,
    })

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if (endpoint.disabled) {
      logger.info({
        message: `‚è≠Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`,
        description: `Endpoint ${endpoint.name} is disabled, skipping`,
      })
      return {
        endpoint,
        success: true,
        responseTime: 0,
        statusCode: 0,
      }
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const headers = {
      'Content-Type': 'application/json',
      ...endpoint.headers,
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios({
      method: endpoint.method,
      url: endpoint.path,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      headers,
      data: endpoint.data,
      validateStatus: () => true, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    })

    const responseTime = Date.now() - startTime

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    const isStatusCorrect = response.status === endpoint.expectedStatus

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω
    let isContentCorrect = true
    if (endpoint.expectedResponsePattern && response.data) {
      const responseStr =
        typeof response.data === 'string'
          ? response.data
          : JSON.stringify(response.data)

      isContentCorrect =
        endpoint.expectedResponsePattern instanceof RegExp
          ? endpoint.expectedResponsePattern.test(responseStr)
          : responseStr.includes(endpoint.expectedResponsePattern)
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
    const success = isStatusCorrect && isContentCorrect

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (success) {
      logger.info({
        message: `‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status}, ${responseTime}ms)`,
        description: `Endpoint ${endpoint.name} is available (${response.status}, ${responseTime}ms)`,
      })
    } else {
      if (!isStatusCorrect) {
        logger.warn({
          message: `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`,
          description: `Endpoint ${endpoint.name} returned unexpected status: ${response.status} (expected ${endpoint.expectedStatus})`,
        })
      }

      if (!isContentCorrect) {
        logger.warn({
          message: `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ`,
          description: `Endpoint ${endpoint.name} returned unexpected content`,
        })
      }
    }

    return {
      endpoint,
      success,
      statusCode: response.status,
      responseTime,
      responseData: response.data,
      error: success ? undefined : '–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API',
    }
  } catch (error) {
    const responseTime = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`,
      description: `Error testing endpoint ${endpoint.name}: ${errorMessage}`,
    })

    return {
      endpoint,
      success: false,
      error: errorMessage,
      responseTime,
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
function generateApiTestReport(results: EndpointTestResult[]): string {
  const totalEndpoints = results.length
  const workingEndpoints = results.filter(r => r.success).length
  const failedEndpoints = results.filter(r => !r.success).length
  const disabledEndpoints = results.filter(r => r.endpoint.disabled).length
  const activeEndpoints = totalEndpoints - disabledEndpoints

  const successRate =
    activeEndpoints > 0
      ? Math.round((workingEndpoints / activeEndpoints) * 100)
      : 0

  let report = `
üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò API –≠–ù–î–ü–û–ò–ù–¢–û–í
======================================
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}
üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
  ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ${workingEndpoints}/${activeEndpoints} (${successRate}%)
  ‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ${failedEndpoints}
  ‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ${disabledEndpoints}
  üîÑ –í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${totalEndpoints}

üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:
`

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
  results.forEach(result => {
    const statusEmoji = result.endpoint.disabled
      ? '‚è∏Ô∏è'
      : result.success
        ? '‚úÖ'
        : '‚ùå'

    const statusText = result.endpoint.disabled
      ? '–û–¢–ö–õ–Æ–ß–ï–ù'
      : result.success
        ? '–†–ê–ë–û–¢–ê–ï–¢'
        : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'

    const statusCode = result.statusCode ? `(–∫–æ–¥: ${result.statusCode})` : ''

    const responseTime = result.responseTime
      ? `${result.responseTime}ms`
      : 'N/A'

    report += `
${statusEmoji} ${result.endpoint.name} - ${statusText} ${statusCode}
  üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.endpoint.description}
  üîó URL: ${result.endpoint.path}
  üîÑ –ú–µ—Ç–æ–¥: ${result.endpoint.method}
  ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}`

    if (result.error) {
      report += `
  ‚ùå –û—à–∏–±–∫–∞: ${result.error}`
    }

    report += '\n'
  })

  return report
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
 */
async function testInngestAvailability(): Promise<boolean> {
  try {
    logger.info({
      message: '‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API',
      description: 'Testing Inngest API availability',
    })

    const response = await axios({
      method: 'GET',
      url: `${API_URL}/api/inngest`,
      timeout: TEST_CONFIG.TIMEOUTS.MEDIUM,
      validateStatus: () => true,
    })

    const isAvailable = response.status === 200

    if (isAvailable) {
      logger.info({
        message: '‚úÖ Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω',
        description: 'Inngest API is available',
      })
    } else {
      logger.warn({
        message: `‚ö†Ô∏è Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`,
        description: `Inngest API is not available (${response.status})`,
      })
    }

    return isAvailable
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API: ${errorMessage}`,
      description: `Error testing Inngest API availability: ${errorMessage}`,
    })

    return false
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
export async function runApiEndpointTests(
  options: {
    generateReport?: boolean
  } = {}
): Promise<TestResult> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
    description: 'Starting API endpoint tests',
  })

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    const results: EndpointTestResult[] = []

    for (const endpoint of API_ENDPOINTS) {
      const result = await testEndpoint(endpoint)
      results.push(result)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
    const inngestAvailable = await testInngestAvailability()

    // –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const activeResults = results.filter(r => !r.endpoint.disabled)
    const allSuccess = activeResults.every(r => r.success) && inngestAvailable

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    let report: string | undefined
    if (options.generateReport) {
      report = generateApiTestReport(results)

      // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –ª–æ–≥
      logger.info({
        message: 'üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:',
        description: 'API endpoint testing report:',
      })

      // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
      report.split('\n').forEach(line => {
        if (line.trim()) {
          logger.info({
            message: line,
            description: line,
          })
        }
      })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (allSuccess) {
      logger.info({
        message: '‚úÖ –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        description: 'All API endpoints are working correctly',
      })
    } else {
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç',
        description: 'Some API endpoints are not working',
      })
    }

    return {
      success: allSuccess,
      name: 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã',
      message: allSuccess
        ? '–í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        : '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç',
      category: TestCategory.ApiEndpoints,
      details: {
        report,
        results,
        inngestAvailable,
      },
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${errorMessage}`,
      description: `Error running API endpoint tests: ${errorMessage}`,
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      name: 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${errorMessage}`,
      category: TestCategory.ApiEndpoints,
      error: errorMessage,
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ CLI
 */
async function main() {
  try {
    const result = await runApiEndpointTests({ generateReport: true })

    if (result.success) {
      logger.info({
        message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
        description: 'All API endpoint tests passed successfully',
      })
      process.exit(0)
    } else {
      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
        description: 'Some API endpoint tests failed',
      })
      process.exit(1)
    }
  } catch (error) {
    logger.error({
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`,
      description: `Critical error running API endpoint tests: ${error instanceof Error ? error.message : String(error)}`,
      stack: error instanceof Error ? error.stack : undefined,
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main()
}
