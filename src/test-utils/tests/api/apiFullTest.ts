import axios from 'axios'
import { logger } from '@/utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { TEST_CONFIG } from '../../test-config'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
const BASE_API_URL = process.env.API_URL || 'http://localhost:2999'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface ApiEndpoint {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  name: string
  /** –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É */
  path: string
  /** HTTP –º–µ—Ç–æ–¥ */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ */
  expectedStatus: number
  /** –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  description: string
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  headers?: Record<string, string>
  /** –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  data?: any
  /** –û—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  disabled?: boolean
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  validate?: (response: any) => { success: boolean; message?: string }
}

/**
 * –°–ø–∏—Å–æ–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–ì–ª–∞–≤–Ω—ã–π API',
    path: '/',
    method: 'GET',
    expectedStatus: 200,
    description: '–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API',
  },
  {
    name: '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞',
    path: '/api/status',
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    validate: response => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      if (typeof response.data !== 'object') {
        return { success: false, message: '–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º' }
      }

      const requiredFields = ['status', 'version', 'timestamp']
      const missingFields = requiredFields.filter(
        field => !(field in response.data)
      )

      if (missingFields.length > 0) {
        return {
          success: false,
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`,
        }
      }

      return { success: true }
    },
  },
  // –°–ª–µ–¥—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  {
    name: 'API Inngest',
    path: '/api/inngest',
    method: 'POST',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π',
    disabled: true,
    data: {
      name: 'test/api-check',
      data: {
        timestamp: Date.now(),
        source: 'api-full-test',
        test: true,
      },
    },
    headers: {
      'X-Inngest-Test': 'true',
      'Content-Type': 'application/json',
    },
  },
  {
    name: 'Inngest Dev',
    path: '/api/inngest/dev',
    method: 'GET',
    expectedStatus: 200,
    description: 'Inngest dev –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    disabled: true,
  },
  {
    name: 'API –í–µ–±—Ö—É–∫',
    path: '/api/webhook',
    method: 'POST',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤',
    disabled: true,
    data: {
      test: true,
      source: 'api-test',
      timestamp: Date.now(),
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
  {
    name: '–§–∞–π–ª—ã',
    path: '/uploads/test.txt',
    method: 'GET',
    expectedStatus: 404,
    description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º',
    disabled: true,
  },
  {
    name: '–í–µ–±—Ö—É–∫ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    path: '/webhooks/neurophoto',
    method: 'POST',
    expectedStatus: 400, // –ë–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
    description: '–í–µ–±—Ö—É–∫ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    disabled: true,
    data: {
      test: true,
      source: 'api-test',
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testEndpoint(endpoint: ApiEndpoint): Promise<{
  endpoint: ApiEndpoint
  success: boolean
  statusCode?: number
  responseTime?: number
  error?: string
  validationResult?: { success: boolean; message?: string }
}> {
  try {
    const url = `${BASE_API_URL}${endpoint.path}`
    const startTime = Date.now()

    logger.info({
      message: `üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
      description: `Testing endpoint: ${endpoint.name}`,
      url,
      method: endpoint.method,
    })

    // –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (endpoint.disabled) {
      logger.info({
        message: `‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
        description: `Skipping disabled endpoint: ${endpoint.name}`,
      })

      return {
        endpoint,
        success: true,
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios({
      method: endpoint.method,
      url,
      headers: endpoint.headers || {},
      data: endpoint.data,
      timeout: TEST_CONFIG.TIMEOUTS?.MEDIUM || 5000,
      validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    })

    const responseTime = Date.now() - startTime
    const statusCode = response.status
    const statusMatch = statusCode === endpoint.expectedStatus

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (!statusMatch) {
      logger.warn({
        message: `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${statusCode} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`,
        description: `Endpoint ${endpoint.name} returned unexpected status ${statusCode} (expected ${endpoint.expectedStatus})`,
        responseTime,
      })

      return {
        endpoint,
        success: false,
        statusCode,
        responseTime,
        error: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusCode}, –æ–∂–∏–¥–∞–ª—Å—è: ${endpoint.expectedStatus}`,
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    let validationResult
    if (endpoint.validate) {
      validationResult = endpoint.validate(response)

      if (!validationResult.success) {
        logger.warn({
          message: `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validationResult.message}`,
          description: `Endpoint ${endpoint.name} failed validation: ${validationResult.message}`,
          responseTime,
        })

        return {
          endpoint,
          success: false,
          statusCode,
          responseTime,
          error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationResult.message}`,
          validationResult,
        }
      }
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    logger.info({
      message: `‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (${statusCode}) –∑–∞ ${responseTime}ms`,
      description: `Endpoint ${endpoint.name} is available (${statusCode}) in ${responseTime}ms`,
      validationPassed: validationResult?.success,
    })

    return {
      endpoint,
      success: true,
      statusCode,
      responseTime,
      validationResult,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`,
      description: `Error testing endpoint ${endpoint.name}: ${errorMessage}`,
      error: errorMessage,
    })

    return {
      endpoint,
      success: false,
      error: errorMessage,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
 */
async function testInngestConnectivity(): Promise<{
  success: boolean
  message: string
  error?: string
  responseTime?: number
}> {
  try {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest',
      description: 'Testing Inngest connectivity',
    })

    const url = process.env.INNGEST_URL || 'https://api.inngest.com/e/v1/events'
    const startTime = Date.now()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Inngest API
    const response = await axios({
      method: 'GET',
      url,
      timeout: TEST_CONFIG.TIMEOUTS?.MEDIUM || 5000,
      validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
    })

    const responseTime = Date.now() - startTime

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 401, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
    // –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    if (response.status === 401 || response.status === 200) {
      logger.info({
        message: `‚úÖ Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status}) –∑–∞ ${responseTime}ms`,
        description: `Inngest API is available (${response.status}) in ${responseTime}ms`,
      })

      return {
        success: true,
        message: `Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`,
        responseTime,
      }
    } else {
      logger.warn({
        message: `‚ö†Ô∏è Inngest API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
        description: `Inngest API returned unexpected status: ${response.status}`,
        responseTime,
      })

      return {
        success: false,
        message: `Inngest API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
        error: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
        responseTime,
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest: ${errorMessage}`,
      description: `Error testing Inngest connectivity: ${errorMessage}`,
      error: errorMessage,
    })

    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest',
      error: errorMessage,
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∞
 */
function generateTestReport(
  apiResults: Array<{
    endpoint: ApiEndpoint
    success: boolean
    statusCode?: number
    responseTime?: number
    error?: string
    validationResult?: { success: boolean; message?: string }
  }>,
  inngestResult: {
    success: boolean
    message: string
    error?: string
    responseTime?: number
  }
): string {
  const timestamp = new Date().toISOString()
  const totalEndpoints = apiResults.length
  const successfulEndpoints = apiResults.filter(r => r.success).length
  const failedEndpoints = totalEndpoints - successfulEndpoints
  const successRate = (successfulEndpoints / totalEndpoints) * 100

  let report = `# API Full Test Report\n\n`
  report += `Generated: ${timestamp}\n\n`

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  report += `## Summary\n\n`
  report += `- Total API endpoints tested: ${totalEndpoints}\n`
  report += `- Successful: ${successfulEndpoints}\n`
  report += `- Failed: ${failedEndpoints}\n`
  report += `- Success rate: ${successRate.toFixed(2)}%\n`
  report += `- Inngest connectivity: ${inngestResult.success ? '‚úÖ Available' : '‚ùå Unavailable'}\n\n`

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
  report += `## API Endpoints Details\n\n`

  for (const result of apiResults) {
    const {
      endpoint,
      success,
      statusCode,
      responseTime,
      error,
      validationResult,
    } = result

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
    report += `### ${endpoint.name} (${endpoint.method} ${endpoint.path})\n\n`
    report += `- Status: ${success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n`
    report += `- Description: ${endpoint.description}\n`

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (statusCode) {
      report += `- Status code: ${statusCode}\n`
    }

    if (responseTime) {
      report += `- Response time: ${responseTime}ms\n`
    }

    if (error) {
      report += `- Error: ${error}\n`
    }

    if (validationResult) {
      report += `- Validation: ${validationResult.success ? 'Passed' : 'Failed'}\n`
      if (validationResult.message) {
        report += `- Validation message: ${validationResult.message}\n`
      }
    }

    report += '\n'
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Inngest
  report += `## Inngest Connectivity\n\n`
  report += `- Status: ${inngestResult.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n`
  report += `- Message: ${inngestResult.message}\n`

  if (inngestResult.responseTime) {
    report += `- Response time: ${inngestResult.responseTime}ms\n`
  }

  if (inngestResult.error) {
    report += `- Error: ${inngestResult.error}\n`
  }

  return report
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API
 */
export async function runApiFullTest(
  options: { generateReport?: boolean } = {}
): Promise<TestResult> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API',
      description: 'Starting full API test',
      category: TestCategory.Api,
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    const apiResults = await Promise.all(
      API_ENDPOINTS.filter(endpoint => !endpoint.disabled).map(testEndpoint)
    )

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Inngest
    const inngestResult = await testInngestConnectivity()

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalEndpoints = apiResults.length
    const successfulEndpoints = apiResults.filter(r => r.success).length
    const failedEndpoints = totalEndpoints - successfulEndpoints
    const successRate = (successfulEndpoints / totalEndpoints) * 100

    // –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω–µ–µ 80% —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω
    const success = successRate >= 80 && inngestResult.success

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    let report: string | undefined
    if (options.generateReport) {
      report = generateTestReport(apiResults, inngestResult)
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `API Test: ${successfulEndpoints}/${totalEndpoints} endpoints available (${successRate.toFixed(2)}%), Inngest ${inngestResult.success ? 'available' : 'unavailable'}`

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (success) {
      logger.info({
        message: `‚úÖ ${message}`,
        description: 'Full API test completed successfully',
        successRate: `${successRate.toFixed(2)}%`,
        inngestAvailable: inngestResult.success,
      })
    } else {
      logger.warn({
        message: `‚ö†Ô∏è ${message}`,
        description: 'Full API test completed with issues',
        successRate: `${successRate.toFixed(2)}%`,
        inngestAvailable: inngestResult.success,
      })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success,
      name: 'API Full Test',
      message,
      category: TestCategory.Api,
      details: {
        totalEndpoints,
        successfulEndpoints,
        failedEndpoints,
        successRate,
        inngestAvailable: inngestResult.success,
        apiResults,
        inngestResult,
        report,
      },
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API: ${errorMessage}`,
      description: 'Error during full API test',
      error: errorMessage,
    })

    return {
      success: false,
      name: 'API Full Test',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API: ${errorMessage}`,
      category: TestCategory.Api,
      error: errorMessage,
    }
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runApiFullTest({ generateReport: true })
    .then(result => {
      console.log('\n--- API Test Results ---\n')
      console.log(`Status: ${result.success ? 'SUCCESS' : 'FAILED'}`)
      console.log(`Message: ${result.message}`)

      if (result.details?.report) {
        console.log('\n--- Test Report ---\n')
        console.log(result.details.report)
      }

      process.exit(result.success ? 0 : 1)
    })
    .catch(error => {
      console.error('Error running API test:', error)
      process.exit(1)
    })
}
