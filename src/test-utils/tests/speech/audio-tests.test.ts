import { logger } from '../utils/logger'
import { Buffer } from 'buffer'
import * as fs from 'fs'
import * as path from 'path'
import * as os from 'os'
import { TestResult } from './types'

import { createAudioFileFromText } from '@/core/elevenlabs/createAudioFileFromText'

export async function generateAudioBuffer(
  text: string,
  voice_id: string
): Promise<Buffer> {
  logger.info({
    message: 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ',
    description: 'Starting audio generation',
    text,
    voice_id,
    timestamp: new Date().toISOString(),
  })

  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voice_id}`
  const headers = {
    'xi-api-key': process.env.ELEVENLABS_API_KEY as string,
    'Content-Type': 'application/json',
  }

  const body = {
    text,
    model_id: 'eleven_turbo_v2_5',
    voice_settings: {
      stability: 0.5,
      similarity_boost: 0.75,
    },
  }

  logger.info({
    message: 'üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API',
    description: 'Sending request to ElevenLabs API',
    url,
    voice_id,
    timestamp: new Date().toISOString(),
  })

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    })

    if (!response.ok) {
      throw new Error(
        `ElevenLabs API –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`
      )
    }

    if (!response.body) {
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω —Å—Ç—Ä–∏–º –æ—Ç API')
    }

    logger.info({
      message: 'üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API, –Ω–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      description: 'Response received from API, starting binary data reading',
      timestamp: new Date().toISOString(),
    })

    const chunks: Uint8Array[] = []
    let totalSize = 0
    let isReading = true

    const reader = response.body.getReader()

    while (isReading) {
      const { done, value } = await reader.read()

      if (done) {
        logger.info({
          message: '‚úÖ –ß—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          description: 'Stream reading completed',
          totalSize,
          timestamp: new Date().toISOString(),
        })
        isReading = false
        continue
      }

      chunks.push(value)
      totalSize += value.length
      logger.debug({
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö',
        description: 'Data chunk received',
        chunkSize: value.length,
        totalSize,
        timestamp: new Date().toISOString(),
      })
    }

    const audioBuffer = Buffer.concat(chunks)
    logger.info({
      message: '‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω',
      description: 'Audio buffer created',
      size: audioBuffer.length,
      timestamp: new Date().toISOString(),
    })

    if (audioBuffer.length === 0) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä')
    }

    return audioBuffer
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Error generating audio',
      error: error instanceof Error ? error.message : String(error),
      voice_id,
      timestamp: new Date().toISOString(),
    })
    throw error
  }
}

export async function testAudioGeneration(): Promise<TestResult> {
  const startTime = Date.now()
  const testName = 'Audio Generation Test'

  try {
    logger.info({
      message: 'üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Starting audio generation test',
    })

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testText = 'Hello, this is a test.'
    const testVoiceId = 'ljyyJh982fsUinaSQPvv'

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä
    const audioBuffer = await generateAudioBuffer(testText, testVoiceId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
    if (!audioBuffer || audioBuffer.length === 0) {
      throw new Error('–ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Buffer
    if (!Buffer.isBuffer(audioBuffer)) {
      throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const tempFile = path.join(os.tmpdir(), `test-audio-${Date.now()}.mp3`)
    await fs.promises.writeFile(tempFile, new Uint8Array(audioBuffer))

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Test completed successfully',
      bufferSize: audioBuffer.length,
      tempFile,
    })

    return {
      name: testName,
      passed: true,
      success: true,
      duration: Date.now() - startTime,
      message: '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
      testName: 'AudioGenerationTest',
      details: [`Buffer size: ${audioBuffer.length}`, `Saved to: ${tempFile}`],
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Error in audio generation test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: testName,
      passed: false,
      success: false,
      error: error instanceof Error ? error.message : String(error),
      duration: Date.now() - startTime,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      testName: 'AudioGenerationTest',
      details: {
        error: error instanceof Error ? error.message : String(error),
      },
    }
  }
}

// –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
process.env.ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || 'mock-key'

export async function testSpeechGeneration(): Promise<TestResult> {
  const startTime = Date.now()
  const testName = 'Speech Generation Test'

  try {
    logger.info({
      message: 'üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      description: 'Starting speech generation test',
    })

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testText = 'Hello, this is a test.'
    const testVoiceId = 'ljyyJh982fsUinaSQPvv'

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    const audioUrl = await createAudioFileFromText({
      text: testText,
      voice_id: testVoiceId,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
    if (!fs.existsSync(audioUrl)) {
      throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(audioUrl)
    if (stats.size === 0) {
      throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π')
    }

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Test completed successfully',
      audioUrl,
      fileSize: stats.size,
    })

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(audioUrl)

    return {
      name: testName,
      passed: true,
      success: true,
      duration: Date.now() - startTime,
      message: '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      testName: 'SpeechGenerationTest',
      details: { audioUrl, fileSize: stats.size },
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      description: 'Error in speech generation test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: testName,
      passed: false,
      success: false,
      error: error instanceof Error ? error.message : String(error),
      duration: Date.now() - startTime,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      testName: 'SpeechGenerationTest',
      details: {
        error: error instanceof Error ? error.message : String(error),
      },
    }
  }
}
