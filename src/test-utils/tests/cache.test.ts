import { TestResult } from '../types'
import { Logger as logger } from '@/utils/logger'
import { Cache } from '@/core/cache'
import { CACHE_CONFIG } from '@/config/cache'

interface TestData {
  key: string
  value: string
}

export async function testCache(): Promise<TestResult> {
  const results: TestResult = {
    name: '–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
    success: true,
    message: '–¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
    error: undefined,
    details: {},
    metadata: {
      startTime: Date.now(),
      testType: 'cache'
    }
  }

  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', {
    description: 'Starting cache tests'
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
    const cache = new Cache<TestData>()

    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const testData: TestData = { key: 'test1', value: 'value1' }
    cache.set(testData.key, testData)
    const cachedData = cache.get(testData.key)

    if (!cachedData || cachedData.value !== testData.value) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã:', {
      description: 'Basic operations test passed',
      testData,
      cachedData
    })

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL
    const testTTLData: TestData = { key: 'test2', value: 'value2' }
    cache.set(testTTLData.key, testTTLData)
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ TTL
    await new Promise(resolve => setTimeout(resolve, CACHE_CONFIG.ttl + 100))
    
    const expiredData = cache.get(testTTLData.key)
    if (expiredData !== null) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ TTL'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 2 - TTL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', {
      description: 'TTL test passed'
    })

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –¥–æ –ø–æ—Ä–æ–≥–∞ –æ—á–∏—Å—Ç–∫–∏
    const threshold = Math.floor(CACHE_CONFIG.maxSize * CACHE_CONFIG.cleanupThreshold)
    for (let i = 0; i < threshold + 1; i++) {
      cache.set(`key${i}`, { key: `key${i}`, value: `value${i}` })
    }

    const metrics = cache.getMetrics()
    if (metrics.size >= CACHE_CONFIG.maxSize) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 3 - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
      description: 'Forced cleanup test passed',
      metrics
    })

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
    const testMetricsData: TestData = { key: 'test4', value: 'value4' }
    cache.set(testMetricsData.key, testMetricsData)
    
    // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞—â–µ–Ω–∏–π
    cache.get(testMetricsData.key)
    cache.get(testMetricsData.key)
    cache.get('nonexistent')

    const finalMetrics = cache.getMetrics()
    if (finalMetrics.hits < 2 || finalMetrics.misses < 1) {
      results.success = false
      results.error = '‚ùå –û—à–∏–±–∫–∞: –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      return results
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 4 - –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', {
      description: 'Metrics test passed',
      metrics: finalMetrics
    })

    // –û—á–∏—Å—Ç–∫–∞
    cache.destroy()

    results.metadata = {
      ...results.metadata,
      endTime: Date.now()
    }

    results.details = {
      testsRun: 4,
      cacheMaxSize: CACHE_CONFIG.maxSize,
      finalMetrics
    }

    logger.info('üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', {
      description: 'All cache tests completed successfully',
      success: results.success,
      details: results.details
    })

  } catch (error) {
    results.success = false
    results.error = `‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      description: 'Error during cache test execution',
      error: error instanceof Error ? error.message : String(error)
    })
  }

  return results
} 