import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TestResult } from '../interfaces'
import { getPaymentByInvId } from '@/core/supabase/getPaymentByInvId'
import { TEST_CONFIG, inngestTestEngine } from '../test-config'

const waitForPaymentCompletion = async (inv_id: string, timeout = 5000) => {
  const startTime = Date.now()
  while (Date.now() - startTime < timeout) {
    const payment = await getPaymentByInvId(inv_id)
    if (payment?.status === 'COMPLETED') {
      return payment
    }
    await new Promise(resolve => setTimeout(resolve, 500))
  }
  throw new Error('Payment completion timeout')
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const cleanupTestUser = async (telegram_id: TelegramId) => {
  try {
    // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏–û—à–∏–±–∫–∏ TypeScript —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
    await supabase.from('payments_v2').delete().eq('telegram_id', telegram_id)
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('users').delete().eq('telegram_id', telegram_id)

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Error cleaning up test data',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
  }
}

export async function testPaymentSystem(): Promise<TestResult> {
  const testTelegramId = Date.now().toString()
  const testBotName = TEST_CONFIG.TEST_BOT_NAME

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: testTelegramId,
      username: `test_user_${testTelegramId}`,
      bot_name: testBotName,
    })

    if (createError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(testTelegramId)
    if (initialBalance !== 0) {
      throw new Error(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${initialBalance}, –æ–∂–∏–¥–∞–ª–æ—Å—å 0`)
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const addInv_id = uuidv4()
    await inngestTestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        type: 'money_income',
        description: 'Test add stars',
        bot_name: testBotName,
        inv_id: addInv_id,
        service_type: ModeEnum.TopUpBalance,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await waitForPaymentCompletion(addInv_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${balanceAfterAdd}, –æ–∂–∏–¥–∞–ª–æ—Å—å 100`
      )
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const spendInv_id = uuidv4()
    await inngestTestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 30,
        type: 'money_expense',
        description: 'Test spend stars',
        bot_name: testBotName,
        inv_id: spendInv_id,
        service_type: ModeEnum.TextToVideo,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await waitForPaymentCompletion(spendInv_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    const balanceAfterSpend = await getUserBalance(testTelegramId)
    if (balanceAfterSpend !== 70) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è ${balanceAfterSpend}, –æ–∂–∏–¥–∞–ª–æ—Å—å 70`
      )
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (TEST_CONFIG.cleanupAfterEach) {
      await Promise.all([
        supabase
          .from('users')
          .delete()
          .eq('telegram_id', testTelegramId)
          .eq('bot_name', testBotName),
        supabase
          .from('payments_v2')
          .delete()
          .eq('telegram_id', testTelegramId)
          .eq('bot_name', testBotName),
      ])
    }

    logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', {
      description: 'Payment system tests completed successfully',
    })

    return {
      name: 'Payment System Test',
      success: true,
      message: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      description: 'Error in payment system test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: 'Payment System Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${
        error instanceof Error ? error.message : String(error)
      }`,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
export const runAllPaymentTests = async (): Promise<TestResult[]> => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
    description: 'Running all payment system tests',
  })

  const results: TestResult[] = []

  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const paymentSystemResult = await testPaymentSystem()
    results.push(paymentSystemResult)

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'All payment system tests completed',
      success_count: results.filter(r => r.success).length,
      fail_count: results.filter(r => !r.success).length,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', {
      description: 'Error running payment system tests',
      error: error instanceof Error ? error.message : String(error),
    })
    return [
      {
        success: false,
        name: 'Payment System Tests',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${
          error instanceof Error ? error.message : String(error)
        }`,
      },
    ]
  }
}
