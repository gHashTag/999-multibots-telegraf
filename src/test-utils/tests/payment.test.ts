import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'
import { inngest } from '@/inngest-functions/clients'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TestResult } from '../types'
import { getPaymentByInvId } from '@/core/supabase/getPaymentByInvId'
import { TEST_CONFIG } from '../test-config'

const waitForPaymentCompletion = async (
  telegram_id: TelegramId,
  operation_id: string,
  expectedBalance: number,
  bot_name: string
): Promise<boolean> => {
  let attempts = 0
  const maxAttempts = 5 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  const delay = 1000 // 1 second

  while (attempts < maxAttempts) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
      const payment = await getPaymentByInvId(operation_id)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await getUserBalance(
        telegram_id.toString(),
        bot_name
      )

      logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Checking payment status',
        attempt: attempts + 1,
        telegram_id,
        operation_id,
        payment_status: payment?.status || 'NOT_FOUND',
        current_balance: currentBalance,
        expected_balance: expectedBalance,
      })

      if (
        payment?.status === 'COMPLETED' &&
        currentBalance === expectedBalance
      ) {
        logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
          description: 'Payment completed successfully',
          telegram_id,
          operation_id,
          current_balance: currentBalance,
          expected_balance: expectedBalance,
        })
        return true
      }

      if (payment?.status === 'FAILED') {
        logger.error('‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
          description: 'Payment failed',
          telegram_id,
          operation_id,
          current_balance: currentBalance,
        })
        return false
      }

      attempts++
      await new Promise(resolve => setTimeout(resolve, delay))
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment status',
        error: error instanceof Error ? error.message : String(error),
        attempt: attempts + 1,
        telegram_id,
        operation_id,
      })
      attempts++
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }

  logger.error('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Operation timeout',
    operation_id,
    attempts,
  })
  return false
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const cleanupTestUser = async (telegram_id: TelegramId) => {
  try {
    // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
    await supabase.from('payments_v2').delete().eq('telegram_id', telegram_id)
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('users').delete().eq('telegram_id', telegram_id)

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Error cleaning up test data',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
  }
}

export const testPaymentSystem = async (): Promise<TestResult> => {
  const testTelegramId = normalizeTelegramId(Date.now())
  const testUsername = `test_user_${testTelegramId}`

  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createUserError } = await supabase.from('users').insert([
      {
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
        photo_url: '',
        chat_id: testTelegramId,
        mode: 'clean',
        model: 'gpt-4-turbo',
        count: 0,
        aspect_ratio: '9:16',
        balance: 0,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        level: 1,
      },
    ])

    if (createUserError) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createUserError.message}`
      )
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(
      testTelegramId.toString(),
      TEST_CONFIG.TEST_BOT_NAME
    )
    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Initial balance check',
      telegram_id: testTelegramId,
      balance: initialBalance,
    })

    if (initialBalance !== 0) {
      throw new Error(
        `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ: ${initialBalance}`
      )
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (STARS)
    const addInv_id = uuidv4()
    await TEST_CONFIG.inngestEngine.execute({
      events: [
        {
          name: 'payment/process',
          data: {
            telegram_id: testTelegramId,
            amount: 100,
            type: 'money_income',
            description: 'Test add payment via Inngest',
            bot_name: TEST_CONFIG.TEST_BOT_NAME,
            inv_id: addInv_id,
            metadata: {
              service_type: 'System',
              test: true,
            },
          },
        },
      ],
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000))

    const balanceAfterAdd = await getUserBalance(
      testTelegramId.toString(),
      TEST_CONFIG.TEST_BOT_NAME
    )
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100, –ø–æ–ª—É—á–µ–Ω–æ: ${balanceAfterAdd}`
      )
    }

    // –¢–µ—Å—Ç 3: –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    const spendInv_id = uuidv4()
    await TEST_CONFIG.inngestEngine.execute({
      events: [
        {
          name: 'payment/process',
          data: {
            telegram_id: testTelegramId,
            amount: -30,
            type: 'money_expense',
            description: 'Test spend payment via Inngest',
            bot_name: TEST_CONFIG.TEST_BOT_NAME,
            inv_id: spendInv_id,
            metadata: {
              service_type: ModeEnum.TextToImage,
              test: true,
            },
          },
        },
      ],
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000))

    const finalBalance = await getUserBalance(
      testTelegramId.toString(),
      TEST_CONFIG.TEST_BOT_NAME
    )
    if (finalBalance !== 70) {
      throw new Error(
        `–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 70, –ø–æ–ª—É—á–µ–Ω–æ: ${finalBalance}`
      )
    }

    logger.info('‚úÖ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Payment system test completed successfully',
      telegram_id: testTelegramId,
      final_balance: finalBalance,
    })

<<<<<<< Updated upstream
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const { data: payments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', testTelegramId)

=======
>>>>>>> Stashed changes
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (TEST_CONFIG.cleanupAfterEach) {
      await Promise.all([
        supabase.from('payments_v2').delete().eq('telegram_id', testTelegramId),
        supabase.from('users').delete().eq('telegram_id', testTelegramId),
      ])
    }

    return {
      success: true,
<<<<<<< HEAD
      name: 'Payment System Test',
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      details: {
        telegram_id: testTelegramId,
        final_balance: finalBalance,
        payments_count: payments ? payments.length : 0,
      },
=======
      message: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      name: 'Payment System Test',
>>>>>>> b75d880 (tests)
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', {
      description: 'Error in payment system test',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: testTelegramId,
    })

    return {
      success: false,
<<<<<<< HEAD
      name: 'Payment System Test',
      message: error instanceof Error ? error.message : String(error),
      error: error instanceof Error ? error.message : String(error),
=======
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${
        error instanceof Error ? error.message : String(error)
      }`,
      name: 'Payment System Test',
>>>>>>> b75d880 (tests)
    }
  }
}
