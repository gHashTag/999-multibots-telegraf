import { TelegramId } from '@/interfaces/telegram.interface';
import { inngest } from '@/core/inngest/clients'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TestResult } from '../types'
import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'

const waitForPaymentCompletion = async (
  telegram_id: TelegramId,
  operation_id: string,
  expectedBalance: number
): Promise<boolean> => {
  let attempts = 0
  const maxAttempts = 20
  const delay = 1000 // 1 second

  while (attempts < maxAttempts) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('status')
      .eq('telegram_id', telegram_id)
      .eq('inv_id', operation_id)

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment status',
        error: error.message,
        telegram_id,
        operation_id,
      })
      return false
    }

    if (!payments || payments.length === 0) {
      logger.info('üîÑ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω', {
        description: 'Payment not created yet',
        attempt: attempts + 1,
        telegram_id,
        operation_id,
      })
    } else {
      const payment = payments[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ

      logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', {
        description: 'Checking operation status',
        attempt: attempts + 1,
        payment_status: payment?.status,
        operation_id,
        payments_found: payments.length,
      })

      if (payment?.status === 'COMPLETED') {
        logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
          description: 'Operation completed successfully',
          operation_id,
        })
        return true
      }
    }

    await new Promise(resolve => setTimeout(resolve, delay))
    attempts++
  }

  logger.error('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Operation timeout',
    operation_id,
    attempts,
  })
  return false
}

export const testPaymentSystem = async (): Promise<TestResult> => {
  try {
    const testTelegramId = normalizeTelegramId(Date.now())
    const testUsername = `test_user_${testTelegramId}`

    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createUserError } = await supabase.from('users').insert([
      {
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
        photo_url: '',
        chat_id: testTelegramId,
        mode: 'clean',
        model: 'gpt-4-turbo',
        count: 0,
        aspect_ratio: '9:16',
        balance: 0,
        bot_name: 'test_bot',
        level: 1,
      },
    ])

    if (createUserError) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createUserError.message}`
      )
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(testTelegramId)
    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Initial balance check',
      telegram_id: testTelegramId,
      balance: initialBalance,
    })

    if (initialBalance !== 0) {
      throw new Error(
        `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ: ${initialBalance}`
      )
    }

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const addOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-add-${addOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test add payment via Inngest',
        type: 'income',
        metadata: {
          service_type: 'System',
          test: true,
        },
        operation_id: addOperationId,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Waiting for add operation completion',
      operation_id: addOperationId,
    })

    const addOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      addOperationId,
      100
    )

    if (!addOperationCompleted) {
      throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ')
    }

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Balance after adding payment',
      telegram_id: testTelegramId,
      balance: balanceAfterAdd,
      expected: 100,
    })

    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100, –ø–æ–ª—É—á–µ–Ω–æ: ${balanceAfterAdd}`
      )
    }

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const spendOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-spend-${spendOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 30,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test spend payment via Inngest',
        type: 'outcome',
        metadata: {
          service_type: ModeEnum.TextToImage,
          test: true,
        },
        operation_id: spendOperationId,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è', {
      description: 'Waiting for spend operation completion',
      operation_id: spendOperationId,
    })

    const spendOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      spendOperationId,
      70
    )

    if (!spendOperationCompleted) {
      throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ')
    }

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const finalBalance = await getUserBalance(testTelegramId)
    logger.info('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Final balance check',
      telegram_id: testTelegramId,
      balance: finalBalance,
      expected: 70,
    })

    if (finalBalance !== 70) {
      throw new Error(
        `–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 70, –ø–æ–ª—É—á–µ–Ω–æ: ${finalBalance}`
      )
    }

    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select(
        'amount, stars, payment_method, status, description, metadata, inv_id'
      )
      .eq('telegram_id', testTelegramId)
      .order('payment_date', { ascending: false })

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`)
    }

    if (!payments || payments.length !== 2) {
      throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å 2 –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ª—É—á–µ–Ω–æ: ${payments?.length ?? 0}`)
    }

    if (
      payments[0].status !== 'COMPLETED' ||
      payments[1].status !== 'COMPLETED'
    ) {
      throw new Error('–ù–µ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å COMPLETED')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Payment system test completed successfully',
      telegram_id: testTelegramId,
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      testName: 'payment-system',
    }
  } catch (err) {
    const error = err as Error
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', {
      description: 'Payment system test failed',
      error: error.message,
    })

    return {
      success: false,
      message: `–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`,
      testName: 'payment-system',
    }
  }
}
