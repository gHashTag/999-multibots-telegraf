import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TestResult } from '../interfaces'
import { getPaymentByInvId } from '@/core/supabase/getPaymentByInvId'
import { TEST_CONFIG } from '../test-config'
import { InngestTestEngine } from '../inngest-test-engine'
import { PaymentProcessEvent } from '@/inngest-functions/paymentProcessor'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { TransactionType } from '@/interfaces/payments.interface'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
const inngestTestEngine = new InngestTestEngine()

const paymentProcessor = async ({
  event,
}: {
  event: { data: PaymentProcessEvent['data'] }
}) => {
  const { telegram_id, amount, type, description, bot_name, service_type } =
    event.data as {
      telegram_id: string
      amount: number
      type: TransactionType
      description: string
      bot_name: string
      service_type: string
    }

  logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
    description: 'Starting payment processing',
    telegram_id,
    amount,
    type,
    bot_name,
    service_type,
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    const payment = await createSuccessfulPayment({
      telegram_id,
      amount,
      stars: amount,
      type,
      description,
      bot_name,
      service_type,
      payment_method: 'balance',
      status: 'COMPLETED',
      inv_id: event.data.inv_id,
    })

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', {
      description: 'Payment created',
      payment_id: payment.payment_id,
      telegram_id,
      amount,
      type,
    })

    return { success: true, payment }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Error processing payment',
      telegram_id,
      amount,
      type,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    throw error
  }
}

inngestTestEngine.registerEventHandler('payment/process', paymentProcessor)

const waitForPaymentCompletion = async (inv_id: string, timeout = 10000) => {
  const startTime = Date.now()
  const checkInterval = 1000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã

  while (Date.now() - startTime < timeout) {
    const payment = await getPaymentByInvId(inv_id)
    if (payment) {
      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω', {
        description: 'Payment found',
        inv_id,
        payment,
      })
      return payment
    }

    logger.info('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', {
      description: 'Payment not found',
      inv_id,
      elapsed: Date.now() - startTime,
    })

    await new Promise(resolve => setTimeout(resolve, checkInterval))
  }

  throw new Error('Payment completion timeout')
}

export async function testPaymentSystem(): Promise<TestResult> {
  const testTelegramId = Date.now().toString()
  const testBotName = TEST_CONFIG.TEST_BOT_NAME

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
      test_telegram_id: testTelegramId,
      test_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: testTelegramId,
      username: `test_user_${testTelegramId}`,
      bot_name: testBotName,
    })

    if (createError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`)
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(testTelegramId)
    if (initialBalance !== 0) {
      throw new Error(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${initialBalance}, –æ–∂–∏–¥–∞–ª–æ—Å—å 0`)
    }

    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω', {
      description: 'Initial balance checked',
      balance: initialBalance,
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const addInv_id = `${testTelegramId}-${Date.now()}`
    await TEST_CONFIG.inngestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        type: 'money_income',
        description: 'Test add stars',
        bot_name: testBotName,
        inv_id: addInv_id,
        service_type: ModeEnum.TopUpBalance,
        test_mode: true,
      },
    })

    logger.info('üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance top-up request sent',
      amount: 100,
      inv_id: addInv_id,
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    const addPayment = await waitForPaymentCompletion(addInv_id)

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Top-up payment completed',
      payment: addPayment,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${balanceAfterAdd}, –æ–∂–∏–¥–∞–ª–æ—Å—å 100`
      )
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω', {
      description: 'Balance after top-up checked',
      balance: balanceAfterAdd,
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const spendInv_id = `${testTelegramId}-${Date.now()}`
    await TEST_CONFIG.inngestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 30,
        type: 'money_expense',
        description: 'Test spend stars',
        bot_name: testBotName,
        inv_id: spendInv_id,
        service_type: ModeEnum.TextToVideo,
        test_mode: true,
      },
    })

    logger.info('üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance withdrawal request sent',
      amount: 30,
      inv_id: spendInv_id,
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    const spendPayment = await waitForPaymentCompletion(spendInv_id)

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Withdrawal payment completed',
      payment: spendPayment,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    const balanceAfterSpend = await getUserBalance(testTelegramId)
    if (balanceAfterSpend !== 70) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è ${balanceAfterSpend}, –æ–∂–∏–¥–∞–ª–æ—Å—å 70`
      )
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω', {
      description: 'Balance after withdrawal checked',
      balance: balanceAfterSpend,
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞
    const overdraftInv_id = `${testTelegramId}-${Date.now()}`
    await TEST_CONFIG.inngestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        type: 'money_expense',
        description: 'Test overdraft protection',
        bot_name: testBotName,
        inv_id: overdraftInv_id,
        service_type: ModeEnum.TextToVideo,
        test_mode: true,
      },
    })

    logger.info('üõ°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—â–∏—Ç—ã –æ—Ç –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞', {
      description: 'Overdraft protection test request sent',
      amount: 100,
      inv_id: overdraftInv_id,
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    try {
      await waitForPaymentCompletion(overdraftInv_id)
      throw new Error('–ü–ª–∞—Ç–µ–∂ —Å –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–æ–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    } catch (error) {
      if (
        error instanceof Error &&
        error.message === 'Payment completion timeout'
      ) {
        logger.info('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞', {
          description: 'Overdraft protection worked',
          inv_id: overdraftInv_id,
        })
      } else {
        throw error
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞
    const balanceAfterOverdraft = await getUserBalance(testTelegramId)
    if (balanceAfterOverdraft !== 70) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞ ${balanceAfterOverdraft}, –æ–∂–∏–¥–∞–ª–æ—Å—å 70`
      )
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω', {
      description: 'Balance after overdraft attempt checked',
      balance: balanceAfterOverdraft,
    })

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const { error: deleteUserError } = await supabase
      .from('users')
      .delete()
      .eq('telegram_id', testTelegramId)

    if (deleteUserError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error deleting test user',
        error: deleteUserError.message,
      })
    }

    const { error: deletePaymentsError } = await supabase
      .from('payments_v2')
      .delete()
      .eq('telegram_id', testTelegramId)

    if (deletePaymentsError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', {
        description: 'Error deleting test payments',
        error: deletePaymentsError.message,
      })
    }

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id: testTelegramId,
    })

    return {
      name: 'Payment System Test',
      success: true,
      message: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      startTime: Date.now(),
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Error in payment system test',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    return {
      name: 'Payment System Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`,
      error: error instanceof Error ? error : new Error(String(error)),
      startTime: Date.now(),
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
export const runAllPaymentTests = async (): Promise<TestResult[]> => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
    description: 'Running all payment system tests',
  })

  const results: TestResult[] = []

  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const paymentSystemResult = await testPaymentSystem()
    results.push(paymentSystemResult)

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'All payment system tests completed',
      success_count: results.filter(r => r.success).length,
      fail_count: results.filter(r => !r.success).length,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', {
      description: 'Error running payment system tests',
      error: error instanceof Error ? error.message : String(error),
    })
    return [
      {
        success: false,
        name: 'Payment System Tests',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${
          error instanceof Error ? error.message : String(error)
        }`,
        startTime: Date.now(),
      },
    ]
  }
}
