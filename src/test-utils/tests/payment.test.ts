import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'
import { inngest } from '@/core/inngest/clients'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TestResult } from '../types'
import { getPaymentByInvId } from '@/core/supabase/getPaymentByInvId'

const waitForPaymentCompletion = async (
  telegram_id: TelegramId,
  operation_id: string,
  expectedBalance: number
): Promise<boolean> => {
  let attempts = 0
  const maxAttempts = 5 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  const delay = 1000 // 1 second

  while (attempts < maxAttempts) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
      const payment = await getPaymentByInvId(operation_id)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await getUserBalance(telegram_id)

      logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Checking payment status',
        attempt: attempts + 1,
        telegram_id,
        operation_id,
        payment_status: payment?.status || 'NOT_FOUND',
        current_balance: currentBalance,
        expected_balance: expectedBalance,
      })

      if (
        payment?.status === 'COMPLETED' &&
        currentBalance === expectedBalance
      ) {
        logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
          description: 'Payment completed successfully',
          telegram_id,
          operation_id,
          current_balance: currentBalance,
          expected_balance: expectedBalance,
        })
        return true
      }

      if (payment?.status === 'FAILED') {
        logger.error('‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
          description: 'Payment failed',
          telegram_id,
          operation_id,
          current_balance: currentBalance,
        })
        return false
      }

      attempts++
      await new Promise(resolve => setTimeout(resolve, delay))
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment status',
        error: error instanceof Error ? error.message : String(error),
        attempt: attempts + 1,
        telegram_id,
        operation_id,
      })
      attempts++
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }

  logger.error('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Operation timeout',
    operation_id,
    attempts,
  })
  return false
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const cleanupTestUser = async (telegram_id: TelegramId) => {
  try {
    // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
    await supabase.from('payments_v2').delete().eq('telegram_id', telegram_id)
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('users').delete().eq('telegram_id', telegram_id)

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Error cleaning up test data',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
  }
}

export const testPaymentSystem = async (): Promise<TestResult> => {
  const testTelegramId = normalizeTelegramId(Date.now())
  const testUsername = `test_user_${testTelegramId}`

  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createUserError } = await supabase.from('users').insert([
      {
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
        photo_url: '',
        chat_id: testTelegramId,
        mode: 'clean',
        model: 'gpt-4-turbo',
        count: 0,
        aspect_ratio: '9:16',
        balance: 0,
        bot_name: 'test_bot',
        level: 1,
      },
    ])

    if (createUserError) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createUserError.message}`
      )
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(testTelegramId)
    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Initial balance check',
      telegram_id: testTelegramId,
      balance: initialBalance,
    })

    if (initialBalance !== 0) {
      throw new Error(
        `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ: ${initialBalance}`
      )
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (STARS)
    const addOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-add-${addOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test add payment via Inngest',
        type: 'income',
        metadata: {
          service_type: 'System',
          test: true,
        },
        operation_id: addOperationId,
        currency: 'STARS',
      },
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 5000))

    const addOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      addOperationId,
      100
    )

    if (!addOperationCompleted) {
      throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ')
    }

    const balanceAfterAdd = await getUserBalance(testTelegramId)
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100, –ø–æ–ª—É—á–µ–Ω–æ: ${balanceAfterAdd}`
      )
    }

    // –¢–µ—Å—Ç 3: –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    const spendOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-spend-${spendOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 30,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test spend payment via Inngest',
        type: 'outcome',
        metadata: {
          service_type: ModeEnum.TextToImage,
          test: true,
        },
        operation_id: spendOperationId,
        currency: 'STARS',
      },
    })

    const spendOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      spendOperationId,
      70
    )

    if (!spendOperationCompleted) {
      throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ')
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const negativeOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-negative-${negativeOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test negative balance prevention',
        type: 'outcome',
        metadata: {
          service_type: ModeEnum.TextToImage,
          test: true,
        },
        operation_id: negativeOperationId,
        currency: 'STARS',
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 5000))

    const balanceAfterNegative = await getUserBalance(testTelegramId)
    if (balanceAfterNegative !== 70) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –Ω–µ –¥–æ–ª–∂–µ–Ω —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å, –æ–∂–∏–¥–∞–µ—Ç—Å—è 70, –ø–æ–ª—É—á–µ–Ω–æ: ${balanceAfterNegative}`
      )
    }

    // –¢–µ—Å—Ç 5: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const concurrentOperations = Array.from({ length: 5 }, (_, i) => {
      const operationId = `${Date.now()}-${testTelegramId}-concurrent-${i}`
      return inngest.send({
        id: `test-payment-concurrent-${operationId}`,
        name: 'payment/process',
        data: {
          telegram_id: testTelegramId,
          amount: 10,
          is_ru: true,
          bot_name: 'test_bot',
          description: `Concurrent operation ${i}`,
          type: 'income',
          metadata: {
            service_type: 'System',
            test: true,
            concurrent_test: true,
          },
          operation_id: operationId,
          currency: 'STARS',
        },
      })
    })

    await Promise.all(concurrentOperations)
    await new Promise(resolve => setTimeout(resolve, 5000))

    const finalBalance = await getUserBalance(testTelegramId)
    if (finalBalance !== 120) {
      // 70 + (5 * 10)
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –æ–∂–∏–¥–∞–µ—Ç—Å—è 120, –ø–æ–ª—É—á–µ–Ω–æ: ${finalBalance}`
      )
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select(
        'amount, stars, payment_method, status, description, metadata, inv_id, currency'
      )
      .eq('telegram_id', testTelegramId)
      .order('payment_date', { ascending: false })

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`)
    }

    if (!payments || payments.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'Payment system tests completed successfully',
      telegram_id: testTelegramId,
      final_balance: finalBalance,
      payments_count: payments.length,
    })

    return {
      success: true,
      testName: 'Payment System Test',
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      details: {
        telegram_id: testTelegramId,
        final_balance: finalBalance,
        payments_count: payments.length,
      },
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Error in payment system tests',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: testTelegramId,
    })

    return {
      success: false,
      testName: 'Payment System Test',
      message: error instanceof Error ? error.message : String(error),
      error: error instanceof Error ? error.message : String(error),
    }
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanupTestUser(testTelegramId)
  }
}
