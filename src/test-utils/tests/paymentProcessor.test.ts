import { TEST_CONFIG } from '../test-config'
import { TestResult } from '../types'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/types/modes'
import { supabase } from '@/core/supabase'
import { InngestTestEngine } from '../inngest/inngest-test-engine'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'
import * as notificationModule from '@/helpers/sendTransactionNotification'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export async function testPaymentProcessor(): Promise<TestResult> {
  const testName = 'Payment Processor Test'
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const originalSendNotification =
    notificationModule.sendTransactionNotification

  try {
    // –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–∫–æ–º
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ readonly
    notificationModule.sendTransactionNotification = async (params: any) => {
      logger.info('üîÑ –ú–û–ö: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
        description: 'MOCK: Sending transaction notification',
        ...params,
      })
      return { messageId: 123 }
    }

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Starting payment processor test',
    })

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegram_id = `${Math.floor(Math.random() * 1000000000)}`
    const username = `test_user_${Math.floor(Math.random() * 100000)}`
    const bot_name = 'neuro_blogger_bot'

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Creating test user',
      telegram_id,
      username,
      bot_name,
    })

    const { error } = await supabase
      .from('users')
      .upsert({
        telegram_id,
        username,
        first_name: 'Test',
        last_name: 'User',
        language_code: 'ru',
        bot_name,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .select()
      .single()

    if (error) {
      throw new Error(`Error creating test user: ${error.message}`)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    const testEngine = new InngestTestEngine({
      maxWaitTime: TEST_CONFIG.eventProcessingTimeout,
      eventBufferSize: TEST_CONFIG.eventBufferSize,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é paymentProcessor
    testEngine.register('payment/process', paymentProcessor)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    logger.info('üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Testing balance top-up',
      telegram_id,
    })

    const topUpResult = await testEngine.send({
      name: 'payment/process',
      data: {
        telegram_id,
        amount: 100,
        stars: 100,
        type: 'money_income',
        description: 'Test balance top-up',
        bot_name,
        service_type: ModeEnum.TopUpBalance,
      },
    })

    if (!topUpResult.success) {
      throw new Error(
        `Failed to process top-up payment: ${
          topUpResult.error instanceof Error
            ? topUpResult.error.message
            : 'Unknown error'
        }`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: balance, error: balanceError } = await supabase.rpc(
      'get_user_balance',
      {
        user_telegram_id: telegram_id,
      }
    )

    if (balanceError) {
      throw new Error(`Error checking user balance: ${balanceError.message}`)
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Balance after top-up',
      balance,
      expected_balance: 100,
    })

    if (balance !== 100) {
      throw new Error(
        `Balance incorrect after top-up: expected 100, got ${balance}`
      )
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å—á–µ—Ç–∞
    logger.info('üí∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å–æ —Å—á–µ—Ç–∞', {
      description: 'Testing balance withdrawal',
      telegram_id,
    })

    const withdrawalResult = await testEngine.send({
      name: 'payment/process',
      data: {
        telegram_id,
        amount: 30,
        stars: 30,
        type: 'money_expense',
        description: 'Test balance withdrawal',
        bot_name,
        service_type: ModeEnum.TextToImage,
      },
    })

    if (!withdrawalResult.success) {
      throw new Error(
        `Failed to process withdrawal payment: ${
          withdrawalResult.error instanceof Error
            ? withdrawalResult.error.message
            : 'Unknown error'
        }`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const { data: updatedBalance, error: updatedBalanceError } =
      await supabase.rpc('get_user_balance', {
        user_telegram_id: telegram_id,
      })

    if (updatedBalanceError) {
      throw new Error(
        `Error checking updated user balance: ${updatedBalanceError.message}`
      )
    }

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è', {
      description: 'Balance after withdrawal',
      balance: updatedBalance,
      expected_balance: 70,
    })

    if (updatedBalance !== 70) {
      throw new Error(
        `Balance incorrect after withdrawal: expected 70, got ${updatedBalance}`
      )
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Cleaning up test data',
      telegram_id,
    })

    const { error: deleteUserError } = await supabase
      .from('users')
      .delete()
      .eq('telegram_id', telegram_id)

    if (deleteUserError) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Failed to delete test user',
        error: deleteUserError.message,
      })
    }

    const { error: deletePaymentsError } = await supabase
      .from('payments_v2')
      .delete()
      .eq('telegram_id', telegram_id)

    if (deletePaymentsError) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏', {
        description: 'Failed to delete test payments',
        error: deletePaymentsError.message,
      })
    }

    return {
      name: testName,
      success: true,
      message: 'Payment processor test completed successfully',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Error in payment processor test',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      name: testName,
      success: false,
      message: `Test failed: ${
        error instanceof Error ? error.message : String(error)
      }`,
      error: error instanceof Error ? error : new Error(String(error)),
    }
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ readonly
    notificationModule.sendTransactionNotification = originalSendNotification
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  ;(async () => {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é')
      console.log('----------------------------------------')

      const result = await testPaymentProcessor()

      if (result.success) {
        console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω:', result.name)
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message)
        console.log('----------------------------------------')
        process.exit(0)
      } else {
        console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', result.name)
        console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message)
        console.error('‚ùå –û—à–∏–±–∫–∞:', result.error?.message)
        console.log('----------------------------------------')
        process.exit(1)
      }
    } catch (error) {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞')
      console.error(
        '‚ùå –û—à–∏–±–∫–∞:',
        error instanceof Error ? error.message : String(error)
      )
      console.error(
        '‚ùå –°—Ç–µ–∫:',
        error instanceof Error ? error.stack : '–°—Ç–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      )
      console.log('----------------------------------------')
      process.exit(1)
    }
  })()
}
