import { config } from 'dotenv'
import path from 'path'
import { logger } from '@/utils/logger'
import { exec } from 'child_process'
import { promisify } from 'util'
import { TestResult } from '@/test-utils/types'
import { TestCategory } from '@/test-utils/core/categories'
import { NeuroPhotoV2Tester } from './NeuroPhotoV2Tester'
import { NeuroPhotoTester } from './NeuroPhotoTester'
import { testNeuroPhotoApi } from './neuroPhotoApiTest'

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–±—ç–∫-—Ñ—É–Ω–∫—Ü–∏—é exec –≤ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise
const execAsync = promisify(exec)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function runTest(
  testPath: string,
  name: string
): Promise<{
  success: boolean
  output: string
  error?: string
}> {
  try {
    logger.info({
      message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Running ${name} test`,
      testPath,
    })

    const { stdout, stderr } = await execAsync(
      `npx ts-node -r tsconfig-paths/register ${testPath}`
    )

    if (stderr) {
      logger.warn({
        message: `‚ö†Ô∏è –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`,
        description: `${name} test completed with warnings`,
        warnings: stderr,
      })
    }

    logger.info({
      message: `‚úÖ –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      description: `${name} test completed successfully`,
    })

    return {
      success: true,
      output: stdout,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Error running ${name} test`,
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º stdout –∏–∑ –æ—à–∏–±–∫–∏
    let stdout = ''
    try {
      // @ts-ignore - –û–±–æ–π–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –∑–¥–µ—Å—å
      if (error && typeof error === 'object' && error.stdout) {
        // @ts-ignore
        stdout = error.stdout
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ stdout
    }

    return {
      success: false,
      output: stdout,
      error: errorMessage,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function runAllTests() {
  const testResults: {
    [key: string]: { success: boolean; output: string; error?: string }
  } = {}

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  testResults['neuroPhoto'] = await runTest(
    'test-utils/neuroPhotoTest.ts',
    '–ù–µ–π—Ä–æ–§–æ—Ç–æ'
  )

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  testResults['neuroPhotoV2'] = await runTest(
    'test-utils/neuroPhotoV2Test.ts',
    '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2'
  )

  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  const allSuccess = Object.values(testResults).every(result => result.success)

  logger.info({
    message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤',
    description: 'Results of all tests',
    allSuccess,
    individualResults: Object.keys(testResults).map(testName => ({
      test: testName,
      success: testResults[testName].success,
      hasError: !!testResults[testName].error,
    })),
  })

  // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\n======== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ========\n')

  for (const [testName, result] of Object.entries(testResults)) {
    console.log(`–¢–µ—Å—Ç: ${testName}`)
    console.log(`–°—Ç–∞—Ç—É—Å: ${result.success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`)

    if (result.error) {
      console.log(`–û—à–∏–±–∫–∞: ${result.error}`)
    }

    console.log('\n-----------------------------------\n')
  }

  console.log(
    `–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allSuccess ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}\n`
  )

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  process.exit(allSuccess ? 0 : 1)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests()

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export async function runNeuroPhotoTests(
  options: {
    version?: 'v1' | 'v2' | 'both'
    systemCheck?: boolean
    apiCheck?: boolean
  } = {}
): Promise<TestResult[]> {
  const { version = 'both', systemCheck = true, apiCheck = true } = options

  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    description: 'Starting neurophoto tests',
    version,
    systemCheck,
    apiCheck,
  })

  const results: TestResult[] = []

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  if (apiCheck) {
    try {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Starting NeuroPhoto API test',
      })

      const apiResult = await testNeuroPhotoApi()
      results.push(apiResult)

      if (!apiResult.success) {
        logger.error({
          message: '‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
          description: 'NeuroPhoto API check failed',
        })
      } else {
        logger.info({
          message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞',
          description: 'NeuroPhoto API check succeeded',
        })
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Error running NeuroPhoto API check',
        error: errorMessage,
      })

      results.push({
        success: false,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ API –ø—Ä–æ–≤–µ—Ä–∫–∞',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${errorMessage}`,
        category: TestCategory.Api,
        error: errorMessage,
      })
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ù–µ–π—Ä–æ–§–æ—Ç–æ V2, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  if ((version === 'v2' || version === 'both') && systemCheck) {
    try {
      const tester = new NeuroPhotoV2Tester()
      const checkResult = await tester.runSystemCheck()

      results.push({
        success: checkResult.success,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
        message: checkResult.message,
        category: TestCategory.Neuro,
        details: checkResult,
      })

      if (!checkResult.success) {
        logger.error({
          message: '‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
          description: 'NeuroPhoto V2 system check failed',
          errorDetails: checkResult,
        })
      } else {
        logger.info({
          message: '‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞',
          description: 'NeuroPhoto V2 system check succeeded',
        })
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
        description: 'Error running NeuroPhoto V2 system check',
        error: errorMessage,
      })

      results.push({
        success: false,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${errorMessage}`,
        category: TestCategory.Neuro,
        error: errorMessage,
      })
    }
  }

  // –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V1
  if (version === 'v1' || version === 'both') {
    try {
      const tester = new NeuroPhotoTester()
      const testResult = await tester.runTest({
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ - –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ',
        model_url: 'stability-ai/sdxl',
        numImages: 1,
        telegram_id: '144022504',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      })

      results.push({
        success: testResult.success,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç',
        message: '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        category: TestCategory.Neuro,
        details: testResult,
      })

      if (!testResult.success) {
        logger.error({
          message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V1 test failed',
        })
      } else {
        logger.info({
          message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V1 test succeeded',
        })
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V1',
        description: 'Error running NeuroPhoto V1 test',
        error: errorMessage,
      })

      results.push({
        success: false,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —Ç–µ—Å—Ç',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${errorMessage}`,
        category: TestCategory.Neuro,
        error: errorMessage,
      })
    }
  }

  // –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
  if (version === 'v2' || version === 'both') {
    try {
      const tester = new NeuroPhotoV2Tester()
      const testResult = await tester.testWithPrompt(
        '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 - –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ'
      )

      results.push({
        success: testResult.success,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç',
        message: '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        category: TestCategory.Neuro,
        details: testResult,
      })

      if (!testResult.success) {
        logger.error({
          message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V2 test failed',
        })
      } else {
        logger.info({
          message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V2 test succeeded',
        })
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      const multiImageTestResult = await tester.testWithMultipleImages(2)

      results.push({
        success: multiImageTestResult.success,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
        message:
          '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        category: TestCategory.Neuro,
        details: multiImageTestResult,
      })

      if (!multiImageTestResult.success) {
        logger.error({
          message:
            '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V2 multi-image test failed',
        })
      } else {
        logger.info({
          message:
            '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
          description: 'NeuroPhoto V2 multi-image test succeeded',
        })
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
        description: 'Error running NeuroPhoto V2 test',
        error: errorMessage,
      })

      results.push({
        success: false,
        name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${errorMessage}`,
        category: TestCategory.Neuro,
        error: errorMessage,
      })
    }
  }

  // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const allSuccess = results.every(r => r.success)

  logger.info({
    message: allSuccess
      ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã'
      : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
    description: allSuccess
      ? 'All neurophoto tests passed'
      : 'Some neurophoto tests failed',
    results: results.map(r => ({ name: r.name, success: r.success })),
  })

  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const version =
    (process.env.NEUROPHOTO_VERSION as 'v1' | 'v2' | 'both') || 'both'
  const systemCheck = process.env.SYSTEM_CHECK !== 'false'
  const apiCheck = process.env.API_CHECK !== 'false'

  runNeuroPhotoTests({ version, systemCheck, apiCheck })
    .then(results => {
      const allSuccess = results.every(r => r.success)

      if (!allSuccess) {
        process.exit(1)
      }

      process.exit(0)
    })
    .catch(error => {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Critical error running neurophoto tests',
        error: error instanceof Error ? error.message : String(error),
      })

      process.exit(1)
    })
}
