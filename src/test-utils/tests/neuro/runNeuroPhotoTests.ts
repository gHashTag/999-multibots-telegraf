import { config } from 'dotenv';
import path from 'path';
import { logger } from '@/utils/logger';
import { exec } from 'child_process';
import { promisify } from 'util';

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–±—ç–∫-—Ñ—É–Ω–∫—Ü–∏—é exec –≤ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise
const execAsync = promisify(exec);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') });

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function runTest(testPath: string, name: string): Promise<{
  success: boolean;
  output: string;
  error?: string;
}> {
  try {
    logger.info({
      message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Running ${name} test`,
      testPath,
    });

    const { stdout, stderr } = await execAsync(
      `npx ts-node -r tsconfig-paths/register ${testPath}`
    );

    if (stderr) {
      logger.warn({
        message: `‚ö†Ô∏è –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`,
        description: `${name} test completed with warnings`,
        warnings: stderr,
      });
    }

    logger.info({
      message: `‚úÖ –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      description: `${name} test completed successfully`,
    });

    return {
      success: true,
      output: stdout,
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Error running ${name} test`,
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined,
    });

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º stdout –∏–∑ –æ—à–∏–±–∫–∏
    let stdout = '';
    try {
      // @ts-ignore - –û–±–æ–π–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –∑–¥–µ—Å—å
      if (error && typeof error === 'object' && error.stdout) {
        // @ts-ignore
        stdout = error.stdout;
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ stdout
    }

    return {
      success: false,
      output: stdout,
      error: errorMessage,
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function runAllTests() {
  const testResults: { [key: string]: { success: boolean; output: string; error?: string } } = {};
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  testResults['neuroPhoto'] = await runTest(
    'test-utils/neuroPhotoTest.ts',
    '–ù–µ–π—Ä–æ–§–æ—Ç–æ'
  );
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  testResults['neuroPhotoV2'] = await runTest(
    'test-utils/neuroPhotoV2Test.ts',
    '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2'
  );
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  const allSuccess = Object.values(testResults).every((result) => result.success);
  
  logger.info({
    message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤',
    description: 'Results of all tests',
    allSuccess,
    individualResults: Object.keys(testResults).map((testName) => ({
      test: testName,
      success: testResults[testName].success,
      hasError: !!testResults[testName].error,
    })),
  });
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\n======== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ========\n');
  
  for (const [testName, result] of Object.entries(testResults)) {
    console.log(`–¢–µ—Å—Ç: ${testName}`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${result.success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    
    if (result.error) {
      console.log(`–û—à–∏–±–∫–∞: ${result.error}`);
    }
    
    console.log('\n-----------------------------------\n');
  }
  
  console.log(`–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allSuccess ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}\n`);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  process.exit(allSuccess ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests(); 