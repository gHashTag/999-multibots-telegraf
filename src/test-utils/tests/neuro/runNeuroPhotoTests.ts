import { config } from 'dotenv'
import path from 'path'
import { logger } from '../../../utils/logger'
import { exec } from 'child_process'
import { promisify } from 'util'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { NeuroPhotoV2Tester } from './NeuroPhotoV2Tester'
import { NeuroPhotoTester } from './NeuroPhotoTester'
import { testNeuroPhotoApi } from './neuroPhotoApiTest'
import { testNeuroPhotoDirect, runRealApiTest } from './testNeuroPhotoDirect'

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–±—ç–∫-—Ñ—É–Ω–∫—Ü–∏—é exec –≤ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise
const execAsync = promisify(exec)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
async function runTest(testPath: string, name: string): Promise<TestResult> {
  try {
    logger.info({
      message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Running ${name} test`,
      testPath,
    })

    const { stdout, stderr } = await execAsync(
      `npx ts-node -r tsconfig-paths/register ${testPath}`
    )

    if (stderr) {
      logger.warn({
        message: `‚ö†Ô∏è –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`,
        description: `${name} test completed with warnings`,
        warnings: stderr,
      })
    }

    logger.info({
      message: `‚úÖ –¢–µ—Å—Ç ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      description: `${name} test completed successfully`,
    })

    return {
      success: true,
      name,
      message: `–¢–µ—Å—Ç ${name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      category: TestCategory.Neuro,
      details: { output: stdout },
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ ${name}`,
      description: `Error running ${name} test`,
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º stdout –∏–∑ –æ—à–∏–±–∫–∏
    let stdout = ''
    try {
      // @ts-ignore - –û–±–æ–π–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –∑–¥–µ—Å—å
      if (error && typeof error === 'object' && error.stdout) {
        // @ts-ignore
        stdout = error.stdout
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ stdout
    }

    return {
      success: false,
      name,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${name}`,
      error: errorMessage,
      category: TestCategory.Neuro,
      details: { output: stdout },
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function runAllTests(): Promise<TestResult[]> {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ...',
    description: 'Running all neurophoto tests',
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  let hasFailures = false
  let totalTests = 0
  let passedTests = 0
  const results: TestResult[] = []
  const startTime = new Date().getTime()

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const neurophotoVersion = process.env.NEUROPHOTO_VERSION
    const systemCheck = process.env.SYSTEM_CHECK === 'true'
    const apiCheck = process.env.API_CHECK === 'true'
    const directTest = process.env.DIRECT_TEST === 'true'
    const realApiTest = process.env.REAL_API_TEST === 'true'

    logger.info({
      message: 'üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Neurophoto test configuration',
      neurophotoVersion,
      systemCheck,
      apiCheck,
      directTest,
      realApiTest,
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    const neuroPhotoResult = await runTest(
      'test-utils/neuroPhotoTest.ts',
      '–ù–µ–π—Ä–æ–§–æ—Ç–æ'
    )
    results.push(neuroPhotoResult)
    totalTests++

    if (neuroPhotoResult.success) {
      passedTests++
      logger.info({
        message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'NeuroPhoto test passed',
      })
    } else {
      hasFailures = true
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'NeuroPhoto test failed',
        error: neuroPhotoResult.error,
      })
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
    const neuroPhotoV2Result = await runTest(
      'test-utils/neuroPhotoV2Test.ts',
      '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2'
    )
    results.push(neuroPhotoV2Result)
    totalTests++

    if (neuroPhotoV2Result.success) {
      passedTests++
      logger.info({
        message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'NeuroPhoto V2 test passed',
      })
    } else {
      hasFailures = true
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'NeuroPhoto V2 test failed',
        error: neuroPhotoV2Result.error,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    if (apiCheck) {
      try {
        logger.info({
          message: 'üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
          description: 'Starting NeuroPhoto API test',
        })

        const apiResult = await testNeuroPhotoApi()
        results.push(apiResult)
        totalTests++

        if (!apiResult.success) {
          hasFailures = true
          logger.error({
            message: '‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
            description: 'NeuroPhoto API check failed',
          })
        } else {
          logger.info({
            message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞',
            description: 'NeuroPhoto API check succeeded',
          })
          passedTests++
        }
      } catch (error) {
        hasFailures = true
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
          description: 'Error running NeuroPhoto API check',
          error: errorMessage,
        })

        results.push({
          success: false,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ API –ø—Ä–æ–≤–µ—Ä–∫–∞',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${errorMessage}`,
          category: TestCategory.Api,
          error: errorMessage,
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ù–µ–π—Ä–æ–§–æ—Ç–æ V2, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (
      (neurophotoVersion === 'v2' || neurophotoVersion === 'both') &&
      systemCheck
    ) {
      try {
        const tester = new NeuroPhotoV2Tester()
        const checkResult = await tester.runSystemCheck()

        results.push({
          success: checkResult.success,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
          message: checkResult.message,
          category: TestCategory.Neuro,
          details: checkResult,
        })

        if (!checkResult.success) {
          hasFailures = true
          logger.error({
            message: '‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
            description: 'NeuroPhoto V2 system check failed',
            errorDetails: checkResult,
          })
        } else {
          logger.info({
            message: '‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞',
            description: 'NeuroPhoto V2 system check succeeded',
          })
          passedTests++
        }
      } catch (error) {
        hasFailures = true
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
          description: 'Error running NeuroPhoto V2 system check',
          error: errorMessage,
        })

        results.push({
          success: false,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${errorMessage}`,
          category: TestCategory.Neuro,
          error: errorMessage,
        })
      }
    }

    // –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V1
    if (neurophotoVersion === 'v1' || neurophotoVersion === 'both') {
      try {
        const tester = new NeuroPhotoTester()
        const testResult = await tester.runTest({
          prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ - –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ',
          model_url: 'stability-ai/sdxl',
          numImages: 1,
          telegram_id: '144022504',
          username: 'test_user',
          is_ru: true,
          bot_name: 'test_bot',
        })

        results.push({
          success: testResult.success,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç',
          message: '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          category: TestCategory.Neuro,
          details: testResult,
        })

        if (!testResult.success) {
          hasFailures = true
          logger.error({
            message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V1 test failed',
          })
        } else {
          logger.info({
            message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V1 test succeeded',
          })
          passedTests++
        }
      } catch (error) {
        hasFailures = true
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V1',
          description: 'Error running NeuroPhoto V1 test',
          error: errorMessage,
        })

        results.push({
          success: false,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V1 —Ç–µ—Å—Ç',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${errorMessage}`,
          category: TestCategory.Neuro,
          error: errorMessage,
        })
      }
    }

    // –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
    if (neurophotoVersion === 'v2' || neurophotoVersion === 'both') {
      try {
        const tester = new NeuroPhotoV2Tester()
        const testResult = await tester.testWithPrompt(
          '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 - –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ'
        )

        results.push({
          success: testResult.success,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç',
          message: '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          category: TestCategory.Neuro,
          details: testResult,
        })

        if (!testResult.success) {
          hasFailures = true
          logger.error({
            message: '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V2 test failed',
          })
        } else {
          logger.info({
            message: '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V2 test succeeded',
          })
          passedTests++
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const multiImageTestResult = await tester.testWithMultipleImages(2)

        results.push({
          success: multiImageTestResult.success,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
          message:
            '–¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          category: TestCategory.Neuro,
          details: multiImageTestResult,
        })

        if (!multiImageTestResult.success) {
          hasFailures = true
          logger.error({
            message:
              '‚ùå –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V2 multi-image test failed',
          })
        } else {
          logger.info({
            message:
              '‚úÖ –¢–µ—Å—Ç –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
            description: 'NeuroPhoto V2 multi-image test succeeded',
          })
          passedTests++
        }
      } catch (error) {
        hasFailures = true
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
          description: 'Error running NeuroPhoto V2 test',
          error: errorMessage,
        })

        results.push({
          success: false,
          name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${errorMessage}`,
          category: TestCategory.Neuro,
          error: errorMessage,
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é direct test
    if (directTest) {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ...')

      try {
        const directResult = await testNeuroPhotoDirect(
          process.env.ADMIN_TELEGRAM_ID
        )
        results.push({
          name: '–ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
          success: directResult,
          message: directResult
            ? '–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
            : '–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          category: TestCategory.Neuro,
        })

        if (directResult) {
          console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
        } else {
          console.log('‚ùå –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          hasFailures = true
        }
      } catch (error) {
        hasFailures = true
        console.error(
          '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:',
          error
        )
        results.push({
          name: '–ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
          success: false,
          message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          error: error instanceof Error ? error.message : String(error),
          category: TestCategory.Neuro,
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é real API test
    if (realApiTest) {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API...')

      try {
        const realApiResult = await runRealApiTest({
          telegram_id: process.env.ADMIN_TELEGRAM_ID || '',
          prompt: process.env.TEST_PROMPT,
          numImages: process.env.TEST_NUM_IMAGES
            ? parseInt(process.env.TEST_NUM_IMAGES, 10)
            : undefined,
          is_ru: process.env.TEST_IS_RU || 'true',
        })

        results.push({
          name: '–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API',
          success: realApiResult,
          message: realApiResult
            ? '–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
            : '–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          category: TestCategory.Neuro,
        })

        if (realApiResult) {
          console.log('‚úÖ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
        } else {
          console.log('‚ùå –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          hasFailures = true
        }
      } catch (error) {
        hasFailures = true
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API:', error)
        results.push({
          name: '–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API',
          success: false,
          message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API',
          error: error instanceof Error ? error.message : String(error),
          category: TestCategory.Neuro,
        })
      }
    }

    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const allSuccess = results.every(r => r.success)
    const endTime = new Date().getTime()
    const duration = endTime - startTime

    logger.info({
      message: allSuccess
        ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã'
        : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
      description: allSuccess
        ? 'All neurophoto tests passed'
        : 'Some neurophoto tests failed',
      results: results.map(r => ({ name: r.name, success: r.success })),
      totalTests,
      passedTests,
      duration: `${Math.round(duration / 1000)} —Å–µ–∫—É–Ω–¥`,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞—Ç–µ—Å—Ç —Å –æ–±—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    results.push({
      name: '–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      success: !hasFailures, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hasFailures –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —É—Å–ø–µ—Ö–∞
      message: hasFailures
        ? '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã'
        : '–í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      category: TestCategory.Neuro,
      details: {
        totalTests,
        passedTests,
        duration: `${Math.round(duration / 1000)} —Å–µ–∫—É–Ω–¥`,
      },
    })

    return results
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Critical error running neurophoto tests',
      error: errorMessage,
    })

    return [
      {
        name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        success: false,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`,
        error: errorMessage,
        category: TestCategory.Neuro,
      },
    ]
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default runAllTests

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const neurophotoVersion = process.env.NEUROPHOTO_VERSION
      const systemCheck = process.env.SYSTEM_CHECK === 'true'
      const apiCheck = process.env.API_CHECK === 'true'
      const directTest = process.env.DIRECT_TEST === 'true'
      const realApiTest = process.env.REAL_API_TEST === 'true'

      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é',
        description: 'Running neurophoto tests directly',
        neurophotoVersion,
        systemCheck,
        apiCheck,
        directTest,
        realApiTest,
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (neurophotoVersion === 'v1') {
        await runTest('./neuroPhotoTest.ts', '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V1')
      } else if (neurophotoVersion === 'v2') {
        await runTest('./neuroPhotoV2Test.ts', '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2')
      } else if (apiCheck) {
        await runTest('./neuroPhotoApiTest.ts', '–¢–µ—Å—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ')
      } else if (directTest) {
        await runTest(
          './testNeuroPhotoDirect.ts',
          '–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'
        )
      } else if (realApiTest) {
        await runTest(
          './testNeuroPhotoRealAPI.ts',
          '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º API'
        )
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        const results = await runAllTests()

        const allSuccess = results.every(r => r.success)

        if (allSuccess) {
          logger.info({
            message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
            description: 'All neurophoto tests passed successfully',
          })
          process.exit(0)
        } else {
          logger.error({
            message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
            description: 'Some neurophoto tests failed',
            failedTests: results.filter(r => !r.success).map(r => r.name),
          })
          process.exit(1)
        }
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Critical error running neurophoto tests',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    }
  })()
}
