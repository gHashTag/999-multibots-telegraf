import { TestRunner } from '../../../core/TestRunner'
import { logger } from '@/utils/logger'
import assert from '../../../core/assert'
import { ModeEnum } from '@/interfaces/mode.interface'
import { createModelTraining } from '@/services/neuro/model/createModelTraining'
import { createModelTrainingDirect } from '@/services/neuro/model/createModelTrainingDirect'
import { ModelTrainingConfig } from '@/services/shared/model.utils'
import { MyContext, MySession, MyWizardSession } from '@/interfaces/telegram-bot.interface'
import { Context, Middleware, Scenes, Telegram } from 'telegraf'
import { create } from '../../../core/mock'

const testRunner = new TestRunner()

const testFilePath = '/mock/path/test.safetensors'

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–µ—Å—Å–∏–∏
const mockWizardSession: MyWizardSession = {
  data: '',
  cursor: 0,
  severity: 0
}

const mockSession = {
  email: '',
  selectedModel: '',
  prompt: '',
  selectedSize: '',
  mode: ModeEnum.TEST,
  attempts: 0,
  amount: 0,
  is_ru: false,
  wizardSession: mockWizardSession,
  userModel: null,
  numImages: 0,
  telegram_id: '123456789',
  videoModel: '',
  imageUrl: '',
  videoUrl: '',
  audioUrl: '',
  subscription: null,
  images: [],
  modelName: '',
  targetUserId: 0,
  username: '',
  triggerWord: '',
  steps: 0,
  inviter: '',
  inviteCode: '',
  invoiceURL: '',
  buttons: [],
  bypass_payment_check: false,
  text: '',
  selectedPayment: {
    amount: 0,
    stars: 0
  }
} as unknown as MySession

const mockTelegram = new Telegram('mock-token')

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
const baseContext = {
  session: mockSession,
  telegram: mockTelegram,
  attempts: 0,
  amount: 0,
  reply: async () => ({} as any),
  update: {} as any,
  botInfo: {} as any,
  state: {} as any,
  updateType: '',
  updateSubTypes: []
} as unknown as MyContext

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –∏ –≤–∏–∑–∞—Ä–¥
const mockScene = new Scenes.BaseScene<MyContext>('test')
const scenes = new Map<string, Scenes.BaseScene<MyContext>>()
scenes.set('test', mockScene)

const sceneOptions = {
  defaultSession: mockWizardSession,
  ttl: 10 * 60 * 1000 // 10 minutes
}

const mockContext = {
  ...baseContext,
  scene: new Scenes.SceneContextScene(baseContext, scenes, sceneOptions),
  wizard: new Scenes.WizardContextWizard(baseContext, [mockScene])
} as unknown as MyContext

const mockConfig: ModelTrainingConfig = {
  filePath: testFilePath,
  modelName: 'test-model',
  triggerWord: 'test',
  steps: 1000,
  telegram_id: '123456789',
  botName: 'test-bot',
  is_ru: false
}

// –ú–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const validateModelFileMock = create<() => Promise<{ path: string; size: number; name: string }>>()
validateModelFileMock.mockImplementation(async () => ({ path: '/mock/path', size: 1000, name: 'test.safetensors' }))

const uploadModelFileMock = create<() => Promise<{ success: boolean; url: string }>>()
uploadModelFileMock.mockImplementation(async () => ({ success: true, url: 'https://example.com/model.safetensors' }))

// –ú–æ–∫ –¥–ª—è Inngest
const mockSend = create<() => Promise<{ success: boolean; id: string }>>()
mockSend.mockImplementation(async () => ({ success: true, id: 'test_event_id' }))

const inngestMock = {
  send: mockSend
}

// –û—á–∏—Å—Ç–∫–∞ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
testRunner.beforeEach(() => {
  logger.info('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  validateModelFileMock.mockClear()
  uploadModelFileMock.mockClear()
  mockSend.mockClear()
})

// –ü–ª–∞–Ω A: –¢–µ—Å—Ç—ã —á–µ—Ä–µ–∑ Inngest
testRunner.test('Plan A: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Inngest', async () => {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Inngest')
  const result = await createModelTraining(mockConfig, mockContext)
  assert.isTrue(result.success, '–û–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  assert.equal(typeof result.eventId, 'string', '–û–∂–∏–¥–∞–ª—Å—è eventId —Ç–∏–ø–∞ string')
})

testRunner.test('Plan A: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', async () => {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è Plan A')
  const config = { ...mockConfig, filePath: 'invalid/path' }
  const result = await createModelTraining(config, mockContext)
  assert.isFalse(result.success, '–û–∂–∏–¥–∞–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  assert.equal(typeof result.error, 'string', '–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ')
})

// –ü–ª–∞–Ω B: –¢–µ—Å—Ç—ã –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
testRunner.test('Plan B: –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏', async () => {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏')
  const result = await createModelTrainingDirect(mockContext, testFilePath, mockConfig)
  assert.isTrue(result.success, '–û–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  assert.equal(typeof result.requestId, 'string', '–û–∂–∏–¥–∞–ª—Å—è requestId —Ç–∏–ø–∞ string')
})

testRunner.test('Plan B: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async () => {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è Plan B')
  const result = await createModelTrainingDirect(mockContext, 'invalid/path', mockConfig)
  assert.isFalse(result.success, '–û–∂–∏–¥–∞–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  assert.equal(typeof result.error, 'string', '–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ')
})

// –¢–µ—Å—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
testRunner.test('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: –†—É—Å—Å–∫–∏–π —è–∑—ã–∫', async () => {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)')
  const ruConfig = { ...mockConfig, is_ru: true }
  const result = await createModelTraining(ruConfig, mockContext)
  assert.isTrue(result.success, '–û–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  assert.equal(typeof result.eventId, 'string', '–û–∂–∏–¥–∞–ª—Å—è eventId —Ç–∏–ø–∞ string')
})

// –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
testRunner.test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤', async () => {
  logger.info('üîç –¢–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏')
  
  // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
  const emptyNameConfig = { ...mockConfig, modelName: '' }
  const resultEmptyName = await createModelTrainingDirect(
    mockContext,
    testFilePath,
    emptyNameConfig
  )
  assert.isFalse(resultEmptyName.success, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏')
  
  // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
  const invalidStepsConfig = { ...mockConfig, steps: -1 }
  const resultInvalidSteps = await createModelTrainingDirect(
    mockContext,
    testFilePath,
    invalidStepsConfig
  )
  assert.isFalse(resultInvalidSteps.success, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —à–∞–≥–æ–≤')
})

export { testRunner } 