import { TestResult } from '@/test-utils/types'
import { TestCategory } from '@/test-utils/core/categories'
import { logger } from '@/utils/logger'
import axios from 'axios'
import * as dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.test
dotenv.config({ path: '.env.test' })

// –¢–∏–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API-–ø—Ä–æ–≤–µ—Ä–æ–∫
interface ApiCheckError {
  code?: string
  message: string
  response?: any
}

interface ApiCheckResult {
  success: boolean
  message: string
  response: any | null
  error: ApiCheckError | null
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const NEUROPHOTO_API_ENDPOINTS = {
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API (webhook)
  internal: {
    webhook: process.env.WEBHOOK_URL || 'http://localhost:3333/webhook',
  },
  // –í–Ω–µ—à–Ω–∏–µ API (BFL)
  external: {
    bflStandard: 'https://api.bflsupreme.dev/v1/image-generation',
    bflFineTuned: 'https://api.bflsupreme.dev/v1/fine-tuned-image-generation',
  },
}

// –û–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
interface TestOptions {
  baseUrl?: string
  bflApiKey?: string
  generateReport?: boolean
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ù–µ–π—Ä–æ–§–æ—Ç–æ
 */
export async function testNeuroPhotoApi(
  options: TestOptions = {}
): Promise<TestResult> {
  const {
    baseUrl = NEUROPHOTO_API_ENDPOINTS.internal.webhook,
    bflApiKey = process.env.BFL_API_KEY,
    generateReport = true,
  } = options

  const startTime = Date.now()

  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ API –ù–µ–π—Ä–æ–§–æ—Ç–æ',
    description: 'Starting NeuroPhoto API test',
    baseUrl,
    hasBflApiKey: !!bflApiKey,
  })

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
  const results: {
    internal: { webhook: ApiCheckResult }
    external: { bflStandard: ApiCheckResult; bflFineTuned: ApiCheckResult }
  } = {
    internal: {
      webhook: { success: false, message: '', response: null, error: null },
    },
    external: {
      bflStandard: { success: false, message: '', response: null, error: null },
      bflFineTuned: {
        success: false,
        message: '',
        response: null,
        error: null,
      },
    },
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–±—Ö—É–∫–∞
  try {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–±—Ö—É–∫–∞',
      description: 'Checking internal webhook availability',
      url: baseUrl,
    })

    const response = await axios.get(`${baseUrl}/health`, {
      timeout: 5000,
    })

    results.internal.webhook.success = response.status === 200
    results.internal.webhook.message = `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`
    results.internal.webhook.response = response.data

    logger.info({
      message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–∞',
      description: 'Internal webhook check successful',
      status: response.status,
      data: response.data,
    })
  } catch (error) {
    results.internal.webhook.success = false

    if (axios.isAxiosError(error)) {
      results.internal.webhook.message = `–û—à–∏–±–∫–∞ ${error.code}: ${error.message}`
      results.internal.webhook.error = {
        code: error.code,
        message: error.message,
        response: error.response?.data,
      }
    } else {
      results.internal.webhook.message = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`
      results.internal.webhook.error = {
        message: String(error),
      }
    }

    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–±—Ö—É–∫–∞',
      description: 'Error checking internal webhook',
      error: results.internal.webhook.error,
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API BFL, –µ—Å–ª–∏ –∫–ª—é—á API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  if (bflApiKey) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API BFL
    try {
      logger.info({
        message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API BFL',
        description: 'Checking BFL standard API availability',
        url: NEUROPHOTO_API_ENDPOINTS.external.bflStandard,
      })

      const response = await axios.get(
        `${NEUROPHOTO_API_ENDPOINTS.external.bflStandard}/models`,
        {
          headers: {
            Authorization: `Bearer ${bflApiKey}`,
          },
          timeout: 5000,
        }
      )

      results.external.bflStandard.success = response.status === 200
      results.external.bflStandard.message = `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`
      results.external.bflStandard.response = response.data

      logger.info({
        message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API BFL —É—Å–ø–µ—à–Ω–∞',
        description: 'BFL standard API check successful',
        status: response.status,
        modelsCount: Array.isArray(response.data)
          ? response.data.length
          : 'N/A',
      })
    } catch (error) {
      results.external.bflStandard.success = false

      if (axios.isAxiosError(error)) {
        results.external.bflStandard.message = `–û—à–∏–±–∫–∞ ${error.code}: ${error.message}`
        results.external.bflStandard.error = {
          code: error.code,
          message: error.message,
          response: error.response?.data,
        }
      } else {
        results.external.bflStandard.message = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`
        results.external.bflStandard.error = {
          message: String(error),
        }
      }

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API BFL',
        description: 'Error checking BFL standard API',
        error: results.external.bflStandard.error,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BFL
    try {
      logger.info({
        message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BFL',
        description: 'Checking BFL fine-tuned API availability',
        url: NEUROPHOTO_API_ENDPOINTS.external.bflFineTuned,
      })

      const response = await axios.get(
        `${NEUROPHOTO_API_ENDPOINTS.external.bflFineTuned}/models`,
        {
          headers: {
            Authorization: `Bearer ${bflApiKey}`,
          },
          timeout: 5000,
        }
      )

      results.external.bflFineTuned.success = response.status === 200
      results.external.bflFineTuned.message = `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`
      results.external.bflFineTuned.response = response.data

      logger.info({
        message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BFL —É—Å–ø–µ—à–Ω–∞',
        description: 'BFL fine-tuned API check successful',
        status: response.status,
        modelsCount: Array.isArray(response.data)
          ? response.data.length
          : 'N/A',
      })
    } catch (error) {
      results.external.bflFineTuned.success = false

      if (axios.isAxiosError(error)) {
        results.external.bflFineTuned.message = `–û—à–∏–±–∫–∞ ${error.code}: ${error.message}`
        results.external.bflFineTuned.error = {
          code: error.code,
          message: error.message,
          response: error.response?.data,
        }
      } else {
        results.external.bflFineTuned.message = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`
        results.external.bflFineTuned.error = {
          message: String(error),
        }
      }

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BFL',
        description: 'Error checking BFL fine-tuned API',
        error: results.external.bflFineTuned.error,
      })
    }
  } else {
    logger.warn({
      message: '‚ö†Ô∏è –ö–ª—é—á API BFL –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö API',
      description: 'BFL API key not provided, skipping external API checks',
    })
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  if (generateReport) {
    const endTime = Date.now()
    const duration = endTime - startTime

    // –û–±—â–∏–π —É—Å–ø–µ—Ö: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ–±—Ö—É–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    // –ï—Å–ª–∏ –∫–ª—é—á API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö API —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    const overallSuccess =
      results.internal.webhook.success &&
      (!bflApiKey ||
        results.external.bflStandard.success ||
        results.external.bflFineTuned.success)

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const statusMessage = overallSuccess
      ? 'API –ù–µ–π—Ä–æ–§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç'
      : '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é API –ù–µ–π—Ä–æ–§–æ—Ç–æ'

    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–æ–∫
    const details = {
      duration,
      webhook: results.internal.webhook.success,
      bflStandard: bflApiKey
        ? results.external.bflStandard.success
        : '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
      bflFineTuned: bflApiKey
        ? results.external.bflFineTuned.success
        : '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
      results,
    }

    logger.info({
      message: overallSuccess
        ? '‚úÖ –¢–µ—Å—Ç API –ù–µ–π—Ä–æ–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'
        : '‚ùå –¢–µ—Å—Ç API –ù–µ–π—Ä–æ–§–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏',
      description: overallSuccess
        ? 'NeuroPhoto API test completed successfully'
        : 'NeuroPhoto API test completed with errors',
      duration: `${duration}ms`,
      details,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    return {
      success: overallSuccess,
      name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ API',
      message: statusMessage,
      category: TestCategory.Api,
      details,
    }
  }

  // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
  return {
    success: results.internal.webhook.success,
    name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ API',
    message: results.internal.webhook.success
      ? 'API –ù–µ–π—Ä–æ–§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω'
      : '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é API –ù–µ–π—Ä–æ–§–æ—Ç–æ',
    category: TestCategory.Api,
    details: results,
  }
}
