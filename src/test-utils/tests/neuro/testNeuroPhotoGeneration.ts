import path from 'path'
import { TelegramId } from '@/interfaces/telegram.interface'
import { logger } from '@/utils/logger'
import { API_URL } from '@/config'
import { processApiResponse } from '@/helpers/processApiResponse'
import { replicate } from '@/core/replicate'
import { saveFileLocally } from '@/helpers'
import dotenv from 'dotenv'

dotenv.config()

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 */
async function testGenerateNeuroPhoto(
  prompt: string,
  model_url: string,
  numImages: number,
  telegram_id: TelegramId
): Promise<{ success: boolean; urls?: string[]; error?: string }> {
  const generatedUrls: string[] = []

  logger.info({
    message: 'üöÄ [TEST] –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Neurophoto',
    description: 'Starting test NeuroPhoto generation',
    prompt: prompt.substring(0, 50) + '...',
    model_url,
    numImages,
    telegram_id,
  })

  try {
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ numImages –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const validNumImages = numImages && numImages > 0 ? numImages : 1

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (let i = 0; i < validNumImages; i++) {
      console.log(`üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}/${validNumImages}...`)

      try {
        const aspect_ratio = '1:1'

        logger.info({
          message: 'üé® [TEST] –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: 'Starting test image generation',
          telegram_id,
          prompt: prompt.substring(0, 50) + '...',
          model_url,
        })

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
        const input = {
          prompt: `${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
          negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
          num_inference_steps: 40,
          guidance_scale: 3,
          lora_scale: 1,
          megapixels: '1',
          output_quality: 80,
          prompt_strength: 0.8,
          extra_lora_scale: 1,
          go_fast: false,
          width: 1024,
          height: 1024,
          sampler: 'flowmatch',
          num_outputs: 1,
          aspect_ratio,
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        const output = await replicate.run(model_url as `${string}/${string}`, {
          input,
        })

        const imageUrl = await processApiResponse(output)

        if (!imageUrl) {
          throw new Error('Image generation failed')
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        const localPath = await saveFileLocally(
          telegram_id,
          imageUrl,
          'neuro-photo',
          '.jpeg'
        )

        logger.info({
          message: '‚úÖ [TEST] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
          description: 'Image successfully generated (test)',
          imageUrl,
          localPath,
        })

        const publicUrl = `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
          localPath.toString()
        )}`
        generatedUrls.push(publicUrl)

        console.log(
          `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${publicUrl}`
        )
      } catch (genError) {
        logger.error({
          message: '‚ùå [TEST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: 'Error generating image (test)',
          error: genError instanceof Error ? genError.message : 'Unknown error',
          prompt: prompt.substring(0, 50) + '...',
          telegram_id,
          index: i,
        })

        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}: ${genError instanceof Error ? genError.message : 'Unknown error'}`
        )
      }
    }

    if (generatedUrls.length === 0) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      }
    }

    logger.info({
      message: 'üéâ [TEST] –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
      description: 'All generation tasks successfully completed (test)',
      urlsCount: generatedUrls.length,
      telegram_id,
    })

    return {
      success: true,
      urls: generatedUrls,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå [TEST] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Critical error during test neurophoto generation',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id,
    })

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
export async function runTest() {
  const TEST_TELEGRAM_ID = process.env.TEST_TELEGRAM_ID || '12345678'

  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤...')

  // URL –º–æ–¥–µ–ª–∏ –Ω–∞ Replicate
  const MODEL_URL =
    'ghashtag/neuro_coder_flux-dev-lora:5ff9ea5918427540563f09940bf95d6efc16b8ce9600e82bb17c2b188384e355'

  const gqPrompt =
    'NEUROCODER professional portrait photograph of a stylish man, high fashion GQ magazine cover, close-up face, professional studio lighting, sharp facial features, portrait orientation, 8k, high resolution, perfect details, fashion photography, professional retouching, cinematic lighting, dramatic shadows, professional DSLR'

  const result = await testGenerateNeuroPhoto(
    gqPrompt,
    MODEL_URL,
    1, // numImages
    TEST_TELEGRAM_ID
  )

  if (result.success) {
    console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!')
    console.log(`üì∑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${result.urls?.length}`)
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É uploads –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.')

    if (result.urls) {
      console.log('\nüì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')
      result.urls.forEach((url, index) => {
        console.log(`${index + 1}. ${url}`)
      })
    }
  } else {
    console.error(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${result.error}`)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error)
  process.exit(1)
})
