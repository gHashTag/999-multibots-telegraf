/**
 * –¢–µ—Å—Ç –¥–ª—è NeuroPhoto 1 —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
 */

import { Telegraf } from 'telegraf'
import * as dotenv from 'dotenv'
import { generateNeuroPhotoDirect } from '@/services/generateNeuroPhotoDirect'
import { ModeEnum } from '@/interfaces/modes'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import fs from 'fs'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.test
dotenv.config({ path: '.env.test' })

// ID –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
const TELEGRAM_GROUP_ID = process.env.TEST_GROUP_ID || '@neuro_blogger_pulse'

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN_TEST_1

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const TEST_USER = {
  telegram_id: process.env.TELEGRAM_ID_FOR_TESTS || '144022504',
  username: 'test_user',
}

// –ò–º—è –±–æ—Ç–∞
const BOT_NAME = 'neuro_blogger_bot'

// URL –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Replicate
const MODEL_URL =
  process.env.NEURO_PHOTO_MODEL ||
  'ghashtag/neuro_coder_flux-dev-lora:5ff9ea5918427540563f09940bf95d6efc16b8ce9600e82bb17c2b188384e355'

// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ GQ
const PROFESSIONAL_PROMPT = `NEUROCODER professional portrait photograph of a confident businessman with thoughtful expression, in elegant tailored formal suit with perfect fit, satin tie, classic pocket square, GQ magazine style editorial, close-up shot, perfect facial features, strong masculine jawline, professional haircut, studio lighting with three-point setup, clean neutral backdrop, blue dramatic background, immaculate grooming, corporate headshot with personality, photorealistic details on skin texture, facial expression conveying leadership, photorealistic, cinematic lighting, ethereal light, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, rich colors, masterpiece, best quality, HDR, UHD, unreal engine, representative, beautiful face, rich in details, high quality, gorgeous, glamorous, 8k, super detail, gorgeous light and shadow, detailed decoration, detailed lines, professional photograph, perfect composition`

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const LOG_DIR = path.join(__dirname, 'logs')
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥-—Ñ–∞–π–ª
function writeToLogFile(data: any, prefix: string = 'api-response') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const logFilePath = path.join(LOG_DIR, `${prefix}-${timestamp}.json`)
  fs.writeFileSync(logFilePath, JSON.stringify(data, null, 2))
  console.log(`üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥: ${logFilePath}`)
  return logFilePath
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è NeuroPhoto 1
async function testNeuroPhoto1() {
  // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
  const startTime = Date.now()

  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ NeuroPhoto 1 —Å —Ä–µ–∞–ª—å–Ω—ã–º API')
  console.log(`üë• –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${TELEGRAM_GROUP_ID}`)
  console.log(`ü§ñ –ë–æ—Ç: ${BOT_NAME}`)
  console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TEST_USER.telegram_id}`)
  console.log(`üîó –ú–æ–¥–µ–ª—å: ${MODEL_URL}`)

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!BOT_TOKEN) {
      throw new Error('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.test')
    }

    const bot = new Telegraf(BOT_TOKEN)

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    await bot.telegram.sendMessage(
      TELEGRAM_GROUP_ID,
      `üöÄ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NeuroPhoto 1 (GQ-–ø–æ—Ä—Ç—Ä–µ—Ç)*\n\n–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \`${TEST_USER.telegram_id}\`\n–ë–æ—Ç: ${BOT_NAME}\n–ú–æ–¥–µ–ª—å: \`${MODEL_URL.slice(0, 30)}...\`\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API...`,
      { parse_mode: 'Markdown' }
    )
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞')

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    await bot.telegram.sendMessage(
      TELEGRAM_GROUP_ID,
      `üìù *–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GQ-–ø–æ—Ä—Ç—Ä–µ—Ç–∞:*\n\n\`\`\`\n${PROFESSIONAL_PROMPT}\n\`\`\``,
      { parse_mode: 'Markdown' }
    )
    console.log('üìù –ü—Ä–æ–º–ø—Ç:', PROFESSIONAL_PROMPT.substring(0, 100) + '...')

    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ generateNeuroPhotoDirect
    const mockContext: Partial<MyContext> = {
      from: {
        id: Number(TEST_USER.telegram_id),
        username: TEST_USER.username,
        is_bot: false,
        first_name: 'Test User',
      },
      chat: {
        id: Number(TEST_USER.telegram_id),
        type: 'private',
        first_name: 'Test',
        username: TEST_USER.username,
      },
      reply: async text => {
        console.log(`üí¨ [–ë–æ—Ç -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]: ${text}`)
        // –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await bot.telegram.sendMessage(
          TELEGRAM_GROUP_ID,
          `üí¨ [–ë–æ—Ç -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]: ${text}`
        )
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∏–ø—É
        return {} as any
      },
      session: {
        email: 'test@example.com',
        selectedModel: MODEL_URL,
        prompt: PROFESSIONAL_PROMPT,
        selectedSize: '1:1',
        userModel: {
          model_name: 'GQ Portrait',
          trigger_word: 'NEUROCODER',
          model_url: MODEL_URL as `${string}/${string}:${string}`,
          model_key: MODEL_URL as `${string}/${string}:${string}`,
        },
        numImages: 1,
        telegram_id: TEST_USER.telegram_id,
        mode: ModeEnum.NeuroPhoto,
        attempts: 0,
        videoModel: '',
        imageUrl: '',
        videoUrl: '',
        audioUrl: '',
        amount: 0,
        subscription: '',
        images: [],
        modelName: 'GQ Portrait',
        targetUserId: 0,
        username: TEST_USER.username,
        triggerWord: '',
        steps: 1,
        inviter: '',
        inviteCode: '',
        invoiceURL: '',
        buttons: [],
        selectedPayment: {
          amount: 0,
          stars: 0,
        },
      },
      attempts: 0,
      amount: 0,
    }

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    console.log(
      '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ generateNeuroPhotoDirect...'
    )
    await bot.telegram.sendMessage(
      TELEGRAM_GROUP_ID,
      '‚è≥ *–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API...*',
      { parse_mode: 'Markdown' }
    )

    // 5. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateNeuroPhotoDirect —Å —Ä–µ–∞–ª—å–Ω—ã–º API')
    const generationResult = await generateNeuroPhotoDirect(
      PROFESSIONAL_PROMPT,
      MODEL_URL,
      1, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      TEST_USER.telegram_id,
      mockContext as MyContext,
      BOT_NAME
    )

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:')
    console.log('–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof generationResult)
    console.log('–û–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', JSON.stringify(generationResult, null, 2))
    console.log('–£—Å–ø–µ—Ö:', generationResult?.success)
    console.log('–î–∞–Ω–Ω—ã–µ:', generationResult?.data)
    console.log('URLs:', generationResult?.urls)

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const logFilePath = writeToLogFile(generationResult, 'generation-result')

    // –û—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–µ–±–∞–≥–∞
    await bot.telegram.sendMessage(
      TELEGRAM_GROUP_ID,
      `üìä *–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–≥: \`${logFilePath}\`\n–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: \`${typeof generationResult}\`\n–£—Å–ø–µ—Ö: \`${generationResult?.success}\`\n–î–∞–Ω–Ω—ã–µ: \`${generationResult?.data}\`\nURLs: \`${JSON.stringify(generationResult?.urls)}\``,
      { parse_mode: 'Markdown' }
    )

    // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!generationResult || !generationResult.success) {
      const errorMessage =
        generationResult?.data || 'API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', errorMessage)

      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n\n\`${errorMessage}\`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ API –∫–ª—é—á–∏.`,
        { parse_mode: 'Markdown' }
      )

      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${errorMessage}`)
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    if (!generationResult.urls || generationResult.urls.length === 0) {
      console.error('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
      logger.error({
        message: '‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: 'No URLs returned in API response',
        result: JSON.stringify(generationResult),
      })

      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        '‚ùå *API –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API.',
        { parse_mode: 'Markdown' }
      )

      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    }

    console.log('üîó –ü–æ–ª—É—á–µ–Ω—ã URLs:', generationResult.urls)
    logger.info({
      message: 'üîó –ü–æ–ª—É—á–µ–Ω—ã URLs',
      urls: generationResult.urls,
    })

    // 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏—Ö URL
    let atleastOneImageSent = false // –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    for (const imageUrl of generationResult.urls) {
      try {
        console.log(
          `üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL: ${imageUrl.substring(0, 50)}...`
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
        await bot.telegram.sendPhoto(
          TELEGRAM_GROUP_ID,
          { url: imageUrl },
          {
            caption: `üñºÔ∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\nüìù *–ü—Ä–æ–º–ø—Ç:* \`${PROFESSIONAL_PROMPT.substring(0, 200)}...\`\n\n‚úÖ *–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\nURL: \`${imageUrl}\``,
            parse_mode: 'Markdown',
          }
        )
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É')
        atleastOneImageSent = true // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      } catch (sendError) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL ${imageUrl}: ${
            sendError instanceof Error ? sendError.message : sendError
          }`
        )

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL
        try {
          await bot.telegram.sendMessage(
            TELEGRAM_GROUP_ID,
            `‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:*\n\`${
              sendError instanceof Error ? sendError.message : sendError
            }\`\n\nüìù *–ü—Ä–æ–º–ø—Ç:* \`${PROFESSIONAL_PROMPT.substring(0, 200)}...\`\n\n‚ùå *–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏!*\n\n*URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* \`${imageUrl}\``,
            { parse_mode: 'Markdown' }
          )
        } catch (msgError) {
          console.error(
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL: ${
              msgError instanceof Error ? msgError.message : msgError
            }`
          )
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!atleastOneImageSent) {
      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        `‚ùå *–¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!* –ù–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.`,
        { parse_mode: 'Markdown' }
      )
      console.error(
        '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ù–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.'
      )
      throw new Error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram'
      )
    }

    // 10. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–µ
    await bot.telegram.sendMessage(
      TELEGRAM_GROUP_ID,
      `üèÅ *–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∞ NeuroPhoto 1 (GQ-–ø–æ—Ä—Ç—Ä–µ—Ç)*\n\n‚úÖ *–°—Ç–∞—Ç—É—Å:* –£—Å–ø–µ—à–Ω–æ\nüìä *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:* ${
        generationResult.urls.length
      } –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\nüì§ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:* ${atleastOneImageSent ? '–î–∞' : '–ù–µ—Ç'}\n‚è±Ô∏è *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${
        (Date.now() - startTime) / 1000
      } —Å–µ–∫—É–Ω–¥\n\nüìã *–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:*\n- –ú–æ–¥–µ–ª—å: \`${MODEL_URL.substring(
        0,
        50
      )}...\`\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \`${
        TEST_USER.telegram_id
      }\`\n- –°–µ—Ä–≤–µ—Ä: \`${process.env.NODE_ENV}\``,
      { parse_mode: 'Markdown' }
    )

    console.log('üèÅ –¢–µ—Å—Ç NeuroPhoto 1 (GQ-–ø–æ—Ä—Ç—Ä–µ—Ç) –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ NeuroPhoto 1:', error)
    return false
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testNeuroPhoto1()
    .then(success => {
      console.log(
        `\n${success ? '‚úÖ –¢–µ—Å—Ç NeuroPhoto 1 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω' : '‚ùå –¢–µ—Å—Ç NeuroPhoto 1 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π'}`
      )
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      setTimeout(() => process.exit(success ? 0 : 1), 1000)
    })
    .catch(error => {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}
