/**
 * –¢–µ—Å—Ç –¥–ª—è NeuroPhoto 1 —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
 */

import { Telegraf } from 'telegraf'
import dotenv from 'dotenv'
import path from 'path'
import fs from 'fs'
import { generateNeuroPhotoDirect } from '@/services/generateNeuroPhotoDirect'
import { generateGptPrompt } from './gptPromptGenerator'
import { ModeEnum } from '@/interfaces/modes'
import { MyContext } from '@/interfaces'
import { TestResult } from '@/test-utils/types'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({
  path: process.env.NODE_ENV === 'test' ? '.env.test' : '.env',
})

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ADMIN_TELEGRAM_ID
if (!process.env.ADMIN_TELEGRAM_ID) {
  throw new Error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ADMIN_TELEGRAM_ID –≤ .env —Ñ–∞–π–ª–µ')
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const TELEGRAM_GROUP_ID =
  process.env.TELEGRAM_GROUP_ID || '@neuro_blogger_pulse' // ID —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '' // –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
const TEST_USER = {
  telegram_id: process.env.ADMIN_TELEGRAM_ID,
  username: 'test_user',
  is_ru: true,
} // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
const LOG_DIR = path.join(__dirname, 'logs')

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true })
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
const TEST_TIMEOUT = 180000 // 180 —Å–µ–∫—É–Ω–¥ (3 –º–∏–Ω—É—Ç—ã) –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

// Options for neuro photo generation with bypass for testing
const TEST_OPTIONS = {
  prompt: `NEUROCODER Ultra-realistic fashion editorial portrait of a striking bald male model with sharp cheekbones, piercing blue eyes, and a strong jawline. He's wearing an extravagant Balenciaga oversized structured coat in metallic silver over a Tom Ford black turtleneck. The model has perfect skin texture with visible pores and subtle stubble. Background features abstract color blocks in vibrant teal and burnt orange. Studio lighting creates dramatic shadows across his face, emphasizing the elegant bone structure. Shot on Hasselblad medium format camera with 100MP resolution, shallow depth of field with the model in perfect focus against the softly blurred background. The styling includes minimal avant-garde silver accessories from Cartier, creating a futuristic high-fashion aesthetic. The composition follows golden ratio principles with the model positioned slightly off-center. Color grading has rich, saturated tones with slight contrast enhancement typical of high-end magazine spreads. The overall mood is sophisticated, powerful, and artistically compelling. Hyperrealistic rendering with meticulous attention to textile textures, skin details, and subtle lighting reflections. 8K resolution, magazine-quality fashion photograph suitable for Vogue Homme or GQ editorial spread. Inspired by the photographic styles of Steven Klein, David Sims, Peter Lindbergh, Nick Knight, and Tim Walker.`,
  model_url:
    'ghashtag/neuro_coder_flux-dev-lora:5ff9ea5918427540563f09940bf95d6efc16b8ce9600e82bb17c2b188384e355',
  numImages: 1,
  telegram_id: TEST_USER.telegram_id,
  username: TEST_USER.username,
  is_ru: TEST_USER.is_ru,
  bot_name: 'neuro_blogger_bot',
  bypass_payment_check: true, // Bypass payment check for testing purposes
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –¥–µ–±–∞–≥–∞
 * @param data –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 * @param prefix –ü—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 */
function writeToLogFile(data: any, prefix: string): void {
  try {
    const timestamp = new Date().toISOString().replace(/:/g, '-')
    const logPath = path.join(LOG_DIR, `${prefix}-${timestamp}.json`)
    fs.writeFileSync(logPath, JSON.stringify(data, null, 2))
    console.log(`üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª: ${logPath}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', error)
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export async function testNeuroPhoto1(): Promise<boolean> {
  console.log(
    'üöÄ Starting NeuroPhoto 1 test (Man portrait with OpenAI prompt)...'
  )

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
  const timeoutPromise = new Promise<boolean>((_, reject) => {
    setTimeout(() => {
      reject(new Error('–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (3 –º–∏–Ω—É—Ç—ã)'))
    }, TEST_TIMEOUT)
  })

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    return Promise.race([testNeuroPhotoInternal(), timeoutPromise])
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error)
    return false
  }
}

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
 */
async function testNeuroPhotoInternal(): Promise<boolean> {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const startTime = Date.now()

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!BOT_TOKEN) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ'
      )
      return false
    }

    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã')

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    const bot = new Telegraf(BOT_TOKEN)
    console.log('‚úÖ –ë–æ—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try {
      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        `üöÄ *–°–æ–∑–¥–∞–µ–º —Ñ—ç—à–Ω-–ø–æ—Ä—Ç—Ä–µ—Ç –º—É–∂—á–∏–Ω—ã*\n\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è`,
        { parse_mode: 'Markdown' }
      )

      console.log('‚úÖ Initial message sent to Telegram group')
    } catch (telegramError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:',
        telegramError
      )
      console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram')
    }

    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT
    try {
      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        `üé® *–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ—ç—à–Ω-–ø–æ—Ä—Ç—Ä–µ—Ç–∞ –º—É–∂—á–∏–Ω—ã...*`,
        { parse_mode: 'Markdown' }
      )
    } catch (telegramError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:',
        telegramError
      )
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –¥–ª–∏–Ω–Ω—ã–π, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT
    console.log('üîç Generating prompt using OpenAI...')
    const gptPrompt = await generateGptPrompt()

    console.log(
      '‚úÖ OpenAI prompt received:',
      gptPrompt.substring(0, 100) + '...'
    )

    // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üñºÔ∏è Launching image generation...')
    try {
      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        'üñºÔ∏è *–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—ç—à–Ω-–ø–æ—Ä—Ç—Ä–µ—Ç –º—É–∂—á–∏–Ω—ã...*\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.',
        { parse_mode: 'Markdown' }
      )
    } catch (telegramError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:',
        telegramError
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegraf –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const mockContext: Partial<MyContext> = {
      from: {
        id: Number(TEST_USER.telegram_id),
        username: 'test_user',
        is_bot: false,
        first_name: 'Test User',
      },
      chat: {
        id: Number(TEST_USER.telegram_id),
        type: 'private',
        first_name: 'Test',
        username: 'test_user',
      },
      session: {
        mode: ModeEnum.NeuroPhoto,
        telegram_id: TEST_USER.telegram_id,
        bypass_payment_check: true, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        // –ü—Ä–æ—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏
      } as any,
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const generationResult = await generateNeuroPhotoDirect(
      gptPrompt,
      TEST_OPTIONS.model_url,
      TEST_OPTIONS.numImages,
      TEST_USER.telegram_id,
      mockContext as MyContext,
      TEST_OPTIONS.bot_name,
      { disable_telegram_sending: false }
    )

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    console.log('‚úÖ Generation result:', generationResult)

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    writeToLogFile(generationResult, 'generation-result')

    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç null –∏–ª–∏ undefined, —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
    if (!generationResult) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–≤–µ–Ω null')
      try {
        await bot.telegram.sendMessage(
          TELEGRAM_GROUP_ID,
          `‚ùå *–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–≤–µ–Ω null*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
          { parse_mode: 'Markdown' }
        )
      } catch (sendError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError)
      }
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URLs –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if (!generationResult.urls || generationResult.urls.length === 0) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω–æ URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!')
      try {
        await bot.telegram.sendMessage(
          TELEGRAM_GROUP_ID,
          `‚ùå *–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω - API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—Ö, –Ω–æ –±–µ–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
          { parse_mode: 'Markdown' }
        )
      } catch (sendError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError)
      }
      return false // –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
    }

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let atleastOneImageSent = false

    // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram –≥—Ä—É–ø–ø—É
    console.log(`‚úÖ Received ${generationResult.urls.length} images`)

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (const imageUrl of generationResult.urls) {
      try {
        console.log(`üîó Sending image: ${imageUrl}`)

        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ (–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        await bot.telegram.sendPhoto(
          TELEGRAM_GROUP_ID,
          { url: imageUrl },
          {
            caption: `üåü *–§—ç—à–Ω-–ø–æ—Ä—Ç—Ä–µ—Ç –º—É–∂—á–∏–Ω—ã*\n\nüì∏ –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é NeuroPhoto\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –≤—ã—à–µ –¥–ª—è —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ`,
            parse_mode: 'Markdown',
          }
        )

        console.log('‚úÖ Image successfully sent as photo')
        atleastOneImageSent = true
      } catch (sendError) {
        console.error('‚ùå Error sending image as photo:', sendError)

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL
        try {
          await bot.telegram.sendMessage(
            TELEGRAM_GROUP_ID,
            `‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*\n\n*URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* \`${imageUrl}\``,
            { parse_mode: 'Markdown' }
          )
          console.log('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
          atleastOneImageSent = true // URL –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–º
        } catch (messageError) {
          console.error(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:',
            messageError
          )
        }
      }
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!atleastOneImageSent) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      )
      try {
        await bot.telegram.sendMessage(
          TELEGRAM_GROUP_ID,
          `‚ùå *–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
          { parse_mode: 'Markdown' }
        )
      } catch (sendError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError)
      }
      return false // –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
    }

    // 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    const endTime = Date.now()
    const executionTime = ((endTime - startTime) / 1000).toFixed(2)

    try {
      await bot.telegram.sendMessage(
        TELEGRAM_GROUP_ID,
        `‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\n‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${executionTime} —Å–µ–∫`,
        { parse_mode: 'Markdown' }
      )
    } catch (sendError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', sendError)
    }

    console.log('üèÅ –¢–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return true
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error)
    return false
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
export async function runNeuroPhotoOneTest(): Promise<TestResult> {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞')

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutDuration = 180000 // 3 –º–∏–Ω—É—Ç—ã
    const testPromise = testNeuroPhotoInternal()

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    const timeoutPromise = new Promise<boolean>((_, reject) => {
      setTimeout(() => {
        reject(new Error('‚ùå –¢–µ—Å—Ç –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (3 –º–∏–Ω—É—Ç—ã)'))
      }, timeoutDuration)
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const result = await Promise.race([testPromise, timeoutPromise])

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
    if (!result) {
      return {
        success: false,
        message:
          '‚ùå –¢–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
        name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç',
      }
    }

    return {
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
      name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç',
    }
  } catch (error) {
    return {
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error instanceof Error ? error.message : error}`,
      name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ—ç—à–Ω-—Ñ–æ—Ç–æ—Å–µ—Ç',
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runNeuroPhotoOneTest()
    .then(result => {
      console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.message}`)
      process.exit(result.success ? 0 : 1) // –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    })
    .catch(error => {
      console.error('‚ùå Unhandled error:', error)
      process.exit(1) // –ö–æ–¥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
    })
}
