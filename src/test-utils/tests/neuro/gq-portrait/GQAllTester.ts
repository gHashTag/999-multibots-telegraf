import { testGQPortrait } from './testNeuroPhotoGQ'
import { testGQBusinessPortrait } from './testNeuroPhotoGQBusiness'
import { testGQFashionPortrait } from './testNeuroPhotoGQFashion'
import { testGQArtisticPortrait } from './testNeuroPhotoGQArtistic'
import { testNeuroPhotoGQBatch } from './testNeuroPhotoGQBatch'
import dotenv from 'dotenv'
import path from 'path'
import fs from 'fs'
import { logger } from '../../../../lib/logger'
import { TestResult } from '../../../types'

dotenv.config()

// –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (true - –∏–º–∏—Ç–∞—Ü–∏—è API, false - —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API)
const TEST_MODE = process.env.TEST_MODE === 'true' || false

// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const DELAY_BETWEEN_TESTS = 2000

// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ NeuroPhoto GQ Portrait
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ GQ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */
async function runAllGQTests(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤')

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const TEST_TELEGRAM_ID = process.env.TEST_TELEGRAM_ID || '144022504'
    if (TEST_MODE) {
      logger.info(
        '‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)'
      )

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const uploadsDir = path.join(
        process.cwd(),
        'src',
        'uploads',
        TEST_TELEGRAM_ID,
        'neuro-photo'
      )
      try {
        if (!fs.existsSync(uploadsDir)) {
          fs.mkdirSync(uploadsDir, { recursive: true })
        }
        logger.info(
          `‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: ${uploadsDir}`
        )
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error)
      }
    }

    // –ë–∞–∑–æ–≤—ã–π GQ –ø–æ—Ä—Ç—Ä–µ—Ç
    logger.info('\nüìå [1/5] –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ GQ Portrait')
    await testGQPortrait()
    logger.info('‚úÖ [1/5] –¢–µ—Å—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    logger.info(`‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (${DELAY_BETWEEN_TESTS}ms)`)
    await sleep(DELAY_BETWEEN_TESTS)

    // –ë–∏–∑–Ω–µ—Å GQ –ø–æ—Ä—Ç—Ä–µ—Ç
    logger.info('\nüìå [2/5] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Business GQ Portrait')
    await testGQBusinessPortrait()
    logger.info('‚úÖ [2/5] –¢–µ—Å—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å GQ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    logger.info(`‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (${DELAY_BETWEEN_TESTS}ms)`)
    await sleep(DELAY_BETWEEN_TESTS)

    // –ú–æ–¥–Ω—ã–π GQ –ø–æ—Ä—Ç—Ä–µ—Ç
    logger.info('\nüìå [3/5] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Fashion GQ Portrait')
    await testGQFashionPortrait()
    logger.info('‚úÖ [3/5] –¢–µ—Å—Ç –¥–ª—è –º–æ–¥–Ω–æ–≥–æ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    logger.info(`‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (${DELAY_BETWEEN_TESTS}ms)`)
    await sleep(DELAY_BETWEEN_TESTS)

    // –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π GQ –ø–æ—Ä—Ç—Ä–µ—Ç
    logger.info('\nüìå [4/5] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Artistic GQ Portrait')
    await testGQArtisticPortrait()
    logger.info('‚úÖ [4/5] –¢–µ—Å—Ç –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    logger.info(`‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (${DELAY_BETWEEN_TESTS}ms)`)
    await sleep(DELAY_BETWEEN_TESTS)

    // –ü–∞–∫–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏)
    logger.info('\nüìå [5/5] –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ GQ Portrait Batch')
    await testNeuroPhotoGQBatch()
    logger.info('‚úÖ [5/5] –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω')

    logger.info('üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')

    return {
      success: true,
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
      name: 'GQ Tests Suite',
    }
  } catch (error: any) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤: ${error.message}`)
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤: ${error.message}`,
      name: 'GQ Tests Suite',
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllGQTests().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ GQ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:', error)
    process.exit(1)
  })
}

export { runAllGQTests }
