import path from 'path'
import { logger } from '@/utils/logger'
import { ContentModeEnum } from '@/types/modes'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const mockEnv = {
  INNGEST_EVENT_KEY: 'test-key',
  NODE_ENV: 'test',
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
Object.keys(mockEnv).forEach(key => {
  process.env[key] = mockEnv[key as keyof typeof mockEnv]
})

// –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const mocks = {
  // –ú–æ–∫ –¥–ª—è getUserByTelegramId
  getUserByTelegramId: async () => ({
    id: 1,
    telegram_id: '144022504',
    level: 1,
    bot_name: 'test_bot',
  }),
  updateUserLevelPlusOne: async () => true,
  getAspectRatio: async () => '1:1',
  getFineTuneIdByTelegramId: async () => 'test-finetune-id',
  saveNeuroPhotoPrompt: async () => ({
    id: 'test-prompt-id',
    telegram_id: '144022504',
    prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
    mode: ContentModeEnum.PHOTO,
    status: 'processing',
  }),

  // –ú–æ–∫ –¥–ª—è getBotByName
  getBotByName: () => ({
    bot: {
      telegram: {
        sendMessage: async (_chatId: string, _text: string) => true,
      },
    },
  }),

  // –ú–æ–∫ –¥–ª—è fetch
  fetch: async () => ({
    ok: true,
    json: async () => ({
      id: 'test-task-id-1234',
      status: 'processing',
    }),
    text: async () => 'OK',
  }),
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
const originalFetch = global.fetch
// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch
;(global as any).fetch = mocks.fetch

// –¢–∏–ø—ã –¥–ª—è –º–æ–∫–æ–≤ –±–µ–∑ finetune_id
interface MocksWithoutFinetuneType {
  getUserByTelegramId: typeof mocks.getUserByTelegramId
  updateUserLevelPlusOne: typeof mocks.updateUserLevelPlusOne
  getAspectRatio: typeof mocks.getAspectRatio
  getFineTuneIdByTelegramId: () => Promise<null>
  saveNeuroPhotoPrompt: typeof mocks.saveNeuroPhotoPrompt
  getBotByName: typeof mocks.getBotByName
  fetch: (
    url: string,
    options: any
  ) => Promise<{
    ok: boolean
    json: () => Promise<any>
    text: () => Promise<string>
  }>
  lastRequestUrl: string | null
  lastRequestOptions: any | null
}

const mocksWithoutFinetune: MocksWithoutFinetuneType = {
  ...mocks,
  getFineTuneIdByTelegramId: async () => null,
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ endpoint
  fetch: async (url: string, options: any) => {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∑–∞–ø—Ä–æ—Å–∞',
      description: 'Checking request URL',
      url,
      options: JSON.stringify(options),
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    mocksWithoutFinetune.lastRequestUrl = url
    mocksWithoutFinetune.lastRequestOptions = options

    return {
      ok: true,
      json: async () => ({
        id: 'test-task-id-5678',
        status: 'processing',
      }),
      text: async () => 'OK',
    }
  },
  lastRequestUrl: null,
  lastRequestOptions: null,
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
async function testNeuroPhotoV2() {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
    description: 'Starting neuro photo V2 test',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —à–∞–≥–∞ Inngest
    const step = {
      run: async (name: string, fn: () => Promise<any>) => {
        logger.info({
          message: `üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${name}`,
          description: `Executing step: ${name}`,
        })
        return await fn()
      },
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Inngest
    const event = {
      data: {
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 - –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ',
        num_images: 1,
        telegram_id: '144022504',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      },
    }

    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    const testContext = { step, event }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info({
      message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Checking user existence',
    })
    const user = await mocks.getUserByTelegramId()

    logger.info({
      message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Calculating cost',
    })
    const costPerImage = 15 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

    logger.info({
      message: 'üíµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Processing payment',
    })

    logger.info({
      message: 'üìê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Getting generation parameters',
    })
    const aspectRatio = await mocks.getAspectRatio()
    const finetuneId = await mocks.getFineTuneIdByTelegramId()

    logger.info({
      message: 'üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      description: 'Calculating image dimensions',
    })
    const dimensions = { width: 1024, height: 1024 }

    logger.info({
      message: 'üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
      description: 'Sending generation request',
    })
    const response = await mocks.fetch()
    const data = await response.json()

    logger.info({
      message: 'üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
      description: 'Saving task',
    })
    const savedTask = await mocks.saveNeuroPhotoPrompt()

    logger.info({
      message: 'üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      description: 'Sending message to user',
    })
    await mocks
      .getBotByName()
      .bot.telegram.sendMessage('144022504', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    const taskResult = {
      taskId: data.id,
      status: data.status,
      prompt: testContext.event.data.prompt,
      savedTask,
    }

    const result = {
      success: true,
      user,
      aspectRatio,
      finetuneId,
      dimensions,
      costPerImage,
      tasks: [taskResult],
    }

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      description: 'Neuro photo V2 test completed successfully',
      result,
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      result,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
      description: 'Error in neuro photo V2 test',
      error: error instanceof Error ? error.message : String(error),
    })
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è public API –±–µ–∑ finetune_id
 */
async function testNeuroPhotoV2WithoutFinetune() {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id',
    description: 'Starting neuro photo V2 test without finetune_id',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —à–∞–≥–∞ Inngest
    const step = {
      run: async (name: string, fn: () => Promise<any>) => {
        logger.info({
          message: `üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${name}`,
          description: `Executing step: ${name}`,
        })
        return await fn()
      },
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Inngest
    const event = {
      data: {
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id',
        num_images: 1,
        telegram_id: '144022504',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      },
    }

    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ
    const testContext = { step, event }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch —Å –Ω–∞—à–∏–º —Ç–µ—Å—Ç–æ–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    ;(global as any).fetch = mocksWithoutFinetune.fetch

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info({
      message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Checking user existence',
    })
    const user = await mocksWithoutFinetune.getUserByTelegramId()

    logger.info({
      message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Calculating cost',
    })
    const costPerImage = 15 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

    logger.info({
      message: 'üíµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Processing payment',
    })

    logger.info({
      message: 'üìê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Getting generation parameters',
    })
    const aspectRatio = await mocksWithoutFinetune.getAspectRatio()
    const finetuneId = await mocksWithoutFinetune.getFineTuneIdByTelegramId()

    logger.info({
      message: 'üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      description: 'Calculating image dimensions',
    })
    const dimensions = { width: 1024, height: 1024 }

    logger.info({
      message: 'üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
      description: 'Sending generation request',
    })

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
    const API_URL = 'https://example.com/api/v2/generate'

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const response = await mocksWithoutFinetune.fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: event.data.prompt,
        aspect_ratio: aspectRatio,
        num_images: event.data.num_images,
      }),
    })

    const data = await response.json()

    logger.info({
      message: 'üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
      description: 'Saving task',
    })
    const savedTask = await mocksWithoutFinetune.saveNeuroPhotoPrompt()

    logger.info({
      message: 'üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      description: 'Sending message to user',
    })
    await mocksWithoutFinetune
      .getBotByName()
      .bot.telegram.sendMessage('144022504', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
    const expectedUrl = API_URL
    const urlMatches = mocksWithoutFinetune.lastRequestUrl === expectedUrl

    if (!urlMatches) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedUrl}, –ø–æ–ª—É—á–µ–Ω–æ ${mocksWithoutFinetune.lastRequestUrl}`
      )
    }

    const requestParams = mocksWithoutFinetune.lastRequestOptions?.body
      ? JSON.parse(mocksWithoutFinetune.lastRequestOptions.body)
      : {}

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    const hasPrompt = 'prompt' in requestParams
    const hasAspectRatio = 'aspect_ratio' in requestParams
    const hasNumImages = 'num_images' in requestParams

    if (!hasPrompt || !hasAspectRatio || !hasNumImages) {
      throw new Error('–í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    const taskResult = {
      taskId: data.id,
      status: data.status,
      prompt: testContext.event.data.prompt,
      savedTask,
      urlMatches,
      requestParams,
    }

    const result = {
      success: true,
      user,
      aspectRatio,
      finetuneId,
      dimensions,
      costPerImage,
      tasks: [taskResult],
    }

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      description:
        'Neuro photo V2 test without finetune_id completed successfully',
      result,
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      result,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id',
      description: 'Error in neuro photo V2 test without finetune_id',
      error: error instanceof Error ? error.message : String(error),
    })
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –±–µ–∑ finetune_id: ${error instanceof Error ? error.message : String(error)}`,
    }
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch
    ;(global as any).fetch = mocks.fetch
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export async function runTest() {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
    description: 'Starting neuro photo V2 tests',
  })

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testResults = []

    // –¢–µ—Å—Ç —Å finetune_id
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å finetune_id',
      description: 'Starting test with finetune_id',
    })
    const result1 = await testNeuroPhotoV2()
    testResults.push(result1)

    // –¢–µ—Å—Ç –±–µ–∑ finetune_id
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑ finetune_id',
      description: 'Starting test without finetune_id',
    })
    const result2 = await testNeuroPhotoV2WithoutFinetune()
    testResults.push(result2)(
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch
      global as any
    ).fetch = originalFetch

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allSuccessful = testResults.every(r => r.success)

    if (allSuccessful) {
      logger.info({
        message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
        description: 'All neuro photo V2 tests completed successfully',
      })

      return {
        success: true,
        name: 'NeuroPhoto V2 Tests',
        message: '–í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      }
    } else {
      const failedTests = testResults.filter(r => !r.success)
      const errorMessages = failedTests.map(t => t.message).join('\n')

      logger.error({
        message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏',
        description: 'Some neuro photo V2 tests failed',
        errors: errorMessages,
      })

      return {
        success: false,
        name: 'NeuroPhoto V2 Tests',
        message: `–û—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2:\n${errorMessages}`,
      }
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
      description: 'Critical error running neuro photo V2 tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: 'NeuroPhoto V2 Tests',
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  } finally {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    ;(global as any).fetch = originalFetch
  }
}
