import { logger } from '../../../utils/logger'
import {
  testWithCreativePrompt,
  testWithMultipleImages,
  runSystemCheck,
  testWithRealUserAndAdmin,
  NeuroPhotoDirectTestInput,
} from './neuroPhotoDirectUtils'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * @param telegram_id ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
export async function testNeuroPhotoDirect(
  telegram_id?: string
): Promise<boolean> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Starting NeuroPhoto direct generation test',
      admin_telegram_id: telegram_id || 'not provided',
    })

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (telegram_id) {
      process.env.ADMIN_TELEGRAM_ID = telegram_id
      process.env.TEST_TELEGRAM_ID = telegram_id

      logger.info({
        message: `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_TELEGRAM_ID: ${telegram_id}`,
        description: `Set ADMIN_TELEGRAM_ID to: ${telegram_id}`,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    const systemCheck = await runSystemCheck()

    if (!systemCheck.success) {
      logger.error({
        message: '‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: 'System not ready for testing',
        error: systemCheck.error,
      })
      return false
    }

    logger.info({
      message: '‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      description: 'System ready for testing',
    })

    // –¢–µ—Å—Ç —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    const creativeTest = await testWithCreativePrompt()

    if (!creativeTest.success) {
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'Creative prompt test failed',
        error: creativeTest.error,
      })
      return false
    }

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      description: 'Creative prompt test passed',
      details: creativeTest.details,
    })

    // –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const multipleImagesTest = await testWithMultipleImages(2)

    if (!multipleImagesTest.success) {
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'Multiple images test failed',
        error: multipleImagesTest.error,
      })
      return false
    }

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      description: 'Multiple images test passed',
      details: multipleImagesTest.details,
    })

    // –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã
    logger.info({
      message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      description: 'All NeuroPhoto direct generation tests passed',
    })

    return true
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Error during NeuroPhoto direct generation testing',
      error: errorMessage,
    })

    return false
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
 */
export async function runRealApiTest(options: {
  telegram_id: string
  prompt?: string
  numImages?: number
  is_ru?: string
}): Promise<boolean> {
  try {
    const { telegram_id, prompt, numImages, is_ru } = options

    logger.info({
      message:
        'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
      description: 'Running real API test with admin notification',
      telegram_id,
      prompt: prompt?.substring(0, 50) || 'default prompt',
      numImages,
      is_ru,
    })

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    const testInput: NeuroPhotoDirectTestInput = {
      prompt:
        prompt ||
        '—Å—Ç–∏–ª—å–Ω—ã–π –º—É–∂—Å–∫–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
      model_url:
        'ghashtag/neuro_coder_flux-dev-lora:5ff9ea5918427540563f09940bf95d6efc16b8ce9600e82bb17c2b188384e355',
      numImages: numImages || 1,
      telegram_id,
      username: 'test_user',
      is_ru: is_ru || 'true',
      bot_name: process.env.BOT_NAME || 'neuro_blogger_bot',
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API
    const result = await testWithRealUserAndAdmin(testInput)

    if (result.success) {
      logger.info({
        message: '‚úÖ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        description: 'Real API test completed successfully',
        details: result.details,
      })

      return true
    } else {
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
        description: 'Real API test failed',
        error: result.error,
      })

      return false
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API',
      description: 'Critical error in real API test',
      error: errorMessage,
    })

    return false
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ --real-api
  const realApiFlag = args.includes('--real-api')

  if (realApiFlag) {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const telegram_idIndex = args.indexOf('--telegram-id')
    const promptIndex = args.indexOf('--prompt')
    const numImagesIndex = args.indexOf('--num-images')
    const isRuIndex = args.indexOf('--is-ru')

    const telegram_id =
      telegram_idIndex !== -1 && telegram_idIndex + 1 < args.length
        ? args[telegram_idIndex + 1]
        : undefined
    const prompt =
      promptIndex !== -1 && promptIndex + 1 < args.length
        ? args[promptIndex + 1]
        : undefined
    const numImagesStr =
      numImagesIndex !== -1 && numImagesIndex + 1 < args.length
        ? args[numImagesIndex + 1]
        : '1'
    const is_ru =
      isRuIndex !== -1 && isRuIndex + 1 < args.length
        ? args[isRuIndex + 1]
        : 'true'

    if (!telegram_id) {
      console.log(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏'
      )
      console.log(
        '–ü—Ä–∏–º–µ—Ä: node testNeuroPhotoDirect.js --real-api --telegram-id 123456789'
      )
      process.exit(1)
    }

    logger.info({
      message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ NeuroPhoto Direct —Å —Ä–µ–∞–ª—å–Ω—ã–º API –¥–ª—è ID: ${telegram_id}`,
      description: `Running NeuroPhoto Direct test with real API for ID: ${telegram_id}`,
      prompt: prompt ? prompt.substring(0, 30) + '...' : 'Default prompt',
      numImages: numImagesStr,
      is_ru,
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API
    runRealApiTest({
      telegram_id,
      prompt,
      numImages: parseInt(numImagesStr),
      is_ru,
    }).then(success => {
      if (success) {
        console.log('‚úÖ –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
        process.exit(0)
      } else {
        console.log('‚ùå –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
        process.exit(1)
      }
    })
  } else {
    // –¢–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–∫–æ–≤—ã–π API
    const telegram_idIndex = args.indexOf('--telegram-id')
    const telegram_id =
      telegram_idIndex !== -1 && telegram_idIndex + 1 < args.length
        ? args[telegram_idIndex + 1]
        : undefined

    if (!telegram_id) {
      console.log(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏'
      )
      console.log(
        '–ü—Ä–∏–º–µ—Ä: node testNeuroPhotoDirect.js --telegram-id 123456789'
      )
      console.log(
        '–ò–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API: node testNeuroPhotoDirect.js --real-api --telegram-id 123456789'
      )
      process.exit(1)
    }

    logger.info({
      message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ NeuroPhoto Direct —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ ID: ${telegram_id}`,
      description: `Running NeuroPhoto Direct test with results sent to ID: ${telegram_id}`,
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç
    testNeuroPhotoDirect(telegram_id).then(success => {
      if (success) {
        console.log('‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã')
        process.exit(0)
      } else {
        console.log('‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã')
        process.exit(1)
      }
    })
  }
}
