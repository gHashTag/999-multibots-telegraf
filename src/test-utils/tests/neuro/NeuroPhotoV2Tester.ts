import { TestDataFactory } from '../../factories/TestDataFactory'
import { logger } from '@/utils/logger'
import axios from 'axios'
import { InngestFunctionTester } from '@/test-utils/core/InngestFunctionTester'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export interface NeuroPhotoV2TestInput {
  prompt: string
  num_images: number
  telegram_id: string
  is_ru: boolean
  bot_name: string
  username?: string
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export interface NeuroPhotoV2TestOutput {
  success: boolean
  user: any
  aspectRatio?: string
  finetuneId?: string
  dimensions?: { width: number; height: number }
  costPerImage?: number
  tasks?: Array<{
    taskId: string
    status: string
    prompt: string
    savedTask: any
  }>
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
 *
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BFL,
 * –∞ —Ç–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ù–µ–π—Ä–æ–§–æ—Ç–æ V2.
 */
export class NeuroPhotoV2Tester extends InngestFunctionTester<
  NeuroPhotoV2TestInput,
  NeuroPhotoV2TestOutput
> {
  private bflApiKey: string
  private bflWebhookSecret: string
  private apiUrl: string
  private apiEndpoint: string
  private finetunedApiEndpoint: string

  constructor(options: Partial<any> = {}) {
    super('neuro/photo-v2.generate', {
      name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç',
      ...options,
    })

    this.bflApiKey = process.env.BFL_API_KEY || ''
    this.bflWebhookSecret = process.env.BFL_WEBHOOK_SECRET || ''
    this.apiUrl = process.env.API_URL || 'http://localhost:3000'
    this.apiEndpoint = 'https://api.us1.bfl.ai/v1/flux-pro-1.1-ultra'
    this.finetunedApiEndpoint =
      'https://api.us1.bfl.ai/v1/flux-pro-1.1-ultra-finetuned'
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async checkEnvironmentVariables(): Promise<{
    success: boolean
    missingVariables: string[]
    message: string
  }> {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
      description: 'Checking environment variables for NeuroPhoto V2',
    })

    const requiredVariables = [
      { name: 'BFL_API_KEY', value: this.bflApiKey },
      { name: 'BFL_WEBHOOK_SECRET', value: this.bflWebhookSecret },
      { name: 'API_URL', value: this.apiUrl },
    ]

    const missingVariables = requiredVariables
      .filter(v => !v.value)
      .map(v => v.name)

    if (missingVariables.length === 0) {
      logger.info({
        message: '‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        description: 'All required environment variables are set',
      })

      return {
        success: true,
        missingVariables: [],
        message: '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
      }
    } else {
      logger.error({
        message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        description: 'Missing required environment variables',
        missingVariables,
      })

      return {
        success: false,
        missingVariables,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVariables.join(', ')}`,
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
   */
  async checkApiAvailability(): Promise<{
    success: boolean
    standardApi: { available: boolean; error?: string }
    finetunedApi: { available: boolean; error?: string }
    message: string
  }> {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
      description: 'Checking API availability for NeuroPhoto V2',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API
    let standardApiAvailable = false
    let standardApiError = ''
    try {
      // –î–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const standardResponse = await axios({
        method: 'HEAD',
        url: this.apiEndpoint,
        headers: {
          'X-Key': this.bflApiKey,
        },
        validateStatus: () => true,
        timeout: 5000,
      })

      // API –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–ª–∞, –Ω–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
      standardApiAvailable =
        standardResponse.status === 400 || standardResponse.status === 401
      if (!standardApiAvailable) {
        standardApiError = `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${standardResponse.status}`
      }
    } catch (error) {
      standardApiAvailable = false
      standardApiError = error instanceof Error ? error.message : String(error)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å fine-tuning
    let finetunedApiAvailable = false
    let finetunedApiError = ''
    try {
      const finetunedResponse = await axios({
        method: 'HEAD',
        url: this.finetunedApiEndpoint,
        headers: {
          'X-Key': this.bflApiKey,
        },
        validateStatus: () => true,
        timeout: 5000,
      })

      finetunedApiAvailable =
        finetunedResponse.status === 400 || finetunedResponse.status === 401
      if (!finetunedApiAvailable) {
        finetunedApiError = `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${finetunedResponse.status}`
      }
    } catch (error) {
      finetunedApiAvailable = false
      finetunedApiError = error instanceof Error ? error.message : String(error)
    }

    const success = standardApiAvailable && finetunedApiAvailable

    if (success) {
      logger.info({
        message: '‚úÖ API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –¥–æ—Å—Ç—É–ø–Ω–æ',
        description: 'API for NeuroPhoto V2 is available',
      })
    } else {
      logger.error({
        message: '‚ùå API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        description: 'API for NeuroPhoto V2 is not available',
        standardApiAvailable,
        standardApiError,
        finetunedApiAvailable,
        finetunedApiError,
      })
    }

    return {
      success,
      standardApi: {
        available: standardApiAvailable,
        error: standardApiError || undefined,
      },
      finetunedApi: {
        available: finetunedApiAvailable,
        error: finetunedApiError || undefined,
      },
      message: success
        ? 'API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –¥–æ—Å—Ç—É–ø–Ω–æ'
        : 'API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫–ª—é—á API.',
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
   */
  async checkWebhookAvailability(): Promise<{
    success: boolean
    error?: string
    message: string
  }> {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
      description: 'Checking webhook availability for NeuroPhoto V2',
    })

    const webhookUrl = `${this.apiUrl}/webhooks/neurophoto`

    try {
      // –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const response = await axios({
        method: 'GET',
        url: webhookUrl,
        validateStatus: () => true,
        timeout: 5000,
      })

      // Webhook –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 –∏–ª–∏ 405 –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
      const success =
        response.status === 404 ||
        response.status === 405 ||
        response.status === 400

      if (success) {
        logger.info({
          message: '‚úÖ Webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –¥–æ—Å—Ç—É–ø–µ–Ω',
          description: 'Webhook for NeuroPhoto V2 is available',
          status: response.status,
        })

        return {
          success: true,
          message: 'Webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –¥–æ—Å—Ç—É–ø–µ–Ω',
        }
      } else {
        logger.error({
          message: '‚ùå Webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
          description: 'Webhook for NeuroPhoto V2 returned unexpected status',
          status: response.status,
        })

        return {
          success: false,
          error: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å webhook: ${response.status}`,
          message: `Webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
        }
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
        description: 'Error checking webhook for NeuroPhoto V2',
        error: errorMessage,
      })

      return {
        success: false,
        error: errorMessage,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2: ${errorMessage}`,
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
   */
  async runSystemCheck(): Promise<{
    success: boolean
    envCheck: { success: boolean; missingVariables: string[] }
    apiCheck: {
      success: boolean
      standardApi: { available: boolean; error?: string }
      finetunedApi: { available: boolean; error?: string }
    }
    webhookCheck: { success: boolean; error?: string }
    message: string
  }> {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ù–µ–π—Ä–æ–§–æ—Ç–æ V2',
      description: 'Running full system check for NeuroPhoto V2',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = await this.checkEnvironmentVariables()

    // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (
      !envCheck.success &&
      envCheck.missingVariables.includes('BFL_API_KEY')
    ) {
      logger.error({
        message:
          '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫',
        description: 'Critical variables are missing, skipping further checks',
        missingVariables: envCheck.missingVariables,
      })

      return {
        success: false,
        envCheck: {
          success: envCheck.success,
          missingVariables: envCheck.missingVariables,
        },
        apiCheck: {
          success: false,
          standardApi: {
            available: false,
            error: '–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è BFL_API_KEY',
          },
          finetunedApi: {
            available: false,
            error: '–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è BFL_API_KEY',
          },
        },
        webhookCheck: {
          success: false,
          error: '–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        },
        message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. ${envCheck.message}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    const apiCheck = await this.checkApiAvailability()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook
    const webhookCheck = await this.checkWebhookAvailability()

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const success = envCheck.success && apiCheck.success && webhookCheck.success

    if (success) {
      logger.info({
        message: '‚úÖ –°–∏—Å—Ç–µ–º–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞',
        description: 'NeuroPhoto V2 system is fully operational',
      })
    } else {
      logger.error({
        message: '‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã',
        description: 'NeuroPhoto V2 system has issues',
        envCheck,
        apiCheck,
        webhookCheck,
      })
    }

    return {
      success,
      envCheck: {
        success: envCheck.success,
        missingVariables: envCheck.missingVariables,
      },
      apiCheck,
      webhookCheck,
      message: success
        ? '–°–∏—Å—Ç–µ–º–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞'
        : '–°–∏—Å—Ç–µ–º–∞ –ù–µ–π—Ä–æ–§–æ—Ç–æ V2 –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö.',
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
   */
  protected async executeTest(
    input: NeuroPhotoV2TestInput,
    customMocks: Record<string, any> = {}
  ): Promise<NeuroPhotoV2TestOutput> {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    const mocks = {
      ...TestDataFactory.createAllMocks(),
      ...customMocks,
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch
    const originalFetch = (global as any).fetch
    ;(global as any).fetch = mocks.fetch as any

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      logger.info({
        message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'Checking user existence',
      })
      const user = await mocks.getUserByTelegramId()

      logger.info({
        message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        description: 'Calculating cost',
      })
      const costPerImage = 15 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

      logger.info({
        message: 'üíµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Processing payment',
      })

      logger.info({
        message: 'üìê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: 'Getting generation parameters',
      })
      const aspectRatio = await mocks.getAspectRatio()
      const finetuneId = await mocks.getFineTuneIdByTelegramId()

      logger.info({
        message: 'üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        description: 'Calculating image dimensions',
      })
      const dimensions = { width: 1024, height: 1024 }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const tasks = []

      for (let i = 0; i < input.num_images; i++) {
        logger.info({
          message: `üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é #${i + 1}`,
          description: `Sending generation request #${i + 1}`,
        })

        const response = await mocks.fetch()
        const data = await response.json()

        logger.info({
          message: 'üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
          description: 'Saving task',
        })
        const savedTask = await mocks.saveNeuroPhotoPrompt()

        logger.info({
          message: 'üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          description: 'Sending message to user',
        })
        await mocks.getBotByName().bot.telegram.sendMessage()

        tasks.push({
          taskId: data.id,
          status: data.status,
          prompt: input.prompt,
          savedTask,
        })
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        success: true,
        user,
        aspectRatio,
        finetuneId,
        dimensions,
        costPerImage,
        tasks,
      }
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
      ;(global as any).fetch = originalFetch
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
   */
  async testWithPrompt(prompt: string): Promise<any> {
    const input = TestDataFactory.createNeuroPhotoV2Data({
      prompt,
    })

    return await this.runTest(input)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */
  async testWithMultipleImages(numImages: number): Promise<any> {
    const input = TestDataFactory.createNeuroPhotoV2Data({
      num_images: numImages,
    })

    return await this.runTest(input)
  }
}
