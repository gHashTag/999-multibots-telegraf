import { InngestFunctionTester } from '../../core/InngestFunctionTester'
import { TestDataFactory } from '../../factories/TestDataFactory'
import { logger } from '@/utils/logger'

/**
 * –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export interface NeuroPhotoV2TestInput {
  prompt: string
  num_images: number
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export interface NeuroPhotoV2TestOutput {
  success: boolean
  user: any
  aspectRatio?: string
  finetuneId?: string
  dimensions?: { width: number; height: number }
  costPerImage?: number
  tasks?: Array<{
    taskId: string
    status: string
    prompt: string
    savedTask: any
  }>
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export class NeuroPhotoV2Tester extends InngestFunctionTester<
  NeuroPhotoV2TestInput,
  NeuroPhotoV2TestOutput
> {
  constructor(options: Partial<any> = {}) {
    super('neuro/photo-v2.generate', {
      name: '–ù–µ–π—Ä–æ–§–æ—Ç–æ V2 —Ç–µ—Å—Ç',
      ...options,
    })
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
   */
  protected async executeTest(
    input: NeuroPhotoV2TestInput,
    customMocks: Record<string, any> = {}
  ): Promise<NeuroPhotoV2TestOutput> {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    const mocks = {
      ...TestDataFactory.createAllMocks(),
      ...customMocks,
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è fetch
    global.fetch = mocks.fetch as any

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Inngest step
    const step = {
      run: async (name: string, fn: () => Promise<any>) => {
        logger.info({
          message: `üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${name}`,
          description: `Executing step: ${name}`,
        })
        return await fn()
      },
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Inngest
    const event = {
      data: input,
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info({
      message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Checking user existence',
    })
    const user = await mocks.getUserByTelegramId()

    logger.info({
      message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Calculating cost',
    })
    const costPerImage = 15 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

    logger.info({
      message: 'üíµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Processing payment',
    })

    logger.info({
      message: 'üìê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Getting generation parameters',
    })
    const aspectRatio = await mocks.getAspectRatio()
    const finetuneId = await mocks.getFineTuneIdByTelegramId()

    logger.info({
      message: 'üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      description: 'Calculating image dimensions',
    })
    const dimensions = { width: 1024, height: 1024 }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const tasks = []

    for (let i = 0; i < input.num_images; i++) {
      logger.info({
        message: `üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é #${i + 1}`,
        description: `Sending generation request #${i + 1}`,
      })

      const response = await mocks.fetch()
      const data = await response.json()

      logger.info({
        message: 'üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
        description: 'Saving task',
      })
      const savedTask = await mocks.saveNeuroPhotoPrompt()

      logger.info({
        message: 'üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        description: 'Sending message to user',
      })
      await mocks.getBotByName().bot.telegram.sendMessage()

      tasks.push({
        taskId: data.id,
        status: data.status,
        prompt: input.prompt,
        savedTask,
      })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success: true,
      user,
      aspectRatio,
      finetuneId,
      dimensions,
      costPerImage,
      tasks,
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
   */
  async testWithPrompt(prompt: string): Promise<any> {
    const input = TestDataFactory.createNeuroPhotoV2Data({
      prompt,
    })

    return await this.runTest(input)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */
  async testWithMultipleImages(numImages: number): Promise<any> {
    const input = TestDataFactory.createNeuroPhotoV2Data({
      num_images: numImages,
    })

    return await this.runTest(input)
  }
}
