import { logger } from '@/lib/logger'
import { TestResult } from '../types'
import { InngestTestEngine } from '../inngest-test-engine'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'
import { TEST_CONFIG } from '../test-config'
import { createTestError } from '../test-logger'

const inngestTestEngine = new InngestTestEngine()

export async function runReferralTests(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const startTime = Date.now()

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
    await inngestTestEngine.init()

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    inngestTestEngine.register('payment/process', paymentProcessor)

    inngestTestEngine.register('referral/create', async () => {
      return {
        success: true,
        data: {
          referral_id: '123',
          status: 'ACTIVE',
          reward_amount: 100,
        },
      }
    })

    try {
      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      logger.info('üéØ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
      const createReferralResult = await inngestTestEngine.send({
        name: 'referral/create',
        data: {
          referrer_id: '123456789',
          referred_id: '987654321',
          bot_name: TEST_CONFIG.TEST_BOT_NAME,
        },
      })

      if (!createReferralResult) {
        throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª')
      }

      results.push({
        success: true,
        message: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        name: 'Create Referral Test',
        startTime,
        duration: Date.now() - startTime,
        details: { referral_id: '123' },
      })

      // –¢–µ—Å—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
      logger.info('üéØ –¢–µ—Å—Ç: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
      const rewardPaymentResult = await inngestTestEngine.send({
        name: 'payment/process',
        data: {
          telegram_id: '123456789',
          amount: 100,
          type: 'referral',
          description: '–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
          bot_name: TEST_CONFIG.TEST_BOT_NAME,
          service_type: 'REFERRAL_REWARD',
        },
      })

      if (!rewardPaymentResult) {
        throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
      }

      results.push({
        success: true,
        message: '–¢–µ—Å—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        name: 'Referral Reward Test',
        startTime,
        duration: Date.now() - startTime,
        details: { reward_amount: 100 },
      })
    } catch (testError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', testError)
      results.push({
        success: false,
        name: 'Referral Test',
        message: '–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        error: createTestError(testError),
        startTime,
        duration: Date.now() - startTime,
      })
    }

    return results
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error)
    results.push({
      success: false,
      name: 'Referral Tests',
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      error: createTestError(error),
      startTime,
      duration: Date.now() - startTime,
    })
  }

  return results
}
