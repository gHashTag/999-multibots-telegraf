import { Telegraf, Context } from 'telegraf'
import { Update } from 'telegraf/typings/core/types/typegram'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { Logger as logger } from '@/utils/logger'
import { TEST_CONFIG } from '../test-config'
import { v4 as uuid } from 'uuid'
import { TestResult } from '../types'

async function cleanupTestUser(telegram_id: string) {
  try {
    await supabase.from('users').delete().eq('telegram_id', telegram_id)
    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Error cleaning up test data',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
  }
}

export async function testChatWithAvatarFlow(): Promise<TestResult> {
  const testTelegramId = Date.now().toString()
  const testUsername = `test_user_${testTelegramId}`

  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è flow —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º', {
      description: 'Starting chat with avatar flow test',
      telegram_id: testTelegramId,
      username: testUsername,
    })

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: testTelegramId,
      username: testUsername,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      balance: 1000, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      mode: ModeEnum.ChatWithAvatar,
    })

    if (createError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`)
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const mockContext = {
      from: {
        id: parseInt(testTelegramId),
        username: testUsername,
        first_name: 'Test',
        is_bot: false,
      },
      chat: {
        id: parseInt(testTelegramId),
      },
      session: {
        mode: ModeEnum.ChatWithAvatar,
      },
      scene: {
        enter: async (sceneName: string) => {
          logger.info('üé¨ –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É', {
            description: 'Entering scene',
            scene: sceneName,
          })
          return Promise.resolve()
        },
      },
      reply: async (text: string) => {
        logger.info('üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞', {
          description: 'Bot reply',
          text,
        })
        return Promise.resolve()
      },
    } as unknown as MyContext

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    await mockContext.scene.enter(ModeEnum.CheckBalanceScene)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    const { data: userData } = await supabase
      .from('users')
      .select('mode')
      .eq('telegram_id', testTelegramId)
      .single()

    if (userData?.mode !== ModeEnum.ChatWithAvatar) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: ${ModeEnum.ChatWithAvatar}, –ü–æ–ª—É—á–µ–Ω–æ: ${userData?.mode}`
      )
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    const testMessage = '–ü—Ä–∏–≤–µ—Ç, –∞–≤–∞—Ç–∞—Ä!'
    await mockContext.reply(testMessage)

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (TEST_CONFIG.cleanupAfterEach) {
      await cleanupTestUser(testTelegramId)
    }

    return {
      success: true,
      name: 'Chat with Avatar Flow Test',
      message: '–¢–µ—Å—Ç flow —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ flow —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
      description: 'Error in chat with avatar flow test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: 'Chat with Avatar Flow Test',
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ flow —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º: ${
        error instanceof Error ? error.message : String(error)
      }`,
      error: error instanceof Error ? error : new Error(String(error)),
    }
  }
}

export const runAllChatWithAvatarTests = async (): Promise<TestResult[]> => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º', {
    description: 'Running all chat with avatar tests',
  })

  const results: TestResult[] = []

  try {
    const flowTestResult = await testChatWithAvatarFlow()
    results.push(flowTestResult)

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'All chat with avatar tests completed',
      success_count: results.filter(r => r.success).length,
      fail_count: results.filter(r => !r.success).length,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
      description: 'Error running chat with avatar tests',
      error: error instanceof Error ? error.message : String(error),
    })
    return [
      {
        success: false,
        name: 'Chat with Avatar Tests',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º: ${
          error instanceof Error ? error.message : String(error)
        }`,
      },
    ]
  }
} 