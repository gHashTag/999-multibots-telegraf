import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { getRuBillWizard } from '@/scenes/getRuBillWizard'
import { createMockFn } from '@/test-utils/mocks/telegrafMock'
import { LocalSubscription } from '@/scenes/getRuBillWizard'
import { TestContext } from '@/test-utils/core/TelegramSceneTester'
import { BaseScene } from 'telegraf/typings/scenes'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ RuBillWizard
 */
export async function testRuBillWizardSceneSimple(): Promise<TestResult> {
  logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ RuBillWizard (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)', {
    description: 'Starting simplified RuBillWizard test',
  })

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞', {
      description: 'Test successful invoice creation',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
    const mockContext = createMockContext({
      user: {
        telegram_id: '12345678',
        username: 'test_user',
      },
      sessionData: {
        selectedPayment: {
          amount: 100,
          stars: 100,
          subscription: 'neuroblogger' as LocalSubscription,
        },
        email: 'test@example.com',
      },
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫-–º–µ—Ç–æ–¥—ã –¥–ª—è Telegram
    const mockTelegram = mockContext.telegram as any
    if (!mockTelegram.sendMessage) {
      mockTelegram.sendMessage = createMockFn().mockResolvedValue({
        message_id: 1,
      })
    }

    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!mockContext.reply) {
      mockContext.reply = createMockFn().mockImplementation(
        async (text: string, extra?: any) => {
          logger.info('üì© –ú–æ–∫-–æ—Ç–≤–µ—Ç –±–æ—Ç–∞:', {
            description: 'Mock bot reply',
            text,
            extra,
          })
          const ctx = mockContext as TestContext & { sentReplies?: any[] }
          if (!ctx.sentReplies) {
            ctx.sentReplies = []
          }
          ctx.sentReplies.push({
            text,
            extra,
            timestamp: Date.now(),
          })
          return { message_id: ctx.sentReplies.length }
        }
      )
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—á–µ—Ç–æ–º
    try {
      // –ü–æ–ª—É—á–∞–µ–º wizard –∏ –µ–≥–æ middleware
      const wizard = getRuBillWizard() as BaseScene<TestContext>
      const middlewares = wizard.middleware()
      const generateInvoiceStep = middlewares[0]

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
      await generateInvoiceStep(mockContext as TestContext, () => {})
    } catch (sceneError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω—ã:', {
        description: 'Error running scene step',
        error:
          sceneError instanceof Error ? sceneError.message : String(sceneError),
        stack: sceneError instanceof Error ? sceneError.stack : undefined,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const ctx = mockContext as TestContext & { sentReplies?: any[] }
    const sentReplies = ctx.sentReplies || []
    logger.info('üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Sent messages',
      count: sentReplies.length,
      messages: sentReplies.map((r: any) => ({
        text: r.text?.substring(0, 50) + '...',
      })),
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    const hasPurchaseLink = sentReplies.some(
      (reply: any) => reply.text && reply.text.includes('ü§ë –ü–æ–¥–ø–∏—Å–∫–∞')
    )

    if (!hasPurchaseLink) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç RuBillWizard –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
      description: 'RuBillWizard test completed successfully',
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç RuBillWizard —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'RuBillWizard Scene Test (Simple)',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ RuBillWizard:', {
      description: 'Error in RuBillWizard test',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RuBillWizard: ${error instanceof Error ? error.message : String(error)}`,
      name: 'RuBillWizard Scene Test (Simple)',
    }
  }
}
