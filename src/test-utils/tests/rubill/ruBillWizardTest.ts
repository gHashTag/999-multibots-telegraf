import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { getRuBillWizard } from '@/scenes/getRuBillWizard'
import { inngestMock } from '@/test-utils/mocks/telegrafMock'
import * as supabaseModule from '@/core/supabase'
import { createMockFn } from '@/test-utils/mocks/telegrafMock'
import * as helper from '@/scenes/getRuBillWizard/helper'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ RuBillWizard
 */
export async function testRuBillWizardScene(): Promise<TestResult> {
  logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ RuBillWizard', {
    description: 'Starting RuBillWizard test',
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
  const originalCreatePayment = supabaseModule.createPayment
  const originalUpdateUserSubscription = supabaseModule.updateUserSubscription
  const originalGetInvoiceId = helper.getInvoiceId
  const originalGenerateUniqueShortInvId = helper.generateUniqueShortInvId

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ
    const createPaymentMock = createMockFn().mockResolvedValue({
      id: 'mock-payment-id',
      created_at: new Date().toISOString(),
    })

    const updateUserSubscriptionMock = createMockFn().mockResolvedValue(true)

    const getInvoiceIdMock = createMockFn().mockResolvedValue(
      'https://mock-robokassa.test/invoice/12345'
    )

    const generateUniqueShortInvIdMock = createMockFn().mockResolvedValue(12345)

    // –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –º–æ–∫–∏
    supabaseModule.createPayment = createPaymentMock as any
    supabaseModule.updateUserSubscription = updateUserSubscriptionMock as any
    helper.getInvoiceId = getInvoiceIdMock as any
    helper.generateUniqueShortInvId = generateUniqueShortInvIdMock as any

    // 1. –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞', {
      description: 'Test successful invoice creation',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
    const mockContext = createMockContext({
      userId: 12345678,
      username: 'test_user',
      sessionData: {
        selectedPayment: {
          amount: 100,
          stars: 100,
          subscription: 'neuroblogger',
        },
        email: 'test@example.com',
      },
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
    const step = getRuBillWizard.steps[0]
    await step(mockContext as any)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –±—ã–ª–æ –ª–∏ –≤—ã–∑–≤–∞–Ω–æ createPayment —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const createPaymentCalled = createPaymentMock.mock.calls.some(call => {
      const args = call[0] || {}
      return (
        args.telegram_id === '12345678' &&
        args.amount === 100 &&
        args.stars === 100 &&
        args.subscription === 'neuroblogger' &&
        args.status === 'PENDING'
      )
    })

    if (!createPaymentCalled) {
      throw new Error('createPayment –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ updateUserSubscription
    const updateSubscriptionCalled = updateUserSubscriptionMock.mock.calls.some(
      call => call[0] === '12345678' && call[1] === 'neuroblogger'
    )

    if (!updateSubscriptionCalled) {
      throw new Error(
        'updateUserSubscription –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ inngest.send
    const inngestSendCalled = inngestMock.send.mock.calls.some(call => {
      const args = call[0] || {}
      return (
        args.name === 'payment/process' &&
        args.data?.telegram_id === '12345678' &&
        args.data?.amount === 100 &&
        args.data?.stars === 100 &&
        args.data?.type === 'money_income'
      )
    })

    if (!inngestSendCalled) {
      throw new Error('inngest.send –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const sentReplies = (mockContext as any).sentReplies || []
    const hasPurchaseLink = sentReplies.some(
      (reply: any) =>
        reply.text.includes('ü§ë –ü–æ–¥–ø–∏—Å–∫–∞') &&
        reply.extra?.reply_markup?.inline_keyboard?.[0]?.[0]?.url?.includes(
          'robokassa'
        )
    )

    if (!hasPurchaseLink) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    }

    // 2. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    logger.info('üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞', {
      description: 'Test error handling in invoice creation',
    })

    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    createPaymentMock.mockReset()
    createPaymentMock.mockRejectedValue(new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'))

    const errorMockContext = createMockContext({
      userId: 87654321,
      username: 'error_test_user',
      sessionData: {
        selectedPayment: {
          amount: 50,
          stars: 50,
        },
        email: 'error@example.com',
      },
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
    await step(errorMockContext as any)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorSentReplies = (errorMockContext as any).sentReplies || []
    const hasErrorMessage = errorSentReplies.some((reply: any) =>
      reply.text.includes('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞')
    )

    if (!hasErrorMessage) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç RuBillWizard –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
      description: 'RuBillWizard test completed successfully',
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç RuBillWizard —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'RuBillWizard Scene Test',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ RuBillWizard:', {
      description: 'Error in RuBillWizard test',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RuBillWizard: ${error instanceof Error ? error.message : String(error)}`,
      name: 'RuBillWizard Scene Test',
    }
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    supabaseModule.createPayment = originalCreatePayment
    supabaseModule.updateUserSubscription = originalUpdateUserSubscription
    helper.getInvoiceId = originalGetInvoiceId
    helper.generateUniqueShortInvId = originalGenerateUniqueShortInvId
  }
}
