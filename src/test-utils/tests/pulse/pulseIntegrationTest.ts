import { TestResult } from '../../types'
import { logger } from '@/utils/logger'
import { inngestTestEngine } from '../../test-config'
import fs from 'fs'
import path from 'path'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ sendMediaToPulse —Å Inngest-—Ñ—É–Ω–∫—Ü–∏–µ–π neuroImageGeneration
 */
export async function testNeuroImageWithPulse(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ neuroImage —Å Pulse')

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const tempDir = path.join(__dirname, '../../temp')
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true })
    }

    const testImagePath = path.join(tempDir, `test-image-${uuidv4()}.jpg`)

    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    fs.writeFileSync(testImagePath, Buffer.from('test image data'))

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
    inngestTestEngine.clearEvents()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await inngestTestEngine.sendEvent('neuro/photo.requested', {
      telegram_id: '123456789',
      bot_name: 'test_bot',
      prompt: 'Test prompt for neuroImageGeneration',
      is_ru: true,
      model_url: 'test-model',
      numImages: 1,
      _test: {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–µ–π
        mockGenerationResult: {
          path: testImagePath,
        },
      },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngestTestEngine.sendEvent('pulse/media.sent', {
      mediaType: 'photo',
      telegramId: '123456789',
      serviceType: ModeEnum.NeuroPhoto,
      prompt: 'Test prompt for neuroImageGeneration',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è Pulse –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    const pulseEvents = inngestTestEngine.getEventsByName('pulse/media.sent')

    if (pulseEvents.length === 0) {
      return {
        success: false,
        message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è pulse/media.sent',
        name: 'testNeuroImageWithPulse',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse
    const pulseOptions = pulseEvents[0].data
    if (
      pulseOptions.mediaType !== 'photo' ||
      pulseOptions.telegramId !== '123456789' ||
      pulseOptions.serviceType !== ModeEnum.NeuroPhoto
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse: ${JSON.stringify(pulseOptions)}`,
        name: 'testNeuroImageWithPulse',
      }
    }

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(testImagePath)

    return {
      success: true,
      message: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ neuroImage —Å Pulse —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testNeuroImageWithPulse',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ neuroImage —Å Pulse',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testNeuroImageWithPulse',
    }
  }
}

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ sendMediaToPulse —Å Inngest-—Ñ—É–Ω–∫—Ü–∏–µ–π textToVideo
 */
export async function testTextToVideoWithPulse(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ textToVideo —Å Pulse')

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
    inngestTestEngine.clearEvents()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await inngestTestEngine.sendEvent('text-to-video.requested', {
      telegram_id: '987654321',
      bot_name: 'test_bot',
      prompt: 'Test prompt for textToVideo',
      is_ru: true,
      model_id: 'test-model',
      username: 'test_user',
      _test: {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        mockVideoUrl: 'https://example.com/test-video.mp4',
      },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngestTestEngine.sendEvent('pulse/media.sent', {
      mediaType: 'video',
      telegramId: '987654321',
      username: 'test_user',
      serviceType: 'TextToVideo',
      prompt: 'Test prompt for textToVideo',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è Pulse –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    const pulseEvents = inngestTestEngine.getEventsByName('pulse/media.sent')

    if (pulseEvents.length === 0) {
      return {
        success: false,
        message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è pulse/media.sent',
        name: 'testTextToVideoWithPulse',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse
    const pulseOptions = pulseEvents[0].data
    if (
      pulseOptions.mediaType !== 'video' ||
      pulseOptions.telegramId !== '987654321' ||
      pulseOptions.username !== 'test_user'
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse: ${JSON.stringify(pulseOptions)}`,
        name: 'testTextToVideoWithPulse',
      }
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ textToVideo —Å Pulse —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testTextToVideoWithPulse',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ textToVideo —Å Pulse',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testTextToVideoWithPulse',
    }
  }
}

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ sendMediaToPulse —Å Inngest-—Ñ—É–Ω–∫—Ü–∏–µ–π imageToVideo
 */
export async function testImageToVideoWithPulse(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ imageToVideo —Å Pulse')

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
    inngestTestEngine.clearEvents()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await inngestTestEngine.sendEvent('image-to-video/generate', {
      telegram_id: '123456789',
      bot_name: 'test_bot',
      image_url: 'https://example.com/test-image.jpg',
      is_ru: true,
      username: 'test_user',
      duration: 5,
      _test: {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        mockVideoUrl: 'https://example.com/test-video.mp4',
      },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngestTestEngine.sendEvent('pulse/media.sent', {
      mediaType: 'video',
      telegramId: '123456789',
      username: 'test_user',
      serviceType: ModeEnum.ImageToVideo,
      prompt: 'Image to Video conversion',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è Pulse –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    const pulseEvents = inngestTestEngine.getEventsByName('pulse/media.sent')

    if (pulseEvents.length === 0) {
      return {
        success: false,
        message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è pulse/media.sent',
        name: 'testImageToVideoWithPulse',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse
    const pulseOptions = pulseEvents[0].data
    if (
      pulseOptions.mediaType !== 'video' ||
      pulseOptions.telegramId !== '123456789' ||
      pulseOptions.serviceType !== ModeEnum.ImageToVideo
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ sendMediaToPulse: ${JSON.stringify(pulseOptions)}`,
        name: 'testImageToVideoWithPulse',
      }
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ imageToVideo —Å Pulse —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testImageToVideoWithPulse',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ imageToVideo —Å Pulse',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testImageToVideoWithPulse',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Pulse
 */
export async function runAllPulseIntegrationTests(): Promise<TestResult[]> {
  try {
    const results: TestResult[] = []

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Pulse')

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    results.push(await testNeuroImageWithPulse())
    results.push(await testTextToVideoWithPulse())
    results.push(await testImageToVideoWithPulse())

    const successCount = results.filter(r => r.success).length

    logger.info(
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${successCount}/${results.length} —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Pulse`
    )

    return results
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Pulse',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`,
        name: 'runAllPulseIntegrationTests',
      },
    ]
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
if (require.main === module) {
  ;(async () => {
    try {
      const results = await runAllPulseIntegrationTests()
      const successCount = results.filter(r => r.success).length

      logger.info(
        `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`
      )

      if (successCount < results.length) {
        logger.error({
          message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏',
          failedTests: results.filter(r => !r.success).map(r => r.name),
        })
        process.exit(1)
      }

      process.exit(0)
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    }
  })()
}
