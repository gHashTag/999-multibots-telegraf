import { TestResult } from '../../types'
import { sendMediaToPulse, MediaPulseOptions } from '@/helpers/pulse'
import path from 'path'
import { logger } from '@/utils/logger'
import fs from 'fs'
import os from 'os'

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∫–∞–Ω–∞–ª Pulse
 */
export async function testSendPhotoToPulse(): Promise<TestResult> {
  const testName = '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Pulse'

  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Pulse',
      description: 'Starting test for sending photo to Pulse',
      testName,
    })

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ URL
    const photoOptions: MediaPulseOptions = {
      mediaType: 'photo',
      mediaSource: 'https://avatars.githubusercontent.com/u/4998556?v=4', // –¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ GitHub
      telegramId: '12345678',
      username: 'test_user',
      language: 'ru',
      serviceType: 'PhotoTest',
      prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
      botName: 'neuro_blogger_bot',
      additionalInfo: {
        –¢–µ—Å—Ç: '–î–∞',
        –û–∫—Ä—É–∂–µ–Ω–∏–µ: '–¢–µ—Å—Ç–æ–≤–æ–µ',
      },
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    await sendMediaToPulse(photoOptions)

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Pulse —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Photo to Pulse test completed successfully',
      testName,
    })

    return {
      success: true,
      message: '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Pulse',
      name: testName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Pulse',
      description: 'Error in photo to Pulse test',
      error: (error as Error).message,
      stack: (error as Error).stack,
      testName,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: ${(error as Error).message}`,
      name: testName,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª Pulse
 */
export async function testSendVideoToPulse(): Promise<TestResult> {
  const testName = '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Pulse'

  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ Pulse',
      description: 'Starting test for sending video to Pulse',
      testName,
    })

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    // const tmpDir = os.tmpdir()
    // const videoPath = path.join(tmpDir, 'test-video.mp4')
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ URL
    // (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ)
    const videoOptions: MediaPulseOptions = {
      mediaType: 'video',
      mediaSource:
        'https://sample-videos.com/video123/mp4/240/big_buck_bunny_240p_1mb.mp4',
      telegramId: '12345678',
      username: 'test_user',
      language: 'ru',
      serviceType: 'VideoTest',
      prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ',
      botName: 'neuro_blogger_bot',
      additionalInfo: {
        '–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ': '–î–∞',
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: '240p',
      },
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    await sendMediaToPulse(videoOptions)

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ Pulse —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Video to Pulse test completed successfully',
      testName,
    })

    return {
      success: true,
      message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Pulse',
      name: testName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ Pulse',
      description: 'Error in video to Pulse test',
      error: (error as Error).message,
      stack: (error as Error).stack,
      testName,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: ${(error as Error).message}`,
      name: testName,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ –∫–∞–Ω–∞–ª Pulse
 */
export async function testSendAudioToPulse(): Promise<TestResult> {
  const testName = '–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Pulse'

  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Pulse',
      description: 'Starting test for sending audio to Pulse',
      testName,
    })

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ URL
    // (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ)
    const audioOptions: MediaPulseOptions = {
      mediaType: 'audio',
      mediaSource:
        'https://file-examples.com/storage/fe352586866388d53d2add0/2017/11/file_example_MP3_1MG.mp3',
      telegramId: '12345678',
      username: 'test_user',
      language: 'ru',
      serviceType: 'AudioTest',
      prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—É–¥–∏–æ',
      botName: 'neuro_blogger_bot',
      additionalInfo: {
        '–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ': '–î–∞',
        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: '0:30',
      },
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
    await sendMediaToPulse(audioOptions)

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Pulse —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Audio to Pulse test completed successfully',
      testName,
    })

    return {
      success: true,
      message: '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Pulse',
      name: testName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Pulse',
      description: 'Error in audio to Pulse test',
      error: (error as Error).message,
      stack: (error as Error).stack,
      testName,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: ${(error as Error).message}`,
      name: testName,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª Pulse
 */
export async function testSendDocumentToPulse(): Promise<TestResult> {
  const testName = '–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Pulse'

  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Pulse',
      description: 'Starting test for sending document to Pulse',
      testName,
    })

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    const tmpDir = os.tmpdir()
    const documentPath = path.join(tmpDir, 'test-document.txt')

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    fs.writeFileSync(
      documentPath,
      '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Pulse.'
    )

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const documentOptions: MediaPulseOptions = {
      mediaType: 'document',
      mediaSource: documentPath,
      telegramId: '12345678',
      username: 'test_user',
      language: 'ru',
      serviceType: 'DocumentTest',
      prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      botName: 'neuro_blogger_bot',
      additionalInfo: {
        '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç': '–î–∞',
        '–¢–∏–ø —Ñ–∞–π–ª–∞': 'TXT',
      },
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await sendMediaToPulse(documentOptions)

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(documentPath)

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Pulse —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'Document to Pulse test completed successfully',
      testName,
    })

    return {
      success: true,
      message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Pulse',
      name: testName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Pulse',
      description: 'Error in document to Pulse test',
      error: (error as Error).message,
      stack: (error as Error).stack,
      testName,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${(error as Error).message}`,
      name: testName,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse
 */
export async function runAllPulseMediaTests(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse'

  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse',
    description: 'Running all Pulse media tests',
  })

  try {
    const results: TestResult[] = []

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.push(await testSendPhotoToPulse())
    results.push(await testSendVideoToPulse())
    results.push(await testSendAudioToPulse())
    results.push(await testSendDocumentToPulse())

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    logger.info({
      message: `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse: ‚úÖ ${successCount} —É—Å–ø–µ—à–Ω—ã—Ö, ‚ùå ${failCount} –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö`,
      description: `All Pulse media tests completed: ${successCount} successful, ${failCount} failed`,
    })

    // –í –Ω–∞—à–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–∏–Ω TestResult, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
    return {
      success: failCount === 0,
      message: `–¢–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse: ${successCount} —É—Å–ø–µ—à–Ω—ã—Ö, ${failCount} –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö`,
      name: testName,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse',
      description: 'Error running Pulse media tests',
      error: (error as Error).message,
      stack: (error as Error).stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${(error as Error).message}`,
      name: testName,
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    await runAllPulseMediaTests()
  })()
}
