/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
 */

import { createAgentRouter } from '../../../core/mcp/agent/router'
import type { Service } from '../../../core/mcp/types'
import type { NetworkAgent } from '../../../core/mcp/agent/router'
import {
  TaskStatus,
  TaskType,
  createAgentState,
  AgentState,
  Task,
  addTask,
  decomposeTask,
  delegateTask,
  updateTaskStatus,
  TaskDependency,
} from '../../../core/mcp/agent/state'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { createMockFn } from '../../test-config'
import { Agent } from '../../../core/mcp/agent/agent'

/**
 * –¢–∏–ø –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
 */
type MockFn<T = any, R = any> = {
  (...args: T[]): R
  calls: T[][]
  mockReturnValue: (value: R) => MockFn<T, R>
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const createMockService = (): Service => {
  return {
    processTask: createMockFn().mockReturnValue(
      Promise.resolve('agent-a')
    ) as MockFn,
    initialize: createMockFn().mockReturnValue(Promise.resolve()) as MockFn,
    close: createMockFn().mockReturnValue(Promise.resolve()) as MockFn,
    getClient: createMockFn().mockReturnValue({}) as MockFn,
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const createMockAgent = (
  id: string,
  capabilities: string[] = ['test', 'mock'],
  agentPriority = 1,
  maxConcurrentTasks = 3
): Agent => {
  return {
    id,
    name: `Agent ${id}`,
    description: `Test agent ${id}`,
    capabilities,
    priority: agentPriority,
    maxConcurrentTasks,
    currentTaskCount: 0,
    canHandle: async (task: Task) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
      if (!task.metadata?.capability) return true
      return capabilities.includes(task.metadata.capability)
    },
    handle: createMockFn().mockReturnValue(
      Promise.resolve({ success: true })
    ) as MockFn,
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
 */
const createTestTask = (id: string = 'task-1'): Task => {
  return {
    id,
    type: TaskType.DOCUMENTATION,
    description: 'Test task',
    priority: 1,
    status: TaskStatus.PENDING,
    created: new Date(),
    updated: new Date(),
    dependencies: [],
    metadata: {},
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
 */
function createTestAgentState(): AgentState {
  return createAgentState('test-agent-state')
}

/**
 * –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
 */
export async function testAgentRegistration(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤')

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
    const router = createAgentRouter({
      mcpService: createMockService(),
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    const agentA = createMockAgent('agent-a')
    const agentB = createMockAgent('agent-b')

    router.registerAgent(agentA)
    router.registerAgent(agentB)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    const agents = router.getAgents()

    if (agents.length !== 2) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤',
        message: `–û–∂–∏–¥–∞–ª–æ—Å—å 2 –∞–≥–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ ${agents.length}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ ID
    const retrievedAgent = router.getAgentById('agent-a')

    if (!retrievedAgent || retrievedAgent.id !== 'agent-a') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ ID',
      }
    }

    return {
      success: true,
      name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤',
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
 */
export async function testTaskRouting(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á')

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
    const mockService = createMockService()
    const router = createAgentRouter({
      mcpService: mockService,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    const agentA = createMockAgent('agent-a', true)
    const agentB = createMockAgent('agent-b', false)

    router.registerAgent(agentA)
    router.registerAgent(agentB)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    const task = createTestTask()
    const state = createTestAgentState()

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    const selectedAgent = await router.routeTask(task, state)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
    if (!selectedAgent || selectedAgent.id !== 'agent-a') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
        message: `–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç: ${selectedAgent?.id || 'null'}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ canHandle –≤—ã–∑–≤–∞–Ω –¥–ª—è –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if (
      (agentA.canHandle as MockFn).calls.length === 0 ||
      (agentB.canHandle as MockFn).calls.length === 0
    ) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
        message: '–ú–µ—Ç–æ–¥ canHandle –Ω–µ –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤',
      }
    }

    return {
      success: true,
      name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
      message: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ MCP
 */
export async function testBestAgentSelection(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞')

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º MCP
    const mockService = createMockService()
    const router = createAgentRouter({
      mcpService: mockService,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤, –æ–±–∞ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
    const agentA = createMockAgent('agent-a', true)
    const agentB = createMockAgent('agent-b', true)

    router.registerAgent(agentA)
    router.registerAgent(agentB)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    const task = createTestTask()
    const state = createTestAgentState()

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    const selectedAgent = await router.routeTask(task, state)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
    if (!selectedAgent || selectedAgent.id !== 'agent-a') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞',
        message: `–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç: ${selectedAgent?.id || 'null'}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MCP –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if ((mockService.processTask as MockFn).calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞',
        message: 'MCP –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞',
      }
    }

    return {
      success: true,
      name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞',
      message: '–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
 */
export async function testEventHandling(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π')

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Ç—Ä–µ–±—É–µ—Ç
  // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ü–∏–∏ EventEmitter, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ—É—Ç–µ—Ä–∞.
  // –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API —Ä–æ—É—Ç–µ—Ä–∞.
  logger.info(
    '‚ö†Ô∏è –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π —É—Å–ª–æ–≤–Ω–æ –ø—Ä–æ–π–¥–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API —Ä–æ—É—Ç–µ—Ä–∞)'
  )

  return {
    success: true,
    name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π',
    message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å–ª–æ–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
 */
export async function testErrorHandling(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫')

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
    const router = createAgentRouter({
      mcpService: createMockService(),
    })

    // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ canHandle
    const errorAgent: NetworkAgent = {
      id: 'error-agent',
      name: 'Error Agent',
      description: 'Agent that throws errors',
      capabilities: ['test'],
      canHandle: async () => {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ canHandle')
      },
      handle: async () => {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle')
      },
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const normalAgent = createMockAgent('normal-agent', true)

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    router.registerAgent(errorAgent)
    router.registerAgent(normalAgent)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    const task = createTestTask()
    const state = createTestAgentState()

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é - —Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const selectedAgent = await router.routeTask(task, state)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—à–∏–±–∫—É –∏ –≤—ã–±—Ä–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if (!selectedAgent || selectedAgent.id !== 'normal-agent') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
        message: `–ù–µ–≤–µ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞, –≤—ã–±—Ä–∞–Ω: ${selectedAgent?.id || 'null'}`,
      }
    }

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –æ–±–∞ –∞–≥–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏ –≤ canHandle
    router.registerAgent(errorAgent) // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
    const errorAgent2: NetworkAgent = {
      id: 'error-agent-2',
      name: 'Error Agent 2',
      description: 'Another agent that throws errors',
      capabilities: ['test'],
      canHandle: async () => {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ canHandle 2')
      },
      handle: async () => {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle 2')
      },
    }

    router.registerAgent(errorAgent)
    router.registerAgent(errorAgent2)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const routerWithDefault = createAgentRouter({
      mcpService: createMockService(),
      defaultAgentId: 'normal-agent',
    })

    routerWithDefault.registerAgent(errorAgent)
    routerWithDefault.registerAgent(errorAgent2)
    routerWithDefault.registerAgent(normalAgent)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const selectedDefault = await routerWithDefault.routeTask(task, state)

    if (!selectedDefault || selectedDefault.id !== 'normal-agent') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
        message: `–ù–µ–≤–µ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${selectedDefault?.id || 'null'}`,
      }
    }

    return {
      success: true,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–º–µ—Ä–∞–Ω–≥-–∑–∞–¥–∞—á (–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏)
 */
export async function testTaskDecompositionAndDelegation(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á (–±—É–º–µ—Ä–∞–Ω–≥)'
    )

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
    const mockService = createMockService()
    const router = createAgentRouter({
      mcpService: mockService,
    })

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    const state = createAgentState('main-agent')

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    const codeAgent = {
      id: 'code-agent',
      name: 'Code Generator',
      description: 'Specialized in generating code',
      capabilities: ['code_generation', 'code_analysis'],
      canHandle: createMockFn().mockReturnValue(
        Promise.resolve(true)
      ) as MockFn,
      handle: createMockFn().mockReturnValue(
        Promise.resolve({
          success: true,
          result: 'Code generated successfully',
        })
      ) as MockFn,
    }

    const documentationAgent = {
      id: 'documentation-agent',
      name: 'Documentation Expert',
      description: 'Specialized in writing documentation',
      capabilities: ['documentation'],
      canHandle: createMockFn().mockReturnValue(
        Promise.resolve(true)
      ) as MockFn,
      handle: createMockFn().mockReturnValue(
        Promise.resolve({
          success: true,
          result: 'Documentation written successfully',
        })
      ) as MockFn,
    }

    const testAgent = {
      id: 'test-agent',
      name: 'Testing Expert',
      description: 'Specialized in writing tests',
      capabilities: ['test_generation'],
      canHandle: createMockFn().mockReturnValue(
        Promise.resolve(true)
      ) as MockFn,
      handle: createMockFn().mockReturnValue(
        Promise.resolve({ success: true, result: 'Tests written successfully' })
      ) as MockFn,
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ
    router.registerAgent(codeAgent)
    router.registerAgent(documentationAgent)
    router.registerAgent(testAgent)

    // 1. –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–∞
    const complexTask = addTask(state, {
      type: TaskType.BOOMERANG,
      description:
        'Implement a complete feature with code, tests and documentation',
      priority: 10,
      dependencies: [],
      metadata: {
        projectName: 'Test Project',
        feature: 'Authentication',
      },
    })

    // 2. –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
    const subtaskDescriptions = [
      'Write authentication code (login/register)',
      'Create unit tests for authentication',
      'Write documentation for authentication API',
    ]

    const subtasks = decomposeTask(state, complexTask.id, subtaskDescriptions)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    if (subtasks.length !== 3) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–¥–∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–æ ${subtasks.length}`,
      }
    }

    if (complexTask.status !== TaskStatus.DECOMPOSED) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏: –æ–∂–∏–¥–∞–ª—Å—è DECOMPOSED, –ø–æ–ª—É—á–µ–Ω ${complexTask.status}`,
      }
    }

    // 3. –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–∑–∞–¥–∞—á—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–∑–∞–¥–∞—á—É (–∫–æ–¥) –∫ code-agent
    const codeTask = subtasks[0]
    const codeTaskAgent = await router.routeTask(codeTask, state)
    if (!codeTaskAgent || codeTaskAgent.id !== 'code-agent') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–ü–µ—Ä–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ code-agent, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ ${codeTaskAgent?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É'}`,
      }
    }

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
    delegateTask(state, codeTask.id, codeTaskAgent.id)

    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–¥–∑–∞–¥–∞—á—É (—Ç–µ—Å—Ç—ã) –∫ test-agent
    const testTask = subtasks[1]
    const testTaskAgent = await router.routeTask(testTask, state)
    if (!testTaskAgent || testTaskAgent.id !== 'test-agent') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–í—Ç–æ—Ä–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ test-agent, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ ${testTaskAgent?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É'}`,
      }
    }

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
    delegateTask(state, testTask.id, testTaskAgent.id)

    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ—Ç—å—é –ø–æ–¥–∑–∞–¥–∞—á—É (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) –∫ documentation-agent
    const docTask = subtasks[2]
    const docTaskAgent = await router.routeTask(docTask, state)
    if (!docTaskAgent || docTaskAgent.id !== 'documentation-agent') {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–¢—Ä–µ—Ç—å—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ documentation-agent, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ ${docTaskAgent?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É'}`,
      }
    }

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
    delegateTask(state, docTask.id, docTaskAgent.id)

    // 4. –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–∑–∞–¥–∞—á—É (–∫–æ–¥)
    await codeTaskAgent.handle(codeTask, state)
    updateTaskStatus(state, codeTask.id, TaskStatus.COMPLETED, {
      code: 'function authenticate() { return true; }',
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–¥–∑–∞–¥–∞—á—É (—Ç–µ—Å—Ç—ã)
    await testTaskAgent.handle(testTask, state)
    updateTaskStatus(state, testTask.id, TaskStatus.COMPLETED, {
      tests: 'test("auth works", () => { expect(authenticate()).toBe(true); })',
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ—Ç—å—é –ø–æ–¥–∑–∞–¥–∞—á—É (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
    await docTaskAgent.handle(docTask, state)
    updateTaskStatus(state, docTask.id, TaskStatus.COMPLETED, {
      docs: '# Authentication API\n\nCall authenticate() to verify user.',
    })

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏–ª–∞ —Å—Ç–∞—Ç—É—Å
    const updatedComplexTask = state.tasks.get(complexTask.id)
    if (
      !updatedComplexTask ||
      updatedComplexTask.status !== TaskStatus.COMPLETED
    ) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: `–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á: –æ–∂–∏–¥–∞–ª—Å—è COMPLETED, –ø–æ–ª—É—á–µ–Ω ${updatedComplexTask ? updatedComplexTask.status : 'task not found'}`,
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∑–∞–¥–∞—á —Å–æ–±—Ä–∞–Ω—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ
    const updatedTask = state.tasks.get(complexTask.id)
    if (!updatedTask || !updatedTask.subtaskResults) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
        message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∑–∞–¥–∞—á –Ω–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const subtaskIds = subtasks.map((task: Task) => task.id)
    for (const subtaskId of subtaskIds) {
      if (!updatedTask.subtaskResults[subtaskId]) {
        return {
          success: false,
          name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
          message: `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏ ${subtaskId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ`,
        }
      }
    }

    logger.info('‚úÖ –¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
    return {
      success: true,
      name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
      message: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–º–µ—Ä–∞–Ω–≥-–∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á:', error)
    return {
      success: false,
      name: '–¢–µ—Å—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
      error: error.stack,
    }
  }
}

/**
 * –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 */
export async function testMultipleTaskRouting(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á...')

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–µ—Ä–≤–∏—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    const mockService = {
      processTask: async (prompt: string) => {
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –±—É–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if (prompt.includes('DOCUMENTATION')) {
          return 'doc-agent'
        } else if (prompt.includes('CODE_GENERATION')) {
          return 'code-agent'
        }
        return 'universal-agent' // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
      },
      initialize: async () => {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      close: async () => {
        logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      getClient: () => {
        logger.info('üîå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
        return {}
      },
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
    const router = createAgentRouter({
      mcpService: mockService as Service,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    const docAgent: NetworkAgent = {
      id: 'doc-agent',
      name: 'Documentation Agent',
      description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
      capabilities: ['documentation'],
      canHandle: async (task: Task) => task.type === TaskType.DOCUMENTATION,
      handle: async () => {
        return { success: true, result: 'Documentation created' }
      },
    }

    const codeAgent: NetworkAgent = {
      id: 'code-agent',
      name: 'Code Agent',
      description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
      capabilities: ['code'],
      canHandle: async (task: Task) => task.type === TaskType.CODE_GENERATION,
      handle: async () => {
        return { success: true, result: 'Code generated' }
      },
    }

    const universalAgent: NetworkAgent = {
      id: 'universal-agent',
      name: 'Universal Agent',
      description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç',
      capabilities: ['code', 'documentation', 'other'],
      canHandle: async () => true,
      handle: async () => {
        return { success: true, result: 'Task completed' }
      },
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    router.registerAgent(docAgent)
    router.registerAgent(codeAgent)
    router.registerAgent(universalAgent)

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const state = createTestAgentState()

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const docTask: Task = {
      id: 'doc-task',
      type: TaskType.DOCUMENTATION,
      description: 'Create API documentation',
      priority: 5,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {
        requirements: ['documentation'],
      },
    }

    const codeTask: Task = {
      id: 'code-task',
      type: TaskType.CODE_GENERATION,
      description: 'Generate some code',
      priority: 5,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    const unknownTask: Task = {
      id: 'unknown-task',
      type: TaskType.SELF_IMPROVEMENT,
      description: 'Some unknown task',
      priority: 5,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {
        requirements: ['other'],
      },
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.tasks.set(docTask.id, docTask)
    state.tasks.set(codeTask.id, codeTask)
    state.tasks.set(unknownTask.id, unknownTask)

    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    const docResult = await router.routeTask(docTask, state)
    const codeResult = await router.routeTask(codeTask, state)
    const unknownResult = await router.routeTask(unknownTask, state)

    logger.debug(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:
      –ó–∞–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${docResult?.id || 'null'}
      –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${codeResult?.id || 'null'}
      –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: ${unknownResult?.id || 'null'}
    `)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    let success = true
    const errors: string[] = []

    if (!docResult) {
      success = false
      errors.push('‚ùå –ó–∞–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –∞–≥–µ–Ω—Ç–∞')
    } else if (docResult.id !== 'doc-agent') {
      success = false
      errors.push('‚ùå –ó–∞–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É')
    }

    if (!codeResult) {
      success = false
      errors.push('‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –∞–≥–µ–Ω—Ç–∞')
    } else if (codeResult.id !== 'code-agent') {
      success = false
      errors.push('‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É')
    }

    if (!unknownResult) {
      success = false
      errors.push('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –∞–≥–µ–Ω—Ç–∞')
    } else if (unknownResult.id !== 'universal-agent') {
      success = false
      errors.push('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É')
    }

    if (success) {
      logger.info('‚úÖ –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      return {
        success: true,
        name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á',
        message: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      }
    } else {
      logger.error(
        `‚ùå –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${errors.join(', ')}`
      )
      return {
        success: false,
        name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á',
        message: errors.join(', '),
      }
    }
  } catch (error: any) {
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á: ${error.message}`
    )
    return {
      success: false,
      name: '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á',
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á
 */
export async function testPriorityTaskRouting(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á...')

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–µ—Ä–≤–∏—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    const mockService: Service = {
      processTask: async (prompt: string) => {
        logger.debug(`üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${prompt.substring(0, 50)}...`)
        return 'high-priority-agent'
      },
      initialize: async () => {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      close: async () => {
        logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      getClient: () => {
        logger.info('üîå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
        return {}
      },
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    const router = createAgentRouter({
      mcpService: mockService,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã
    const highPriorityAgent: NetworkAgent = {
      id: 'agent-high',
      name: 'High Priority Agent',
      description: '–ê–≥–µ–Ω—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
      capabilities: ['test', 'high-priority'],
      canHandle: async () => true,
      handle: async () => ({ success: true }),
    }

    const lowPriorityAgent: NetworkAgent = {
      id: 'agent-low',
      name: 'Low Priority Agent',
      description: '–ê–≥–µ–Ω—Ç —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
      capabilities: ['test', 'low-priority'],
      canHandle: async () => true,
      handle: async () => ({ success: true }),
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    router.registerAgent(highPriorityAgent)
    router.registerAgent(lowPriorityAgent)

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á
    const state = createTestAgentState()

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    const highPriorityTask: Task = {
      id: 'task-high',
      type: TaskType.CODE_GENERATION,
      description: '–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞',
      priority: 10,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {},
    }

    const mediumPriorityTask: Task = {
      id: 'task-medium',
      type: TaskType.CODE_GENERATION,
      description: '–°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞',
      priority: 5,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {},
    }

    const lowPriorityTask: Task = {
      id: 'task-low',
      type: TaskType.CODE_GENERATION,
      description: '–ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞',
      priority: 1,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {},
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.tasks.set(highPriorityTask.id, highPriorityTask)
    state.tasks.set(mediumPriorityTask.id, mediumPriorityTask)
    state.tasks.set(lowPriorityTask.id, lowPriorityTask)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const nextTask = await router.getNextTaskToProcess(state)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    if (!nextTask) {
      throw new Error('–û—à–∏–±–∫–∞: –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    if (nextTask.id !== highPriorityTask.id) {
      throw new Error(
        `–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞. –û–∂–∏–¥–∞–ª–∞—Å—å ${highPriorityTask.id}, –ø–æ–ª—É—á–µ–Ω–∞ ${nextTask.id}`
      )
    }

    logger.info(
      `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: ${nextTask.id}`
    )

    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∞—Å—å —Å–Ω–æ–≤–∞
    highPriorityTask.status = TaskStatus.IN_PROGRESS
    state.tasks.set(highPriorityTask.id, highPriorityTask)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const secondNextTask = await router.getNextTaskToProcess(state)

    if (!secondNextTask) {
      throw new Error('–û—à–∏–±–∫–∞: –í—Ç–æ—Ä–∞—è —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    if (secondNextTask.id !== mediumPriorityTask.id) {
      throw new Error(
        `–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –≤—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞. –û–∂–∏–¥–∞–ª–∞—Å—å ${mediumPriorityTask.id}, –ø–æ–ª—É—á–µ–Ω–∞ ${secondNextTask.id}`
      )
    }

    logger.info(
      `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: ${secondNextTask.id}`
    )

    return {
      success: true,
      name: '–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
      message: '–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error: any) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á: ${error.message}`)
    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.stack,
    }
  }
}

/**
 * –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function testNextTaskSelection(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...')

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–µ—Ä–≤–∏—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    const mockService = {
      processTask: async (prompt: string) => {
        logger.debug(`üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${prompt.substring(0, 50)}...`)
        return 'test-agent'
      },
      initialize: async () => {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      close: async () => {
        logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      getClient: () => {
        logger.info('üîå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
        return {}
      },
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    const router = createAgentRouter({
      mcpService: mockService as Service,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const testAgent: NetworkAgent = {
      id: 'test-agent',
      name: 'Test Agent',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç',
      capabilities: ['code', 'documentation'],
      canHandle: async () => true,
      handle: async () => {
        return { success: true, result: 'Task completed' }
      },
    }

    router.registerAgent(testAgent)

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const state = createTestAgentState()

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const lowPriorityTask: Task = {
      id: 'low-priority',
      type: TaskType.CODE_GENERATION,
      description: 'Low priority task',
      priority: 1,
      status: TaskStatus.PENDING,
      created: new Date(Date.now() - 3000), // –°–æ–∑–¥–∞–Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥
      updated: new Date(Date.now() - 3000),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    const mediumPriorityTask: Task = {
      id: 'medium-priority',
      type: TaskType.CODE_GENERATION,
      description: 'Medium priority task',
      priority: 5,
      status: TaskStatus.PENDING,
      created: new Date(Date.now() - 2000), // –°–æ–∑–¥–∞–Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥
      updated: new Date(Date.now() - 2000),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    const highPriorityTask: Task = {
      id: 'high-priority',
      type: TaskType.CODE_GENERATION,
      description: 'High priority task',
      priority: 10,
      status: TaskStatus.PENDING,
      created: new Date(Date.now() - 1000), // –°–æ–∑–¥–∞–Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥
      updated: new Date(Date.now() - 1000),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    const inProgressTask: Task = {
      id: 'in-progress',
      type: TaskType.CODE_GENERATION,
      description: 'Task already in progress',
      priority: 10,
      status: TaskStatus.IN_PROGRESS,
      created: new Date(Date.now() - 4000), // –°–æ–∑–¥–∞–Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥
      updated: new Date(Date.now() - 500),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    const completedTask: Task = {
      id: 'completed',
      type: TaskType.CODE_GENERATION,
      description: 'Task already completed',
      priority: 10,
      status: TaskStatus.COMPLETED,
      created: new Date(Date.now() - 5000), // –°–æ–∑–¥–∞–Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
      updated: new Date(),
      dependencies: [],
      metadata: {
        requirements: ['code'],
      },
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.tasks.set(lowPriorityTask.id, lowPriorityTask)
    state.tasks.set(mediumPriorityTask.id, mediumPriorityTask)
    state.tasks.set(highPriorityTask.id, highPriorityTask)
    state.tasks.set(inProgressTask.id, inProgressTask)
    state.tasks.set(completedTask.id, completedTask)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const nextTask = await router.getNextTaskToProcess(state)

    logger.debug(`üìã –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${nextTask?.id || 'null'}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    let success = true
    const errors: string[] = []

    if (!nextTask) {
      success = false
      errors.push(
        `‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ (null), –æ–∂–∏–¥–∞–ª–∞—Å—å: ${highPriorityTask.id}`
      )
    } else if (nextTask.id !== highPriorityTask.id) {
      success = false
      errors.push(
        `‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: ${nextTask.id}, –æ–∂–∏–¥–∞–ª–∞—Å—å: ${highPriorityTask.id}`
      )
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é
    if (success && nextTask) {
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      const updatedTask = { ...highPriorityTask, status: TaskStatus.COMPLETED }
      state.tasks.set(highPriorityTask.id, updatedTask)

      // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const secondNextTask = await router.getNextTaskToProcess(state)

      logger.debug(
        `üìã –í—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: ${secondNextTask?.id || 'null'}`
      )

      if (!secondNextTask) {
        success = false
        errors.push(
          `‚ùå –í—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (null), –æ–∂–∏–¥–∞–ª–∞—Å—å: ${mediumPriorityTask.id}`
        )
      } else if (secondNextTask.id !== mediumPriorityTask.id) {
        success = false
        errors.push(
          `‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞: ${secondNextTask.id}, –æ–∂–∏–¥–∞–ª–∞—Å—å: ${mediumPriorityTask.id}`
        )
      }
    }

    if (success) {
      logger.info('‚úÖ –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      return {
        success: true,
        name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏',
        message: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞',
      }
    } else {
      logger.error(
        `‚ùå –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${errors.join(', ')}`
      )
      return {
        success: false,
        name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏',
        message: errors.join(', '),
      }
    }
  } catch (error: any) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: ${error.message}`)
    return {
      success: false,
      name: '–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏',
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
 */
async function testTaskDependencies(): Promise<TestResult> {
  logger.info(
    'üöÄ [AGENT_ROUTER_TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏'
  )

  try {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const service = createTestService('dependency-test-service')

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
    const router = createAgentRouter({
      serviceName: 'test-router-service',
    } as RouterConfig)

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    router.registerAgent({
      id: 'general-agent',
      capabilities: ['CODE_GENERATION', 'DOCUMENTATION', 'TEST_GENERATION'],
      priority: 1,
      maxLoad: 5,
    })

    // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
    const parentTask: Task = {
      id: 'parent-task',
      type: TaskType.CODE_GENERATION,
      description: 'Create main application code',
      status: TaskStatus.PENDING,
      dependencies: [],
      createdAt: new Date(),
      updatedAt: new Date(),
      priority: 1,
      metadata: {},
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    const childTask1: Task = {
      id: 'child-task-1',
      type: TaskType.TEST_GENERATION,
      description: 'Create tests for the application',
      status: TaskStatus.PENDING,
      dependencies: [
        {
          taskId: 'parent-task',
          type: 'REQUIRED',
        } as TaskDependency,
      ],
      createdAt: new Date(),
      updatedAt: new Date(),
      priority: 2,
      metadata: {},
    }

    const childTask2: Task = {
      id: 'child-task-2',
      type: TaskType.DOCUMENTATION,
      description: 'Create documentation for the application',
      status: TaskStatus.PENDING,
      dependencies: [
        {
          taskId: 'parent-task',
          type: 'REQUIRED',
        } as TaskDependency,
      ],
      createdAt: new Date(),
      updatedAt: new Date(),
      priority: 3,
      metadata: {},
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
    router.addTask(parentTask)
    router.addTask(childTask1)
    router.addTask(childTask2)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ—ë –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const nextTask = await router.getNextTaskToProcess()

    if (!nextTask) {
      throw new Error('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    if (nextTask.id !== 'parent-task') {
      throw new Error(`–û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–¥–∞—á–∞ parent-task, –ø–æ–ª—É—á–µ–Ω–æ: ${nextTask.id}`)
    }

    logger.info(
      `‚úÖ [AGENT_ROUTER_TEST]: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞: ${nextTask.id}`
    )

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—á–µ—Ä–Ω—é—é –∑–∞–¥–∞—á—É, –Ω–æ –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞,
    // —Ç–∞–∫ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

    // –ü–æ–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    router.updateTaskStatus('parent-task', TaskStatus.IN_PROGRESS)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    const unavailableTask = await router.getNextTaskToProcess()

    if (
      unavailableTask &&
      (unavailableTask.id === 'child-task-1' ||
        unavailableTask.id === 'child-task-2')
    ) {
      throw new Error(
        `–î–æ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞ ${unavailableTask.id} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏`
      )
    }

    logger.info(
      '‚úÖ [AGENT_ROUTER_TEST]: –î–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏'
    )

    // –ü–æ–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    router.updateTaskStatus('parent-task', TaskStatus.COMPLETED)

    // –¢–µ–ø–µ—Ä—å –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (child-task-2)
    const childTask = await router.getNextTaskToProcess()

    if (!childTask) {
      throw new Error(
        '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π'
      )
    }

    if (childTask.id !== 'child-task-2') {
      throw new Error(
        `–û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–¥–∞—á–∞ child-task-2 (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç), –ø–æ–ª—É—á–µ–Ω–æ: ${childTask.id}`
      )
    }

    logger.info(
      `‚úÖ [AGENT_ROUTER_TEST]: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: ${childTask.id}`
    )

    // –ü–æ–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—á–µ—Ä–Ω—é—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    router.updateTaskStatus('child-task-2', TaskStatus.COMPLETED)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä—É—é –¥–æ—á–µ—Ä–Ω—é—é –∑–∞–¥–∞—á—É
    const secondChildTask = await router.getNextTaskToProcess()

    if (!secondChildTask) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è –¥–æ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞')
    }

    if (secondChildTask.id !== 'child-task-1') {
      throw new Error(
        `–û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–¥–∞—á–∞ child-task-1, –ø–æ–ª—É—á–µ–Ω–æ: ${secondChildTask.id}`
      )
    }

    logger.info(
      `‚úÖ [AGENT_ROUTER_TEST]: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è –¥–æ—á–µ—Ä–Ω—è—è –∑–∞–¥–∞—á–∞: ${secondChildTask.id}`
    )

    return {
      success: true,
      message: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
    }
  } catch (error: any) {
    logger.error(
      `‚ùå [AGENT_ROUTER_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏: ${error.message}`
    )
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏: ${error.message}`,
      name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
 */
export async function runAgentRouterTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...')
  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const priorityRoutingResult = await testPriorityTaskRouting()
    results.push(priorityRoutingResult)

    const nextTaskResult = await testNextTaskSelection()
    results.push(nextTaskResult)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allSuccessful = results.every(result => result.success)
    if (allSuccessful) {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã')
    } else {
      logger.error(
        '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏'
      )
      results
        .filter(result => !result.success)
        .forEach(result => {
          logger.error(`‚ùå –¢–µ—Å—Ç "${result.name}": ${result.message}`)
        })
    }

    return results
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤: ${errorMessage}`
    )
    results.push({
      name: '–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
      success: false,
      message: errorMessage,
    })
    return results
  }
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
 */
if (require.main === module) {
  logger.info('üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞...')
  runAgentRouterTests()
    .then(results => {
      const passed = results.filter(r => r.success).length
      const failed = results.length - passed

      logger.info(`
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}
  ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed}
  üïí –í—Å–µ–≥–æ: ${results.length}
      `)

      if (failed > 0) {
        logger.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö:')
        for (const result of results.filter(r => !r.success)) {
          logger.error(`  - ${result.name}: ${result.message}`)
        }
        process.exit(1)
      } else {
        logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        process.exit(0)
      }
    })
    .catch(error => {
      logger.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
