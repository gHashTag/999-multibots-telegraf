/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js'
import { TestResult } from '../../types'
import { logger } from '../../../utils/logger'
import type { Task } from '../../../core/mcp/agent/state'
import { createMockFn } from '../../test-config'

/**
 * –¢–∏–ø –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
 */
type MockFn<T = any, R = any> = {
  (...args: T[]): R
  calls: T[][]
  mockReturnValue: (value: R) => MockFn<T, R>
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Supabase
 */
const SUPABASE_URL =
  process.env.SUPABASE_URL || 'https://yuukfqcsdhkyxegfwlcb.supabase.co'
const SUPABASE_KEY = process.env.SUPABASE_KEY || ''

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase
 * @returns Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
 */
function createSupabaseClient() {
  return createClient(SUPABASE_URL, SUPABASE_KEY)
}

/**
 * –¢–∏–ø —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface TestNetworkAgent {
  id: string
  name: string
  description: string
  capabilities: string[]
  priority: number
  maxConcurrentTasks: number
  currentTaskCount: number
  canHandle: (task: Task) => Promise<boolean>
  handle: (task: Task) => Promise<any>
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
 * @param capabilities - –ú–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
 * @param agentPriority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≥–µ–Ω—Ç–∞
 * @param maxConcurrentTasks - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * @returns –û–±—ä–µ–∫—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const createMockAgent = (
  id: string,
  capabilities: string[] = ['test', 'mock'],
  agentPriority = 1,
  maxConcurrentTasks = 3
): TestNetworkAgent => {
  return {
    id,
    name: `Agent ${id}`,
    description: `Test agent ${id}`,
    capabilities,
    priority: agentPriority,
    maxConcurrentTasks,
    currentTaskCount: 0,
    canHandle: createMockFn().mockReturnValue(Promise.resolve(true)) as MockFn,
    handle: createMockFn().mockReturnValue(
      Promise.resolve({ success: true })
    ) as MockFn,
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testCreateAutonomousTask(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏')

    const testTelegramId = 999888777
    const testBotName = 'test_bot'

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createSupabaseClient()

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const { data: taskId, error } = await supabase.rpc(
      'create_autonomous_task',
      {
        p_telegram_id: testTelegramId,
        p_bot_name: testBotName,
        p_type: 'TEST_TYPE',
        p_description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞',
        p_priority: 5,
        p_metadata: { test_key: 'test_value' },
      }
    )

    if (error) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`,
        error: error.message,
      }
    }

    if (!taskId) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: ID –Ω–µ –ø–æ–ª—É—á–µ–Ω',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
    const { data: task, error: fetchError } = await supabase
      .from('autonomous_tasks')
      .select('*')
      .eq('id', taskId)
      .single()

    if (fetchError) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ${fetchError.message}`,
        error: fetchError.message,
      }
    }

    if (!task) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    if (
      task.telegram_id !== testTelegramId ||
      task.bot_name !== testBotName ||
      task.type !== 'TEST_TYPE' ||
      task.priority !== 5
    ) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: '–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º',
        details: { task },
      }
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testGetNextAutonomousTask(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏')

    const testTelegramId = 999888777
    const testBotName = 'test_bot'

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createSupabaseClient()

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'PRIORITY_TEST',
      p_description: '–ó–∞–¥–∞—á–∞ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
      p_priority: 2,
    })

    // –ó–∞–¥–∞—á–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é,
    // –Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'PRIORITY_TEST',
      p_description: '–ó–∞–¥–∞—á–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
      p_priority: 5,
    })

    const { data: taskId3 } = await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'PRIORITY_TEST',
      p_description: '–ó–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
      p_priority: 9,
    })

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
    const { data: nextTask, error } = await supabase.rpc(
      'get_next_autonomous_task',
      {
        p_telegram_id: testTelegramId,
        p_bot_name: testBotName,
      }
    )

    if (error) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`,
        error: error.message,
      }
    }

    if (!nextTask) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    if (nextTask.id !== taskId3) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
        message: '–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
        details: {
          expectedTaskId: taskId3,
          actualTaskId: nextTask.id,
          task: nextTask,
        },
      }
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
      message: '–ó–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –∞–≥–µ–Ω—Ç–æ–≤
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testRouterIntegration(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º')

    const testTelegramId = 999888777
    const testBotName = 'test_bot'

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createSupabaseClient()

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const { data: taskId1 } = await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'ROUTER_TEST_A',
      p_description: '–ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ A',
      p_priority: 5,
      p_metadata: { capability: 'capability_a' },
    })

    const { data: taskId2 } = await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'ROUTER_TEST_B',
      p_description: '–ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ B',
      p_priority: 5,
      p_metadata: { capability: 'capability_b' },
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    const agentA = createMockAgent('agent-a', ['capability_a'], 5, 3)
    const agentB = createMockAgent('agent-b', ['capability_b'], 5, 3)

    // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    agentA.canHandle = async (task: Task) => {
      return task.metadata?.capability === 'capability_a'
    }

    agentB.canHandle = async (task: Task) => {
      return task.metadata?.capability === 'capability_b'
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    const { data: taskA, error: errorA } = await supabase
      .from('autonomous_tasks')
      .select('*')
      .eq('id', taskId1)
      .single()

    const { data: taskB, error: errorB } = await supabase
      .from('autonomous_tasks')
      .select('*')
      .eq('id', taskId2)
      .single()

    if (errorA || errorB) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ${
          errorA?.message || errorB?.message
        }`,
        error: errorA?.message || errorB?.message,
      }
    }

    if (!taskA || !taskB) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç A –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É A
    const canHandleTaskA = await agentA.canHandle(taskA as unknown as Task)
    const canHandleTaskB = await agentB.canHandle(taskB as unknown as Task)

    if (!canHandleTaskA || !canHandleTaskB) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º',
        message: '–ê–≥–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∏—Ö –∑–∞–¥–∞—á–∏',
        details: {
          agentACanHandleTaskA: canHandleTaskA,
          agentBCanHandleTaskB: canHandleTaskB,
        },
      }
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º',
      message: '–ê–≥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É—é—Ç—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∑–∞–¥–∞—á–∞–º',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testTaskDependencies(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏')

    const testTelegramId = 999888777
    const testBotName = 'test_bot'

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createSupabaseClient()

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    const { data: mainTaskId } = await supabase.rpc('create_autonomous_task', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
      p_type: 'DEPENDENCY_TEST_MAIN',
      p_description: '–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞',
      p_priority: 5,
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º—É—é –∑–∞–¥–∞—á—É
    const { data: dependentTaskId } = await supabase.rpc(
      'create_autonomous_task',
      {
        p_telegram_id: testTelegramId,
        p_bot_name: testBotName,
        p_type: 'DEPENDENCY_TEST_DEPENDENT',
        p_description: '–ó–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞',
        p_priority: 8,
        p_metadata: { dependency_id: mainTaskId },
      }
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    await supabase
      .from('autonomous_tasks')
      .update({ status: 'IN_PROGRESS' })
      .eq('id', mainTaskId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    const { data: nextTask, error } = await supabase.rpc(
      'get_next_autonomous_task',
      {
        p_telegram_id: testTelegramId,
        p_bot_name: testBotName,
      }
    )

    if (error) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: ${error.message}`,
        error: error.message,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ–π –∑–∞–¥–∞—á–µ–π
    if (nextTask && nextTask.id === dependentTaskId) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
        message:
          '–ó–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, —Ö–æ—Ç—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        details: { nextTask },
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    await supabase
      .from('autonomous_tasks')
      .update({ status: 'COMPLETED' })
      .eq('id', mainTaskId)

    // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞
    const { data: nextTaskAfter, error: afterError } = await supabase.rpc(
      'get_next_autonomous_task',
      {
        p_telegram_id: testTelegramId,
        p_bot_name: testBotName,
      }
    )

    if (afterError) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π: ${afterError.message}`,
        error: afterError.message,
      }
    }

    if (!nextTaskAfter || nextTaskAfter.id !== dependentTaskId) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
        message:
          '–ó–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏',
        details: {
          expectedTaskId: dependentTaskId,
          actualTaskId: nextTaskAfter?.id,
        },
      }
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await supabase.rpc('clean_test_autonomous_tasks', {
      p_telegram_id: testTelegramId,
      p_bot_name: testBotName,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
      message:
        '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π',
    }
  } catch (error: any) {
    return {
      success: false,
      name: '–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
      error: error.message,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runAutonomousTasksTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    results.push(await testCreateAutonomousTask())
    results.push(await testGetNextAutonomousTask())
    results.push(await testRouterIntegration())
    results.push(await testTaskDependencies())

    // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    logger.info(
      `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: ${totalTests}, —É—Å–ø–µ—à–Ω–æ: ${passedTests}, —Å –æ—à–∏–±–∫–∞–º–∏: ${failedTests}`
    )

    if (failedTests > 0) {
      const failedDetails = results
        .filter(r => !r.success)
        .map(r => r.name)
        .join(', ')
      logger.error(`‚ùå –¢–µ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏: ${failedDetails}`)
    }
  } catch (error: any) {
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: ${error.message}`
    )
    results.push({
      success: false,
      name: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á',
      message: `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${error.message}`,
      error: error.message,
    })
  }

  return results
}
