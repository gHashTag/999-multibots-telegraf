import axios from 'axios'
import { TEST_CONFIG } from '../../test-config'
import { logger } from '@/utils/logger'
// import { testSupabase } from '../../test-env' // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
import { TestResult } from '../../types'
import fetch from 'node-fetch'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ Replicate
 */
export class ReplicateWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const testName = `Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞',
        description: 'Webhook send test',
        status: payload.status,
        trainingId: payload.id,
      })

      const beforeStatus: string | null = null
      if (options.checkDatabase) {
        logger.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞, testSupabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
      }

      const webhookUrl = 'http://localhost:2999/api/webhooks/replicate'

      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      const afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      return {
        name: testName,
        success: true,
        message: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (status ${response.status})`,
        details: [
          `Response status: ${response.status}`,
          `Database check: ${options.checkDatabase ? 'skipped (testSupabase unavailable)' : 'disabled'}`,
          `Before status: ${beforeStatus || 'unknown'}`,
          `After status: ${afterStatus || 'unknown'}`,
          `Status changed: ${beforeStatus !== afterStatus}`,
        ],
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during webhook test',
        error: error instanceof Error ? error.message : String(error),
        payload,
      })

      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ Replicate',
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        details: { payload },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const testName = 'Successful training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = {
      task_id: 'test-task-success',
      result: 'http://example.com/result.zip',
    }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message:
          '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Successful training webhook test',
      sample,
    })

    const payload = {
      id: sample.task_id,
      status: 'COMPLETED',
      output: { uri: sample.result },
    }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testFailedTraining(): Promise<TestResult> {
    const testName = 'Failed training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = { task_id: 'test-task-failed', result: 'Error description' }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message:
          '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Failed training webhook test',
      sample,
    })

    const payload = {
      id: sample.task_id,
      status: 'ERROR',
      error: sample.result,
    }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testCanceledTraining(): Promise<TestResult> {
    const testName = 'Canceled training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = { task_id: 'test-task-canceled' }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message:
          '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Canceled training webhook test',
      sample,
    })

    const payload = { id: sample.task_id, status: 'PENDING' }
    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Running all webhook tests',
    })

    try {
      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const successResult = await this.testSuccessfulTraining()
      results.push(successResult)

      // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const failedResult = await this.testFailedTraining()
      results.push(failedResult)

      // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const canceledResult = await this.testCanceledTraining()
      results.push(canceledResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Webhook tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'Critical error during webhook tests',
        error: error instanceof Error ? error.message : String(error),
      })
      throw error
    }
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ BFL
 */
export class BFLWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const testName = `BFL Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'BFL webhook send test',
        status: payload.status,
        trainingId: payload.id,
      })

      const beforeStatus: string | null = null
      if (options.checkDatabase) {
        logger.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞, testSupabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
      }

      const webhookUrl = 'http://localhost:2999/api/webhooks/bfl'

      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      const afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      return {
        name: testName,
        success: true,
        message: `BFL –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (status ${response.status})`,
        details: [
          `Response status: ${response.status}`,
          `Database check: ${options.checkDatabase ? 'skipped (testSupabase unavailable)' : 'disabled'}`,
          `Before status: ${beforeStatus || 'unknown'}`,
          `After status: ${afterStatus || 'unknown'}`,
          `Status changed: ${beforeStatus !== afterStatus}`,
        ],
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during BFL webhook test',
        error: error instanceof Error ? error.message : String(error),
        payload,
      })

      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ BFL',
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ BFL –≤–µ–±—Ö—É–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        details: {
          payload,
          error: error instanceof Error ? error.message : String(error),
        },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const testName = 'Successful BFL training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = {
      task_id: 'test-bfl-task-success',
      result: 'http://example.com/result.zip',
    }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Successful BFL training webhook test',
      sample,
    })

    const payload = {
      id: sample.task_id,
      status: 'COMPLETED',
      output: { uri: sample.result },
    }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ BFL
   */
  async testFailedTraining(): Promise<TestResult> {
    const testName = 'Failed BFL training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = { task_id: 'test-bfl-task-failed', result: 'BFL Error' }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Failed BFL training webhook test',
      sample,
    })

    const payload = {
      id: sample.task_id,
      status: 'ERROR',
      error: sample.result,
    }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testCanceledTraining(): Promise<TestResult> {
    const testName = 'Canceled BFL training webhook test'
    if (!TEST_CONFIG.PAYMENT_TESTS) {
      return {
        name: testName,
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è PAYMENT_TESTS –≤ TEST_CONFIG',
      }
    }
    const sample = { task_id: 'test-bfl-task-canceled' }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Canceled BFL training webhook test',
      sample,
    })

    const payload = { id: sample.task_id, status: 'PENDING' }
    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
   */
  async runAllTests(): Promise<TestResult[]> {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Starting all BFL webhook tests',
    })

    const results = [
      await this.testSuccessfulTraining(),
      await this.testFailedTraining(),
      await this.testCanceledTraining(),
    ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    logger.info({
      message: `üèÅ –¢–µ—Å—Ç—ã BFL –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –Ω–µ—É—Å–ø–µ—à–Ω–æ`,
      description: `BFL webhook tests completed: ${successCount} success, ${failCount} failures`,
      results,
    })

    return results
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export class NeurophotoWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param payload –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param options –û–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendWebhook(
    payload: any,
    options: { checkDatabase?: boolean } = {}
  ): Promise<TestResult> {
    const testName = 'Neurophoto webhook test'

    try {
      logger.info({
        message: 'üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Sending neurophoto webhook',
        payload,
      })

      if (options.checkDatabase) {
        logger.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞, testSupabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
      }

      const webhookUrl = 'http://localhost:2999/api/webhooks/neurophoto'

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      })

      const responseData = await response.json()

      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      return {
        name: testName,
        success: true,
        message: `–í–µ–±—Ö—É–∫ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (status ${response.status})`,
        details: [
          `–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(responseData)}`,
          options.checkDatabase
            ? `–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: skipped (testSupabase unavailable)`
            : '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
        ],
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Error during neurophoto webhook test',
        error: error instanceof Error ? error.message : String(error),
        payload,
      })

      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤–µ–±—Ö—É–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
        details: {
          payload,
          error: error instanceof Error ? error.message : String(error),
        },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async testSuccessfulGeneration(): Promise<TestResult> {
    const testName = 'Successful neurophoto generation webhook test'
    const sample = {
      task_id: 'test-neuro-task-success',
      status: 'succeeded',
      result: ['http://example.com/img1.png'],
    }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      description: 'Successful neurophoto generation webhook test',
      sample,
    })

    const payload = {
      task_id: sample.task_id,
      status: sample.status,
      result: sample.result,
    }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async testProcessingStatus(): Promise<TestResult> {
    const testName = 'Processing neurophoto webhook test'
    const sample = {
      task_id: 'test-neuro-task-processing',
      status: 'processing',
    }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing',
      description: 'Processing neurophoto webhook test',
      sample,
    })

    const payload = { task_id: sample.task_id, status: sample.status }
    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async testContentModeration(): Promise<TestResult> {
    const testName = 'Content moderation neurophoto webhook test'
    const sample = {
      task_id: 'test-neuro-task-moderation',
      status: 'failed',
      error: 'NSFW content detected',
    }

    if (!sample) {
      return {
        name: testName,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      description: 'Content moderation neurophoto webhook test',
      sample,
    })

    const payload = { task_id: sample.task_id, status: sample.status }
    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(
    options: { checkDatabase?: boolean } = {}
  ): Promise<TestResult[]> {
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Running all neurophoto webhook tests',
      options,
    })

    const results: TestResult[] = []

    if (options.checkDatabase) {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      results.push(await this.testSuccessfulGeneration())
      results.push(await this.testProcessingStatus())
      results.push(await this.testContentModeration())
    } else {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ (dry run)
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ dry run (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)',
        description: 'Running neurophoto webhook tests in dry run mode',
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
      // for (const sample of TEST_CONFIG.neurophoto.samples) { // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —Ü–∏–∫–ª
      //   const payload = {
      //     task_id: sample.task_id,
      //     status: sample.status,
      //   }

      //   results.push(await this.sendWebhook(payload, { checkDatabase: false }))
      // }

      // –í–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏, –∫–∞–∫ –∏ –≤ –±–ª–æ–∫–µ if
      results.push(await this.testSuccessfulGeneration())
      results.push(await this.testProcessingStatus())
      results.push(await this.testContentModeration())
    }

    return results
  }
}
