import axios from 'axios'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { testSupabase } from './test-env'
import { TestResult } from './types'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ Replicate
 */
export class ReplicateWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞',
        description: 'Webhook send test',
        status: payload.status,
        trainingId: payload.id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let beforeStatus: string | null = null
      if (options.checkDatabase) {
        try {
          const { data } = await testSupabase
            .from('bfl_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          beforeStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status before test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.webhookPath}`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await testSupabase
            .from('bfl_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          afterStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status after test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
        details: [
          `Response status: ${response.status}`,
          `Database check: ${options.checkDatabase ? 'enabled' : 'disabled'}`,
          `Before status: ${beforeStatus || 'unknown'}`,
          `After status: ${afterStatus || 'unknown'}`,
          `Status changed: ${beforeStatus !== afterStatus}`,
        ],
        duration,
        testName: 'ReplicateWebhookTest',
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during webhook test',
        error: error instanceof Error ? error.message : String(error),
        payload,
      })

      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ Replicate',
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error.message : String(error),
        duration,
        testName: 'ReplicateWebhookTest',
        details: { error },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'COMPLETED'
    )

    if (!sample) {
      return {
        name: 'Successful training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'ReplicateWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Successful training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'COMPLETED',
      output: {
        uri: sample.result,
        version: '1.0.0',
      },
      metrics: {
        predict_time: 1.5,
      },
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testFailedTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'ERROR'
    )

    if (!sample) {
      return {
        name: 'Failed training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'ReplicateWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Failed training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'ERROR',
      error: sample.result ? sample.result : undefined,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testCanceledTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'PENDING'
    )

    if (!sample) {
      return {
        name: 'Canceled training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'ReplicateWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Canceled training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'PENDING',
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Running all webhook tests',
    })

    try {
      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const successResult = await this.testSuccessfulTraining()
      results.push(successResult)

      // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const failedResult = await this.testFailedTraining()
      results.push(failedResult)

      // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const canceledResult = await this.testCanceledTraining()
      results.push(canceledResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Webhook tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'Critical error during webhook tests',
        error: error instanceof Error ? error.message : String(error),
      })
      throw error
    }
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ BFL
 */
export class BFLWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `BFL Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'BFL webhook send test',
        status: payload.status,
        trainingId: payload.id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let beforeStatus: string | null = null
      if (options.checkDatabase) {
        try {
          const { data } = await testSupabase
            .from('bfl_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          beforeStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status before test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.bflWebhookPath}`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await testSupabase
            .from('bfl_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          afterStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status after test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `BFL –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
        details: [
          `Response status: ${response.status}`,
          `Database check: ${options.checkDatabase ? 'enabled' : 'disabled'}`,
          `Before status: ${beforeStatus || 'unknown'}`,
          `After status: ${afterStatus || 'unknown'}`,
          `Status changed: ${beforeStatus !== afterStatus}`,
        ],
        duration,
        testName: 'BFLWebhookTest',
      }
    } catch (error) {
      const duration = Date.now() - startTime
      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ BFL',
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error.message : String(error),
        duration,
        testName: 'BFLWebhookTest',
        details: { error: error instanceof Error ? error.message : String(error) },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'COMPLETED'
    )

    if (!sample) {
      return {
        name: 'Successful BFL training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'BFLWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Successful BFL training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'COMPLETED',
      output: {
        uri: sample.result,
        version: '1.0.0',
      },
      metrics: {
        predict_time: 1.5,
      },
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ BFL
   */
  async testFailedTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'ERROR'
    )

    if (!sample) {
      return {
        name: 'Failed BFL training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'BFLWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Failed BFL training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'ERROR',
      error: sample.result ? sample.result : undefined,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testCanceledTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'PENDING'
    )

    if (!sample) {
      return {
        name: 'Canceled BFL training webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'BFLWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Canceled BFL training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.task_id,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'PENDING',
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
   */
  async runAllTests(): Promise<TestResult[]> {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Starting all BFL webhook tests',
    })

    const results = [
      await this.testSuccessfulTraining(),
      await this.testFailedTraining(),
      await this.testCanceledTraining(),
    ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    logger.info({
      message: `üèÅ –¢–µ—Å—Ç—ã BFL –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –Ω–µ—É—Å–ø–µ—à–Ω–æ`,
      description: `BFL webhook tests completed: ${successCount} success, ${failCount} failures`,
      results,
    })

    return results
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export class NeurophotoWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param payload –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param options –û–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendWebhook(
    payload: any,
    options: { checkDatabase?: boolean } = {}
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = 'Neurophoto webhook test'

    try {
      logger.info({
        message: 'üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Sending neurophoto webhook',
        payload,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—Ä–æ—Å–∞
      let beforeData: any = null
      if (options.checkDatabase) {
        try {
          const { data } = await testSupabase
            .from('prompt_history')
            .select('*')
            .eq('task_id', payload.task_id)
            .limit(1)
            .single()

          beforeData = data || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get prompt data before test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await fetch(TEST_CONFIG.server.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      const responseData = await response.json()

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterData: any = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await testSupabase
            .from('prompt_history')
            .select('*')
            .eq('task_id', payload.task_id)
            .limit(1)
            .single()

          afterData = data || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get prompt data after test',
            error: error instanceof Error ? error.message : String(error),
          })
        }
      }

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `–í–µ–±—Ö—É–∫ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
        details: [
          `–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(responseData)}`,
          options.checkDatabase
            ? `–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify({
                beforeData,
                afterData,
                changed:
                  JSON.stringify(beforeData) !== JSON.stringify(afterData),
              })}`
            : '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
        ],
        duration,
        testName: 'NeurophotoWebhookTest',
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Error during neurophoto webhook test',
        error: error instanceof Error ? error.message : String(error),
        payload,
      })

      return {
        name: '–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error.message : String(error),
        duration,
        testName: 'NeurophotoWebhookTest',
        details: { error },
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async testSuccessfulGeneration(): Promise<TestResult> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const sample = TEST_CONFIG.neurophoto.samples.find(
      s => s.status === 'COMPLETED'
    )

    if (!sample) {
      return {
        name: 'Successful neurophoto generation webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è —Ç–µ—Å—Ç–∞
    const taskId = `${sample.task_id}-${Date.now()}`

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const { error } = await testSupabase.from('prompt_history').insert({
        task_id: taskId,
        telegram_id: TEST_CONFIG.user.telegramId,
        username: TEST_CONFIG.user.telegramId,
        bot_name: TEST_CONFIG.bot.name,
        language_code: 'ru',
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        status: 'processing',
      })

      if (error) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏',
          description: 'Error creating test record',
          error: error instanceof Error ? error.message : String(error),
        })

        return {
          name: 'Successful neurophoto generation webhook test',
          passed: false,
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          error: error instanceof Error ? error.message : String(error),
          duration: 0,
          testName: 'NeurophotoWebhookTest',
          details: { error: 'No sample found' },
        }
      }
    } catch (error) {
      return {
        name: 'Successful neurophoto generation webhook test',
        passed: false,
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        error: error instanceof Error ? error.message : String(error),
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      description: 'Successful neurophoto generation webhook test',
      taskId,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ–π–ª–æ–∞–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    const payload = {
      task_id: taskId,
      status: sample.status,
      result: 'result' in sample ? sample.result : undefined,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async testProcessingStatus(): Promise<TestResult> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const sample = TEST_CONFIG.neurophoto.samples.find(
      s => s.status === 'processing'
    )

    if (!sample) {
      return {
        name: 'Processing neurophoto webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ processing —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è —Ç–µ—Å—Ç–∞
    const taskId = `${sample.task_id}-${Date.now()}`

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const { error } = await testSupabase.from('prompt_history').insert({
        task_id: taskId,
        telegram_id: TEST_CONFIG.user.telegramId,
        username: TEST_CONFIG.user.telegramId,
        bot_name: TEST_CONFIG.bot.name,
        language_code: 'ru',
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        status: 'created',
      })

      if (error) {
        return {
          name: 'Processing neurophoto webhook test',
          passed: false,
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          error: error instanceof Error ? error.message : String(error),
          duration: 0,
          testName: 'NeurophotoWebhookTest',
          details: { error: 'No sample found' },
        }
      }
    } catch (error) {
      return {
        name: 'Processing neurophoto webhook test',
        passed: false,
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        error: error instanceof Error ? error.message : String(error),
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing',
      description: 'Processing neurophoto webhook test',
      taskId,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ–π–ª–æ–∞–¥ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing
    const payload = {
      task_id: taskId,
      status: sample.status,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async testContentModeration(): Promise<TestResult> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const sample = TEST_CONFIG.neurophoto.samples.find(
      s => s.status === 'Content Moderated'
    )

    if (!sample) {
      return {
        name: 'Content moderation neurophoto webhook test',
        passed: false,
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è —Ç–µ—Å—Ç–∞
    const taskId = `${sample.task_id}-${Date.now()}`

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const { error } = await testSupabase.from('prompt_history').insert({
        task_id: taskId,
        telegram_id: TEST_CONFIG.user.telegramId,
        username: TEST_CONFIG.user.telegramId,
        bot_name: TEST_CONFIG.bot.name,
        language_code: 'ru',
        prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        status: 'processing',
      })

      if (error) {
        return {
          name: 'Content moderation neurophoto webhook test',
          passed: false,
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          error: error instanceof Error ? error.message : String(error),
          duration: 0,
          testName: 'NeurophotoWebhookTest',
          details: { error: 'No sample found' },
        }
      }
    } catch (error) {
      return {
        name: 'Content moderation neurophoto webhook test',
        passed: false,
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        error: error instanceof Error ? error.message : String(error),
        duration: 0,
        testName: 'NeurophotoWebhookTest',
        details: { error: 'No sample found' },
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      description: 'Content moderation neurophoto webhook test',
      taskId,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ–π–ª–æ–∞–¥ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
    const payload = {
      task_id: taskId,
      status: sample.status,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(
    options: { checkDatabase?: boolean } = {}
  ): Promise<TestResult[]> {
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Running all neurophoto webhook tests',
      options,
    })

    const results: TestResult[] = []

    if (options.checkDatabase) {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      results.push(await this.testSuccessfulGeneration())
      results.push(await this.testProcessingStatus())
      results.push(await this.testContentModeration())
    } else {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ (dry run)
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ dry run (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)',
        description: 'Running neurophoto webhook tests in dry run mode',
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
      for (const sample of TEST_CONFIG.neurophoto.samples) {
        const payload = {
          task_id: sample.task_id,
          status: sample.status,
        }

        results.push(await this.sendWebhook(payload, { checkDatabase: false }))
      }
    }

    return results
  }
}
