import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import path from 'path'
import fs from 'fs'
import { TEST_CONFIG } from './test-config'

interface TestResult {
  passed: boolean
  description: string
  error?: Error
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))

async function cleanupTestData(telegram_id: string) {
  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
  await supabase.from('assets').delete().eq('telegram_id', telegram_id)

  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
  const testDir = path.join(process.cwd(), 'uploads', telegram_id)
  if (fs.existsSync(testDir)) {
    fs.rmSync(testDir, { recursive: true })
  }
}

async function runVideoWebhookTest(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const [successSample, failedSample] = TEST_CONFIG.videoWebhook.samples

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤–∏–¥–µ–æ', {
    description: 'Starting video webhook tests',
  })

  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await cleanupTestData(successSample.telegram_id)

    // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
    logger.info('üéØ –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞', {
      description: 'Test 1: Successful webhook processing',
    })

    const testEvent = {
      name: 'video/webhook',
      data: successSample,
    }

    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
      description: 'Sending event to Inngest',
      event: testEvent,
    })

    const result = await inngest.send(testEvent)

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Event sent',
      event_id: result.ids[0],
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è...', {
      description: 'Waiting for event processing',
    })

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    for (let i = 0; i < 5; i++) {
      await delay(1000)

      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î...', {
        description: 'Checking database record',
        attempt: i + 1,
      })

      const { data: savedAsset } = await supabase
        .from('assets')
        .select()
        .eq('telegram_id', successSample.telegram_id)
        .single()

      if (savedAsset) {
        logger.info('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î', {
          description: 'Record found in database',
          asset: savedAsset,
        })
        break
      }

      if (i === 4) {
        throw new Error('–í–∏–¥–µ–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è')
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î
    const { data: savedAsset } = await supabase
      .from('assets')
      .select()
      .eq('telegram_id', successSample.telegram_id)
      .single()

    if (!savedAsset) {
      throw new Error('–í–∏–¥–µ–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const assetValidation = [
      { field: 'type', expected: 'video' },
      { field: 'trigger_word', expected: 'video' },
      { field: 'telegram_id', expected: successSample.telegram_id },
      { field: 'public_url', expected: successSample.output },
      { field: 'text', expected: successSample.prompt },
      { field: 'model', expected: successSample.videoModel },
    ]

    for (const check of assetValidation) {
      if (savedAsset[check.field] !== check.expected) {
        throw new Error(
          `–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è ${check.field}. –û–∂–∏–¥–∞–ª–æ—Å—å: ${
            check.expected
          }, –ü–æ–ª—É—á–µ–Ω–æ: ${savedAsset[check.field]}`
        )
      }
    }

    results.push({
      passed: true,
      description:
        '‚úÖ –¢–µ—Å—Ç 1: –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
    })

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    logger.info('üéØ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏', {
      description: 'Test 2: Error handling',
    })

    const errorEvent = {
      name: 'video/webhook',
      data: failedSample,
    }

    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π –≤ Inngest', {
      description: 'Sending error event to Inngest',
      event: errorEvent,
    })

    const errorResult = await inngest.send(errorEvent)

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å –æ—à–∏–±–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Error event sent',
      event_id: errorResult.ids[0],
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π...', {
      description: 'Waiting for error event processing',
    })
    await delay(5000) // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    const { data: failedAsset } = await supabase
      .from('assets')
      .select()
      .eq('telegram_id', failedSample.telegram_id)
      .eq('text', failedSample.prompt)
      .single()

    if (failedAsset) {
      throw new Error('–ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î')
    }

    results.push({
      passed: true,
      description:
        '‚úÖ –¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∑–∞–ø–∏—Å—å –≤ –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω–∞',
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    results.push({
      passed: false,
      description: '‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω',
      error: error instanceof Error ? error : new Error('Unknown error'),
    })
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await cleanupTestData(successSample.telegram_id)
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const totalTests = results.length
  const passedTests = results.filter(r => r.passed).length

  logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
    description: 'Test results',
    total: totalTests,
    passed: passedTests,
    failed: totalTests - passedTests,
  })

  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runVideoWebhookTest().catch(error => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : 'Unknown error',
    })
    process.exit(1)
  })
}

export { runVideoWebhookTest }
