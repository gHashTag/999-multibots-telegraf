import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ambassador
 */
export async function testAmbassadorIntegration(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ambassador', {
    description: 'Running Ambassador integration test',
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    const { data, error } = await supabase
      .from('ambassador_profiles')
      .select('id')
      .limit(1)

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
    }

    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Successfully connected to database',
      data: data ? data.length : 0,
    })

    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ambassador –≤ –±—É–¥—É—â–µ–º

    return {
      success: true,
      message: 'Ambassador integration test completed successfully',
      name: 'testAmbassadorIntegration',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ambassador', {
      description: 'Error in Ambassador integration test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      message: error instanceof Error ? error.message : String(error),
      name: 'testAmbassadorIntegration',
    }
  }
}
