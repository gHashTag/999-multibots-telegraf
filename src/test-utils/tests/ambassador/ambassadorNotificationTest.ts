import { logger } from '@/utils/logger'
import { TestResult } from '@/test-utils/types'
import { inngestTestEngine } from '@/test-utils/config'
import { createTestUser, TestUser } from '@/test-utils/helpers/createTestUser'
import { createTestAvatar, Avatar } from '@/test-utils/helpers/createTestAvatar'
import {
  createMockAmbassador,
  Ambassador,
} from '@/test-utils/helpers/createMockAmbassador'
import { createMockPayment } from '@/test-utils/helpers/createMockPayment'
import { cleanupTestData } from '@/test-utils/helpers/cleanupTestData'
import { ModeEnum } from '@/types/mode'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –≤ –∏—Ö –±–æ—Ç–∞—Ö
 */
export async function testAmbassadorPaymentNotification(): Promise<TestResult> {
  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö', {
    description: 'Testing ambassador payment notification',
    testName: 'testAmbassadorPaymentNotification',
  })

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  let testUser: TestUser | null = null
  let testAvatar: Avatar | null = null
  let mockAmbassador: Ambassador | null = null

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
    logger.info('üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞', {
      description: 'Creating mock ambassador for test',
    })
    mockAmbassador = await createMockAmbassador({
      telegramId: '9876543210',
      username: 'test_ambassador',
      fullName: 'Test Ambassador',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Creating test user',
    })
    testUser = await createTestUser({
      telegramId: '1234567890',
      username: 'test_user',
      fullName: 'Test User',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä (–±–æ—Ç), –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É
    logger.info('üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (–±–æ—Ç–∞)', {
      description: 'Creating test avatar linked to ambassador',
    })
    testAvatar = await createTestAvatar({
      name: 'Test Bot',
      owner_id: mockAmbassador.id,
      ambassador_id: mockAmbassador.id,
    })

    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º', {
      description: 'Clearing event queue before test',
    })
    await inngestTestEngine.clearEvents()

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–æ—Ç–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
    logger.info('üí∞ –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Simulating payment event for ambassador bot',
      avatarId: testAvatar.id,
      userId: testUser.id,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: testUser.telegramId,
        amount: 100, // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        stars: 100, // –ó–≤–µ–∑–¥—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞)
        type: 'money_income', // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        description: 'Test payment for ambassador notification',
        bot_name: testAvatar.name,
        avatar_id: testAvatar.id, // ID –±–æ—Ç–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
        service_type: ModeEnum.TopUpBalance,
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
      description: 'Waiting for payment processing and notification dispatch',
    })
    await inngestTestEngine.waitForEvents({ timeoutMs: 5000 })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É', {
      description: 'Checking ambassador notification event',
    })

    const ambassadorNotificationEvents = await inngestTestEngine.getEvents({
      name: 'notification/ambassador',
      filter: event =>
        event.data.ambassador_id === mockAmbassador.id &&
        event.data.avatar_id === testAvatar.id,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (ambassadorNotificationEvents.length === 0) {
      logger.error('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        description: 'Ambassador notification was not sent',
        ambassadorId: mockAmbassador.id,
        avatarId: testAvatar.id,
      })

      return {
        success: false,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        name: 'testAmbassadorPaymentNotification',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationEvent = ambassadorNotificationEvents[0]
    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Ambassador notification was sent successfully',
      eventData: notificationEvent.data,
    })

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    if (
      notificationEvent.data.ambassador_id !== mockAmbassador.id ||
      notificationEvent.data.avatar_id !== testAvatar.id ||
      notificationEvent.data.amount !== 100 ||
      !notificationEvent.data.user_id
    ) {
      logger.error('‚ùå –î–∞–Ω–Ω—ã–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', {
        description: 'Invalid data in ambassador notification',
        expected: {
          ambassador_id: mockAmbassador.id,
          avatar_id: testAvatar.id,
          amount: 100,
        },
        actual: notificationEvent.data,
      })

      return {
        success: false,
        message: '–î–∞–Ω–Ω—ã–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
        name: 'testAmbassadorPaymentNotification',
      }
    }

    // –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
    return {
      success: true,
      message:
        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
      name: 'testAmbassadorPaymentNotification',
    }
  } catch (error: any) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤', {
      description: 'Error while testing ambassador notifications',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`,
      name: 'testAmbassadorPaymentNotification',
    }
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Cleaning up test data',
    })

    try {
      await cleanupTestData({
        users: testUser ? [testUser.id] : [],
        avatars: testAvatar ? [testAvatar.id] : [],
        ambassadors: mockAmbassador ? [mockAmbassador.id] : [],
      })
    } catch (cleanupError: any) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Error during test data cleanup',
        error: cleanupError.message,
      })
    }
  }
}
