import { TestResult } from '../../core/types'
import { logger } from '@/utils/logger'
import { inngestTestEngine } from '@/test-utils/test-config'

interface PaymentTestOptions {
  verbose?: boolean
}

/**
 * –°–æ–∑–¥–∞–µ—Ç TestResult –¥–ª—è –æ—à–∏–±–∫–∏
 */
function createErrorResult(name: string, error: unknown): TestResult {
  return {
    success: false,
    name,
    message: error instanceof Error ? error.message : 'Unknown error',
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function runTestWithErrorHandling(
  name: string,
  testFn: () => Promise<TestResult>
): Promise<TestResult> {
  try {
    return await testFn()
  } catch (error) {
    return createErrorResult(name, error)
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
 */
export async function runPaymentProcessorTests(
  options: PaymentTestOptions = {}
): Promise<TestResult[]> {
  const results: TestResult[] = []
  const { verbose = false } = options

  if (verbose) {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...')
  }

  // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
  await inngestTestEngine.clearEvents()

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.push(
    await runTestWithErrorHandling('Positive Payment Test', testPositivePayment)
  )
  results.push(
    await runTestWithErrorHandling('Negative Payment Test', testNegativePayment)
  )
  results.push(
    await runTestWithErrorHandling(
      'Invalid Payment Data Test',
      testInvalidPaymentData
    )
  )

  if (verbose) {
    const successful = results.filter(r => r.success).length
    const failed = results.filter(r => !r.success).length

    logger.info(`
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}
‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}
üìä –í—Å–µ–≥–æ: ${results.length}
    `)
  }

  return results
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
 */
async function testPositivePayment(): Promise<TestResult> {
  const telegramId = '123456789'
  const amount = 100
  const stars = 100

  await inngestTestEngine.sendEvent('payment/process', {
    telegram_id: telegramId,
    amount,
    stars,
    type: 'money_income',
    description: 'Test payment',
    bot_name: 'test_bot',
    service_type: 'TopUpBalance',
  })

  return {
    success: true,
    name: 'Positive Payment Test',
    message: 'Successfully processed positive payment',
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
 */
async function testNegativePayment(): Promise<TestResult> {
  const telegramId = '123456789'
  const amount = 50
  const stars = 50

  await inngestTestEngine.sendEvent('payment/process', {
    telegram_id: telegramId,
    amount,
    stars,
    type: 'money_expense',
    description: 'Test expense',
    bot_name: 'test_bot',
    service_type: 'TextToVideo',
  })

  return {
    success: true,
    name: 'Negative Payment Test',
    message: 'Successfully processed negative payment',
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function testInvalidPaymentData(): Promise<TestResult> {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  await inngestTestEngine.sendEvent('payment/process', {
    telegram_id: 'invalid_id',
    amount: -100, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
    type: 'invalid_type',
    description: 'Test invalid payment',
    bot_name: 'test_bot',
    service_type: 'Unknown',
  })

  return {
    success: true,
    name: 'Invalid Payment Data Test',
    message: 'Successfully handled invalid payment data',
  }
}
