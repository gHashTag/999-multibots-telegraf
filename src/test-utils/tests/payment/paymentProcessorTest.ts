import { logger } from '@/utils/logger'
import { TEST_CONFIG, inngestTestEngine } from '../../test-config'
import { TestResult } from '../../types'
import { ModeEnum } from './price/types/modes'

/**
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (paymentProcessor)
 *
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
 * 1. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 * 3. –û–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
 * - npm run test:payment
 * - npx ts-node -r tsconfig-paths/register src/test-utils/index.ts --category=payment
 *
 * @module src/test-utils/tests/payment/paymentProcessorTest
 */

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function testPaymentProcessor(): Promise<TestResult> {
  console.log('üöÄ [TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π')

  try {
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    inngestTestEngine.clearEvents()

    // 1. –¢–µ—Å—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    console.log('üîç [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')
    const positiveResult = await testPositivePayment()
    if (!positiveResult.success) {
      return {
        success: false,
        name: 'Payment Processor Test',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${positiveResult.message}`,
      }
    }

    // 2. –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)
    console.log('üîç [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞')
    const negativeResult = await testNegativePayment()
    if (!negativeResult.success) {
      return {
        success: false,
        name: 'Payment Processor Test',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${negativeResult.message}`,
      }
    }

    // 3. –¢–µ—Å—Ç —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)
    console.log(
      'üîç [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
    )
    const invalidDataResult = await testInvalidPaymentData()
    if (!invalidDataResult.success) {
      return {
        success: false,
        name: 'Payment Processor Test',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: ${invalidDataResult.message}`,
      }
    }

    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–¥—Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    return {
      success: true,
      name: 'Payment Processor Test',
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
    }
  } catch (error: any) {
    console.error(
      '‚ùå [TEST_ERROR]: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:',
      error
    )
    return {
      success: false,
      name: 'Payment Processor Test',
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testPositivePayment(): Promise<TestResult> {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const paymentData = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
      type: TransactionType.MONEY_INCOME,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TopUpBalance,
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      paymentData
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (!result) {
      return {
        success: false,
        name: 'Positive Payment Test',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const events = inngestTestEngine.getEventsByName('payment/process')
    if (events.length === 0) {
      return {
        success: false,
        name: 'Positive Payment Test',
        message: '–°–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
    const lastEvent = events[events.length - 1]
    if (
      lastEvent.data.telegram_id !== paymentData.telegram_id ||
      lastEvent.data.amount !== paymentData.amount ||
      lastEvent.data.type !== paymentData.type
    ) {
      return {
        success: false,
        name: 'Positive Payment Test',
        message: '–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º',
      }
    }

    console.log('‚úÖ [TEST]: –¢–µ—Å—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
    return {
      success: true,
      name: 'Positive Payment Test',
      message: '–¢–µ—Å—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error: any) {
    console.error(
      '‚ùå [TEST_ERROR]: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:',
      error
    )
    return {
      success: false,
      name: 'Positive Payment Test',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testNegativePayment(): Promise<TestResult> {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    const paymentData = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: -TEST_CONFIG.TEST_DATA.TEST_AMOUNT, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
      type: TransactionType.MONEY_INCOME,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TopUpBalance,
    }

    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    try {
      await inngestTestEngine.sendEvent('payment/process', paymentData)

      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
      console.error(
        '‚ùå [TEST_ERROR]: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É'
      )
      return {
        success: false,
        name: 'Negative Payment Test',
        message: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É',
      }
    } catch (error: any) {
      // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
      if (error.message.includes('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')) {
        console.log(
          '‚úÖ [TEST]: –¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞'
        )
        return {
          success: true,
          name: 'Negative Payment Test',
          message:
            '–¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞',
        }
      } else {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
        console.error(
          '‚ùå [TEST_ERROR]: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:',
          error
        )
        return {
          success: false,
          name: 'Negative Payment Test',
          message: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
        }
      }
    }
  } catch (error: any) {
    console.error(
      '‚ùå [TEST_ERROR]: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:',
      error
    )
    return {
      success: false,
      name: 'Negative Payment Test',
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testInvalidPaymentData(): Promise<TestResult> {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id)
    const paymentData = {
      // telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
      type: TransactionType.MONEY_INCOME,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TopUpBalance,
    }

    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    try {
      await inngestTestEngine.sendEvent('payment/process', paymentData)

      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
      console.error(
        '‚ùå [TEST_ERROR]: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –≤—ã–∑–≤–∞–ª–∏ –æ—à–∏–±–∫—É'
      )
      return {
        success: false,
        name: 'Invalid Data Payment Test',
        message: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É',
      }
    } catch (error: any) {
      // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
      if (error.message.includes('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ telegram_id')) {
        console.log(
          '‚úÖ [TEST]: –¢–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞'
        )
        return {
          success: true,
          name: 'Invalid Data Payment Test',
          message:
            '–¢–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞',
        }
      } else {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
        console.error(
          '‚ùå [TEST_ERROR]: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:',
          error
        )
        return {
          success: false,
          name: 'Invalid Data Payment Test',
          message: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
        }
      }
    }
  } catch (error: any) {
    console.error(
      '‚ùå [TEST_ERROR]: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:',
      error
    )
    return {
      success: false,
      name: 'Invalid Data Payment Test',
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentProcessorTests(
  options: { verbose?: boolean } = {}
): Promise<TestResult[]> {
  const startTime = Date.now()
  const results: TestResult[] = []

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
    description: 'Starting payment processor tests',
    verbose: options.verbose,
  })

  try {
    // –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const incomeResult = await testPaymentProcessor()
    results.push(incomeResult)

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const duration = Date.now() - startTime
    const successfulTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'Payment processor tests completed',
      duration,
      successful: successfulTests,
      total: totalTests,
      success_rate: `${Math.round((successfulTests / totalTests) * 100)}%`,
    })

    return results
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Error running payment processor tests',
      error: errorMessage,
      duration,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`,
      },
    ]
  }
}
