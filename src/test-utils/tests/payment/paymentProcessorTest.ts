import { InngestFunctionTester } from '../../testers/InngestFunctionTester'
import assert from '../../core/assert'
import {
  InngestTestMethod,
  InngestTestResult,
} from '../../testers/InngestFunctionTester'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (paymentProcessor)
 *
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
 * 1. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
 * - npm run test:payment
 * - npx ts-node -r tsconfig-paths/register src/test-utils/index.ts --category=payment
 *
 * @module src/test-utils/tests/payment/paymentProcessorTest
 */

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
const tester = new InngestFunctionTester({
  verbose: true,
})

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É paymentProcessor —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Ç–∏–ø–∞ 'money_income'
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
export async function testPaymentProcessorIncome(): Promise<InngestTestResult> {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
    description: 'Testing payment processor income function',
  })

  const result = await tester.runTest({
    method: InngestTestMethod.PaymentProcessorIncome,
    data: {
      service_type: ModeEnum.TopUpBalance,
    },
  })

  assert.assert(result.success, '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º')

  return result
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É paymentProcessor —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Ç–∏–ø–∞ 'money_expense'
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
 */
export async function testPaymentProcessorExpense(): Promise<InngestTestResult> {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
    description: 'Testing payment processor expense function',
  })

  const result = await tester.runTest({
    method: InngestTestMethod.PaymentProcessorExpense,
    data: {
      service_type: ModeEnum.TextToImage,
    },
  })

  assert.assert(result.success, '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º')

  return result
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 *
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 *
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentProcessorTests(): Promise<InngestTestResult[]> {
  logger.info({
    message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
    description: 'Running all payment processor tests',
  })

  const startTime = Date.now()
  const results: InngestTestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    results.push(await testPaymentProcessorIncome())

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    results.push(await testPaymentProcessorExpense())

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successCount = results.filter(r => r.success).length
    const totalCount = results.length
    const duration = Date.now() - startTime

    logger.info({
      message: `‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successCount}/${totalCount} —É—Å–ø–µ—à–Ω–æ`,
      description: 'Payment processor tests completed',
      success: successCount,
      total: totalCount,
      duration,
    })
  } catch (error) {
    const duration = Date.now() - startTime

    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
      description: 'Error running payment processor tests',
      error: error instanceof Error ? error.message : String(error),
      duration,
    })

    results.push({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
      error: error instanceof Error ? error : String(error),
    })
  }

  return results
}
