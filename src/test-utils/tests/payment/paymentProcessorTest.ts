import { logger } from '@/utils/logger'
import { TEST_CONFIG } from '../../test-config'
import { TestResult } from '../../types'
import { InngestTestEngineMock } from '../../test-config'
import { ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (paymentProcessor)
 *
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
 * 1. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 * 3. –û–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
 * - npm run test:payment
 * - npx ts-node -r tsconfig-paths/register src/test-utils/index.ts --category=payment
 *
 * @module src/test-utils/tests/payment/paymentProcessorTest
 */

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
const inngestTestEngine = new InngestTestEngineMock()

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function testPaymentProcessorIncome(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π'
  const startTime = Date.now()

  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
    description: 'Starting payment processor income test',
    test: testName,
  })

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    const paymentData = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
      type: 'money_income',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TopUpBalance,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      paymentData
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!result) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ payment/process')
    }

    const duration = Date.now() - startTime
    logger.info('‚úÖ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      description: 'Payment processor income test successfully completed',
      test: testName,
      duration,
    })

    return {
      success: true,
      name: testName,
      message: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: {
        telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
        amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
        duration,
      },
    }
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error executing payment processor income test',
      error: errorMessage,
      test: testName,
      duration,
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${errorMessage}`,
      details: {
        error: errorMessage,
        duration,
      },
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function testPaymentProcessorExpense(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π'
  const startTime = Date.now()

  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤', {
    description: 'Starting payment processor expense test',
    test: testName,
  })

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    const paymentData = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT / 2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—É–º–º—ã
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS / 2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –∑–≤–µ–∑–¥
      type: 'money_expense',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TextToImage,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      paymentData
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!result) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ payment/process')
    }

    const duration = Date.now() - startTime
    logger.info('‚úÖ –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      description: 'Payment processor expense test successfully completed',
      test: testName,
      duration,
    })

    return {
      success: true,
      name: testName,
      message: '–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: {
        telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
        amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT / 2,
        duration,
      },
    }
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Error executing payment processor expense test',
      error: errorMessage,
      test: testName,
      duration,
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤: ${errorMessage}`,
      details: {
        error: errorMessage,
        duration,
      },
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function testPaymentProcessorNegativeAmount(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π'
  const startTime = Date.now()

  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
    description: 'Starting invalid payment test',
    test: testName,
  })

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    const paymentData = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: -50, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
      stars: 50,
      type: 'money_income',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      service_type: ModeEnum.TopUpBalance,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      paymentData
    )

    // –í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ —á—Ç–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω—ã–π - —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
    if (result && result.success) {
      throw new Error('–ü–ª–∞—Ç–µ–∂ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –±—ã–ª –ø—Ä–∏–Ω—è—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞')
    }

    const duration = Date.now() - startTime
    logger.info('‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      description: 'Invalid payment test successfully completed',
      test: testName,
      duration,
    })

    return {
      success: true,
      name: testName,
      message:
        '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω)',
      details: {
        telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
        amount: -50,
        duration,
      },
    }
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    if (
      errorMessage.includes('—Å—É–º–º–∞') &&
      errorMessage.includes('–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
    ) {
      logger.info('‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        description:
          'Invalid payment test successfully completed with expected error',
        test: testName,
        duration,
        error: errorMessage,
      })

      return {
        success: true,
        name: testName,
        message:
          '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞)',
        details: {
          error: errorMessage,
          duration,
        },
      }
    }

    logger.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
      {
        description: 'Error executing invalid payment test',
        error: errorMessage,
        test: testName,
        duration,
      }
    )

    return {
      success: false,
      name: testName,
      message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${errorMessage}`,
      details: {
        error: errorMessage,
        duration,
      },
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentProcessorTests(
  options: { verbose?: boolean } = {}
): Promise<TestResult[]> {
  const startTime = Date.now()
  const results: TestResult[] = []

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
    description: 'Starting payment processor tests',
    verbose: options.verbose,
  })

  try {
    // –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const incomeResult = await testPaymentProcessorIncome()
    results.push(incomeResult)

    // –ï—Å–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è
    if (incomeResult.success) {
      const expenseResult = await testPaymentProcessorExpense()
      results.push(expenseResult)
    } else {
      logger.warn(
        '‚ö†Ô∏è –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
        {
          description: 'Expense test skipped due to income test failure',
        }
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.push({
        success: false,
        name: '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω)',
        message: '–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      })
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const invalidResult = await testPaymentProcessorNegativeAmount()
    results.push(invalidResult)

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const duration = Date.now() - startTime
    const successfulTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'Payment processor tests completed',
      duration,
      successful: successfulTests,
      total: totalTests,
      success_rate: `${Math.round((successfulTests / totalTests) * 100)}%`,
    })

    return results
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Error running payment processor tests',
      error: errorMessage,
      duration,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`,
      },
    ]
  }
}
