import { logger } from '@/utils/logger'
import assert from '@/test-utils/core/assert'
import { InngestFunctionTester } from '../../testers/InngestFunctionTester'
import { ModeEnum } from '@/types/modes'
import { v4 as uuidv4 } from 'uuid'

/**
 * –¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ Payment Processor
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export class PaymentProcessorTester extends InngestFunctionTester<any, any> {
  constructor(options: any = {}) {
    super('payment-processor', {
      name: 'Payment Processor Test',
      ...options,
    })
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async testSuccessfulBalanceTopUp(): Promise<any> {
    const telegram_id = '123456789'
    const amount = 100
    const bot_name = 'test_bot'

    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Testing successful balance top-up',
      telegram_id,
      amount,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      telegram_id,
      amount,
      type: 'money_income',
      description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      bot_name,
      service_type: ModeEnum.TextToImage,
      stars: amount,
    }

    // –ú–æ–∫–∞–µ–º getUserBalance —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this._mockGetUserBalance(telegram_id, 500)

    // –ú–æ–∫–∞–µ–º createSuccessfulPayment —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–ª –¥–∞–Ω–Ω—ã–µ
    this._mockCreateSuccessfulPayment()

    // –ú–æ–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    this._mockUpdateBalance()

    // –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this._mockSendNotification()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
    const result = await this.sendEvent('payment/process', { data: eventData })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    assert.equal(result.success, true)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    assert.equal(result.balanceChange.before, 500)
    assert.equal(result.balanceChange.after, 600)
    assert.equal(result.balanceChange.difference, 100)

    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Successful balance top-up test completed',
      result,
    })

    return result
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
   */
  async testSuccessfulBalanceCharge(): Promise<any> {
    const telegram_id = '123456789'
    const amount = 50 // –°–ø–∏—Å—ã–≤–∞–µ–º–∞—è —Å—É–º–º–∞
    const bot_name = 'test_bot'
    const initialBalance = 200 // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Testing successful balance charge',
      telegram_id,
      amount,
      initialBalance,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      telegram_id,
      amount,
      type: 'money_expense',
      description: '–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏',
      bot_name,
      service_type: ModeEnum.TextToImage,
      stars: amount,
    }

    // –ú–æ–∫–∞–µ–º getUserBalance —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this._mockGetUserBalance(telegram_id, initialBalance)

    // –ú–æ–∫–∞–µ–º createSuccessfulPayment —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–ª –¥–∞–Ω–Ω—ã–µ
    this._mockCreateSuccessfulPayment()

    // –ú–æ–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    this._mockUpdateBalance()

    // –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this._mockSendNotification()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
    const result = await this.sendEvent('payment/process', { data: eventData })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    assert.equal(result.success, true)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    assert.equal(result.balanceChange.before, initialBalance)
    assert.equal(result.balanceChange.after, initialBalance - amount)
    assert.equal(result.balanceChange.difference, -amount)

    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Successful balance charge test completed',
      result,
    })

    return result
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
   */
  async testInsufficientFunds(): Promise<any> {
    const telegram_id = '123456789'
    const amount = 100 // –°–ø–∏—Å—ã–≤–∞–µ–º–∞—è —Å—É–º–º–∞
    const initialBalance = 50 // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const bot_name = 'test_bot'

    logger.info('üß™ –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Testing insufficient funds',
      telegram_id,
      amount,
      initialBalance,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      telegram_id,
      amount,
      type: 'money_expense',
      description: '–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏',
      bot_name,
      service_type: ModeEnum.TextToImage,
    }

    // –ú–æ–∫–∞–µ–º getUserBalance —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this._mockGetUserBalance(telegram_id, initialBalance)

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
      await this.sendEvent('payment/process', { data: eventData })
      
      // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ, —á—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
      assert.fail('–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞')
      return { success: false }
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
      const errorMessage = error instanceof Error ? error.message : String(error)
      assert.isTrue(
        errorMessage.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤') || 
        errorMessage.includes('insufficient funds'),
        `–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö, –ø–æ–ª—É—á–µ–Ω–æ: ${errorMessage}`
      )

      logger.info('‚úÖ –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        description: 'Insufficient funds test completed successfully',
        errorMessage,
      })

      return { 
        success: true, 
        errorCaught: true,
        errorMessage 
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async testNegativeAmount(): Promise<any> {
    const telegram_id = '123456789'
    const amount = -50 // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
    const bot_name = 'test_bot'

    logger.info('üß™ –¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Testing negative payment amount',
      telegram_id,
      amount,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      telegram_id,
      amount,
      type: 'money_income',
      description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π',
      bot_name,
      service_type: ModeEnum.TextToImage,
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
      await this.sendEvent('payment/process', { data: eventData })
      
      // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ, —á—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
      assert.fail('–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã')
      return { success: false }
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
      const errorMessage = error instanceof Error ? error.message : String(error)
      assert.isTrue(
        errorMessage.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞') || 
        errorMessage.includes('–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π') ||
        errorMessage.includes('Invalid amount'),
        `–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–µ, –ø–æ–ª—É—á–µ–Ω–æ: ${errorMessage}`
      )

      logger.info('‚úÖ –¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        description: 'Negative payment amount test completed successfully',
        errorMessage,
      })

      return { 
        success: true, 
        errorCaught: true,
        errorMessage 
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Payment Processor
   */
  async runAllTests(): Promise<any[]> {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Payment Processor', {
      description: 'Running all Payment Processor tests',
    })

    const results = []

    try {
      const topUpResult = await this.testSuccessfulBalanceTopUp()
      results.push({
        name: '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
        success: topUpResult.success,
        result: topUpResult,
      })
    } catch (error) {
      results.push({
        name: '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
        success: false,
        error: error instanceof Error ? error.message : String(error),
      })
    }

    try {
      const chargeResult = await this.testSuccessfulBalanceCharge()
      results.push({
        name: '–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞',
        success: chargeResult.success,
        result: chargeResult,
      })
    } catch (error) {
      results.push({
        name: '–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞',
        success: false,
        error: error instanceof Error ? error.message : String(error),
      })
    }

    try {
      const insufficientResult = await this.testInsufficientFunds()
      results.push({
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
        success: insufficientResult.success && insufficientResult.errorCaught,
        result: insufficientResult,
      })
    } catch (error) {
      results.push({
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
        success: false,
        error: error instanceof Error ? error.message : String(error),
      })
    }

    try {
      const negativeResult = await this.testNegativeAmount()
      results.push({
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã',
        success: negativeResult.success && negativeResult.errorCaught,
        result: negativeResult,
      })
    } catch (error) {
      results.push({
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã',
        success: false,
        error: error instanceof Error ? error.message : String(error),
      })
    }

    const successCount = results.filter(r => r.success).length
    const totalCount = results.length

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Payment Processor –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
      description: 'All Payment Processor tests completed',
      successCount,
      totalCount,
    })

    return results
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Payment Processor
   */
  async executeTest(method?: string): Promise<any> {
    logger.info('üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ Payment Processor', {
      description: 'Executing Payment Processor tests',
      method: method || 'all',
    })

    const startTime = Date.now()

    try {
      let result

      if (!method || method === 'all') {
        result = await this.runAllTests()
      } else if (method === 'topUp') {
        result = await this.testSuccessfulBalanceTopUp()
      } else if (method === 'charge') {
        result = await this.testSuccessfulBalanceCharge()
      } else if (method === 'insufficient') {
        result = await this.testInsufficientFunds()
      } else if (method === 'negative') {
        result = await this.testNegativeAmount()
      } else {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method}`)
      }

      const endTime = Date.now()
      const duration = endTime - startTime

      logger.info('‚úÖ –¢–µ—Å—Ç—ã Payment Processor —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
        description: 'Payment Processor tests successfully completed',
        duration,
        method: method || 'all',
      })

      return result
    } catch (error) {
      const endTime = Date.now()
      const duration = endTime - startTime

      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ Payment Processor', {
        description: 'Error executing Payment Processor tests',
        error: error instanceof Error ? error.message : String(error),
        duration,
        method: method || 'all',
      })

      throw error
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è

  private _mockGetUserBalance(telegram_id: string, initialBalance: number): void {
    this.mockFunction('@/core/supabase/getUserBalance', async (tid: string) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      assert.equal(tid, telegram_id)
      return initialBalance
    })
  }

  private _mockCreateSuccessfulPayment(): void {
    this.mockFunction('@/core/supabase/createSuccessfulPayment', async (params: any) => {
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      return {
        id: uuidv4(),
        created_at: new Date().toISOString(),
        ...params,
      }
    })
  }

  private _mockUpdateBalance(): void {
    this.mockFunction('supabase.from', () => ({
      update: () => ({
        eq: () => ({
          eq: () => ({ error: null })
        })
      })
    }))
  }

  private _mockSendNotification(): void {
    this.mockFunction('@/helpers/sendTransactionNotification', async () => {
      return { success: true }
    })
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Payment Processor
 */
export async function runPaymentProcessorTests(options: { verbose?: boolean } = {}): Promise<any> {
  const tester = new PaymentProcessorTester({
    verbose: options.verbose,
  })

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Payment Processor...', {
    description: 'Starting Payment Processor Tests...',
  })

  try {
    const results = await tester.executeTest()
    
    return {
      success: true,
      results,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ Payment Processor', {
      error: error instanceof Error ? error.message : String(error),
    })
    
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    }
  }
} 