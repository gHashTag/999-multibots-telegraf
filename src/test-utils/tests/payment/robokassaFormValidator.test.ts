import axios from 'axios';
import { logger } from '@/utils/logger';
import { TEST_PAYMENT_CONFIG } from './test-config';
import { MERCHANT_LOGIN, PASSWORD1, TEST_PASSWORD1, isDev } from '@/config';
import md5 from 'md5';
// –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Jest globals
import assert from '@/test-utils/core/assert';

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã Robokassa
 */
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ Jest
export async function runRobokassaFormTests(): Promise<any> {
  const testResults = {
    success: true,
    results: [] as any[],
  };
  
  const merchantLogin = MERCHANT_LOGIN;
  const password1 = PASSWORD1;
  const testPassword1 = TEST_PASSWORD1;
  const useTestMode = isDev;

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL Robokassa —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
   */
  function generateValidRobokassaUrl(
    outSum: number,
    invId: number,
    description: string,
    isTest: boolean = useTestMode
  ): string {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    const actualPassword = isTest && testPassword1 ? testPassword1 : password1;
    
    logger.info('üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL –¥–ª—è Robokassa', {
      description: 'Generating test Robokassa URL',
      merchantLogin,
      outSum,
      invId,
      isTestMode: isTest
    });

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ invId - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if (!Number.isInteger(invId) || invId > 2147483647) {
      logger.warn('‚ö†Ô∏è InvId –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω', {
        description: 'Warning: InvId is incorrect, will be converted',
        originalInvId: invId,
      });
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      invId = Math.floor(invId % 1000000);
    }

    const signatureString = `${merchantLogin}:${outSum}:${invId}:${actualPassword}`;
    const signatureValue = md5(signatureString).toUpperCase();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL Robokassa
    const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx';

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params.append('MerchantLogin', merchantLogin || '');
    params.append('OutSum', outSum.toString());
    params.append('InvId', invId.toString());
    params.append('Description', description);
    params.append('SignatureValue', signatureValue);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if (isTest) {
      params.append('IsTest', '1');
    }

    return `${baseUrl}?${params.toString()}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
   */
  async function checkPaymentFormUrl(url: string): Promise<{
    isValid: boolean;
    statusCode?: number;
    error?: string;
    content?: string;
  }> {
    try {
      const response = await axios.get(url, {
        validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        maxRedirects: 5 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      });

      const isHtmlForm = response.data && 
                         (response.data.includes('<form') || 
                          response.data.includes('robokassa') ||
                          response.data.includes('payment'));

      return {
        isValid: response.status === 200 && isHtmlForm,
        statusCode: response.status,
        content: typeof response.data === 'string' ? response.data.substring(0, 500) : 'Not a string response'
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã', {
        error: error instanceof Error ? error.message : String(error),
        url
      });
      
      return {
        isValid: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  function validateUrlParameters(url: string): { 
    isValid: boolean; 
    missingParams: string[] 
  } {
    const parsedUrl = new URL(url);
    const requiredParams = ['MerchantLogin', 'OutSum', 'InvId', 'Description', 'SignatureValue'];
    const missingParams = [];

    for (const param of requiredParams) {
      if (!parsedUrl.searchParams.has(param)) {
        missingParams.push(param);
      }
    }

    return {
      isValid: missingParams.length === 0,
      missingParams
    };
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  async function testValidUrlGeneration() {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL Robokassa');
    
    try {
      const amount = TEST_PAYMENT_CONFIG.amounts.small; // –ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      const invId = Math.floor(Date.now() / 1000); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
      const description = '–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥';

      const url = generateValidRobokassaUrl(amount, invId, description);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const paramsCheck = validateUrlParameters(url);
      assert.isTrue(paramsCheck.isValid, 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      
      if (!paramsCheck.isValid) {
        logger.error('‚ùå URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', {
          url,
          missingParams: paramsCheck.missingParams
        });
        
        return {
          name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL',
          success: false,
          error: `URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${paramsCheck.missingParams.join(', ')}`
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
      const result = await checkPaymentFormUrl(url);

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      if (!result.isValid) {
        logger.error('‚ùå URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω', {
          url,
          statusCode: result.statusCode,
          error: result.error
        });
        
        if (result.content) {
          logger.info('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:', {
            content: result.content
          });
        }
        
        return {
          name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL',
          success: false,
          error: `URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${result.error || `–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${result.statusCode}`}`
        };
      }

      logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: URL –≤–∞–ª–∏–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω', { url });
      
      return {
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL',
        success: true,
        url
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –ø–ª–∞—Ç–µ–∂–∞
   */
  async function testDifferentAmounts() {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º –ø–ª–∞—Ç–µ–∂–∞');
    
    try {
      const testAmounts = [
        TEST_PAYMENT_CONFIG.amounts.small,
        TEST_PAYMENT_CONFIG.amounts.medium,
        1.99, // –î—Ä–æ–±–Ω–∞—è —Å—É–º–º–∞
        10000 // –ö—Ä—É–ø–Ω–∞—è —Å—É–º–º–∞
      ];
      
      const results = [];

      for (const amount of testAmounts) {
        const invId = Math.floor(Date.now() / 1000) + Math.floor(Math.random() * 1000);
        const description = `–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã ${amount} —Ä—É–±.`;

        const url = generateValidRobokassaUrl(amount, invId, description);
        const result = await checkPaymentFormUrl(url);

        logger.info(`üß™ –¢–µ—Å—Ç URL —Å —Å—É–º–º–æ–π ${amount} —Ä—É–±.`, {
          isValid: result.isValid,
          statusCode: result.statusCode
        });
        
        results.push({
          amount,
          isValid: result.isValid,
          statusCode: result.statusCode
        });
        
        if (!result.isValid) {
          return {
            name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º',
            success: false,
            error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–µ ${amount}: ${result.error || `–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${result.statusCode}`}`,
            results
          };
        }
      }
      
      logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –≤—Å–µ —Å—É–º–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º',
        success: true,
        results
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º', {
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É–º–º',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö InvId
   */
  function testInvalidInvId() {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö InvId');
    
    try {
      const amount = TEST_PAYMENT_CONFIG.amounts.small;
      const description = '–¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º InvId';
      
      // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π InvId (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω)
      const hugeInvId = 9999999999;
      const url = generateValidRobokassaUrl(amount, hugeInvId, description);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ URL InvId –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const parsedUrl = new URL(url);
      const invIdParam = parseInt(parsedUrl.searchParams.get('InvId') || '0');
      
      assert.isTrue(invIdParam < 1000000, 'InvId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 1000000');
      
      logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ InvId –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö InvId',
        success: true,
        originalInvId: hugeInvId,
        correctedInvId: invIdParam
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö InvId', {
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö InvId',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã (–ø–æ–¥–ø–∏—Å–∏)
   */
  function testSignatureGeneration() {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏');
    
    try {
      const amount = TEST_PAYMENT_CONFIG.amounts.small;
      const invId = Math.floor(Date.now() / 1000);
      const description = '–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏';

      const url = generateValidRobokassaUrl(amount, invId, description, true);
      const parsedUrl = new URL(url);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
      const urlMerchantLogin = parsedUrl.searchParams.get('MerchantLogin');
      const urlOutSum = parsedUrl.searchParams.get('OutSum');
      const urlInvId = parsedUrl.searchParams.get('InvId');
      const urlSignatureValue = parsedUrl.searchParams.get('SignatureValue');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å
      assert.strictEqual(urlMerchantLogin, merchantLogin, 'MerchantLogin –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
      assert.strictEqual(urlOutSum, amount.toString(), 'OutSum –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
      assert.strictEqual(urlInvId, invId.toString(), 'InvId –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
      assert.isTrue(!!urlSignatureValue, 'SignatureValue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const actualPassword = testPassword1 || password1;
      const expectedSignatureString = `${merchantLogin}:${amount}:${invId}:${actualPassword}`;
      const expectedSignature = md5(expectedSignatureString).toUpperCase();
      
      assert.strictEqual(urlSignatureValue, expectedSignature, '–ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π');
      
      logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      return {
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏',
        success: true,
        signature: urlSignatureValue
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏', {
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  function testTestModeFlag() {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞');
    
    try {
      const amount = TEST_PAYMENT_CONFIG.amounts.small;
      const invId = Math.floor(Date.now() / 1000);
      const description = '–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ IsTest';

      // URL —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
      const urlWithTestMode = generateValidRobokassaUrl(amount, invId, description, true);
      const parsedUrlWithTest = new URL(urlWithTestMode);
      assert.strictEqual(parsedUrlWithTest.searchParams.get('IsTest'), '1', 'IsTest –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω 1');

      // URL –±–µ–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
      const urlWithoutTestMode = generateValidRobokassaUrl(amount, invId, description, false);
      const parsedUrlWithoutTest = new URL(urlWithoutTestMode);
      assert.isFalse(parsedUrlWithoutTest.searchParams.has('IsTest'), 'IsTest –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å');
      
      logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ IsTest',
        success: true,
        urlWithTest: urlWithTestMode,
        urlWithoutTest: urlWithoutTestMode
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ IsTest', {
        error: error instanceof Error ? error.message : String(error)
      });
      
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ IsTest',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º—ã Robokassa...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    testResults.results.push(await testValidUrlGeneration());
    testResults.results.push(await testDifferentAmounts());
    testResults.results.push(testInvalidInvId());
    testResults.results.push(testSignatureGeneration());
    testResults.results.push(testTestModeFlag());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
    const failedTests = testResults.results.filter(result => !result.success);
    
    if (failedTests.length > 0) {
      testResults.success = false;
      logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã:', {
        failedCount: failedTests.length,
        failedTests: failedTests.map(test => test.name)
      });
    } else {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    }
    
    return testResults;
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      error: error instanceof Error ? error.message : String(error)
    });
    
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  (async () => {
    const results = await runRobokassaFormTests();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', JSON.stringify(results, null, 2));
    process.exit(results.success ? 0 : 1);
  })();
} 