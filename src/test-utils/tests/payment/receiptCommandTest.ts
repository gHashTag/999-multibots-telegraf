import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { TEST_CONFIG } from '@/test-utils/test-config'
import { MockTelegram } from '@/test-utils/mocks/telegrafMock'
import { createMockFn } from '@/test-utils/mocks/telegrafMock'
import { supabase } from '@/core/supabase'

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞
 *
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testReceiptCommand(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
    description: 'Starting receipt command test',
  })

  // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
  const ctx = await createMockContext({
    userId: Number(TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID),
    firstName: TEST_CONFIG.TEST_DATA.TEST_USER_FIRST_NAME,
    lastName: TEST_CONFIG.TEST_DATA.TEST_USER_LAST_NAME,
    username: TEST_CONFIG.TEST_DATA.TEST_USER_USERNAME,
    messageText: `/receipt ${TEST_CONFIG.TEST_DATA.TEST_OPERATION_ID}`,
  })

  try {
    // –ú–æ–∫ –¥–ª—è supabase.from().select().eq().single()
    const mockSupabaseSelect = createMockFn().mockResolvedValue({
      data: {
        id: 1,
        operation_id: TEST_CONFIG.TEST_DATA.TEST_OPERATION_ID,
        telegram_id: Number(TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID),
        amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
        stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
        type: 'money_income',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
        status: 'COMPLETED',
        bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
        created_at: new Date().toISOString(),
      },
      error: null,
    })

    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ supabase.from
    const originalSupabaseFrom = supabase.from
    supabase.from = createMockFn().mockReturnValue({
      select: createMockFn().mockReturnValue({
        eq: createMockFn().mockReturnValue({
          single: mockSupabaseSelect,
        }),
      }),
    }) as any

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    const { handleReceiptCommand } = require('@/handlers/handleReceiptCommand')

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    logger.info('üöÄ –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã receipt', {
      description: 'Calling receipt command handler',
    })
    await handleReceiptCommand(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL —á–µ–∫–∞
    const telegram = ctx.telegram as unknown as MockTelegram
    const sentMessages = telegram.sentMessages

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    const receiptMessage = sentMessages.find(
      (msg: any) =>
        typeof msg.text === 'string' &&
        (msg.text.includes('üßæ') ||
          msg.text.includes('Receipt') ||
          msg.text.includes('–ß–µ–∫'))
    )

    if (!receiptMessage) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É —Å URL
    const hasInlineKeyboard =
      receiptMessage.options &&
      receiptMessage.options.reply_markup &&
      receiptMessage.options.reply_markup.inline_keyboard

    if (!hasInlineKeyboard) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É —Å URL')
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ supabase.from
    supabase.from = originalSupabaseFrom

    logger.info('‚úÖ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Receipt command test completed successfully',
    })

    return {
      success: true,
      name: 'testReceiptCommand',
      message: '–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
      description: 'Error in receipt command test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      name: 'testReceiptCommand',
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`,
    }
  }
}
