import { TestResult } from '../../../types'
import { inngestTestEngine } from '../../../core/inngestTestEngine'
import { ModeEnum } from '@/types/modes'
import { logger } from '@/utils/logger'
import { testRuPayment } from './test-ru-payment'
import { testRobokassa } from './test-robokassa'
import { testRobokassaFormAvailability } from '../utils/robokassaFormValidator.test'

// RuPayment test
export async function testRuPayment(): Promise<TestResult> {
  try {
    logger.info('üöÄ Starting RuPayment test...')

    await inngestTestEngine.clearEventHistory()

    const testData = {
      telegram_id: '123456789',
      amount: 100,
      type: 'money_income',
      description: 'Test RuPayment integration',
      bot_name: 'test_bot',
      service_type: ModeEnum.TopUpBalance,
      payment_method: 'RuPayment',
    }

    await inngestTestEngine.send({
      name: 'payment/process',
      data: testData,
    })

    const events = await inngestTestEngine.getProcessedEvents()

    if (!events.length) {
      throw new Error('RuPayment test event was not processed')
    }

    logger.info('‚úÖ RuPayment test completed successfully')
    return {
      success: true,
      message: 'RuPayment test passed',
      name: 'RuPayment Test',
    }
  } catch (error) {
    logger.error(
      '‚ùå RuPayment test failed:',
      error instanceof Error ? error.message : String(error)
    )
    return {
      success: false,
      message: error instanceof Error ? error.message : String(error),
      name: 'RuPayment Test',
    }
  }
}

// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Robokassa
export async function testRobokassa(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Robokassa...')

    await inngestTestEngine.clearEventHistory()

    const testData = {
      telegram_id: '123456789',
      amount: 100,
      stars: 100,
      type: 'money_income',
      description: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Robokassa',
      bot_name: 'test_bot',
      service_type: ModeEnum.TopUpBalance,
      payment_method: 'Robokassa',
      inv_id: 'TEST-123',
    }

    await inngestTestEngine.send({
      name: 'payment/process',
      data: testData,
    })

    const events = await inngestTestEngine.getProcessedEvents()

    if (!events.length) {
      throw new Error('–°–æ–±—ã—Ç–∏–µ Robokassa –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa
    const paymentEvent = events[0]
    if (paymentEvent.data.payment_method !== 'Robokassa') {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç Robokassa —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      success: true,
      message: '–¢–µ—Å—Ç Robokassa –ø—Ä–æ–π–¥–µ–Ω',
      name: '–¢–µ—Å—Ç Robokassa',
    }
  } catch (error) {
    logger.error(
      '‚ùå –¢–µ—Å—Ç Robokassa –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:',
      error instanceof Error ? error.message : String(error)
    )
    return {
      success: false,
      message: error instanceof Error ? error.message : String(error),
      name: '–¢–µ—Å—Ç Robokassa',
    }
  }
}

export const paymentIntegrationTests = {
  testRuPayment,
  testRobokassa,
  testRobokassaFormAvailability,
}

export async function runIntegrationTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤', {
    description: 'Starting integration tests',
  })

  const results: TestResult[] = []

  // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
  const formResult = await testRobokassaFormAvailability()
  results.push(formResult)

  // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const allSuccess = results.every(result => result.success)

  if (allSuccess) {
    logger.info('‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', {
      description: 'All integration tests passed successfully',
    })
  } else {
    logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏', {
      description: 'Some integration tests failed',
      results: results.filter(r => !r.success).map(r => r.message),
    })
  }

  return results
}
