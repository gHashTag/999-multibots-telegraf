import { logger } from '@/utils/logger'
import { TestResult } from '../../../types'
import { inngestTestEngine } from '../../../core/inngestTestEngine'
import { ModeEnum } from '@/types/modes'

/**
 * –¢–µ—Å—Ç RuPayment –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
export async function testRuPayment(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RuPayment...')

  try {
    await inngestTestEngine.clearEventHistory()

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testPayment = {
      name: 'payment/process',
      data: {
        amount: 100,
        telegram_id: '123456789',
        type: 'money_income',
        description: 'Test RuPayment',
        bot_name: 'test_bot',
        service_type: ModeEnum.TopUpBalance,
      },
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await inngestTestEngine.send(testPayment)

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    const processedEvents = await inngestTestEngine.waitForEvents()

    if (processedEvents.length === 0) {
      throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç RuPayment —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
    return {
      success: true,
      name: 'RuPayment Integration Test',
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RuPayment:', {
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: 'RuPayment Integration Test',
      message: error instanceof Error ? error.message : String(error),
    }
  }
}
