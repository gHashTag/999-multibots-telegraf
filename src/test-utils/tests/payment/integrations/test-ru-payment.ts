import { logger } from '@/utils/logger'
import { TestResult } from '@/test-utils/types'
import { TEST_CONFIG } from '@/test-utils/test-config'
import { ModeEnum } from '@/interfaces/modes'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –¢–µ—Å—Ç RuPayment –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
export async function testRuPaymentIntegration(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RuPayment...')

  try {
    await TEST_CONFIG.testEngine.clearEvents()

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testPayment = {
      name: 'payment/process',
      data: {
        amount: TEST_CONFIG.amount,
        telegram_id: TEST_CONFIG.testUser.telegram_id,
        type: TransactionType.MONEY_INCOME,
        description: TEST_CONFIG.description,
        bot_name: TEST_CONFIG.botName,
        service_type: ModeEnum.TopUpBalance,
      },
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await TEST_CONFIG.testEngine.sendEvent(testPayment)

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    const processedEvents = await TEST_CONFIG.testEngine.getEvents()

    if (processedEvents.length === 0) {
      throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç RuPayment —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
    return {
      success: true,
      name: 'RuPayment Integration Test',
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RuPayment:', {
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: 'RuPayment Integration Test',
      message: error instanceof Error ? error.message : String(error),
    }
  }
}
