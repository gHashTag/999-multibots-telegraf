import { TestResult } from '@/test-utils/types'
import { testGenerateInvoiceUrl } from '@/scenes/getRuBillWizard/helper'
import { logger } from '@/utils/logger'

export async function runTestGenerateInvoiceUrl(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è Robokassa...', {
      description: 'Starting Robokassa URL generation test',
    })

    // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
    const testAmount = 100

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
    const url = await testGenerateInvoiceUrl(testAmount)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç test.robokassa.ru (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    if (!url.includes('test.robokassa.ru')) {
      throw new Error('URL does not contain test.robokassa.ru domain')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URL(url).searchParams
    if (
      !urlParams.get('MerchantLogin') ||
      !urlParams.get('OutSum') ||
      !urlParams.get('InvId') ||
      !urlParams.get('Description') ||
      !urlParams.get('SignatureValue')
    ) {
      throw new Error('URL is missing required parameters')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'URL generation test passed successfully',
      url,
    })

    return {
      success: true,
      message: 'URL generation test passed successfully',
      name: 'Test Generate Invoice URL',
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : 'Unknown error occurred'
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL', {
      description: 'Error during URL generation test',
      error: errorMessage,
    })

    return {
      success: false,
      message: `URL generation test failed: ${errorMessage}`,
      name: 'Test Generate Invoice URL',
    }
  }
}
