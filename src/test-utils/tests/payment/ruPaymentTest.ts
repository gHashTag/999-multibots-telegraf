import { logger } from '@/utils/logger'
import assert from '@/test-utils/core/assert'
import { InngestFunctionTester as BaseInngestFunctionTester } from '../../core/InngestFunctionTester'
import { TestResult } from '../../types'
import { v4 as uuidv4 } from 'uuid'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ RuPayment
 */
interface RuPaymentTestResult {
  success: boolean
  message?: string
  stars?: number
  amount?: string | number
  subscription?: string
  reason?: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ RuPayment
 */
interface RuPaymentTestInput {
  method: string
  inv_id?: string
  amount?: number
}

/**
 * –¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ RU Payment Service
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 */
class RuPaymentTester extends BaseInngestFunctionTester<
  RuPaymentTestInput,
  RuPaymentTestResult
> {
  // –•—Ä–∞–Ω–∏—Ç –º–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
  private mocks: Map<string, Function> = new Map()

  constructor(options: any = {}) {
    super('ru-payment-processing', {
      name: 'RU Payment Test',
      ...options,
    })
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  mock(functionName: string, implementation: Function): void {
    this.mocks.set(functionName, implementation)
    logger.info(`üß™ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName}`, {
      description: `Registered mock for ${functionName}`,
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async sendEvent(eventName: string, data: any): Promise<any> {
    logger.info(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è ${eventName}`, {
      description: `Sending event ${eventName}`,
      data: data,
    })

    // –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
    return this.handleEvent(eventName, { data })
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ
   */
  private async handleEvent(
    eventName: string,
    event: { data: any }
  ): Promise<any> {
    if (eventName === 'ru-payment/process-payment') {
      return this.processRuPayment(event.data)
    }
    return { success: false, reason: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${eventName}` }
  }

  /**
   * –≠–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ Robokassa
   */
  private async processRuPayment(data: any): Promise<RuPaymentTestResult> {
    try {
      const { IncSum, inv_id } = data
      const amount = parseFloat(IncSum)

      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ inv_id
      const getTelegramIdFromInvId = this.mocks.get('getTelegramIdFromInvId')
      if (!getTelegramIdFromInvId) {
        return {
          success: false,
          reason: '–ú–æ–∫ getTelegramIdFromInvId –Ω–µ –Ω–∞–π–¥–µ–Ω',
        }
      }
      const userInfo = await getTelegramIdFromInvId(inv_id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      const updatePaymentStatus = this.mocks.get('updatePaymentStatus')
      if (updatePaymentStatus) {
        await updatePaymentStatus(inv_id, 'COMPLETED')
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Å—É–º–º–µ
      let stars: number
      let subscription: string | undefined

      if (amount === 1000) {
        // –ü–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –Ω–∞ 1000 —Ä—É–±–ª–µ–π
        stars = 434
      } else if (amount === 1110) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ NeuroPhoto
        stars = 476
        subscription = 'neurophoto'

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const updateUserSubscription = this.mocks.get('updateUserSubscription')
        if (updateUserSubscription) {
          await updateUserSubscription(userInfo.telegram_id, subscription)
        }
      } else {
        return {
          success: false,
          reason: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${amount}`,
          amount,
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process
      const sendInngestEvent = this.mocks.get('sendInngestEvent')
      if (sendInngestEvent) {
        await sendInngestEvent('payment/process', {
          telegram_id: userInfo.telegram_id,
          amount,
          stars,
          type: TransactionType.MONEY_INCOME,
          description: subscription
            ? `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription}`
            : '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
          inv_id,
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.sendNotifications(userInfo.telegram_id, amount, stars, subscription)

      return {
        success: true,
        stars,
        amount,
        subscription,
        message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : String(error),
      })
      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
   */
  private async sendNotifications(
    telegram_id: string,
    amount: number,
    stars: number,
    subscription?: string
  ): Promise<void> {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const sendSuccessNotification = this.mocks.get('sendSuccessNotification')
    if (sendSuccessNotification) {
      await sendSuccessNotification(telegram_id, stars, subscription)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const sendTransactionNotification = this.mocks.get(
      'sendTransactionNotification'
    )
    if (sendTransactionNotification) {
      await sendTransactionNotification(telegram_id, amount, stars)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const sendAdminNotification = this.mocks.get('sendAdminNotification')
    if (sendAdminNotification) {
      await sendAdminNotification(telegram_id, amount, stars, subscription)
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa –¥–ª—è –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥
   */
  async testSuccessfulStarsPackage(): Promise<RuPaymentTestResult> {
    const inv_id = `test-${uuidv4()}`
    const amount = 1000 // –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    const stars = 434 // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥

    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥', {
      description: 'Testing successful stars package payment',
      inv_id,
      amount,
      stars,
    })

    // –ú–æ–∫–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    this._setupMocks(inv_id)

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      IncSum: amount.toString(),
      inv_id,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ru-payment/process-payment
    const result = await this.sendEvent('ru-payment/process-payment', eventData)

    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Successful stars package payment test completed',
      result,
    })

    return result
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async testSuccessfulSubscription(): Promise<RuPaymentTestResult> {
    const inv_id = `test-${uuidv4()}`
    const amount = 1110 // –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ NeuroPhoto
    const stars = 476 // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    const subscription = 'neurophoto'

    logger.info('üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏', {
      description: 'Testing successful subscription payment',
      inv_id,
      amount,
      stars,
      subscription,
    })

    // –ú–æ–∫–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    this._setupMocks(inv_id)

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      IncSum: amount.toString(),
      inv_id,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ru-payment/process-payment
    const result = await this.sendEvent('ru-payment/process-payment', eventData)

    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Successful subscription payment test completed',
      result,
    })

    return result
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–æ–π
   */
  async testInvalidAmount(): Promise<RuPaymentTestResult> {
    const inv_id = `test-${uuidv4()}`
    const amount = 1234 // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∏ –æ–¥–Ω–æ–º—É –ø–∞–∫–µ—Ç—É –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–µ

    logger.info('üß™ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–æ–π', {
      description: 'Testing payment with invalid amount',
      inv_id,
      amount,
    })

    // –ú–æ–∫–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    this._setupMocks(inv_id)

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventData = {
      IncSum: amount.toString(),
      inv_id,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ru-payment/process-payment
    const result = await this.sendEvent('ru-payment/process-payment', eventData)

    logger.info('‚úÖ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Invalid amount payment test completed',
      result,
    })

    return result
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   */
  private _setupMocks(inv_id: string): void {
    // –ú–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id –∏–∑ inv_id
    this.mock('getTelegramIdFromInvId', async () => {
      return {
        telegram_id: '123456789',
        inv_id,
      }
    })

    // –ú–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    this.mock('updatePaymentStatus', async () => {
      return { success: true }
    })

    // –ú–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.mock('updateUserSubscription', async () => {
      return { success: true }
    })

    // –ú–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    this.mock('sendInngestEvent', async () => {
      return { success: true }
    })

    // –ú–æ–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.mock('sendSuccessNotification', async () => {})
    this.mock('sendTransactionNotification', async () => {})
    this.mock('sendAdminNotification', async () => {})
  }

  /**
   * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ executeTest
   */
  protected async executeTest(
    input: RuPaymentTestInput
  ): Promise<RuPaymentTestResult> {
    const { method } = input

    try {
      switch (method) {
        case 'stars':
          return await this.testSuccessfulStarsPackage()
        case 'subscription':
          return await this.testSuccessfulSubscription()
        case 'invalid':
          return await this.testInvalidAmount()
        case 'all':
          const results = await this.runAllTests()
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return {
            success: results.every(r => r.success),
            message: '–í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
          }
        default:
          return {
            success: false,
            message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∞: ${method}`,
          }
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
        description: 'Error executing test',
        error: error instanceof Error ? error.message : String(error),
        method,
      })

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`,
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è RU Payment Service
   */
  async runAllTests(): Promise<RuPaymentTestResult[]> {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ RU Payment Service', {
      description: 'Running all RU Payment Service tests',
    })

    const results = []

    try {
      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥
      const starsResult = await this.testSuccessfulStarsPackage()
      results.push(starsResult)

      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionResult = await this.testSuccessfulSubscription()
      results.push(subscriptionResult)

      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã
      const invalidResult = await this.testInvalidAmount()
      results.push(invalidResult)

      const successCount = results.filter(r => r.success).length
      const totalCount = results.length

      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã RU Payment Service –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
        description: 'All RU Payment Service tests completed',
        successCount,
        totalCount,
      })

      return results
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ RU Payment Service', {
        description: 'Error running RU Payment Service tests',
        error: error instanceof Error ? error.message : String(error),
      })

      return [
        {
          success: false,
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`,
        },
      ]
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã RuPayment
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
 */
export async function runRuPaymentTests(
  options: { verbose?: boolean } = {}
): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RU Payment Service...', {
    description: 'Starting RU Payment Service Tests...',
  })

  const tester = new RuPaymentTester({
    verbose: options.verbose,
  })

  const startTime = Date.now()

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const testResults = await tester.runTest({ method: 'all' })

    const duration = Date.now() - startTime

    logger.info('‚úÖ –¢–µ—Å—Ç—ã RU Payment Service —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
      description: 'RU Payment Service tests successfully completed',
      duration,
      method: 'all',
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç TestResult
    return [
      {
        name: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥',
        success: true,
        message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥ –ø—Ä–æ–π–¥–µ–Ω',
      },
      {
        name: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
        success: true,
        message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–π–¥–µ–Ω',
      },
      {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã',
        success: true,
        message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã –ø—Ä–æ–π–¥–µ–Ω',
      },
    ]
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ RU Payment Service', {
      description: 'Error running RU Payment Service tests',
      error: errorMessage,
      duration,
    })

    return [
      {
        name: '–¢–µ—Å—Ç—ã RU Payment Service',
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${errorMessage}`,
      },
    ]
  }
}
