import fs from 'fs'
import path from 'path'
import { logger } from '@/utils/logger'

const PAYMENT_TESTS_DIR = path.join(__dirname, '..')

const ALLOWED_DIRS = ['core', 'features', 'integrations', 'utils']
const REQUIRED_FILES = ['index.ts', 'README.md']
const REQUIRED_ROOT_FILES = ['index.ts', 'README.md']

export interface ValidationResult {
  isValid: boolean
  errors: string[]
}

export function validateTestStructure(): ValidationResult {
  const errors: string[] = []

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...', {
      description: 'Checking root files',
      files: REQUIRED_ROOT_FILES,
    })

    REQUIRED_ROOT_FILES.forEach(file => {
      const filePath = path.join(PAYMENT_TESTS_DIR, file)
      if (!fs.existsSync(filePath)) {
        errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${file}`)
      }
    })

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...', {
      description: 'Checking root directory structure',
    })

    const rootFiles = fs.readdirSync(PAYMENT_TESTS_DIR)
    rootFiles.forEach(file => {
      const filePath = path.join(PAYMENT_TESTS_DIR, file)
      const isDirectory = fs.statSync(filePath).isDirectory()

      if (isDirectory && !ALLOWED_DIRS.includes(file)) {
        errors.push(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –∫–æ—Ä–Ω–µ: ${file}`)
      } else if (!isDirectory && !REQUIRED_ROOT_FILES.includes(file)) {
        errors.push(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ: ${file}`)
      }
    })

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...', {
      description: 'Checking subdirectories structure',
    })

    ALLOWED_DIRS.forEach(dir => {
      const dirPath = path.join(PAYMENT_TESTS_DIR, dir)
      if (!fs.existsSync(dirPath)) {
        errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      REQUIRED_FILES.forEach(file => {
        const filePath = path.join(dirPath, file)
        if (!fs.existsSync(filePath)) {
          errors.push(
            `‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}: ${file}`
          )
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      const files = fs.readdirSync(dirPath)
      files.forEach(file => {
        if (file === 'index.ts' || file === 'README.md') return

        if (!file.endsWith('.test.ts')) {
          errors.push(
            `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ ${dir}: ${file}. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å .test.ts`
          )
        }
      })
    })

    if (errors.length === 0) {
      logger.info('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–Ω–∞', {
        description: 'Test structure is valid',
      })
    } else {
      logger.error('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ—Å—Ç–æ–≤:', {
        description: 'Test structure validation failed',
        errors,
      })
    }

    return {
      isValid: errors.length === 0,
      errors,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', {
      description: 'Structure validation error',
      error: errorMessage,
    })

    return {
      isValid: false,
      errors: [`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errorMessage}`],
    }
  }
}
