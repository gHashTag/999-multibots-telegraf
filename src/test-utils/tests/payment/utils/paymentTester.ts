import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'
import { ModeEnum } from '@/interfaces/modes'
import { TransactionType } from '@/interfaces/payments.interface'

interface CreatePaymentParams {
  telegram_id: string
  amount: number
  type: TransactionType
  description: string
  bot_name: string
  service_type: ModeEnum
  inv_id?: string
}

export class PaymentTester {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
   */
  async createTestUser(
    telegramId: string,
    initialBalance: number = 0
  ): Promise<void> {
    logger.info('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Creating test user',
      telegram_id: telegramId,
      initial_balance: initialBalance,
    })

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { error: userError } = await supabase.from('users').upsert({
      telegram_id: telegramId,
      language: 'ru',
      created_at: new Date().toISOString(),
    })

    if (userError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`)
    }

    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if (initialBalance > 0) {
      await this.createPayment({
        telegram_id: telegramId,
        amount: initialBalance,
        type: TransactionType.MONEY_INCOME,
        description: 'Initial balance',
        bot_name: 'test_bot',
        service_type: ModeEnum.TopUpBalance,
      })
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
   */
  async createPayment(params: CreatePaymentParams): Promise<void> {
    logger.info('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
      telegram_id: params.telegram_id,
      amount: params.amount,
      type: params.type,
      description: 'Creating test payment',
      bot_name: params.bot_name,
      service_type: params.service_type,
    })

    await inngest.send({
      name: 'payment/process',
      data: {
        ...params,
        stars: params.amount, // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1:1
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    await new Promise(resolve => setTimeout(resolve, 1000))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async checkPaymentCreated(
    telegramId: string,
    amount: number
  ): Promise<boolean> {
    const { data: payment, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', telegramId)
      .eq('amount', amount)
      .eq('status', 'COMPLETED')
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (error || !payment) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment creation',
        error: error?.message,
      })
      return false
    }

    return true
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async checkBalance(telegramId: string): Promise<number> {
    const { data, error } = await supabase.rpc('get_user_balance', {
      user_telegram_id: telegramId,
    })

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`)
    }

    return data || 0
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async cleanupTestData(telegramId: string): Promise<void> {
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
      description: 'Cleaning up test data',
      telegram_id: telegramId,
    })

    // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
    await supabase.from('payments_v2').delete().eq('telegram_id', telegramId)

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('users').delete().eq('telegram_id', telegramId)
  }
}
