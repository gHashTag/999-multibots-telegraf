import { supabase } from '@/core/supabase'
import { TelegramId } from '@/interfaces/telegram.interface'
import {
  PaymentStatus,
  TransactionType,
  ModeEnum,
} from '@/interfaces/payments.interface'
import { getUserBalance } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { TEST_PAYMENT_CONFIG } from './testConfig'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export class PaymentTester {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ PaymentTester
   */
  constructor() {
    logger.info('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaymentTester –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Initializing PaymentTester for payment system tests',
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
   * @param userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param amount - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞
   * @returns true, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –∏–Ω–∞—á–µ false
   */
  async checkBalance(userId: string, amount: number): Promise<boolean> {
    try {
      const balance = await getUserBalance(userId)

      logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Checking user balance',
        userId,
        balance,
        requiredAmount: amount,
        sufficient: balance >= amount,
      })

      return balance >= amount
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞', {
        description: 'Error checking balance',
        userId,
        amount,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param initialBalance - –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
   * @returns true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  async createTestUser(
    telegramId: TelegramId,
    initialBalance: number = TEST_PAYMENT_CONFIG.testUser.initialBalance
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', telegramId)
        .single()

      if (existingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { error: updateError } = await supabase
          .from('users')
          .update({ balance: initialBalance })
          .eq('telegram_id', telegramId)

        if (updateError) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${updateError.message}`)
        }

        logger.info('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
          description: 'Test user updated',
          telegramId,
          initialBalance,
        })
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { error: insertError } = await supabase.from('users').insert({
          telegram_id: telegramId,
          balance: initialBalance,
          language: TEST_PAYMENT_CONFIG.testUser.language,
        })

        if (insertError) {
          throw new Error(
            `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${insertError.message}`
          )
        }

        logger.info('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
          description: 'Test user created',
          telegramId,
          initialBalance,
        })
      }

      return true
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error creating test user',
        telegramId,
        initialBalance,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param amount - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
   * @param status - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é PENDING)
   * @returns true, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω
   */
  async checkPaymentCreated(
    telegramId: TelegramId,
    amount: number,
    status: PaymentStatus = 'PENDING'
  ): Promise<boolean> {
    try {
      const { data: payment, error } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('telegram_id', telegramId.toString())
        .eq('amount', amount)
        .eq('status', status)
        .order('created_at', { ascending: false })
        .limit(1)
        .single()

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`)
      }

      logger.info('üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Checking payment creation',
        telegramId,
        amount,
        status,
        found: !!payment,
      })

      return !!payment
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment creation',
        telegramId,
        amount,
        status,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param expectedBalance - –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
   * @returns true, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
   */
  async checkBalanceUpdated(
    telegramId: TelegramId,
    expectedBalance: number
  ): Promise<boolean> {
    try {
      const balance = await getUserBalance(telegramId.toString())

      logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
        description: 'Checking balance update',
        telegramId,
        expectedBalance,
        actualBalance: balance,
        matches: balance === expectedBalance,
      })

      return balance === expectedBalance
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
        description: 'Error checking balance update',
        telegramId,
        expectedBalance,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   * @param invId - ID –∏–Ω–≤–æ–π—Å–∞
   * @param expectedStatus - –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
   * @returns true, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
   */
  async checkPaymentStatus(
    invId: string,
    expectedStatus: PaymentStatus
  ): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('payments_v2')
        .select('status')
        .eq('inv_id', invId)
        .single()

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`)
      }

      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Checking payment status',
        invId,
        expectedStatus,
        actualStatus: data?.status,
        matches: data?.status === expectedStatus,
      })

      return data?.status === expectedStatus
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment status',
        invId,
        expectedStatus,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param expectedCount - –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
   * @returns true, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
   */
  async checkPaymentHistory(
    telegramId: TelegramId,
    expectedCount: number
  ): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('telegram_id', telegramId.toString())

      if (error) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`
        )
      }

      logger.info('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π', {
        description: 'Checking payment history',
        telegramId,
        expectedCount,
        actualCount: data?.length || 0,
        matches: (data?.length || 0) === expectedCount,
      })

      return (data?.length || 0) === expectedCount
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π', {
        description: 'Error checking payment history',
        telegramId,
        expectedCount,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ operation_id
   * @param operationId - ID –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @returns true, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º operation_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  async checkPaymentExistsByOperationId(operationId: string): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('payments_v2')
        .select('id')
        .eq('operation_id', operationId)
        .limit(1)

      if (error) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ operation_id: ${error.message}`
        )
      }

      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ operation_id', {
        description: 'Checking payment existence by operation_id',
        operationId,
        exists: data && data.length > 0,
      })

      return data && data.length > 0
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ operation_id', {
        description: 'Error checking payment by operation_id',
        operationId,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @param cost - –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
   * @returns true, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω
   */
  async checkModelPaymentCreated(
    telegramId: TelegramId,
    modelName: string,
    cost: number
  ): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('telegram_id', telegramId.toString())
        .eq('amount', cost)
        .eq('status', 'COMPLETED')
        .eq('description', `–û–ø–ª–∞—Ç–∞ –º–æ–¥–µ–ª–∏: ${modelName}`)
        .eq('type', 'money_expense')
        .order('created_at', { ascending: false })
        .limit(1)

      if (error) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–æ–¥–µ–ª—å: ${error.message}`
        )
      }

      logger.info('üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–æ–¥–µ–ª—å', {
        description: 'Checking model payment creation',
        telegramId,
        modelName,
        cost,
        found: data && data.length > 0,
      })

      return data && data.length > 0
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–æ–¥–µ–ª—å', {
        description: 'Error checking model payment',
        telegramId,
        modelName,
        cost,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–ª–∞—Ç–µ–∂–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns true, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã
   */
  async cleanupTestData(telegramId: TelegramId): Promise<boolean> {
    try {
      // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: paymentsError } = await supabase
        .from('payments_v2')
        .delete()
        .eq('telegram_id', telegramId.toString())
        .eq('description', 'like', '%TEST%')

      if (paymentsError) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentsError.message}`
        )
      }

      logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Cleaning up test data',
        telegramId,
        success: true,
      })

      return true
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Error cleaning test data',
        telegramId,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }
}
