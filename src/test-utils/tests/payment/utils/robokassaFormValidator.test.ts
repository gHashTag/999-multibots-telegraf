import { TestResult } from '../../../types'
import { logger } from '@/utils/logger'
import { MERCHANT_LOGIN, TEST_PASSWORD1 } from '@/config'
import { generateShortInvId } from '@/scenes/getRuBillWizard/helper'
import axios from 'axios'

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã Robokassa
 */
export async function testRobokassaFormAvailability(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —Ñ–æ—Ä–º—ã Robokassa', {
      description: 'Starting Robokassa form test',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!MERCHANT_LOGIN || !TEST_PASSWORD1) {
      throw new Error('MERCHANT_LOGIN or TEST_PASSWORD1 is not defined')
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const amount = 100 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    const userId = '123456789' // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const invId = await generateShortInvId(userId, amount)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const signatureString = `${MERCHANT_LOGIN}:${amount}:${invId}:${TEST_PASSWORD1}`
    const signatureValue = require('md5')(signatureString).toUpperCase()

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º—ã
    const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx'
    const params = new URLSearchParams({
      MerchantLogin: MERCHANT_LOGIN,
      OutSum: amount.toString(),
      InvId: invId.toString(),
      Description: 'Test payment form',
      SignatureValue: signatureValue,
      IsTest: '1',
    })

    const url = `${baseUrl}?${params.toString()}`

    logger.info('üîó –¢–µ—Å—Ç–æ–≤—ã–π URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', {
      description: 'Test URL generated',
      url,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    const response = await axios.get(url)

    if (response.status !== 200) {
      throw new Error(`Form is not accessible. Status: ${response.status}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
    const formContent = response.data.toLowerCase()
    const hasPaymentForm =
      formContent.includes('robokassa') ||
      formContent.includes('–æ–ø–ª–∞—Ç–∞') ||
      formContent.includes('payment')

    if (!hasPaymentForm) {
      throw new Error('Payment form elements not found in response')
    }

    logger.info('‚úÖ –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', {
      description: 'Payment form is accessible and contains required elements',
    })

    return {
      success: true,
      message: 'Robokassa payment form is accessible and valid',
      name: 'testRobokassaFormAvailability',
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º—ã:', {
      description: 'Form validation error',
      error: errorMessage,
    })

    return {
      success: false,
      message: `Failed to validate Robokassa form: ${errorMessage}`,
      name: 'testRobokassaFormAvailability',
    }
  }
}
