import { logger } from '@/utils/logger'
import { inngestTestEngine, TEST_CONFIG } from '../../test-config'
import { TestResult } from '../../types'
import { ModeEnum } from '@/interfaces/modes'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ InngestTestEngine
 *
 * @module src/test-utils/tests/payment/paymentInngestTest
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InngestTestEngine
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testPaymentInngestEvents(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ InngestTestEngine', {
      description: 'Starting payment events test through InngestTestEngine',
    })

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    inngestTestEngine.clearEvents()

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const depositEvent = {
      name: 'payment/process',
      data: {
        telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
        amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
        stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
        type: TransactionType.MONEY_INCOME,
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ InngestTestEngine',
        bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
        service_type: ModeEnum.TopUpBalance,
        operation_id: `test-op-${Date.now()}`,
      },
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Sending balance deposit event',
      event: depositEvent,
    })

    await inngestTestEngine.sendEvent(depositEvent.name, depositEvent.data)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const events = inngestTestEngine.getEventsByName('payment/process')
    if (events.length === 0) {
      logger.error('‚ùå –°–æ–±—ã—Ç–∏–µ payment/process –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π', {
        description: 'Event payment/process not found in event history',
      })
      return {
        success: false,
        name: 'Payment Inngest Events Test',
        message: '–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ payment/process –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
    const lastEvent = events[events.length - 1]

    if (
      lastEvent.data.telegram_id !== depositEvent.data.telegram_id ||
      lastEvent.data.amount !== depositEvent.data.amount ||
      lastEvent.data.type !== depositEvent.data.type
    ) {
      logger.error('‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º', {
        description: 'Event data does not match sent data',
        expected: depositEvent.data,
        actual: lastEvent.data,
      })
      return {
        success: false,
        name: 'Payment Inngest Events Test',
        message: '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º',
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const expenseEvent = {
      name: 'payment/process',
      data: {
        telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
        amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT / 2, // –ë–µ—Ä–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—É–º–º—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        stars: TEST_CONFIG.TEST_DATA.TEST_STARS / 2,
        type: TransactionType.MONEY_EXPENSE,
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ InngestTestEngine',
        bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
        service_type: ModeEnum.TextToVideo,
        operation_id: `test-op-${Date.now()}`,
      },
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Sending expense event',
      event: expenseEvent,
    })

    await inngestTestEngine.sendEvent(expenseEvent.name, expenseEvent.data)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ç–∞–∫–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const allEvents = inngestTestEngine.getAllEvents()
    if (allEvents.length !== 2) {
      logger.error(
        '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É',
        {
          description: 'Number of events in history does not match expected',
          expected: 2,
          actual: allEvents.length,
        }
      )
      return {
        success: false,
        name: 'Payment Inngest Events Test',
        message: `–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–±—ã—Ç–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–ª—É—á–µ–Ω–æ ${allEvents.length}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id
    const userEvents = inngestTestEngine.getEventsForTelegramId(
      TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID
    )

    if (userEvents.length !== 2) {
      logger.error(
        '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É',
        {
          description: 'Number of events for user does not match expected',
          expected: 2,
          actual: userEvents.length,
        }
      )
      return {
        success: false,
        name: 'Payment Inngest Events Test',
        message: `–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–æ ${userEvents.length}`,
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    inngestTestEngine.printEvents('–°–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:')

    logger.info('‚úÖ –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Payment events test completed successfully',
    })

    return {
      success: true,
      name: 'Payment Inngest Events Test',
      message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π', {
      description: 'Error while executing payment events test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      name: 'Payment Inngest Events Test',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
    }
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
 *
 * @returns {Promise<TestResult[]>} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentInngestTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest', {
    description: 'Running payment processing tests through Inngest',
  })

  const results: TestResult[] = []

  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
  const eventTestResult = await testPaymentInngestEvents()
  results.push(eventTestResult)

  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  logger.info('üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest', {
    description: 'Payment Inngest tests summary',
    total: results.length,
    passed: results.filter(r => r.success).length,
    failed: results.filter(r => !r.success).length,
  })

  return results
}
