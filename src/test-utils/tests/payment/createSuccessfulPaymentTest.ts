import { logger } from '@/utils/logger'
import { TEST_CONFIG } from '../../test-config'
import { TestResult } from '../../types'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { TransactionType } from '@/interfaces/payments.interface'
import { supabase } from '@/supabase'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createSuccessfulPayment
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:
 * 1. –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 * 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ inv_id
 * 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 4. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
 *
 * @module src/test-utils/tests/payment/createSuccessfulPaymentTest
 */

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å
 * –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
 */
function logExpectedError(
  message: string,
  error: any,
  details: Record<string, any> = {}
) {
  logger.info(`üîç [–û–ñ–ò–î–ê–ï–ú–ê–Ø –û–®–ò–ë–ö–ê]: ${message}`, {
    description: `Expected test error (this is normal): ${message}`,
    error: error instanceof Error ? error.message : String(error),
    ...details,
  })
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export async function testSuccessfulPaymentCreation(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
      {
        description: 'Testing payment creation with valid parameters',
      }
    )

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = uuidv4()

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await createSuccessfulPayment({
      telegram_id: TEST_USER_TELEGRAM_ID,
      amount: TEST_AMOUNT,
      stars: TEST_AMOUNT,
      type: TransactionType.MONEY_INCOME,
      description: TEST_DESCRIPTION,
      bot_name: TEST_BOT_NAME,
      payment_method: 'test',
      status: 'COMPLETED',
      inv_id: operationId,
      service_type: ModeEnum.TopUpBalance,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    if (
      !payment ||
      payment.type !== TransactionType.MONEY_INCOME.toLowerCase()
    ) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (
      Number(payment.telegram_id) !== Number(TEST_USER_TELEGRAM_ID) ||
      payment.amount !== TEST_AMOUNT ||
      payment.stars !== TEST_AMOUNT
    ) {
      logger.error('‚ùå [TEST]: –ü–ª–∞—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
        description: 'Payment contains invalid data',
        expected: {
          telegram_id: Number(TEST_USER_TELEGRAM_ID),
          amount: TEST_AMOUNT,
          stars: TEST_AMOUNT,
        },
        actual: {
          telegram_id: Number(payment.telegram_id),
          amount: payment.amount,
          stars: payment.stars,
        },
      })
      return {
        success: false,
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
        message: '–ü–ª–∞—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      }
    }

    logger.info('‚úÖ [TEST]: –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
      description: 'Payment created successfully',
      payment_id: payment.id,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
      message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      details: {
        payment_id: payment.id,
        telegram_id: payment.telegram_id,
        amount: payment.amount,
        type: payment.type,
      },
    }
  } catch (error) {
    logger.error('‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Error creating payment',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º inv_id
 */
export async function testDuplicatePayment(): Promise<TestResult> {
  try {
    logger.info('üöÄ [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Testing duplicate payment creation',
    })

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = uuidv4()

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const payment1 = await createSuccessfulPayment({
      telegram_id: TEST_USER_TELEGRAM_ID,
      amount: TEST_AMOUNT,
      stars: TEST_AMOUNT,
      type: TransactionType.MONEY_INCOME,
      description: TEST_DESCRIPTION,
      bot_name: TEST_BOT_NAME,
      payment_method: 'test',
      status: 'COMPLETED',
      inv_id: operationId,
      service_type: ModeEnum.TopUpBalance,
    })

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ —Å —Ç–µ–º –∂–µ inv_id
    try {
      await createSuccessfulPayment({
        telegram_id: TEST_USER_TELEGRAM_ID,
        amount: TEST_AMOUNT,
        stars: TEST_AMOUNT,
        type: TransactionType.MONEY_INCOME,
        description: TEST_DESCRIPTION,
        bot_name: TEST_BOT_NAME,
        payment_method: 'test',
        status: 'COMPLETED',
        inv_id: operationId, // –¢–æ—Ç –∂–µ ID –æ–ø–µ—Ä–∞—Ü–∏–∏!
        service_type: ModeEnum.TopUpBalance,
      })

      // –ï—Å–ª–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞!
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥—É–±–ª–∏–∫–∞—Ç
      const { data: payments } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('inv_id', operationId)

      if (payments && payments.length > 1) {
        return {
          success: false,
          name: '–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
          message: '–°–æ–∑–¥–∞–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–µ–º –∂–µ inv_id, —á—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ',
          details: {
            payment_count: payments.length,
            inv_id: operationId,
          },
        }
      }

      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª—Å—è, —Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
      logger.info('‚úÖ [TEST]: –î—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏', {
        description: 'Duplicate payment not created, but no error was thrown',
        inv_id: operationId,
      })

      return {
        success: true,
        name: '–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
        message: '–î—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ö–æ—Ç—è –æ—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–æ—à–µ–Ω–∞',
        details: {
          payment_id: payment1.id,
          inv_id: operationId,
        },
      }
    } catch (duplicateError) {
      // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Ç–µ–º –∂–µ inv_id
      logExpectedError('–î—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–µ–º –∂–µ inv_id', duplicateError, {
        inv_id: operationId,
      })

      return {
        success: true,
        name: '–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
        message:
          '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞',
        details: {
          original_payment_id: payment1.id,
          error:
            duplicateError instanceof Error
              ? duplicateError.message
              : String(duplicateError),
        },
      }
    }
  } catch (error) {
    logger.error('‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Error testing duplicate payment',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
      message: `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function testNonExistentUserPayment(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      {
        description: 'Testing payment creation for non-existent user',
      }
    )

    const { TEST_BOT_NAME } = TEST_CONFIG.TEST_DATA

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    try {
      await createSuccessfulPayment({
        telegram_id: '999999999999', // –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        amount: 100,
        stars: 100,
        type: TransactionType.MONEY_INCOME,
        description: 'Test non-existent user',
        bot_name: TEST_BOT_NAME,
        payment_method: 'test',
        status: 'COMPLETED',
        inv_id: uuidv4(),
        service_type: ModeEnum.TopUpBalance,
      })

      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
      return {
        success: false,
        name: '–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        message:
          '–ü–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É',
      }
    } catch (userError) {
      logExpectedError('–ü–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userError, {
        telegram_id: '999999999999',
      })

      return {
        success: true,
        name: '–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        message:
          '–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        details: {
          error:
            userError instanceof Error ? userError.message : String(userError),
        },
      }
    }
  } catch (error) {
    logger.error(
      '‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      {
        description: 'Error testing non-existent user',
        error: error instanceof Error ? error.message : String(error),
      }
    )

    return {
      success: false,
      name: '–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      message: `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º inv_id
 */
export async function testExistingInvIdCheck(): Promise<TestResult> {
  try {
    logger.info('üöÄ [TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ inv_id', {
      description: 'Testing checking for existing payment by inv_id',
    })

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = uuidv4()

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const payment1 = await createSuccessfulPayment({
      telegram_id: TEST_USER_TELEGRAM_ID,
      amount: TEST_AMOUNT,
      stars: TEST_AMOUNT,
      type: TransactionType.MONEY_INCOME,
      description: TEST_DESCRIPTION,
      bot_name: TEST_BOT_NAME,
      payment_method: 'test',
      status: 'COMPLETED',
      inv_id: operationId,
      service_type: ModeEnum.TopUpBalance,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π inv_id –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –¥–∞–Ω–Ω—ã–º inv_id
    const { data: existingPayments } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('inv_id', operationId)

    if (!existingPayments || existingPayments.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ inv_id',
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ inv_id',
      }
    }

    if (existingPayments.length > 1) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ inv_id',
        message: `–ù–∞–π–¥–µ–Ω–æ ${existingPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º inv_id, –æ–∂–∏–¥–∞–ª—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω`,
      }
    }

    return {
      success: true,
      name: '–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ inv_id',
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π inv_id —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: {
        payment_id: payment1.id,
        inv_id: operationId,
      },
    }
  } catch (error) {
    logger.error(
      '‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ inv_id',
      {
        description: 'Error testing existing inv_id check',
        error: error instanceof Error ? error.message : String(error),
      }
    )

    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ inv_id',
      message: `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createSuccessfulPayment
 */
export async function runCreateSuccessfulPaymentTests(): Promise<TestResult[]> {
  logger.info(
    'üöÄ [TEST]: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createSuccessfulPayment',
    {
      description: 'Running all tests for createSuccessfulPayment function',
    }
  )

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.push(await testSuccessfulPaymentCreation())
  results.push(await testDuplicatePayment())
  results.push(await testNonExistentUserPayment())
  results.push(await testExistingInvIdCheck())

  // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const passedTests = results.filter(r => r.success).length
  const totalTests = results.length

  logger.info(
    `‚úÖ [TEST_RESULTS]: –¢–µ—Å—Ç—ã createSuccessfulPayment: ${passedTests}/${totalTests} –ø—Ä–æ–π–¥–µ–Ω–æ`,
    {
      description: `Tests for createSuccessfulPayment: ${passedTests}/${totalTests} passed`,
    }
  )

  return results
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
if (require.main === module) {
  ;(async () => {
    try {
      logger.info(
        'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ createSuccessfulPayment –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏',
        {
          description:
            'Running createSuccessfulPayment tests from command line',
        }
      )

      const results = await runCreateSuccessfulPaymentTests()

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const passedTests = results.filter(r => r.success).length
      const totalTests = results.length

      logger.info(
        `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests} –ø—Ä–æ–π–¥–µ–Ω–æ`,
        {
          description: `Test results: ${passedTests}/${totalTests} passed`,
        }
      )

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.forEach(result => {
        if (result.success) {
          console.log(`‚úÖ PASSED: ${result.name} - ${result.message}`)
        } else {
          console.log(`‚ùå FAILED: ${result.name} - ${result.message}`)
        }
      })

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
      process.exit(passedTests === totalTests ? 0 : 1)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
        description: 'Error running tests',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    }
  })()
}
