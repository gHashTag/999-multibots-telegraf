import { logger } from '@/utils/logger'
import { TestResult } from '@/types/tests'
import { sendTransactionNotification } from '@/helpers/sendTransactionNotification'
import { createTestUser } from '../../helpers/users'
import { inngestTestEngine } from '../../test-config'
import { TEST_PAYMENT_CONFIG } from '@/config/test'
import {
  TransactionType,
  PaymentProcessParams,
} from '@/interfaces/payments.interface'
import { ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
 * –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
 */
export async function testPaymentNotification(): Promise<TestResult> {
  const testName = 'Payment Notification Test'
  const userId = '12345678' // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const amount = 10
  const initialBalance = 100
  const finalBalance = initialBalance - amount
  const botName = 'test_bot'

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  let notificationSent = false

  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö', {
      description: 'Starting payment notification test',
      userId,
      amount,
      initialBalance,
      finalBalance,
    })

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–∞ –¥–ª—è sendTransactionNotification
    const originalSendNotification = sendTransactionNotification

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É TypeScript –¥–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sendTransactionNotification = async params => {
      logger.info('üì§ –ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∑–≤–∞–Ω', {
        description: 'Mock notification function called',
        params,
      })
      notificationSent = true
      // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ç–µ—Å—Ç–µ
      return { success: true }
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞
    await inngestTestEngine.sendEvent('payment/process', {
      telegram_id: userId,
      amount,
      type: TransactionType.MONEY_EXPENSE,
      description: 'Test payment for notification',
      bot_name: botName,
      service_type: ModeEnum.NeuroPhoto,
    })

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    // @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É TypeScript –¥–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sendTransactionNotification = originalSendNotification

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (!notificationSent) {
      throw new Error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'Payment notification test passed',
      notificationSent,
    })

    return {
      success: true,
      name: testName,
      message: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö', {
      description: 'Error in payment notification test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  }
}

/**
 * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
export async function testBalanceTopUp(): Promise<TestResult> {
  const testName = 'Balance Top-Up Test'
  let testUserId: string | null = null

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await createTestUser(
      'testBalanceTopUp_' + Date.now(),
      TEST_PAYMENT_CONFIG.initialBalance
    )

    if (!testUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    testUserId = testUser.telegram_id
    const initialBalance = TEST_PAYMENT_CONFIG.initialBalance
    const topUpAmount = 50 // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

    logger.info(
      'üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      {
        description: 'Created test user for balance top-up test',
        testUserId,
        initialBalance,
      }
    )

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const topUpParams: PaymentProcessParams = {
      telegram_id: testUserId,
      amount: topUpAmount,
      stars: topUpAmount,
      type: TransactionType.MONEY_INCOME,
      description: 'Balance top-up test',
      bot_name: 'test_bot',
      service_type: ModeEnum.TopUpBalance,
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      topUpParams
    )

    logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance top-up result',
      result,
    })

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    // –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è

    return {
      success: true,
      name: testName,
      message: '‚úÖ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error in balance top-up test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (testUserId) {
      try {
        const { supabase } = require('@/supabase')
        await supabase.from('users').delete().eq('telegram_id', testUserId)
      } catch (cleanupError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error deleting test user',
          cleanupError,
          testUserId,
        })
      }
    }
  }
}

/**
 * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 */
export async function testBalanceDebit(): Promise<TestResult> {
  const testName = 'Balance Debit Test'
  let testUserId: string | null = null

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    const testUser = await createTestUser(
      'testBalanceDebit_' + Date.now(),
      TEST_PAYMENT_CONFIG.initialBalance
    )

    if (!testUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    testUserId = testUser.telegram_id
    const initialBalance = TEST_PAYMENT_CONFIG.initialBalance
    const debitAmount = 20 // –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è', {
      description: 'Created test user for balance debit test',
      testUserId,
      initialBalance,
    })

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const debitParams: PaymentProcessParams = {
      telegram_id: testUserId,
      amount: debitAmount,
      stars: debitAmount,
      type: TransactionType.MONEY_EXPENSE,
      description: 'Balance debit test',
      bot_name: 'test_bot',
      service_type: ModeEnum.NeuroPhoto,
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∏—Å–∞–Ω–∏—è
    const result = await inngestTestEngine.sendEvent(
      'payment/process',
      debitParams
    )

    logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Balance debit result',
      result,
    })

    return {
      success: true,
      name: testName,
      message: '‚úÖ –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Error in balance debit test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (testUserId) {
      try {
        const { supabase } = require('@/supabase')
        await supabase.from('users').delete().eq('telegram_id', testUserId)
      } catch (cleanupError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error deleting test user',
          cleanupError,
          testUserId,
        })
      }
    }
  }
}

/**
 * –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
 */
export async function testInsufficientBalance(): Promise<TestResult> {
  const testName = 'Insufficient Balance Test'
  let testUserId: string | null = null

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
    const smallBalance = 5
    const testUser = await createTestUser(
      'testInsufficientBalance_' + Date.now(),
      smallBalance
    )

    if (!testUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    testUserId = testUser.telegram_id
    const debitAmount = 50 // –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º', {
      description: 'Created test user with small balance',
      testUserId,
      balance: smallBalance,
    })

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    let insufficientBalanceErrorDetected = false

    try {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
      const debitParams: PaymentProcessParams = {
        telegram_id: testUserId,
        amount: debitAmount,
        stars: debitAmount,
        type: TransactionType.MONEY_EXPENSE,
        description: 'Insufficient balance test',
        bot_name: 'test_bot',
        service_type: ModeEnum.NeuroPhoto,
      }

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∏—Å–∞–Ω–∏—è
      await inngestTestEngine.sendEvent('payment/process', debitParams)
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
      if (
        error instanceof Error &&
        error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
      ) {
        insufficientBalanceErrorDetected = true
        logger.info('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Insufficient balance error correctly detected',
          error: error.message,
        })
      } else {
        throw error
      }
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
    if (!insufficientBalanceErrorDetected) {
      throw new Error('–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞')
    }

    return {
      success: true,
      name: testName,
      message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error in insufficient balance test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (testUserId) {
      try {
        const { supabase } = require('@/supabase')
        await supabase.from('users').delete().eq('telegram_id', testUserId)
      } catch (cleanupError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error deleting test user',
          cleanupError,
          testUserId,
        })
      }
    }
  }
}

/**
 * –ë–æ–ª–µ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–µ–ª–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function testRealPaymentNotification(): Promise<TestResult> {
  const testName = 'Real Payment Notification Test'
  let testUserId: string | null = null
  let notificationReceived = false

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await createTestUser(
      'testNotificationUser_' + Date.now(),
      TEST_PAYMENT_CONFIG.initialBalance
    )

    if (!testUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    testUserId = testUser.telegram_id
    const amount = 5 // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
      description: 'Created test user for notification test',
      testUserId,
      initialBalance: TEST_PAYMENT_CONFIG.initialBalance,
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    const mockTelegramBot = {
      sendMessage: (chatId: number | string, text: string) => {
        logger.info('üì§ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', {
          description: 'Bot sent message',
          chatId,
          text,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        if (text.includes('–°—É–º–º–∞') && text.includes('–ë–∞–ª–∞–Ω—Å')) {
          notificationReceived = true
        }

        return Promise.resolve()
      },
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–∞ –¥–ª—è createBotByName
    const originalCreateBot = require('@/core/bot').createBotByName

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    require('@/core/bot').createBotByName = async () => {
      return {
        bot: {
          telegram: mockTelegramBot,
        },
      }
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞
    await inngestTestEngine.sendEvent('payment/process', {
      telegram_id: testUserId,
      amount,
      type: TransactionType.MONEY_EXPENSE,
      description: 'Test payment for notification',
      bot_name: 'test_bot',
      service_type: ModeEnum.NeuroPhoto,
    })

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    require('@/core/bot').createBotByName = originalCreateBot

    // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    await new Promise(resolve => setTimeout(resolve, 500))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (!notificationReceived) {
      throw new Error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'Real payment notification test passed',
      notificationReceived,
    })

    return {
      success: true,
      name: testName,
      message: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö', {
      description: 'Error in real payment notification test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (testUserId) {
      try {
        const { supabase } = require('@/supabase')
        await supabase.from('users').delete().eq('telegram_id', testUserId)
        logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', {
          description: 'Test user deleted',
          testUserId,
        })
      } catch (cleanupError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error deleting test user',
          cleanupError,
          testUserId,
        })
      }
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
 */
export async function runPaymentNotificationTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö...')

  const results: TestResult[] = []

  // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  results.push(await testPaymentNotification())
  results.push(await testRealPaymentNotification())

  // –¢–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
  results.push(await testBalanceTopUp())
  results.push(await testBalanceDebit())
  results.push(await testInsufficientBalance())

  logger.info('üèÅ –¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã.')

  return results
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
async function main() {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏')

  try {
    const results = await runPaymentNotificationTests()

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Test results',
      total: totalTests,
      passed: passedTests,
      failed: failedTests,
    })

    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if (failedTests > 0) {
      const failedResults = results.filter(r => !r.success)
      logger.error('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
        description: 'Failed tests',
        tests: failedResults.map(r => ({ name: r.name, message: r.message })),
      })

      // –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
      process.exit(1)
    } else {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
      process.exit(0)
    }
  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', {
      description: 'Unhandled error',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
}
