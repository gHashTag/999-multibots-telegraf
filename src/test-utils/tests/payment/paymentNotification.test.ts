import { logger } from '@/utils/logger'
import { TestResult } from '@/types/tests'
// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
import * as notificationHelper from '@/helpers/notifications/userNotifier'
import { createTestUser } from '../../helpers/users'
import { inngestTestEngine } from '../../test-config'
import { TEST_PAYMENT_CONFIG } from '@/config/test'
import {
  TransactionType,
  PaymentProcessParams,
} from '@/interfaces/payments.interface'
import { ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
 * –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
 */
// TODO: Fix mocking for sendTransactionNotification - –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
// export async function testPaymentNotification(): Promise<TestResult> { ... }

/**
 * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
// TODO: Fix user creation/balance logic - –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
// export async function testBalanceTopUp(): Promise<TestResult> { ... }

/**
 * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 */
// TODO: Fix user creation/balance logic - –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
// export async function testBalanceDebit(): Promise<TestResult> { ... }

/**
 * –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
 */
// TODO: Fix user creation/balance logic - –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
// export async function testInsufficientBalance(): Promise<TestResult> { ... }

/**
 * –ë–æ–ª–µ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–µ–ª–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
// TODO: Fix user creation/balance logic and mocking - –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
// export async function testRealPaymentNotification(): Promise<TestResult> { ... }

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
 */
export async function runPaymentNotificationTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö...')

  const results: TestResult[] = []

  // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  // results.push(await testPaymentNotification())
  // results.push(await testRealPaymentNotification())
  // results.push(await testBalanceTopUp())
  // results.push(await testBalanceDebit())
  // results.push(await testInsufficientBalance())

  logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
  logger.info('üèÅ –¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–ø—Ä–æ–ø—É—â–µ–Ω—ã).')

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç—ã –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
  return results
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
async function main() {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏')

  try {
    const results = await runPaymentNotificationTests()

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Test results',
      total: totalTests,
      passed: passedTests,
      failed: failedTests,
    })

    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if (failedTests > 0) {
      const failedResults = results.filter(r => !r.success)
      logger.error('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
        description: 'Failed tests',
        tests: failedResults.map(r => ({ name: r.name, message: r.message })),
      })

      // –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
      process.exit(1)
    } else {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
      process.exit(0)
    }
  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', {
      description: 'Unhandled error',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
}
