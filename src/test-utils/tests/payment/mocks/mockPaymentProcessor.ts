import { logger } from '@/utils/logger'

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–º–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
 * @param options –û–ø—Ü–∏–∏ –º–æ–∫–∞
 * @returns –§—É–Ω–∫—Ü–∏—è-–º–æ–∫
 */
export function createMockFn<T extends (...args: any[]) => any>(
  options: {
    name?: string
    implementation?: T
    returnValue?: ReturnType<T>
    throwError?: boolean
    errorMessage?: string
  } = {}
) {
  const {
    name = 'mockFunction',
    implementation,
    returnValue,
    throwError = false,
    errorMessage = 'Mock Error',
  } = options

  const mockFunction = jest.fn(
    implementation ||
      ((...args: Parameters<T>) => {
        logger.info(`üîç –í—ã–∑–æ–≤ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏: ${name}`, {
          description: `Mock function called: ${name}`,
          args,
        })

        if (throwError) {
          throw new Error(errorMessage)
        }

        return returnValue
      })
  ) as jest.MockedFunction<T>

  return mockFunction
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Supabase –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function createMockSupabaseClient() {
  return {
    from: jest.fn().mockReturnThis(),
    select: jest.fn().mockReturnThis(),
    eq: jest.fn().mockReturnThis(),
    order: jest.fn().mockReturnThis(),
    insert: jest.fn().mockReturnThis(),
    update: jest.fn().mockReturnThis(),
    delete: jest.fn().mockReturnThis(),
    limit: jest.fn().mockReturnThis(),
    single: jest.fn().mockReturnThis(),
    rpc: jest.fn().mockReturnThis(),
    data: null,
    error: null,
  }
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getUserBalance
 * @param balance –ë–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–æ–∫
 * @returns –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ getUserBalance
 */
export function createMockGetUserBalance(balance: number) {
  return jest.fn().mockResolvedValue(balance)
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createSuccessfulPayment
 * @param success –î–æ–ª–∂–µ–Ω –ª–∏ –º–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É—Å–ø–µ—Ö
 * @returns –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ createSuccessfulPayment
 */
export function createMockCreateSuccessfulPayment(success: boolean = true) {
  return jest.fn().mockResolvedValue({
    success,
    payment: success ? { id: 'mock-payment-id', status: 'COMPLETED' } : null,
    error: success ? null : new Error('Failed to create payment'),
  })
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 * @param exists –î–æ–ª–∂–µ–Ω –ª–∏ –º–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @returns –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ checkPaymentExists
 */
export function createMockCheckPaymentExists(exists: boolean = false) {
  return jest.fn().mockResolvedValue({
    exists,
    payment: exists ? { id: 'mock-payment-id', status: 'COMPLETED' } : null,
  })
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param success –î–æ–ª–∂–µ–Ω –ª–∏ –º–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É—Å–ø–µ—Ö
 * @returns –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ updateUserBalance
 */
export function createMockUpdateUserBalance(success: boolean = true) {
  return jest.fn().mockResolvedValue({
    success,
    oldBalance: 1000,
    newBalance: 1500,
    error: success ? null : new Error('Failed to update balance'),
  })
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param success –î–æ–ª–∂–µ–Ω –ª–∏ –º–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É—Å–ø–µ—Ö
 * @returns –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ sendPaymentNotification
 */
export function createMockSendPaymentNotification(success: boolean = true) {
  return jest.fn().mockResolvedValue({
    success,
    error: success ? null : new Error('Failed to send notification'),
  })
}
