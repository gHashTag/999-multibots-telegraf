import { supabase } from '@/core/supabase'
import { createTestUser } from '@/test-utils/helpers/createTestUser'
import { logger } from '@/utils/logger'
import { generateUniqueShortInvId } from '@/scenes/getRuBillWizard/helper'
import { createPendingPayment } from '@/core/supabase/createPendingPayment'
import { inngest } from '@/inngest-functions'
import assert from '@/test-utils/core/assert'
import { PaymentTester } from './PaymentTester'
import { mockSupabase } from '@/test-utils/mocks/supabase'

interface TestResult {
  success: boolean
  reason?: string
  message?: string
}

/**
 * –¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤
 */
class DuplicateInvoiceIdTester {
  private testUserId: string
  private paymentTester: PaymentTester

  constructor() {
    this.paymentTester = new PaymentTester()
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
   */
  async setup(): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const testUserId = '144022504' // –¢–µ—Å—Ç–æ–≤—ã–π ID —Ç–µ–ª–µ–≥—Ä–∞–º
      this.testUserId = testUserId

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      mockSupabase.reset()

      await createTestUser({
        telegram_id: testUserId,
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      })

      logger.info('üß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
        description: 'Test user created',
        telegram_id: this.testUserId,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error creating test user',
        error: error instanceof Error ? error.message : String(error),
      })
      throw error
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup(): Promise<void> {
    try {
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
      await supabase
        .from('payments_v2')
        .delete()
        .eq('telegram_id', this.testUserId)

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
      mockSupabase.reset()

      logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
        description: 'Test data cleaned up',
        telegram_id: this.testUserId,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Error cleaning up test data',
        error: error instanceof Error ? error.message : String(error),
      })
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–æ–π—Å ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤
   * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
   */
  async generateInvoiceId(): Promise<number> {
    try {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const invId = await generateUniqueShortInvId(this.testUserId, 1)

      logger.info('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–≤–æ–π—Å ID –¥–ª—è —Ç–µ—Å—Ç–∞', {
        description: 'Generated invoice ID for test',
        invId,
        testUserId: this.testUserId,
      })

      return invId
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å ID –¥–ª—è —Ç–µ—Å—Ç–∞', {
        description: 'Error generating invoice ID for test',
        error: error instanceof Error ? error.message : String(error),
        testUserId: this.testUserId,
      })
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
   */
  async invoiceExists(invId: string | number): Promise<boolean> {
    try {
      const { data } = await supabase
        .from('payments_v2')
        .select('inv_id')
        .eq('inv_id', invId.toString())
        .single()

      return !!data
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞', {
        description: 'Error checking if invoice exists',
        error: error instanceof Error ? error.message : String(error),
        invId,
      })
      return false
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
   */
  async testUniqueInvoiceId(): Promise<TestResult> {
    try {
      const invId = await this.generateInvoiceId()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ ID –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
      const exists = await this.invoiceExists(invId)
      if (exists) {
        return {
          success: false,
          reason: `ID –∏–Ω–≤–æ–π—Å–∞ ${invId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
        }
      }

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const result = await createPendingPayment({
        telegram_id: this.testUserId,
        amount: 1,
        stars: 1,
        inv_id: invId.toString(),
        description: 'Test payment',
        bot_name: 'test_bot',
        invoice_url: `https://example.com/invoice/${invId}`,
      })

      assert.isTrue(result.success, '–ü–ª–∞—Ç–µ–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø–æ—è–≤–∏–ª—Å—è –≤ –±–∞–∑–µ
      const nowExists = await this.invoiceExists(invId)
      assert.isTrue(
        nowExists,
        '–ü–ª–∞—Ç–µ–∂ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è'
      )

      return {
        success: true,
        message: `–ü–ª–∞—Ç–µ–∂ —Å ID ${invId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID', {
        description: 'Error testing unique invoice ID',
        error: error instanceof Error ? error.message : String(error),
      })

      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
   */
  async testDuplicateInvoiceId(): Promise<TestResult> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
      const invId = await this.generateInvoiceId()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ ID –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
      const exists = await this.invoiceExists(invId)
      if (exists) {
        return {
          success: false,
          reason: `ID –∏–Ω–≤–æ–π—Å–∞ ${invId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
        }
      }

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
      const result1 = await createPendingPayment({
        telegram_id: this.testUserId,
        amount: 1,
        stars: 1,
        inv_id: invId.toString(),
        description: 'First test payment',
        bot_name: 'test_bot',
        invoice_url: `https://example.com/invoice/${invId}`,
      })

      assert.isTrue(result1.success, '–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ —Å —Ç–µ–º –∂–µ ID
      try {
        const result2 = await createPendingPayment({
          telegram_id: this.testUserId,
          amount: 2,
          stars: 2,
          inv_id: invId.toString(),
          description: 'Second test payment (duplicate)',
          bot_name: 'test_bot',
          invoice_url: `https://example.com/invoice/${invId}`,
        })

        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–ª—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏ - —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ
        return {
          success: false,
          reason: '–°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏–ª–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂ —Å —Ç–µ–º –∂–µ ID',
        }
      } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        const isDuplicateKeyError =
          errorMessage.includes('duplicate key') ||
          errorMessage.includes('unique constraint')

        if (!isDuplicateKeyError) {
          return {
            success: false,
            reason: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`,
          }
        }

        // –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂
        return {
          success: true,
          message:
            '–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –ø–ª–∞—Ç–µ–∂–∞',
        }
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è ID', {
        description: 'Error testing duplicate invoice ID',
        error: error instanceof Error ? error.message : String(error),
      })

      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  async testPaymentStatusCheck(): Promise<TestResult> {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const invId = await this.generateInvoiceId()

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
      await createPendingPayment({
        telegram_id: this.testUserId,
        amount: 1,
        stars: 1,
        inv_id: invId.toString(),
        description: 'Test payment for status check',
        bot_name: 'test_bot',
        invoice_url: `https://example.com/invoice/${invId}`,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      const { data: payment } = await supabase
        .from('payments_v2')
        .select('status')
        .eq('inv_id', invId.toString())
        .single()

      assert.strictEqual(
        payment?.status,
        'PENDING',
        '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PENDING'
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await supabase
        .from('payments_v2')
        .update({ status: 'COMPLETED' })
        .eq('inv_id', invId.toString())

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      const { data: updatedPayment } = await supabase
        .from('payments_v2')
        .select('status')
        .eq('inv_id', invId.toString())
        .single()

      assert.strictEqual(
        updatedPayment?.status,
        'COMPLETED',
        '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å COMPLETED'
      )

      return {
        success: true,
        message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error testing payment status check',
        error: error instanceof Error ? error.message : String(error),
      })

      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Inngest —Å–æ–±—ã—Ç–∏—è
   */
  async testPaymentProcessing(): Promise<TestResult> {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const invId = await this.generateInvoiceId()

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
      await createPendingPayment({
        telegram_id: this.testUserId,
        amount: 1,
        stars: 1,
        inv_id: invId.toString(),
        description: 'Test payment for processing',
        bot_name: 'test_bot',
        invoice_url: `https://example.com/invoice/${invId}`,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
      await inngest.send({
        name: 'payment/process',
        data: {
          telegram_id: this.testUserId,
          amount: 1,
          stars: 1,
          type: TransactionType.MONEY_INCOME,
          description: 'Test payment processing',
          bot_name: 'test_bot',
          inv_id: invId.toString(),
        },
      })

      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø–∏—Å–µ–π
      const { data: payments, count } = await supabase
        .from('payments_v2')
        .select('*', { count: 'exact' })
        .eq('inv_id', invId.toString())

      assert.strictEqual(
        count,
        1,
        '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º ID –∏–Ω–≤–æ–π—Å–∞'
      )

      return {
        success: true,
        message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø–∏—Å–µ–π',
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error testing payment processing',
        error: error instanceof Error ? error.message : String(error),
      })

      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
   */
  async testFallbackInvoiceIdGeneration(): Promise<TestResult> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const invIds = []

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ä–∞–∑–Ω—ã—Ö ID
      for (let i = 0; i < 5; i++) {
        const invId = await this.generateInvoiceId()
        invIds.push(invId)

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —ç—Ç–∏–º ID
        await createPendingPayment({
          telegram_id: this.testUserId,
          amount: 1,
          stars: 1,
          inv_id: invId.toString(),
          description: `Test payment ${i + 1}`,
          bot_name: 'test_bot',
          invoice_url: `https://example.com/invoice/${invId}`,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω
        const exists = await this.invoiceExists(invId)
        assert.isTrue(
          exists,
          `–ü–ª–∞—Ç–µ–∂ ${i + 1} —Å ID ${invId} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ`
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã
      const uniqueIds = [...new Set(invIds)]
      const allUnique = uniqueIds.length === invIds.length

      assert.isTrue(allUnique, '–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏')

      return {
        success: true,
        message: '–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
      }
    } catch (error) {
      logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID',
        {
          description: 'Error testing fallback invoice ID generation',
          error: error instanceof Error ? error.message : String(error),
        }
      )

      return {
        success: false,
        reason: error instanceof Error ? error.message : String(error),
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests(): Promise<TestResult[]> {
    try {
      await this.setup()

      const results = []

      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
      logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID', {
        description: 'Running unique invoice ID test',
      })
      results.push(await this.testUniqueInvoiceId())

      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è ID
      logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è ID', {
        description: 'Running duplicate invoice ID test',
      })
      results.push(await this.testDuplicateInvoiceId())

      // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
      logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Running payment status check test',
      })
      results.push(await this.testPaymentStatusCheck())

      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
      logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Running payment processing test',
      })
      results.push(await this.testPaymentProcessing())

      // –¢–µ—Å—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
      logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID', {
        description: 'Running fallback invoice ID generation test',
      })
      results.push(await this.testFallbackInvoiceIdGeneration())

      await this.cleanup()

      return results
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤', {
        description: 'Error running tests',
        error: error instanceof Error ? error.message : String(error),
      })

      await this.cleanup()

      return [
        {
          success: false,
          reason: error instanceof Error ? error.message : String(error),
        },
      ]
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤
 */
export async function runDuplicateInvoiceIdTests(
  options: { verbose?: boolean } = {}
): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤', {
    description: 'Running duplicate invoice ID tests',
    options,
  })

  const tester = new DuplicateInvoiceIdTester()
  const results = await tester.runAllTests()

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω verbose —Ä–µ–∂–∏–º
  if (options.verbose) {
    results.forEach((result, index) => {
      if (result.success) {
        logger.info(`‚úÖ –¢–µ—Å—Ç #${index + 1} –ø—Ä–æ–π–¥–µ–Ω: ${result.message}`, {
          description: `Test #${index + 1} passed`,
        })
      } else {
        logger.error(`‚ùå –¢–µ—Å—Ç #${index + 1} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${result.reason}`, {
          description: `Test #${index + 1} failed`,
        })
      }
    })
  }

  const successCount = results.filter(r => r.success).length
  const failCount = results.length - successCount

  logger.info('üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤', {
    description: 'Duplicate invoice ID tests results',
    total: results.length,
    success: successCount,
    fail: failCount,
  })

  return results
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runDuplicateInvoiceIdTests({ verbose: true })
    .then(() => {
      process.exit(0)
    })
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤', {
        description: 'Error running tests',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    })
}
