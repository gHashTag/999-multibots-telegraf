import { supabase } from '../../../supabase'
import { logger } from '@/utils/logger'
import { TEST_PAYMENT_CONFIG } from '../../../config/test'
import { createTestUser } from '../../helpers/users'
import { TestResult, TestUser } from '../../../types/tests'
// import { getBotByName } from '../../../utils/bot' // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import { ModeEnum } from '../../../price/helpers/modelsCost'
import {
  TransactionType,
  // PaymentStatus, // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
} from '../../../interfaces/payments.interface'
// import { runTest } from '../../helpers/runner' // –£–¥–∞–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ–ª–ø–µ—Ä–∞
import {
  getUserBalance,
  invalidateBalanceCache,
} from '@/core/supabase/getUserBalance'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { v4 as uuidv4 } from 'uuid'

// type User = TestUser // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

interface BalanceCheckResult {
  success: boolean
  currentBalance?: number
}

// const TRANSACTION_TYPES = { // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//  MONEY_INCOME: 'MONEY_INCOME' as TransactionType,
//  MONEY_EXPENSE: 'MONEY_EXPENSE' as TransactionType,
// }

// type TransactionData = { // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//   telegram_id: string
//   amount: number
//   type: TransactionType
//   service_type: ModeEnum
//   description: string
// }

async function checkBalance(
  userId: string,
  requiredBalance: number
): Promise<BalanceCheckResult> {
  try {
    const { data: user, error } = await supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', userId)
      .single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', { error, userId })
      return { success: false }
    }

    if (!user) {
      logger.warn('‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞', { userId })
      return { success: false }
    }

    const currentBalance = user.balance || 0
    return {
      success: currentBalance >= requiredBalance,
      currentBalance,
    }
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', {
      error,
      userId,
    })
    return { success: false }
  }
}

// async function getUserBalance(userId: string): Promise<number> { // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//   const { data, error } = await supabase
//     .from('users')
// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ getUserBalance ...
//   return data?.balance || 0
// }

async function testInitialBalance(testUserId: string): Promise<TestResult> {
  const testName = 'Initial Balance Check'
  try {
    const initialBalanceCheck = await checkBalance(
      testUserId,
      TEST_PAYMENT_CONFIG.initialBalance
    )
    if (!initialBalanceCheck.success) {
      throw new Error(
        `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ–≤–µ—Ä–µ–Ω: ${initialBalanceCheck.currentBalance} != ${TEST_PAYMENT_CONFIG.initialBalance}`
      )
    }
    return {
      success: true,
      name: testName,
      message: `‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${initialBalanceCheck.currentBalance}`,
    }
  } catch (error) {
    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : String(error),
    }
  }
}

async function testCreateTransactions(testUserId: string): Promise<TestResult> {
  const testName = 'Create Test Transactions'
  try {
    const transactionTypes = [
      TransactionType.MONEY_INCOME,
      TransactionType.MONEY_EXPENSE,
    ]
    const createdTransactions = []
    for (const type of transactionTypes) {
      // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ Supabase
      const { data, error } = await supabase
        .from('transactions')
        .insert({
          telegram_id: testUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º testUserId
          amount: 100,
          type,
          // status: PaymentStatus.COMPLETED, // –£–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å, —Ç–∞–∫ –∫–∞–∫ PaymentStatus –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
          service_type: ModeEnum.NeuroPhotoV2,
          description: `Test ${type}`,
        })
        .select()

      if (error)
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${type}: ${error.message}`
        )
      if (data) createdTransactions.push(...data)
    }
    if (createdTransactions.length !== transactionTypes.length) {
      throw new Error(
        `–°–æ–∑–¥–∞–Ω–æ ${createdTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–º–µ—Å—Ç–æ ${transactionTypes.length}`
      )
    }
    return {
      success: true,
      name: testName,
      message: `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
    }
  } catch (error) {
    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : String(error),
    }
  }
}

async function testBalanceSufficiencyForModes(
  testUserId: string
): Promise<TestResult[]> {
  const modeResults: TestResult[] = []
  for (const mode of Object.values(ModeEnum)) {
    const testName = `Balance Check for ${mode}`
    try {
      const modesConfig = TEST_PAYMENT_CONFIG.modes as Record<string, number> // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
      const requiredAmount = modesConfig[mode.toLowerCase()] || 0
      const balanceCheck = await checkBalance(testUserId, requiredAmount)
      if (!balanceCheck.success) {
        throw new Error(
          `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${mode}: ${balanceCheck.currentBalance || 0} < ${requiredAmount}`
        )
      }
      modeResults.push({
        success: true,
        name: testName,
        message: `‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${mode}: ${balanceCheck.currentBalance} >= ${requiredAmount}`,
      })
    } catch (error) {
      modeResults.push({
        success: false,
        name: testName,
        message: error instanceof Error ? error.message : String(error),
      })
    }
  }
  return modeResults
}

async function testInvalidUserIdCheck(): Promise<TestResult> {
  const testName = 'Invalid User ID Check'
  try {
    const invalidCheck = await checkBalance('invalid_id', 0)
    if (invalidCheck.success) {
      throw new Error(
        '–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      )
    }
    return {
      success: true,
      name: testName,
      message: '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    }
  } catch (error) {
    // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω), —Ç–∞–∫ —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ checkBalance –≤–µ—Ä–Ω—É–ª false
    // –ï—Å–ª–∏ checkBalance –∫–∏–Ω—É–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏ user not found), —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞.
    return {
      success: false,
      name: testName,
      message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è
 */
async function testBalanceCacheInvalidation(
  testUserId: string
): Promise<TestResult> {
  const testName = 'Balance Cache Invalidation'
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (—ç—Ç–æ –∑–∞–∫—ç—à–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)
    const initialBalance = await getUserBalance(testUserId)
    logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ):', {
      description: 'Cached initial balance',
      testUserId,
      initialBalance,
    })

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é
    const paymentAmount = 10
    const paymentId = uuidv4()
    await createSuccessfulPayment({
      telegram_id: testUserId,
      amount: paymentAmount,
      type: TransactionType.MONEY_EXPENSE,
      description: 'Test payment for cache invalidation',
      bot_name: 'test_bot',
      service_type: ModeEnum.NeuroPhotoV2,
      stars: paymentAmount,
      payment_method: 'test',
      status: 'COMPLETED',
      inv_id: paymentId,
    })

    logger.info('üíæ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:', {
      description: 'Created test payment',
      testUserId,
      paymentAmount,
      paymentId,
    })

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
    invalidateBalanceCache(testUserId)
    logger.info('üîÑ –ö—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é', {
      description: 'Balance cache invalidated manually',
      testUserId,
    })

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω)
    const newBalance = await getUserBalance(testUserId)
    logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞:', {
      description: 'Got new balance after cache invalidation',
      testUserId,
      newBalance,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    const balanceDifference = initialBalance - newBalance
    if (balanceDifference !== paymentAmount) {
      throw new Error(
        `–û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${balanceDifference}, –æ–∂–∏–¥–∞–ª–æ—Å—å ${paymentAmount}`
      )
    }

    return {
      success: true,
      name: testName,
      message: `‚úÖ –ö—ç—à –±–∞–ª–∞–Ω—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${balanceDifference}`,
    }
  } catch (error) {
    return {
      success: false,
      name: testName,
      message: error instanceof Error ? error.message : String(error),
    }
  }
}

export async function runBalanceTests(): Promise<TestResult[]> {
  const allResults: TestResult[] = []
  let testUserId: string | null = null
  let testUser: TestUser | null = null

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞...')

  try {
    testUser = await createTestUser(
      'testBalanceUser_' + Date.now(),
      TEST_PAYMENT_CONFIG.initialBalance
    )
    if (!testUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
    testUserId = testUser.telegram_id
    logger.info(`üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUserId}`)

    allResults.push(await testInitialBalance(testUserId))
    allResults.push(await testCreateTransactions(testUserId))
    allResults.push(...(await testBalanceSufficiencyForModes(testUserId)))
    allResults.push(await testInvalidUserIdCheck())
    allResults.push(await testBalanceCacheInvalidation(testUserId))
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞:', {
      error,
    })
    allResults.push({
      success: false,
      name: 'Balance Tests Setup/Run Error',
      message:
        error instanceof Error
          ? error.message
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤',
    })
  } finally {
    if (testUserId) {
      try {
        logger.info(`üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUserId}`)
        await supabase
          .from('transactions')
          .delete()
          .eq('telegram_id', testUserId)
        await supabase.from('users').delete().eq('telegram_id', testUserId)
        logger.info(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId} –æ—á–∏—â–µ–Ω—ã.`)
      } catch (cleanupError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
          cleanupError,
          testUserId,
        })
        allResults.push({
          success: false,
          name: 'Test Cleanup Error',
          message:
            cleanupError instanceof Error
              ? cleanupError.message
              : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ',
        })
      }
    } else {
      logger.warn('‚ùì –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏: —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.')
    }
  }

  logger.info('üèÅ –¢–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.')
  return allResults
}
