import { supabase } from '../../../supabase'
import { logger } from '../../../utils/logger'
import { TEST_PAYMENT_CONFIG } from '../../../config/test'
import { createTestUser } from '../../helpers/users'
import { TestResult, TestUser } from '../../../types/tests'
import { getBotByName } from '../../../utils/bot'
import { ModeEnum } from '../../../types/modes'
import { TransactionType, PaymentStatus } from '../../../interfaces/payments.interface'

type User = TestUser

interface BalanceCheckResult {
  success: boolean
  currentBalance?: number
}

const TRANSACTION_TYPES = {
  MONEY_INCOME: 'MONEY_INCOME' as TransactionType,
  MONEY_EXPENSE: 'MONEY_EXPENSE' as TransactionType
}

type TransactionData = {
  telegram_id: string
  amount: number
  type: TransactionType
  service_type: ModeEnum
  description: string
}

async function checkBalance(userId: string, expectedBalance: number): Promise<BalanceCheckResult> {
  try {
    const { data: user, error } = await supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', userId)
      .single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error)
      return { success: false }
    }

    if (!user) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return { success: false }
    }

    const currentBalance = user.balance || 0
    return {
      success: currentBalance === expectedBalance,
      currentBalance
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error)
    return { success: false }
  }
}

async function getUserBalance(userId: string): Promise<number> {
  const { data, error } = await supabase
    .from('users')
    .select('balance')
    .eq('telegram_id', userId)
    .single()

  if (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${error.message}`)
  }

  return data?.balance || 0
}

export async function runBalanceTests(): Promise<TestResult[]> {
  const results: TestResult[] = []
  let testUserId: string = ''
  let testUser: User | null = null
  let requiredAmount = 0

  try {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await createTestUser()
    testUserId = testUser.telegram_id

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await supabase
      .from('users')
      .update({ balance: TEST_PAYMENT_CONFIG.testUser.initialBalance })
      .eq('telegram_id', testUserId)

    results.push({
      success: true,
      name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω'
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalanceResult = await checkBalance(testUserId, TEST_PAYMENT_CONFIG.testUser.initialBalance)
    if (!initialBalanceResult.success) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å. –û–∂–∏–¥–∞–ª–æ—Å—å: ${TEST_PAYMENT_CONFIG.testUser.initialBalance}, –ü–æ–ª—É—á–µ–Ω–æ: ${initialBalanceResult.currentBalance}`)
    }

    results.push({
      success: true,
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
      message: '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionAmount = 100
    const testTransactions: TransactionData[] = [
      {
        telegram_id: testUserId,
        amount: transactionAmount,
        type: TRANSACTION_TYPES.MONEY_INCOME,
        service_type: ModeEnum.PHOTO,
        description: 'Test income'
      },
      {
        telegram_id: testUserId,
        amount: transactionAmount,
        type: TRANSACTION_TYPES.MONEY_EXPENSE,
        service_type: ModeEnum.PHOTO,
        description: 'Test expense'
      }
    ]

    for (const transaction of testTransactions) {
      await supabase
        .from('transactions')
        .insert(transaction)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: createdTransactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('telegram_id', testUserId)

    if (!createdTransactions || createdTransactions.length !== testTransactions.length) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${testTransactions.length}, –ü–æ–ª—É—á–µ–Ω–æ: ${createdTransactions?.length || 0}`)
    }

    results.push({
      success: true,
      name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      message: `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const requiredAmount = TEST_PAYMENT_CONFIG.initialBalance - 100
    const { success: balanceCheckSuccess, currentBalance } = await checkBalance(testUserId, requiredAmount)
    
    results.push({
      success: balanceCheckSuccess,
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
      message: balanceCheckSuccess 
        ? `‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é: ${currentBalance}`
        : `‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. –¢–µ–∫—É—â–∏–π: ${currentBalance}, –æ–∂–∏–¥–∞–µ–º—ã–π: ${requiredAmount}`
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const invalidCheck = await checkBalance('invalid_id', 0)
    results.push({
      success: !invalidCheck.success,
      name: 'Invalid User ID Check',
      message: invalidCheck.success
        ? '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        : '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    for (const mode of Object.values(ModeEnum)) {
      const requiredAmount = TEST_PAYMENT_CONFIG.modes[mode.toLowerCase()] || 0
      const balanceCheck = await checkBalance(testUserId, TEST_PAYMENT_CONFIG.initialBalance)

      if (balanceCheck.success && balanceCheck.currentBalance >= requiredAmount) {
        results.push({
          success: true,
          name: `Balance Check for ${mode}`,
          message: `‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${mode}: ${balanceCheck.currentBalance} >= ${requiredAmount}`
        })
      } else {
        results.push({
          success: false,
          name: `Balance Check for ${mode}`,
          message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${mode}: ${balanceCheck.currentBalance} < ${requiredAmount}`
        })
      }
    }

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–∞–ª–∞–Ω—Å–∞:', error)
    return [{
      success: false,
      name: '–¢–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }]
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if (testUserId) {
      await supabase
        .from('users')
        .update({ balance: 0 })
        .eq('telegram_id', testUserId)
      
      await supabase
        .from('transactions')
        .delete()
        .eq('telegram_id', testUserId)
    }
  }

  return results
}


      const { success, currentBalance } = await checkBalance(
        testUserId,
        requiredAmount
      )
      
      expect(success).toBeTruthy()
      expect(currentBalance).toBe(TEST_PAYMENT_CONFIG.testUser.initialBalance)
    })

    it('should reject operation with insufficient balance', async () => {
      const requiredAmount = TEST_PAYMENT_CONFIG.testUser.initialBalance + 100
      const { success, currentBalance } = await checkBalance(
        testUserId,
        requiredAmount
      )
      
      expect(success).toBeFalsy()
      expect(currentBalance).toBe(TEST_PAYMENT_CONFIG.testUser.initialBalance)
    })
  })

  describe('Balance Updates', () => {
    it('should correctly add funds to balance', async () => {
      const addAmount = 500
      const initialBalance = await getUserBalance(testUserId)

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      await supabase
        .from('transactions')
        .insert({
          telegram_id: testUserId,
          amount: addAmount,
          type: 'money_income',
          service_type: ModeEnum.PHOTO,
          description: 'Test balance addition'
        })

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      await supabase
        .from('users')
        .update({ balance: initialBalance + addAmount })
        .eq('telegram_id', testUserId)

      const newBalance = await getUserBalance(testUserId)
      expect(newBalance).toBe(initialBalance + addAmount)
    })

    it('should correctly deduct funds from balance', async () => {
      const deductAmount = 300
      const initialBalance = await getUserBalance(testUserId)

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è
      await supabase
        .from('transactions')
        .insert({
          telegram_id: testUserId,
          amount: deductAmount,
          type: 'money_expense',
          service_type: ModeEnum.PHOTO,
          description: 'Test balance deduction'
        })

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      await supabase
        .from('users')
        .update({ balance: initialBalance - deductAmount })
        .eq('telegram_id', testUserId)

      const newBalance = await getUserBalance(testUserId)
      expect(newBalance).toBe(initialBalance - deductAmount)
    })
  })

  describe('Balance Notifications', () => {
    it('should notify user about insufficient balance', async () => {
      const bot = await getBotByName(TEST_PAYMENT_CONFIG.testUser.botName)
      const requiredAmount = TEST_PAYMENT_CONFIG.testUser.initialBalance + 1000

      const { success } = await checkBalance(testUserId, requiredAmount, {
        notifyUser: true,
        botInstance: bot,
        isRu: true
      })

      expect(success).toBeFalsy()
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –≤ PaymentTester
    })
  })

  // –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞
const historyCheckResult = await (async () => {
  try {
    const amount = 200
    const types = ['PAYMENT', 'REFUND']

      for (const type of types) {
        await supabase
          .from('transactions')
          .insert({
            telegram_id: testUserId,
            amount,
            type,
            service_type: ModeEnum.PHOTO,
            description: `Test ${type}`
          })
      }

      const { data: transactions } = await supabase
        .from('transactions')
        .select('*')
        .eq('telegram_id', testUserId)
        .order('created_at', { ascending: false })

      expect(transactions).toHaveLength(2)
      expect(transactions?.map(t => t.type)).toEqual(expect.arrayContaining(types))
    })

    it('should calculate balance changes correctly', async () => {
      const initialBalance = await getUserBalance(testUserId)
      const income = 300
      const expense = 200

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
      await supabase
        .from('transactions')
        .insert({
          telegram_id: testUserId,
          amount: income,
          type: 'money_income',
          service_type: ModeEnum.PHOTO,
          description: 'Test income'
        })

      await supabase
        .from('users')
        .update({ balance: initialBalance + income })
        .eq('telegram_id', testUserId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const midBalance = await getUserBalance(testUserId)
      expect(midBalance).toBe(initialBalance + income)

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
      await supabase
        .from('transactions')
        .insert({
          telegram_id: testUserId,
          amount: expense,
          type: 'money_expense',
          service_type: ModeEnum.PHOTO,
          description: 'Test expense'
        })

      await supabase
        .from('users')
        .update({ balance: midBalance - expense })
        .eq('telegram_id', testUserId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const finalBalance = await getUserBalance(testUserId)
      expect(finalBalance).toBe(initialBalance + income - expense)
    })
  })
})
