import { logger } from '@/utils/logger'
import { inngestTestEngine, TEST_CONFIG } from '../../test-config'
import { TestResult } from '../../types'
import { ModeEnum } from '@/interfaces/modes'
import { TransactionType, PaymentStatus } from '@/interfaces/payments.interface'
import { InngestTestEngine } from '@inngest/test'
import { paymentProcessorFunction } from '@/inngest-functions/paymentProcessor'
import { createMockFn } from '../../test-config'

/**
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Inngest –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 *
 * @module src/test-utils/tests/payment/paymentAdvancedInngestTest
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
 *
 * @returns {InngestTestEngine} - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Inngest
 */
function createAdvancedTestEngine() {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
  const testEngine = new InngestTestEngine({
    function: paymentProcessorFunction,
    steps: [
      {
        id: 'validate-payment-data',
        handler: async (ctx: any) => {
          const { event } = ctx
          logger.info('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞', {
            description: 'Validating payment data',
            data: event.data,
          })

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          if (!event.data.telegram_id) {
            throw new Error('Missing telegram_id')
          }

          if (!event.data.amount && event.data.amount !== 0) {
            throw new Error('Missing amount')
          }

          if (event.data.amount < 0) {
            throw new Error('Amount must be positive')
          }

          return { valid: true }
        },
      },
      {
        id: 'process-payment',
        handler: async (ctx: any) => {
          const { event } = ctx
          logger.info('üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞', {
            description: 'Processing payment',
            data: event.data,
          })

          // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
          await new Promise(resolve => setTimeout(resolve, 100))

          return {
            status: PaymentStatus.COMPLETED,
            telegram_id: event.data.telegram_id,
            amount: event.data.amount,
            stars: event.data.stars || event.data.amount,
            type: event.data.type,
            payment_id: `test-${Date.now()}`,
          }
        },
      },
      {
        id: 'update-user-balance',
        handler: async (ctx: any) => {
          const { event, step } = ctx
          const paymentResult = await step.run(
            'process-payment',
            () => ctx.step.data
          )

          logger.info('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
            description: 'Updating user balance',
            telegram_id: event.data.telegram_id,
            amount: event.data.amount,
            type: event.data.type,
          })

          // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
          return {
            success: true,
            telegram_id: event.data.telegram_id,
            previous_balance: 100, // –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å
            new_balance:
              event.data.type === TransactionType.MONEY_INCOME
                ? 100 + event.data.stars
                : 100 - event.data.stars,
            payment: paymentResult,
          }
        },
      },
      {
        id: 'send-notification',
        handler: async (ctx: any) => {
          const { event } = ctx
          logger.info('üì£ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ', {
            description: 'Sending payment notification',
            telegram_id: event.data.telegram_id,
            type: event.data.type,
          })

          // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          return {
            notification_sent: true,
            telegram_id: event.data.telegram_id,
            message: `–ü–ª–∞—Ç–µ–∂ ${event.data.type === TransactionType.MONEY_INCOME ? '–∑–∞—á–∏—Å–ª–µ–Ω' : '—Å–ø–∏—Å–∞–Ω'}: ${event.data.stars} –∑–≤–µ–∑–¥`,
          }
        },
      },
    ],
  })

  return testEngine
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Inngest —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–ø–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏–π
 *
 * @returns {Promise<TestResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testAdvancedInngestPaymentFlow(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest',
      {
        description: 'Starting advanced payment processing test with Inngest',
      }
    )

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    const testEngine = createAdvancedTestEngine()

    // –ú–æ–∫–∞–µ–º supabase –∫–ª–∏–µ–Ω—Ç
    const mockSupabase = {
      from: createMockFn().mockReturnValue({
        select: createMockFn().mockReturnValue({
          eq: createMockFn().mockReturnValue({
            single: createMockFn().mockReturnValue({
              data: { balance: 100 },
              error: null,
            }),
          }),
        }),
        insert: createMockFn().mockReturnValue({
          select: createMockFn().mockReturnValue({
            single: createMockFn().mockReturnValue({
              data: { id: 'test-payment-id' },
              error: null,
            }),
          }),
        }),
        update: createMockFn().mockReturnValue({
          eq: createMockFn().mockReturnValue({
            single: createMockFn().mockReturnValue({
              data: { balance: 200 },
              error: null,
            }),
          }),
        }),
      }),
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
    const testEvents = [
      // –°–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      {
        name: 'payment/process',
        data: {
          telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
          amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
          stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
          type: TransactionType.MONEY_INCOME,
          description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
          bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
          service_type: ModeEnum.TopUpBalance,
          operation_id: `test-deposit-${Date.now()}`,
        },
      },
      // –°–æ–±—ã—Ç–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
      {
        name: 'payment/process',
        data: {
          telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
          amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT / 2,
          stars: TEST_CONFIG.TEST_DATA.TEST_STARS / 2,
          type: TransactionType.MONEY_EXPENSE,
          description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
          bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
          service_type: ModeEnum.TextToVideo,
          operation_id: `test-expense-${Date.now()}`,
        },
      },
    ]

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π
    const results = []
    for (const event of testEvents) {
      logger.info(`üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ${event.name}`, {
        description: `Executing event ${event.name}`,
        event_data: event.data,
      })

      const result = await testEngine.execute({
        events: [event],
      })

      results.push(result)

      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', {
        description: 'Event processed',
        event_name: event.name,
        success: !!result.result,
        steps_completed: result.steps?.filter(s => !s.error).length || 0,
        steps_failed: result.steps?.filter(s => s.error).length || 0,
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const allStepsCompleted = results.every(
      r => r.steps && r.steps.every(step => !step.error)
    )

    if (!allStepsCompleted) {
      logger.error('‚ùå –ù–µ –≤—Å–µ —à–∞–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
        description: 'Not all steps completed successfully',
      })

      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —à–∞–≥–∞—Ö
      results.forEach((result, index) => {
        const failedSteps = result.steps?.filter(s => s.error) || []
        if (failedSteps.length > 0) {
          logger.error(`‚ùå –°–æ–±—ã—Ç–∏–µ #${index + 1} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:`, {
            description: `Event #${index + 1} has errors`,
            event_name: testEvents[index].name,
            failed_steps: failedSteps.map(s => ({
              id: s.id,
              error: s.error,
            })),
          })
        }
      })

      return {
        success: false,
        name: 'Advanced Inngest Payment Test',
        message: '–ù–µ –≤—Å–µ —à–∞–≥–∏ –≤ —Ü–µ–ø–æ—á–∫–µ —Å–æ–±—ã—Ç–∏–π –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    const depositResult = results[0].result
    const expenseResult = results[1].result

    if (!depositResult || !expenseResult) {
      logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π', {
        description: 'Missing event processing results',
        deposit_result: !!depositResult,
        expense_result: !!expenseResult,
      })

      return {
        success: false,
        name: 'Advanced Inngest Payment Test',
        message:
          '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π',
      }
    }

    logger.info('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Advanced payment test completed successfully',
      deposit_result: depositResult,
      expense_result: expenseResult,
    })

    return {
      success: true,
      name: 'Advanced Inngest Payment Test',
      message: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π', {
      description: 'Error while executing advanced payment test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      name: 'Advanced Inngest Payment Test',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 *
 * @returns {Promise<TestResult[]>} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export async function runAdvancedPaymentInngestTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest', {
    description: 'Running advanced payment tests with Inngest',
  })

  const results: TestResult[] = []

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
  const testResult = await testAdvancedInngestPaymentFlow()
  results.push(testResult)

  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  logger.info('üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π', {
    description: 'Advanced payment tests summary',
    total: results.length,
    passed: results.filter(r => r.success).length,
    failed: results.filter(r => !r.success).length,
  })

  return results
}
