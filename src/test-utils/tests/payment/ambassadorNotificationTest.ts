import { TestResult } from '../../types'
import { logger } from '@/utils/logger'
import { TransactionType } from '@/interfaces/payments.interface'
import { v4 as uuidv4 } from 'uuid'
import {
  AmbassadorNotificationParams,
  getAmbassadorByBotName,
  sendAmbassadorNotification,
} from '@/helpers/sendAmbassadorNotification'
import { TEST_CONFIG } from '../../test-config'
import { createMockFn, MockFunction } from '../../test-config'

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º
 */
const TEST_NOTIFICATION_PARAMS: AmbassadorNotificationParams = {
  user_telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
  bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
  amount: 100,
  stars: 100,
  transaction_type: TransactionType.MONEY_INCOME,
  description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
  operation_id: `test-op-${uuidv4()}`,
}

/**
 * –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getAmbassadorByBotName
 */
const mockGetAmbassadorByBotName = (
  shouldSucceed: boolean,
  botName: string = TEST_CONFIG.TEST_DATA.TEST_BOT_NAME
) => {
  return createMockFn<string, Promise<any>>().mockReturnValue(
    Promise.resolve(
      shouldSucceed
        ? {
            telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
            bot_name: botName,
            group: 'test_group',
          }
        : null
    )
  )
}

/**
 * –ú–æ–∫ –¥–ª—è Telegram.sendMessage
 */
const mockTelegramSendMessage = (shouldSucceed: boolean = true) => {
  return createMockFn<
    [string | number, string, any],
    Promise<any>
  >().mockReturnValue(
    shouldSucceed
      ? Promise.resolve({ message_id: 12345 })
      : Promise.reject(new Error('Failed to send message'))
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
 */
async function testAmbassadorNotificationSuccess(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É', {
      description: 'Testing successful ambassador notification',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    const getAmbassadorMock = mockGetAmbassadorByBotName(true)
    const sendMessageMock = mockTelegramSendMessage(true)

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const originalGetAmbassador = jest.spyOn(
      await import('@/helpers/sendAmbassadorNotification'),
      'getAmbassadorByBotName'
    )
    originalGetAmbassador.mockImplementation(getAmbassadorMock)

    // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Telegram
    const originalTelegram = jest.spyOn(await import('telegraf'), 'Telegram')
    originalTelegram.mockReturnValue({
      sendMessage: sendMessageMock,
    } as any)

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º isDev
    const originalIsDev = process.env.NODE_ENV
    process.env.NODE_ENV = 'production'

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const result = await sendAmbassadorNotification(TEST_NOTIFICATION_PARAMS)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
      if (!result.success) {
        logger.error(
          '‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞',
          {
            description: 'Expected successful notification, but got error',
            result,
          }
        )
        return {
          success: false,
          name: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
          details: { result },
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getAmbassadorByBotName –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      if (
        getAmbassadorMock.calls.length !== 1 ||
        getAmbassadorMock.calls[0] !== TEST_NOTIFICATION_PARAMS.bot_name
      ) {
        logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ getAmbassadorByBotName', {
          description: 'Incorrect getAmbassadorByBotName call',
          calls: getAmbassadorMock.calls,
        })
        return {
          success: false,
          name: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ getAmbassadorByBotName',
          details: { calls: getAmbassadorMock.calls },
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sendMessage –±—ã–ª –≤—ã–∑–≤–∞–Ω
      if (sendMessageMock.calls.length !== 1) {
        logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–∑–æ–≤ sendMessage', {
          description: 'Missing sendMessage call',
          calls: sendMessageMock.calls,
        })
        return {
          success: false,
          name: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
          message: '–ù–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω sendMessage',
          details: { calls: sendMessageMock.calls },
        }
      }

      logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
        description: 'Test passed',
      })

      return {
        success: true,
        name: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        details: {
          getAmbassadorCalls: getAmbassadorMock.calls,
          sendMessageCalls: sendMessageMock.calls,
        },
      }
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      originalGetAmbassador.mockRestore()
      originalTelegram.mockRestore()

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isDev
      process.env.NODE_ENV = originalIsDev
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Error running test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      details: {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      },
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
 */
async function testAmbassadorNotificationNoAmbassador(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
      {
        description: 'Testing ambassador notification with no ambassador found',
      }
    )

    // –ú–æ–∫–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω)
    const getAmbassadorMock = mockGetAmbassadorByBotName(false)

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const originalGetAmbassador = jest.spyOn(
      await import('@/helpers/sendAmbassadorNotification'),
      'getAmbassadorByBotName'
    )
    originalGetAmbassador.mockImplementation(getAmbassadorMock)

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const result = await sendAmbassadorNotification(TEST_NOTIFICATION_PARAMS)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
      if (result.success) {
        logger.error(
          '‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—Ö',
          {
            description: 'Expected error, but got success',
            result,
          }
        )
        return {
          success: false,
          name: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
          message: '–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—Ö',
          details: { result },
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (!result.message?.includes('not found')) {
        logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', {
          description: 'Incorrect error message',
          message: result.message,
        })
        return {
          success: false,
          name: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
          details: { errorMessage: result.message },
        }
      }

      logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
        description: 'Test passed',
      })

      return {
        success: true,
        name: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
        message: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
        details: {
          getAmbassadorCalls: getAmbassadorMock.calls,
          errorMessage: result.message,
        },
      }
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      originalGetAmbassador.mockRestore()
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Error running test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      details: {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      },
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º
 */
export async function testAmbassadorNotifications(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º', {
      description: 'Running ambassador notification tests',
    })

    const results = [
      await testAmbassadorNotificationSuccess(),
      await testAmbassadorNotificationNoAmbassador(),
    ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const success = failedTests === 0

    logger.info(
      `${success ? '‚úÖ' : '‚ùå'} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º`,
      {
        description: 'Ambassador notification test results',
        passedTests,
        failedTests,
        totalTests: results.length,
      }
    )

    return {
      success,
      name: '–¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º',
      message: success
        ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã'
        : `‚ùå ${failedTests} –∏–∑ ${results.length} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã`,
      details: results,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º', {
      description: 'Error running ambassador notification tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤',
      details: {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      },
    }
  }
}
