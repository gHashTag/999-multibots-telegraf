import { TestResult, MockFunction } from '../../types'
import { TEST_CONFIG } from '../../test-config'
import { createMockFn } from '../../test-config'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { inngestTestEngine } from '../../test-config'
import { ModelSelectionPaymentResult } from '@/interfaces/selectModelWizard.interface'

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 *
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
 * 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
 * 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
 * 3. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
 * 4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
 *
 * @module src/test-utils/tests/payment/selectModelWizardPaymentTest
 */

interface SelectModelTestCase {
  name: string
  input: {
    telegram_id: string
    modelName: string
    isPaid: boolean
    modelPrice?: number
    currentBalance?: number
  }
  expected: {
    success: boolean
    shouldCreatePayment: boolean
    paymentType?: TransactionType
    error?: string
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SelectModelWizard
const TEST_CASES: SelectModelTestCase[] = [
  {
    name: '‚úÖ –í—ã–±–æ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏',
    input: {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      modelName: 'GPT-3.5',
      isPaid: false,
      currentBalance: 100,
    },
    expected: {
      success: true,
      shouldCreatePayment: false,
    },
  },
  {
    name: '‚úÖ –í—ã–±–æ—Ä –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
    input: {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      modelName: 'GPT-4',
      isPaid: true,
      modelPrice: 10,
      currentBalance: 100,
    },
    expected: {
      success: true,
      shouldCreatePayment: true,
      paymentType: TransactionType.MONEY_EXPENSE,
    },
  },
  {
    name: '‚ùå –í—ã–±–æ—Ä –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
    input: {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      modelName: 'GPT-4',
      isPaid: true,
      modelPrice: 50,
      currentBalance: 20,
    },
    expected: {
      success: false,
      shouldCreatePayment: false,
      error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
    },
  },
  {
    name: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
    input: {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      modelName: 'Claude-3',
      isPaid: true,
      modelPrice: 15,
      currentBalance: 100,
    },
    expected: {
      success: true,
      shouldCreatePayment: true,
      paymentType: TransactionType.MONEY_EXPENSE,
    },
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
async function runSelectModelPaymentTest(
  testCase: SelectModelTestCase
): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π', {
      description: 'Starting SelectModelWizard payment integration test',
      testName: testCase.name,
    })

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    inngestTestEngine.clearEvents()

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const getUserBalanceMock = createMockFn<
      string,
      Promise<number>
    >().mockReturnValue(Promise.resolve(testCase.input.currentBalance || 0))

    const setModelMock = createMockFn<
      [string, string],
      Promise<void>
    >().mockReturnValue(Promise.resolve())

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É SelectModelWizard
    const paymentResult = await mockSelectModelWizardProcess(testCase.input, {
      getUserBalance: getUserBalanceMock as MockFunction<
        string,
        Promise<number>
      >,
      setModel: setModelMock as MockFunction<[string, string], Promise<void>>,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è
    const paymentEvents = inngestTestEngine.getEventsByName('payment/process')
    const paymentEventSent = paymentEvents.length > 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const success = paymentResult.success === testCase.expected.success
    const paymentCreationCorrect =
      paymentEventSent === testCase.expected.shouldCreatePayment

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç—Å—è
    let paymentTypeCorrect = true
    if (testCase.expected.paymentType && paymentEventSent) {
      const paymentEvent = paymentEvents[0]
      paymentTypeCorrect =
        paymentEvent.data.type === testCase.expected.paymentType
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è
    let errorCorrect = true
    if (testCase.expected.error) {
      errorCorrect =
        paymentResult.error?.includes(testCase.expected.error) || false
    }

    const allChecksPass =
      success && paymentCreationCorrect && paymentTypeCorrect && errorCorrect

    return {
      success: allChecksPass,
      name: testCase.name,
      message: allChecksPass ? '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ' : '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
      details: {
        expected: testCase.expected,
        actual: {
          success: paymentResult.success,
          paymentEventSent,
          paymentType: paymentEventSent ? paymentEvents[0].data.type : null,
          error: paymentResult.error,
        },
        balanceCalls: getUserBalanceMock.calls,
        modelSetCalls: setModelMock.calls,
      },
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ SelectModelWizard', {
      description: 'Error running SelectModelWizard payment test',
      testName: testCase.name,
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testCase.name,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      details: {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      },
    }
  }
}

/**
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
async function mockSelectModelWizardProcess(
  input: SelectModelTestCase['input'],
  mocks: {
    getUserBalance: MockFunction<string, Promise<number>>
    setModel: MockFunction<[string, string], Promise<void>>
  }
): Promise<ModelSelectionPaymentResult> {
  try {
    const { telegram_id, modelName, isPaid, modelPrice = 0 } = input

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentBalance = (await mocks.getUserBalance(telegram_id)) as number

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞
    if (isPaid) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
      if (currentBalance < modelPrice) {
        return {
          success: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${modelPrice}`,
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      const operationId = `test-select-model-${Date.now()}-${uuidv4()}`

      await inngestTestEngine.sendEvent('payment/process', {
        telegram_id,
        amount: modelPrice,
        stars: modelPrice,
        type: TransactionType.MONEY_EXPENSE,
        description: `üéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ${modelName}`,
        bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
        service_type: ModeEnum.SelectModelWizard,
        metadata: {
          model_name: modelName,
          operation_id: operationId,
          test: true,
        },
      })

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
      await mocks.setModel([telegram_id, modelName])

      return {
        success: true,
        transactionId: operationId,
        metadata: {
          model_name: modelName,
          operation_id: operationId,
          model_price: modelPrice,
        },
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    await mocks.setModel([telegram_id, modelName])

    return { success: true }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 */
export async function testSelectModelWizardPaymentIntegration(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
      {
        description: 'Starting SelectModelWizard payment integration tests',
        numberOfTests: TEST_CASES.length,
      }
    )

    const results: TestResult[] = []

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    for (const testCase of TEST_CASES) {
      const result = await runSelectModelPaymentTest(testCase)
      results.push(result)

      logger.info(result.success ? '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω', {
        description: result.success ? 'Test passed' : 'Test failed',
        testName: testCase.name,
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const successRate = (passedTests / TEST_CASES.length) * 100

    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard', {
      description: 'SelectModelWizard integration test results',
      total: TEST_CASES.length,
      passed: passedTests,
      failed: failedTests,
      successRate: `${successRate.toFixed(2)}%`,
    })

    return {
      success: failedTests === 0,
      name: '–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
      message:
        failedTests === 0
          ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
          : `‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ ${failedTests} –∏–∑ ${TEST_CASES.length} —Ç–µ—Å—Ç–æ–≤`,
      details: results,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ SelectModelWizard', {
      description: 'Error running SelectModelWizard tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SelectModelWizard —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤',
      details: {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      },
    }
  }
}
