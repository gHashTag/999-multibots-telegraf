import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { testPaymentProcessing } from './core/paymentProcessor.test'
import { testRuPaymentIntegration } from './integrations/test-ru-payment'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runPaymentTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')

  try {
    const results: TestResult[] = []

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    results.push(await testPaymentProcessing())

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    results.push(await testRuPaymentIntegration())

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const passedTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info(
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`
    )

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error)

    return [
      {
        success: false,
        name: 'Payment System Tests',
        message: error instanceof Error ? error.message : String(error),
      },
    ]
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runPaymentTests()
    .then(() => logger.info('‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'))
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
