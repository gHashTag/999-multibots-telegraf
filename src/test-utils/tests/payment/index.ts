import { logger } from '@/utils/logger'
import { TestResult } from '../../types'
import { paymentCoreTests } from './core'
import { paymentFeatureTests } from './features'
import { paymentIntegrationTests } from './integrations'
import { validateTestStructure } from './utils/validateStructure'

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runAllPaymentTests(
  options = { verbose: true }
): Promise<TestResult[]> {
  const results: TestResult[] = []

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤
    const structureValidation = validateTestStructure()
    if (!structureValidation.isValid) {
      throw new Error(
        '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∞:\n' + structureValidation.errors.join('\n')
      )
    }

    // Core tests - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    logger.info('‚öôÔ∏è –ó–∞–ø—É—Å–∫ core —Ç–µ—Å—Ç–æ–≤...')
    const coreResults = await Promise.all([
      paymentCoreTests.testPaymentProcessor(),
    ])
    results.push(...coreResults)

    // Feature tests - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    logger.info('‚≠ê –ó–∞–ø—É—Å–∫ feature —Ç–µ—Å—Ç–æ–≤...')
    const featureResults = await Promise.all([
      paymentFeatureTests.testBalance(),
    ])
    results.push(...featureResults)

    // Integration tests - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Robokassa
    logger.info('üîå –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...')
    const integrationResults = await Promise.all([
      paymentIntegrationTests.testRobokassa(),
    ])
    results.push(...integrationResults)

    const failed = results.filter(r => !r.success)
    const total = results.length
    const passed = total - failed.length

    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:', {
      total,
      passed,
      failed: failed.length,
      successRate: `${((passed / total) * 100).toFixed(2)}%`,
    })

    if (options.verbose) {
      logger.info('üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results)
    }

    return results
  } catch (error) {
    logger.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:',
      error instanceof Error ? error.message : String(error)
    )
    throw error
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllPaymentTests()
    .then(results => {
      const failed = results.filter(r => !r.success)
      if (failed.length) {
        logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏:', failed)
        process.exit(1)
      }
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
      process.exit(0)
    })
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
