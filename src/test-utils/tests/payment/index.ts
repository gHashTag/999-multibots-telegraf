import { testPaymentProcessing } from './core/paymentProcessor.test'
import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤
 */
async function validateTestStructure(): Promise<TestResult> {
  try {
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    return {
      success: true,
      name: 'Test Structure Validation',
      message: 'Test structure is valid',
    }
  } catch (error: any) {
    return {
      success: false,
      name: 'Test Structure Validation',
      message: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runAllPaymentTests(): Promise<TestResult[]> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system tests',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤
    const structureValidation = await validateTestStructure()
    if (!structureValidation.success) {
      throw new Error(
        `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∞: ${structureValidation.message}`
      )
    }

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    const results = await Promise.all([testPaymentProcessing()])

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalTests = results.length
    const passedTests = results.filter((r: TestResult) => r.success).length
    const successRate = (passedTests / totalTests) * 100

    logger.info(`
      üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:
      –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}
      –£—Å–ø–µ—à–Ω—ã—Ö: ${passedTests}
      –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%
    `)

    return results
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error)
    throw error
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllPaymentTests()
    .then(() => logger.info('‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'))
    .catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
