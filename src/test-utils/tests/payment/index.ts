import { logger } from '@/utils/logger'
import { runPaymentProcessorTests } from './paymentProcessorTest'
import { runRuPaymentTests } from './ruPaymentTest'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentTests(options: { verbose?: boolean } = {}): Promise<any> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...', {
    description: 'Starting Payment Function Tests...',
  })

  const startTime = Date.now()
  const results = []

  try {
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Payment Processor
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Payment Processor', {
      description: 'Running Payment Processor tests',
    })

    const paymentProcessorResults = await runPaymentProcessorTests(options)
    results.push({
      name: 'Payment Processor',
      success: paymentProcessorResults.success,
      results: paymentProcessorResults.results,
    })

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RU Payment Service
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RU Payment Service', {
      description: 'Running RU Payment Service tests',
    })

    const ruPaymentResults = await runRuPaymentTests(options)
    results.push({
      name: 'RU Payment Service',
      success: ruPaymentResults.success,
      results: ruPaymentResults.results,
    })

    const endTime = Date.now()
    const duration = endTime - startTime
    const successCount = results.filter(r => r.success).length
    const totalCount = results.length

    logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'Payment function tests completed',
      duration,
      successCount,
      totalCount,
    })

    return {
      success: successCount === totalCount,
      results,
      stats: {
        duration,
        successCount,
        totalCount,
      }
    }
  } catch (error) {
    const endTime = Date.now()
    const duration = endTime - startTime

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', {
      description: 'Error running payment function tests',
      error: error instanceof Error ? error.message : String(error),
      duration,
    })

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
      results,
      stats: {
        duration,
        successCount: results.filter(r => r.success).length,
        totalCount: results.length,
      }
    }
  }
} 