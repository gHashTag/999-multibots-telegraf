import { logger } from '@/utils/logger'
import { TestResult } from '../../types'

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
// –ï—Å–ª–∏ —Ñ–∞–π–ª—ã paymentProcessorTest.ts –∏–ª–∏ paymentProcessorMockTest.ts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç,
// –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å –∏—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã

// –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
let runPaymentProcessorTests: () => Promise<TestResult[]>
try {
  // –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
  runPaymentProcessorTests =
    require('./paymentProcessorTest').runPaymentProcessorTests
  logger.info('‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
    description: 'Payment processor tests loaded',
  })
} catch (error) {
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
    description: 'Payment processor tests not found',
    error: error instanceof Error ? error.message : String(error),
  })
  runPaymentProcessorTests = async () => {
    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        message: '–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω',
      },
    ]
  }
}

// –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
let runPaymentProcessorMockTests: () => Promise<TestResult[]>
try {
  // –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
  runPaymentProcessorMockTests =
    require('./paymentProcessorMockTest').runPaymentProcessorMockTests
  logger.info('‚úÖ –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
    description: 'Payment processor mock tests loaded',
  })
} catch (error) {
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
    description: 'Payment processor mock tests not found',
    error: error instanceof Error ? error.message : String(error),
  })
  runPaymentProcessorMockTests = async () => {
    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        message: '–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω',
      },
    ]
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤
let runDuplicateInvoiceIdTests: (options?: {
  verbose?: boolean
}) => Promise<TestResult[]>
try {
  // –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
  runDuplicateInvoiceIdTests =
    require('./duplicateInvoiceId.test').runDuplicateInvoiceIdTests
  logger.info('‚úÖ –¢–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
    description: 'Duplicate invoice ID tests loaded',
  })
} catch (error) {
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
    description: 'Duplicate invoice ID tests not found',
    error: error instanceof Error ? error.message : String(error),
  })
  runDuplicateInvoiceIdTests = async () => {
    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        message: '–§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω',
      },
    ]
  }
}

// –¢–µ—Å—Ç—ã RuPayment
import { runRuPaymentTests } from './ruPaymentTest'

// –¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
import { runPaymentNotificationTests } from './paymentNotification.test'

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runPaymentTests(
  options: { verbose?: boolean } = {}
): Promise<{
  success: boolean
  results: TestResult[][]
}> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
    description: 'Running all payment system tests',
    verbose: options.verbose,
  })

  const startTime = Date.now()
  const results: TestResult[][] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    logger.info('üí∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Running payment processor tests',
    })
    results.push(await runPaymentProcessorTests())

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    logger.info('üß© –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∞–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Running payment processor mock tests',
    })
    results.push(await runPaymentProcessorMockTests())

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã RuPayment
    logger.info('üá∑üá∫ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RuPayment', {
      description: 'Running RuPayment tests',
    })
    results.push(await runRuPaymentTests())

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤
    logger.info('üî¢ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID –∏–Ω–≤–æ–π—Å–æ–≤', {
      description: 'Running duplicate invoice ID tests',
    })
    results.push(await runDuplicateInvoiceIdTests(options))

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    logger.info('üì£ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö', {
      description: 'Running payment notification tests',
    })
    results.push(await runPaymentNotificationTests())

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const duration = Date.now() - startTime
    const totalGroups = results.length
    const totalTests = results.reduce((acc, group) => acc + group.length, 0)
    const totalSuccessfulTests = results.reduce(
      (acc, group) => acc + group.filter(t => t.success).length,
      0
    )

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'All payment system tests completed',
      duration,
      totalGroups,
      totalTests,
      totalSuccessfulTests,
      success_rate: `${Math.round((totalSuccessfulTests / totalTests) * 100)}%`,
    })

    return {
      success: totalSuccessfulTests === totalTests,
      results,
    }
  } catch (error) {
    const duration = Date.now() - startTime

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Error running payment system tests',
      error: error instanceof Error ? error.message : String(error),
      duration,
    })

    return {
      success: false,
      results,
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
export {
  runPaymentProcessorTests,
  runPaymentProcessorMockTests,
  runRuPaymentTests,
  runDuplicateInvoiceIdTests,
  runPaymentNotificationTests,
}
