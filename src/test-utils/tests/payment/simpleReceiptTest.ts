import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { createMockFn } from '@/test-utils/mocks/telegrafMock'
import { TEST_CONFIG } from '@/test-utils/test-config'
import { inngestTestEngine } from '@/test-utils/test-config'
import { TransactionType } from '@/interfaces/payments.interface'
import { createSuccessfulPayment } from '@/inngest-functions/paymentProcessor'
import { getRandomUser } from '@/test-utils/helpers/getRandomUser'
import { generateUniqueId } from '@/test-utils/helpers/generateUniqueId'
import { getPaymentReceiptUrl } from '@/helpers/getPaymentReceiptUrl'

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns TestResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testSimpleReceiptGeneration(): Promise<TestResult> {
  logger.info('üîç –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞', {
    description: 'Starting simple receipt generation test',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const user = getRandomUser()
    const ctx = createMockContext({
      user: user,
      text: '/receipt',
    })

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
    const paymentData = {
      operation_id: generateUniqueId(),
      telegram_id: user.telegram_id,
      amount: 100,
      stars: 100,
      type: 'money_income',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
      payment_method: 'test',
      status: 'COMPLETED',
      bot_name: 'test_bot',
      service_type: 'TopUpBalance',
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    logger.info('üíµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Creating test payment',
      payment: paymentData,
    })

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    const payment = await createSuccessfulPayment(paymentData)

    logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
      description: 'Test payment successfully created',
      payment_id: payment.id,
    })

    // –ü–æ–ª—É—á–∞–µ–º URL —á–µ–∫–∞
    const receiptUrl = await getPaymentReceiptUrl(payment.id)

    logger.info('üßæ –ü–æ–ª—É—á–µ–Ω URL —á–µ–∫–∞', {
      description: 'Receipt URL retrieved',
      url: receiptUrl,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (!receiptUrl || !receiptUrl.includes('/receipt/')) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —á–µ–∫–∞: ${receiptUrl}`,
        name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞',
      }
    }

    return {
      success: true,
      message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞', {
      description: 'Error in simple receipt generation test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞',
    }
  }
}
