import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { createMockFn } from '@/test-utils/mocks/telegrafMock'
import { TEST_CONFIG } from '@/test-utils/test-config'
import { inngestTestEngine } from '@/test-utils/test-config'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞
 *
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
export async function testSimpleReceiptGeneration(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
    description: 'Starting simple payment receipt generation test',
  })

  // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
  const ctx = await createMockContext({
    userId: Number(TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID),
    firstName: TEST_CONFIG.TEST_DATA.TEST_USER_FIRST_NAME,
    lastName: TEST_CONFIG.TEST_DATA.TEST_USER_LAST_NAME,
    username: TEST_CONFIG.TEST_DATA.TEST_USER_USERNAME,
  })

  try {
    // –ú–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —á–µ–∫–∞
    const mockGenerateReceiptUrl = createMockFn().mockResolvedValue(
      'https://example.com/receipt/123456'
    )

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    inngestTestEngine.clearEvents()

    // 1. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    logger.info('üí∞ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Simulating payment creation',
    })

    const paymentEvent = {
      telegram_id: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      amount: TEST_CONFIG.TEST_DATA.TEST_AMOUNT,
      stars: TEST_CONFIG.TEST_DATA.TEST_STARS,
      type: TransactionType.MONEY_INCOME,
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–∞',
      bot_name: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME,
      operation_id: 'test-simple-receipt-' + Date.now(),
    }

    await inngestTestEngine.sendEvent('payment/process', paymentEvent)

    // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ–∫–∞
    logger.info('üßæ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ–∫–∞', {
      description: 'Simulating receipt request',
    })

    const receiptUrl = await mockGenerateReceiptUrl(paymentEvent.operation_id)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL —á–µ–∫–∞
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL —á–µ–∫–∞', {
      description: 'Checking receipt URL format',
      receiptUrl,
    })

    if (
      !receiptUrl ||
      typeof receiptUrl !== 'string' ||
      !receiptUrl.startsWith('http')
    ) {
      throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —á–µ–∫–∞: ${receiptUrl}`)
    }

    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É URL —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logger.info('üì§ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ URL —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Simulating sending receipt URL to user',
    })

    await ctx.reply(`–í–∞—à —á–µ–∫: ${receiptUrl}`, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫', url: receiptUrl }]],
      },
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∞ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
    if (mockGenerateReceiptUrl.mock.calls.length === 0) {
      throw new Error('–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —á–µ–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description:
        'Simple payment receipt generation test completed successfully',
    })

    return {
      success: true,
      name: 'testSimpleReceiptGeneration',
      message: '–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
      description: 'Error in simple payment receipt generation test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      name: 'testSimpleReceiptGeneration',
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`,
    }
  }
}
