import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { PaymentTester } from '../utils/paymentTester'
import { TEST_PAYMENT_CONFIG } from '../test-config'
import { TransactionType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
export async function runPaymentProcessorTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
    description: 'Running payment processor tests',
  })

  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.push(await testBasicPaymentProcessing())
    results.push(await testDuplicatePaymentHandling())
    results.push(await testInvalidAmountHandling())
    results.push(await testBalanceCheck())

    // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const passedTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info(
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞`,
      {
        description: 'Payment processor tests completed',
        passedTests,
        totalTests,
      }
    )

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Error running payment processor tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        success: false,
        name: 'Payment Processor Tests',
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      },
    ]
  }
}

async function testBasicPaymentProcessing(): Promise<TestResult> {
  const testName = '–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'
  const tester = new PaymentTester()

  try {
    const telegramId = '123456789'
    const amount = TEST_PAYMENT_CONFIG.amounts.small

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await tester.createTestUser(telegramId, 0)

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await tester.createPayment({
      telegram_id: telegramId,
      amount,
      type: TransactionType.MONEY_INCOME,
      description: 'Test payment',
      bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
      service_type: ModeEnum.TopUpBalance,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const isPaymentCreated = await tester.checkPaymentCreated(
      telegramId,
      amount
    )
    if (!isPaymentCreated) {
      throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const newBalance = await tester.checkBalance(telegramId)
    if (newBalance !== amount) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞: ${newBalance}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${amount}`
      )
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

async function testDuplicatePaymentHandling(): Promise<TestResult> {
  const testName = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π'
  const tester = new PaymentTester()

  try {
    const telegramId = '123456789'
    const amount = TEST_PAYMENT_CONFIG.amounts.small
    const operationId = 'test-operation-id'

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await tester.createTestUser(telegramId, 0)

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const payment1 = await tester.createPayment({
      telegram_id: telegramId,
      amount,
      type: TransactionType.MONEY_INCOME,
      description: 'Test payment 1',
      bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
      service_type: ModeEnum.TopUpBalance,
      inv_id: operationId,
    })

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
    const payment2 = await tester.createPayment({
      telegram_id: telegramId,
      amount,
      type: TransactionType.MONEY_INCOME,
      description: 'Test payment 2',
      bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
      service_type: ModeEnum.TopUpBalance,
      inv_id: operationId,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    const balance = await tester.checkBalance(telegramId)
    if (balance !== amount) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: ${balance}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${amount}`
      )
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

async function testInvalidAmountHandling(): Promise<TestResult> {
  const testName = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã'
  const tester = new PaymentTester()

  try {
    const telegramId = '123456789'
    const invalidAmount = -100

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await tester.createTestUser(telegramId, 0)

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    try {
      await tester.createPayment({
        telegram_id: telegramId,
        amount: invalidAmount,
        type: TransactionType.MONEY_INCOME,
        description: 'Invalid amount test',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: ModeEnum.TopUpBalance,
      })
      throw new Error('–ü–ª–∞—Ç–µ–∂ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –±—ã–ª —Å–æ–∑–¥–∞–Ω')
    } catch (error) {
      // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
      if (!(error instanceof Error) || !error.message.includes('—Å—É–º–º–∞')) {
        throw error
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const balance = await tester.checkBalance(telegramId)
    if (balance !== 0) {
      throw new Error(`–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${balance}`)
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

async function testBalanceCheck(): Promise<TestResult> {
  const testName = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏'
  const tester = new PaymentTester()

  try {
    const telegramId = '123456789'
    const initialBalance = TEST_PAYMENT_CONFIG.amounts.small
    const expenseAmount = TEST_PAYMENT_CONFIG.amounts.medium

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    await tester.createTestUser(telegramId, initialBalance)

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å—É–º–º—É –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞
    try {
      await tester.createPayment({
        telegram_id: telegramId,
        amount: expenseAmount,
        type: TransactionType.MONEY_EXPENSE,
        description: 'Balance check test',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: ModeEnum.TextToVideo,
      })
      throw new Error('–°–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
    } catch (error) {
      // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
      if (
        !(error instanceof Error) ||
        !error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
      ) {
        throw error
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const balance = await tester.checkBalance(telegramId)
    if (balance !== initialBalance) {
      throw new Error(`–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: ${balance}`)
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}
