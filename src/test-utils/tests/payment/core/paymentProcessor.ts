import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { PaymentTester } from '../utils/paymentTester'
import { TEST_PAYMENT_CONFIG } from '../utils/testConfig'
import { inngestTestEngine } from '@/test-utils/inngest/testEngine'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
export async function runPaymentProcessorTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
    description: 'Running payment processor tests',
  })

  try {
    const results: TestResult[] = []

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results.push(await testPaymentIncome())
    results.push(await testPaymentExpense())
    results.push(await testPaymentWithInsufficientBalance())
    results.push(await testDuplicatePaymentPrevention())

    // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const passedTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info(
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞`,
      {
        description: 'Payment processor tests completed',
        passedTests,
        totalTests,
      }
    )

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', {
      description: 'Error running payment processor tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      },
    ]
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
async function testPaymentIncome(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'

  logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`, {
    description: 'Starting payment income test',
  })

  const tester = new PaymentTester()
  const telegramId = '123456789'
  const amount = TEST_PAYMENT_CONFIG.amounts.medium
  const initialBalance = TEST_PAYMENT_CONFIG.testUser.initialBalance

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCreated = await tester.createTestUser(telegramId, initialBalance)
    if (!userCreated) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: telegramId,
        amount: amount,
        type: 'money_income',
        description: 'TEST: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: 'TopUpBalance',
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve =>
      setTimeout(resolve, TEST_PAYMENT_CONFIG.timeouts.medium)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è
    const expectedBalance =
      initialBalance + amount * TEST_PAYMENT_CONFIG.starConversion.rate
    const balanceUpdated = await tester.checkBalanceUpdated(
      telegramId,
      expectedBalance
    )

    if (!balanceUpdated) {
      throw new Error('–ë–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    const paymentCreated = await tester.checkPaymentCreated(
      telegramId,
      amount,
      'COMPLETED'
    )

    if (!paymentCreated) {
      throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è')
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    logger.info(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: ${testName}`, {
      description: 'Payment income test passed successfully',
    })

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in payment income test',
      error: error instanceof Error ? error.message : String(error),
    })

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await tester.cleanupTestData(telegramId)
    } catch (cleanupError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', {
        error:
          cleanupError instanceof Error
            ? cleanupError.message
            : String(cleanupError),
      })
    }

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 */
async function testPaymentExpense(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤'

  logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`, {
    description: 'Starting payment expense test',
  })

  const tester = new PaymentTester()
  const telegramId = '123456789'
  const amount = TEST_PAYMENT_CONFIG.amounts.small
  const initialBalance =
    TEST_PAYMENT_CONFIG.amounts.medium * TEST_PAYMENT_CONFIG.starConversion.rate

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCreated = await tester.createTestUser(telegramId, initialBalance)
    if (!userCreated) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: telegramId,
        amount: amount,
        type: 'money_expense',
        description: 'TEST: –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: 'TextToImage',
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve =>
      setTimeout(resolve, TEST_PAYMENT_CONFIG.timeouts.medium)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è
    const expectedBalance =
      initialBalance - amount * TEST_PAYMENT_CONFIG.starConversion.rate
    const balanceUpdated = await tester.checkBalanceUpdated(
      telegramId,
      expectedBalance
    )

    if (!balanceUpdated) {
      throw new Error('–ë–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    const paymentCreated = await tester.checkPaymentCreated(
      telegramId,
      amount,
      'COMPLETED'
    )

    if (!paymentCreated) {
      throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è')
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    logger.info(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: ${testName}`, {
      description: 'Payment expense test passed successfully',
    })

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in payment expense test',
      error: error instanceof Error ? error.message : String(error),
    })

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await tester.cleanupTestData(telegramId)
    } catch (cleanupError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', {
        error:
          cleanupError instanceof Error
            ? cleanupError.message
            : String(cleanupError),
      })
    }

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
 */
async function testPaymentWithInsufficientBalance(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ'

  logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`, {
    description: 'Starting payment with insufficient balance test',
  })

  const tester = new PaymentTester()
  const telegramId = '123456789'
  const amount = TEST_PAYMENT_CONFIG.amounts.large
  const initialBalance =
    TEST_PAYMENT_CONFIG.amounts.small * TEST_PAYMENT_CONFIG.starConversion.rate

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    const userCreated = await tester.createTestUser(telegramId, initialBalance)
    if (!userCreated) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: telegramId,
        amount: amount,
        type: 'money_expense',
        description: 'TEST: –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: 'TextToImage',
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve =>
      setTimeout(resolve, TEST_PAYMENT_CONFIG.timeouts.medium)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const balanceUnchanged = await tester.checkBalanceUpdated(
      telegramId,
      initialBalance
    )

    if (!balanceUnchanged) {
      throw new Error('–ë–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, —Ö–æ—Ç—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ')
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    logger.info(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: ${testName}`, {
      description: 'Payment with insufficient balance test passed successfully',
    })

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in payment with insufficient balance test',
      error: error instanceof Error ? error.message : String(error),
    })

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await tester.cleanupTestData(telegramId)
    } catch (cleanupError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', {
        error:
          cleanupError instanceof Error
            ? cleanupError.message
            : String(cleanupError),
      })
    }

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–ª–∞—Ç–µ–∂–µ–π
 */
async function testDuplicatePaymentPrevention(): Promise<TestResult> {
  const testName = '–¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–ª–∞—Ç–µ–∂–µ–π'

  logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`, {
    description: 'Starting duplicate payment prevention test',
  })

  const tester = new PaymentTester()
  const telegramId = '123456789'
  const amount = TEST_PAYMENT_CONFIG.amounts.medium
  const initialBalance = TEST_PAYMENT_CONFIG.testUser.initialBalance
  const operationId = `test-operation-${Date.now()}`

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCreated = await tester.createTestUser(telegramId, initialBalance)
    if (!userCreated) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error: createError } = await supabase.from('payments_v2').insert({
      telegram_id: telegramId,
      amount: amount,
      stars: amount * TEST_PAYMENT_CONFIG.starConversion.rate,
      type: 'money_income',
      status: 'COMPLETED',
      description: 'TEST: –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂',
      operation_id: operationId,
      bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
      payment_method: 'Test',
    })

    if (createError) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: ${createError.message}`
      )
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å —Ç–µ–º –∂–µ operation_id
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: telegramId,
        amount: amount,
        type: 'money_income',
        description: 'TEST: –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂',
        bot_name: TEST_PAYMENT_CONFIG.testUser.botName,
        service_type: 'TopUpBalance',
        operation_id: operationId,
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve =>
      setTimeout(resolve, TEST_PAYMENT_CONFIG.timeouts.medium)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ —Å —Ç–µ–º –∂–µ operation_id
    const { count } = await supabase
      .from('payments_v2')
      .select('*', { count: 'exact', head: false })
      .eq('operation_id', operationId)

    if (count !== 1) {
      throw new Error(
        `–ë—ã–ª —Å–æ–∑–¥–∞–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂: –Ω–∞–π–¥–µ–Ω–æ ${count} –ø–ª–∞—Ç–µ–∂–µ–π —Å operation_id ${operationId}`
      )
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await tester.cleanupTestData(telegramId)

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    await supabase.from('payments_v2').delete().eq('operation_id', operationId)

    logger.info(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: ${testName}`, {
      description: 'Duplicate payment prevention test passed successfully',
    })

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in duplicate payment prevention test',
      error: error instanceof Error ? error.message : String(error),
    })

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      await tester.cleanupTestData(telegramId)
      await supabase
        .from('payments_v2')
        .delete()
        .eq('operation_id', operationId)
    } catch (cleanupError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', {
        error:
          cleanupError instanceof Error
            ? cleanupError.message
            : String(cleanupError),
      })
    }

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}
