import { TestResult } from '../../types'
import { TEST_CONFIG } from '../../test-config'
import { createMockFn } from '../../test-config'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤
 *
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
 * 1. –û–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–∫–æ–≤
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
 *
 * @module src/test-utils/tests/payment/paymentProcessorMockTest
 */

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
 */
export async function testPaymentProcessorWithMocks(): Promise<TestResult> {
  try {
    logger.info('üöÄ [TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏', {
      description: 'Starting payment processor test with mocks',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    const mockGetUserBalance = createMockFn<any, number>()
    const mockCreatePayment = createMockFn()
    const mockSendNotification = createMockFn()

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    mockGetUserBalance.mockReturnValue(1000)

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è payment/process
    const event = {
      name: 'payment/process',
      data: {
        telegram_id: TEST_USER_TELEGRAM_ID,
        amount: TEST_AMOUNT,
        stars: TEST_AMOUNT,
        type: TransactionType.MONEY_INCOME,
        description: TEST_DESCRIPTION,
        bot_name: TEST_BOT_NAME,
        service_type: 'TopUpBalance',
      },
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    const handlerResult = await mockProcessPayment(event, {
      getUserBalance: mockGetUserBalance,
      createPayment: mockCreatePayment,
      sendNotification: mockSendNotification,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    if (mockGetUserBalance.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    if (mockCreatePayment.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (mockSendNotification.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    logger.info('‚úÖ [TEST]: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
      description: 'Payment processor test with mocks passed successfully',
      result: handlerResult,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
      message: '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      details: {
        getUserBalanceCalls: mockGetUserBalance.calls.length,
        createPaymentCalls: mockCreatePayment.calls.length,
        sendNotificationCalls: mockSendNotification.calls.length,
      },
    }
  } catch (error) {
    logger.error('‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Error during payment processor test with mocks',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
 */
export async function testInsufficientBalancePayment(): Promise<TestResult> {
  try {
    logger.info('üöÄ [TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º', {
      description: 'Starting insufficient balance payment test',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    const mockGetUserBalance = createMockFn<any, number>()
    const mockCreatePayment = createMockFn()
    const mockSendNotification = createMockFn()

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ —Å—É–º–º—ã —Å–ø–∏—Å–∞–Ω–∏—è
    mockGetUserBalance.mockReturnValue(10)

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è payment/process –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const event = {
      name: 'payment/process',
      data: {
        telegram_id: TEST_USER_TELEGRAM_ID,
        amount: TEST_AMOUNT, // –°—É–º–º–∞ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞ (10)
        stars: TEST_AMOUNT,
        type: TransactionType.MONEY_EXPENSE, // –í–∞–∂–Ω–æ! –≠—Ç–æ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        description: TEST_DESCRIPTION,
        bot_name: TEST_BOT_NAME,
        service_type: 'TextToImage',
      },
    }

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ - –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É
      await mockProcessPayment(event, {
        getUserBalance: mockGetUserBalance,
        createPayment: mockCreatePayment,
        sendNotification: mockSendNotification,
      })

      // –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
      return {
        success: false,
        name: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
        message:
          '–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ, –Ω–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      }
    } catch (paymentError) {
      // –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
      const errorMessage =
        paymentError instanceof Error
          ? paymentError.message
          : String(paymentError)

      if (errorMessage.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
        logger.info(
          '‚úÖ [TEST]: –ü–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ',
          {
            description: 'Received expected insufficient funds error',
            error: errorMessage,
          }
        )

        return {
          success: true,
          name: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
          message:
            '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ - –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ',
          details: {
            balance: 10,
            requiredAmount: TEST_AMOUNT,
            error: errorMessage,
          },
        }
      } else {
        // –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
        return {
          success: false,
          name: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
          message: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`,
          details: {
            error: errorMessage,
          },
        }
      }
    }
  } catch (error) {
    logger.error(
      '‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
      {
        description: 'Error during insufficient balance payment test',
        error: error instanceof Error ? error.message : String(error),
      }
    )

    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
async function mockProcessPayment(
  event: { name: string; data: any },
  mocks: {
    getUserBalance: any
    createPayment: any
    sendNotification: any
  }
): Promise<any> {
  const {
    telegram_id,
    amount,
    stars,
    type,
    description,
    bot_name,
    service_type,
  } = event.data

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞—Ç–µ–∂–∞
  if (amount <= 0) {
    throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentBalance = await mocks.getUserBalance(telegram_id)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
  if (type === TransactionType.MONEY_EXPENSE) {
    if (currentBalance < amount) {
      throw new Error(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
      )
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  let newBalance: number
  if (type === TransactionType.MONEY_INCOME) {
    newBalance = currentBalance + (stars || amount)
  } else if (type === TransactionType.MONEY_EXPENSE) {
    newBalance = currentBalance - (stars || amount)
  } else {
    newBalance = currentBalance
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
  await mocks.createPayment({
    telegram_id,
    amount,
    stars: stars || amount,
    type,
    description,
    bot_name,
    service_type,
    status: 'COMPLETED',
    payment_method: 'balance',
    inv_id: `test-${telegram_id}-${Date.now()}-${uuidv4()}`,
  })

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  await mocks.sendNotification({
    telegram_id,
    amount,
    currentBalance,
    newBalance,
    description,
    bot_name,
  })

  return {
    success: true,
    currentBalance,
    newBalance,
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –º–æ–∫–∞–º–∏
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runPaymentProcessorMockTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  logger.info('üß™ [TEST_RUNNER]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏', {
    description: 'Running payment processor tests with mocks',
  })

  try {
    // –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –º–æ–∫–∞–º–∏
    const standardResult = await testPaymentProcessorWithMocks()
    results.push(standardResult)

    // –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    const insufficientResult = await testInsufficientBalancePayment()
    results.push(insufficientResult)

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const passedTests = results.filter(r => r.success).length
    const totalTests = results.length
    const failedTests = totalTests - passedTests

    logger.info(
      'üìä [TEST_RUNNER]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏:',
      {
        description: 'Payment processor mock test results',
        total: totalTests,
        passed: passedTests,
        failed: failedTests,
      }
    )

    return results
  } catch (error) {
    logger.error(
      '‚ùå [TEST_RUNNER]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
      {
        description: 'Error running payment processor mock tests',
        error: error instanceof Error ? error.message : String(error),
      }
    )

    return [
      {
        success: false,
        name: '–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`,
      },
    ]
  }
}
