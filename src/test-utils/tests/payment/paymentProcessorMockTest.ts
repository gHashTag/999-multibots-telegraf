import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'
import { inngestTestEngine } from '../test-config'
import { createMockFn } from '../test-config'
import { logger } from '../../utils/logger'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
 */
export async function testPaymentProcessorWithMocks(): Promise<TestResult> {
  try {
    logger.info('üöÄ [TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏', {
      description: 'Starting payment processor test with mocks',
    })

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    const mockGetUserBalance = createMockFn<any, number>()
    const mockCreatePayment = createMockFn()
    const mockSendNotification = createMockFn()

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    mockGetUserBalance.mockReturnValue(1000)

    const {
      TEST_USER_TELEGRAM_ID,
      TEST_AMOUNT,
      TEST_BOT_NAME,
      TEST_DESCRIPTION,
    } = TEST_CONFIG.TEST_DATA

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è payment/process
    const event = {
      name: 'payment/process',
      data: {
        telegram_id: TEST_USER_TELEGRAM_ID,
        amount: TEST_AMOUNT,
        stars: TEST_AMOUNT,
        type: 'money_income',
        description: TEST_DESCRIPTION,
        bot_name: TEST_BOT_NAME,
        service_type: 'TopUpBalance',
      },
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —á–µ—Ä–µ–∑ inngestTestEngine.registerHandler)
    const handlerResult = await mockProcessPayment(event, {
      getUserBalance: mockGetUserBalance,
      createPayment: mockCreatePayment,
      sendNotification: mockSendNotification,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    if (mockGetUserBalance.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    if (mockCreatePayment.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (mockSendNotification.calls.length === 0) {
      return {
        success: false,
        name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
        message: '–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞',
      }
    }

    logger.info('‚úÖ [TEST]: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
      description: 'Payment processor test with mocks passed successfully',
      result: handlerResult,
    })

    return {
      success: true,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
      message: '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      details: {
        getUserBalanceCalls: mockGetUserBalance.calls.length,
        createPaymentCalls: mockCreatePayment.calls.length,
        sendNotificationCalls: mockSendNotification.calls.length,
      },
    }
  } catch (error) {
    logger.error('‚ùå [TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Error during payment processor test with mocks',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

/**
 * –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
async function mockProcessPayment(
  event: { name: string; data: any },
  mocks: {
    getUserBalance: any
    createPayment: any
    sendNotification: any
  }
): Promise<any> {
  const { telegram_id, amount, stars, type, description, bot_name } = event.data

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞—Ç–µ–∂–∞
  if (amount <= 0) {
    throw new Error('–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentBalance = await mocks.getUserBalance(telegram_id)

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  let newBalance: number
  if (type === 'money_income') {
    newBalance = currentBalance + (stars || amount)
  } else if (type === 'money_expense') {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
    if (currentBalance < (stars || amount)) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
    }
    newBalance = currentBalance - (stars || amount)
  } else {
    newBalance = currentBalance
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
  const payment = await mocks.createPayment({
    telegram_id,
    amount,
    stars,
    type,
    description,
    bot_name,
  })

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  await mocks.sendNotification({
    telegram_id,
    amount,
    currentBalance,
    newBalance,
    description,
    bot_name,
  })

  return {
    success: true,
    payment,
    currentBalance,
    newBalance,
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∞–º–∏
 */
export async function runPaymentProcessorMockTests(): Promise<TestResult[]> {
  logger.info('üß™ [TEST_RUNNER]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏', {
    description: 'Running payment processor tests with mocks',
  })

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  results.push(await testPaymentProcessorWithMocks())

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const passedTests = results.filter(r => r.success).length
  const failedTests = results.filter(r => !r.success).length

  logger.info(
    `üìä [TEST_RUNNER]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –º–æ–∫–∞–º–∏: ${passedTests} —É—Å–ø–µ—à–Ω–æ, ${failedTests} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ`,
    {
      description: 'Payment processor mock test results',
      passed: passedTests,
      failed: failedTests,
      total: results.length,
    }
  )

  return results
}
