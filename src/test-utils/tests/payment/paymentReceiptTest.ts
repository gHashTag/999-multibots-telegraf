import { TestResult } from '@/test-utils/types'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { IContext } from '@/interfaces/context.interface'
import { logger } from '@/utils/logger'
import { supabaseClient } from '@/core/supabase/supabaseClient'
import { mockPaymentCreate } from '@/test-utils/mocks/payment'
import * as getPaymentReceiptUrl from '@/helpers/getPaymentReceiptUrl'
import { getRandomUser } from '@/test-utils/helpers/getRandomUser'

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞
 */
export async function testPaymentReceiptGeneration(): Promise<TestResult> {
  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
    description: 'Starting payment receipt generation test',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    const ctx = createMockContext() as IContext
    const user = await getRandomUser()

    if (!user) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    ctx.from = { id: user.telegram_id }
    logger.info('‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã', {
      description: 'Context and user created',
      userId: user.telegram_id,
    })

    // –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const paymentData = await mockPaymentCreate({
      telegram_id: user.telegram_id,
      stars: 100,
      type: 'money_income',
      status: 'COMPLETED',
      payment_method: 'test',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞',
      bot_name: 'TestBot',
    })

    logger.info('üíæ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', {
      description: 'Test payment created',
      paymentId: paymentData.id,
    })

    // –®–ø–∏–æ–Ω–∏–º –∑–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è URL —á–µ–∫–∞
    const getPaymentReceiptUrlSpy = jest.spyOn(
      getPaymentReceiptUrl,
      'getPaymentReceiptUrl'
    )

    // –ü–æ–ª—É—á–∞–µ–º URL —á–µ–∫–∞
    const receiptUrl = await getPaymentReceiptUrl.getPaymentReceiptUrl(
      paymentData.id.toString()
    )
    logger.info('üîç –ü–æ–ª—É—á–µ–Ω URL —á–µ–∫–∞', {
      description: 'Receipt URL generated',
      receiptUrl,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(getPaymentReceiptUrlSpy).toHaveBeenCalledWith(
      paymentData.id.toString()
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(receiptUrl).toContain('/receipt/')
    expect(receiptUrl).toContain(paymentData.id.toString())

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(`–ß–µ–∫ –ø–æ –≤–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É: ${receiptUrl}`, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫', url: receiptUrl }]],
      },
    })

    logger.info('üì§ URL —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Receipt URL sent to user',
      messageText: `–ß–µ–∫ –ø–æ –≤–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É: ${receiptUrl}`,
    })

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    logger.info('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', {
      description: 'Simulating receipt opening by user',
    })

    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
    // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    logger.info('‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Payment receipt generation test passed successfully',
    })

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    getPaymentReceiptUrlSpy.mockRestore()

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    await supabaseClient.from('payments_v2').delete().eq('id', paymentData.id)

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', {
      description: 'Test data cleaned up',
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      name: 'testPaymentReceiptGeneration',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
      description: 'Error during payment receipt generation test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞: ${error.message}`,
      name: 'testPaymentReceiptGeneration',
    }
  }
}
