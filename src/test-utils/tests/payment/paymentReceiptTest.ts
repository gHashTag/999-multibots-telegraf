import { TestResult } from '@/test-utils/types'
import { createMockContext } from '@/test-utils/helpers/createMockContext'
import { logger } from '@/utils/logger'
import { supabase } from '@/supabase'
import { generateReceiptUrl } from '@/helpers/generateReceiptUrl'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { generateInvId } from '@/utils/generateInvId'

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞
 */
export async function testPaymentReceiptGeneration(): Promise<TestResult> {
  logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
    description: 'Starting payment receipt generation test',
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const telegramId = `${Date.now()}` // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    const ctx = createMockContext({
      user: {
        telegram_id: telegramId,
        username: 'testuser',
      },
      text: '/receipt',
    })

    logger.info('‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã', {
      description: 'Context and user created',
      userId: telegramId,
    })

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = generateInvId(telegramId, 100)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const paymentData = {
      telegram_id: telegramId,
      amount: 100,
      stars: 100,
      type: 'money_income',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞',
      payment_method: 'test',
      status: 'COMPLETED',
      bot_name: 'TestBot',
      service_type: 'TopUpBalance',
      inv_id: operationId,
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    const payment = await createSuccessfulPayment(paymentData)

    logger.info('üíæ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', {
      description: 'Test payment created',
      paymentId: payment.id,
      operationId: payment.inv_id,
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —á–µ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è getPaymentReceiptUrl
    const receiptUrl = generateReceiptUrl({
      operationId: payment.id.toString(),
      amount: payment.amount,
      stars: payment.stars,
      botName: payment.bot_name,
      telegramId: payment.telegram_id,
      timestamp: payment.created_at,
    })

    logger.info('üîç –ü–æ–ª—É—á–µ–Ω URL —á–µ–∫–∞', {
      description: 'Receipt URL generated',
      receiptUrl,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (!receiptUrl.includes('/payment')) {
      throw new Error('URL —á–µ–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç /payment)')
    }

    if (!receiptUrl.includes('operation_id=')) {
      throw new Error(
        'URL —á–µ–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç operation_id)'
      )
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(`–ß–µ–∫ –ø–æ –≤–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É: ${receiptUrl}`, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫', url: receiptUrl }]],
      },
    })

    logger.info('üì§ URL —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Receipt URL sent to user',
      messageText: `–ß–µ–∫ –ø–æ –≤–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É: ${receiptUrl}`,
    })

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    logger.info('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', {
      description: 'Simulating receipt opening by user',
    })

    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
    // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    logger.info('‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Payment receipt generation test passed successfully',
    })

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    await supabase.from('payments_v2').delete().eq('id', payment.id)

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', {
      description: 'Test data cleaned up',
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      name: 'testPaymentReceiptGeneration',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞', {
      description: 'Error during payment receipt generation test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞: ${error.message}`,
      name: 'testPaymentReceiptGeneration',
    }
  }
}
