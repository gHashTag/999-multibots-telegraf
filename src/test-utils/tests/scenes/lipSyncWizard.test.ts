import { MyContext, UserModel } from '@/interfaces'
import { createMockContext } from '@/test-utils/core/mockContext'
import { TestResult } from '@/test-utils/core/types'
import {
  assertMockCalled,
  assertReplyContains,
} from '@/test-utils/core/assertions'
import { IMockFunction, mockFn } from '@/test-utils/core/mockFunction'
import { TestCategory } from '@/test-utils/core/categories'
import { logger } from '@/utils/logger'
import { runSceneStep } from '@/test-utils/core/mockHelper'
import { lipSyncWizard } from '@/scenes/lipSyncWizard'
import { Message, Update, File } from 'telegraf/typings/core/types/typegram'
import {
  SceneContextScene,
  WizardContext,
  WizardSessionData,
} from 'telegraf/typings/scenes'
import { Context, Telegram } from 'telegraf'

interface WizardSession extends WizardSessionData {
  cursor: number
  attempts: number
  amount: number
  videoUrl: string
  email: string
  selectedModel: string
  audioToText: string
  prompt: string
  user: UserModel
  __scenes: {
    data: Record<string, any>
    cursor: number
  }
  __wizard: {
    cursor: number
    state: Record<string, any>
  }
}

interface ExtendedContext
  extends Omit<Context, 'scene' | 'wizard' | 'session'> {
  message?: Update.New & Update.NonChannel & Message.TextMessage
  reply: IMockFunction<
    (text: string, extra?: any) => Promise<Message.TextMessage>
  >
  replyWithHTML: IMockFunction<
    (text: string, extra?: any) => Promise<Message.TextMessage>
  >
  replyWithMarkdown: IMockFunction<
    (text: string, extra?: any) => Promise<Message.TextMessage>
  >
  scene: SceneContextScene<WizardContext<WizardSession>>
  wizard: {
    next: IMockFunction<() => void>
    selectStep: IMockFunction<(step: number) => void>
    back: IMockFunction<() => void>
  }
  telegram: Partial<Telegram> & {
    getFile: IMockFunction<(fileId: string) => Promise<File>>
    sendMessage: IMockFunction<
      (
        chatId: number | string,
        text: string,
        extra?: any
      ) => Promise<Message.TextMessage>
    >
    sendPhoto: IMockFunction<
      (
        chatId: number | string,
        photo: string | Buffer,
        extra?: any
      ) => Promise<Message & { photo: any[] }>
    >
    sendVideo: IMockFunction<
      (
        chatId: number | string,
        video: string | Buffer,
        extra?: any
      ) => Promise<Message & { video: any }>
    >
  }
  session: WizardSession
}

const TEST_USER_ID = '123456789'
const TEST_USERNAME = 'testuser'
const TEST_FILE_PATH = 'test/file/path.mp4'
const TEST_VIDEO_URL = 'https://example.com/video.mp4'
const TEST_AUDIO_URL = 'https://example.com/audio.mp3'

/**
 * –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 */
function createTestSession(): WizardSession {
  return {
    cursor: 0,
    attempts: 0,
    amount: 0,
    videoUrl: '',
    email: '',
    selectedModel: '',
    audioToText: '',
    prompt: '',
    user: {
      id: 0,
      username: '',
      firstName: '',
      lastName: '',
      languageCode: 'en',
      isBot: false,
      isPremium: false,
      subscriptionExpiresAt: null,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    __scenes: {
      data: {},
      cursor: 0,
    },
    __wizard: {
      cursor: 0,
      state: {},
    },
  }
}

/**
 * –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –º–æ–∫–∞–º–∏
 */
function setupTestContext(): ExtendedContext {
  const mockCtx = createMockContext() as ExtendedContext

  mockCtx.session = createTestSession()
  mockCtx.scene = {
    enter: mockFn<(sceneId: string) => Promise<unknown>>(),
    leave: mockFn<() => Promise<unknown>>(),
    reenter: mockFn<() => Promise<unknown>>(),
  }

  mockCtx.wizard = {
    next: mockFn<() => unknown>(),
    selectStep: mockFn<(step: number) => unknown>(),
    back: mockFn<() => unknown>(),
  }

  mockCtx.telegram = {
    getFile: mockFn<
      (
        fileId: string
      ) => Promise<{ file_id: string; file_size: number; file_path: string }>
    >().mockResolvedValue({
      file_id: 'file_id',
      file_size: 1024,
      file_path: TEST_FILE_PATH,
    }),
    sendMessage:
      mockFn<
        (
          chatId: number | string,
          text: string,
          extra?: any
        ) => Promise<Message.TextMessage>
      >(),
    sendPhoto:
      mockFn<
        (
          chatId: number | string,
          photo: string,
          extra?: any
        ) => Promise<Message.TextMessage>
      >(),
    sendVideo:
      mockFn<
        (
          chatId: number | string,
          video: string,
          extra?: any
        ) => Promise<Message.TextMessage>
      >(),
  }

  return mockCtx
}

// –°–æ–∑–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏ –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
const mockIsRussian = mockFn<(ctx: MyContext) => boolean>()
const mockHandleHelpCancel = mockFn<(ctx: MyContext) => Promise<boolean>>()
const mockGenerateLipSync =
  mockFn<
    (
      videoUrl: string,
      audioUrl: string,
      telegram_id: string,
      botName: string
    ) => Promise<void>
  >()

/**
 * –¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É LipSync
 */
async function testLipSyncWizard_Enter(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É LipSync')

  try {
    const ctx = setupTestContext()
    mockIsRussian.mockReturnValue(true)

    const enterHandler = lipSyncWizard.enter
    await runSceneStep(enterHandler, ctx)

    assertReplyContains(ctx, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ')
    assertMockCalled(ctx.reply)

    return {
      name: 'LipSync Wizard - Enter Scene',
      category: TestCategory.SCENE,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É:', error)
    return {
      name: 'LipSync Wizard - Enter Scene',
      category: TestCategory.SCENE,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
 */
async function testLipSyncWizard_UploadVideo(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ')

  try {
    const ctx = setupTestContext()
    const handlers = lipSyncWizard.middleware()
    const videoHandler = typeof handlers === 'function' ? handlers : handlers[0]

    const testContext = {
      ...ctx,
      message: {
        video: {
          file_id: 'test_video_id',
          file_unique_id: 'unique_id',
          width: 1280,
          height: 720,
          duration: 10,
        },
      },
    }

    await runSceneStep(videoHandler, testContext)

    assertReplyContains(ctx, '–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ')
    assertMockCalled(ctx.wizard.next)

    return {
      name: 'LipSync Wizard - Upload Video',
      category: TestCategory.SCENE,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error)
    return {
      name: 'LipSync Wizard - Upload Video',
      category: TestCategory.SCENE,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
 */
async function testLipSyncWizard_UploadAudio(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ')

  try {
    const ctx = setupTestContext()
    ctx.session.videoUrl = TEST_VIDEO_URL

    const handlers = lipSyncWizard.middleware()
    const audioHandler = typeof handlers === 'function' ? handlers : handlers[1]

    const testContext = {
      ...ctx,
      message: {
        audio: {
          file_id: 'test_audio_id',
          file_unique_id: 'unique_audio_id',
          duration: 10,
          title: 'test_audio.mp3',
        },
      },
    }

    await runSceneStep(audioHandler, testContext)

    assertReplyContains(ctx, '–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É')
    assertMockCalled(mockGenerateLipSync)

    return {
      name: 'LipSync Wizard - Upload Audio',
      category: TestCategory.SCENE,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error)
    return {
      name: 'LipSync Wizard - Upload Audio',
      category: TestCategory.SCENE,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
 */
async function testLipSyncWizard_VideoError(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')

  try {
    const ctx = setupTestContext()
    ctx.telegram.getFile = mockFn().mockRejectedValue(
      new Error('Failed to get file')
    )

    const handlers = lipSyncWizard.middleware()
    const videoHandler = typeof handlers === 'function' ? handlers : handlers[0]

    const testContext = {
      ...ctx,
      message: {
        video: {
          file_id: 'test_video_id',
          file_unique_id: 'unique_id',
          width: 1280,
          height: 720,
          duration: 10,
        },
      },
    }

    await runSceneStep(videoHandler, testContext)

    assertReplyContains(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    assertMockCalled(ctx.scene.leave)

    return {
      name: 'LipSync Wizard - Video Error Handling',
      category: TestCategory.SCENE,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∏–¥–µ–æ:', error)
    return {
      name: 'LipSync Wizard - Video Error Handling',
      category: TestCategory.SCENE,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã LipSync Wizard
 */
export async function runLipSyncWizardTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ LipSync Wizard')

  const results = await Promise.all([
    testLipSyncWizard_Enter(),
    testLipSyncWizard_UploadVideo(),
    testLipSyncWizard_UploadAudio(),
    testLipSyncWizard_VideoError(),
  ])

  const successCount = results.filter(r => r.success).length
  logger.info(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length}`)

  return results
}

export default runLipSyncWizardTests
