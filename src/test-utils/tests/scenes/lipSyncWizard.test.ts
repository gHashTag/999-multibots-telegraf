import { Scenes } from 'telegraf';
import { Message, Update } from 'telegraf/typings/core/types/typegram';
import { TestCategory, TestResult } from '../../core/types';
import { MyContext } from '../../../interfaces';
import { createMockContext } from '../../core/mockContext';
import { mockFn, mockObject } from '../../core/mockFunction';
import lipSyncWizard from '../../../scenes/lipSyncWizard';
import * as generateLipSyncModule from '../../../services/generateLipSync';
import { logError, logInfo } from '../../utils/logger';
import { MockFunction } from '../../types/mockFunction';
import { testReport } from '../../helpers';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –º–æ–∫–æ–≤
type MockFunction<T = any> = jest.MockedFunction<T> & {
  mockClear: () => void;
  mockReset: () => void;
  mockRestore: () => void;
  mockReturnValue: (val: any) => MockFunction<T>;
  mockResolvedValue: (val: any) => MockFunction<T>;
  mockRejectedValue: (val: any) => MockFunction<T>;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞
function createMockFunction<T>(): MockFunction<T> {
  return jest.fn() as MockFunction<T>;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createMockContext<T extends MyContext>(overrides: Partial<T> = {}): T {
  const defaultContext = {
    scene: {
      enter: jest.fn(),
      reenter: jest.fn(),
      leave: jest.fn(),
      state: {}
    },
    reply: jest.fn(),
    session: {},
    ...overrides
  } as unknown as T;
  
  return defaultContext;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 12345;
const TEST_TOKEN = '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11';
const TEST_VIDEO_URL = 'https://example.com/video.mp4';
const TEST_AUDIO_URL = 'https://example.com/audio.mp3';
const TEST_VIDEO_FILE_ID = 'video_file_id';
const TEST_AUDIO_FILE_ID = 'audio_file_id';
const TEST_VOICE_FILE_ID = 'voice_file_id';
const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50 MB
const TEST_FILE_PATH = 'test/path/file.mp4';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestContext extends MyContext {
  scene: {
    enter: MockFunction;
    leave: MockFunction;
    reenter: MockFunction;
  };
  telegram: {
    getFile: MockFunction;
    token: string;
  };
  wizard: {
    next: MockFunction;
    selectStep: MockFunction;
    state: Record<string, any>;
    cursor: number;
  };
  session: {
    videoUrl?: string;
    audioUrl?: string;
    [key: string]: any;
  };
  from?: {
    id: number;
    language_code?: string;
  };
  botInfo?: {
    username: string;
  };
  message?: any;
  reply: MockFunction;
  mockGenerateLipSync: MockFunction;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–æ–∫–∞–º–∏
function setupContext(params: {
  language?: string;
  messageType?: 'text' | 'video' | 'audio' | 'voice';
  hasVideoFile?: boolean;
  hasAudioFile?: boolean;
  hasVoiceFile?: boolean;
  fileSize?: number;
  filePath?: string;
  step?: number;
  videoUrl?: string;
  audioUrl?: string;
}): TestContext {
  const { 
    language = 'ru',
    messageType = 'text',
    hasVideoFile = false,
    hasAudioFile = false,
    hasVoiceFile = false,
    fileSize = 1024,
    filePath = TEST_FILE_PATH,
    step = 0,
    videoUrl,
    audioUrl
  } = params;

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–∫–∏
  const generateLipSyncMock = createMockFunction<typeof import('../../../services/generateLipSync').generateLipSync>();
  generateLipSyncMock.mockResolvedValue(undefined);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const ctx = createMockContext<TestContext>({
    from: { id: TEST_USER_ID, language_code: language },
    botInfo: { username: 'test_bot' } as any,
    session: {}
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (messageType === 'text') {
    ctx.message = { 
      text: hasVideoFile ? TEST_VIDEO_URL : (hasAudioFile ? TEST_AUDIO_URL : 'some text') 
    };
  } else if (messageType === 'video' && hasVideoFile) {
    ctx.message = { 
      video: { file_id: TEST_VIDEO_FILE_ID, file_size: fileSize } 
    };
  } else if (messageType === 'audio' && hasAudioFile) {
    ctx.message = { 
      audio: { file_id: TEST_AUDIO_FILE_ID, file_size: fileSize } 
    };
  } else if (messageType === 'voice' && hasVoiceFile) {
    ctx.message = { 
      voice: { file_id: TEST_VOICE_FILE_ID, file_size: fileSize } 
    };
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –º–µ—Ç–æ–¥—ã
  ctx.telegram = {
    getFile: createMockFunction().mockResolvedValue({ 
      file_id: 'file_id', 
      file_size: fileSize, 
      file_path: filePath 
    }),
    token: TEST_TOKEN
  } as any;

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º wizard –º–µ—Ç–æ–¥—ã
  ctx.wizard = {
    next: createMockFunction().mockReturnValue(step + 1),
    selectStep: createMockFunction(),
    state: {},
    cursor: step
  } as any;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –¥–ª—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
  if (videoUrl) {
    ctx.session.videoUrl = videoUrl;
  }
  
  if (audioUrl) {
    ctx.session.audioUrl = audioUrl;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è generateLipSync
  ctx.mockGenerateLipSync = generateLipSyncMock;

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  jest.mock('../../../services/generateLipSync', () => ({
    generateLipSync: generateLipSyncMock
  }));

  return ctx;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
async function invokeHandler(ctx: TestContext, step: number): Promise<void> {
  if (!lipSyncWizard || !(lipSyncWizard instanceof Scenes.WizardScene)) {
    throw new Error('lipSyncWizard –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WizardScene');
  }
  
  const steps = (lipSyncWizard as any).steps;
  if (!Array.isArray(steps) || steps.length <= step) {
    throw new Error(`–®–∞–≥ ${step} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–∏–ø—Å–∏–Ω–∫ —Å—Ü–µ–Ω–µ`);
  }
  
  const handler = steps[step];
  await handler(ctx);
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testLipSyncWizard_FirstStep() {
  const TEST_NAME = 'testLipSyncWizard_FirstStep';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ language: 'ru', step: 0 });
    
    // Act
    await invokeHandler(ctx, 0);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ URL –≤–∏–¥–µ–æ',
      { reply_markup: { remove_keyboard: true } }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ wizard.next –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    expect(ctx.wizard.next).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–ü–µ—Ä–≤—ã–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testLipSyncWizard_FirstStepEnglish() {
  const TEST_NAME = 'testLipSyncWizard_FirstStepEnglish';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ language: 'en', step: 0 });
    
    // Act
    await invokeHandler(ctx, 0);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    expect(ctx.reply).toHaveBeenCalledWith(
      'Send a video or video URL',
      { reply_markup: { remove_keyboard: true } }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ wizard.next –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    expect(ctx.wizard.next).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–ü–µ—Ä–≤—ã–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ —Å URL –≤–∏–¥–µ–æ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testLipSyncWizard_SecondStepWithUrl() {
  const TEST_NAME = 'testLipSyncWizard_SecondStepWithUrl';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 1, 
      messageType: 'text', 
      hasVideoFile: true 
    });
    
    // Act
    await invokeHandler(ctx, 1);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
    expect(ctx.session.videoUrl).toBe(TEST_VIDEO_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—É–¥–∏–æ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ URL –∞—É–¥–∏–æ'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ wizard.next –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    expect(ctx.wizard.next).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL –≤–∏–¥–µ–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ —Å —Ñ–∞–π–ª–æ–º –≤–∏–¥–µ–æ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testLipSyncWizard_SecondStepWithVideoFile() {
  const TEST_NAME = 'testLipSyncWizard_SecondStepWithVideoFile';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 1, 
      messageType: 'video', 
      hasVideoFile: true 
    });
    
    // Act
    await invokeHandler(ctx, 1);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getFile –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    expect(ctx.telegram.getFile).toHaveBeenCalledWith(TEST_VIDEO_FILE_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∏–¥–µ–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    expect(ctx.session.videoUrl).toBe(`https://api.telegram.org/file/bot${TEST_TOKEN}/${TEST_FILE_PATH}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—É–¥–∏–æ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ URL –∞—É–¥–∏–æ'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ wizard.next –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    expect(ctx.wizard.next).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–∏–¥–µ–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
 */
async function testLipSyncWizard_TooLargeVideoFile() {
  const TEST_NAME = 'testLipSyncWizard_TooLargeVideoFile';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 1, 
      messageType: 'video', 
      hasVideoFile: true,
      fileSize: MAX_FILE_SIZE + 1024 // –ü—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    });
    
    // Act
    await invokeHandler(ctx, 1);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getFile –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    expect(ctx.telegram.getFile).toHaveBeenCalledWith(TEST_VIDEO_FILE_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ
 */
async function testLipSyncWizard_NoVideo() {
  const TEST_NAME = 'testLipSyncWizard_NoVideo';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 1, 
      messageType: 'text', 
      hasVideoFile: false // –ë–µ–∑ –≤–∏–¥–µ–æ URL
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ctx.message = { text: '' };
    
    // Act
    await invokeHandler(ctx, 1);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–µ–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å URL –∞—É–¥–∏–æ
 */
async function testLipSyncWizard_ThirdStepWithUrl() {
  const TEST_NAME = 'testLipSyncWizard_ThirdStepWithUrl';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'text', 
      hasAudioFile: true,
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
    expect(ctx.session.audioUrl).toBe(TEST_AUDIO_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ generateLipSync –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockGenerateLipSync).toHaveBeenCalledWith(
      TEST_VIDEO_URL,
      TEST_AUDIO_URL,
      TEST_USER_ID.toString(),
      'test_bot'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      'üé• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL –∞—É–¥–∏–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å —Ñ–∞–π–ª–æ–º –∞—É–¥–∏–æ
 */
async function testLipSyncWizard_ThirdStepWithAudioFile() {
  const TEST_NAME = 'testLipSyncWizard_ThirdStepWithAudioFile';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'audio', 
      hasAudioFile: true,
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getFile –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    expect(ctx.telegram.getFile).toHaveBeenCalledWith(TEST_AUDIO_FILE_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∞—É–¥–∏–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const expectedAudioUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/${TEST_FILE_PATH}`;
    expect(ctx.session.audioUrl).toBe(expectedAudioUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ generateLipSync –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockGenerateLipSync).toHaveBeenCalledWith(
      TEST_VIDEO_URL,
      expectedAudioUrl,
      TEST_USER_ID.toString(),
      'test_bot'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      'üé• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∞—É–¥–∏–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
 */
async function testLipSyncWizard_ThirdStepWithVoiceMessage() {
  const TEST_NAME = 'testLipSyncWizard_ThirdStepWithVoiceMessage';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'voice', 
      hasVoiceFile: true,
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getFile –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    expect(ctx.telegram.getFile).toHaveBeenCalledWith(TEST_VOICE_FILE_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∞—É–¥–∏–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const expectedAudioUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/${TEST_FILE_PATH}`;
    expect(ctx.session.audioUrl).toBe(expectedAudioUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ generateLipSync –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockGenerateLipSync).toHaveBeenCalledWith(
      TEST_VIDEO_URL,
      expectedAudioUrl,
      TEST_USER_ID.toString(),
      'test_bot'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      'üé• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
 */
async function testLipSyncWizard_TooLargeAudioFile() {
  const TEST_NAME = 'testLipSyncWizard_TooLargeAudioFile';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'audio', 
      hasAudioFile: true,
      fileSize: MAX_FILE_SIZE + 1024, // –ü—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getFile –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    expect(ctx.telegram.getFile).toHaveBeenCalledWith(TEST_AUDIO_FILE_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ
 */
async function testLipSyncWizard_NoAudio() {
  const TEST_NAME = 'testLipSyncWizard_NoAudio';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'text',
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ctx.message = { text: '' };
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—É–¥–∏–æ' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function testLipSyncWizard_NoUserId() {
  const TEST_NAME = 'testLipSyncWizard_NoUserId';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'text', 
      hasAudioFile: true,
      videoUrl: TEST_VIDEO_URL, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // –£–±–∏—Ä–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.from = { language_code: 'ru' } as any;
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
    expect(ctx.session.audioUrl).toBe(TEST_AUDIO_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–∫–∞
 */
async function testLipSyncWizard_GenerationError() {
  const TEST_NAME = 'testLipSyncWizard_GenerationError';
  const CATEGORY = 'lipSyncWizard';
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`);
  
  try {
    // Arrange
    const ctx = setupContext({ 
      language: 'ru', 
      step: 2, 
      messageType: 'text', 
      hasAudioFile: true,
      videoUrl: TEST_VIDEO_URL // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è generateLipSync —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª –æ—à–∏–±–∫—É
    ctx.mockGenerateLipSync.mockRejectedValue(new Error('Test error in generation'));
    
    // Act
    await invokeHandler(ctx, 2);
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
    expect(ctx.session.audioUrl).toBe(TEST_AUDIO_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ generateLipSync –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockGenerateLipSync).toHaveBeenCalledWith(
      TEST_VIDEO_URL,
      TEST_AUDIO_URL,
      TEST_USER_ID.toString(),
      'test_bot'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`);
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏' };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error);
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫ –º–∞—Å—Ç–µ—Ä–∞
 */
export async function runLipSyncWizardTests() {
  const results = await Promise.all([
    testLipSyncWizard_FirstStep(),
    testLipSyncWizard_FirstStepEnglish(),
    testLipSyncWizard_SecondStepWithUrl(),
    testLipSyncWizard_SecondStepWithVideoFile(),
    testLipSyncWizard_TooLargeVideoFile(),
    testLipSyncWizard_NoVideo(),
    testLipSyncWizard_ThirdStepWithUrl(),
    testLipSyncWizard_ThirdStepWithAudioFile(),
    testLipSyncWizard_ThirdStepWithVoiceMessage(),
    testLipSyncWizard_TooLargeAudioFile(),
    testLipSyncWizard_NoAudio(),
    testLipSyncWizard_NoUserId(),
    testLipSyncWizard_GenerationError()
  ]);
  
  logInfo(`
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è lipSyncWizard:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}
‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.filter(r => !r.success).length}
`);
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runLipSyncWizardTests(); 