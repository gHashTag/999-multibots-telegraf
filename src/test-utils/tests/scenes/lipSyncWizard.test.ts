import { Scenes } from 'telegraf';
import { TestCategory, TestResult } from '../../core/types';
import { MyContext } from '../../../interfaces';
import { createMockContext } from '../../core/mockContext';
import { mockFn, mockObject } from '../../core/mockFunction';
import lipSyncWizard from '../../../scenes/lipSyncWizard';
import * as generateLipSyncModule from '../../../services/generateLipSync';
import { logError, logInfo } from '../../utils/logger';
import { MockFunction } from '../../types/mockFunction';
import { testReport } from '../../helpers';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_TOKEN = '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11';
const TEST_VIDEO_URL = 'https://example.com/video.mp4';
const TEST_AUDIO_URL = 'https://example.com/audio.mp3';
const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50 MB

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const generateLipSyncMock = mockFn();

// –ú–æ–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
const logMock = mockObject({
  info: mockFn(),
  error: mockFn()
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è lipSyncWizard');
jest.mock('../../../services/generateLipSync', () => ({
  generateLipSync: generateLipSyncMock
}));
(global as any).log = logMock;

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è lipSyncWizard
console.log('üîç lipSyncWizard:', {
  type: typeof lipSyncWizard,
  isWizardScene: lipSyncWizard instanceof Scenes.WizardScene,
  steps: lipSyncWizard.middleware().length,
  handlerKeys: Object.keys(lipSyncWizard)
});

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
interface TestContext {
  scene: {
    enter: jest.Mock;
    leave: jest.Mock;
    reenter: jest.Mock;
  };
  telegram: {
    getFile: jest.Mock;
    token: string;
  };
  wizard: {
    next: jest.Mock;
    selectStep: jest.Mock;
    cursor: number;
    state: Record<string, any>;
  };
  session: {
    videoUrl?: string;
    audioUrl?: string;
    [key: string]: any;
  };
  from?: {
    id: number;
    language_code?: string;
  };
  botInfo?: {
    username: string;
  };
  message?: any;
  reply: jest.Mock;
  replies?: Array<{ text: string; extra?: any }>;
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è lipSyncWizard
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
function setupContext(params: {
  language?: string;
  messageType?: 'text' | 'video' | 'audio' | 'voice';
  hasVideoFile?: boolean;
  hasAudioFile?: boolean;
  hasVoiceFile?: boolean;
  fileSize?: number;
  filePath?: string;
  step?: number;
}): TestContext {
  const { 
    language = 'ru',
    messageType = 'text',
    hasVideoFile = false,
    hasAudioFile = false,
    hasVoiceFile = false,
    fileSize = 1024,
    filePath = 'test/path.file',
    step = 0
  } = params;

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const ctx = createMockContext() as unknown as TestContext;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  ctx.from = { id: 12345, language_code: language } as any;
  ctx.botInfo = { username: 'test_bot' } as any;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (messageType === 'text') {
    ctx.message = { text: hasVideoFile ? TEST_VIDEO_URL : (hasAudioFile ? TEST_AUDIO_URL : 'some text') } as any;
  } else if (messageType === 'video' && hasVideoFile) {
    ctx.message = { video: { file_id: 'video_file_id', file_size: fileSize } } as any;
  } else if (messageType === 'audio' && hasAudioFile) {
    ctx.message = { audio: { file_id: 'audio_file_id', file_size: fileSize } } as any;
  } else if (messageType === 'voice' && hasVoiceFile) {
    ctx.message = { voice: { file_id: 'voice_file_id', file_size: fileSize } } as any;
  }
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã Telegram
  ctx.telegram = {
    getFile: mockFn().mockResolvedValue({ 
      file_id: 'file_id', 
      file_size: fileSize, 
      file_path: filePath 
    }),
    token: TEST_TOKEN
  } as any;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã —Å—Ü–µ–Ω—ã
  ctx.scene = {
    leave: mockFn().mockResolvedValue(undefined),
    enter: mockFn().mockResolvedValue(undefined),
    reenter: mockFn().mockResolvedValue(undefined)
  } as any;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –º–∞—Å—Ç–µ—Ä–∞
  ctx.wizard = {
    next: mockFn().mockReturnValue(step + 1),
    selectStep: mockFn(),
    cursor: step,
    state: {}
  } as any;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
  ctx.session = {};
  
  // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ reply
  ctx.reply = mockFn().mockImplementation(function(text: string, extra?: any) {
    console.log('Reply called with:', { text: typeof text === 'string' ? text.substring(0, 30) + '...' : text });
    if (!ctx.replies) {
      ctx.replies = [];
    }
    ctx.replies.push({ text, extra });
    return Promise.resolve({ message_id: ctx.replies.length });
  });
  
  return ctx;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã
 * @param step –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞ —Å—Ü–µ–Ω—ã
 * @returns –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞
 */
function getSceneHandler(step: number) {
  if (!lipSyncWizard || !(lipSyncWizard instanceof Scenes.WizardScene)) {
    throw new Error('lipSyncWizard –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º WizardScene');
  }
  
  const steps = (lipSyncWizard as any).steps;
  if (!Array.isArray(steps) || steps.length <= step) {
    throw new Error(`–®–∞–≥ ${step} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–∏–ø—Å–∏–Ω–∫ —Å—Ü–µ–Ω–µ`);
  }
  
  return steps[step];
}

/**
 * –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 * @param step –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
async function invokeHandler(step: number, ctx: TestContext) {
  const handler = getSceneHandler(step);
  await handler(ctx);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤
async function invokeHandlerSafe(
  step: number,
  ctx: TestContext
): Promise<{ success: boolean; error?: string }> {
  try {
    const handler = getSceneHandler(step);
    if (!handler) {
      return { success: false, error: `–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —à–∞–≥–∞ ${step} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
    }
    await handler(ctx);
    return { success: true };
  } catch (error: any) {
    return { success: false, error: error.message };
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
function assertHasCalled(mock: jest.Mock, times: number = 1): void {
  if (!mock.mock) {
    throw new Error('–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç');
  }
  if (mock.mock.calls.length !== times) {
    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å –≤—ã–∑–æ–≤–æ–≤: ${times}, –ø–æ–ª—É—á–µ–Ω–æ: ${mock.mock.calls.length}`);
  }
}

function assertMessageSentWith(ctx: TestContext, expectedText: string): void {
  if (!ctx.reply) {
    throw new Error('ctx.reply –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
  }
  
  const replyMock = ctx.reply as jest.Mock;
  if (!replyMock.mock) {
    throw new Error('ctx.reply –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–µ–π');
  }
  
  const calls = replyMock.mock.calls;
  const matchingCall = calls.find(call => {
    const text = call[0] as string;
    return text.includes(expectedText);
  });
  
  if (!matchingCall) {
    throw new Error(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "${expectedText}" –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${calls.map(c => c[0]).join(', ')}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
async function runTests(
  tests: Record<string, () => Promise<TestResult>>
): Promise<TestResult[]> {
  const results: TestResult[] = [];
  
  for (const testName in tests) {
    if (Object.prototype.hasOwnProperty.call(tests, testName)) {
      const testFn = tests[testName];
      try {
        const result = await testFn();
        results.push(result);
      } catch (error: any) {
        logError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testName}: ${error.message}`);
        results.push({
          name: testName,
          category: TestCategory.All,
          success: false,
          message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`
        });
      }
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫ —Å—Ü–µ–Ω—ã
export const lipSyncWizardTests = {
  testLipSyncWizardEnter: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ');
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru'
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(0, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥: ${result.error}`);
      }
      
      assertMessageSentWith(ctx, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ URL –≤–∏–¥–µ–æ');
      assertHasCalled(ctx.wizard.next as jest.Mock);
      
      return {
        name: 'testLipSyncWizardEnter',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫: ${error.message}`);
      return {
        name: 'testLipSyncWizardEnter',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardEnterEnglish: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ');
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º
      const ctx = setupContext({
        language: 'en'
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(0, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥: ${result.error}`);
      }
      
      assertMessageSentWith(ctx, 'Send a video or video URL');
      assertHasCalled(ctx.wizard.next as jest.Mock);
      
      return {
        name: 'testLipSyncWizardEnterEnglish',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ: ${error.message}`);
      return {
        name: 'testLipSyncWizardEnterEnglish',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ª–∏–ø—Å–∏–Ω–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardVideoURL: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –≤–∏–¥–µ–æ');
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru',
        messageType: 'text',
        step: 1
      });
      ctx.message = { text: TEST_VIDEO_URL } as any;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(1, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–≥: ${result.error}`);
      }
      
      if (ctx.session.videoUrl !== TEST_VIDEO_URL) {
        throw new Error(`videoUrl –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${TEST_VIDEO_URL}, –ø–æ–ª—É—á–µ–Ω–æ: ${ctx.session.videoUrl}`);
      }
      
      assertMessageSentWith(ctx, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ');
      assertHasCalled(ctx.wizard.next as jest.Mock);
      
      return {
        name: 'testLipSyncWizardVideoURL',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –≤–∏–¥–µ–æ: ${error.message}`);
      return {
        name: 'testLipSyncWizardVideoURL',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –≤–∏–¥–µ–æ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardVideoFile: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ');
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru',
        messageType: 'video',
        hasVideoFile: true,
        fileSize: 1 * 1024 * 1024, // 1MB
        filePath: 'videos/test_video.mp4',
        step: 1
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(1, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–≥: ${result.error}`);
      }
      
      assertHasCalled(ctx.telegram.getFile as jest.Mock);
      
      const videoUrlInSession = ctx.session.videoUrl;
      const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/videos/test_video.mp4`;
      if (videoUrlInSession !== expectedUrl) {
        throw new Error(`videoUrl –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedUrl}, –ø–æ–ª—É—á–µ–Ω–æ: ${videoUrlInSession}`);
      }
      
      assertMessageSentWith(ctx, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ');
      assertHasCalled(ctx.wizard.next as jest.Mock);
      
      return {
        name: 'testLipSyncWizardVideoFile',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ: ${error.message}`);
      return {
        name: 'testLipSyncWizardVideoFile',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardLargeVideo: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ');
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru',
        messageType: 'video',
        hasVideoFile: true,
        fileSize: 60 * 1024 * 1024, // 60MB - –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        filePath: 'videos/large_video.mp4',
        step: 1
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(1, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–≥: ${result.error}`);
      }
      
      assertHasCalled(ctx.telegram.getFile as jest.Mock);
      assertMessageSentWith(ctx, '—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ');
      assertHasCalled(ctx.scene.leave as jest.Mock);
      
      return {
        name: 'testLipSyncWizardLargeVideo',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ: ${error.message}`);
      return {
        name: 'testLipSyncWizardLargeVideo',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardAudioURL: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –∞—É–¥–∏–æ');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è generateLipSync
      mockGenerateLipSync = jest.fn().mockResolvedValue({
        success: true,
        message: 'Lip sync generation started'
      }) as any;
      jest.spyOn(generateLipSyncModule, 'generateLipSync').mockImplementation(mockGenerateLipSync);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru',
        messageType: 'text',
        step: 2
      });
      ctx.message = { text: TEST_AUDIO_URL } as any;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      ctx.session.videoUrl = TEST_VIDEO_URL;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(2, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ—Ç–∏–π —à–∞–≥: ${result.error}`);
      }
      
      if (ctx.session.audioUrl !== TEST_AUDIO_URL) {
        throw new Error(`audioUrl –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${TEST_AUDIO_URL}, –ø–æ–ª—É—á–µ–Ω–æ: ${ctx.session.audioUrl}`);
      }
      
      assertHasCalled(mockGenerateLipSync as any);
      assertMessageSentWith(ctx, '–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É');
      assertHasCalled(ctx.scene.leave as jest.Mock);
      
      return {
        name: 'testLipSyncWizardAudioURL',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∞—É–¥–∏–æ: ${error.message}`);
      return {
        name: 'testLipSyncWizardAudioURL',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∞—É–¥–∏–æ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardAudioFile: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è generateLipSync
      mockGenerateLipSync = jest.fn().mockResolvedValue({
        success: true,
        message: 'Lip sync generation started'
      }) as any;
      jest.spyOn(generateLipSyncModule, 'generateLipSync').mockImplementation(mockGenerateLipSync);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({
        language: 'ru',
        messageType: 'audio',
        hasAudioFile: true,
        fileSize: 1 * 1024 * 1024, // 1MB
        filePath: 'audios/test_audio.mp3',
        step: 2
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      ctx.session.videoUrl = TEST_VIDEO_URL;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(2, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ—Ç–∏–π —à–∞–≥: ${result.error}`);
      }
      
      assertHasCalled(ctx.telegram.getFile as any);
      
      const audioUrlInSession = ctx.session.audioUrl;
      const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/audios/test_audio.mp3`;
      if (audioUrlInSession !== expectedUrl) {
        throw new Error(`audioUrl –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedUrl}, –ø–æ–ª—É—á–µ–Ω–æ: ${audioUrlInSession}`);
      }
      
      assertHasCalled(mockGenerateLipSync as any);
      assertMessageSentWith(ctx, '–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É');
      assertHasCalled(ctx.scene.leave as any);
      
      return {
        name: 'testLipSyncWizardAudioFile',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ: ${error.message}`);
      return {
        name: 'testLipSyncWizardAudioFile',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardVoiceMessage: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è generateLipSync
      mockGenerateLipSync = jest.fn().mockResolvedValue({
        success: true,
        message: 'Lip sync generation started'
      }) as any;
      jest.spyOn(generateLipSyncModule, 'generateLipSync').mockImplementation(mockGenerateLipSync);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({ 
        language: 'ru', 
        messageType: 'voice',
        hasVoiceFile: true,
        fileSize: 1 * 1024 * 1024, // 1MB
        filePath: 'voices/test_voice.ogg',
        step: 2
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      ctx.session.videoUrl = TEST_VIDEO_URL;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(2, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ—Ç–∏–π —à–∞–≥: ${result.error}`);
      }
      
      assertHasCalled(ctx.telegram.getFile as any);
      
      const audioUrlInSession = ctx.session.audioUrl;
      const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/voices/test_voice.ogg`;
      if (audioUrlInSession !== expectedUrl) {
        throw new Error(`audioUrl –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedUrl}, –ø–æ–ª—É—á–µ–Ω–æ: ${audioUrlInSession}`);
      }
      
      assertHasCalled(mockGenerateLipSync as any);
      assertMessageSentWith(ctx, '–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É');
      assertHasCalled(ctx.scene.leave as any);
      
      return {
        name: 'testLipSyncWizardVoiceMessage',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      return {
        name: 'testLipSyncWizardVoiceMessage',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  },
  
  testLipSyncWizardHandleError: async function(): Promise<TestResult> {
    logInfo('üìù –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ generateLipSync');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è generateLipSync —Å –æ—à–∏–±–∫–æ–π
      mockGenerateLipSync = jest.fn().mockRejectedValue(new Error('Service error')) as any;
      jest.spyOn(generateLipSyncModule, 'generateLipSync').mockImplementation(mockGenerateLipSync);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = setupContext({ 
        language: 'ru', 
        messageType: 'text',
        step: 2
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      ctx.session.videoUrl = TEST_VIDEO_URL;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
      const result = await invokeHandler(2, ctx);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!result.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ—Ç–∏–π —à–∞–≥: ${result.error}`);
      }
      
      assertHasCalled(mockGenerateLipSync as any);
      assertMessageSentWith(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ');
      assertHasCalled(ctx.scene.leave as any);
      
      return {
        name: 'testLipSyncWizardHandleError',
        category: TestCategory.All,
        success: true,
        message: '‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
      };
    } catch (error: any) {
      logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: ${error.message}`);
      return {
        name: 'testLipSyncWizardHandleError',
        category: TestCategory.All,
        success: false,
        message: `‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
      };
    }
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardFirstStep = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardFirstStep');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      step: 0
    });
    
    // Act
    await invokeHandler(0, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (ru)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ URL –≤–∏–¥–µ–æ')) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (ru)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`
      };
    }
    
    if (!ctx.wizard.next.mock.calls.length) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (ru)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (ru)',
      category: TestCategory.SCENE,
      success: true,
      message: '–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardFirstStep:', error);
    return {
      name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (ru)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardFirstStepEnglish = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardFirstStepEnglish');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'en',
      step: 0
    });
    
    // Act
    await invokeHandler(0, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (en)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('Send a video or video URL')) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (en)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`
      };
    }
    
    if (!ctx.wizard.next.mock.calls.length) {
      return {
        name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (en)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (en)',
      category: TestCategory.SCENE,
      success: true,
      message: '–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardFirstStepEnglish:', error);
    return {
      name: '–ü–µ—Ä–≤—ã–π —à–∞–≥ lipSyncWizard (en)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –≤–∏–¥–µ–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardSecondStepWithUrl = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardSecondStepWithUrl');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasVideoFile: true,
      step: 1
    });
    
    // Act
    await invokeHandler(1, ctx);
    
    // Assert
    if (!ctx.session.videoUrl) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: 'URL –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
      };
    }
    
    if (ctx.session.videoUrl !== TEST_VIDEO_URL) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–∏–¥–µ–æ: ${ctx.session.videoUrl} (–æ–∂–∏–¥–∞–ª—Å—è ${TEST_VIDEO_URL})`
      };
    }
    
    if (!ctx.wizard.next.mock.calls.length) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText || !replyText.includes('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ')) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`
      };
    }
    
    return {
      name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardSecondStepWithUrl:', error);
    return {
      name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - URL –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ —Å URL –≤–∏–¥–µ–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardSecondStepWithVideoFile = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardSecondStepWithVideoFile');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'video',
      hasVideoFile: true,
      filePath: 'videos/test.mp4',
      step: 1
    });
    
    // Act
    await invokeHandler(1, ctx);
    
    // Assert
    if (!ctx.telegram.getFile.mock.calls.length) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ telegram.getFile –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    if (!ctx.session.videoUrl) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: 'URL –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
      };
    }
    
    const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/videos/test.mp4`;
    if (ctx.session.videoUrl !== expectedUrl) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–∏–¥–µ–æ: ${ctx.session.videoUrl} (–æ–∂–∏–¥–∞–ª—Å—è ${expectedUrl})`
      };
    }
    
    if (!ctx.wizard.next.mock.calls.length) {
      return {
        name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–í—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardSecondStepWithVideoFile:', error);
    return {
      name: '–í—Ç–æ—Ä–æ–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ —Å —Ñ–∞–π–ª–æ–º –≤–∏–¥–µ–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardTooLargeVideoFile = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardTooLargeVideoFile');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'video',
      hasVideoFile: true,
      fileSize: 60 * 1024 * 1024, // 60 MB (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –≤ 50 MB)
      step: 1
    });
    
    // Act
    await invokeHandler(1, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–æ—à–∏–±–∫–∞') && !replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('–±–æ–ª—å—à–æ–µ')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardTooLargeVideoFile:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardNoVideo = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardNoVideo');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasVideoFile: false,
      step: 1
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    ctx.message = { text: '' };
    
    // Act
    await invokeHandler(1, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('–≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardNoVideo:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤–∏–¥–µ–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –∞—É–¥–∏–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardThirdStepWithUrl = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardThirdStepWithUrl');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasAudioFile: true,
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
    generateLipSyncMock.mockReset();
    generateLipSyncMock.mockResolvedValue(undefined);
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (!ctx.session.audioUrl) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: 'URL –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
      };
    }
    
    if (ctx.session.audioUrl !== TEST_AUDIO_URL) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∞—É–¥–∏–æ: ${ctx.session.audioUrl} (–æ–∂–∏–¥–∞–ª—Å—è ${TEST_AUDIO_URL})`
      };
    }
    
    if (generateLipSyncMock.mock.calls.length === 0) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ generateLipSync –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const generateArgs = generateLipSyncMock.mock.calls[0];
    if (!generateArgs || generateArgs[0] !== TEST_VIDEO_URL || generateArgs[1] !== TEST_AUDIO_URL) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ generateLipSync: ${JSON.stringify(generateArgs)}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É')) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`
      };
    }
    
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL –∞—É–¥–∏–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardThirdStepWithUrl:', error);
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - URL –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å URL –∞—É–¥–∏–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardThirdStepWithAudioFile = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardThirdStepWithAudioFile');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'audio',
      hasAudioFile: true,
      filePath: 'audios/test.mp3',
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
    generateLipSyncMock.mockReset();
    generateLipSyncMock.mockResolvedValue(undefined);
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (!ctx.telegram.getFile.mock.calls.length) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ telegram.getFile –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    if (!ctx.session.audioUrl) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: 'URL –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
      };
    }
    
    const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/audios/test.mp3`;
    if (ctx.session.audioUrl !== expectedUrl) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∞—É–¥–∏–æ: ${ctx.session.audioUrl} (–æ–∂–∏–¥–∞–ª—Å—è ${expectedUrl})`
      };
    }
    
    if (generateLipSyncMock.mock.calls.length === 0) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ generateLipSync –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∞—É–¥–∏–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardThirdStepWithAudioFile:', error);
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - —Ñ–∞–π–ª –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å —Ñ–∞–π–ª–æ–º –∞—É–¥–∏–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardThirdStepWithVoiceMessage = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardThirdStepWithVoiceMessage');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'voice',
      hasVoiceFile: true,
      filePath: 'voice/test.ogg',
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
    generateLipSyncMock.mockReset();
    generateLipSyncMock.mockResolvedValue(undefined);
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (!ctx.telegram.getFile.mock.calls.length) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ telegram.getFile –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    if (!ctx.session.audioUrl) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        category: TestCategory.SCENE,
        success: false,
        message: 'URL –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏'
      };
    }
    
    const expectedUrl = `https://api.telegram.org/file/bot${TEST_TOKEN}/voice/test.ogg`;
    if (ctx.session.audioUrl !== expectedUrl) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∞—É–¥–∏–æ: ${ctx.session.audioUrl} (–æ–∂–∏–¥–∞–ª—Å—è ${expectedUrl})`
      };
    }
    
    if (generateLipSyncMock.mock.calls.length === 0) {
      return {
        name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ generateLipSync –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      category: TestCategory.SCENE,
      success: true,
      message: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardThirdStepWithVoiceMessage:', error);
    return {
      name: '–¢—Ä–µ—Ç–∏–π —à–∞–≥ lipSyncWizard - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardTooLargeAudioFile = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardTooLargeAudioFile');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'audio',
      hasAudioFile: true,
      fileSize: 60 * 1024 * 1024, // 60 MB (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –≤ 50 MB)
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–æ—à–∏–±–∫–∞') && !replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('–±–æ–ª—å—à–æ–µ')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardTooLargeAudioFile:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardNoAudio = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardNoAudio');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasAudioFile: false,
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    ctx.message = { text: '' };
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('–∞—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞—É–¥–∏–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardNoAudio:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏–æ',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞—É–¥–∏–æ',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardNoUserId = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardNoUserId');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasAudioFile: true,
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –£–¥–∞–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.from = undefined;
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardNoUserId:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–∫–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
const testLipSyncWizardGenerationError = async (): Promise<TestResult> => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ testLipSyncWizardGenerationError');
  
  try {
    // Arrange
    const ctx = setupContext({
      language: 'ru',
      messageType: 'text',
      hasAudioFile: true,
      step: 2
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤–∏–¥–µ–æ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoUrl = TEST_VIDEO_URL;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
    generateLipSyncMock.mockReset();
    generateLipSyncMock.mockRejectedValue(new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
    
    // Act
    await invokeHandler(2, ctx);
    
    // Assert
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText.includes('–æ—à–∏–±–∫–∞') && !replyText.includes('–û—à–∏–±–∫–∞') && !replyText.includes('–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyText}`
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω'
      };
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–∫–∞'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testLipSyncWizardGenerationError:', error);
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      error: error instanceof Error ? error.message : String(error)
    };
  }
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è lipSyncWizard
 * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 */
export async function runLipSyncWizardTests(): Promise<TestResult[]> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è lipSyncWizard');
  
  const results: TestResult[] = [];
  
  try {
    // –ü–µ—Ä–≤—ã–π —à–∞–≥ - –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
    results.push(await testLipSyncWizardFirstStep());
    results.push(await testLipSyncWizardFirstStepEnglish());
    
    // –í—Ç–æ—Ä–æ–π —à–∞–≥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    results.push(await testLipSyncWizardSecondStepWithUrl());
    results.push(await testLipSyncWizardSecondStepWithVideoFile());
    results.push(await testLipSyncWizardTooLargeVideoFile());
    results.push(await testLipSyncWizardNoVideo());
    
    // –¢—Ä–µ—Ç–∏–π —à–∞–≥ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–∫–∞
    results.push(await testLipSyncWizardThirdStepWithUrl());
    results.push(await testLipSyncWizardThirdStepWithAudioFile());
    results.push(await testLipSyncWizardThirdStepWithVoiceMessage());
    results.push(await testLipSyncWizardTooLargeAudioFile());
    results.push(await testLipSyncWizardNoAudio());
    results.push(await testLipSyncWizardNoUserId());
    results.push(await testLipSyncWizardGenerationError());
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successCount = results.filter(r => r.success).length;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length} —Ç–µ—Å—Ç–æ–≤`);
    
    results.filter(r => !r.success).forEach(r => {
      console.error(`‚ùå –¢–µ—Å—Ç "${r.name}" –Ω–µ –ø—Ä–æ—à–µ–ª: ${r.message}`);
      if (r.error) console.error(`   –û—à–∏–±–∫–∞: ${r.error}`);
    });
    
    return results;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    results.push({
      name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ lipSyncWizard',
      category: TestCategory.SCENE,
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      error: error instanceof Error ? error.message : String(error)
    });
    
    return results;
  }
}

// –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ —Ç–µ—Å—Ç–æ–≤
// runLipSyncWizardTests().then(results => {
//   console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
//   console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${results.filter(r => r.success).length}`);
//   console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${results.filter(r => !r.success).length}`);
// });

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default lipSyncWizardTests;

// –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export {
  testEnterLipSyncWizard,
  testEnterLipSyncWizardEnglish,
  testVideoFileUpload,
  testVideoSizeExceeded,
  testVideoUrlSubmission,
  testAudioFileUpload,
  testLipSyncGenerationError
}; 