import { TestResult } from '@/test-utils/core/types';
import { TestCategory } from '@/test-utils/core/categories';
import { expect } from '@/test-utils/core/testHelpers';
import { createMockContext } from '@/test-utils/core/mockContext';
import { logger } from '@/utils/logger';
import mockApi from '@/test-utils/core/mock';

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function testBroadcastSendMessageScene_EnterScene(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    ctx.session = { 
      language: 'ru', 
      isAdmin: true // –î–ª—è —Å—Ü–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ broadcastSendMessageScene.enter(ctx)
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    
    return {
      success: true,
      name: 'testBroadcastSendMessageScene_EnterScene',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏'
    };
  } catch (error) {
    logger.error('Error in testBroadcastSendMessageScene_EnterScene:', error);
    return {
      success: false,
      name: 'testBroadcastSendMessageScene_EnterScene',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É
 */
async function testBroadcastSendMessageScene_SendMessage(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    ctx.session = { 
      language: 'ru', 
      isAdmin: true // –î–ª—è —Å—Ü–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç wizard –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.wizard = {
      ...ctx.wizard,
      state: {}
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏
    (ctx as any).message = { 
      text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
      message_id: 100,
      date: Date.now()
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const mockBroadcastMessage = mockApi.create().mockResolvedValue({ 
      success: true, 
      sentCount: 10 
    });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    
    return {
      success: true,
      name: 'testBroadcastSendMessageScene_SendMessage',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ'
    };
  } catch (error) {
    logger.error('Error in testBroadcastSendMessageScene_SendMessage:', error);
    return {
      success: false,
      name: 'testBroadcastSendMessageScene_SendMessage',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
 */
async function testBroadcastSendMessageScene_Cancel(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    ctx.session = { 
      language: 'ru', 
      isAdmin: true // –î–ª—è —Å—Ü–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç wizard –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.wizard = {
      ...ctx.wizard,
      state: {
        broadcastMessage: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç callbackQuery —Å –æ—Ç–º–µ–Ω–æ–π
    (ctx as any).callbackQuery = { 
      data: 'cancel_broadcast',
      message: {
        message_id: 100,
      }
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –∏ editMessageText –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    const originalEditMessageText = ctx.editMessageText;
    ctx.editMessageText = mockApi.create().mockResolvedValue(true);
    
    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é scene.leave
    const originalLeave = ctx.scene.leave;
    ctx.scene.leave = mockApi.create().mockResolvedValue(true);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.editMessageText('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    await ctx.scene.leave();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ
    expect(ctx.editMessageText).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    ctx.editMessageText = originalEditMessageText;
    ctx.scene.leave = originalLeave;
    
    return {
      success: true,
      name: 'testBroadcastSendMessageScene_Cancel',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏'
    };
  } catch (error) {
    logger.error('Error in testBroadcastSendMessageScene_Cancel:', error);
    return {
      success: false,
      name: 'testBroadcastSendMessageScene_Cancel',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è broadcastSendMessageScene
 */
export default async function runBroadcastSendMessageSceneTests(): Promise<TestResult[]> {
  logger.info('üß™ Running broadcastSendMessageScene tests...');
  
  const results: TestResult[] = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testFunctions = [
      testBroadcastSendMessageScene_EnterScene,
      testBroadcastSendMessageScene_SendMessage,
      testBroadcastSendMessageScene_Cancel
    ];
    
    for (const testFn of testFunctions) {
      try {
        results.push(await testFn());
      } catch (error) {
        logger.error(`Error running ${testFn.name}:`, error);
        results.push({
          success: false,
          name: testFn.name,
          category: TestCategory.All,
          message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    }
  } catch (error) {
    logger.error('Error running broadcastSendMessageScene tests:', error);
    results.push({
      success: false,
      name: 'broadcastSendMessageSceneTests',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`
    });
  }
  
  return results;
} 