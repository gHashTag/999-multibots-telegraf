/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω—ã Change Audio
 */

import { mockLogger } from '../../core/mock/logger'
import { createTestContext } from '../../core/mockContext'
import { TEXTS as RU_TEXTS } from '../../../locales/ru'
import { TEXTS as EN_TEXTS } from '../../../locales/en'
import { SCENES } from '../../../constants'

// –ú–æ–∫–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
mockLogger()

// –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ü–µ–Ω—ã
const mockSceneData = {
  sceneId: 'changeAudioScene',
  commands: {
    cancel: '/cancel',
    help: '/help',
  },
  buttons: {
    american: 'American',
    british: 'British',
    australian: 'Australian',
    indian: 'Indian',
    russian: 'Russian',
    cancel: 'Cancel',
    back: 'Back',
  },
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const runTests = async () => {
  let total = 0
  let passed = 0
  let failed = 0

  console.log('üîä –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã Change Audio')
  console.log('==========================================')

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  total++
  console.log(
    '\nüîç –¢–µ—Å—Ç 1: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
  )
  try {
    const ctx = createTestContext()

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
    await ctx.scene.enter(mockSceneData.sceneId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (
      ctx.reply.mock.calls.length > 0 &&
      ctx.reply.mock.calls[0][0].includes('Choose a voice')
    ) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞
  total++
  console.log(
    '\nüîç –¢–µ—Å—Ç 2: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞'
  )
  try {
    const ctx = createTestContext({
      message: { text: mockSceneData.buttons.american },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∞–∫—Ü–µ–Ω—Ç–∞
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.callbackQuery?.data(mockSceneData.buttons.american)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    if (
      ctx.reply.mock.calls.some(
        call => call[0].includes('American') && call[0].includes('selected')
      )
    ) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞
  total++
  console.log(
    '\nüîç –¢–µ—Å—Ç 3: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞'
  )
  try {
    const ctx = createTestContext({
      message: { text: mockSceneData.buttons.british },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∞–∫—Ü–µ–Ω—Ç–∞
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.callbackQuery?.data(mockSceneData.buttons.british)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    if (
      ctx.reply.mock.calls.some(
        call => call[0].includes('British') && call[0].includes('selected')
      )
    ) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 3 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
  total++
  console.log('\nüîç –¢–µ—Å—Ç 4: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã')
  try {
    const ctx = createTestContext({
      message: { text: mockSceneData.commands.cancel },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –æ—Ç–º–µ–Ω—É
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.message?.text(mockSceneData.commands.cancel)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
    if (ctx.scene.leave.mock.calls.length > 0) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 4 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
  total++
  console.log('\nüîç –¢–µ—Å—Ç 5: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏')
  try {
    const ctx = createTestContext({
      message: { text: mockSceneData.commands.help },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.message?.text(mockSceneData.commands.help)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (ctx.reply.mock.calls.some(call => call[0].includes('help'))) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 5 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 5 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
  total++
  console.log('\nüîç –¢–µ—Å—Ç 6: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥')
  try {
    const ctx = createTestContext({
      message: { text: mockSceneData.buttons.back },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.callbackQuery?.data(mockSceneData.buttons.back)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    if (
      ctx.scene.leave.mock.calls.length > 0 ||
      ctx.scene.enter.mock.calls.length > 1
    ) {
      console.log('‚úÖ –¢–µ—Å—Ç 6 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥')
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 6 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  total++
  console.log('\nüîç –¢–µ—Å—Ç 7: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')
  try {
    const ctx = createTestContext({
      message: { text: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥' },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥
    await ctx.scene.enter(mockSceneData.sceneId)
    await ctx.message?.text('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (
      ctx.reply.mock.calls.some(
        call =>
          call[0].includes('invalid') || call[0].includes('not recognized')
      )
    ) {
      console.log('‚úÖ –¢–µ—Å—Ç 7 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 7 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É—Å—Å–∫–∏–π)
  total++
  console.log('\nüîç –¢–µ—Å—Ç 8: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é')
  try {
    const ctx = createTestContext({
      session: { language: 'ru' },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    await ctx.scene.enter(mockSceneData.sceneId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
    if (
      ctx.reply.mock.calls.some(
        call => call[0].includes('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å') || call[0].includes('–∞–∫—Ü–µ–Ω—Ç')
      )
    ) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 8 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 8 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
  total++
  console.log('\nüîç –¢–µ—Å—Ç 9: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é')
  try {
    const ctx = createTestContext({
      session: { language: 'en' },
    })

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    await ctx.scene.enter(mockSceneData.sceneId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
    if (
      ctx.reply.mock.calls.some(
        call => call[0].includes('Choose a voice') || call[0].includes('accent')
      )
    ) {
      console.log(
        '‚úÖ –¢–µ—Å—Ç 9 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é'
      )
      passed++
    } else {
      throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é')
    }
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç 9 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', (error as Error).message)
    failed++
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n==========================================')
  console.log(`üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${passed} –∏–∑ ${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`)

  if (failed > 0) {
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${failed}`)
    process.exit(1)
  } else {
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
    process.exit(0)
  }
}

export default runTests
