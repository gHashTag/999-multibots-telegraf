import { TestResult, TestCategory } from '../../core/types'
import { MyContext } from '@/interfaces'
import { createMockContext } from '../../core/mockContext'
import {
  broadcastWizard,
  BroadcastContentType,
} from '../../../scenes/broadcastWizard'
import mockApi from '../../core/mock'
import { logger } from '@/utils/logger'
import { Middleware } from 'telegraf'

// –ì–∏–±–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π
type AnyFunction = (...args: any[]) => any
type MockedFunction = AnyFunction & {
  mock: {
    calls: any[][]
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ middleware
async function invokeHandler(
  handler: Middleware<MyContext> | any,
  ctx: MyContext
): Promise<void> {
  if (typeof handler === 'function') {
    await handler(ctx, () => Promise.resolve())
  } else {
    console.warn('Handler is not a function')
  }
}

// –ú–æ–∫ –¥–ª—è broadcastService
const mockBroadcastService = {
  sendBroadcastWithImage: mockApi.create().mockResolvedValue({
    success: true,
    successCount: 10,
    errorCount: 0,
  }) as MockedFunction,

  sendBroadcastWithVideo: mockApi.create().mockResolvedValue({
    success: true,
    successCount: 10,
    errorCount: 0,
  }) as MockedFunction,
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 123456789
const TEST_PHOTO_FILE_ID = 'test-photo-123456'
const TEST_VIDEO_FILE_ID = 'test-video-123456'
const TEST_POST_LINK = 'https://t.me/channel/123'
const TEST_TEXT_RU = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'
const TEST_TEXT_EN = 'Test message for broadcast'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function setupContext(language: string = 'ru'): Promise<any> {
  const ctx: any = createMockContext()

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç from
  ctx.from = {
    id: TEST_USER_ID,
    is_bot: false,
    first_name: 'Test',
    language_code: language,
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç session
  ctx.session = {
    language,
    isAdmin: true,
  }

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  ctx.replies = []

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scene.session
  ctx.scene = ctx.scene || {}
  ctx.scene.session = {}

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º wizard
  ctx.wizard = {
    next: mockApi.create() as MockedFunction,
    selectStep: mockApi.create() as MockedFunction,
  }

  // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
  ctx.reply = mockApi
    .create()
    .mockImplementation((text: string, extra: any) => {
      ctx.replies.push({ text, extra })
      return Promise.resolve({ message_id: ctx.replies.length })
    }) as MockedFunction

  ctx.editMessageText = mockApi.create() as MockedFunction

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbackQuery
  ctx.callbackQuery = undefined

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º message
  ctx.message = undefined

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º botInfo
  ctx.botInfo = {
    username: 'test_bot',
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ scene.leave
  ctx.scene.leave = mockApi.create() as MockedFunction

  return ctx
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑–∞—Ä–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 1)
 */
async function testBroadcastWizard_Start(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_Start')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = await setupContext('ru')

    // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
    await invokeHandler(broadcastWizard.steps[0], ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const expectedMessage = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üì®'
    const hasReplyCalls = ctx.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx.reply.mock.calls[0][0]
    if (!actualMessage.includes(expectedMessage)) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ wizard.next
    const hasNextCalls = ctx.wizard.next.mock?.calls?.length > 0
    if (!hasNextCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    console.log('testBroadcastWizard_Start —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_Start',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑–∞—Ä–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_Start:', error)
    return {
      name: 'testBroadcastWizard_Start',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—à–∞–≥ 2)
 */
async function testBroadcastWizard_SelectContentType(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_SelectContentType')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = await setupContext('ru')

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    ctx.message = {
      text: 'üì∑ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º',
    }

    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
    await invokeHandler(broadcastWizard.steps[1], ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (ctx.scene.session.contentType !== BroadcastContentType.PHOTO) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctx.scene.session.contentType}, –æ–∂–∏–¥–∞–ª—Å—è: ${BroadcastContentType.PHOTO}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ñ–æ—Ç–æ
    const expectedMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'
    const hasReplyCalls = ctx.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx.reply.mock.calls[0][0]
    if (!actualMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ wizard.next
    const hasNextCalls = ctx.wizard.next.mock?.calls?.length > 0
    if (!hasNextCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    console.log('testBroadcastWizard_SelectContentType —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_SelectContentType',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–æ—Ç–æ)',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_SelectContentType:', error)
    return {
      name: 'testBroadcastWizard_SelectContentType',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ (—à–∞–≥ 3)
 */
async function testBroadcastWizard_UploadPhoto(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_UploadPhoto')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = await setupContext('ru')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    ctx.scene.session.contentType = BroadcastContentType.PHOTO

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    ctx.message = {
      photo: [{ file_id: 'small_photo' }, { file_id: TEST_PHOTO_FILE_ID }],
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Ç—Ä–µ—Ç–∏–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
    await invokeHandler(broadcastWizard.steps[2], ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file_id —Ñ–æ—Ç–æ
    if (ctx.scene.session.photoFileId !== TEST_PHOTO_FILE_ID) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file_id —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctx.scene.session.photoFileId}, –æ–∂–∏–¥–∞–ª—Å—è: ${TEST_PHOTO_FILE_ID}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const expectedMessage = '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ'
    const hasReplyCalls = ctx.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx.reply.mock.calls[0][0]
    if (!actualMessage.includes('–†–£–°–°–ö–û–ú')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ wizard.next
    const hasNextCalls = ctx.wizard.next.mock?.calls?.length > 0
    if (!hasNextCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    console.log('testBroadcastWizard_UploadPhoto —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_UploadPhoto',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_UploadPhoto:', error)
    return {
      name: 'testBroadcastWizard_UploadPhoto',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—à–∞–≥ 4)
 */
async function testBroadcastWizard_InputText(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_InputText')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = await setupContext('ru')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    ctx.scene.session.contentType = BroadcastContentType.PHOTO
    ctx.scene.session.textInputStep = 'russian'

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    ctx.message = {
      text: TEST_TEXT_RU,
    }

    // –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    await invokeHandler(broadcastWizard.steps[3], ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    if (ctx.scene.session.textRu !== TEST_TEXT_RU) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctx.scene.session.textRu}, –æ–∂–∏–¥–∞–ª—Å—è: ${TEST_TEXT_RU}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    const expectedMessage = '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú —è–∑—ã–∫–µ'
    const hasReplyCalls = ctx.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx.reply.mock.calls[0][0]
    if (!actualMessage.includes('–ê–ù–ì–õ–ò–ô–°–ö–û–ú')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if (ctx.scene.session.textInputStep !== 'english') {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: ${ctx.scene.session.textInputStep}, –æ–∂–∏–¥–∞–ª—Å—è: english`
      )
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const ctxEn = await setupContext('ru')
    ctxEn.scene.session.contentType = BroadcastContentType.PHOTO
    ctxEn.scene.session.textInputStep = 'english'
    ctxEn.scene.session.textRu = TEST_TEXT_RU

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    ctxEn.message = {
      text: TEST_TEXT_EN,
    }

    // –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    await invokeHandler(broadcastWizard.steps[3], ctxEn)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    if (ctxEn.scene.session.textEn !== TEST_TEXT_EN) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctxEn.scene.session.textEn}, –æ–∂–∏–¥–∞–ª—Å—è: ${TEST_TEXT_EN}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    if (ctxEn.scene.session.textInputStep !== 'completed') {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: ${ctxEn.scene.session.textInputStep}, –æ–∂–∏–¥–∞–ª—Å—è: completed`
      )
    }

    console.log('testBroadcastWizard_InputText —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_InputText',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_InputText:', error)
    return {
      name: 'testBroadcastWizard_InputText',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 5)
 */
async function testBroadcastWizard_Confirm(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_Confirm')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = await setupContext('ru')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.scene.session.contentType = BroadcastContentType.PHOTO
    ctx.scene.session.photoFileId = TEST_PHOTO_FILE_ID
    ctx.scene.session.textRu = TEST_TEXT_RU
    ctx.scene.session.textEn = TEST_TEXT_EN
    ctx.scene.session.ownerTelegramId = TEST_USER_ID.toString()

    // –ò–º–∏—Ç–∏—Ä—É–µ–º callback query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    ctx.callbackQuery = {
      data: 'broadcast_confirm',
    }

    // –ü–æ–¥–º–µ–Ω—è–µ–º broadcastService –Ω–∞ –º–æ–∫
    const originalBroadcastService = (broadcastWizard as any).__proto__
      .broadcastService
    ;(broadcastWizard as any).__proto__.broadcastService = mockBroadcastService

    // –í—ã–∑—ã–≤–∞–µ–º –ø—è—Ç—ã–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
    await invokeHandler(broadcastWizard.steps[4], ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ sendBroadcastWithImage
    const hasSendBroadcastCalls =
      mockBroadcastService.sendBroadcastWithImage.mock?.calls?.length > 0
    if (!hasSendBroadcastCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ sendBroadcastWithImage –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    const expectedMessage = '–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    const hasReplyCalls = ctx.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx.reply.mock.calls[0][0]
    if (!actualMessage.includes('—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.leave
    const hasLeaveCalls = ctx.scene.leave.mock?.calls?.length > 0
    if (!hasLeaveCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º broadcastService
    ;(broadcastWizard as any).__proto__.broadcastService =
      originalBroadcastService

    console.log('testBroadcastWizard_Confirm —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_Confirm',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_Confirm:', error)
    return {
      name: 'testBroadcastWizard_Confirm',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
 */
async function testBroadcastWizard_Cancel(): Promise<TestResult> {
  console.log('–ó–∞–ø—É—Å–∫ testBroadcastWizard_Cancel')
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞ —à–∞–≥–µ 2
    const ctx1 = await setupContext('ru')

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
    ctx1.message = {
      text: '‚ùå –û—Ç–º–µ–Ω–∞',
    }

    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞ —Å –æ—Ç–º–µ–Ω–æ–π
    await invokeHandler(broadcastWizard.steps[1], ctx1)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    const expectedMessage = '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    const hasReplyCalls = ctx1.reply.mock?.calls?.length > 0
    if (!hasReplyCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage = ctx1.reply.mock.calls[0][0]
    if (!actualMessage.includes('–æ—Ç–º–µ–Ω–µ–Ω–∞')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.leave
    const hasLeaveCalls = ctx1.scene.leave.mock?.calls?.length > 0
    if (!hasLeaveCalls) {
      throw new Error('–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞ —à–∞–≥–µ 5
    const ctx2 = await setupContext('ru')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx2.scene.session.contentType = BroadcastContentType.PHOTO
    ctx2.scene.session.photoFileId = TEST_PHOTO_FILE_ID
    ctx2.scene.session.textRu = TEST_TEXT_RU
    ctx2.scene.session.textEn = TEST_TEXT_EN

    // –ò–º–∏—Ç–∏—Ä—É–µ–º callback query –¥–ª—è –æ—Ç–º–µ–Ω—ã
    ctx2.callbackQuery = {
      data: 'broadcast_cancel',
    }

    // –í—ã–∑—ã–≤–∞–µ–º –ø—è—Ç—ã–π —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞ —Å –æ—Ç–º–µ–Ω–æ–π
    await invokeHandler(broadcastWizard.steps[4], ctx2)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    const hasReplyCalls2 = ctx2.reply.mock?.calls?.length > 0
    if (!hasReplyCalls2) {
      throw new Error('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    const actualMessage2 = ctx2.reply.mock.calls[0][0]
    if (!actualMessage2.includes('–æ—Ç–º–µ–Ω–µ–Ω–∞')) {
      throw new Error(
        `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${actualMessage2}, –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${expectedMessage}`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.leave
    const hasLeaveCalls2 = ctx2.scene.leave.mock?.calls?.length > 0
    if (!hasLeaveCalls2) {
      throw new Error('–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω')
    }

    console.log('testBroadcastWizard_Cancel —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    return {
      name: 'testBroadcastWizard_Cancel',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö',
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ testBroadcastWizard_Cancel:', error)
    return {
      name: 'testBroadcastWizard_Cancel',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∏–∑–∞—Ä–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
 */
export async function runBroadcastWizardTests(): Promise<TestResult[]> {
  console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–∏–∑–∞—Ä–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...')

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  results.push(await testBroadcastWizard_Start())
  results.push(await testBroadcastWizard_SelectContentType())
  results.push(await testBroadcastWizard_UploadPhoto())
  results.push(await testBroadcastWizard_InputText())
  results.push(await testBroadcastWizard_Confirm())
  results.push(await testBroadcastWizard_Cancel())

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successCount = results.filter(r => r.success).length
  console.log(
    `–¢–µ—Å—Ç—ã –¥–ª—è –≤–∏–∑–∞—Ä–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`
  )

  return results
}

export default runBroadcastWizardTests
