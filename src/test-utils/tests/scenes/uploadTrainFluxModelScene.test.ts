import { Scenes } from 'telegraf'
import { Message, Update } from 'telegraf/typings/core/types/typegram'
import { MyContext } from '../../../interfaces'
import { uploadTrainFluxModelScene } from '../../../scenes/uploadTrainFluxModelScene'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –º–æ–∫–æ–≤
type MockFunction<T = any> = jest.MockedFunction<T> & {
  mockClear: () => void;
  mockReset: () => void;
  mockRestore: () => void;
  mockReturnValue: (val: any) => MockFunction<T>;
  mockResolvedValue: (val: any) => MockFunction<T>;
  mockRejectedValue: (val: any) => MockFunction<T>;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞
function createMockFunction<T>(): MockFunction<T> {
  return jest.fn() as MockFunction<T>;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createMockContext<T extends MyContext>(overrides: Partial<T> = {}): T {
  const defaultContext = {
    scene: {
      enter: jest.fn(),
      reenter: jest.fn(),
      leave: jest.fn(),
      state: {}
    },
    reply: jest.fn(),
    session: {},
    ...overrides
  } as unknown as T;
  
  return defaultContext;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logInfo = (message: string): void => {
  console.log(message);
};

const logError = (message: string, error: unknown): void => {
  console.error(message, error);
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const USERNAME = 'test_user'
const MODEL_NAME = 'test_model'
const STEPS = 1500
const TARGET_USER_ID = 12345
const IMAGES = ['image1.jpg', 'image2.jpg']
const ZIP_PATH = '/tmp/test_archive.zip'
const BOT_USERNAME = 'test_bot'

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestContext extends MyContext {
  mockCreateImagesZip: MockFunction
  mockEnsureSupabaseAuth: MockFunction
  mockCreateModelTraining: MockFunction
  mockIsRussian: MockFunction
  mockDeleteFile: MockFunction
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–æ–∫–∞–º–∏
function setupContext(isRussian = true): TestContext {
  const mockCreateImagesZip = createMockFunction<typeof import('../../../helpers/images/createImagesZip').createImagesZip>()
  const mockEnsureSupabaseAuth = createMockFunction<typeof import('../../../core/supabase').ensureSupabaseAuth>()
  const mockCreateModelTraining = createMockFunction<typeof import('../../../services/createModelTraining').createModelTraining>()
  const mockIsRussian = createMockFunction<typeof import('../../../helpers/language').isRussian>().mockReturnValue(isRussian)
  const mockDeleteFile = createMockFunction<typeof import('../../../helpers').deleteFile>()

  mockCreateImagesZip.mockResolvedValue(ZIP_PATH)
  mockEnsureSupabaseAuth.mockResolvedValue(undefined)
  mockCreateModelTraining.mockResolvedValue(undefined)
  mockDeleteFile.mockResolvedValue(undefined)

  const ctx = createMockContext<TestContext>({
    session: {
      username: USERNAME,
      modelName: MODEL_NAME,
      steps: STEPS,
      targetUserId: TARGET_USER_ID,
      images: IMAGES
    },
    botInfo: {
      username: BOT_USERNAME
    } as any
  })

  ctx.mockCreateImagesZip = mockCreateImagesZip
  ctx.mockEnsureSupabaseAuth = mockEnsureSupabaseAuth
  ctx.mockCreateModelTraining = mockCreateModelTraining
  ctx.mockIsRussian = mockIsRussian
  ctx.mockDeleteFile = mockDeleteFile

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  jest.mock('../../../helpers/images/createImagesZip', () => ({
    createImagesZip: mockCreateImagesZip
  }))
  jest.mock('../../../core/supabase', () => ({
    ensureSupabaseAuth: mockEnsureSupabaseAuth
  }))
  jest.mock('../../../services/createModelTraining', () => ({
    createModelTraining: mockCreateModelTraining
  }))
  jest.mock('../../../helpers/language', () => ({
    isRussian: mockIsRussian
  }))
  jest.mock('../../../helpers', () => ({
    deleteFile: mockDeleteFile
  }))

  return ctx
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
async function invokeEnterHandler(ctx: MyContext) {
  const middlewares = uploadTrainFluxModelScene.enterMiddleware;
  if (middlewares && middlewares.length > 0) {
    const handler = middlewares[0];
    await handler(ctx, () => Promise.resolve());
  } else {
    throw new Error('Enter handler not found');
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
async function testUploadTrainFluxModelScene_Success_Russian() {
  const TEST_NAME = 'testUploadTrainFluxModelScene_Success_Russian'
  const CATEGORY = 'uploadTrainFluxModelScene'
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`)
  
  try {
    // Arrange
    const ctx = setupContext(true) // —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    
    // Act
    await invokeEnterHandler(ctx)
    
    // Assert
    const expectedReplies = [
      '‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...',
      '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤...',
      '‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
      '‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n\n–í–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–¥–µ–ª "–ú–æ–¥–µ–ª–∏" –≤ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ.'
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    expect(ctx.reply).toHaveBeenCalledTimes(expectedReplies.length)
    expectedReplies.forEach((text, index) => {
      expect(ctx.reply).toHaveBeenNthCalledWith(index + 1, text)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createImagesZip –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateImagesZip).toHaveBeenCalledWith(IMAGES)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createModelTraining –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateModelTraining).toHaveBeenCalledWith(
      {
        filePath: ZIP_PATH,
        triggerWord: USERNAME.toLocaleUpperCase(),
        modelName: MODEL_NAME,
        steps: STEPS,
        telegram_id: TARGET_USER_ID.toString(),
        is_ru: true,
        botName: BOT_USERNAME,
      },
      ctx
    )
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω (—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    expect(ctx.scene.leave).toHaveBeenCalled()
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`)
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error)
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
 */
async function testUploadTrainFluxModelScene_Success_English() {
  const TEST_NAME = 'testUploadTrainFluxModelScene_Success_English'
  const CATEGORY = 'uploadTrainFluxModelScene'
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`)
  
  try {
    // Arrange
    const ctx = setupContext(false) // –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    
    // Act
    await invokeEnterHandler(ctx)
    
    // Assert
    const expectedReplies = [
      '‚è≥ Creating archive...',
      '‚è≥ Uploading archive...',
      '‚úÖ Archive uploaded successfully! Starting model training...',
      '‚è≥ Starting model training...\n\nYour model will be trained in 1-2 hours. Once completed, you can check its performance using the "Models" section in Neurophoto.'
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    expect(ctx.reply).toHaveBeenCalledTimes(expectedReplies.length)
    expectedReplies.forEach((text, index) => {
      expect(ctx.reply).toHaveBeenNthCalledWith(index + 1, text)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createImagesZip –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateImagesZip).toHaveBeenCalledWith(IMAGES)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createModelTraining –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateModelTraining).toHaveBeenCalledWith(
      {
        filePath: ZIP_PATH,
        triggerWord: USERNAME.toLocaleUpperCase(),
        modelName: MODEL_NAME,
        steps: STEPS,
        telegram_id: TARGET_USER_ID.toString(),
        is_ru: false,
        botName: BOT_USERNAME,
      },
      ctx
    )
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω (—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    expect(ctx.scene.leave).toHaveBeenCalled()
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`)
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ' }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error)
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP-–∞—Ä—Ö–∏–≤–∞
 */
async function testUploadTrainFluxModelScene_ZipCreationError() {
  const TEST_NAME = 'testUploadTrainFluxModelScene_ZipCreationError'
  const CATEGORY = 'uploadTrainFluxModelScene'
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`)
  
  try {
    // Arrange
    const ctx = setupContext(true)
    const errorMessage = 'Error creating ZIP file'
    ctx.mockCreateImagesZip.mockRejectedValue(new Error(errorMessage))
    
    // Act
    await invokeEnterHandler(ctx)
    
    // Assert
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞)
    expect(ctx.reply).toHaveBeenCalledTimes(1)
    expect(ctx.reply).toHaveBeenCalledWith('‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createImagesZip –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateImagesZip).toHaveBeenCalledWith(IMAGES)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏—Å—å
    expect(ctx.mockCreateModelTraining).not.toHaveBeenCalled()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω (—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    expect(ctx.scene.leave).toHaveBeenCalled()
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`)
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP-–∞—Ä—Ö–∏–≤–∞' }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error)
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º triggerWord (username)
 */
async function testUploadTrainFluxModelScene_EmptyTriggerWord() {
  const TEST_NAME = 'testUploadTrainFluxModelScene_EmptyTriggerWord'
  const CATEGORY = 'uploadTrainFluxModelScene'
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`)
  
  try {
    // Arrange
    const ctx = setupContext(true)
    ctx.session.username = ''
    
    // Act
    await invokeEnterHandler(ctx)
    
    // Assert
    const expectedReplies = [
      '‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...',
      '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤...',
      '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π trigger word'
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    expect(ctx.reply).toHaveBeenCalledTimes(expectedReplies.length)
    expectedReplies.forEach((text, index) => {
      expect(ctx.reply).toHaveBeenNthCalledWith(index + 1, text)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createModelTraining –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(ctx.mockCreateModelTraining).not.toHaveBeenCalled()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω (—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    expect(ctx.scene.leave).toHaveBeenCalled()
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`)
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º triggerWord' }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error)
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
 */
async function testUploadTrainFluxModelScene_TrainingError() {
  const TEST_NAME = 'testUploadTrainFluxModelScene_TrainingError'
  const CATEGORY = 'uploadTrainFluxModelScene'
  
  logInfo(`üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${TEST_NAME}`)
  
  try {
    // Arrange
    const ctx = setupContext(true)
    const errorMessage = 'Error training model'
    ctx.mockCreateModelTraining.mockRejectedValue(new Error(errorMessage))
    
    // Act
    await invokeEnterHandler(ctx)
    
    // Assert
    const expectedReplies = [
      '‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...',
      '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤...',
      '‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
      '‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n\n–í–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–¥–µ–ª "–ú–æ–¥–µ–ª–∏" –≤ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ.'
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    expect(ctx.reply).toHaveBeenCalledTimes(expectedReplies.length)
    expectedReplies.forEach((text, index) => {
      expect(ctx.reply).toHaveBeenNthCalledWith(index + 1, text)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createModelTraining –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.mockCreateModelTraining).toHaveBeenCalled()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω (—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    expect(ctx.scene.leave).toHaveBeenCalled()
    
    logInfo(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: ${TEST_NAME}`)
    return { testName: TEST_NAME, category: CATEGORY, success: true, message: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏' }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logError(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${TEST_NAME}`, error)
    return { testName: TEST_NAME, category: CATEGORY, success: false, message: `–û—à–∏–±–∫–∞: ${errorMessage}` }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã uploadTrainFluxModelScene
 */
export async function runUploadTrainFluxModelSceneTests() {
  const results = await Promise.all([
    testUploadTrainFluxModelScene_Success_Russian(),
    testUploadTrainFluxModelScene_Success_English(),
    testUploadTrainFluxModelScene_ZipCreationError(),
    testUploadTrainFluxModelScene_EmptyTriggerWord(),
    testUploadTrainFluxModelScene_TrainingError()
  ])
  
  logInfo(`
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è uploadTrainFluxModelScene:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}
‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.filter(r => !r.success).length}
`)
  
  return results
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runUploadTrainFluxModelSceneTests()