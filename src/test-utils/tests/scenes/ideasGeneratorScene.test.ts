import { Middleware } from 'telegraf';
import { createMockContext } from '../../core/mockContext';
import { TestResult } from '../../core/types';
import { assertReplyContains, assertScene } from '../../core/assertions';
import { create as mockFunction, MockedFunction } from '../../core/mock';
import { TestCategory } from '../../core/categories';
import { logger } from '../../../utils/logger';
import type { MyContext } from '../../../interfaces';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 123456789;
const TEST_USERNAME = 'test_user';

// –ú–æ–∫–∏—Ä—É–µ–º inngest –∫–ª–∏–µ–Ω—Ç
const mockInngestSend = mockFunction<any, any>();

// –ú–æ–∫–∏ –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
const mockIsRussian = mockFunction<any, boolean>();
const mockHandleHelpCancel = mockFunction<any, boolean>();

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ü–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π
 */
function setupContext(language: 'ru' | 'en' = 'ru') {
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
  const ctx = createMockContext();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ctx.from = { 
    id: TEST_USER_ID, 
    username: TEST_USERNAME, 
    language_code: language 
  } as any;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
  ctx.session = { 
    language: language
  } as any;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  mockIsRussian.mockImplementation(() => language === 'ru');
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è
  mockHandleHelpCancel.mockReturnValue(false);

  return ctx;
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
export async function testIdeasGeneratorScene_Enter(): Promise<TestResult> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)');
  
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = setupContext('ru');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { ideasGeneratorScene } = await import('../../../scenes/ideasGeneratorScene');
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
    if (ideasGeneratorScene.steps && ideasGeneratorScene.steps.length > 0) {
      const enterHandler = ideasGeneratorScene.steps[0];
      if (typeof enterHandler === 'function') {
        await enterHandler(ctx as any);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    assertReplyContains(ctx, '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É', 'message');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    assertReplyContains(ctx, '–û—Ç–º–µ–Ω–∞', 'message');
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)');
    
    return {
      name: 'IdeasGeneratorScene: Enter Scene (RU)',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫):', error);
    
    return {
      name: 'IdeasGeneratorScene: Enter Scene (RU)',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
 */
export async function testIdeasGeneratorScene_EnterEnglish(): Promise<TestResult> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)');
  
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = setupContext('en');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { ideasGeneratorScene } = await import('../../../scenes/ideasGeneratorScene');
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
    if (ideasGeneratorScene.steps && ideasGeneratorScene.steps.length > 0) {
      const enterHandler = ideasGeneratorScene.steps[0];
      if (typeof enterHandler === 'function') {
        await enterHandler(ctx as any);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    assertReplyContains(ctx, 'Ideas Generator: enter a topic', 'message');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    assertReplyContains(ctx, 'Cancel', 'message');
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)');
    
    return {
      name: 'IdeasGeneratorScene: Enter Scene (EN)',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫):', error);
    
    return {
      name: 'IdeasGeneratorScene: Enter Scene (EN)',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π
 */
export async function testIdeasGeneratorScene_GenerateIdeas(): Promise<TestResult> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π');
  
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = setupContext('ru');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testPrompt = '–∏–¥–µ–∏ –¥–ª—è –±–ª–æ–≥–∞ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö';
    ctx.message = {
      text: testPrompt,
      message_id: 123,
    } as any;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Inngest-—Å–æ–±—ã—Ç–∏—è
    mockInngestSend.mockClear().mockResolvedValue({});
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –∏ –ø–æ–¥–º–µ–Ω—è–µ–º inngest –∫–ª–∏–µ–Ω—Ç
    const inngestModule = await import('../../../inngest-functions/clients');
    Object.defineProperty(inngestModule, 'inngest', {
      value: { send: mockInngestSend },
      writable: true
    });
    
    const { ideasGeneratorScene } = await import('../../../scenes/ideasGeneratorScene');
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞)
    if (ideasGeneratorScene.steps && ideasGeneratorScene.steps.length > 1) {
      const promptHandler = ideasGeneratorScene.steps[1];
      if (typeof promptHandler === 'function') {
        await promptHandler(ctx as any);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    assertReplyContains(ctx, '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É', 'message');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ inngest —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(mockInngestSend).toHaveBeenCalledWith({
      name: 'generate.ideas.requested',
      data: {
        userId: TEST_USER_ID,
        prompt: testPrompt,
        language: 'ru'
      }
    });
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π');
    
    return {
      name: 'IdeasGeneratorScene: Generate Ideas',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π:', error);
    
    return {
      name: 'IdeasGeneratorScene: Generate Ideas',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ —Å—Ü–µ–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π
 */
export async function testIdeasGeneratorScene_Cancel(): Promise<TestResult> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π');
  
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = setupContext('ru');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã)
    ctx.message = {
      text: '–û—Ç–º–µ–Ω–∞',
      message_id: 123
    } as any;
    
    // –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleHelpCancel, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ true (–æ—Ç–º–µ–Ω–∞)
    mockHandleHelpCancel.mockReturnValue(true);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π handleHelpCancel –∏ –ø–æ–¥–º–µ–Ω—è–µ–º –µ–µ
    const handlersModule = await import('../../../handlers');
    Object.defineProperty(handlersModule, 'handleHelpCancel', {
      value: mockHandleHelpCancel,
      writable: true
    });
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { ideasGeneratorScene } = await import('../../../scenes/ideasGeneratorScene');
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
    if (ideasGeneratorScene.steps && ideasGeneratorScene.steps.length > 1) {
      const promptHandler = ideasGeneratorScene.steps[1];
      if (typeof promptHandler === 'function') {
        await promptHandler(ctx as any);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω handleHelpCancel
    expect(mockHandleHelpCancel).toHaveBeenCalled();
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π');
    
    return {
      name: 'IdeasGeneratorScene: Cancel',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:', error);
    
    return {
      name: 'IdeasGeneratorScene: Cancel',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function testIdeasGeneratorScene_NoTextMessage(): Promise<TestResult> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
  
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = setupContext('ru');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ)
    ctx.message = {
      message_id: 123,
      photo: [{ file_id: 'test_file_id' }]
    } as any;
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { ideasGeneratorScene } = await import('../../../scenes/ideasGeneratorScene');
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
    if (ideasGeneratorScene.steps && ideasGeneratorScene.steps.length > 1) {
      const promptHandler = ideasGeneratorScene.steps[1];
      if (typeof promptHandler === 'function') {
        await promptHandler(ctx as any);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    assertReplyContains(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'message');
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
    
    return {
      name: 'IdeasGeneratorScene: No Text Message',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    return {
      name: 'IdeasGeneratorScene: No Text Message',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π
 */
export async function runIdeasGeneratorSceneTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π...');
  
  const results = await Promise.all([
    testIdeasGeneratorScene_Enter(),
    testIdeasGeneratorScene_EnterEnglish(),
    testIdeasGeneratorScene_GenerateIdeas(),
    testIdeasGeneratorScene_Cancel(),
    testIdeasGeneratorScene_NoTextMessage()
  ]);
  
  // –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const successCount = results.filter(r => r.success).length;
  const failCount = results.length - successCount;
  
  logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ, ${failCount} –Ω–µ—É–¥–∞—á–Ω–æ`);
  
  return results;
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –º–æ–∫–æ–≤
function expect<T = any, R = any>(mockFn: MockedFunction<T, R>) {
  return {
    toHaveBeenCalled: () => {
      if (mockFn.mock.calls.length === 0) {
        throw new Error('–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞');
      }
    },
    toHaveBeenCalledWith: (expectedArg: any) => {
      const wasCalled = mockFn.mock.calls.some((call: any[]) => {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if (typeof call[0] === 'object' && call[0] !== null && typeof expectedArg === 'object' && expectedArg !== null) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ–º —É–≤–∏–¥–µ—Ç—å
          return Object.keys(expectedArg).every(key => 
            JSON.stringify(call[0][key]) === JSON.stringify(expectedArg[key])
          );
        }
        
        return JSON.stringify(call[0]) === JSON.stringify(expectedArg);
      });
      
      if (!wasCalled) {
        throw new Error(`–û–∂–∏–¥–∞–ª—Å—è –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: ${JSON.stringify(expectedArg)}`);
      }
    }
  };
} 