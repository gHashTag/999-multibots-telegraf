import { Scenes } from 'telegraf';
import { Update } from 'telegraf/typings/core/types/typegram';
import { MyContext } from '@/interfaces';
import { createMockContext } from '@/test-utils/telegraf-mocks';
import { MockFunction, invokeHandler } from '@/test-utils/mocks';
import { TestResult, TestCategory } from '@/test-utils/types';
import { ideasGeneratorScene } from '@/scenes/ideasGeneratorScene';
import * as languageModule from '@/helpers/language';
import * as generateIdeaModule from '@/services/generateIdea';

interface TestContext extends MyContext {
  scene: {
    enter: MockFunction;
    leave: MockFunction;
    reenter: MockFunction;
  };
  reply: MockFunction;
  replyWithMarkdown: MockFunction;
  replies?: Array<{ text: string; extra?: any }>;
  session: {
    promptInfo?: {
      category?: string;
      count?: number;
    };
    [key: string]: any;
  };
  from?: {
    id: number;
    language_code?: string;
  };
  message?: {
    text?: string;
    message_id?: number;
  };
  wizard?: {
    next: MockFunction;
    selectStep: MockFunction;
    cursor: number;
  };
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 12345678;
const TEST_CATEGORIES = ['–ó–¥–æ—Ä–æ–≤—å–µ', '–ë–∏–∑–Ω–µ—Å', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'];
const TEST_IDEAS = [
  '–ò–¥–µ—è 1: –û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ 1',
  '–ò–¥–µ—è 2: –û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ 2',
  '–ò–¥–µ—è 3: –û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ 3',
];

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function setupContext(params: {
  language?: string;
  messageText?: string;
  step?: number;
  category?: string;
  count?: number;
}): TestContext {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
  const isRussian = params.language !== 'en';
  jest.spyOn(languageModule, 'isRussian').mockReturnValue(isRussian);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const ctx = createMockContext() as TestContext;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å—Ü–µ–Ω—ã
  ctx.scene.enter = jest.fn().mockResolvedValue(true);
  ctx.scene.leave = jest.fn().mockResolvedValue(true);
  ctx.scene.reenter = jest.fn().mockResolvedValue(true);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ reply –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  ctx.reply = jest.fn().mockImplementation((text: string, extra?: any) => {
    console.log(`[–ú–æ–∫] reply –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}`);
    if (!ctx.replies) {
      ctx.replies = [];
    }
    ctx.replies.push({ text, extra });
    return true;
  });
  
  ctx.replyWithMarkdown = jest.fn().mockImplementation((text: string, extra?: any) => {
    console.log(`[–ú–æ–∫] replyWithMarkdown –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}`);
    if (!ctx.replies) {
      ctx.replies = [];
    }
    ctx.replies.push({ text, extra });
    return true;
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ session
  ctx.session = {};
  if (params.category) {
    if (!ctx.session.promptInfo) {
      ctx.session.promptInfo = {};
    }
    ctx.session.promptInfo.category = params.category;
  }
  
  if (params.count) {
    if (!ctx.session.promptInfo) {
      ctx.session.promptInfo = {};
    }
    ctx.session.promptInfo.count = params.count;
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ from
  ctx.from = {
    id: TEST_USER_ID,
    language_code: params.language === 'en' ? 'en' : 'ru',
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ message
  if (params.messageText) {
    ctx.message = {
      text: params.messageText,
      message_id: 1,
    };
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ wizard
  if (params.step !== undefined) {
    ctx.wizard = {
      next: jest.fn().mockReturnValue(undefined),
      selectStep: jest.fn().mockReturnValue(undefined),
      cursor: params.step,
    };
  }
  
  // –ú–æ–∫ –¥–ª—è generateIdea
  jest.spyOn(generateIdeaModule, 'generateIdea').mockResolvedValue(TEST_IDEAS);
  
  return ctx;
}

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testIdeasGeneratorScene_Enter(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_Enter');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({ language: 'ru' });
    
    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞
    await invokeHandler(ideasGeneratorScene.enterHandler, ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText || !replyText.includes('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const keyboard = ctx.replies?.[0]?.extra?.reply_markup?.keyboard;
    if (!keyboard || !Array.isArray(keyboard) || keyboard.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      };
    }
    
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (RU)',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_Enter:', error);
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (RU)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testIdeasGeneratorScene_EnterEnglish(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_EnterEnglish');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({ language: 'en' });
    
    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞
    await invokeHandler(ideasGeneratorScene.enterHandler, ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (EN)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText || !replyText.includes('Choose a category')) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (EN)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const keyboard = ctx.replies?.[0]?.extra?.reply_markup?.keyboard;
    if (!keyboard || !Array.isArray(keyboard) || keyboard.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (EN)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      };
    }
    
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (EN)',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_EnterEnglish:', error);
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (EN)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_SelectCategory(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_SelectCategory');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '–ë–∏–∑–Ω–µ—Å',
      step: 0,
    });
    
    // –ü–µ—Ä–≤—ã–π —à–∞–≥ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await invokeHandler(ideasGeneratorScene.stepHandlers[0], ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!ctx.session.promptInfo?.category) {
      return {
        name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏',
      };
    }
    
    if (ctx.session.promptInfo.category !== '–ë–∏–∑–Ω–µ—Å') {
      return {
        name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${ctx.session.promptInfo.category}`,
      };
    }
    
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText || !replyText.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')) {
      return {
        name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      };
    }
    
    if (!ctx.wizard?.next.mock.calls.length) {
      return {
        name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    return {
      name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_SelectCategory:', error);
    return {
      name: '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_SelectCount(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_SelectCount');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '3',
      step: 1,
      category: '–ë–∏–∑–Ω–µ—Å',
    });
    
    // –í—Ç–æ—Ä–æ–π —à–∞–≥ - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π
    await invokeHandler(ideasGeneratorScene.stepHandlers[1], ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!ctx.session.promptInfo?.count) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏',
      };
    }
    
    if (ctx.session.promptInfo.count !== 3) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.session.promptInfo.count}`,
      };
    }
    
    if (ctx.reply.mock.calls.length === 0 && ctx.replyWithMarkdown.mock.calls.length === 0) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ù–∏ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ reply/replyWithMarkdown –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    if (generateIdeaModule.generateIdea.mock.calls.length === 0) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ generateIdea –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    const generateArgs = generateIdeaModule.generateIdea.mock.calls[0];
    if (!generateArgs || generateArgs[0] !== '–ë–∏–∑–Ω–µ—Å' || generateArgs[1] !== 3) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ generateIdea: ${JSON.stringify(generateArgs)}`,
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    return {
      name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_SelectCount:', error);
    return {
      name: '–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_InvalidCount(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_InvalidCount');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '–º–Ω–æ–≥–æ',
      step: 1,
      category: '–ë–∏–∑–Ω–µ—Å',
    });
    
    // –í—Ç–æ—Ä–æ–π —à–∞–≥ - –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
    await invokeHandler(ideasGeneratorScene.stepHandlers[1], ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    const replyText = ctx.replies?.[0]?.text;
    if (!replyText || !replyText.includes('—á–∏—Å–ª–æ')) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      };
    }
    
    if (generateIdeaModule.generateIdea.mock.calls.length > 0) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ generateIdea –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      };
    }
    
    if (ctx.scene.leave.mock.calls.length > 0) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–°—Ü–µ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É',
      };
    }
    
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_InvalidCount:', error);
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_GenerationError(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testIdeasGeneratorScene_GenerationError');
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '3',
      step: 1,
      category: '–ë–∏–∑–Ω–µ—Å',
    });
    
    // –ú–æ–∫ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    jest.spyOn(generateIdeaModule, 'generateIdea').mockRejectedValue(new Error('API Error'));
    
    // –í—Ç–æ—Ä–æ–π —à–∞–≥ - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –æ—à–∏–±–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await invokeHandler(ideasGeneratorScene.stepHandlers[1], ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    let foundErrorMessage = false;
    for (const reply of ctx.replies || []) {
      if (reply.text && (reply.text.includes('–æ—à–∏–±–∫–∞') || reply.text.includes('–û—à–∏–±–∫–∞'))) {
        foundErrorMessage = true;
        break;
      }
    }
    
    if (!foundErrorMessage) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      };
    }
    
    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      };
    }
    
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testIdeasGeneratorScene_GenerationError:', error);
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω—ã ideasGeneratorScene
 */
export async function runIdeasGeneratorSceneTests(): Promise<TestResult[]> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ideasGeneratorScene');
  
  const results: TestResult[] = [];
  
  try {
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results.push(await testIdeasGeneratorScene_Enter());
    results.push(await testIdeasGeneratorScene_EnterEnglish());
    results.push(await testIdeasGeneratorScene_SelectCategory());
    results.push(await testIdeasGeneratorScene_SelectCount());
    results.push(await testIdeasGeneratorScene_InvalidCount());
    results.push(await testIdeasGeneratorScene_GenerationError());
    
    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const successCount = results.filter(r => r.success).length;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length} —Ç–µ—Å—Ç–æ–≤`);
    
    results.filter(r => !r.success).forEach(r => {
      console.error(`‚ùå –¢–µ—Å—Ç "${r.name}" –Ω–µ –ø—Ä–æ—à–µ–ª: ${r.message}`);
      if (r.error) console.error(`   –û—à–∏–±–∫–∞: ${r.error}`);
    });
    
    return results;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    results.push({
      name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ ideasGeneratorScene',
      category: TestCategory.SCENE,
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      error: error instanceof Error ? error.message : String(error),
    });
    
    return results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
export default runIdeasGeneratorSceneTests; 