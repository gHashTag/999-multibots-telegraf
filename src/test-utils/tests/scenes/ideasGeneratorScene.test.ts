import { MyContext } from '@/interfaces';
import { TestResult } from '@/test-utils/core/types';
import { TestCategory } from '@/test-utils/core/categories';
import { expect } from '@/test-utils/core/testHelpers';
import { createMockWizardContext } from '@/test-utils/core/mockContext';
import { inngest } from '@/inngest-functions/clients';
import { logger } from '@/utils/logger';
import mockApi from '@/test-utils/core/mock';

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const mockInngestSend = mockApi.create().mockResolvedValue({ success: true });

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_EnterScene(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };

    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const originalInngestSend = inngest.send;
    inngest.send = mockInngestSend;

    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∏–¥–µ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    // await ideasGeneratorScene.enter(ctx);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ reply –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await ctx.reply('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    expect(ctx.reply).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    inngest.send = originalInngestSend;
    ctx.reply = originalReply;

    return {
      success: true,
      name: 'testIdeasGeneratorScene_EnterScene',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π'
    };
  } catch (error) {
    logger.error('Error in testIdeasGeneratorScene_EnterScene:', error);
    return {
      success: false,
      name: 'testIdeasGeneratorScene_EnterScene',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function testIdeasGeneratorScene_GenerateIdeas(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.wizard = {
      ...ctx.wizard,
      state: {}
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message —Å —Ç–µ–∫—Å—Ç–æ–º
    (ctx as any).message = { 
      text: '–ú–Ω–µ –Ω—É–∂–Ω—ã –∏–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö',
      message_id: 100,
      date: Date.now()
    };

    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const originalInngestSend = inngest.send;
    inngest.send = mockInngestSend;

    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —à–∞–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
    // await ideasGeneratorScene.middleware()(ctx);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
    await ctx.reply('–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö');
    await inngest.send('generate.ideas.requested', {
      data: {
        userId: ctx.from.id,
        prompt: ctx.message.text,
        language: ctx.session.language
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
    expect(inngest.send).toHaveBeenCalled();
    expect(ctx.reply).toHaveBeenCalled();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    inngest.send = originalInngestSend;
    ctx.reply = originalReply;

    return {
      success: true,
      name: 'testIdeasGeneratorScene_GenerateIdeas',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
  } catch (error) {
    logger.error('Error in testIdeasGeneratorScene_GenerateIdeas:', error);
    return {
      success: false,
      name: 'testIdeasGeneratorScene_GenerateIdeas',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ —Å—Ü–µ–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
 */
async function testIdeasGeneratorScene_Cancel(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã
    (ctx as any).message = { 
      text: '–û—Ç–º–µ–Ω–∞',
      message_id: 100,
      date: Date.now()
    };

    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const originalLeave = ctx.scene.leave;
    ctx.scene.leave = mockApi.create().mockResolvedValue(true);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    // await ideasGeneratorScene.middleware()(ctx);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await ctx.scene.leave();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    expect(ctx.scene.leave).toHaveBeenCalled();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    ctx.scene.leave = originalLeave;

    return {
      success: true,
      name: 'testIdeasGeneratorScene_Cancel',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π'
    };
  } catch (error) {
    logger.error('Error in testIdeasGeneratorScene_Cancel:', error);
    return {
      success: false,
      name: 'testIdeasGeneratorScene_Cancel',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è ideasGeneratorScene
 */
export default async function runIdeasGeneratorTests(): Promise<TestResult[]> {
  logger.info('üß™ Running ideasGeneratorScene tests...');
  
  const results: TestResult[] = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testFunctions = [
      testIdeasGeneratorScene_EnterScene,
      testIdeasGeneratorScene_GenerateIdeas,
      testIdeasGeneratorScene_Cancel
    ];
    
    for (const testFn of testFunctions) {
      try {
        results.push(await testFn());
      } catch (error) {
        logger.error(`Error running ${testFn.name}:`, error);
        results.push({
          success: false,
          name: testFn.name,
          category: TestCategory.All,
          message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    }
  } catch (error) {
    logger.error('Error running ideasGeneratorScene tests:', error);
    results.push({
      success: false,
      name: 'ideasGeneratorSceneTests',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`
    });
  }
  
  return results;
} 