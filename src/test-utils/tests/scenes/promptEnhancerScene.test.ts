import { Scenes } from 'telegraf'
import { MyContext, MyWizardSession } from '@/interfaces'
import { createMockContext } from '@/test-utils/mocks/context'
import {
  MockFunction,
  createMockFunction,
} from '@/test-utils/mocks/mockFunction'
import { TestResult } from '@/test-utils/interfaces'
import { logger } from '@/utils/logger'
import { isRussian } from '@/helpers/language'
import { enhancePrompt } from '@/services/enhancePrompt'
import { promptEnhancerScene } from '@/scenes/promptEnhancerScene'

// –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('@/helpers/language')
jest.mock('@/services/enhancePrompt')
jest.mock('@/utils/logger')

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type MockFunction = jest.Mock

interface TestResult {
  name: string
  category: string
  success: boolean
  message: string
}

interface TestContext extends Omit<MyContext, 'scene'> {
  scene: {
    enter: MockFunction
    leave: MockFunction
    reenter: MockFunction
    session: MyWizardSession
  }
  wizard: {
    next: MockFunction
    back: MockFunction
    selectStep: MockFunction
  }
  message?: {
    text?: string
  }
}

describe('promptEnhancerScene Tests', () => {
  let mockContext: TestContext

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks()

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    mockContext = createMockContext() as unknown as TestContext

    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    ;(isRussian as jest.Mock).mockReturnValue(true)
  })

  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
  async function testPromptEnhancerScene_Enter(): Promise<TestResult> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É promptEnhancer (RU)')

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π handler
      const enterHandler = (promptEnhancerScene as any).steps[0]

      // –í—ã–∑—ã–≤–∞–µ–º handler
      await enterHandler(mockContext)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å\n\n–ü—Ä–æ–º–ø—Ç - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ',
        { reply_markup: { remove_keyboard: true } }
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      expect(mockContext.wizard.next).toHaveBeenCalled()

      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É promptEnhancer (RU)')
      return {
        name: 'testPromptEnhancerScene_Enter',
        category: 'promptEnhancer',
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º',
      }
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É:',
        error instanceof Error ? error.message : String(error)
      )
      return {
        name: 'testPromptEnhancerScene_Enter',
        category: 'promptEnhancer',
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      }
    }
  }

  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
  async function testPromptEnhancerScene_EnterEnglish(): Promise<TestResult> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É promptEnhancer (EN)')

      // –ú–µ–Ω—è–µ–º —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      ;(isRussian as jest.Mock).mockReturnValue(false)

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π handler
      const enterHandler = (promptEnhancerScene as any).steps[0]

      // –í—ã–∑—ã–≤–∞–µ–º handler
      await enterHandler(mockContext)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚úçÔ∏è Please send the prompt you want to enhance\n\nA prompt is a text description for generating an image or video',
        { reply_markup: { remove_keyboard: true } }
      )

      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É promptEnhancer (EN)')
      return {
        name: 'testPromptEnhancerScene_EnterEnglish',
        category: 'promptEnhancer',
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º',
      }
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É (EN):',
        error instanceof Error ? error.message : String(error)
      )
      return {
        name: 'testPromptEnhancerScene_EnterEnglish',
        category: 'promptEnhancer',
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      }
    }
  }

  // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  async function testPromptEnhancerScene_EnhancePrompt(): Promise<TestResult> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞')

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      mockContext.message = { text: 'Test prompt' }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π handler
      const enhanceHandler = (promptEnhancerScene as any).steps[1]

      // –í—ã–∑—ã–≤–∞–µ–º handler
      await enhanceHandler(mockContext)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
      expect(enhancePrompt).toHaveBeenCalledWith('Test prompt', true)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
      expect(mockContext.reply).toHaveBeenCalledWith('üîÑ –£–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç...')
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n\nEnhanced prompt text\n\n–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.'
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      expect(logger.info).toHaveBeenCalled()

      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞')
      return {
        name: 'testPromptEnhancerScene_EnhancePrompt',
        category: 'promptEnhancer',
        success: true,
        message: '–£—Å–ø–µ—à–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞',
      }
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:',
        error instanceof Error ? error.message : String(error)
      )
      return {
        name: 'testPromptEnhancerScene_EnhancePrompt',
        category: 'promptEnhancer',
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      }
    }
  }

  // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
  async function testPromptEnhancerScene_HandleError(): Promise<TestResult> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞')

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      mockContext.message = { text: 'Test prompt' }

      // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–≤–∏—Å–µ
      ;(enhancePrompt as jest.Mock).mockRejectedValue(new Error('Test error'))

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π handler
      const enhanceHandler = (promptEnhancerScene as any).steps[1]

      // –í—ã–∑—ã–≤–∞–µ–º handler
      await enhanceHandler(mockContext)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      expect(logger.error).toHaveBeenCalled()

      console.log(
        '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞'
      )
      return {
        name: 'testPromptEnhancerScene_HandleError',
        category: 'promptEnhancer',
        success: true,
        message: '–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏',
      }
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏:',
        error instanceof Error ? error.message : String(error)
      )
      return {
        name: 'testPromptEnhancerScene_HandleError',
        category: 'promptEnhancer',
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async function runPromptEnhancerSceneTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    results.push(await testPromptEnhancerScene_Enter())
    results.push(await testPromptEnhancerScene_EnterEnglish())
    results.push(await testPromptEnhancerScene_EnhancePrompt())
    results.push(await testPromptEnhancerScene_HandleError())

    return results
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  it('should pass all promptEnhancerScene tests', async () => {
    const results = await runPromptEnhancerSceneTests()
    const failedTests = results.filter(result => !result.success)

    if (failedTests.length > 0) {
      console.error('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:')
      failedTests.forEach(test => {
        console.error(`- ${test.name}: ${test.message}`)
      })
      throw new Error('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
    }

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã')
  })
})
