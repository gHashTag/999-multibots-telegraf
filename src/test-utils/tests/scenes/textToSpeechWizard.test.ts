import { Scenes, Context } from 'telegraf'
import { createMockBot } from '../../mocks/telegrafMock'
import { Message } from 'telegraf/typings/core/types/typegram'
import { isRussian } from '../../../utils/i18n'
import { textToSpeechWizard } from '../../../scenes/textToSpeechWizard'
import { logger } from '../../../utils/logger'
import { MyContext } from '@/interfaces'
import { createMockContext } from '../../core/mockContext'
import { TestResult } from '../../core/types'
import { TestCategory } from '../../core/categories'
import { MockFunction, create as mockFunction } from '../../core/mock'
import { inngest } from '@/inngest-functions/clients'
import { getVoiceId } from '@/core/supabase'

interface MyContext extends Context {
  session: {
    textToConvert?: string
    voiceId?: string
  }
  scene: Scenes.SceneContextScene<MyContext>
  message?: Message.TextMessage
}

interface TestContext extends MyContext {
  reply: jest.Mock
}

interface TestResult {
  name: string
  category: string
  success: boolean
  message: string
}

const mockIsRussian = jest
  .fn()
  .mockImplementation((text: string) => text.includes('ru'))
const mockTextToSpeech = jest.fn()
const mockLogger = {
  info: jest.fn(),
  error: jest.fn(),
}

const setupContext = (language: string = 'ru'): TestContext => {
  const ctx = {
    ...createMockBot(),
    scene: {
      enter: jest.fn(),
      leave: jest.fn(),
      state: {},
    } as Partial<Scenes.SceneContextScene<MyContext>>,
    session: {},
    message: {
      text: language,
    },
    reply: jest.fn(),
  } as TestContext

  mockIsRussian.mockReturnValue(language === 'ru')
  return ctx
}

const TEST_USER_ID = 123456789
const TEST_USERNAME = 'test_user'
const TEST_VOICE_ID = 'test-voice-id'

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É text-to-speech –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
export async function testTextToSpeechWizard_Enter(): Promise<TestResult> {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: TextToSpeechWizard - –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (RU)')

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext()
    ctx.from = { id: TEST_USER_ID, username: TEST_USERNAME } as any
    ctx.session = {} as any

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { textToSpeechWizard } = await import('@/scenes/textToSpeechWizard')

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
    await textToSpeechWizard.steps[0](ctx as unknown as MyContext)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (
      !ctx.reply.calledWith(
        'üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –≤ –≥–æ–ª–æ—Å'
      )
    ) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É')
    }

    return {
      name: 'TextToSpeechWizard: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (RU)',
      category: TestCategory.Scenes,
      success: true,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error)
    return {
      name: 'TextToSpeechWizard: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (RU)',
      category: TestCategory.Scenes,
      success: false,
      message: String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É text-to-speech –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
 */
export async function testTextToSpeechWizard_EnterEnglish(): Promise<TestResult> {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: TextToSpeechWizard - –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (EN)')

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º
    const ctx = createMockContext()
    ctx.from = { id: TEST_USER_ID, username: TEST_USERNAME } as any
    ctx.session = { language: 'en' } as any

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { textToSpeechWizard } = await import('@/scenes/textToSpeechWizard')

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
    await textToSpeechWizard.steps[0](ctx as unknown as MyContext)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.reply.calledWith('üéôÔ∏è Send text, to convert it to voice')) {
      throw new Error('Incorrect message when entering scene in English')
    }

    return {
      name: 'TextToSpeechWizard: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (EN)',
      category: TestCategory.Scenes,
      success: true,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error)
    return {
      name: 'TextToSpeechWizard: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É (EN)',
      category: TestCategory.Scenes,
      success: false,
      message: String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest
 */
export async function testTextToSpeechWizard_ProcessText(): Promise<TestResult> {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: TextToSpeechWizard - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞')

    // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é getVoiceId
    const mockGetVoiceId = mockFunction<typeof getVoiceId>()
    mockGetVoiceId.mockReturnValue(Promise.resolve(TEST_VOICE_ID))

    // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é inngest.send
    const mockInngestSend = mockFunction<typeof inngest.send>()
    mockInngestSend.mockReturnValue(Promise.resolve())

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext()
    ctx.from = { id: TEST_USER_ID, username: TEST_USERNAME } as any
    ctx.message = { text: 'Test message' } as any
    ctx.session = {} as any

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { textToSpeechWizard } = await import('@/scenes/textToSpeechWizard')

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    await textToSpeechWizard.steps[1](ctx as unknown as MyContext)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –∑–∞–ø—Ä–æ—Å voice_id
    if (!mockGetVoiceId.called) {
      throw new Error('–ù–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω getVoiceId')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
    if (!mockInngestSend.called) {
      throw new Error('–ù–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Inngest')
    }

    return {
      name: 'TextToSpeechWizard: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞',
      category: TestCategory.Scenes,
      success: true,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error)
    return {
      name: 'TextToSpeechWizard: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞',
      category: TestCategory.Scenes,
      success: false,
      message: String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ voice_id
 */
export async function testTextToSpeechWizard_NoVoiceId(): Promise<TestResult> {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: TextToSpeechWizard - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π voice_id')

    // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é getVoiceId, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é null
    const mockGetVoiceId = mockFunction<typeof getVoiceId>()
    mockGetVoiceId.mockReturnValue(Promise.resolve(null))

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext()
    ctx.from = { id: TEST_USER_ID, username: TEST_USERNAME } as any
    ctx.message = { text: 'Test message' } as any
    ctx.session = {} as any

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const { textToSpeechWizard } = await import('@/scenes/textToSpeechWizard')

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    await textToSpeechWizard.steps[1](ctx as unknown as MyContext)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ voice_id
    if (
      !ctx.reply.calledWith(
        'üéØ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–±—É—á–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä –∏—Å–ø–æ–ª—å–∑—É—è üé§ –ì–æ–ª–æ—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'
      )
    ) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ voice_id')
    }

    return {
      name: 'TextToSpeechWizard: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π voice_id',
      category: TestCategory.Scenes,
      success: true,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error)
    return {
      name: 'TextToSpeechWizard: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π voice_id',
      category: TestCategory.Scenes,
      success: false,
      message: String(error),
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã TextToSpeechWizard
 */
export async function runTextToSpeechWizardTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  try {
    results.push(await testTextToSpeechWizard_Enter())
    results.push(await testTextToSpeechWizard_EnterEnglish())
    results.push(await testTextToSpeechWizard_ProcessText())
    results.push(await testTextToSpeechWizard_NoVoiceId())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ TextToSpeechWizard:', error)
    results.push({
      name: 'TextToSpeechWizard: –û–±—â–∞—è –æ—à–∏–±–∫–∞',
      category: TestCategory.Scenes,
      success: false,
      message: String(error),
    })
  }

  return results
}

export default runTextToSpeechWizardTests
