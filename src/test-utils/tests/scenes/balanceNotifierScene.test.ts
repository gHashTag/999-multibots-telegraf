import { MyContext } from '../../../interfaces';
import { balanceNotifierScene, BALANCE_NOTIFIER_SCENE_ID } from '../../../scenes/balanceNotifierScene';
import { createMockContext } from '../../helpers/createMockContext';
import { TestResult } from '../../core/types';
import { TestCategory } from '../../core/categories';
import { logger } from '../../../utils/logger';
import * as supabaseModule from '../../../core/supabase';
import mockApi from '../../core/mock';
import { getUserInfo } from '../../../handlers/getUserInfo';

// –ú–æ–∫–∏—Ä—É–µ–º getUserInfo
jest.mock('../../../handlers/getUserInfo', () => ({
  getUserInfo: jest.fn()
}));

// –ú–æ–∫–∏—Ä—É–µ–º getUserBalance –∏–∑ core/supabase
jest.mock('../../../core/supabase', () => {
  const originalModule = jest.requireActual('../../../core/supabase');
  return {
    ...originalModule,
    getUserBalance: jest.fn()
  };
});

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
const createTestContext = (options: { language?: string, callbackData?: string, balanceSettings?: any } = {}) => {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const testUser = {
    telegram_id: '123456789',
    username: 'testuser'
  };

  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const ctx = createMockContext({
    user: testUser,
    callbackData: options.callbackData,
  }) as unknown as MyContext;

  // –ú–æ–∫–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  (getUserInfo as jest.Mock).mockReturnValue({
    telegramId: testUser.telegram_id,
    userId: 'test-user-id'
  });

  // –ú–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  (supabaseModule.getUserBalance as jest.Mock).mockResolvedValue(100.5);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  ctx.session = {
    __scenes: {
      current: BALANCE_NOTIFIER_SCENE_ID,
      state: {}
    },
    language: options.language || 'en',
    balanceNotifications: options.balanceSettings || {
      enabled: false,
      threshold: 10
    }
  } as any;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ü–µ–Ω–æ–π
  ctx.scene = {
    enter: jest.fn().mockResolvedValue(true),
    reenter: jest.fn().mockResolvedValue(true),
    leave: jest.fn().mockResolvedValue(true)
  } as any;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
  ctx.answerCbQuery = jest.fn().mockResolvedValue(true);
  ctx.editMessageText = jest.fn().mockResolvedValue(true);
  ctx.editMessageReplyMarkup = jest.fn().mockResolvedValue(true);

  // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã Telegraf –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  ctx.reply = jest.fn().mockResolvedValue(true);
  
  return { ctx };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
const assertReplyContains = (ctx: any, expectedText: string) => {
  const replyCall = ctx.reply.mock.calls.find(
    (call: any[]) => call[0] && typeof call[0] === 'string' && call[0].includes(expectedText)
  );
  
  if (!replyCall) {
    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–µ–∫—Å—Ç "${expectedText}", –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const assertInlineKeyboardContains = (ctx: any, expectedButtons: string[]) => {
  const replyCall = ctx.reply.mock.calls.find(
    (call: any[]) => call[1] && call[1].reply_markup && call[1].reply_markup.inline_keyboard
  );
  
  if (!replyCall) {
    throw new Error('–û–∂–∏–¥–∞–ª–∞—Å—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  const keyboard = replyCall[1].reply_markup.inline_keyboard;
  const allButtons = keyboard.flat().map((button: any) => button.text);
  
  expectedButtons.forEach(expectedButton => {
    if (!allButtons.some(button => button.includes(expectedButton))) {
      throw new Error(`–û–∂–∏–¥–∞–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ "${expectedButton}", –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ`);
    }
  });
};

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
 */
export async function testBalanceNotifierScene_EnterScene(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { ctx } = createTestContext({ language: 'ru' });
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
    await balanceNotifierScene.enterHandler(ctx);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ
    assertReplyContains(ctx, '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    assertReplyContains(ctx, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    assertReplyContains(ctx, '–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
    assertInlineKeyboardContains(ctx, ['–í–∫–ª—é—á–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥', '–ù–∞–∑–∞–¥']);
    
    return {
      name: 'balanceNotifierScene: Enter Scene',
      category: TestCategory.All,
      success: true,
      message: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    return {
      name: 'balanceNotifierScene: Enter Scene',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
 */
export async function testBalanceNotifierScene_ToggleNotifications(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–ª–∞–Ω—Å–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã)
    const { ctx } = createTestContext({
      callbackData: 'toggle_notifications',
      balanceSettings: { enabled: false, threshold: 10 }
    });
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    await balanceNotifierScene.callbackQuery('toggle_notifications', async (ctx) => {
      await ctx.answerCbQuery(); 
      return ctx.scene.reenter();
    })(ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if (ctx.session.balanceNotifications.enabled !== true) {
      throw new Error(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ enabled = ${ctx.session.balanceNotifications.enabled}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answerCbQuery —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    expect(ctx.answerCbQuery).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω reenter –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    expect(ctx.scene.reenter).toHaveBeenCalled();
    
    return {
      name: 'balanceNotifierScene: Toggle Notifications',
      category: TestCategory.All,
      success: true,
      message: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return {
      name: 'balanceNotifierScene: Toggle Notifications',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
 */
export async function testBalanceNotifierScene_ChangeThreshold(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const { ctx } = createTestContext({
      callbackData: 'change_threshold'
    });
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥"
    await balanceNotifierScene.callbackQuery('change_threshold', async (ctx) => {
      await ctx.reply('üìù Please enter the balance threshold for notifications (number of stars):');
      ctx.scene.session.waitingForThreshold = true;
      return ctx.answerCbQuery();
    })(ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞
    assertReplyContains(ctx, 'balance threshold');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞
    if (ctx.scene.session.waitingForThreshold !== true) {
      throw new Error('–§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answerCbQuery
    expect(ctx.answerCbQuery).toHaveBeenCalled();
    
    return {
      name: 'balanceNotifierScene: Change Threshold',
      category: TestCategory.All,
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return {
      name: 'balanceNotifierScene: Change Threshold',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function testBalanceNotifierScene_ThresholdInput(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞
    const { ctx } = createTestContext();
    ctx.scene.session.waitingForThreshold = true;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∏—Å–ª–æ–º
    ctx.message = {
      text: '25'
    } as any;
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await balanceNotifierScene.on('text', async (ctx) => {
      if (!ctx.scene.session.waitingForThreshold) return;
      
      const thresholdText = ctx.message.text.trim();
      const threshold = parseFloat(thresholdText);
      
      if (isNaN(threshold) || threshold <= 0) {
        await ctx.reply('‚ùå Please enter a positive number.');
        return;
      }
      
      if (!ctx.session.balanceNotifications) {
        ctx.session.balanceNotifications = { enabled: false, threshold: 10 };
      }
      
      ctx.session.balanceNotifications.threshold = threshold;
      ctx.scene.session.waitingForThreshold = false;
      
      return ctx.scene.reenter();
    })(ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä–æ–≥ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (ctx.session.balanceNotifications.threshold !== 25) {
      throw new Error(`–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 25, –Ω–æ threshold = ${ctx.session.balanceNotifications.threshold}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω
    if (ctx.scene.session.waitingForThreshold !== false) {
      throw new Error('–§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –Ω–µ —Å–±—Ä–æ—à–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω reenter –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    expect(ctx.scene.reenter).toHaveBeenCalled();
    
    return {
      name: 'balanceNotifierScene: Threshold Input',
      category: TestCategory.All,
      success: true,
      message: '–í–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return {
      name: 'balanceNotifierScene: Threshold Input',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
 */
export async function testBalanceNotifierScene_BackToMenu(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const { ctx } = createTestContext({
      callbackData: 'back_to_menu'
    });
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await balanceNotifierScene.callbackQuery('back_to_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.scene.leave();
      return ctx.scene.enter('menuScene');
    })(ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answerCbQuery
    expect(ctx.answerCbQuery).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    expect(ctx.scene.enter).toHaveBeenCalledWith('menuScene');
    
    return {
      name: 'balanceNotifierScene: Back To Menu',
      category: TestCategory.All,
      success: true,
      message: '–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:', error);
    return {
      name: 'balanceNotifierScene: Back To Menu',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
 */
export async function testBalanceNotifierScene_ExitCommands(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const { ctx } = createTestContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    ctx.message = {
      text: '/menu',
      entities: [{ type: 'bot_command', offset: 0, length: 5 }]
    } as any;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /menu
    await balanceNotifierScene.command(['start', 'menu', 'exit', 'cancel'], async (ctx) => {
      await ctx.scene.leave();
      return ctx.scene.enter('menuScene');
    })(ctx as any);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    expect(ctx.scene.enter).toHaveBeenCalledWith('menuScene');
    
    return {
      name: 'balanceNotifierScene: Exit Commands',
      category: TestCategory.All,
      success: true,
      message: '–ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞:', error);
    return {
      name: 'balanceNotifierScene: Exit Commands',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
 */
export async function runBalanceNotifierSceneTests(): Promise<TestResult[]> {
  const results: TestResult[] = [];
  
  results.push(await testBalanceNotifierScene_EnterScene());
  results.push(await testBalanceNotifierScene_ToggleNotifications());
  results.push(await testBalanceNotifierScene_ChangeThreshold());
  results.push(await testBalanceNotifierScene_ThresholdInput());
  results.push(await testBalanceNotifierScene_BackToMenu());
  results.push(await testBalanceNotifierScene_ExitCommands());
  
  return results;
} 