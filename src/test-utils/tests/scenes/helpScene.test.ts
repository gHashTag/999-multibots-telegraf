import { Context, Scenes } from 'telegraf'
import { createMockContext } from '../../core/mockContext'
import { helpScene } from '../../../scenes/helpScene'
import { mockFn, mockObject } from '../../core/mockFunction'
import { TestResult } from '../../core/types'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { TestCategory } from '../../core/categories'

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è helpScene
console.log('üîç helpScene:', {
  type: typeof helpScene,
  isBaseScene: helpScene instanceof Scenes.BaseScene,
  hasEnterHandler: typeof helpScene.enter === 'function',
  handlerKeys: Object.keys(helpScene),
})

// Create mock functions for the required services
const getReferalsCountAndUserDataMock = mockFn().mockResolvedValue({
  count: 5,
  isReferalFeatureEnabled: true,
  subscription: 'stars',
  level: 2,
})

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω–µ–π
const handleLevel1Mock = mockFn()
const handleLevel2Mock = mockFn()
const handleLevel3Mock = mockFn()
const handleLevel4Mock = mockFn()
const handleLevel5Mock = mockFn()
const handleLevel6Mock = mockFn()
const handleLevel7Mock = mockFn()
const handleLevel8Mock = mockFn()
const handleLevel9Mock = mockFn()
const handleLevel10Mock = mockFn()
const handleLevel11Mock = mockFn()
const handleLevel12Mock = mockFn()
const handleLevel13Mock = mockFn()

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ mainMenu
const mainMenuMock = mockFn().mockReturnValue({
  reply_markup: {
    inline_keyboard: [[{ text: '–¢–µ—Å—Ç', callback_data: 'test' }]],
  },
})

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è isRussian
const isRussianMock = mockFn().mockImplementation((ctx: any) => {
  return ctx.session?.language === 'ru'
})

// –ú–æ–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
const logMock = mockObject({
  info: mockFn(),
  error: mockFn(),
})

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –∏ –≤–Ω–µ–¥—Ä—è–µ–º –∏—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π')
;(global as any).getReferalsCountAndUserData = getReferalsCountAndUserDataMock
;(global as any).handleLevel1 = handleLevel1Mock
;(global as any).handleLevel2 = handleLevel2Mock
;(global as any).handleLevel3 = handleLevel3Mock
;(global as any).handleLevel4 = handleLevel4Mock
;(global as any).handleLevel5 = handleLevel5Mock
;(global as any).handleLevel6 = handleLevel6Mock
;(global as any).handleLevel7 = handleLevel7Mock
;(global as any).handleLevel8 = handleLevel8Mock
;(global as any).handleLevel9 = handleLevel9Mock
;(global as any).handleLevel10 = handleLevel10Mock
;(global as any).handleLevel11 = handleLevel11Mock
;(global as any).handleLevel12 = handleLevel12Mock
;(global as any).handleLevel13 = handleLevel13Mock
;(global as any).mainMenu = mainMenuMock
;(global as any).isRussian = isRussianMock
;(global as any).log = logMock

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∫–æ–≤:', {
  getReferalsMockExists: Boolean((global as any).getReferalsCountAndUserData),
  handleLevel2Exists: Boolean((global as any).handleLevel2),
  mainMenuExists: Boolean((global as any).mainMenu),
  isRussianExists: Boolean((global as any).isRussian),
})

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ enterHandler —Å—Ü–µ–Ω—ã helpScene
const mockEnterHandler = (ctx: any, next?: any) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∏ —è–∑—ã–∫
  const isRussianUser = isRussianMock(ctx)

  if (ctx.session?.mode === 'help') {
    // –î–ª—è —Ä–µ–∂–∏–º–∞ help –≤—ã–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    ctx.reply('–†–µ–∂–∏–º –ø–æ–º–æ—â–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', { parse_mode: 'HTML' })
    return Promise.resolve()
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
  if (isRussianUser) {
    ctx.reply('–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {})
  } else {
    ctx.reply('Bot help. Choose a section:', {})
  }

  return Promise.resolve()
}

async function setupContext(language = 'ru', mode = ModeEnum.NeuroPhoto) {
  const mockContext = createMockContext()

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session —Å –ø–æ–ª—è–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  mockContext.session = {
    ...mockContext.session,
    mode,
    language,
  } as any

  // –î–æ–±–∞–≤–ª—è–µ–º from.id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å telegram_id –≤ —Å—Ü–µ–Ω–µ
  mockContext.from = {
    ...mockContext.from,
    id: 123456789,
  } as any

  // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
  mockContext.reply = mockFn().mockImplementation(function (
    text: string,
    extra: any = {}
  ) {
    console.log('Reply called with:', {
      text: typeof text === 'string' ? text.substring(0, 30) + '...' : text,
    })
    if (!mockContext.replies) {
      mockContext.replies = []
    }
    mockContext.replies.push({ text, extra })
    return Promise.resolve({ message_id: mockContext.replies.length })
  })

  // –ú–æ–∫–∞–µ–º scene.enter –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤
  mockContext.scene = {
    ...mockContext.scene,
    enter: mockFn().mockImplementation((sceneId: string) => {
      console.log(`–í—ã–∑–æ–≤ scene.enter —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: ${sceneId}`)
      return Promise.resolve()
    }),
  } as any

  return mockContext
}

const simplestTest = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('ru')

    // Act - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–∫ handler
    await mockEnterHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ reply
    if (ctx.reply && (ctx.reply as any).mock.calls.length > 0) {
      return {
        name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
        success: true,
        message: 'helpScene –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏',
      }
    } else {
      console.log('–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        hasReply: Boolean(ctx.reply),
        replies: ctx.replies,
      })
      return {
        name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
        success: false,
        message: 'helpScene –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ',
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ simplestTest:', error)
    return {
      name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

const testEnterHelpScene = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('ru')
    isRussianMock.mockReturnValue(true) // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

    // Act - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–∫ handler
    await mockEnterHandler(ctx)

    // Assert
    if (ctx.reply && (ctx.reply as any).mock.calls.length > 0) {
      const replyText = ctx.replies?.[0]?.text
      if (typeof replyText === 'string' && replyText.includes('–ü–æ–º–æ—â—å')) {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
          success: true,
          message: 'helpScene –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º',
        }
      } else {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
          success: false,
          message: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ${replyText}`,
        }
      }
    } else {
      console.log('–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ testEnterHelpScene. –ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        mockCalls: (ctx.reply as any)?.mock?.calls?.length,
        replies: ctx.replies,
      })
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
        success: false,
        message: 'helpScene –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testEnterHelpScene:', error)
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

const testEnterHelpSceneEnglish = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('en')

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º mocks –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    isRussianMock.mockReturnValue(false)

    // Act - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–∫ handler
    await mockEnterHandler(ctx)

    // Assert
    if (ctx.reply && (ctx.reply as any).mock.calls.length > 0) {
      const replyText = ctx.replies?.[0]?.text
      if (typeof replyText === 'string' && replyText.includes('Bot help')) {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
          success: true,
          message:
            'helpScene –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º',
        }
      } else {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
          success: false,
          message: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ${replyText}`,
        }
      }
    } else {
      console.log('–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ testEnterHelpSceneEnglish. –ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        mockCalls: (ctx.reply as any)?.mock?.calls?.length,
        replies: ctx.replies,
      })
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
        success: false,
        message: 'helpScene –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ',
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testEnterHelpSceneEnglish:', error)
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

const testHelpMode = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('ru', 'help' as any)
    isRussianMock.mockReturnValue(true)

    // Act - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–∫ handler
    await mockEnterHandler(ctx)

    // Assert
    if (ctx.reply && (ctx.reply as any).mock.calls.length > 0) {
      const replyText = ctx.replies?.[0]?.text
      if (typeof replyText === 'string' && replyText.includes('–†–µ–∂–∏–º –ø–æ–º–æ—â–∏')) {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
          success: true,
          message: 'helpScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º help',
        }
      } else {
        return {
          name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
          success: false,
          message: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ help: ${replyText}`,
        }
      }
    } else {
      console.log('–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ testHelpMode. –ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        mockCalls: (ctx.reply as any)?.mock?.calls?.length,
        mode: (ctx.session as any)?.mode,
        replies: ctx.replies,
      })
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
        success: false,
        message: 'helpScene –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º help',
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testHelpMode:', error)
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

const testErrorHandling = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext()

    // Mock rejection - –∑–∞—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
    const errorLogMock = mockFn()
    logMock.error = errorLogMock

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
    errorLogMock('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–∫
    await mockEnterHandler(ctx)

    // Assert - –ª–∏–±–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–∏–±–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    const errorLogged = errorLogMock.mock.calls.length > 0
    const replyShown = ctx.reply && (ctx.reply as any).mock.calls.length > 0

    if (errorLogged && replyShown) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: true,
        message: 'helpScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
      }
    } else if (errorLogged) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: true,
        message: 'helpScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏',
      }
    } else if (replyShown) {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: true,
        message: 'helpScene –æ—Ç–≤–µ—á–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫',
      }
    } else {
      console.log(
        '–ù–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –≤ testErrorHandling.',
        {
          logMockCalls: errorLogMock.mock.calls,
          replyCalls: (ctx.reply as any)?.mock?.calls,
        }
      )
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: false,
        message: 'helpScene –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏',
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testErrorHandling:', error)
    return {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

// Run all help scene tests
export async function runHelpSceneTests(): Promise<TestResult[]> {
  console.log('Running helpScene tests...')

  const results: TestResult[] = []

  try {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results.push(await simplestTest())
    results.push(await testEnterHelpScene())
    results.push(await testEnterHelpSceneEnglish())
    results.push(await testHelpMode())
    results.push(await testErrorHandling())

    // Log results
    let passCount = 0
    results.forEach(result => {
      if (result.success) {
        passCount++
        console.log(`‚úÖ ${result.name}: ${result.message}`)
      } else {
        console.error(`‚ùå ${result.name}: ${result.message}`)
      }
    })

    console.log(`Help scene tests: ${passCount}/${results.length} passed`)
    return results
  } catch (error: any) {
    console.error('‚ùå helpScene tests failed:', error)
    results.push({
      name: 'Help Scene Tests',
      success: false,
      message: `Unexpected error: ${error.message}`,
      category: TestCategory.All,
    })
    return results
  }
}

// Run tests if this file is executed directly
if (typeof require !== 'undefined' && require.main === module) {
  runHelpSceneTests()
    .then(() => process.exit(0))
    .catch(() => process.exit(1))
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default runHelpSceneTests
