import { Context, Scenes } from 'telegraf';
import { createMockContext } from '../../core/mockContext';
import { helpScene } from '../../../scenes/helpScene';
import { mockFn, mockObject } from '../../core/mockFunction';
import { TestResult } from '../../core/types';
import { ModeEnum } from '@/price/helpers/modelsCost';
import { TestCategory } from '../../core/categories';

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è helpScene
console.log('üîç helpScene:', {
  type: typeof helpScene,
  isBaseScene: helpScene instanceof Scenes.BaseScene,
  hasEnterHandler: typeof helpScene.enter === 'function',
  handlerKeys: Object.keys(helpScene)
});

// Create mock functions for the required services
const getReferalsCountAndUserDataMock = mockFn().mockResolvedValue({
  count: 5,
  isReferalFeatureEnabled: true,
  subscription: 'stars',
  level: 2
});

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω–µ–π
const handleLevel1Mock = mockFn();
const handleLevel2Mock = mockFn();
const handleLevel3Mock = mockFn();
const handleLevel4Mock = mockFn();
const handleLevel5Mock = mockFn();
const handleLevel6Mock = mockFn();
const handleLevel7Mock = mockFn();
const handleLevel8Mock = mockFn();
const handleLevel9Mock = mockFn();
const handleLevel10Mock = mockFn();
const handleLevel11Mock = mockFn();
const handleLevel12Mock = mockFn();
const handleLevel13Mock = mockFn();

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ mainMenu
const mainMenuMock = mockFn().mockReturnValue({
  reply_markup: { inline_keyboard: [[{ text: '–¢–µ—Å—Ç', callback_data: 'test' }]] }
});

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è isRussian
const isRussianMock = mockFn().mockImplementation((ctx: any) => {
  return ctx.session.user?.language === 'ru';
});

// –ú–æ–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
const logMock = mockObject({
  info: mockFn(),
  error: mockFn()
});

// –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –∏ –≤–Ω–µ–¥—Ä—è–µ–º –∏—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
(global as any).getReferalsCountAndUserData = getReferalsCountAndUserDataMock;
(global as any).handleLevel1 = handleLevel1Mock;
(global as any).handleLevel2 = handleLevel2Mock;
(global as any).handleLevel3 = handleLevel3Mock;
(global as any).handleLevel4 = handleLevel4Mock;
(global as any).handleLevel5 = handleLevel5Mock;
(global as any).handleLevel6 = handleLevel6Mock;
(global as any).handleLevel7 = handleLevel7Mock;
(global as any).handleLevel8 = handleLevel8Mock;
(global as any).handleLevel9 = handleLevel9Mock;
(global as any).handleLevel10 = handleLevel10Mock;
(global as any).handleLevel11 = handleLevel11Mock;
(global as any).handleLevel12 = handleLevel12Mock;
(global as any).handleLevel13 = handleLevel13Mock;
(global as any).mainMenu = mainMenuMock;
(global as any).isRussian = isRussianMock;
(global as any).log = logMock;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∫–æ–≤:', {
  getReferalsMockExists: Boolean((global as any).getReferalsCountAndUserData),
  handleLevel2Exists: Boolean((global as any).handleLevel2),
  mainMenuExists: Boolean((global as any).mainMenu),
  isRussianExists: Boolean((global as any).isRussian)
});

// –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –º–æ–∫–∏ –≤ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
// –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π helpScene
jest.mock('../../../scenes/levelQuestWizard/handlers', () => ({
  handleLevel1: handleLevel1Mock,
  handleLevel2: handleLevel2Mock,
  handleLevel3: handleLevel3Mock,
  handleLevel4: handleLevel4Mock,
  handleLevel5: handleLevel5Mock,
  handleLevel6: handleLevel6Mock,
  handleLevel7: handleLevel7Mock,
  handleLevel8: handleLevel8Mock,
  handleLevel9: handleLevel9Mock,
  handleLevel10: handleLevel10Mock,
  handleLevel11: handleLevel11Mock,
  handleLevel12: handleLevel12Mock,
  handleLevel13: handleLevel13Mock
}));

jest.mock('@/menu', () => ({
  mainMenu: mainMenuMock
}));

jest.mock('@/helpers', () => ({
  isRussian: isRussianMock
}));

jest.mock('@/core/supabase', () => ({
  getReferalsCountAndUserData: getReferalsCountAndUserDataMock
}));

async function setupContext(language = 'ru', mode = ModeEnum.NeuroPhoto) {
  const mockContext = createMockContext();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session —Å –ø–æ–ª—è–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  mockContext.session = {
    ...mockContext.session,
    mode: mode,
    user: {
      language
    }
  } as any;

  // –î–æ–±–∞–≤–ª—è–µ–º from.id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å telegram_id –≤ —Å—Ü–µ–Ω–µ
  mockContext.from = {
    ...mockContext.from,
    id: 123456789
  } as any;
  
  // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
  mockContext.reply = mockFn().mockImplementation(function(text, extra) {
    if (!mockContext.replies) {
      mockContext.replies = [];
    }
    mockContext.replies.push({ text, extra });
    return Promise.resolve({ message_id: mockContext.replies.length });
  });
  
  // –ú–æ–∫–∞–µ–º scene.enter –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤
  mockContext.scene = {
    ...mockContext.scene,
    enter: mockFn().mockImplementation((sceneId) => {
      console.log(`–í—ã–∑–æ–≤ scene.enter —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: ${sceneId}`);
      return Promise.resolve();
    })
  } as any;

  return mockContext;
}

const simplestTest = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext();
    
    // Act
    await helpScene.enter(ctx as any);
    
    // Assert
    if ((ctx.reply as any).mock.calls.length > 0) {
      return { 
        name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
        success: true,
        message: 'helpScene –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏' 
      };
    } else {
      return {
        name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
        success: false,
        message: 'helpScene –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
      };
    }
  } catch (error) {
    return { 
      name: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç helpScene',
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error) 
    };
  }
};

const testEnterHelpScene = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('ru');
    ctx.session = {
      language: 'ru',
      balance: 0,
      isAdmin: false,
      __scenes: {} // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å session
    } as any;
    
    // Act
    await helpScene.enter(ctx as any);
    
    // Assert
    const replies = (ctx.replies || []) as any[];
    const hasHelpMessage = replies.some(reply => 
      typeof reply.text === 'string' && reply.text.includes('–ü–æ–º–æ—â—å')
    );
    
    if (hasHelpMessage) {
      return { 
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
        success: true,
        message: 'helpScene –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' 
      };
    } else {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
        success: false,
        message: 'helpScene –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
      };
    }
  } catch (error) {
    return { 
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (—Ä—É—Å—Å–∫–∏–π)',
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error) 
    };
  }
};

const testEnterHelpSceneEnglish = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('en');
    ctx.session = {
      language: 'en',
      balance: 0,
      isAdmin: false,
      __scenes: {} // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å session
    } as any;
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º mocks –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    isRussianMock.mockReturnValue(false);
    
    // Act
    await helpScene.enter(ctx as any);
    
    // Assert
    const replies = (ctx.replies || []) as any[];
    const hasHelpMessage = replies.some(reply => 
      typeof reply.text === 'string' && reply.text.includes('Help')
    );
    
    if (hasHelpMessage) {
      return { 
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
        success: true,
        message: 'helpScene –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ' 
      };
    } else {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
        success: false,
        message: 'helpScene –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
      };
    }
  } catch (error) {
    return { 
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error) 
    };
  }
};

const testHelpMode = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext('ru');
    ctx.session = {
      language: 'ru',
      balance: 0,
      isAdmin: false,
      __scenes: {}, // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å session
      mode: 'help'
    } as any;
    
    // Act
    await helpScene.enter(ctx as any);
    
    // Assert
    const replies = (ctx.replies || []) as any[];
    const hasHelpMessage = replies.some(reply => 
      typeof reply.text === 'string' && reply.text.includes('–ü–æ–º–æ—â—å')
    );
    
    if (hasHelpMessage) {
      return { 
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
        success: true,
        message: 'helpScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º help' 
      };
    } else {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
        success: false,
        message: 'helpScene –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º help'
      };
    }
  } catch (error) {
    return { 
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É helpScene —Å —Ä–µ–∂–∏–º–æ–º help',
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error) 
    };
  }
};

const testErrorHandling = async (): Promise<TestResult> => {
  try {
    // Arrange
    const ctx = await setupContext();
    
    // Mock rejection
    const tempMock = mockFn().mockRejectedValue(new Error('Test error'));
    const originalFn = (global as any).getReferalsCountAndUserData;
    (global as any).getReferalsCountAndUserData = tempMock;
    
    // Act
    await helpScene.enter(ctx as any);
    
    // Restore original mock
    (global as any).getReferalsCountAndUserData = originalFn;
    
    // Assert
    if (logMock.error.mock.calls.length > 0) {
      return { 
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: true,
        message: 'helpScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏' 
      };
    } else {
      return {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
        success: false,
        message: 'helpScene –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏'
      };
    }
  } catch (error) {
    return { 
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ helpScene',
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error) 
    };
  }
};

// Run all help scene tests
export async function runHelpSceneTests(): Promise<TestResult[]> {
  console.log('Running helpScene tests...');
  
  const results: TestResult[] = [];
  
  try {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results.push(await simplestTest());
    results.push(await testEnterHelpScene());
    results.push(await testEnterHelpSceneEnglish());
    results.push(await testHelpMode());
    results.push(await testErrorHandling());
    
    // Log results
    let passCount = 0;
    results.forEach(result => {
      if (result.success) {
        passCount++;
        console.log(`‚úÖ ${result.name}: ${result.message}`);
      } else {
        console.error(`‚ùå ${result.name}: ${result.message}`);
      }
    });
    
    console.log(`Help scene tests: ${passCount}/${results.length} passed`);
    return results;
  } catch (error: any) {
    console.error('‚ùå helpScene tests failed:', error);
    results.push({
      name: 'Help Scene Tests',
      success: false,
      message: `Unexpected error: ${error.message}`,
      category: TestCategory.All
    });
    return results;
  }
}

// Run tests if this file is executed directly
if (typeof require !== 'undefined' && require.main === module) {
  runHelpSceneTests()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default runHelpSceneTests; 