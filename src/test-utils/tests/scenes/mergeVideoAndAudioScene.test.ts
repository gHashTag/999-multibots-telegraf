import { TestResult } from '@/test-utils/core/types';
import { TestCategory } from '@/test-utils/core/categories';
import { expect } from '@/test-utils/core/testHelpers';
import { createMockWizardContext } from '@/test-utils/core/mockContext';
import { logger } from '@/utils/logger';
import mockApi from '@/test-utils/core/mock';

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
 */
async function testMergeVideoAndAudioScene_EnterScene(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ mergeVideoAndAudioScene.enter(ctx)
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp4');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    
    return {
      success: true,
      name: 'testMergeVideoAndAudioScene_EnterScene',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ'
    };
  } catch (error) {
    logger.error('Error in testMergeVideoAndAudioScene_EnterScene:', error);
    return {
      success: false,
      name: 'testMergeVideoAndAudioScene_EnterScene',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
 */
async function testMergeVideoAndAudioScene_UploadVideo(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç wizard —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    ctx.wizard = {
      ...ctx.wizard,
      state: {}
    };
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message —Å –≤–∏–¥–µ–æ
    (ctx as any).message = { 
      video: {
        file_id: 'video123',
        file_unique_id: 'video123unique',
        width: 1280,
        height: 720,
        duration: 30,
        file_name: 'video.mp4',
        mime_type: 'video/mp4',
        file_size: 2000000
      },
      message_id: 100,
      date: Date.now()
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –∏ getFileLink –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    const originalTelegram = ctx.telegram;
    ctx.telegram = {
      ...ctx.telegram,
      getFileLink: mockApi.create().mockResolvedValue('https://example.com/video.mp4')
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∏–¥–µ–æ
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3');
    await ctx.wizard.next();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    expect(ctx.wizard.state).toEqual({
      videoFileUrl: 'https://example.com/video.mp4',
      videoFileName: 'video.mp4'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    expect(ctx.wizard.next).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    ctx.telegram = originalTelegram;
    
    return {
      success: true,
      name: 'testMergeVideoAndAudioScene_UploadVideo',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ'
    };
  } catch (error) {
    logger.error('Error in testMergeVideoAndAudioScene_UploadVideo:', error);
    return {
      success: false,
      name: 'testMergeVideoAndAudioScene_UploadVideo',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
 */
async function testMergeVideoAndAudioScene_Leave(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockWizardContext();
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç from –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç session –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –∏ scene.leave –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    const originalLeave = ctx.scene.leave;
    ctx.scene.leave = mockApi.create().mockResolvedValue(true);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ');
    await ctx.scene.leave();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ctx.reply = originalReply;
    ctx.scene.leave = originalLeave;
    
    return {
      success: true,
      name: 'testMergeVideoAndAudioScene_Leave',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ'
    };
  } catch (error) {
    logger.error('Error in testMergeVideoAndAudioScene_Leave:', error);
    return {
      success: false,
      name: 'testMergeVideoAndAudioScene_Leave',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è mergeVideoAndAudioScene
 */
export default async function runMergeVideoAndAudioSceneTests(): Promise<TestResult[]> {
  logger.info('üß™ Running mergeVideoAndAudioScene tests...');
  
  const results: TestResult[] = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testFunctions = [
      testMergeVideoAndAudioScene_EnterScene,
      testMergeVideoAndAudioScene_UploadVideo,
      testMergeVideoAndAudioScene_Leave
    ];
    
    for (const testFn of testFunctions) {
      try {
        results.push(await testFn());
      } catch (error) {
        logger.error(`Error running ${testFn.name}:`, error);
        results.push({
          success: false,
          name: testFn.name,
          category: TestCategory.All,
          message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    }
  } catch (error) {
    logger.error('Error running mergeVideoAndAudioScene tests:', error);
    results.push({
      success: false,
      name: 'mergeVideoAndAudioSceneTests',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`
    });
  }
  
  return results;
} 