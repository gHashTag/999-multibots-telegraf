import { VercelRequest, VercelResponse } from '@vercel/node'
import { Scenes } from 'telegraf'
import {
  MockFunction,
  makeMockFunction,
  createMockContext,
  TestContext,
  assertHasCalled,
  assertMessageSent,
  assertCalledWith,
  assertMessageSentWith,
  logInfo,
  logError,
  TestResults,
  TestSuite,
  runTests,
} from '../../test-utils'
import { MyContext } from '@/interfaces/telegram-bot.interface'
import { getRuBillWizard } from '@/scenes/getRuBillWizard'
import * as helper from '@/scenes/getRuBillWizard/helper'
import * as supabaseModule from '@/core/supabase'
import * as coreModule from '@/core'
import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'

jest.mock('@/utils/logger')
jest.mock('@/inngest-functions/clients')

describe('getRuBillWizard', () => {
  // –ú–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  let mockIsRussian: MockFunction<typeof import('@/helpers').isRussian>
  let mockGetInvoiceId: MockFunction<typeof helper.getInvoiceId>
  let mockUpdateUserSubscription: MockFunction<typeof supabaseModule.updateUserSubscription>
  let mockCreatePayment: MockFunction<typeof supabaseModule.createPayment>
  let mockGetBotNameByToken: MockFunction<typeof coreModule.getBotNameByToken>
  let mockGenerateUniqueShortInvId: MockFunction<typeof helper.generateUniqueShortInvId>
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  let mockContext: TestContext
  
  beforeEach(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫–æ–≤
    mockIsRussian = makeMockFunction(jest.fn(() => true))
    mockGetInvoiceId = makeMockFunction(jest.fn(async () => 'https://test-invoice-url.com'))
    mockUpdateUserSubscription = makeMockFunction(jest.fn(async () => ({ success: true })))
    mockCreatePayment = makeMockFunction(jest.fn(async () => ({ success: true })))
    mockGetBotNameByToken = makeMockFunction(jest.fn(() => ({ bot_name: 'TestBot' })))
    mockGenerateUniqueShortInvId = makeMockFunction(jest.fn(async () => 12345))
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    mockContext = createMockContext({
      from: { 
        id: 123456789, 
        is_bot: false, 
        first_name: 'Test',
        username: 'testuser'
      },
      session: {
        selectedPayment: {
          amount: 1000,
          subscription: 'neurophoto'
        },
        email: 'test@example.com'
      }
    })
    
    // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    jest.spyOn(helper, 'getInvoiceId').mockImplementation(mockGetInvoiceId)
    jest.spyOn(helper, 'generateUniqueShortInvId').mockImplementation(mockGenerateUniqueShortInvId)
    jest.spyOn(supabaseModule, 'updateUserSubscription').mockImplementation(mockUpdateUserSubscription)
    jest.spyOn(supabaseModule, 'createPayment').mockImplementation(mockCreatePayment)
    jest.spyOn(coreModule, 'getBotNameByToken').mockImplementation(mockGetBotNameByToken)
    jest.spyOn(require('@/helpers'), 'isRussian').mockImplementation(mockIsRussian)
  })
  
  afterEach(() => {
    jest.clearAllMocks()
  })
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  const getRuBillWizardTests: TestSuite = {
    testGenerateInvoiceStep_Success: async function(): Promise<TestResults> {
      logInfo('üìù –¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞')
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º enterHandler –∏–∑ —Å—Ü–µ–Ω—ã
        const wizardHandler = getRuBillWizard.middleware()[0]
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await wizardHandler(mockContext as any, async () => {})
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω—ã –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        assertHasCalled(mockIsRussian)
        assertHasCalled(mockGenerateUniqueShortInvId)
        assertHasCalled(mockGetInvoiceId)
        assertHasCalled(mockCreatePayment)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å—á–µ—Ç
        assertMessageSentWith(mockContext, 'https://test-invoice-url.com')
        
        return {
          name: 'testGenerateInvoiceStep_Success',
          category: 'getRuBillWizard',
          success: true,
          message: '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
        }
      } catch (error) {
        logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`)
        return {
          name: 'testGenerateInvoiceStep_Success',
          category: 'getRuBillWizard',
          success: false,
          message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
        }
      }
    },
    
    testGenerateInvoiceStep_MissingPayment: async function(): Promise<TestResults> {
      logInfo('üìù –¢–µ—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        const contextWithoutPayment = createMockContext({
          from: { 
            id: 123456789, 
            is_bot: false, 
            first_name: 'Test',
            username: 'testuser'
          },
          session: {
            selectedPayment: undefined,
            email: 'test@example.com'
          }
        })
        
        // –ü–æ–ª—É—á–∞–µ–º enterHandler –∏–∑ —Å—Ü–µ–Ω—ã
        const wizardHandler = getRuBillWizard.middleware()[0]
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await wizardHandler(contextWithoutPayment as any, async () => {})
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        assertCalledWith(logger.error, '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
        
        return {
          name: 'testGenerateInvoiceStep_MissingPayment',
          category: 'getRuBillWizard',
          success: true,
          message: '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã'
        }
      } catch (error) {
        logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`)
        return {
          name: 'testGenerateInvoiceStep_MissingPayment',
          category: 'getRuBillWizard',
          success: false,
          message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
        }
      }
    },
    
    testGenerateInvoiceStep_InvoiceError: async function(): Promise<TestResults> {
      logInfo('üìù –¢–µ—Å—Ç: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞')
      
      try {
        // –ó–∞–º–µ–Ω—è–µ–º –º–æ–∫ –Ω–∞ –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
        mockGetInvoiceId.mockImplementation(async () => {
          throw new Error('Invoice generation failed')
        })
        
        // –ü–æ–ª—É—á–∞–µ–º enterHandler –∏–∑ —Å—Ü–µ–Ω—ã
        const wizardHandler = getRuBillWizard.middleware()[0]
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await wizardHandler(mockContext as any, async () => {})
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        assertCalledWith(logger.error, expect.stringContaining('Invoice generation failed'))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assertMessageSentWith(mockContext, expect.stringContaining('–æ—à–∏–±–∫–∞'))
        
        return {
          name: 'testGenerateInvoiceStep_InvoiceError',
          category: 'getRuBillWizard',
          success: true,
          message: '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞'
        }
      } catch (error) {
        logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`)
        return {
          name: 'testGenerateInvoiceStep_InvoiceError',
          category: 'getRuBillWizard',
          success: false,
          message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
        }
      }
    },
    
    testGenerateInvoiceStep_MissingUserId: async function(): Promise<TestResults> {
      logInfo('üìù –¢–µ—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const contextWithoutUserId = createMockContext({
          from: undefined,
          session: {
            selectedPayment: {
              amount: 1000,
              subscription: 'neurophoto'
            },
            email: 'test@example.com'
          }
        })
        
        // –ü–æ–ª—É—á–∞–µ–º enterHandler –∏–∑ —Å—Ü–µ–Ω—ã
        const wizardHandler = getRuBillWizard.middleware()[0]
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await wizardHandler(contextWithoutUserId as any, async () => {})
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        assertCalledWith(logger.error, expect.stringContaining('User ID not found'))
        
        return {
          name: 'testGenerateInvoiceStep_MissingUserId',
          category: 'getRuBillWizard',
          success: true,
          message: '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
      } catch (error) {
        logError(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`)
        return {
          name: 'testGenerateInvoiceStep_MissingUserId',
          category: 'getRuBillWizard',
          success: false,
          message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`
        }
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  it('–≤—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async () => {
    const results = await runTests(getRuBillWizardTests)
    expect(results.every(result => result.success)).toBe(true)
  })
}) 