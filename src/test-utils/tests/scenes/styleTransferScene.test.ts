import { Scenes } from 'telegraf'
import { Update } from 'telegraf/typings/core/types/typegram'
import { MyContext } from '@/interfaces'
import { createMockContext } from '@/test-utils/telegraf-mocks'
import { MockFunction, invokeHandler } from '@/test-utils/mocks'
import { TestResult, TestCategory } from '@/test-utils/types'
import { styleTransferScene } from '@/scenes/styleTransferScene'
import * as languageModule from '@/helpers/language'
import * as styleTransferModule from '@/services/styleTransfer'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestContext extends MyContext {
  scene: {
    enter: MockFunction
    leave: MockFunction
    reenter: MockFunction
  }
  reply: MockFunction
  replyWithPhoto: MockFunction
  replyWithMarkdown: MockFunction
  replies?: Array<{ text?: string; photo?: string; extra?: any }>
  session: {
    styleTransfer?: {
      sourceImage?: string
      styleImage?: string
      strength?: number
    }
    [key: string]: any
  }
  from?: {
    id: number
    language_code?: string
  }
  message?: {
    text?: string
    message_id?: number
    photo?: Array<{
      file_id: string
      file_unique_id: string
      width: number
      height: number
      file_size?: number
    }>
  }
  wizard?: {
    next: MockFunction
    back: MockFunction
    selectStep: MockFunction
    cursor: number
  }
  telegram: {
    getFile: MockFunction
    getFileLink: MockFunction
  }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 12345678
const TEST_FILE_ID = 'test-file-id-123456'
const TEST_FILE_PATH = 'photos/test-image.jpg'
const TEST_PHOTO_URL = `https://api.telegram.org/file/bot123456:ABC-DEF/photos/test-image.jpg`
const TEST_RESULT_URL = 'https://example.com/result-image.jpg'

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function setupContext(params: {
  language?: string
  messageText?: string
  hasPhoto?: boolean
  step?: number
  sourceImage?: string
  styleImage?: string
  strength?: number
}): TestContext {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
  const isRussian = params.language !== 'en'
  jest.spyOn(languageModule, 'isRussian').mockReturnValue(isRussian)

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const ctx = createMockContext() as TestContext

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å—Ü–µ–Ω—ã
  ctx.scene.enter = jest.fn().mockResolvedValue(true)
  ctx.scene.leave = jest.fn().mockResolvedValue(true)
  ctx.scene.reenter = jest.fn().mockResolvedValue(true)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –º–µ—Ç–æ–¥–æ–≤
  ctx.telegram = {
    getFile: jest.fn().mockResolvedValue({ file_path: TEST_FILE_PATH }),
    getFileLink: jest.fn().mockResolvedValue(TEST_PHOTO_URL),
  } as any

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ reply –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  ctx.reply = jest.fn().mockImplementation((text: string, extra?: any) => {
    console.log(`[–ú–æ–∫] reply –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}`)
    if (!ctx.replies) {
      ctx.replies = []
    }
    ctx.replies.push({ text, extra })
    return true
  })

  ctx.replyWithPhoto = jest
    .fn()
    .mockImplementation((photo: string, extra?: any) => {
      console.log(`[–ú–æ–∫] replyWithPhoto –≤—ã–∑–≤–∞–Ω —Å —Ñ–æ—Ç–æ: ${photo}`)
      if (!ctx.replies) {
        ctx.replies = []
      }
      ctx.replies.push({ photo, extra })
      return true
    })

  ctx.replyWithMarkdown = jest
    .fn()
    .mockImplementation((text: string, extra?: any) => {
      console.log(`[–ú–æ–∫] replyWithMarkdown –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}`)
      if (!ctx.replies) {
        ctx.replies = []
      }
      ctx.replies.push({ text, extra })
      return true
    })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ session
  ctx.session = {}

  if (!ctx.session.styleTransfer) {
    ctx.session.styleTransfer = {}
  }

  if (params.sourceImage) {
    ctx.session.styleTransfer.sourceImage = params.sourceImage
  }

  if (params.styleImage) {
    ctx.session.styleTransfer.styleImage = params.styleImage
  }

  if (params.strength !== undefined) {
    ctx.session.styleTransfer.strength = params.strength
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ from
  ctx.from = {
    id: TEST_USER_ID,
    language_code: params.language === 'en' ? 'en' : 'ru',
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ message
  ctx.message = {
    message_id: 1,
  }

  if (params.messageText) {
    ctx.message.text = params.messageText
  }

  if (params.hasPhoto) {
    ctx.message.photo = [
      {
        file_id: 'small-' + TEST_FILE_ID,
        file_unique_id: 'unique-small',
        width: 100,
        height: 100,
        file_size: 1024,
      },
      {
        file_id: TEST_FILE_ID,
        file_unique_id: 'unique-id',
        width: 800,
        height: 600,
        file_size: 102400,
      },
    ]
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ wizard
  if (params.step !== undefined) {
    ctx.wizard = {
      next: jest.fn().mockReturnValue(undefined),
      back: jest.fn().mockReturnValue(undefined),
      selectStep: jest.fn().mockReturnValue(undefined),
      cursor: params.step,
    }
  }

  // –ú–æ–∫ –¥–ª—è styleTransfer
  jest.spyOn(styleTransferModule, 'applyStyleTransfer').mockResolvedValue({
    success: true,
    resultUrl: TEST_RESULT_URL,
  })

  return ctx
}

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É Style Transfer (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testStyleTransferScene_Enter(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_Enter')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({ language: 'ru' })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞
    await invokeHandler(styleTransferScene.enterHandler, ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (!ctx.session.styleTransfer) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (RU)',
        category: TestCategory.SCENE,
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      }
    }

    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (RU)',
      category: TestCategory.SCENE,
      success: true,
      message:
        '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_Enter:', error)
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (RU)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É Style Transfer (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)
 */
async function testStyleTransferScene_EnterEnglish(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_EnterEnglish')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({ language: 'en' })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞
    await invokeHandler(styleTransferScene.enterHandler, ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (EN)',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('Send the image')) {
      return {
        name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (EN)',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (EN)',
      category: TestCategory.SCENE,
      success: true,
      message:
        '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_EnterEnglish:', error)
    return {
      name: '–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Style Transfer (EN)',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function testStyleTransferScene_UploadSourceImage(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_UploadSourceImage')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      hasPhoto: true,
      step: 0,
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[0], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.telegram.getFile.mock.calls.length === 0) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ telegram.getFile –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    if (!ctx.session.styleTransfer?.sourceImage) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏',
      }
    }

    if (ctx.session.styleTransfer.sourceImage !== TEST_PHOTO_URL) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${ctx.session.styleTransfer.sourceImage}`,
      }
    }

    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('—Å—Ç–∏–ª—å')) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    if (!ctx.wizard?.next.mock.calls.length) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    return {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_UploadSourceImage:', error)
    return {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–µ—Ç —Ñ–æ—Ç–æ
 */
async function testStyleTransferScene_NoSourceImage(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_NoSourceImage')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      hasPhoto: false,
      messageText: '–≠—Ç–æ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ñ–æ—Ç–æ',
      step: 0,
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[0], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (
      !replyText ||
      (!replyText.includes('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') &&
        !replyText.includes('—Ñ–æ—Ç–æ'))
    ) {
      return {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    if (ctx.wizard?.next.mock.calls.length > 0) {
      return {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ',
      }
    }

    return {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_NoSourceImage:', error)
    return {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è
 */
async function testStyleTransferScene_UploadStyleImage(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_UploadStyleImage')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      hasPhoto: true,
      step: 1,
      sourceImage: TEST_PHOTO_URL,
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[1], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.telegram.getFile.mock.calls.length === 0) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ telegram.getFile –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    if (!ctx.session.styleTransfer?.styleImage) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏',
      }
    }

    if (ctx.session.styleTransfer.styleImage !== TEST_PHOTO_URL) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${ctx.session.styleTransfer.styleImage}`,
      }
    }

    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('—Å–∏–ª—É')) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    if (!ctx.wizard?.next.mock.calls.length) {
      return {
        name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ wizard.next –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    return {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_UploadStyleImage:', error)
    return {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ - –≤—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞
 */
async function testStyleTransferScene_SelectStrength(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_SelectStrength')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '75',
      step: 2,
      sourceImage: TEST_PHOTO_URL,
      styleImage: TEST_PHOTO_URL,
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[2], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!ctx.session.styleTransfer?.strength) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–°–∏–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏',
      }
    }

    if (ctx.session.styleTransfer.strength !== 75) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞: ${ctx.session.styleTransfer.strength}`,
      }
    }

    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('–û–±—Ä–∞–±–æ—Ç–∫–∞')) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    if (styleTransferModule.applyStyleTransfer.mock.calls.length === 0) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ applyStyleTransfer –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const styleTransferArgs =
      styleTransferModule.applyStyleTransfer.mock.calls[0]
    if (
      !styleTransferArgs ||
      styleTransferArgs[0] !== TEST_PHOTO_URL ||
      styleTransferArgs[1] !== TEST_PHOTO_URL ||
      styleTransferArgs[2] !== 75
    ) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ applyStyleTransfer: ${JSON.stringify(styleTransferArgs)}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultSent = false
    for (const reply of ctx.replies || []) {
      if (reply.photo === TEST_RESULT_URL) {
        resultSent = true
        break
      }
    }

    if (!resultSent) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç',
      }
    }

    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    return {
      name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      category: TestCategory.SCENE,
      success: true,
      message:
        '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_SelectStrength:', error)
    return {
      name: '–í—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞
 */
async function testStyleTransferScene_InvalidStrength(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_InvalidStrength')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '—Å–∏–ª—å–Ω–æ',
      step: 2,
      sourceImage: TEST_PHOTO_URL,
      styleImage: TEST_PHOTO_URL,
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[2], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    const replyText = ctx.replies?.[0]?.text
    if (!replyText || !replyText.includes('—á–∏—Å–ª')) {
      return {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: `–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${replyText}`,
      }
    }

    if (styleTransferModule.applyStyleTransfer.mock.calls.length > 0) {
      return {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message:
          '–ú–µ—Ç–æ–¥ applyStyleTransfer –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥',
      }
    }

    if (ctx.scene.leave.mock.calls.length > 0) {
      return {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥',
      }
    }

    return {
      name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_InvalidStrength:', error)
    return {
      name: '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–∏–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è
 */
async function testStyleTransferScene_StyleTransferError(): Promise<TestResult> {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: testStyleTransferScene_StyleTransferError')

  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const ctx = setupContext({
      language: 'ru',
      messageText: '75',
      step: 2,
      sourceImage: TEST_PHOTO_URL,
      styleImage: TEST_PHOTO_URL,
    })

    // –ú–æ–∫ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è
    jest.spyOn(styleTransferModule, 'applyStyleTransfer').mockResolvedValue({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    })

    // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞
    await invokeHandler(styleTransferScene.stepHandlers[2], ctx as any)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (ctx.reply.mock.calls.length === 0) {
      return {
        name: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    let errorMessageSent = false
    for (const reply of ctx.replies || []) {
      if (
        reply.text &&
        (reply.text.includes('–æ—à–∏–±–∫–∞') || reply.text.includes('–û—à–∏–±–∫–∞'))
      ) {
        errorMessageSent = true
        break
      }
    }

    if (!errorMessageSent) {
      return {
        name: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      }
    }

    if (!ctx.scene.leave.mock.calls.length) {
      return {
        name: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
        category: TestCategory.SCENE,
        success: false,
        message: '–ú–µ—Ç–æ–¥ scene.leave –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω',
      }
    }

    return {
      name: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
      category: TestCategory.SCENE,
      success: true,
      message: '–°—Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ testStyleTransferScene_StyleTransferError:', error)
    return {
      name: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è',
      category: TestCategory.SCENE,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω—ã styleTransferScene
 */
export async function runStyleTransferSceneTests(): Promise<TestResult[]> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è styleTransferScene')

  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results.push(await testStyleTransferScene_Enter())
    results.push(await testStyleTransferScene_EnterEnglish())
    results.push(await testStyleTransferScene_UploadSourceImage())
    results.push(await testStyleTransferScene_NoSourceImage())
    results.push(await testStyleTransferScene_UploadStyleImage())
    results.push(await testStyleTransferScene_SelectStrength())
    results.push(await testStyleTransferScene_InvalidStrength())
    results.push(await testStyleTransferScene_StyleTransferError())

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const successCount = results.filter(r => r.success).length
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length} —Ç–µ—Å—Ç–æ–≤`)

    results
      .filter(r => !r.success)
      .forEach(r => {
        console.error(`‚ùå –¢–µ—Å—Ç "${r.name}" –Ω–µ –ø—Ä–æ—à–µ–ª: ${r.message}`)
        if (r.error) console.error(`   –û—à–∏–±–∫–∞: ${r.error}`)
      })

    return results
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error)
    results.push({
      name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ styleTransferScene',
      category: TestCategory.SCENE,
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      error: error instanceof Error ? error.message : String(error),
    })

    return results
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
export default runStyleTransferSceneTests
