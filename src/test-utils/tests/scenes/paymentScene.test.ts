import { MyContext } from '@/interfaces'
import { createMockContext } from '../../core/mockContext'
import { TestResult } from '../../core/types'
import {
  assertReplyContains,
  assertReplyMarkupContains,
} from '../../core/assertions'
import { create as mockFunction } from '../../core/mock'
import { TestCategory } from '../../core/categories'
import { logger } from '@/utils/logger'
import { createPendingPayment } from '@/core/supabase/createPendingPayment'
import { handleSelectStars } from '@/handlers/handleSelectStars'
import { handleBuySubscription } from '@/handlers/handleBuySubscription'
import { generateUniqueShortInvId } from '@/scenes/getRuBillWizard/helper'
import { runTest, expect as testExpect } from '../../core/testHelpers'

// –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const mockedCreatePendingPayment = mockFunction<typeof createPendingPayment>()
const mockedHandleSelectStars = mockFunction<typeof handleSelectStars>()
const mockedHandleBuySubscription = mockFunction<typeof handleBuySubscription>()
const mockedGenerateUniqueShortInvId =
  mockFunction<typeof generateUniqueShortInvId>()

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 123456789
const TEST_USERNAME = 'test_user'
const TEST_AMOUNT = 100
const TEST_STARS = 50
const TEST_INVOICE_URL = 'https://test-payment-url.com/invoice/12345'
const TEST_INV_ID = '12345'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
 */
function setupTest() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
  mockedCreatePendingPayment.mockReturnValue(Promise.resolve())
  mockedHandleSelectStars.mockReturnValue(Promise.resolve())
  mockedHandleBuySubscription.mockReturnValue(Promise.resolve())
  mockedGenerateUniqueShortInvId.mockReturnValue(
    Promise.resolve(Number(TEST_INV_ID))
  )

  // –°–±—Ä–æ—Å –º–æ–∫–æ–≤ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  mockedCreatePendingPayment.mockClear()
  mockedHandleSelectStars.mockClear()
  mockedHandleBuySubscription.mockClear()
  mockedGenerateUniqueShortInvId.mockClear()

  // –ú–æ–∫–∏—Ä—É–µ–º env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  process.env.MERCHANT_LOGIN = 'test_merchant'
  process.env.PASSWORD1 = 'test_password'
  process.env.TEST_PASSWORD1 = 'test_password_test'

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
  logger.info('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è paymentScene –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', {
    mocksSetup: true,
    envVariables: {
      MERCHANT_LOGIN: !!process.env.MERCHANT_LOGIN,
      PASSWORD1: !!process.env.PASSWORD1,
    },
  })

  return {
    mockedCreatePendingPayment,
    mockedHandleSelectStars,
    mockedHandleBuySubscription,
    mockedGenerateUniqueShortInvId,
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
export async function testPaymentSceneEnter(): Promise<TestResult> {
  return runTest(
    async () => {
      const mocks = setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {}

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit('enter', ctx as unknown as MyContext)

      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      assertReplyContains(ctx, '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?')
      assertReplyMarkupContains(ctx, '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏')
      assertReplyMarkupContains(ctx, 'üí≥ –†—É–±–ª—è–º–∏')
      assertReplyMarkupContains(ctx, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      testExpect(mocks.mockedCreatePendingPayment).not.toHaveBeenCalled()

      return {
        message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: Enter –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º
 */
export async function testPaymentSceneEnterWithSelectedPayment(): Promise<TestResult> {
  return runTest(
    async () => {
      const mocks = setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.botInfo = { username: 'test_bot' } as any
      ctx.session = {
        selectedPayment: {
          amount: TEST_AMOUNT,
          stars: TEST_STARS,
          subscription: 'stars',
        },
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit('enter', ctx as unknown as MyContext)

      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      assertReplyContains(ctx, '–û–ø–ª–∞—Ç–∞')
      assertReplyContains(ctx, TEST_AMOUNT.toString())

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      testExpect(mocks.mockedCreatePendingPayment).toHaveBeenCalled()

      return {
        message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: Enter —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
 */
export async function testPaymentScenePayWithStars(): Promise<TestResult> {
  return runTest(
    async () => {
      const mocks = setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {}
      ctx.message = { text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' } as any

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit(
        'text',
        ctx as unknown as MyContext,
        {},
        '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏'
      )

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
      testExpect(mocks.mockedHandleSelectStars).toHaveBeenCalled()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—ã –ø–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É
      testExpect(ctx.scene.leave).toHaveBeenCalled()

      return {
        message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
 */
export async function testPaymentScenePayWithStarsSubscription(): Promise<TestResult> {
  return runTest(
    async () => {
      const mocks = setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {
        subscription: 'neurophoto',
      }
      ctx.message = { text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' } as any

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit(
        'text',
        ctx as unknown as MyContext,
        {},
        '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏'
      )

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      testExpect(mocks.mockedHandleBuySubscription).toHaveBeenCalled()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—ã –ø–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É
      testExpect(ctx.scene.leave).toHaveBeenCalled()

      return {
        message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏
 */
export async function testPaymentScenePayWithRubles(): Promise<TestResult> {
  return runTest(
    async () => {
      setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {
        subscription: 'neurophoto',
      }
      ctx.message = { text: 'üí≥ –†—É–±–ª—è–º–∏' } as any

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit(
        'text',
        ctx as unknown as MyContext,
        {},
        'üí≥ –†—É–±–ª—è–º–∏'
      )

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É getRuBillWizard
      testExpect(ctx.scene.enter).toHaveBeenCalledWith('getRuBillWizard')

      return {
        message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function testPaymentScenePayWithRublesNoSubscription(): Promise<TestResult> {
  return runTest(
    async () => {
      setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {}
      ctx.message = { text: 'üí≥ –†—É–±–ª—è–º–∏' } as any

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit(
        'text',
        ctx as unknown as MyContext,
        {},
        'üí≥ –†—É–±–ª—è–º–∏'
      )

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É getRuBillWizard
      testExpect(ctx.scene.enter).toHaveBeenCalledWith('getRuBillWizard')

      return {
        message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
export async function testPaymentSceneBackToMainMenu(): Promise<TestResult> {
  return runTest(
    async () => {
      setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.session = {}
      ctx.message = { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' } as any

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit(
        'text',
        ctx as unknown as MyContext,
        {},
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
      )

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      testExpect(ctx.scene.enter).toHaveBeenCalledWith('menuScene')

      return {
        message: '–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export async function testPaymentSceneHandleCreatePaymentError(): Promise<TestResult> {
  return runTest(
    async () => {
      const mocks = setupTest()

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
      mocks.mockedCreatePendingPayment.mockImplementation(() => {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞')
      })

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'ru',
      }
      ctx.botInfo = { username: 'test_bot' } as any
      ctx.session = {
        selectedPayment: {
          amount: TEST_AMOUNT,
          stars: TEST_STARS,
          subscription: 'stars',
        },
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene

      try {
        await paymentScene.emit('enter', ctx as unknown as MyContext)
      } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
        testExpect(mocks.mockedCreatePendingPayment).toHaveBeenCalled()

        return {
          message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        }
      }

      return {
        message: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
      }
    },
    {
      name: 'paymentScene: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export async function testPaymentSceneEnglishLocalization(): Promise<TestResult> {
  return runTest(
    async () => {
      setupTest()

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º
      const ctx = createMockContext()
      ctx.from = {
        id: TEST_USER_ID,
        is_bot: false,
        first_name: 'Test',
        username: TEST_USERNAME,
        language_code: 'en',
      }
      ctx.session = {}

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
      const paymentScene = (await import('@/scenes/paymentScene')).paymentScene
      await paymentScene.emit('enter', ctx as unknown as MyContext)

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
      assertReplyContains(ctx, 'How would you like to pay?')
      assertReplyMarkupContains(ctx, '‚≠êÔ∏è Stars')
      assertReplyMarkupContains(ctx, 'üí≥ Rubles')
      assertReplyMarkupContains(ctx, 'üè† Main Menu')

      return {
        message: '–¢–µ—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      }
    },
    {
      name: 'paymentScene: –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
      category: TestCategory.Payment,
    }
  )
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
 */
export async function runPaymentSceneTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  try {
    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    results.push(await testPaymentSceneEnter())
    results.push(await testPaymentSceneEnterWithSelectedPayment())
    results.push(await testPaymentScenePayWithStars())
    results.push(await testPaymentScenePayWithStarsSubscription())
    results.push(await testPaymentScenePayWithRubles())
    results.push(await testPaymentScenePayWithRublesNoSubscription())
    results.push(await testPaymentSceneBackToMainMenu())
    results.push(await testPaymentSceneHandleCreatePaymentError())
    results.push(await testPaymentSceneEnglishLocalization())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ paymentScene:', error)
    results.push({
      name: 'paymentScene: –û–±—â–∞—è –æ—à–∏–±–∫–∞',
      category: TestCategory.Payment,
      success: false,
      message: String(error),
    })
  }

  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
  const successCount = results.filter(r => r.success).length
  const failCount = results.length - successCount

  logger.info(
    `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è paymentScene: –í—Å–µ–≥–æ ${results.length}, –£—Å–ø–µ—Ö: ${successCount}, –û—à–∏–±–∫–∏: ${failCount}`
  )

  return results
}

export default runPaymentSceneTests
