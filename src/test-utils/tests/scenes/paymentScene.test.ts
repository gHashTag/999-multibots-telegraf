import { MyContext } from '@/interfaces';
import { createMockContext } from '../../core/mockContext';
import { TestResult } from '../../core/types';
import { assertReplyContains, assertReplyMarkupContains } from '../../core/assertions';
import { create as mockFunction } from '../../core/mock';
import { TestCategory } from '../../core/categories';
import { logger } from '@/utils/logger';
import { createPendingPayment } from '@/core/supabase/createPendingPayment';
import { handleSelectStars } from '@/handlers/handleSelectStars';
import { handleBuySubscription } from '@/handlers/handleBuySubscription';
import { generateUniqueShortInvId } from '@/scenes/getRuBillWizard/helper';

// –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const mockedCreatePendingPayment = mockFunction<typeof createPendingPayment>();
const mockedHandleSelectStars = mockFunction<typeof handleSelectStars>();
const mockedHandleBuySubscription = mockFunction<typeof handleBuySubscription>();
const mockedGenerateUniqueShortInvId = mockFunction<typeof generateUniqueShortInvId>();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER_ID = 123456789;
const TEST_USERNAME = 'test_user';
const TEST_AMOUNT = 100;
const TEST_STARS = 50;
const TEST_INVOICE_URL = 'https://test-payment-url.com/invoice/12345';
const TEST_INV_ID = '12345';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
 */
function setupTest() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
  mockedCreatePendingPayment.mockReturnValue(Promise.resolve());
  mockedHandleSelectStars.mockReturnValue(Promise.resolve());
  mockedHandleBuySubscription.mockReturnValue(Promise.resolve());
  mockedGenerateUniqueShortInvId.mockReturnValue(Promise.resolve(TEST_INV_ID));
  
  // –°–±—Ä–æ—Å –º–æ–∫–æ–≤ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  mockedCreatePendingPayment.mockClear();
  mockedHandleSelectStars.mockClear();
  mockedHandleBuySubscription.mockClear();
  mockedGenerateUniqueShortInvId.mockClear();
  
  // –ú–æ–∫–∏—Ä—É–µ–º env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  process.env.MERCHANT_LOGIN = 'test_merchant';
  process.env.PASSWORD1 = 'test_password';
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
export async function testPaymentSceneEnter(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.session = {};
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('enter', ctx as unknown as MyContext);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    assertReplyContains(ctx, '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?');
    assertReplyMarkupContains(ctx, '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏');
    assertReplyMarkupContains(ctx, 'üí≥ –†—É–±–ª—è–º–∏');
    assertReplyMarkupContains(ctx, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    
    return {
      name: 'paymentScene: Enter –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É:', error);
    return {
      name: 'paymentScene: Enter –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º
 */
export async function testPaymentSceneEnterWithSelectedPayment(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.botInfo = { username: 'test_bot' } as any;
    ctx.session = {
      selectedPayment: {
        amount: TEST_AMOUNT,
        stars: TEST_STARS,
        subscription: 'stars'
      }
    };
    
    // –ü–∞—Ç—á–∏–º md5 –∏ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const md5Mock = jest.fn().mockReturnValue('test_hash');
    jest.doMock('md5', () => md5Mock);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('enter', ctx as unknown as MyContext);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    assertReplyContains(ctx, '–û–ø–ª–∞—Ç–∞');
    assertReplyContains(ctx, TEST_AMOUNT.toString());
    expect(mockedCreatePendingPayment).toHaveBeenCalled();
    
    return {
      name: 'paymentScene: Enter —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º:', error);
    return {
      name: 'paymentScene: Enter —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
 */
export async function testPaymentScenePayWithStars(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.session = {};
    ctx.message = { text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' } as any;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('text', ctx as unknown as MyContext, {}, '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(mockedHandleSelectStars).toHaveBeenCalled();
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏:', error);
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
 */
export async function testPaymentScenePayWithStarsSubscription(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.session = {
      subscription: 'neurophoto'
    };
    ctx.message = { text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' } as any;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('text', ctx as unknown as MyContext, {}, '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(mockedHandleBuySubscription).toHaveBeenCalled();
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:', error);
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏
 */
export async function testPaymentScenePayWithRubles(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.botInfo = { username: 'test_bot' } as any;
    ctx.session = {
      subscription: 'neurophoto'
    };
    ctx.message = { text: 'üí≥ –†—É–±–ª—è–º–∏' } as any;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('text', ctx as unknown as MyContext, {}, 'üí≥ –†—É–±–ª—è–º–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(mockedCreatePendingPayment).toHaveBeenCalled();
    expect(mockedGenerateUniqueShortInvId).toHaveBeenCalled();
    assertReplyContains(ctx, '–û–ø–ª–∞—Ç–∞');
    expect(ctx.scene.leave).toHaveBeenCalled();
    
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏:', error);
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function testPaymentScenePayWithRublesNoSubscription(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.botInfo = { username: 'test_bot' } as any;
    ctx.session = {};
    ctx.message = { text: 'üí≥ –†—É–±–ª—è–º–∏' } as any;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('text', ctx as unknown as MyContext, {}, 'üí≥ –†—É–±–ª—è–º–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    assertReplyContains(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ');
    expect(ctx.scene.enter).toHaveBeenCalledWith('menuScene');
    
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return {
      name: 'paymentScene: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
export async function testPaymentSceneBackToMainMenu(): Promise<TestResult> {
  try {
    setupTest();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    ctx.from = { 
      id: TEST_USER_ID, 
      is_bot: false, 
      first_name: 'Test', 
      username: TEST_USERNAME, 
      language_code: 'ru' 
    };
    ctx.session = {};
    ctx.message = { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' } as any;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    const paymentScene = (await import('@/scenes/paymentScene')).paymentScene;
    await paymentScene.emit('text', ctx as unknown as MyContext, {}, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(ctx.scene.enter).toHaveBeenCalledWith('menuScene');
    
    return {
      name: 'paymentScene: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      category: TestCategory.All,
      success: true,
      message: '–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω'
    };
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    return {
      name: 'paymentScene: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      category: TestCategory.All,
      success: false,
      message: String(error)
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è paymentScene
 */
export async function runPaymentSceneTests(): Promise<TestResult[]> {
  const results: TestResult[] = [];
  
  try {
    results.push(await testPaymentSceneEnter());
    results.push(await testPaymentSceneEnterWithSelectedPayment());
    results.push(await testPaymentScenePayWithStars());
    results.push(await testPaymentScenePayWithStarsSubscription());
    results.push(await testPaymentScenePayWithRubles());
    results.push(await testPaymentScenePayWithRublesNoSubscription());
    results.push(await testPaymentSceneBackToMainMenu());
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ paymentScene:', error);
    results.push({
      name: 'paymentScene: –û–±—â–∞—è –æ—à–∏–±–∫–∞',
      category: TestCategory.All,
      success: false,
      message: String(error)
    });
  }
  
  return results;
}

export default runPaymentSceneTests; 