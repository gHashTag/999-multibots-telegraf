import { Scenes } from 'telegraf'
import { MyContext, MySession, MyWizardSession } from '@/interfaces'
import { isRussian } from '@/helpers'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { handleHelpCancel } from '@/handlers'
import { promptNeuroCoder } from '@/scenes/neuroCoderScene/promts'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const TEST_USER_ID = 123456789
const TEST_CHAT_ID = 987654321
const TEST_BOT_USERNAME = 'test_bot'
const TEST_MODEL_URL = 'ghashtag/neuro_coder_flux-dev-lora:5ff9ea5918427540563f09940bf95d6efc16b8ce9600e82bb17c2b188384e355'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –º–æ–∫–æ–≤
interface MockFunction<T extends (...args: any[]) => any> {
  (...args: Parameters<T>): ReturnType<T>
  calls: Parameters<T>[]
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏
function createMockFunction<T extends (...args: any[]) => any>(implementation?: T): MockFunction<T> {
  const calls: Parameters<T>[] = []
  const fn = (...args: Parameters<T>) => {
    calls.push(args)
    return implementation?.(...args)
  }
  return Object.assign(fn, { calls }) as MockFunction<T>
}

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏
const mockIsRussian = createMockFunction<typeof isRussian>((ctx) => true)
const mockIsEnglish = createMockFunction<typeof isRussian>((ctx) => false)
const mockGenerateNeuroImage = createMockFunction<typeof generateNeuroImage>(async () => {})
const mockHandleHelpCancel = createMockFunction<typeof handleHelpCancel>(async () => false)

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface TestContext extends Partial<MyContext> {
  from?: { id: number }
  chat?: { id: number }
  botInfo?: { username: string }
  wizard: {
    next: () => number
    selectStep: (step: number) => void
    step: number
  }
  scene: {
    leave: () => Promise<void>
    reenter: () => Promise<void>
  }
  reply: (text: string, extra?: any) => Promise<void>
  message?: { text?: string }
  session: Partial<MySession>
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createTestContext(isRu: boolean = true): TestContext {
  return {
    from: { id: TEST_USER_ID },
    chat: { id: TEST_CHAT_ID },
    botInfo: { username: TEST_BOT_USERNAME },
    wizard: {
      next: () => 1,
      selectStep: (step: number) => {},
      step: 0
    },
    scene: {
      leave: createMockFunction(async () => {}),
      reenter: createMockFunction(async () => {})
    },
    reply: createMockFunction(async (text: string, extra?: any) => {}),
    session: {
      prompt: undefined,
      selectedModel: undefined,
      audioToText: {
        audioFileId: undefined,
        audioFileUrl: undefined,
        transcription: undefined
      }
    },
    message: undefined
  }
}

// –¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
async function testNeuroCoderScene_Enter() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É neuroCoderScene (RU)')
  
  try {
    const ctx = createTestContext(true) as unknown as MyContext
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async (ctx) => {
        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:',
          {
            reply_markup: {
              keyboard: [
                ['1Ô∏è', '2'],
                ['30', '50'],
                ['–û—Ç–º–µ–Ω–∞'],
              ],
              resize_keyboard: true
            }
          }
        )
        return ctx.wizard.next()
      }
    )

    await scene.middleware()(ctx, async () => {})

    const replyCall = (ctx.reply as MockFunction<any>).calls[0]
    if (!replyCall || !replyCall[0].includes('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É')
    }

    return {
      name: 'testNeuroCoderScene_Enter',
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_Enter',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
async function testNeuroCoderScene_EnterEnglish() {
  console.log('üöÄ Starting test: Enter neuroCoderScene (EN)')
  
  try {
    const ctx = createTestContext(false)
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async (ctx) => {
        await ctx.reply(
          'Select number of images to generate:',
          {
            reply_markup: {
              keyboard: [
                ['1Ô∏è', '2'],
                ['30', '50'],
                ['Cancel'],
              ],
              resize_keyboard: true
            }
          }
        )
        return ctx.wizard.next()
      }
    )

    await scene.middleware()(ctx as any, async () => {})

    const replyCall = (ctx.reply as MockFunction<any>).calls[0]
    if (!replyCall || !replyCall[0].includes('Select number of images')) {
      throw new Error('Incorrect message on scene enter (English)')
    }

    return {
      name: 'testNeuroCoderScene_EnterEnglish',
      success: true,
      message: 'Successfully entered scene and displayed menu in English'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_EnterEnglish',
      success: false,
      message: `Error entering scene: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function testNeuroCoderScene_SelectNumberOfImages() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
  
  try {
    const ctx = createTestContext() as unknown as MyContext
    ctx.message = { text: '30' }
    ctx.session.prompt = promptNeuroCoder
    
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async () => 1,
      async (ctx) => {
        const message = ctx.message
        if (!message || !ctx.from?.id) {
          await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
          return ctx.scene.leave()
        }

        if ('text' in message) {
          const numImages = parseInt(message.text)
          await generateNeuroImage(
            promptNeuroCoder,
            TEST_MODEL_URL,
            numImages,
            ctx.from.id.toString(),
            ctx,
            ctx.botInfo?.username
          )
          return ctx.scene.leave()
        }
        
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
        return ctx.scene.reenter()
      }
    )

    ctx.wizard.step = 1
    await scene.middleware()(ctx, async () => {})

    const generateCall = mockGenerateNeuroImage.calls[0]
    if (!generateCall) {
      throw new Error('–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞')
    }

    if (generateCall[2] !== 30) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${generateCall[2]}`)
    }

    return {
      name: 'testNeuroCoderScene_SelectNumberOfImages',
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_SelectNumberOfImages',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
async function testNeuroCoderScene_InvalidInput() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞')
  
  try {
    const ctx = createTestContext()
    ctx.message = { text: 'invalid' }
    
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async () => 1,
      async (ctx) => {
        const message = ctx.message
        if (!message || !('text' in message) || isNaN(parseInt(message.text))) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
          return ctx.scene.reenter()
        }
        return ctx.scene.leave()
      }
    )

    ctx.wizard.step = 1
    await scene.middleware()(ctx as any, async () => {})

    const replyCall = (ctx.reply as MockFunction<any>).calls[0]
    if (!replyCall || !replyCall[0].includes('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞')
    }

    return {
      name: 'testNeuroCoderScene_InvalidInput',
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_InvalidInput',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async function testNeuroCoderScene_Cancel() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
  
  try {
    const ctx = createTestContext()
    ctx.message = { text: '–û—Ç–º–µ–Ω–∞' }
    mockHandleHelpCancel.calls = []
    
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async () => 1,
      async (ctx) => {
        const isCancel = await handleHelpCancel(ctx)
        if (isCancel) {
          return ctx.scene.leave()
        }
        return ctx.scene.reenter()
      }
    )

    ctx.wizard.step = 1
    await scene.middleware()(ctx as any, async () => {})

    if (mockHandleHelpCancel.calls.length === 0) {
      throw new Error('–§—É–Ω–∫—Ü–∏—è handleHelpCancel –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞')
    }

    return {
      name: 'testNeuroCoderScene_Cancel',
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_Cancel',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
async function testNeuroCoderScene_SavePrompt() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞')
  
  try {
    const ctx = createTestContext()
    ctx.message = { text: '1' }
    ctx.session = {}
    
    const scene = new Scenes.WizardScene<MyContext>(
      'neuroCoderScene',
      async () => 1,
      async (ctx) => {
        ctx.session.prompt = promptNeuroCoder
        return ctx.wizard.next()
      }
    )

    ctx.wizard.step = 1
    await scene.middleware()(ctx as any, async () => {})

    if (ctx.session.prompt !== promptNeuroCoder) {
      throw new Error('–ü—Ä–æ–º–ø—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏')
    }

    return {
      name: 'testNeuroCoderScene_SavePrompt',
      success: true,
      message: '–£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏'
    }
  } catch (error: any) {
    return {
      name: 'testNeuroCoderScene_SavePrompt',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: ${error.message}`
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
export async function runNeuroCoderSceneTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è neuroCoderScene')
  
  const testResults = [
    await testNeuroCoderScene_Enter(),
    await testNeuroCoderScene_EnterEnglish(),
    await testNeuroCoderScene_SelectNumberOfImages(),
    await testNeuroCoderScene_InvalidInput(),
    await testNeuroCoderScene_Cancel(),
    await testNeuroCoderScene_SavePrompt()
  ]
  
  let totalTests = testResults.length
  let passedTests = testResults.filter(r => r.success).length
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  testResults.forEach(result => {
    if (result.success) {
      console.log(`‚úÖ ${result.name}: ${result.message}`)
    } else {
      console.log(`‚ùå ${result.name}: ${result.message}`)
    }
  })
  
  console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}`)
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${totalTests - passedTests}`)
  console.log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`)
  console.log(`üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ: ${((passedTests / totalTests) * 100).toFixed(1)}%`)
  
  return testResults
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
if (require.main === module) {
  runNeuroCoderSceneTests().catch(console.error)
} 