import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { enhanceText, validateText } from '@/services/textEnhancer'
import { handleHelpCancel } from '@/handlers'
import { TestResult } from '../../core/types'
import { TestCategory } from '../../core/categories'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const TEST_USER_ID = 123456789
const TEST_CHAT_ID = 987654321
const TEST_BOT_USERNAME = 'test_bot'
const TEST_TEXT = '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è'

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π
function createMockFunction<T extends (...args: any[]) => any>(implementation?: T) {
  const calls: any[][] = []
  const fn = (...args: any[]) => {
    calls.push(args)
    return implementation?.(...args)
  }
  fn.calls = calls
  return fn
}

// –ú–æ–∫–∏
const mockIsRussian = createMockFunction((ctx: MyContext) => true)
const mockEnhanceText = createMockFunction(async (params: any, ctx: any) => ({
  enhancedText: `–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${params.text}`,
  originalText: params.text,
  style: params.style || 'default',
  tone: params.tone || 'neutral',
  length: params.length || 'medium'
}))
const mockHandleHelpCancel = createMockFunction(async () => false)

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createTestContext() {
  return {
    from: { id: TEST_USER_ID },
    chat: { id: TEST_CHAT_ID },
    botInfo: { username: TEST_BOT_USERNAME },
    wizard: {
      next: () => 1,
      selectStep: (step: number) => {},
      step: 0
    },
    scene: {
      leave: createMockFunction(async () => {}),
      reenter: createMockFunction(async () => {})
    },
    reply: createMockFunction(async (text: string, extra?: any) => {}),
    message: null as any,
    session: {} as any
  }
}

// –¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
async function testTextEnhancerScene_Enter(): Promise<TestResult> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É textEnhancerScene (RU)')
  
  try {
    const ctx = createTestContext()
    const scene = new Scenes.WizardScene<MyContext>(
      'textEnhancerScene',
      async (ctx) => {
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:',
          {
            reply_markup: {
              keyboard: [['–û—Ç–º–µ–Ω–∞']],
              resize_keyboard: true
            }
          }
        )
        return ctx.wizard.next()
      }
    )

    await scene.middleware()(ctx as any, async () => {})

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const replyCall = ctx.reply.calls[0]
    if (!replyCall || !replyCall[0].includes('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç')) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É')
    }

    return {
      name: 'TextEnhancer: Enter Scene',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
    }
  } catch (error: any) {
    return {
      name: 'TextEnhancer: Enter Scene',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
async function testTextEnhancerScene_SubmitText(): Promise<TestResult> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è')
  
  try {
    const ctx = createTestContext()
    ctx.message = { text: TEST_TEXT } as any
    ctx.wizard.step = 1
    
    const scene = new Scenes.WizardScene<MyContext>(
      'textEnhancerScene',
      async () => 1,
      async (ctx) => {
        const message = ctx.message
        if (!message || !('text' in message)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
          return ctx.scene.reenter()
        }

        if (!validateText(message.text)) {
          await ctx.reply('–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç 1 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.')
          return ctx.scene.reenter()
        }

        const result = await enhanceText({ text: message.text }, ctx)
        await ctx.reply(result.enhancedText)
        return ctx.scene.leave()
      }
    )

    await scene.middleware()(ctx as any, async () => {})

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    if (mockEnhanceText.calls.length === 0) {
      throw new Error('–§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞')
    }

    return {
      name: 'TextEnhancer: Submit Text',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ'
    }
  } catch (error: any) {
    return {
      name: 'TextEnhancer: Submit Text',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: ${error.message}`
    }
  }
}

// –¢–µ—Å—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async function testTextEnhancerScene_InvalidText(): Promise<TestResult> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
  
  try {
    const ctx = createTestContext()
    ctx.message = { text: '' } as any
    ctx.wizard.step = 1
    
    const scene = new Scenes.WizardScene<MyContext>(
      'textEnhancerScene',
      async () => 1,
      async (ctx) => {
        const message = ctx.message
        if (!message || !('text' in message)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
          return ctx.scene.reenter()
        }

        if (!validateText(message.text)) {
          await ctx.reply('–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç 1 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.')
          return ctx.scene.reenter()
        }

        return ctx.wizard.next()
      }
    )

    await scene.middleware()(ctx as any, async () => {})

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const replyCall = ctx.reply.calls[0]
    if (!replyCall || !replyCall[0].includes('—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π')) {
      throw new Error('–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ')
    }

    return {
      name: 'TextEnhancer: Invalid Text',
      category: TestCategory.SCENE,
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
    }
  } catch (error: any) {
    return {
      name: 'TextEnhancer: Invalid Text',
      category: TestCategory.SCENE,
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${error.message}`
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
export async function runTextEnhancerSceneTests(): Promise<TestResult[]> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è textEnhancerScene')
  
  const testResults = [
    await testTextEnhancerScene_Enter(),
    await testTextEnhancerScene_SubmitText(),
    await testTextEnhancerScene_InvalidText()
  ]
  
  let passedTests = 0
  let failedTests = 0
  
  testResults.forEach(result => {
    if (result.success) {
      passedTests++
      console.log(`‚úÖ ${result.name}: ${result.message}`)
    } else {
      failedTests++
      console.log(`‚ùå ${result.name}: ${result.message}`)
    }
  })
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è textEnhancerScene:`)
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}`)
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failedTests}`)
  console.log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.length}`)
  
  return testResults
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
if (require.main === module) {
  runTextEnhancerSceneTests().catch(console.error)
} 