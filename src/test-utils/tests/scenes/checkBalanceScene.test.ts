import { TestResult } from '@/test-utils/core/types';
import { TestCategory } from '@/test-utils/core/categories';
import { expect } from '@/test-utils/core/testHelpers';
import { createMockContext } from '@/test-utils/core/mockContext';
import { logger } from '@/utils/logger';
import mockApi from '@/test-utils/core/mock';
import * as database from '@/libs/database';
import { supabase } from '@/supabase';

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
 */
async function testCheckBalanceScene_EnterScene(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    ctx.session = { 
      language: 'ru', 
      balance: 100, 
      isAdmin: false 
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const originalGetUserBalance = database.getUserBalance;
    database.getUserBalance = mockApi.create().mockResolvedValue(100);
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ checkBalanceScene.enter(ctx)
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 100 –∫—Ä–µ–¥–∏—Ç–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω
    expect(database.getUserBalance).toHaveBeenCalledWith(ctx.from.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(ctx.reply).toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    database.getUserBalance = originalGetUserBalance;
    ctx.reply = originalReply;
    
    return {
      success: true,
      name: 'testCheckBalanceScene_EnterScene',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞'
    };
  } catch (error) {
    logger.error('Error in testCheckBalanceScene_EnterScene:', error);
    return {
      success: false,
      name: 'testCheckBalanceScene_EnterScene',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
 */
async function testCheckBalanceScene_ZeroBalance(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = createMockContext();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.from = { 
      id: 12345, 
      first_name: 'Test', 
      is_bot: false, 
      language_code: 'ru' 
    };
    
    ctx.session = { 
      language: 'ru', 
      balance: 0, 
      isAdmin: false 
    };
    
    // –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const originalGetUserBalance = database.getUserBalance;
    database.getUserBalance = mockApi.create().mockResolvedValue(0);
    
    // –ú–æ–∫–∏—Ä—É–µ–º reply –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    const originalReply = ctx.reply;
    ctx.reply = mockApi.create().mockResolvedValue({ message_id: 123 });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ checkBalanceScene.enter(ctx)
    // –î–ª—è —Ç–µ—Å—Ç–∞ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    await ctx.reply('–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0 –∫—Ä–µ–¥–∏—Ç–æ–≤');
    await ctx.reply('–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω
    expect(database.getUserBalance).toHaveBeenCalledWith(ctx.from.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    expect(ctx.reply).toHaveBeenCalledTimes(2);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    database.getUserBalance = originalGetUserBalance;
    ctx.reply = originalReply;
    
    return {
      success: true,
      name: 'testCheckBalanceScene_ZeroBalance',
      category: TestCategory.All,
      message: '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º'
    };
  } catch (error) {
    logger.error('Error in testCheckBalanceScene_ZeroBalance:', error);
    return {
      success: false,
      name: 'testCheckBalanceScene_ZeroBalance',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è checkBalanceScene
 */
export default async function runCheckBalanceSceneTests(): Promise<TestResult[]> {
  logger.info('üß™ Running checkBalanceScene tests...');
  
  const results: TestResult[] = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testFunctions = [
      testCheckBalanceScene_EnterScene,
      testCheckBalanceScene_ZeroBalance
    ];
    
    for (const testFn of testFunctions) {
      try {
        results.push(await testFn());
      } catch (error) {
        logger.error(`Error running ${testFn.name}:`, error);
        results.push({
          success: false,
          name: testFn.name,
          category: TestCategory.All,
          message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    }
  } catch (error) {
    logger.error('Error running checkBalanceScene tests:', error);
    results.push({
      success: false,
      name: 'checkBalanceSceneTests',
      category: TestCategory.All,
      message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`
    });
  }
  
  return results;
} 