import { TestResult } from '../types'
import { createMockFn } from '../mocks/mockFn'
import { logger } from '../../utils/logger'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ createMockFn
 */
export async function runMockFunctionTest(): Promise<TestResult> {
  try {
    logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π')

    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const mockFn = createMockFn()
    mockFn(1, 2, 3)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    if (mockFn.mock.calls.length !== 1) {
      throw new Error(
        `‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 1 –≤—ã–∑–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${mockFn.mock.calls.length}`
      )
    }

    if (
      mockFn.mock.calls[0][0] !== 1 ||
      mockFn.mock.calls[0][1] !== 2 ||
      mockFn.mock.calls[0][2] !== 3
    ) {
      throw new Error('‚ùå –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º')
    }

    logger.info('‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞')

    // –¢–µ—Å—Ç mockReturnValue
    const mockWithReturn = createMockFn()
    mockWithReturn.mockReturnValue('test result')
    const result = mockWithReturn()

    if (result !== 'test result') {
      throw new Error(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç 'test result', –ø–æ–ª—É—á–µ–Ω–æ ${result}`)
    }

    logger.info('‚úÖ mockReturnValue —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    // –¢–µ—Å—Ç mockResolvedValue
    const mockWithPromise = createMockFn()
    mockWithPromise.mockResolvedValue('async result')
    const promiseResult = await mockWithPromise()

    if (promiseResult !== 'async result') {
      throw new Error(
        `‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç 'async result', –ø–æ–ª—É—á–µ–Ω–æ ${promiseResult}`
      )
    }

    logger.info('‚úÖ mockResolvedValue —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    // –¢–µ—Å—Ç mockImplementation
    const mockWithImpl = createMockFn()
    logger.info('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é mockImplementation')
    const testImplementation = (a: number, b: number) => a + b
    const modifiedMock = mockWithImpl.mockImplementation(testImplementation)

    // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    logger.info('‚öôÔ∏è –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')
    const implResult = modifiedMock(5, 3)

    logger.info(`‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: ${implResult}, —Ç–∏–ø: ${typeof implResult}`)

    if (implResult !== 8) {
      throw new Error(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç 8, –ø–æ–ª—É—á–µ–Ω–æ ${implResult}`)
    }

    logger.info('‚úÖ mockImplementation —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    // –¢–µ—Å—Ç mockReset
    mockWithImpl.mockReset()
    if (mockWithImpl.mock.calls.length !== 0) {
      throw new Error(
        `‚ùå –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –æ–∂–∏–¥–∞–ª–æ—Å—å 0 –≤—ã–∑–æ–≤–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${mockWithImpl.mock.calls.length}`
      )
    }

    mockWithImpl(1, 2)
    if (mockWithImpl(1, 2) !== undefined) {
      throw new Error('‚ùå –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –æ–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç undefined')
    }

    logger.info('‚úÖ mockReset —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    // –¢–µ—Å—Ç mockRejectedValue —Å try/catch
    const mockWithReject = createMockFn()
    mockWithReject.mockRejectedValue(new Error('test error'))

    try {
      await mockWithReject()
      throw new Error('‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ')
    } catch (error: any) {
      if (error.message !== 'test error') {
        throw new Error(
          `‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ 'test error', –ø–æ–ª—É—á–µ–Ω–æ ${error.message}`
        )
      }
    }

    logger.info('‚úÖ mockRejectedValue —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    logger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ')

    return {
      success: true,
      message: '–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      name: '–¢–µ—Å—Ç –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π',
    }
  } catch (error: any) {
    logger.error(`‚ùå –¢–µ—Å—Ç –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${error.message}`)
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π: ${error.message}`,
      name: '–¢–µ—Å—Ç –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–π',
    }
  }
}
