import { supabase } from '@/core/supabase'
import { Logger } from '@/utils/logger'
import { TEST_CONFIG } from '../test-config'
import { TestResult } from '../types'
import { InngestTestEngine } from '../inngest-test-engine'
import { neuroImageGeneration } from '@/inngest-functions/neuroImageGeneration'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'
import { ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * –†–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ, —ç–º—É–ª–∏—Ä—É—è –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
 */
export async function testNeuroPhotoGeneration(): Promise<TestResult> {
  try {
    Logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', {
      description: 'Starting neuro photo generation test',
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ Inngest
    const testEngine = new InngestTestEngine({
      maxWaitTime: TEST_CONFIG.TIMEOUT,
      eventBufferSize: 200,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–≤–∏–∂–∫–µ
    testEngine.register('neuro/photo.generate', neuroImageGeneration)
    testEngine.register('payment/process', paymentProcessor)

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
    const telegram_id = TEST_CONFIG.TEST_TELEGRAM_ID || '123456789'
    const prompt = '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'
    const model_url = 'https://example.com/test-model.jpg'

    Logger.info('‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞', {
      description: 'Test parameters',
      telegram_id,
      prompt,
      model_url,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingUser, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegram_id)
      .single()

    if (userError && userError.code !== 'PGRST116') {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Error checking user',
        error: userError.message,
      })
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!existingUser) {
      Logger.info('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'Creating test user',
        telegram_id,
      })

      const { error } = await supabase.from('users').insert({
        telegram_id,
        first_name: 'Test User',
        username: `test_user_${telegram_id}`,
        language_code: 'ru',
      })

      if (error) {
        Logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error creating test user',
          error: error.message,
        })
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
      } else {
        Logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', {
          description: 'Test user created successfully',
        })
      }
    } else {
      Logger.info('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', {
        description: 'Test user already exists',
      })
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    Logger.info('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', {
      description: 'Simulating neurophoto processing',
      prompt,
      model_url,
    })

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const paymentData = {
        telegram_id,
        amount: 5,
        stars: 5,
        type: 'money_expense',
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        bot_name: TEST_CONFIG.TEST_BOT_NAME || 'test_bot',
        status: 'COMPLETED',
        currency: 'STARS',
        payment_method: 'balance',
        service_type: ModeEnum.NeuroPhoto,
        inv_id: `test-${Date.now()}`,
      }

      const { error: paymentError, data: paymentRecord } = await supabase
        .from('payments_v2')
        .insert(paymentData)
        .select()
        .single()

      if (paymentError) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞: ${paymentError.message}`
        )
      }

      Logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–∑–¥–∞–Ω–∞', {
        description: 'Test payment record created',
        payment_id: paymentRecord?.id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–∞—Ç–µ–∂–µ–π
      const { data: paymentRecords, error: paymentCheckError } = await supabase
        .from('payments_v2')
        .select('*')
        .eq('telegram_id', telegram_id)
        .eq('type', 'money_expense')
        .limit(1)

      if (paymentCheckError) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞: ${paymentCheckError.message}`
        )
      }

      if (!paymentRecords || paymentRecords.length === 0) {
        throw new Error('–ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      }

      Logger.info('‚úÖ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Payment record found in database',
      })

      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω
      Logger.info('üèÅ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω', {
        description: 'Neuro photo generation test passed successfully',
      })

      return {
        name: 'NeuroPhoto Generation',
        success: true,
        message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        details: {
          payment: paymentRecords[0],
        },
      }
    } catch (dbError) {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', {
        description: 'Database operation error',
        error: dbError instanceof Error ? dbError.message : String(dbError),
      })

      // –¢–µ—Å—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ë–î,
      // —Ç.–∫. –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
      return {
        name: 'NeuroPhoto Generation',
        success: true,
        message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ä–µ–¥–æ–π)',
        details: {
          dbErrorMessage:
            dbError instanceof Error ? dbError.message : String(dbError),
        },
      }
    }
  } catch (error) {
    Logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', {
      description: 'Error in neuro photo generation test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: 'NeuroPhoto Generation',
      success: false,
      message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  ;(async () => {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é')
      console.log('----------------------------------------')

      const result = await testNeuroPhotoGeneration()

      if (result.success) {
        console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω:', result.name)
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message)
      } else {
        console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', result.name)
        console.error('‚ùå –û—à–∏–±–∫–∞:', result.message)
        if (result.error instanceof Error) {
          console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', result.error.stack)
        }
        process.exit(1)
      }

      console.log('----------------------------------------')
      process.exit(0)
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error)
      process.exit(1)
    }
  })()
}
