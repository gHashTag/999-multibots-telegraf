import { TestResult } from '@/test-utils/types'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { getServiceUsageStats } from '@/utils/service.utils'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export async function runServiceStatsTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤', {
    description: 'Running service stats tests',
  })

  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.push(await testGetServiceStats())
    results.push(await testEmptyServiceStats())
    results.push(await testInvalidServiceType())

    // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const passedTests = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info(
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤`,
      {
        description: 'Service stats tests completed',
        passedTests,
        totalTests,
      }
    )

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤', {
      description: 'Error running service stats tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        success: false,
        name: 'Service Stats Tests',
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
      },
    ]
  }
}

async function testGetServiceStats(): Promise<TestResult> {
  const testName = '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞'

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testStats = {
      service_type: ModeEnum.TextToImage,
      total_requests: 100,
      successful_requests: 90,
      failed_requests: 10,
      average_response_time: 1500,
      last_used: new Date().toISOString(),
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É
    await supabase.from('service_usage_stats').upsert(testStats)

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    const stats = await getServiceUsageStats(ModeEnum.TextToImage)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (
      stats.totalRequests !== testStats.total_requests ||
      stats.successfulRequests !== testStats.successful_requests ||
      stats.failedRequests !== testStats.failed_requests ||
      stats.averageResponseTime !== testStats.average_response_time
    ) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º')
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase
      .from('service_usage_stats')
      .delete()
      .eq('service_type', ModeEnum.TextToImage)

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

async function testEmptyServiceStats(): Promise<TestResult> {
  const testName = '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞'

  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    await supabase
      .from('service_usage_stats')
      .delete()
      .eq('service_type', ModeEnum.TextToVideo)

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    const stats = await getServiceUsageStats(ModeEnum.TextToVideo)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (
      stats.totalRequests !== 0 ||
      stats.successfulRequests !== 0 ||
      stats.failedRequests !== 0 ||
      stats.averageResponseTime !== 0
    ) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    }

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

async function testInvalidServiceType(): Promise<TestResult> {
  const testName = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞'

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º
    const invalidType = 'InvalidService' as ModeEnum
    const stats = await getServiceUsageStats(invalidType)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (
      stats.totalRequests !== 0 ||
      stats.successfulRequests !== 0 ||
      stats.failedRequests !== 0 ||
      stats.averageResponseTime !== 0
    ) {
      throw new Error(
        '–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞'
      )
    }

    return {
      success: true,
      name: testName,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${testName}`, {
      description: 'Error in test',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: testName,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}
