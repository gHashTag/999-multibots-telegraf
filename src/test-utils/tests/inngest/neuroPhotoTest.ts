import { TestResult } from '../../core/types'
import { logger } from '@/utils/logger'
import { TestCategory } from '../../core/categories'
import { create as mock } from '../../core/mock'

interface NeuroPhotoGenerationData {
  prompt: string
  model?: string
  numImages?: number
  telegram_id: string
  username?: string
  is_ru: boolean
  bot_name: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
 */
interface NeuroTestResult {
  testName: string
  success: boolean
  message: string
  details?: any
  error?: string
  duration?: number
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export async function testNeuroImageGeneration(
  data?: Partial<NeuroPhotoGenerationData>
): Promise<TestResult> {
  const defaultData: NeuroPhotoGenerationData = {
    prompt: 'Beautiful snowy mountain landscape at sunset',
    model: 'stability-ai/sdxl',
    numImages: 1,
    telegram_id: '123456789',
    username: 'test_user',
    is_ru: true,
    bot_name: 'test_bot',
    ...data,
  }

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    description: 'Neuro image generation test',
    data: {
      ...defaultData,
      prompt: defaultData.prompt.substring(0, 20) + '...',
    },
  })

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –≤ Inngest —á–µ—Ä–µ–∑ –º–æ–∫
  const mockSendEvent =
    mock<(name: string, data: any) => Promise<NeuroTestResult>>()
  mockSendEvent.mockResolvedValue({
    testName: 'Neuro Image Generation',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'neuro/photo.generate',
      responseStatus: 200,
    },
    duration: 150,
  })

  try {
    // –í—ã–∑—ã–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
    const result = await mockSendEvent('neuro/photo.generate', defaultData)

    return {
      name: 'Neuro Image Generation Test',
      success: result.success,
      message: `–¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: result.details,
      category: TestCategory.NeuroPhoto,
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Error during neuro photo test',
      error: errorMessage,
    })

    return {
      name: 'Neuro Image Generation Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.NeuroPhoto,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export async function testNeuroPhotoV2Generation(
  data?: Partial<NeuroPhotoGenerationData>
): Promise<TestResult> {
  const defaultData: NeuroPhotoGenerationData = {
    prompt: 'Stylish portrait in evening urban setting with neon lights',
    numImages: 1,
    telegram_id: '123456789',
    username: 'test_user',
    is_ru: true,
    bot_name: 'test_bot',
    ...data,
  }

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
    description: 'NeuroPhoto V2 generation test',
    data: {
      ...defaultData,
      prompt: defaultData.prompt.substring(0, 20) + '...',
    },
  })

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –≤ Inngest —á–µ—Ä–µ–∑ –º–æ–∫
  const mockSendEvent =
    mock<(name: string, data: any) => Promise<NeuroTestResult>>()
  mockSendEvent.mockResolvedValue({
    testName: 'NeuroPhoto V2 Generation',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'neuro/photo-v2.generate',
      responseStatus: 200,
    },
    duration: 180,
  })

  try {
    // –í—ã–∑—ã–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
    const result = await mockSendEvent('neuro/photo-v2.generate', defaultData)

    return {
      name: 'NeuroPhoto V2 Generation Test',
      success: result.success,
      message: `–¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: result.details,
      category: TestCategory.NeuroPhotoV2,
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
      description: 'Error during neuro photo V2 test',
      error: errorMessage,
    })

    return {
      name: 'NeuroPhoto V2 Generation Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.NeuroPhotoV2,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export async function runNeuroPhotoTests(): Promise<TestResult[]> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    description: 'Running all neurophoto tests',
  })

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  results.push(await testNeuroImageGeneration())

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  results.push(await testNeuroPhotoV2Generation())

  logger.info({
    message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
    description: 'All neurophoto tests completed',
    successCount: results.filter(r => r.success).length,
    totalCount: results.length,
  })

  return results
}
