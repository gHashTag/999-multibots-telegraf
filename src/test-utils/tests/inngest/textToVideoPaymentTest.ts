import { TestResult } from '../../types'
import { TEST_CONFIG, inngestTestEngine } from '../../test-config'
import { logger } from '@/utils/logger'
import { ModeEnum, calculateModeCost } from '@/price/helpers'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export async function testTextToVideoPaymentDirect(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞'
    )
    console.log(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞'
    )

    // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    inngestTestEngine.clearEvents()

    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testTelegramId = TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID
    const testBotName = TEST_CONFIG.TEST_DATA.TEST_BOT_NAME

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const expectedCost = calculateModeCost({
      mode: ModeEnum.TextToVideo,
    }).stars

    logger.info('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
      cost: expectedCost,
      mode: ModeEnum.TextToVideo,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    await inngestTestEngine.sendEvent('payment/process', {
      telegram_id: testTelegramId,
      amount: expectedCost,
      stars: expectedCost,
      type: TransactionType.MONEY_EXPENSE,
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ Text-to-Video',
      bot_name: testBotName,
      service_type: ModeEnum.TextToVideo,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    const paymentEvents = inngestTestEngine.getEventsByName('payment/process')
    logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${paymentEvents.length} –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`)

    if (paymentEvents.length === 0) {
      return {
        success: false,
        message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏',
        name: 'testTextToVideoPaymentDirect',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
    const payment = paymentEvents[0].data
    logger.info('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', payment)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (
      payment.type !== TransactionType.MONEY_EXPENSE &&
      payment.type !== TransactionType.MONEY_EXPENSE.toLowerCase()
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${payment.type}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${TransactionType.MONEY_EXPENSE}`,
        name: 'testTextToVideoPaymentDirect',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      payment.telegram_id !== testTelegramId ||
      Math.abs(Number(payment.amount) - expectedCost) > 0.01 ||
      payment.service_type !== ModeEnum.TextToVideo
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞: ${JSON.stringify(payment)}, –æ–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${expectedCost}`,
        name: 'testTextToVideoPaymentDirect',
      }
    }

    // –ü—Ä—è–º—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    return {
      success: true,
      message:
        '–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testTextToVideoPaymentDirect',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testTextToVideoPaymentDirect',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ textToVideo
 */
export async function runTextToVideoFuncTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è textToVideo')
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è textToVideo')

  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    results.push(await testTextToVideoPaymentDirect())

    const successCount = results.filter(r => r.success).length

    logger.info(
      `‚úÖ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ textToVideo: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`,
      {
        description: `TextToVideo payment tests: ${successCount}/${results.length} passed`,
        results: results.map(r => ({
          name: r.name,
          success: r.success,
          message: r.message,
        })),
      }
    )
    console.log(
      `‚úÖ –¢–µ—Å—Ç—ã textToVideo: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏`
    )
    results.forEach((result, index) => {
      console.log(
        `${index + 1}. ${result.name}: ${result.success ? '‚úì' : '‚úó'} - ${result.message}`
      )
    })

    return results
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ textToVideo',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return []
  }
}
