import { TestResult } from '../../core/types'
import { logger } from '@/utils/logger'
import { TestCategory } from '../../core/categories'
import { create as mock } from '../../core/mock'
import { ModeEnum } from '@/types/modes'

interface DigitalAvatarTrainingData {
  bot_name: string;
  is_ru: boolean;
  modelName: string;
  steps: number;
  telegram_id: string;
  triggerWord: string;
  zipUrl: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
 */
interface DigitalAvatarTestResult {
  testName: string;
  success: boolean;
  message: string;
  details?: any;
  error?: string;
  duration?: number;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (Digital Avatar Body)
 */
export async function testDigitalAvatarBody(data?: Partial<DigitalAvatarTrainingData>): Promise<TestResult> {
  const defaultData: DigitalAvatarTrainingData = {
    bot_name: 'test_bot',
    is_ru: true,
    modelName: 'test_avatar_model',
    steps: 1500,
    telegram_id: '123456789',
    triggerWord: 'person_test',
    zipUrl: 'https://example.com/training-images.zip',
    ...data
  };

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (Digital Avatar Body)',
    description: 'Digital Avatar Body training function test',
    data: {
      ...defaultData,
      zipUrl: defaultData.zipUrl.substring(0, 30) + '...'
    }
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const mockBalanceHelper = mock<(telegramId: string, amount: number, options: any) => Promise<{success: boolean, currentBalance: number}>>();
  mockBalanceHelper.mockResolvedValue({
    checkBalance: async () => ({success: true, currentBalance: 1000})
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å Replicate API
  const mockReplicate = mock<(options: any) => Promise<{id: string, status: string}>>();
  mockReplicate.mockResolvedValue({
    createTraining: async () => ({
      id: 'training_123456',
      status: 'starting'
    })
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Supabase
  const mockSupabase = mock<(data: any) => Promise<{id: string, replicate_training_id: string}>>();
  mockSupabase.mockResolvedValue({
    createModelTraining: async () => ({
      id: 'db_training_1',
      replicate_training_id: 'training_123456'
    })
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –≤ Inngest —á–µ—Ä–µ–∑ –º–æ–∫
  const mockSendEvent = mock<(name: string, data: any) => Promise<DigitalAvatarTestResult>>();
  mockSendEvent.mockResolvedValue({
    testName: 'Digital Avatar Body Training',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'model-training/start',
      responseStatus: 200,
      trainingId: 'training_123456',
      modelName: defaultData.modelName,
      steps: defaultData.steps,
      telegramId: defaultData.telegram_id,
      balanceBeforeCharge: 1000,
      balanceAfterCharge: 900,
      paymentAmount: 100
    },
    duration: 250
  });

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
    logger.info({
      message: '1Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      modelName: defaultData.modelName,
      steps: defaultData.steps
    });
    
    logger.info({
      message: '2Ô∏è‚É£ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      mode: ModeEnum.DigitalAvatarBody,
      steps: defaultData.steps
    });
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const costAmount = Math.floor(defaultData.steps / 15);
    
    logger.info({
      message: '3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      telegramId: defaultData.telegram_id,
      requiredAmount: costAmount,
      currentBalance: 1000
    });
    
    logger.info({
      message: '4Ô∏è‚É£ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
      telegramId: defaultData.telegram_id,
      amount: costAmount,
      balanceBefore: 1000,
      balanceAfter: 1000 - costAmount
    });
    
    logger.info({
      message: '5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Replicate',
      modelName: defaultData.modelName, 
      zipUrl: defaultData.zipUrl.substring(0, 30) + '...',
      steps: defaultData.steps
    });
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
    logger.info({
      message: '6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –ë–î',
      trainingId: 'training_123456',
      telegramId: defaultData.telegram_id,
      modelName: defaultData.modelName
    });
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest
    const result = await mockSendEvent('model-training/start', defaultData);
    
    return {
      name: 'Digital Avatar Body Training Test',
      success: result.success,
      message: `–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: {
        ...result.details,
        testSteps: [
          '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
          '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
          '–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
          '–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Replicate',
          '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î'
        ]
      },
      category: TestCategory.ModelTraining
    };
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      description: 'Error during digital avatar body training test',
      error: errorMessage
    });
    
    return {
      name: 'Digital Avatar Body Training Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.ModelTraining
    };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2 (Digital Avatar Body V2)
 */
export async function testDigitalAvatarBodyV2(data?: Partial<DigitalAvatarTrainingData>): Promise<TestResult> {
  const defaultData: DigitalAvatarTrainingData = {
    bot_name: 'test_bot',
    is_ru: true,
    modelName: 'test_avatar_model_v2',
    steps: 2000,
    telegram_id: '123456789',
    triggerWord: 'person_test_v2',
    zipUrl: 'https://example.com/training-images-v2.zip',
    ...data
  };

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2 (Digital Avatar Body V2)',
    description: 'Digital Avatar Body V2 training function test',
    data: {
      ...defaultData,
      zipUrl: defaultData.zipUrl.substring(0, 30) + '...'
    }
  });

  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –¥–ª—è V1, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const mockSendEvent = mock<(name: string, data: any) => Promise<DigitalAvatarTestResult>>();
  mockSendEvent.mockResolvedValue({
    testName: 'Digital Avatar Body V2 Training',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'model-training-v2/start',
      responseStatus: 200,
      trainingId: 'training_v2_123456',
      modelName: defaultData.modelName,
      steps: defaultData.steps,
      telegramId: defaultData.telegram_id,
      balanceBeforeCharge: 1000,
      balanceAfterCharge: 850,
      paymentAmount: 150
    },
    duration: 300
  });

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ V1, –Ω–æ —Å –∏–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    logger.info({
      message: '1Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö V2',
      modelName: defaultData.modelName,
      steps: defaultData.steps
    });
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è V2 (–¥–æ—Ä–æ–∂–µ)
    const costAmount = Math.floor(defaultData.steps / 12);
    
    logger.info({
      message: '2Ô∏è‚É£ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ V2',
      mode: ModeEnum.DigitalAvatarBodyV2,
      steps: defaultData.steps,
      cost: costAmount
    });
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã V1
    const result = await mockSendEvent('model-training-v2/start', defaultData);
    
    return {
      name: 'Digital Avatar Body V2 Training Test',
      success: result.success,
      message: `–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: result.details,
      category: TestCategory.ModelTraining
    };
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2',
      description: 'Error during digital avatar body V2 training test',
      error: errorMessage
    });
    
    return {
      name: 'Digital Avatar Body V2 Training Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.ModelTraining
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
 */
export async function runDigitalAvatarTests(): Promise<TestResult[]> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤',
    description: 'Running all digital avatar tests'
  });
  
  const results: TestResult[] = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  results.push(await testDigitalAvatarBody());
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ V2
  results.push(await testDigitalAvatarBodyV2());
  
  logger.info({
    message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
    description: 'All digital avatar tests completed',
    successCount: results.filter(r => r.success).length,
    totalCount: results.length
  });
  
  return results;
}

/**
 * –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
 */
if (require.main === module) {
  (async () => {
    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Digital Avatar Body –Ω–∞–ø—Ä—è–º—É—é');
      const results = await runDigitalAvatarTests();
      
      const totalTests = results.length;
      const passedTests = results.filter(r => r.success).length;
      const failedTests = totalTests - passedTests;
      
      logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Digital Avatar Body', {
        total: totalTests,
        passed: passedTests,
        failed: failedTests,
        success: failedTests === 0
      });
      
      results.forEach((result, index) => {
        console.log(`–¢–µ—Å—Ç ${index + 1}: ${result.name}`);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
        console.log('----------------------------');
      });
      
      process.exit(failedTests === 0 ? 0 : 1);
    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', { error });
      process.exit(1);
    }
  })();
} 