import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { logger } from '@/utils/logger'
import { runInngestAvailabilityTest } from './basicInngestTests'

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Inngest
 */
export interface InngestTestOptions {
  verbose?: boolean
  testType?:
    | 'direct'
    | 'sdk'
    | 'registration'
    | 'full'
    | 'all'
    | 'availability'
    | 'api'
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã Inngest
 */
export async function runInngestTests(
  options: InngestTestOptions = {}
): Promise<TestResult[]> {
  const { verbose = false, testType = 'all' } = options

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Inngest', {
    description: 'Running Inngest tests',
    testType,
    verbose,
  })

  const results: TestResult[] = []

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    let testsToRun: Array<() => Promise<TestResult>> = []

    switch (testType) {
      case 'availability':
        testsToRun = [runInngestAvailabilityTest]
        logger.info('üìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest')
        break
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        testsToRun = [runInngestAvailabilityTest]
        logger.info('üìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest')
    }

    logger.info(`üìã –ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ ${testsToRun.length} —Ç–µ—Å—Ç–æ–≤`)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const testFn of testsToRun) {
      try {
        const result = await testFn()

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!result.category) {
          result.category = TestCategory.Inngest
        }

        results.push(result)

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(
          `${result.success ? '‚úÖ' : '‚ùå'} ${result.name}: ${result.message}`
        )
      } catch (error: any) {
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        const errorResult: TestResult = {
          name: 'Inngest Test Error',
          category: TestCategory.Inngest,
          success: false,
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`,
          error: error.message,
        }

        results.push(errorResult)
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ Inngest: ${error.message}`)
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const successCount = results.filter(r => r.success).length
    const failCount = results.length - successCount

    logger.info(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Inngest: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} —Å –æ—à–∏–±–∫–∞–º–∏`
    )

    return results
  } catch (error: any) {
    // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    logger.error(
      'üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ Inngest:',
      error.message
    )

    return [
      {
        name: 'Inngest Tests',
        category: TestCategory.Inngest,
        success: false,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${error.message}`,
        error: error.message,
      },
    ]
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
export { runInngestAvailabilityTest }

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runInngestTests({ verbose: true })
    .then(results => {
      logger.info({
        message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
        description: 'Inngest function tests results',
        success: results.every((r: TestResult) => r.success),
        testName: 'Inngest Tests Suite',
        details: results
          .map((r: TestResult) => ({
            testName: r.name,
            success: r.success,
            message: r.message,
          }))
          .join('\n'),
      })

      if (!results.every((r: TestResult) => r.success)) {
        process.exit(1)
      }
    })
    .catch(error => {
      logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    })
}
