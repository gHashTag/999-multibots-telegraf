import { TestResult } from '../../core/types'
import { logger } from '@/utils/logger'
import { TestCategory } from '../../core/categories'
import { runNeuroPhotoTests } from './neuroPhotoTest'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export async function runInngestTests(verbose = false): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π', { description: 'Starting Inngest function tests' })
  
  const results: TestResult[] = []
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  results.push(...await runNeuroPhotoTests())
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  logger.info({
    message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
    description: 'Inngest function tests results',
    success: results.every(r => r.success),
    total: results.length,
    passed: results.filter(r => r.success).length,
    failed: results.filter(r => !r.success).length
  })
  
  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runInngestTests(true).then(results => {
    logger.info({
      message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
      description: 'Inngest function tests results',
      success: results.every((r: TestResult) => r.success),
      testName: 'Inngest Tests Suite',
      details: results.map((r: TestResult) => ({
        testName: r.name,
        success: r.success,
        message: r.message
      })).join('\n')
    })
    
    if (!results.every((r: TestResult) => r.success)) {
      process.exit(1)
    }
  }).catch(error => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
    process.exit(1)
  })
} 