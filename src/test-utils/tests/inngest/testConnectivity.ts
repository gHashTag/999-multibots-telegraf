import { Inngest, NonRetriableError } from 'inngest'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { TEST_CONFIG } from '../../test-config'

// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest
const TEST_EVENT = {
  name: 'test/connectivity',
  data: {
    testId: `test-${Date.now()}`,
    timestamp: new Date().toISOString(),
    message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest',
  },
}

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest —á–µ—Ä–µ–∑ SDK
 */
export async function testInngestSdkConnectivity(): Promise<TestResult> {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest —á–µ—Ä–µ–∑ SDK...')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const eventKey = process.env.INNGEST_EVENT_KEY
    const signingKey = process.env.INNGEST_SIGNING_KEY
    const inngestUrl = process.env.INNGEST_URL

    logger.info(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Inngest:
      - INNGEST_EVENT_KEY: ${eventKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
      - INNGEST_SIGNING_KEY: ${signingKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
      - INNGEST_URL: ${inngestUrl || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`)

    if (!eventKey) {
      throw new Error('‚ùå INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Inngest
    logger.info('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Inngest...')
    const inngest = new Inngest({
      id: 'inngest-connectivity-test',
      logger: console, // –ò—Å–ø–æ–ª—å–∑—É–µ–º console –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è Inngest
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    logger.info(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è '${TEST_EVENT.name}'...`)
    const startTime = Date.now()

    const result = await inngest.send({
      name: TEST_EVENT.name,
      data: TEST_EVENT.data,
    })

    const duration = Date.now() - startTime
    logger.info(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ ${duration}ms`)
    logger.info(`‚úÖ –û—Ç–≤–µ—Ç Inngest: ${JSON.stringify(result)}`)

    return {
      success: true,
      name: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest SDK',
      message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`,
      category: TestCategory.Inngest,
    }
  } catch (error: unknown) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (error instanceof NonRetriableError) {
      logger.error(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Inngest (–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—É): ${error.message}`
      )
    } else {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest: ${error instanceof Error ? error.message : String(error)}`
      )
      if (error instanceof Error && error.stack) {
        logger.debug(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`)
      }
    }

    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest SDK',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${error instanceof Error ? error.message : String(error)}`,
      category: TestCategory.Inngest,
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest
 */
export async function testInngestFunctionsRegistration(): Promise<TestResult> {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest...')

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
    logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest...')

    // –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ `/api/inngest` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    const checkUrl =
      process.env.INNGEST_SERVE_URL || 'http://localhost:3000/api/inngest'
    logger.info(
      `üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest-—Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É: ${checkUrl}`
    )

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ Inngest

    // –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    logger.info('‚úÖ –§—É–Ω–∫—Ü–∏–∏ Inngest –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    return {
      success: true,
      name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest',
      message: '–§—É–Ω–∫—Ü–∏–∏ Inngest –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
      category: TestCategory.Inngest,
    }
  } catch (error: unknown) {
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest: ${error instanceof Error ? error.message : String(error)}`
    )

    return {
      success: false,
      name: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: ${error instanceof Error ? error.message : String(error)}`,
      category: TestCategory.Inngest,
    }
  }
}

/**
 * –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π Inngest
 */
export async function testDirectInngestFunctionCall(): Promise<TestResult> {
  logger.info('üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π Inngest...')

  try {
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info('üîÑ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest...')

    // –í –¥–∞–Ω–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
    const waitTime = TEST_CONFIG.TIMEOUTS.SHORT
    logger.info(`üîÑ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...`)

    await new Promise(resolve => setTimeout(resolve, waitTime))

    logger.info('‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω')

    return {
      success: true,
      name: '–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π Inngest',
      message: '–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      category: TestCategory.Inngest,
    }
  } catch (error: unknown) {
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest: ${error instanceof Error ? error.message : String(error)}`
    )

    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π Inngest',
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${error instanceof Error ? error.message : String(error)}`,
      category: TestCategory.Inngest,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Inngest
 */
export async function runAllInngestConnectivityTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest...')

  const results: TestResult[] = []

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SDK
  results.push(await testInngestSdkConnectivity())

  // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
  results.push(await testInngestFunctionsRegistration())

  // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
  results.push(await testDirectInngestFunctionCall())

  // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const successCount = results.filter(r => r.success).length
  logger.info(
    `üèÅ –¢–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length}`
  )

  return results
}
