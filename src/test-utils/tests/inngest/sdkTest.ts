import { Inngest, NonRetriableError } from 'inngest'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SDK Inngest
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ SDK Inngest –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
export async function runInngestSDKTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ SDK Inngest')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ —Å–æ–±—ã—Ç–∏—è
    const eventKey = process.env.INNGEST_EVENT_KEY
    if (!eventKey) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è INNGEST_EVENT_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞')
    }

    logger.info('‚úÖ –ö–ª—é—á —Å–æ–±—ã—Ç–∏—è Inngest –Ω–∞–π–¥–µ–Ω')
    logger.info('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Inngest:')
    logger.info(`- INNGEST_EVENT_KEY: ${eventKey ? '–∑–∞–¥–∞–Ω' : '–Ω–µ –∑–∞–¥–∞–Ω'}`)
    logger.info(
      `- INNGEST_SIGNING_KEY: ${process.env.INNGEST_SIGNING_KEY ? '–∑–∞–¥–∞–Ω' : '–Ω–µ –∑–∞–¥–∞–Ω'}`
    )
    logger.info(
      `- INNGEST_URL: ${process.env.INNGEST_URL || '–Ω–µ –∑–∞–¥–∞–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`
    )

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Inngest
    const inngest = new Inngest({
      id: 'neuro-blogger-test-sdk',
      logger: console,
    })

    logger.info('‚úÖ –ö–ª–∏–µ–Ω—Ç Inngest –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await sendTestEvent(inngest)

    logger.info('‚úÖ –¢–µ—Å—Ç SDK Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω')
    return {
      success: true,
      message: '–¢–µ—Å—Ç SDK Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Inngest SDK Test',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ SDK Inngest')
    logger.error(`üìÑ –û—à–∏–±–∫–∞: ${error.message}`)

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SDK Inngest: ${error.message}`,
      name: 'Inngest SDK Test',
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK Inngest
 */
async function sendTestEvent(inngestClient: Inngest): Promise<void> {
  try {
    logger.info('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SDK')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const testEvent = {
      name: 'test/sdk-test-event',
      data: {
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç SDK',
        timestamp: new Date().toISOString(),
        testId: `sdk-test-${Date.now()}`,
      },
    }

    logger.info(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${testEvent.name}`)
    logger.debug('üìä –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:', testEvent.data)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK...')
    await inngestClient.send(testEvent)

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK')
  } catch (error: any) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ Inngest
    if (error instanceof NonRetriableError) {
      logger.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Inngest (NonRetriableError):',
        error.message
      )
    } else {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK:', error.message)
    }

    throw error
  }
}
