import { TestResult } from '../../core/types'
import { logger } from '@/utils/logger'
import { TestCategory } from '../../core/categories'
import { create as mock } from '../../core/mock'

interface ModelTrainingData {
  bot_name: string
  is_ru: boolean
  modelName: string
  steps: number
  telegram_id: string
  triggerWord: string
  zipUrl: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
 */
interface ModelTestResult {
  testName: string
  success: boolean
  message: string
  details?: any
  error?: string
  duration?: number
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ (Digital Avatar Body)
 */
export async function testModelTraining(
  data?: Partial<ModelTrainingData>
): Promise<TestResult> {
  const defaultData: ModelTrainingData = {
    bot_name: 'test_bot',
    is_ru: true,
    modelName: 'test_training_model',
    steps: 1500,
    telegram_id: '123456789',
    triggerWord: 'person_test',
    zipUrl: 'https://example.com/training-images.zip',
    ...data,
  }

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ (Digital Avatar Body)',
    description: 'Model training function test',
    data: {
      ...defaultData,
      zipUrl: defaultData.zipUrl.substring(0, 30) + '...',
    },
  })

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –≤ Inngest —á–µ—Ä–µ–∑ –º–æ–∫
  const mockSendEvent =
    mock<(name: string, data: any) => Promise<ModelTestResult>>()
  mockSendEvent.mockResolvedValue({
    testName: 'Model Training',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'model-training/start',
      responseStatus: 200,
    },
    duration: 200,
  })

  try {
    // –í—ã–∑—ã–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
    const result = await mockSendEvent('model-training/start', defaultData)

    return {
      name: 'Model Training Test',
      success: result.success,
      message: `–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: result.details,
      category: TestCategory.ModelTraining,
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      description: 'Error during model training test',
      error: errorMessage,
    })

    return {
      name: 'Model Training Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.ModelTraining,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2 (Digital Avatar Body V2)
 */
export async function testModelTrainingV2(
  data?: Partial<ModelTrainingData>
): Promise<TestResult> {
  const defaultData: ModelTrainingData = {
    bot_name: 'test_bot',
    is_ru: true,
    modelName: 'test_training_model_v2',
    steps: 2000,
    telegram_id: '123456789',
    triggerWord: 'person_test_v2',
    zipUrl: 'https://example.com/training-images-v2.zip',
    ...data,
  }

  logger.info({
    message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2 (Digital Avatar Body V2)',
    description: 'Model training V2 function test',
    data: {
      ...defaultData,
      zipUrl: defaultData.zipUrl.substring(0, 30) + '...',
    },
  })

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –≤ Inngest —á–µ—Ä–µ–∑ –º–æ–∫
  const mockSendEvent =
    mock<(name: string, data: any) => Promise<ModelTestResult>>()
  mockSendEvent.mockResolvedValue({
    testName: 'Model Training V2',
    success: true,
    message: '–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    details: {
      eventName: 'model-training-v2/start',
      responseStatus: 200,
    },
    duration: 250,
  })

  try {
    // –í—ã–∑—ã–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
    const result = await mockSendEvent('model-training-v2/start', defaultData)

    return {
      name: 'Model Training V2 Test',
      success: result.success,
      message: `–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${result.message}`,
      details: result.details,
      category: TestCategory.ModelTraining,
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
      description: 'Error during model training V2 test',
      error: errorMessage,
    })

    return {
      name: 'Model Training V2 Test',
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2: ${errorMessage}`,
      error: errorMessage,
      category: TestCategory.ModelTraining,
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
 */
export async function runModelTrainingTests(): Promise<TestResult[]> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π',
    description: 'Running all model training tests',
  })

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
  results.push(await testModelTraining())

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π V2
  results.push(await testModelTrainingV2())

  logger.info({
    message: '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
    description: 'All model training tests completed',
    successCount: results.filter(r => r.success).length,
    totalCount: results.length,
  })

  return results
}
