import { InngestFunctionTester } from '../../testers/InngestFunctionTester'
import { logger } from '@/utils/logger'
import { TestResult } from '../../types'
import { Inngest } from 'inngest'
import axios from 'axios'

/**
 * –¢–µ—Å—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
const tester = new InngestFunctionTester({
  verbose: true,
})

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
 */
export async function testModelTraining() {
  logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏')
  return tester.testModelTraining()
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
export async function testNeuroPhotoGeneration() {
  logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ')
  return tester.testNeuroImageGeneration()
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export async function testNeuroPhotoV2Generation() {
  logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2')
  return tester.testNeuroPhotoV2Generation()
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ
 */
export async function testTextToVideo() {
  logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ')
  return tester.testTextToVideo()
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export async function runAllBasicTests() {
  logger.info('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π')
  const results = []

  try {
    results.push(await testModelTraining())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏', error)
    results.push({ success: false, error })
  }

  try {
    results.push(await testNeuroPhotoGeneration())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', error)
    results.push({ success: false, error })
  }

  try {
    results.push(await testNeuroPhotoV2Generation())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2', error)
    results.push({ success: false, error })
  }

  try {
    results.push(await testTextToVideo())
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ', error)
    results.push({ success: false, error })
  }

  return results
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ SDK
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */
export async function runInngestSDKTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Inngest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SDK', {
      description: 'Initializing Inngest client for SDK testing',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.INNGEST_EVENT_KEY) {
      throw new Error('‚ùå INNGEST_EVENT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      description: 'Checking environment variables',
      inngestEventKeyExists: !!process.env.INNGEST_EVENT_KEY,
      inngestSigningKeyExists: !!process.env.INNGEST_SIGNING_KEY,
      inngestUrl:
        process.env.INNGEST_URL ||
        '–Ω–µ —É–∫–∞–∑–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)',
    })

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Inngest
    const inngest = new Inngest({
      id: 'inngest-sdk-test',
      logger: logger,
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testEventData = {
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SDK Inngest',
      timestamp: Date.now(),
      type: 'sdk-test',
    }

    logger.info('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è', {
      description: 'Preparing test event data',
      data: testEventData,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    logger.info('‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK', {
      description: 'Sending event via SDK',
    })

    const result = await inngest.send({
      name: 'test/sdk-event',
      data: testEventData,
    })

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK', {
      description: 'Event successfully sent via SDK',
      result,
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Inngest SDK Test',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ SDK Inngest', {
      description: 'Error during Inngest SDK test execution',
      error: error.message,
    })

    if (error.cause) {
      logger.error('üìÑ –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏:', {
        description: 'Error cause details',
        cause: error.cause,
      })
    }

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SDK Inngest: ${error.message}`,
      name: 'Inngest SDK Test',
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP API
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ REST API
 */
export async function runInngestDirectAPITest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ HTTP API', {
      description: 'Starting Inngest HTTP API test',
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const INNGEST_EVENT_KEY = process.env.INNGEST_EVENT_KEY
    const INNGEST_URL =
      process.env.INNGEST_URL || 'https://api.inngest.com/e/v1/events'

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
    if (!INNGEST_EVENT_KEY) {
      throw new Error('‚ùå INNGEST_EVENT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    }

    logger.info('üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Inngest:', {
      description: 'Inngest API configuration',
      inngestEventKeyExists: !!INNGEST_EVENT_KEY,
      inngestUrl: INNGEST_URL,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const testEvent = {
      name: 'test/direct-api-event',
      data: {
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ HTTP API Inngest',
        timestamp: new Date().toISOString(),
        type: 'direct-api-test',
      },
      id: `test-${Date.now()}`,
      ts: Date.now(),
    }

    logger.info('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è', {
      description: 'Preparing test event data',
      event: testEvent,
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API
    logger.info('‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API', {
      description: 'Sending event via HTTP API',
    })

    const response = await axios({
      method: 'post',
      url: INNGEST_URL,
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${INNGEST_EVENT_KEY}`,
      },
      data: [testEvent],
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (response.status >= 200 && response.status < 300) {
      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API', {
        description: 'Event successfully sent via HTTP API',
        status: response.status,
        data: response.data,
      })

      return {
        success: true,
        message: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        name: 'Inngest Direct API Test',
      }
    } else {
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`)
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ HTTP API Inngest', {
      description: 'Error during Inngest HTTP API test',
      error: error.message,
    })

    if (error.response) {
      logger.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π:', {
        description: 'Error response details',
        status: error.response.status,
        data: error.response.data,
      })
    }

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTTP API Inngest: ${error.message}`,
      name: 'Inngest Direct API Test',
    }
  }
}

/**
 * –¢–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ Inngest
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ª–µ–≥–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–æ—Å—Ç—É–ø–µ–Ω
 */
export async function runInngestAvailabilityTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ Inngest', {
      description: 'Starting Inngest availability test',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = {
      INNGEST_EVENT_KEY: !!process.env.INNGEST_EVENT_KEY,
      INNGEST_SIGNING_KEY: !!process.env.INNGEST_SIGNING_KEY,
      INNGEST_URL: !!process.env.INNGEST_URL,
    }

    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', {
      description: 'Checking configuration',
      envCheck,
    })

    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–æ–π
    if (!envCheck.INNGEST_EVENT_KEY) {
      logger.warn(
        '‚ö†Ô∏è INNGEST_EVENT_KEY –Ω–µ –∑–∞–¥–∞–Ω, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π',
        {
          description: 'Missing INNGEST_EVENT_KEY environment variable',
        }
      )
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Inngest Availability Test',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest', {
      description: 'Error during Inngest availability test',
      error: error.message,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest: ${error.message}`,
      name: 'Inngest Availability Test',
    }
  }
}
