import axios, { AxiosRequestConfig, Method } from 'axios'
import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import { TEST_CONFIG } from '../../test-config'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
const BASE_API_URL = process.env.API_BASE_URL || 'http://localhost:3000'
const INNGEST_API_URL =
  process.env.INNGEST_SERVE_URL || `${BASE_API_URL}/api/inngest`

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è Inngest API
const INNGEST_API_BASE_URL = 'https://api.inngest.com'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API
interface ApiEndpoint {
  name: string
  url: string
  method: Method
  expectedStatus: number
  description: string
  headers?: Record<string, string>
  data?: any
  timeout?: number
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API endpoint
interface InngestEndpoint {
  name: string
  path: string
  method: 'GET' | 'POST'
  requiresAuth: boolean
  description: string
  expectedStatus: number
}

// –°–ø–∏—Å–æ–∫ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–û—Å–Ω–æ–≤–Ω–æ–π API',
    url: `${BASE_API_URL}/api/health`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞',
  },
  {
    name: 'Inngest API',
    url: INNGEST_API_URL,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API',
  },
  {
    name: 'Inngest Dev Tools',
    url: `${INNGEST_API_URL}/dev`,
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Inngest',
  },
]

/**
 * –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Inngest API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
const INNGEST_ENDPOINTS: InngestEndpoint[] = [
  {
    name: 'Health Check',
    path: '/v0/health',
    method: 'GET',
    requiresAuth: false,
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Inngest API',
  },
  {
    name: 'Event API',
    path: '/v0/events',
    method: 'POST',
    requiresAuth: true,
    expectedStatus: 200,
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Inngest API',
  },
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface EndpointTestResult {
  endpoint: InngestEndpoint
  success: boolean
  statusCode?: number
  error?: string
  responseTime?: number
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Inngest API
 */
async function testEndpoint(
  endpoint: InngestEndpoint
): Promise<EndpointTestResult> {
  const startTime = Date.now()
  let statusCode: number | undefined

  try {
    logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ Inngest API: ${endpoint.name}`, {
      description: `Testing Inngest API endpoint: ${endpoint.name}`,
      endpoint: endpoint.path,
      method: endpoint.method,
    })

    const url = `${INNGEST_API_BASE_URL}${endpoint.path}`
    const config: any = {
      method: endpoint.method,
      url,
      timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (endpoint.requiresAuth && process.env.INNGEST_EVENT_KEY) {
      config.headers = {
        Authorization: `Bearer ${process.env.INNGEST_EVENT_KEY}`,
      }

      // –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (endpoint.method === 'POST') {
        config.data = {
          name: 'test/http.api.connection',
          data: {
            testId: `api-test-${Date.now()}`,
            timestamp: new Date().toISOString(),
          },
        }
      }
    }

    const response = await axios(config)
    statusCode = response.status

    const responseTime = Date.now() - startTime

    logger.info(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}`, {
      description: `Successfully tested endpoint: ${endpoint.name}`,
      statusCode,
      responseTime: `${responseTime}ms`,
    })

    return {
      endpoint,
      success: statusCode >= 200 && statusCode < 300,
      statusCode,
      responseTime,
    }
  } catch (error: any) {
    const responseTime = Date.now() - startTime
    const errorMessage = error.response
      ? `Status: ${error.response.status} - ${error.response.statusText}`
      : error.message

    statusCode = error.response?.status

    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}`, {
      description: `Error testing endpoint: ${endpoint.name}`,
      error: errorMessage,
      statusCode,
      responseTime: `${responseTime}ms`,
    })

    return {
      endpoint,
      success: false,
      statusCode,
      error: errorMessage,
      responseTime,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest —á–µ—Ä–µ–∑ HTTP API
 */
export async function testInngestHttpApi(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Inngest HTTP API', {
    description: 'Running Inngest HTTP API test',
  })

  try {
    const endpointResults: EndpointTestResult[] = []

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    for (const endpoint of INNGEST_ENDPOINTS) {
      const result = await testEndpoint(endpoint)
      endpointResults.push(result)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const allSuccessful = endpointResults.every(result => result.success)
    const successCount = endpointResults.filter(result => result.success).length

    if (allSuccessful) {
      logger.info('‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Inngest API –¥–æ—Å—Ç—É–ø–Ω—ã', {
        description: 'All Inngest API endpoints are accessible',
        successCount,
        totalCount: endpointResults.length,
      })

      return {
        name: '–¢–µ—Å—Ç HTTP API Inngest',
        category: TestCategory.Inngest,
        success: true,
        message: `–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Inngest API (${successCount}/${endpointResults.length}) –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç`,
      }
    } else {
      const failedEndpoints = endpointResults
        .filter(result => !result.success)
        .map(result => result.endpoint.name)
        .join(', ')

      logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', {
        description: 'Some Inngest API endpoints are not accessible',
        successCount,
        totalCount: endpointResults.length,
        failedEndpoints,
      })

      return {
        name: '–¢–µ—Å—Ç HTTP API Inngest',
        category: TestCategory.Inngest,
        success: successCount > 0, // –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        message: `${successCount}/${endpointResults.length} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Inngest API –¥–æ—Å—Ç—É–ø–Ω—ã. –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${failedEndpoints}`,
      }
    }
  } catch (error: any) {
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'

    if (error instanceof Error) {
      errorMessage = error.message
    } else if (typeof error === 'string') {
      errorMessage = error
    } else if (error && typeof error === 'object') {
      errorMessage = JSON.stringify(error)
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTTP API Inngest', {
      description: 'Error in Inngest HTTP API test',
      error: errorMessage,
    })

    return {
      name: '–¢–µ—Å—Ç HTTP API Inngest',
      category: TestCategory.Inngest,
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ HTTP API Inngest: ${errorMessage}`,
      error: errorMessage,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
export async function runHttpApiTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ HTTP API', {
    description: 'Running all HTTP API tests',
  })

  const results: TestResult[] = []

  try {
    // –¢–µ—Å—Ç Inngest HTTP API
    const inngestApiResult = await testInngestHttpApi()
    results.push(inngestApiResult)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ API_ENDPOINTS
    for (const endpoint of API_ENDPOINTS) {
      try {
        logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`, {
          description: `Testing general API endpoint: ${endpoint.name}`,
          url: endpoint.url,
        })

        const config: AxiosRequestConfig = {
          method: endpoint.method,
          url: endpoint.url,
          headers: endpoint.headers || {},
          data: endpoint.data,
          timeout: endpoint.timeout || TEST_CONFIG.TIMEOUTS.MEDIUM,
        }

        const startTime = Date.now()
        const response = await axios(config)
        const duration = Date.now() - startTime

        const success = response.status === endpoint.expectedStatus

        if (success) {
          logger.info(
            `‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${duration}ms`
          )
        } else {
          logger.warn(
            `‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`
          )
        }

        results.push({
          success,
          name: `API –¢–µ—Å—Ç: ${endpoint.name}`,
          message: success
            ? `–≠–Ω–¥–ø–æ–∏–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: ${response.status}. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${duration}ms`
            : `–≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`,
          category: TestCategory.Api,
          details: {
            endpoint: endpoint.url,
            statusCode: response.status,
            expectedStatusCode: endpoint.expectedStatus,
            responseTime: duration,
          },
        })
      } catch (error: unknown) {
        const errorMessage =
          error instanceof Error ? error.message : String(error)

        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`
        )

        results.push({
          success: false,
          name: `API –¢–µ—Å—Ç: ${endpoint.name}`,
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${errorMessage}`,
          category: TestCategory.Api,
          details: {
            endpoint: endpoint.url,
            error: errorMessage,
          },
        })
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successCount = results.filter(result => result.success).length

    logger.info(
      `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã HTTP API: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`,
      {
        description: `Completed all HTTP API tests: ${successCount}/${results.length} successful`,
      }
    )

    return results
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ HTTP API', {
      description: 'Error running HTTP API tests',
      error: errorMessage,
    })

    return [
      {
        name: '–¢–µ—Å—Ç—ã HTTP API',
        category: TestCategory.Inngest,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ HTTP API: ${errorMessage}`,
        error: errorMessage,
      },
    ]
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
 */
export function generateApiReport(results: TestResult[]): string {
  const successCount = results.filter(r => r.success).length
  const totalCount = results.length
  const successRate = Math.round((successCount / totalCount) * 100)

  let report = `üîç –û–¢–ß–ï–¢ –û –î–û–°–¢–£–ü–ù–û–°–¢–ò API\n`
  report += `======================================\n`
  report += `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount} (${successRate}%)\n`
  report += `‚ùå –û—à–∏–±–∫–∏: ${totalCount - successCount}\n`
  report += `======================================\n\n`

  report += `–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø:\n`

  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå'
    report += `${index + 1}. ${status} ${result.name}\n`
    report += `   ${result.message}\n`
    if (result.details) {
      const responseTime = result.details.responseTime
        ? `–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${result.details.responseTime}ms`
        : ''
      report += `   ${responseTime}\n`
    }
    report += `\n`
  })

  return report
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export default {
  testInngestHttpApi,
  runHttpApiTests,
  generateApiReport,
}
