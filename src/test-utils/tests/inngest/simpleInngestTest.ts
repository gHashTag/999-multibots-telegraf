import { logger } from '../../../utils/logger'
import { TestResult } from '../../types'
import { TestCategory } from '../../core/categories'
import fetch from 'node-fetch'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Inngest —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTTP API
 *
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function testInngestConnectivity(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ [INNGEST_CONNECTIVITY_TEST]: –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest',
      {
        description: 'Starting Inngest connectivity test',
      }
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const inngestEventKey = process.env.INNGEST_EVENT_KEY
    const inngestUrl = process.env.INNGEST_URL || 'https://api.inngest.com'
    const inngestBaseUrl = process.env.INNGEST_BASE_URL
    const inngestBaseDockerUrl = process.env.INNGEST_BASE_DOCKER_URL
    const inngestWebhookUrl = process.env.INNGEST_WEBHOOK_URL
    const inngestSigningKey = process.env.INNGEST_SIGNING_KEY
    const isDev = process.env.INNGEST_DEV === '1'

    logger.info(
      '‚ÑπÔ∏è [INNGEST_CONNECTIVITY_TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
      {
        description: 'Checking environment variables',
        inngestEventKey: inngestEventKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        inngestSigningKey: inngestSigningKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        inngestUrl,
        inngestBaseUrl,
        inngestBaseDockerUrl,
        inngestWebhookUrl,
        isDev,
        nodeEnv: process.env.NODE_ENV,
      }
    )

    if (!inngestEventKey) {
      throw new Error('INNGEST_EVENT_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
    const isProdAvailable = await checkEndpointAvailability(
      'https://api.inngest.com'
    )
    const isLocalAvailable = inngestBaseUrl
      ? await checkEndpointAvailability(inngestBaseUrl)
      : false
    const isDockerAvailable = inngestBaseDockerUrl
      ? await checkEndpointAvailability(inngestBaseDockerUrl)
      : false

    logger.info(
      '‚ÑπÔ∏è [INNGEST_CONNECTIVITY_TEST]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
      {
        description: 'Endpoint availability check results',
        prodApiAvailable: isProdAvailable,
        localApiAvailable: isLocalAvailable,
        dockerApiAvailable: isDockerAvailable,
      }
    )

    return {
      success: true,
      message: `–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω. Inngest API ${isProdAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`,
      name: 'Inngest Connectivity Test',
      category: TestCategory.Inngest,
      details: {
        isProdAvailable,
        isLocalAvailable,
        isDockerAvailable,
      },
    }
  } catch (error) {
    logger.error(
      '‚ùå [INNGEST_CONNECTIVITY_TEST]: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest',
      {
        description: 'Error during Inngest connectivity test',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      }
    )

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest: ${error instanceof Error ? error.message : String(error)}`,
      name: 'Inngest Connectivity Test',
      category: TestCategory.Inngest,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 *
 * @param url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns Promise<boolean> - true –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
 */
async function checkEndpointAvailability(url: string): Promise<boolean> {
  try {
    logger.info('üîç [INNGEST_CONNECTIVITY_TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL', {
      description: 'Checking endpoint availability',
      url,
    })

    const response = await fetch(url, {
      method: 'HEAD',
    })

    const isAvailable = response.ok || response.status < 500

    logger.info(
      `${isAvailable ? '‚úÖ' : '‚ùå'} [INNGEST_CONNECTIVITY_TEST]: –≠–Ω–¥–ø–æ–∏–Ω—Ç ${url} ${isAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`,
      {
        description: `Endpoint ${url} ${isAvailable ? 'is available' : 'is not available'}`,
        status: response.status,
        statusText: response.statusText,
      }
    )

    return isAvailable
  } catch (error) {
    logger.error(
      '‚ùå [INNGEST_CONNECTIVITY_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL',
      {
        description: 'Error occurred while checking endpoint availability',
        url,
        error: error instanceof Error ? error.message : String(error),
      }
    )

    return false
  }
}
