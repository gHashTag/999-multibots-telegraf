import { TestResult } from '../../types'
import { TEST_CONFIG, inngestTestEngine } from '../../test-config'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function testImageToVideoPayment(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    console.log(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )

    // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    inngestTestEngine.clearEvents()
    console.log('üßπ –°–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã')

    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testTelegramId = TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID
    const testBotName = TEST_CONFIG.TEST_DATA.TEST_BOT_NAME

    console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      telegram_id: testTelegramId,
      bot_name: testBotName,
      mode: ModeEnum.ImageToVideo,
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º modelId
    const expectedCost = calculateModeCost({
      mode: ModeEnum.ImageToVideo,
      modelId: 'minimax', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }).stars

    console.log('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
      cost: expectedCost,
      mode: ModeEnum.ImageToVideo,
      modelId: 'minimax',
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ imageToVideo')
    await inngestTestEngine.sendEvent('image-to-video/generate', {
      telegram_id: testTelegramId,
      bot_name: testBotName,
      image_url: 'https://example.com/test.jpg',
      is_ru: true,
      username: 'testuser',
      model_id: 'minimax', // –î–æ–±–∞–≤–ª—è–µ–º modelId
      _test: {
        skip_generation: true,
        skip_sending: true,
        skip_balance_check: true,
        skip_payment: false,
      },
    })

    console.log('‚åõ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π...')
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000)) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 1000–º—Å –¥–æ 2000–º—Å –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    console.log(
      'üîÑ –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é'
    )
    await inngestTestEngine.sendEvent('payment/process', {
      telegram_id: testTelegramId,
      amount: expectedCost,
      stars: expectedCost,
      type: TransactionType.MONEY_EXPENSE,
      description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ—Å—Ç)',
      bot_name: testBotName,
      service_type: ModeEnum.ImageToVideo,
      metadata: {
        image_url: 'https://example.com/test.jpg',
        is_test: true,
        operation_id: 'test-id-123',
      },
    })

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000))

    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π:')
    const allEvents = inngestTestEngine.getAllEvents()
    console.log(`–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${allEvents.length}`)
    allEvents.forEach((event, index) => {
      console.log(`–°–æ–±—ã—Ç–∏–µ ${index + 1}: ${event.name}`, { data: event.data })
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const paymentEvents = inngestTestEngine.getEventsByName('payment/process')
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${paymentEvents.length} –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`)

    if (paymentEvents.length === 0) {
      return {
        success: false,
        message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
        name: 'testImageToVideoPayment',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
    const payment = paymentEvents[0].data
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', payment)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (
      payment.type !== TransactionType.MONEY_EXPENSE &&
      payment.type !== TransactionType.MONEY_EXPENSE.toLowerCase()
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${payment.type}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${TransactionType.MONEY_EXPENSE}`,
        name: 'testImageToVideoPayment',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      payment.telegram_id !== testTelegramId ||
      Math.abs(Number(payment.amount) - expectedCost) > 0.01 ||
      payment.service_type !== ModeEnum.ImageToVideo
    ) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞: ${JSON.stringify(payment)}, –æ–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${expectedCost}`,
        name: 'testImageToVideoPayment',
      }
    }

    return {
      success: true,
      message:
        '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testImageToVideoPayment',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testImageToVideoPayment',
    }
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function testImageToVideoErrorHandling(): Promise<TestResult> {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )

    // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    inngestTestEngine.clearEvents()

    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testTelegramId = TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID
    const testBotName = TEST_CONFIG.TEST_DATA.TEST_BOT_NAME

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await inngestTestEngine.sendEvent('image-to-video/generate', {
      telegram_id: testTelegramId,
      bot_name: testBotName,
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ image_url
      is_ru: true,
      _test: {
        api_error: true, // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É API
      },
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorEvents = inngestTestEngine.getEventsByName(
      'image-to-video/error'
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (errorEvents.length > 0) {
      logger.info(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${errorEvents.length} —Å–æ–±—ã—Ç–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö`)
    }

    // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ —Å–æ–±—ã—Ç–∏—è
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω
    const paymentEvents = inngestTestEngine.getEventsByName('payment/process')

    if (paymentEvents.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
      const isRefund = paymentEvents.some(e => e.data.type === 'refund')

      if (!isRefund) {
        return {
          success: false,
          message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É',
          name: 'testImageToVideoErrorHandling',
        }
      }
    }

    return {
      success: true,
      message:
        '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testImageToVideoErrorHandling',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testImageToVideoErrorHandling',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ imageToVideo
 */
export async function runImageToVideoFuncTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è imageToVideo')
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è imageToVideo')

  const results: TestResult[] = []

  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    results.push(await testImageToVideoPayment())

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–ª–∞—Ç–µ–∂–∞
    try {
      const testTelegramId = TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID
      const testBotName = TEST_CONFIG.TEST_DATA.TEST_BOT_NAME
      const cost = calculateModeCost({
        mode: ModeEnum.ImageToVideo,
        modelId: 'minimax',
      }).stars

      logger.info('üí≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', {
        cost,
        telegram_id: testTelegramId,
        modelId: 'minimax',
      })
      console.log('üí≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', {
        cost,
        telegram_id: testTelegramId,
        modelId: 'minimax',
      })

      // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
      inngestTestEngine.clearEvents()

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é
      await inngestTestEngine.sendEvent('payment/process', {
        telegram_id: testTelegramId,
        amount: cost,
        stars: cost,
        type: TransactionType.MONEY_EXPENSE,
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ Image-to-Video',
        bot_name: testBotName,
        service_type: ModeEnum.ImageToVideo,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è
      const paymentEvents = inngestTestEngine.getEventsByName('payment/process')

      logger.info(`–ü–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${paymentEvents.length}`, {
        eventCount: paymentEvents.length,
      })
      console.log(`–ü–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${paymentEvents.length}`, {
        eventCount: paymentEvents.length,
      })

      if (paymentEvents.length === 0) {
        results.push({
          success: false,
          message: '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏',
          name: 'testImageToVideoPaymentDirect',
        })
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
        const payment = paymentEvents[0].data
        logger.info('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', payment)
        console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', payment)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (
          payment.type !== TransactionType.MONEY_EXPENSE &&
          payment.type !== TransactionType.MONEY_EXPENSE.toLowerCase()
        ) {
          results.push({
            success: false,
            message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${payment.type}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${TransactionType.MONEY_EXPENSE}`,
            name: 'testImageToVideoPaymentDirect',
          })
        } else {
          results.push({
            success: true,
            message:
              '–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
            name: 'testImageToVideoPaymentDirect',
          })
        }
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', error)

      results.push({
        success: false,
        message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
        name: 'testImageToVideoPaymentDirect',
      })
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    results.push(await testImageToVideoErrorHandling())

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    logger.info(
      `‚úÖ –¢–µ—Å—Ç—ã image-to-video: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏`,
      {
        results: results.map(r => ({
          name: r.name,
          success: r.success,
          message: r.message,
        })),
      }
    )
    console.log(
      `‚úÖ –¢–µ—Å—Ç—ã image-to-video: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏`
    )
    results.forEach((result, index) => {
      console.log(
        `${index + 1}. ${result.name}: ${result.success ? '‚úì' : '‚úó'} - ${result.message}`
      )
    })

    return results
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ imageToVideo',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    return [
      {
        success: false,
        message: `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${
          error instanceof Error ? error.message : String(error)
        }`,
        name: 'runImageToVideoFuncTests',
      },
    ]
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
if (require.main === module) {
  ;(async () => {
    try {
      const results = await runImageToVideoFuncTests()
      const successCount = results.filter(r => r.success).length

      logger.info(
        `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ`
      )

      if (successCount < results.length) {
        logger.error({
          message: '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏',
          failedTests: results.filter(r => !r.success).map(r => r.name),
        })
        process.exit(1)
      }

      process.exit(0)
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    }
  })()
}
