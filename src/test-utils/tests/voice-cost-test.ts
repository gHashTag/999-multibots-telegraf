import { logger } from '@/utils/logger'
import { TestResult } from '../types'
import { calculateModeCost, ModeEnum } from '@/price/helpers/modelsCost'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ TextToVoice
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function testVoiceCost(): Promise<TestResult> {
  const testName = 'Voice Cost Test'

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞', {
      description: 'Starting voice cost calculation test',
      test_name: testName,
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞ TextToVoice
    const cost = calculateModeCost({ mode: ModeEnum.TextToVoice })

    logger.info('üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', {
      description: 'Calculated cost',
      test_name: testName,
      stars: cost.stars,
      rubles: cost.rubles,
      dollars: cost.dollars,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
    if (cost.stars <= 0) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö: ${cost.stars}`)
    }

    if (cost.rubles <= 0) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: ${cost.rubles}`)
    }

    if (cost.dollars <= 0) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: ${cost.dollars}`)
    }

    logger.info('‚úÖ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Voice cost calculation test completed successfully',
      test_name: testName,
    })

    return {
      name: testName,
      success: true,
      message: `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${cost.stars} –∑–≤–µ–∑–¥ (${cost.rubles} —Ä—É–±.)`,
      startTime: Date.now(),
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    const err = error instanceof Error ? error : new Error(errorMessage)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞', {
      description: 'Error in voice cost calculation',
      test_name: testName,
      error: errorMessage,
    })

    return {
      name: testName,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞',
      error: err,
      startTime: Date.now(),
    }
  }
}
