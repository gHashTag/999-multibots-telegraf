import { TEST_CONFIG } from '../test-config'
import { TestResult } from '../interfaces'
import { getUserBalance } from '../../core/supabase/getUserBalance'
import { logger } from '../../utils/logger'

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ getUserBalance
 */
export const runBalanceTest = async (): Promise<TestResult> => {
  const testName = 'üè¶ Test getUserBalance'
  const startTime = Date.now()

  try {
    logger.info('üöÄ Starting balance test', {
      description: 'Testing getUserBalance function',
    })

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balance = await getUserBalance(
      TEST_CONFIG.TEST_USER_ID,
      TEST_CONFIG.TEST_BOT_NAME
    )

    logger.info('‚úÖ Balance retrieved successfully', {
      balance,
      user_id: TEST_CONFIG.TEST_USER_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
    })

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nonExistentBalance = await getUserBalance(
      '999999999',
      TEST_CONFIG.TEST_BOT_NAME
    )

    if (nonExistentBalance !== 0) {
      throw new Error('Non-existent user should have 0 balance')
    }

    logger.info('‚úÖ Non-existent user test passed', {
      balance: nonExistentBalance,
    })

    return {
      name: testName,
      success: true,
      message: '‚úÖ Balance tests completed successfully',
      startTime,
    }
  } catch (error) {
    logger.error('‚ùå Balance test failed', { error })

    return {
      name: testName,
      success: false,
      message: '‚ùå Balance test failed',
      error: error instanceof Error ? error : new Error(String(error)),
      startTime,
    }
  }
}
