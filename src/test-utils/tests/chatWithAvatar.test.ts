import { TEST_CONFIG } from '../test-config'
import { TestResult } from '../types'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { InngestTestEngine } from '../inngest-test-engine'
import { voiceToTextProcessor } from '@/inngest-functions/voiceToText.inngest'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'
import { handleTextMessage } from '@/handlers/handleTextMessage'
import { Context } from 'telegraf'
import { Update } from 'telegraf/typings/core/types/typegram'
import { createUser } from '@/core/supabase/createUser'
import * as fs from 'fs'
import * as path from 'path'

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ OGG —Ñ–∞–π–ª–∞ (OggS + –≤–µ—Ä—Å–∏—è + —Ç–∏–ø –∑–∞–≥–æ–ª–æ–≤–∫–∞)
const OGG_HEADER = Buffer.from([
  0x4f,
  0x67,
  0x67,
  0x53, // OggS
  0x00, // –í–µ—Ä—Å–∏—è
  0x02, // –¢–∏–ø –∑–∞–≥–æ–ª–æ–≤–∫–∞
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00, // –ì—Ä–∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
  0x00,
  0x00,
  0x00,
  0x00, // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
  0x00,
  0x00,
  0x00,
  0x00, // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  0x01, // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
  0x01, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  0x1e, // –†–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
])

interface TextMessageEvent {
  telegram_id: string
  text: string
  bot_name: string
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
 */
export async function testChatWithAvatar(): Promise<TestResult> {
  const testName = 'Chat with Avatar Test'
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegram_id = '123456789'
    const username = 'test_user'
    const user = await createUser({
      telegram_id,
      username,
      language_code: 'en',
      bot_name: 'test_bot',
    })

    if (!user) {
      throw new Error('User was not created')
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const testAudioPath = path.join(__dirname, 'test_voice.ogg')
    fs.writeFileSync(testAudioPath, OGG_HEADER)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    const testEngine = new InngestTestEngine()

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    testEngine.registerEventHandler(
      'text-message.requested',
      async ({ event }: { event: { data: TextMessageEvent } }) => {
        try {
          const ctx = {
            update: {
              message: {
                text: event.data.text,
                chat: {
                  id: event.data.telegram_id,
                  type: 'private',
                },
                from: {
                  id: event.data.telegram_id,
                  username: 'test_user',
                  language_code: 'en',
                },
                message_id: 1,
              },
            },
            telegram: {
              token: 'test_token',
              sendMessage: async (chatId: string | number, text: string) => {
                logger.info('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', { text })
                return { message_id: 1 }
              },
            },
            botInfo: {
              username: 'test_bot',
            },
            state: {},
            chat: {
              id: event.data.telegram_id,
              type: 'private',
            },
            from: {
              id: event.data.telegram_id,
              username: 'test_user',
              language_code: 'en',
            },
            message: {
              text: event.data.text,
              chat: {
                id: event.data.telegram_id,
                type: 'private',
              },
              from: {
                id: event.data.telegram_id,
                username: 'test_user',
                language_code: 'en',
              },
              message_id: 1,
            },
            reply: async (text: string) => {
              logger.info('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', { text })
              return { message_id: 1 }
            },
          } as unknown as Context<Update>

          await handleTextMessage(ctx)
        } catch (error) {
          logger.error('‚ùå Error in text message handler:', { error })
          throw error
        }
      }
    )
    testEngine.registerEventHandler(
      'voice-to-text.requested',
      voiceToTextProcessor
    )
    testEngine.registerEventHandler('payment/process', paymentProcessor)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await testEngine.send({
      name: 'text-message.requested',
      data: {
        telegram_id,
        text: '/start',
        bot_name: 'test_bot',
      },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await testEngine.send({
      name: 'voice-to-text.requested',
      data: {
        telegram_id,
        fileUrl: `file://${testAudioPath}`,
        bot_name: 'test_bot',
      },
    })

    // Check user balance
    const { data: userBalance } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegram_id)
      .single()

    if (!userBalance) {
      throw new Error('User data not found')
    }

    // Cleanup test data if configured
    if (TEST_CONFIG.mockBot) {
      const { error: deleteError } = await supabase
        .from('users')
        .delete()
        .eq('telegram_id', telegram_id)

      if (deleteError) {
        logger.error('‚ùå Failed to cleanup test data:', { error: deleteError })
      }
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if (fs.existsSync(testAudioPath)) {
      fs.unlinkSync(testAudioPath)
    }

    return {
      name: testName,
      success: true,
      message: 'Chat with avatar test passed successfully',
      startTime: Date.now(),
    }
  } catch (error) {
    logger.error('‚ùå Chat with avatar test failed:', { error })
    return {
      name: testName,
      success: false,
      message: 'Chat with avatar test failed',
      error: error instanceof Error ? error : new Error(String(error)),
      startTime: Date.now(),
    }
  }
}
