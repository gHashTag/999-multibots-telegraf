import { TestResult } from '../../types'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/calculators/modeCalculator'
import { PricingStrategy } from '@/price/types/strategies'

/**
 * –¢–µ—Å—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
 */
export async function testFixedPriceCalculation(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω')
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è NeuroPhoto
    const result = calculateModeCost({ mode: ModeEnum.NeuroPhoto })

    logger.info('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', {
      mode: ModeEnum.NeuroPhoto,
      stars: result.stars,
      dollars: result.dollars,
      rubles: result.rubles,
    })
    console.log('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', {
      mode: ModeEnum.NeuroPhoto,
      stars: result.stars,
      dollars: result.dollars,
      rubles: result.rubles,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result.stars <= 0) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è ${ModeEnum.NeuroPhoto}: ${result.stars}, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`,
        name: 'testFixedPriceCalculation',
      }
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testFixedPriceCalculation',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testFixedPriceCalculation',
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏
 */
export async function testModelBasedPriceCalculation(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏')
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è TextToVideo —Å –º–æ–¥–µ–ª—å—é kling-v1.6-pro
    const result = calculateModeCost({
      mode: ModeEnum.TextToVideo,
      modelId: 'kling-v1.6-pro',
    })

    logger.info('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', {
      mode: ModeEnum.TextToVideo,
      modelId: 'kling-v1.6-pro',
      stars: result.stars,
      dollars: result.dollars,
      rubles: result.rubles,
    })
    console.log('üí≤ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', {
      mode: ModeEnum.TextToVideo,
      modelId: 'kling-v1.6-pro',
      stars: result.stars,
      dollars: result.dollars,
      rubles: result.rubles,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result.stars <= 0) {
      return {
        success: false,
        message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è ${ModeEnum.TextToVideo} —Å –º–æ–¥–µ–ª—å—é kling-v1.6-pro: ${result.stars}, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`,
        name: 'testModelBasedPriceCalculation',
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    try {
      calculateModeCost({ mode: ModeEnum.TextToVideo })

      return {
        success: false,
        message: `–†–∞—Å—á–µ—Ç –¥–ª—è ${ModeEnum.TextToVideo} –±–µ–∑ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É`,
        name: 'testModelBasedPriceCalculation',
      }
    } catch (error) {
      // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
      logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–∞')
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–∞')
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testModelBasedPriceCalculation',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testModelBasedPriceCalculation',
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
 */
export async function testFreePriceCalculation(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤')
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    const freeModesToTest = [ModeEnum.Help, ModeEnum.MainMenu, ModeEnum.Avatar]

    for (const mode of freeModesToTest) {
      const result = calculateModeCost({ mode })

      logger.info(`–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞ ${mode}:`, {
        stars: result.stars,
        dollars: result.dollars,
        rubles: result.rubles,
      })
      console.log(`–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞ ${mode}:`, {
        stars: result.stars,
        dollars: result.dollars,
        rubles: result.rubles,
      })

      if (result.stars !== 0) {
        return {
          success: false,
          message: `–†–µ–∂–∏–º ${mode} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, –Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${result.stars} –∑–≤–µ–∑–¥`,
          name: 'testFreePriceCalculation',
        }
      }
    }

    return {
      success: true,
      message: '–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'testFreePriceCalculation',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error instanceof Error ? error.message : String(error)}`,
      name: 'testFreePriceCalculation',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 */
export async function runPriceCalculationTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.push(await testFixedPriceCalculation())
  results.push(await testModelBasedPriceCalculation())
  results.push(await testFreePriceCalculation())

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successCount = results.filter(r => r.success).length
  logger.info(
    `‚úÖ –¢–µ—Å—Ç—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏`,
    {
      results: results.map(r => ({
        name: r.name,
        success: r.success,
        message: r.message,
      })),
    }
  )
  console.log(
    `‚úÖ –¢–µ—Å—Ç—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏`
  )
  results.forEach((result, index) => {
    console.log(
      `${index + 1}. ${result.name}: ${result.success ? '‚úì' : '‚úó'} - ${result.message}`
    )
  })

  return results
}
