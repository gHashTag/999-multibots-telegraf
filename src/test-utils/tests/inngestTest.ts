import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'
import { Inngest } from 'inngest'
import axios from 'axios'
import { logger } from '../../utils/logger'
import { MockManager } from '../core/MockManager'

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
 */
export async function runInngestDirectTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ HTTP API')

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const INNGEST_EVENT_KEY = process.env.INNGEST_EVENT_KEY
    const INNGEST_URL =
      process.env.INNGEST_URL || 'https://api.inngest.com/e/v1/events'

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
    if (!INNGEST_EVENT_KEY) {
      throw new Error('‚ùå INNGEST_EVENT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    }

    logger.info('üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Inngest:')
    logger.info(`INNGEST_EVENT_KEY –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!INNGEST_EVENT_KEY}`)
    logger.info(`INNGEST_URL: ${INNGEST_URL}`)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const testEvent = {
      name: 'test/direct-event',
      data: {
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ HTTP API Inngest',
        timestamp: new Date().toISOString(),
        testId: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      },
      id: `test-${Date.now()}`,
      ts: Date.now(),
    }

    logger.info('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è')
    logger.debug(`üìã –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ${JSON.stringify(testEvent, null, 2)}`)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API
    logger.info('‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API')
    const response = await axios({
      method: 'post',
      url: INNGEST_URL,
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${INNGEST_EVENT_KEY}`,
      },
      data: [testEvent],
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (response.status >= 200 && response.status < 300) {
      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      logger.debug(`üìÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`)
      logger.debug(
        `üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(response.data, null, 2)}`
      )

      return {
        success: true,
        message: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        name: 'Inngest Direct API Test',
      }
    } else {
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`)
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ HTTP API Inngest')

    if (error.response) {
      logger.error(`üìÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`)
      logger.error(
        `üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(error.response.data, null, 2)}`
      )
    } else {
      logger.error(`üìÑ –û—à–∏–±–∫–∞: ${error.message}`)
    }

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTTP API Inngest: ${error.message}`,
      name: 'Inngest Direct API Test',
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ SDK
 */
export async function runInngestSDKTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Inngest —á–µ—Ä–µ–∑ SDK')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
    if (!process.env.INNGEST_EVENT_KEY) {
      throw new Error('‚ùå INNGEST_EVENT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    }

    logger.info('üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SDK Inngest:')
    logger.info(
      `INNGEST_EVENT_KEY –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!process.env.INNGEST_EVENT_KEY}`
    )
    logger.info(
      `INNGEST_SIGNING_KEY –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!process.env.INNGEST_SIGNING_KEY}`
    )
    logger.info(
      `INNGEST_URL: ${process.env.INNGEST_URL || '–Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}`
    )

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Inngest
    const inngest = new Inngest({
      id: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME || 'test-sdk',
      logger: logger,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const eventData = {
      name: 'test/sdk-event',
      data: {
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Inngest SDK',
        timestamp: new Date().toISOString(),
        testId: TEST_CONFIG.TEST_DATA.TEST_USER_TELEGRAM_ID,
      },
    }

    logger.info('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è')
    logger.debug(`üìã –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ${JSON.stringify(eventData, null, 2)}`)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK
    logger.info('‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK')
    const result = await inngest.send(eventData)

    logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK')
    logger.debug(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(result, null, 2)}`)

    return {
      success: true,
      message: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Inngest SDK Test',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ SDK Inngest')
    logger.error(`üìÑ –û—à–∏–±–∫–∞: ${error.message}`)

    if (error.cause) {
      logger.error(`üìÑ –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.cause, null, 2)}`)
    }

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SDK Inngest: ${error.message}`,
      name: 'Inngest SDK Test',
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest
 */
export async function runInngestFunctionRegistrationTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest')

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
    const mockManager = new MockManager()

    // –¢–∏–ø –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    type CreateFunctionType = (
      options: { id: string },
      trigger: { event: string },
      handler: (params: any) => Promise<any>
    ) => { id: string; event: string }

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Inngest —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    const mockInngest = mockManager.createMockObject<{
      createFunction: CreateFunctionType
    }>('Inngest', {
      createFunction: (options, trigger) => ({
        id: options.id,
        event: trigger.event,
      }),
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Inngest
    const inngest = new Inngest({
      id: TEST_CONFIG.TEST_DATA.TEST_BOT_NAME || 'test-registration',
      logger: logger,
    })

    // –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ createFunction –Ω–∞ –Ω–∞—à –º–æ–∫
    inngest.createFunction = mockInngest.createFunction as any

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    logger.info('‚ö° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
    const testFunction = inngest.createFunction(
      { id: 'test-function' },
      { event: 'test/event' },
      async () => {
        return { status: 'success' }
      }
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (
      testFunction &&
      typeof testFunction.id === 'string' &&
      testFunction.id === 'test-function'
    ) {
      logger.info('‚úÖ –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')

      return {
        success: true,
        message: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
        name: 'Inngest Function Registration Test',
      }
    } else {
      throw new Error('–§—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest')
    logger.error(`üìÑ –û—à–∏–±–∫–∞: ${error.message}`)

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest: ${error.message}`,
      name: 'Inngest Function Registration Test',
    }
  }
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ Inngest
 */
export async function runInngestFullTest(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Inngest')

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    const directTestResult = await runInngestDirectTest()
    logger.info(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ HTTP API: ${directTestResult.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'}`
    )

    const sdkTestResult = await runInngestSDKTest()
    logger.info(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ SDK: ${sdkTestResult.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'}`
    )

    const registrationTestResult = await runInngestFunctionRegistrationTest()
    logger.info(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registrationTestResult.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'}`
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allTestsPassed =
      directTestResult.success &&
      sdkTestResult.success &&
      registrationTestResult.success

    if (allTestsPassed) {
      logger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã')

      return {
        success: true,
        message: '–í—Å–µ —Ç–µ—Å—Ç—ã Inngest —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
        name: 'Inngest Full Test',
      }
    } else {
      const failedTests = [
        !directTestResult.success ? 'HTTP API' : null,
        !sdkTestResult.success ? 'SDK' : null,
        !registrationTestResult.success ? 'Function Registration' : null,
      ]
        .filter(Boolean)
        .join(', ')

      throw new Error(`–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã: ${failedTests}`)
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Inngest')
    logger.error(`üìÑ –û—à–∏–±–∫–∞: ${error.message}`)

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Inngest: ${error.message}`,
      name: 'Inngest Full Test',
    }
  }
}
