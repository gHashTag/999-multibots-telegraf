import { TestResult } from '../../types'
import { AvatarManager } from '@/test-utils/helpers/avatarManager'
import { randomUUID } from 'crypto'
import { logger } from '@/utils/logger'

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AvatarManager
 */
export async function testAvatarManager(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ AvatarManager', {
      description: 'Starting AvatarManager test',
    })

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
    const avatarManager = new AvatarManager()

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testTelegramId = `${Date.now()}`
    const testBotName = `test-bot-${randomUUID().slice(0, 8)}`
    const testAvatarUrl = `https://example.com/avatar-${randomUUID().slice(0, 8)}.jpg`
    const testGroup = `${testBotName}_group`

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    const createdAvatars: Array<{
      telegramId: string
      botName: string
      id?: number
    }> = []

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞
    logger.info('üîç –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞', {
      description: 'Test 1: Creating avatar bot',
    })

    const createdAvatar = await avatarManager.createAvatar({
      telegram_id: testTelegramId,
      bot_name: testBotName,
      avatar_url: testAvatarUrl,
      group: testGroup,
    })

    if (!createdAvatar) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞')
    }

    createdAvatars.push({
      telegramId: testTelegramId,
      botName: testBotName,
      id: createdAvatar.id,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (
      createdAvatar.telegram_id !== testTelegramId ||
      createdAvatar.bot_name !== testBotName ||
      createdAvatar.avatar_url !== testAvatarUrl ||
      createdAvatar.group !== testGroup
    ) {
      throw new Error('–°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
      description: 'Test 1 passed: Avatar bot successfully created',
      telegramId: createdAvatar.telegram_id,
    })

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞
    logger.info('üîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞', {
      description: 'Test 2: Finding avatar bot',
    })

    const foundAvatar = await avatarManager.findAvatar({
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    if (!foundAvatar) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞')
    }

    if (
      foundAvatar.telegram_id !== testTelegramId ||
      foundAvatar.bot_name !== testBotName
    ) {
      throw new Error('–ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω', {
      description: 'Test 2 passed: Avatar bot successfully found',
      telegramId: foundAvatar.telegram_id,
    })

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info('üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è', {
      description: 'Test 3: Testing duplication prevention',
    })

    const duplicateAvatar = await avatarManager.createAvatar({
      telegram_id: testTelegramId,
      bot_name: testBotName,
      avatar_url: testAvatarUrl,
    })

    if (!duplicateAvatar) {
      throw new Error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤–∞—Ç–∞—Ä –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏'
      )
    }

    if (
      duplicateAvatar.telegram_id !== createdAvatar.telegram_id ||
      duplicateAvatar.bot_name !== createdAvatar.bot_name
    ) {
      throw new Error(
        '–°–æ–∑–¥–∞–Ω –¥—É–±–ª–∏–∫–∞—Ç –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ'
      )
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ', {
      description: 'Test 3 passed: Duplication prevented',
      telegramId: duplicateAvatar.telegram_id,
    })

    // –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞
    logger.info('üîç –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞', {
      description: 'Test 4: Updating avatar bot',
    })

    if (!createdAvatar.id) {
      throw new Error('–°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –Ω–µ –∏–º–µ–µ—Ç ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    }

    const newAvatarUrl = `https://example.com/updated-avatar-${randomUUID().slice(0, 8)}.jpg`
    const newGroup = `${testBotName}_updated_group`

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const avatarToUpdate = { ...createdAvatar }
    avatarToUpdate.avatar_url = newAvatarUrl
    avatarToUpdate.group = newGroup

    const updatedAvatar = await avatarManager.updateAvatar(avatarToUpdate)

    if (!updatedAvatar) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞')
    }

    if (
      updatedAvatar.avatar_url !== newAvatarUrl ||
      updatedAvatar.group !== newGroup
    ) {
      throw new Error('–ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', {
      description: 'Test 4 passed: Avatar bot successfully updated',
      telegramId: updatedAvatar.telegram_id,
      newAvatarUrl,
      newGroup,
    })

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üîç –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Test 5: Getting user avatars',
    })

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const secondBotName = `second-test-bot-${randomUUID().slice(0, 8)}`
    await avatarManager.createAvatar({
      telegram_id: testTelegramId,
      bot_name: secondBotName,
      avatar_url: testAvatarUrl,
    })

    createdAvatars.push({
      telegramId: testTelegramId,
      botName: secondBotName,
    })

    const userAvatars = await avatarManager.getUserAvatars(testTelegramId)

    if (!userAvatars || userAvatars.length < 2) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    const hasFirstBot = userAvatars.some(bot => bot.bot_name === testBotName)
    const hasSecondBot = userAvatars.some(bot => bot.bot_name === secondBotName)

    if (!hasFirstBot || !hasSecondBot) {
      throw new Error(
        '–í —Å–ø–∏—Å–∫–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–æ—Ç—ã'
      )
    }

    logger.info(
      '‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      {
        description: 'Test 5 passed: Successfully retrieved all user avatars',
        telegramId: testTelegramId,
        botsCount: userAvatars.length,
      }
    )

    // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞
    logger.info('üîç –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞', {
      description: 'Test 6: Getting bot avatars',
    })

    // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–≥–æ –∂–µ –±–æ—Ç–∞, –Ω–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const secondUserId = `${Date.now() + 1}`
    await avatarManager.createAvatar({
      telegram_id: secondUserId,
      bot_name: testBotName,
      avatar_url: testAvatarUrl,
    })

    createdAvatars.push({
      telegramId: secondUserId,
      botName: testBotName,
    })

    const botAvatars = await avatarManager.getBotAvatars(testBotName)

    if (!botAvatars || botAvatars.length < 2) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –±–æ—Ç–∞')
    }

    const hasFirstUser = botAvatars.some(
      avatar => avatar.telegram_id === testTelegramId
    )
    const hasSecondUser = botAvatars.some(
      avatar => avatar.telegram_id === secondUserId
    )

    if (!hasFirstUser || !hasSecondUser) {
      throw new Error('–í —Å–ø–∏—Å–∫–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã')
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –±–æ—Ç–∞', {
      description: 'Test 6 passed: Successfully retrieved all bot avatars',
      botName: testBotName,
      avatarsCount: botAvatars.length,
    })

    // –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞
    logger.info('üîç –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞', {
      description: 'Test 7: Deleting avatar bots',
    })

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for (const avatar of createdAvatars) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å id –∞–≤–∞—Ç–∞—Ä–∞
      if (avatar.id) {
        const deletionSuccess = await avatarManager.deleteAvatar(avatar.id)

        if (!deletionSuccess) {
          throw new Error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${avatar.telegramId} –∏ –±–æ—Ç–∞ ${avatar.botName}`
          )
        }
      } else {
        // –ï—Å–ª–∏ id –Ω–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ telegram_id –∏ bot_name
        const foundAvatar = await avatarManager.findAvatar({
          telegram_id: avatar.telegramId,
          bot_name: avatar.botName,
        })

        if (foundAvatar && foundAvatar.id) {
          const deletionSuccess = await avatarManager.deleteAvatar(
            foundAvatar.id
          )

          if (!deletionSuccess) {
            throw new Error(
              `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${avatar.telegramId} –∏ –±–æ—Ç–∞ ${avatar.botName}`
            )
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
      const deletedAvatar = await avatarManager.findAvatar({
        telegram_id: avatar.telegramId,
        bot_name: avatar.botName,
      })

      if (deletedAvatar) {
        throw new Error(
          `–ê–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${avatar.telegramId} –∏ –±–æ—Ç–∞ ${avatar.botName} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω`
        )
      }
    }

    logger.info('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ê–≤–∞—Ç–∞—Ä—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', {
      description: 'Test 7 passed: Avatar bots successfully deleted',
      deletedCount: createdAvatars.length,
    })

    return {
      success: true,
      message: '–¢–µ—Å—Ç—ã AvatarManager —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
      name: 'AvatarManager Test',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AvatarManager', {
      description: 'Error in AvatarManager test',
      error: error.message,
      stack: error.stack,
    })

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AvatarManager: ${error.message}`,
      name: 'AvatarManager Test',
    }
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    const result = await testAvatarManager()
    console.log(
      `–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`
    )
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`)
    process.exit(result.success ? 0 : 1)
  })()
}
