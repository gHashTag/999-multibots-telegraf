/**
 * API Health Test - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 *
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤,
 * –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π API, Inngest API, –≤–µ–±—Ö—É–∫–∏ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–æ—Ç–æ–≤.
 */

import { TestResult } from '../types'
import fetch from 'node-fetch'
import { logger } from '../../utils/logger'
import { TestCategory } from '../core/categories'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const BASE_URL =
  process.env.NODE_ENV === 'production'
    ? 'https://api.neuroblogger.com'
    : 'http://localhost:2999'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface ApiEndpoint {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  name: string
  /** –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É */
  path: string
  /** HTTP –º–µ—Ç–æ–¥ */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ */
  expectedStatus: number
  /** –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  description: string
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  headers?: Record<string, string>
  /** –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  data?: any
  /** –û—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  disabled?: boolean
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  validate?: (response: any) => { success: boolean; message?: string }
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  category?: TestCategory
  /** –¢—Ä–µ–±—É–µ—Ç –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  requiresAuth?: boolean
}

/**
 * –°–ø–∏—Å–æ–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: 'Main API',
    path: '/api',
    method: 'GET',
    expectedStatus: 200,
    description: '–û—Å–Ω–æ–≤–Ω–æ–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç',
  },
  {
    name: 'API Health',
    path: '/api/health',
    method: 'GET',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API',
  },
  {
    name: 'Inngest API',
    path: '/api/inngest',
    method: 'GET',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç Inngest API',
  },
  {
    name: 'Webhooks',
    path: '/api/webhooks',
    method: 'GET',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤',
  },
  {
    name: 'Bot Webhook',
    path: '/api/bot-webhook',
    method: 'GET',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –±–æ—Ç–∞',
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * @param endpoint –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise<{success: boolean, error?: string}>
 */
async function testEndpoint(
  endpoint: ApiEndpoint
): Promise<{ success: boolean; error?: string }> {
  const url = `${BASE_URL}${endpoint.path}`

  try {
    logger.info({
      message: `üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
      description: `Testing API endpoint: ${endpoint.name}`,
      url,
      method: endpoint.method,
    })

    const response = await fetch(url, { method: endpoint.method })
    const status = response.status

    if (status === endpoint.expectedStatus) {
      logger.info({
        message: `‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: ${endpoint.name}`,
        description: `API endpoint available: ${endpoint.name}`,
        statusCode: status,
      })
      return { success: true }
    } else {
      logger.error({
        message: `‚ùå API —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${endpoint.name}`,
        description: `API endpoint returned wrong status: ${endpoint.name}`,
        expectedStatus: endpoint.expectedStatus,
        actualStatus: status,
      })
      return {
        success: false,
        error: `Expected status ${endpoint.expectedStatus}, got ${status}`,
      }
    }
  } catch (error) {
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`,
      description: `Error testing API endpoint: ${endpoint.name}`,
      error: error instanceof Error ? error.message : 'Unknown error',
    })
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * @param generateReport –§–ª–∞–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
 * @returns Promise<TestResult>
 */
export async function runApiTests(
  generateReport: boolean = false
): Promise<TestResult> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
      description: 'Starting API endpoints tests',
      timestamp: new Date().toISOString(),
    })

    const results = await Promise.all(API_ENDPOINTS.map(testEndpoint))
    const failedTests = results.filter(result => !result.success)

    if (failedTests.length === 0) {
      const successMessage = '‚úÖ –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã'
      logger.info({
        message: successMessage,
        description: 'All API endpoints are available',
        timestamp: new Date().toISOString(),
      })

      if (generateReport) {
        await generateApiTestReport(results, API_ENDPOINTS)
      }

      return {
        success: true,
        message: successMessage,
        name: 'API Health Test',
        category: TestCategory.API,
      }
    } else {
      const failedEndpoints = API_ENDPOINTS.filter(
        (_, index) => !results[index].success
      )
        .map(endpoint => endpoint.name)
        .join(', ')

      const errorMessage = `‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${failedEndpoints}`
      logger.error({
        message: errorMessage,
        description: 'Some API endpoints are not available',
        failedEndpoints,
        timestamp: new Date().toISOString(),
      })

      if (generateReport) {
        await generateApiTestReport(results, API_ENDPOINTS)
      }

      return {
        success: false,
        message: errorMessage,
        name: 'API Health Test',
        category: TestCategory.API,
        error: new Error(errorMessage),
      }
    }
  } catch (error) {
    const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤'
    logger.error({
      message: errorMessage,
      description: 'Error running API endpoints tests',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString(),
    })

    return {
      success: false,
      message: errorMessage,
      name: 'API Health Test',
      category: TestCategory.API,
      error: error instanceof Error ? error : new Error(String(error)),
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * @param results –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param endpoints –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
async function generateApiTestReport(
  results: { success: boolean; error?: string }[],
  endpoints: ApiEndpoint[]
): Promise<void> {
  try {
    logger.info({
      message: 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API',
      description: 'Generating API test report',
      timestamp: new Date().toISOString(),
    })

    const report = {
      timestamp: new Date().toISOString(),
      totalEndpoints: endpoints.length,
      successful: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length,
      details: endpoints.map((endpoint, index) => ({
        name: endpoint.name,
        path: endpoint.path,
        method: endpoint.method,
        success: results[index].success,
        error: results[index].error || null,
      })),
    }

    // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.info({
      message: 'üìë –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API',
      description: 'API test report',
      report,
      timestamp: new Date().toISOString(),
    })

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –µ–≥–æ –∫—É–¥–∞-–ª–∏–±–æ
    // ...
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API',
      description: 'Error generating API test report',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString(),
    })
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
 * @returns Promise<TestResult>
 */
async function testInngestAvailability(): Promise<TestResult> {
  try {
    logger.info({
      message: 'üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API',
      description: 'Testing Inngest API availability',
      timestamp: new Date().toISOString(),
    })

    const url = `${BASE_URL}/api/inngest`
    const response = await fetch(url)

    if (response.status === 200) {
      const successMessage = '‚úÖ Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω'
      logger.info({
        message: successMessage,
        description: 'Inngest API is available',
        timestamp: new Date().toISOString(),
      })

      return {
        success: true,
        message: successMessage,
        name: 'Inngest API Availability Test',
        category: TestCategory.Inngest,
      }
    } else {
      const errorMessage = `‚ùå Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`
      logger.error({
        message: errorMessage,
        description: 'Inngest API is not available',
        statusCode: response.status,
        timestamp: new Date().toISOString(),
      })

      return {
        success: false,
        message: errorMessage,
        name: 'Inngest API Availability Test',
        category: TestCategory.Inngest,
        error: new Error(errorMessage),
      }
    }
  } catch (error) {
    const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API'
    logger.error({
      message: errorMessage,
      description: 'Error testing Inngest API availability',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString(),
    })

    return {
      success: false,
      message: errorMessage,
      name: 'Inngest API Availability Test',
      category: TestCategory.Inngest,
      error: error instanceof Error ? error : new Error(String(error)),
    }
  }
}

export { testInngestAvailability, runApiTests }

// –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞
if (require.main === module) {
  runApiTests({ generateReport: true })
    .then(() => {
      logger.info('‚úÖ [API_TEST]: –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω')
      process.exit(0)
    })
    .catch(error => {
      logger.error('‚ùå [API_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ API:', error)
      process.exit(1)
    })
}
