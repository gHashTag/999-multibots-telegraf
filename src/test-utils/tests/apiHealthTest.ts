/**
 * API Health Test - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 *
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *
 * 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–æ–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–æ–µ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω):
 *    ```
 *    ts-node -r tsconfig-paths/register src/test-utils/tests/apiHealthTest.ts
 *    ```
 *
 * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *    ```
 *    API_ENV=production ts-node -r tsconfig-paths/register src/test-utils/tests/apiHealthTest.ts
 *    ```
 *
 * 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *    ```
 *    API_ENV=local ts-node -r tsconfig-paths/register src/test-utils/tests/apiHealthTest.ts
 *    ```
 *
 * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ URL (—á–µ—Ä–µ–∑ –∫–æ–¥):
 *    ```
 *    runApiTests({
 *      generateReport: true,
 *      customUrl: 'https://your-custom-url.com'
 *    })
 *    ```
 *
 * –í—Å–µ —Ç–µ—Å—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—ä–µ–∫—Ç TestResult (–∏–ª–∏ –º–∞—Å—Å–∏–≤ TestResult) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 * –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤.
 */

import axios from 'axios'
import { TestResult } from '../types'
import { TestCategory } from '../core/categories'
import { logger } from '@/utils/logger'

/**
 * –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 */
const ENVIRONMENTS = {
  local: 'http://localhost:3000',
  production: 'https://999-multibots-u14194.vm.elestio.app',
}

const API = {
  base: process.env.API_BASE_URL || 'http://localhost:3000',
  inngest: process.env.INNGEST_BASE_URL || 'http://localhost:8288',
  inngestDev: process.env.INNGEST_DEV_URL || 'http://localhost:8288/dev',
  webhook: process.env.WEBHOOK_BASE_URL || 'http://localhost:3000/webhook',
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const BASE_URL = API.base

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface ApiEndpoint {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  name: string
  /** –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É */
  path: string
  /** HTTP –º–µ—Ç–æ–¥ */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ */
  expectedStatus: number
  /** –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  description: string
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  headers?: Record<string, string>
  /** –û—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  disabled?: boolean
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  data?: any
}

/**
 * –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: 'Main API',
    path: `${BASE_URL}/`,
    method: 'GET',
    expectedStatus: 200,
    description: 'Main API endpoint',
  },
  {
    name: 'Content Generation API',
    path: `${BASE_URL}/api/generate`,
    method: 'POST',
    expectedStatus: 200,
    description: 'Content generation endpoint',
    headers: { 'Content-Type': 'application/json' },
    data: { prompt: 'Test prompt' },
  },
  {
    name: 'Inngest API',
    path: `${API.inngest}/api/events`,
    method: 'GET',
    expectedStatus: 200,
    description: 'Inngest API endpoint',
  },
  {
    name: 'Webhook API',
    path: '/api/webhook',
    method: 'GET',
    expectedStatus: 404,
    description: 'API –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤',
  },
  {
    name: '–ë–æ—Ç Telegram API',
    path: '/bot',
    method: 'GET',
    expectedStatus: 403,
    description: 'API –¥–ª—è Telegram –±–æ—Ç–∞',
  },
]

/**
 * –°–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
const EXTERNAL_API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: 'BFL API - Flux Pro',
    path: 'https://api.getimg.ai/v1/text-to-image/flux-pro',
    method: 'GET',
    expectedStatus: 405, // –ë–µ–∑ API –∫–ª—é—á–∞ –æ–∂–∏–¥–∞–µ–º 405 Method Not Allowed (—Ç–æ–ª—å–∫–æ POST)
    description: 'BFL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flux Pro',
  },
  {
    name: 'BFL API - Flux Pro Finetuned',
    path: 'https://api.getimg.ai/v1/text-to-image/flux-pro-finetuned',
    method: 'GET',
    expectedStatus: 405, // –ë–µ–∑ API –∫–ª—é—á–∞ –æ–∂–∏–¥–∞–µ–º 405 Method Not Allowed (—Ç–æ–ª—å–∫–æ POST)
    description: 'BFL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flux Pro Finetuned',
  },
  {
    name: 'BFL API —Å –∫–ª—é—á–æ–º',
    path: 'https://api.getimg.ai/v1/text-to-image/flux-pro',
    method: 'GET',
    expectedStatus: 405, // API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    description: 'BFL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–ª—é—á–æ–º',
    headers: {
      Authorization: `Bearer ${process.env.BFL_API_KEY || ''}`,
    },
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testEndpoint(
  endpoint: ApiEndpoint,
  baseUrl: string
): Promise<{ success: boolean; error?: string }> {
  try {
    // –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (endpoint.disabled) {
      logger.info(`‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`)
      return { success: true }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    const url = endpoint.path.startsWith('http')
      ? endpoint.path
      : `${baseUrl}${endpoint.path}`

    logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name} (${url})`)

    const response = await axios({
      method: endpoint.method,
      url,
      timeout: 5000,
      headers: endpoint.headers,
      validateStatus: () => true, // –ß—Ç–æ–±—ã axios –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–∞—Ö, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç 2xx
    })

    const success = response.status === endpoint.expectedStatus

    if (success) {
      logger.info(`‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`)
      return { success: true }
    } else {
      logger.error(
        `‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}, –æ–∂–∏–¥–∞–ª—Å—è: ${endpoint.expectedStatus}`
      )
      return {
        success: false,
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}, –æ–∂–∏–¥–∞–ª—Å—è: ${endpoint.expectedStatus}`,
      }
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${errorMessage}`
    )
    return { success: false, error: errorMessage }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
 */
async function testInngestAvailability(baseUrl: string): Promise<{
  success: boolean
  error?: string
}> {
  try {
    const inngestUrl = `${baseUrl}/api/inngest`
    logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API: ${inngestUrl}`)

    const response = await axios({
      method: 'GET',
      url: inngestUrl,
      timeout: 5000,
      validateStatus: () => true,
    })

    // Inngest –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏–ª–∏ 405 (Method Not Allowed), —Ç–∞–∫ –∫–∞–∫ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ
    // —Å–ª—É—á–∞–µ–≤ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è
    const success = response.status === 200 || response.status === 405

    if (success) {
      logger.info(`‚úÖ Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`)
      return { success: true }
    } else {
      logger.error(`‚ùå Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${response.status}`)
      return {
        success: false,
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å Inngest API: ${response.status}`,
      }
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Inngest API: ${errorMessage}`)
    return { success: false, error: errorMessage }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2
 */
async function testExternalApis(): Promise<{
  success: boolean
  results: { endpoint: ApiEndpoint; success: boolean; error?: string }[]
  error?: string
}> {
  logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2')

  const results = []
  let allSuccess = true

  for (const endpoint of EXTERNAL_API_ENDPOINTS) {
    if (endpoint.disabled) {
      logger.info(`‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint.name}`)
      continue
    }

    const result = await testEndpoint(endpoint, '')
    results.push({
      endpoint,
      success: result.success,
      error: result.error,
    })

    if (!result.success) {
      allSuccess = false
    }
  }

  if (allSuccess) {
    logger.info('‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ API –¥–æ—Å—Ç—É–ø–Ω—ã')
    return { success: true, results }
  } else {
    const errors = results
      .filter(r => !r.success)
      .map(r => `${r.endpoint.name}: ${r.error}`)
      .join('; ')

    logger.error(`‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${errors}`)
    return {
      success: false,
      results,
      error: `–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ API: ${errors}`,
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
 */
function generateApiTestReport(
  results: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
  }[],
  environment: string,
  externalResults?: {
    endpoint: ApiEndpoint
    success: boolean
    error?: string
  }[]
): string {
  let report = `\nüìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ API (${environment}):\n`

  const totalCount = results.length
  const successCount = results.filter(r => r.success).length
  const failCount = totalCount - successCount

  report += `\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalCount} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —É—Å–ø–µ—à–Ω–æ: ${successCount}, –Ω–µ—É–¥–∞—á–Ω–æ: ${failCount}\n`

  if (failCount > 0) {
    report += '\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n'

    results
      .filter(r => !r.success)
      .forEach(result => {
        report += `  - ${result.endpoint.name} (${result.endpoint.path}): ${result.error}\n`
      })
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö API, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
  if (externalResults && externalResults.length > 0) {
    const externalTotal = externalResults.length
    const externalSuccess = externalResults.filter(r => r.success).length
    const externalFail = externalTotal - externalSuccess

    report += `\nüì° –í–Ω–µ—à–Ω–∏–µ API: –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${externalTotal}, —É—Å–ø–µ—à–Ω–æ: ${externalSuccess}, –Ω–µ—É–¥–∞—á–Ω–æ: ${externalFail}\n`

    if (externalFail > 0) {
      report += '\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ API:\n'

      externalResults
        .filter(r => !r.success)
        .forEach(result => {
          report += `  - ${result.endpoint.name}: ${result.error}\n`
        })
    }
  }

  return report
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ API
 */
export async function runApiTests({
  generateReport = false,
  environment = 'local' as 'local' | 'production' | 'both',
  customUrl,
  testExternalApi = true,
}: {
  generateReport?: boolean
  environment?: 'local' | 'production' | 'both'
  customUrl?: string
  testExternalApi?: boolean
} = {}): Promise<TestResult> {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL(—ã) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const urlsToTest: { env: string; url: string }[] = []

  if (customUrl) {
    urlsToTest.push({ env: 'custom', url: customUrl })
  } else if (environment === 'both') {
    urlsToTest.push({ env: 'local', url: ENVIRONMENTS.local })
    urlsToTest.push({ env: 'production', url: ENVIRONMENTS.production })
  } else {
    urlsToTest.push({
      env: environment,
      url:
        environment === 'local' ? ENVIRONMENTS.local : ENVIRONMENTS.production,
    })
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  const allResults: TestResult[] = []

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è)
  let externalApiResults = null
  if (testExternalApi) {
    externalApiResults = await testExternalApis()
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  for (const { env, url } of urlsToTest) {
    logger.info(
      `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–µ—Ä–≤–µ—Ä–∞ (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${env}, URL: ${url})...`
    )

    try {
      const results = []

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      for (const endpoint of API_ENDPOINTS) {
        const result = await testEndpoint(endpoint, url)
        results.push({
          endpoint,
          success: result.success,
          error: result.error,
        })
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
      const inngestResult = await testInngestAvailability(url)

      // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
      let allSuccess = results.every(r => r.success) && inngestResult.success

      // –ï—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API, —É—á–∏—Ç—ã–≤–∞–µ–º –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (testExternalApi && externalApiResults) {
        allSuccess = allSuccess && externalApiResults.success
      }

      let message = allSuccess
        ? `–í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}`
        : `${results.filter(r => !r.success).length} –∏–∑ ${results.length} API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}`

      if (
        testExternalApi &&
        externalApiResults &&
        !externalApiResults.success
      ) {
        message += `. –¢–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ API –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ V2.`
      }

      if (generateReport) {
        message += generateApiTestReport(
          results,
          env,
          testExternalApi ? externalApiResults?.results : undefined
        )
      }

      if (allSuccess) {
        logger.info(
          `‚úÖ –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}`
        )
      } else {
        logger.error(
          `‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}`
        )
      }

      const result: TestResult = {
        success: allSuccess,
        name: `API Health Check (${env})`,
        message,
        category: TestCategory.Api,
        details: {
          environment: env,
          baseUrl: url,
          endpoints: results,
          inngest: inngestResult,
          externalApis: testExternalApi ? externalApiResults : undefined,
        },
      }

      allResults.push(result)
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}: ${errorMessage}`
      )

      const result: TestResult = {
        success: false,
        name: `API Health Check (${env})`,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ${env}: ${errorMessage}`,
        category: TestCategory.Api,
        error: errorMessage,
        details: {
          environment: env,
          baseUrl: url,
        },
      }

      allResults.push(result)
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  return environment === 'both' ? allResults[0] : allResults[0]
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—â–µ–π —Å–∏—Å—Ç–µ–º–µ —Ç–µ—Å—Ç–æ–≤
export const testApiHealth = runApiTests

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const environment = process.env.API_ENV || 'both'
  const testExternalApi = process.env.TEST_EXTERNAL !== 'false'

  runApiTests({
    generateReport: true,
    environment: environment as 'local' | 'production' | 'both',
    testExternalApi,
  })
    .then(results => {
      if (Array.isArray(results)) {
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
        const localResult = results.find(
          r => r.details?.environment === 'local'
        )
        const prodResult = results.find(
          r => r.details?.environment === 'production'
        )

        logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API', {
          description: 'API testing results',
          localSuccess: localResult?.success,
          productionSuccess: prodResult?.success,
        })

        // –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ —Ç–µ—Å—Ç
        if (!results.every(r => r.success)) {
          process.exit(1)
        }
      } else {
        // –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API', {
          description: 'API testing results',
          environment: results.details?.environment,
          success: results.success,
          message: results.message,
        })

        if (!results.success) {
          process.exit(1)
        }
      }
    })
    .catch(error => {
      logger.error(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ API: ${error.message}`
      )
      process.exit(1)
    })
}
