/**
 * API Health Test - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 *
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤,
 * –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π API, Inngest API, –≤–µ–±—Ö—É–∫–∏ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–æ—Ç–æ–≤.
 */

import axios from 'axios'
import { logger } from '@/utils/logger'
import { TestResult } from '../types'
import { TestCategory } from '../core/categories'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
const BASE_API_URL = process.env.API_URL || 'http://localhost:2999'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
interface ApiEndpoint {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  name: string
  /** –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É */
  path: string
  /** HTTP –º–µ—Ç–æ–¥ */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ */
  expectedStatus: number
  /** –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ */
  description: string
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  headers?: Record<string, string>
  /** –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  data?: any
  /** –û—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  disabled?: boolean
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  validate?: (response: any) => { success: boolean; message?: string }
}

/**
 * –°–ø–∏—Å–æ–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const API_ENDPOINTS: ApiEndpoint[] = [
  {
    name: '–ì–ª–∞–≤–Ω—ã–π API',
    path: '/',
    method: 'GET',
    expectedStatus: 200,
    description: '–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API',
  },
  {
    name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    path: '/api/generate',
    method: 'POST',
    expectedStatus: 200,
    description: 'API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    data: {
      type: 'test',
      prompt: 'Test prompt',
      telegramId: '123456789',
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
  {
    name: 'Inngest API',
    path: '/api/inngest',
    method: 'GET',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π',
  },
  {
    name: 'Webhook',
    path: '/api/webhook',
    method: 'POST',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤',
    data: {
      test: true,
      source: 'api-test',
      timestamp: Date.now(),
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
  {
    name: 'Webhook –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    path: '/webhooks/neurophoto',
    method: 'POST',
    expectedStatus: 400, // –ë–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
    description: '–í–µ–±—Ö—É–∫ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    data: {
      test: true,
      source: 'api-test',
      timestamp: Date.now(),
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
  {
    name: 'Webhook Replicate',
    path: '/webhooks/replicate',
    method: 'POST',
    expectedStatus: 400, // –ë–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
    description: '–í–µ–±—Ö—É–∫ –¥–ª—è Replicate',
    data: {
      test: true,
      source: 'api-test',
      timestamp: Date.now(),
    },
    headers: {
      'Content-Type': 'application/json',
    },
  },
  {
    name: '–ë–æ—Ç Telegram',
    path: '/bot',
    method: 'POST',
    expectedStatus: 200,
    description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞',
    disabled: true, // –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö Telegram Update –¥–∞–Ω–Ω—ã—Ö
  },
]

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç
 *
 * @param endpoint - –û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testEndpoint(endpoint: ApiEndpoint): Promise<TestResult> {
  const url = `${BASE_API_URL}${endpoint.path}`

  // –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  if (endpoint.disabled) {
    logger.info(
      `üîò [API_TEST]: –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`
    )
    return {
      success: true,
      message: `–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`,
      name: `API Test: ${endpoint.name}`,
      category: TestCategory.Api,
    }
  }

  logger.info(
    `üöÄ [API_TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name} (${endpoint.method} ${url})`
  )

  try {
    const response = await axios({
      method: endpoint.method.toLowerCase(),
      url,
      headers: endpoint.headers,
      data: endpoint.method !== 'GET' ? endpoint.data : undefined,
      validateStatus: () => true, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è HTTP –æ—à–∏–±–æ–∫
      timeout: 5000, // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    const statusMatch = response.status === endpoint.expectedStatus

    if (!statusMatch) {
      logger.error(
        `‚ùå [API_TEST]: –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus})`
      )
      return {
        success: false,
        message: `–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus}`,
        name: `API Test: ${endpoint.name}`,
        category: TestCategory.Api,
        error: new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status}`),
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
    if (endpoint.validate) {
      const validationResult = endpoint.validate(response)
      if (!validationResult.success) {
        logger.error(
          `‚ùå [API_TEST]: –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validationResult.message}`
        )
        return {
          success: false,
          message: `–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validationResult.message}`,
          name: `API Test: ${endpoint.name}`,
          category: TestCategory.Api,
          error: new Error(validationResult.message),
        }
      }
    }

    logger.info(
      `‚úÖ [API_TEST]: –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`
    )
    return {
      success: true,
      message: `–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.name} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`,
      name: `API Test: ${endpoint.name}`,
      category: TestCategory.Api,
    }
  } catch (error) {
    logger.error(
      `‚ùå [API_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}:`,
      error
    )
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint.name}: ${error.message}`,
      name: `API Test: ${endpoint.name}`,
      category: TestCategory.Api,
      error,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest API
 *
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testInngestAvailability(): Promise<TestResult> {
  const inngestUrl = process.env.INNGEST_DEV_URL || 'http://localhost:8288/dev'

  logger.info(`üöÄ [API_TEST]: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest API (${inngestUrl})`)

  try {
    const response = await axios({
      method: 'GET',
      url: inngestUrl,
      validateStatus: () => true,
      timeout: 5000,
    })

    // –î–ª—è Inngest –æ–±—ã—á–Ω–æ 200 –∏–ª–∏ 302 —Å—Ç–∞—Ç—É—Å
    const validStatus = response.status === 200 || response.status === 302

    if (!validStatus) {
      logger.error(
        `‚ùå [API_TEST]: Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`
      )
      return {
        success: false,
        message: `Inngest API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`,
        name: 'API Test: Inngest Availability',
        category: TestCategory.Api,
        error: new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.status}`),
      }
    }

    logger.info(
      `‚úÖ [API_TEST]: Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`
    )
    return {
      success: true,
      message: `Inngest API –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`,
      name: 'API Test: Inngest Availability',
      category: TestCategory.Api,
    }
  } catch (error) {
    logger.error(`‚ùå [API_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Inngest API:`, error)
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Inngest API: ${error.message}`,
      name: 'API Test: Inngest Availability',
      category: TestCategory.Api,
      error,
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
 *
 * @param results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
 * @returns string - –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
 */
function generateApiTestReport(results: TestResult[]): string {
  const totalTests = results.length
  const passedTests = results.filter(r => r.success).length
  const failedTests = totalTests - passedTests

  let report = `\nüìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API (${new Date().toLocaleString()})\n\n`
  report += `–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${totalTests}\n`
  report += `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}\n`
  report += `‚ùå –û—à–∏–±–æ–∫: ${failedTests}\n\n`

  if (failedTests > 0) {
    report += 'üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n'
    results
      .filter(r => !r.success)
      .forEach(result => {
        report += `- ${result.name}: ${result.message}\n`
      })
    report += '\n'
  }

  report += 'üìù –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n'
  results.forEach(result => {
    const icon = result.success ? '‚úÖ' : '‚ùå'
    report += `${icon} ${result.name}: ${result.message}\n`
  })

  return report
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 *
 * @param options - –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * @returns Promise<TestResult[]> - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
 */
export async function runApiTests(
  options: {
    generateReport?: boolean // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
    baseUrl?: string // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL
  } = {}
): Promise<TestResult[]> {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
  if (options.baseUrl) {
    process.env.API_URL = options.baseUrl
  }

  logger.info('üöÄ [API_TEST]: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤')

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  const endpointResults = await Promise.all(
    API_ENDPOINTS.map(endpoint => testEndpoint(endpoint))
  )

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Inngest
  const inngestResult = await testInngestAvailability()

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const allResults = [...endpointResults, inngestResult]

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalTests = allResults.length
  const passedTests = allResults.filter(r => r.success).length

  logger.info(`üèÅ [API_TEST]: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
  logger.info(
    `üìä [API_TEST]: –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${totalTests}, —É—Å–ø–µ—à–Ω–æ: ${passedTests}, –æ—à–∏–±–æ–∫: ${totalTests - passedTests}`
  )

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (options.generateReport) {
    const report = generateApiTestReport(allResults)
    logger.info(report)
  }

  return allResults
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 *
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
export async function runApiHealthTest(): Promise<TestResult> {
  try {
    const results = await runApiTests()
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    if (failedTests === 0) {
      return {
        success: true,
        message: `–í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (${totalTests}) –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
        name: 'API Health Test',
        category: TestCategory.Api,
        details: { results },
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    return {
      success: false,
      message: `${failedTests} –∏–∑ ${totalTests} API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ—à–∏–±–∫–∏`,
      name: 'API Health Test',
      category: TestCategory.Api,
      details: { results },
      error: new Error(`${failedTests} API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç`),
    }
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ API: ${error.message}`,
      name: 'API Health Test',
      category: TestCategory.Api,
      error,
    }
  }
}

// –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞
if (require.main === module) {
  runApiTests({ generateReport: true })
    .then(() => {
      logger.info('‚úÖ [API_TEST]: –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω')
      process.exit(0)
    })
    .catch(error => {
      logger.error('‚ùå [API_TEST]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ API:', error)
      process.exit(1)
    })
}
