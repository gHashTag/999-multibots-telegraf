import { logger } from '@/utils/logger'
import { inngest } from '@/core/inngest'
import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'
import { generateRandomTelegramId } from '@/utils/generateRandomTelegramId'
import { supabase } from '@/core/supabase'

interface BroadcastTestResult extends TestResult {
  telegram_id?: string
  message_sent?: boolean
}

export async function testBroadcastMessage(): Promise<BroadcastTestResult[]> {
  const results: BroadcastTestResult[] = []
  const testTelegramId = String(generateRandomTelegramId())

  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ broadcast message...', {
    description: 'Starting broadcast message tests',
    telegram_id: testTelegramId,
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: messageData, error: messageError } = await supabase
      .from('broadcast_messages')
      .insert({
        text: 'Test broadcast message',
        status: 'pending',
        created_at: new Date().toISOString(),
        message_id: Date.now(),
      })
      .select()
      .single()

    if (messageError) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageError.message}`
      )
    }

    if (!messageData) {
      throw new Error('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ')
    }

    logger.info('üìù –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
      description: 'Created test broadcast message',
      message_id: messageData.id,
    })

    // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const simpleMessageResult = await inngest.send({
      name: 'broadcast/message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        textEn: 'Test message',
        test_mode: true,
        test_telegram_id: testTelegramId,
        message_id: Number(messageData.id), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      },
    })

    results.push({
      name: '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      success: !!simpleMessageResult,
      message: '–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const imageMessageResult = await inngest.send({
      name: 'broadcast/send-message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
        textEn: 'Test message with image',
        contentType: 'photo',
        imageUrl: TEST_CONFIG.TEST_IMAGE_URL,
        test_mode: true,
        test_telegram_id: testTelegramId,
        message_id: Number(messageData.id), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      },
    })

    results.push({
      name: 'üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      success: !!imageMessageResult,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const buttonMessageResult = await inngest.send({
      name: 'broadcast/send-message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏',
        textEn: 'Test message with buttons',
        test_mode: true,
        test_telegram_id: testTelegramId,
        parse_mode: 'HTML',
        message_id: Number(messageData.id), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      },
    })

    results.push({
      name: 'üîò –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏',
      success: !!buttonMessageResult,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ broadcast message –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
      description: 'Broadcast message tests completed successfully',
      results,
    })

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (TEST_CONFIG.cleanupAfterEach) {
      await supabase
        .from('broadcast_messages')
        .delete()
        .eq('id', messageData.id)

      logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
        description: 'Test data cleaned up',
        message_id: messageData.id,
      })
    }
  } catch (error) {
    const err = error instanceof Error ? error : new Error(String(error))
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ broadcast message:', {
      description: 'Error in broadcast message tests',
      error: err.message,
      stack: err.stack,
    })

    results.push({
      name: '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è broadcast message',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ broadcast message',
      error: err,
    })
  }

  return results
}

export async function testBroadcast(messageId: string): Promise<TestResult> {
  const testName = 'Broadcast Test'

  try {
    logger.info('üß™ –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', {
      description: 'Testing broadcast functionality',
      messageId,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ messageId —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    const numericMessageId = parseInt(messageId)
    if (isNaN(numericMessageId)) {
      throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageId}`)
    }

    const { data, error } = await supabase
      .from('broadcast_messages')
      .select('*')
      .eq('id', numericMessageId)
      .single()

    if (error) {
      throw new Error(error.message)
    }

    if (!data) {
      throw new Error(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
    }

    logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–π–¥–µ–Ω–æ', {
      description: 'Broadcast message found',
      messageData: {
        id: data.id,
        text: data.text,
        status: data.status,
        createdAt: data.created_at,
      },
    })

    return {
      name: testName,
      success: true,
      message: `–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ`,
    }
  } catch (err) {
    const error = err instanceof Error ? err : new Error(String(err))

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      description: 'Broadcast message check error',
      error: error.message,
      messageId,
    })

    return {
      name: testName,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
      error,
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    try {
      const results = await testBroadcastMessage()
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', results)
      process.exit(0)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    }
  })()
}
