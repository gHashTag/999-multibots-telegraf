import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'
import { TestResult } from '../interfaces'
import { TEST_CONFIG } from '../test-config'
import { generateRandomTelegramId } from '@/utils/generateRandomTelegramId'

interface BroadcastTestResult extends TestResult {
  telegram_id?: string
  message_sent?: boolean
}

export async function testBroadcastMessage(): Promise<BroadcastTestResult[]> {
  const results: BroadcastTestResult[] = []
  const testTelegramId = String(generateRandomTelegramId())

  logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ broadcast message...', {
    description: 'Starting broadcast message tests',
    telegram_id: testTelegramId,
  })

  try {
    // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const simpleMessageResult = await inngest.send({
      name: 'broadcast/message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        textEn: 'Test message',
        test_mode: true,
        test_telegram_id: testTelegramId,
      },
    })

    results.push({
      name: '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      success: !!simpleMessageResult,
      message: '–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const imageMessageResult = await inngest.send({
      name: 'broadcast/send-message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
        textEn: 'Test message with image',
        contentType: 'photo',
        imageUrl: TEST_CONFIG.TEST_IMAGE_URL,
        test_mode: true,
        test_telegram_id: testTelegramId,
      },
    })

    results.push({
      name: 'üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      success: !!imageMessageResult,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const buttonMessageResult = await inngest.send({
      name: 'broadcast/send-message',
      data: {
        telegram_id: testTelegramId,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏',
        textEn: 'Test message with buttons',
        test_mode: true,
        test_telegram_id: testTelegramId,
        parse_mode: 'HTML',
      },
    })

    results.push({
      name: 'üîò –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏',
      success: !!buttonMessageResult,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegram_id: testTelegramId,
      message_sent: true,
    })

    logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ broadcast message –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
      description: 'Broadcast message tests completed successfully',
      results,
    })
  } catch (error) {
    const err = error as Error
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ broadcast message:', {
      description: 'Error in broadcast message tests',
      error: err.message,
      stack: err.stack,
    })

    results.push({
      name: '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è broadcast message',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ broadcast message',
      error: err.message,
    })
  }

  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    try {
      const results = await testBroadcastMessage()
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:', results)
      process.exit(0)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    }
  })()
}
