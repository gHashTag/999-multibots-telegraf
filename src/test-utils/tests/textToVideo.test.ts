import { inngest } from '@/inngest-functions/clients'
import { TestResult } from '@/test-utils/types'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'
import { logger } from '@/lib/logger'
import { InngestTestEngine } from '../inngest-test-engine'
import { TEST_CONFIG } from '../test-config'
import { createTestError } from '../test-logger'

const inngestTestEngine = new InngestTestEngine()

// Mock function for testing
const mockTextToVideo = async (event: any) => {
  console.log('üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ text-to-video', event)
  return {
    success: true,
    video_url:
      'https://yuukfqcsdhkyxegfwlcb.supabase.co/storage/v1/object/public/landingpage/avatars/neuro_blogger_bot/miniapp/video_ru/1.mp4',
    duration: 5,
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export const testTextToVideo = async (): Promise<TestResult[]> => {
  const results: TestResult[] = []
  const telegram_id = '123456789'
  const bot_name = 'test_bot'
  const startTime = Date.now()

  console.log('üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ text-to-video')

  try {
    // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    const successResult = await inngest.send({
      name: 'text-to-video.requested',
      data: {
        prompt: 'A beautiful sunset over the ocean',
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
      },
    })

    results.push({
      name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      success: true,
      message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      details: successResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
    const apiErrorResult = await inngest.send({
      name: 'text-to-video.requested',
      data: {
        prompt: 'Test API error',
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
        _test: {
          api_error: true,
        },
      },
    })

    results.push({
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API',
      success: true,
      message: '–û—à–∏–±–∫–∞ API —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: apiErrorResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    const insufficientBalanceResult = await inngest.send({
      name: 'text-to-video.requested',
      data: {
        prompt: 'Test insufficient balance',
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'kling-v1.6-pro',
        _test: {
          insufficient_balance: true,
        },
      },
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: insufficientBalanceResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç 4: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å
    const unsupportedModelResult = await inngest.send({
      name: 'text-to-video.requested',
      data: {
        prompt: 'Test unsupported model',
        telegram_id,
        is_ru: false,
        bot_name,
        model_id: 'unsupported-model',
      },
    })

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏',
      success: true,
      message: '–û—à–∏–±–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      details: unsupportedModelResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
    for (const [modelId, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      if (config.inputType.includes('text')) {
        const modelResult = await inngest.send({
          name: 'text-to-video.requested',
          data: {
            prompt: `Test model ${modelId}`,
            telegram_id,
            is_ru: false,
            bot_name,
            model_id: modelId,
          },
        })

        results.push({
          name: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ ${modelId}`,
          success: true,
          message: `–ú–æ–¥–µ–ª—å ${modelId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞`,
          details: modelResult,
          startTime,
          duration: Date.now() - startTime,
        })
      }
    }

    return results
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ text-to-video:', error)
    results.push({
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ text-to-video',
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      error: createTestError(error),
      startTime,
      duration: Date.now() - startTime,
    })
    return results
  }
}

export async function runTextToVideoTests(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const startTime = Date.now()

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ–æ')
    await inngestTestEngine.init()

    inngestTestEngine.register('text-to-video/process', mockTextToVideo)

    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    const basicResult = await inngestTestEngine.send({
      name: 'text-to-video/process',
      data: {
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        prompt: 'A beautiful sunset over the ocean',
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
      },
    })

    results.push({
      name: 'Basic Text to Video Test',
      success: true,
      message: '–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      details: basicResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const customResult = await inngestTestEngine.send({
      name: 'text-to-video/process',
      data: {
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        prompt: 'A beautiful sunset over the ocean',
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        settings: {
          duration: 5,
          fps: 30,
        },
      },
    })

    results.push({
      name: 'Custom Settings Test',
      success: true,
      message:
        '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      details: customResult,
      startTime,
      duration: Date.now() - startTime,
    })

    // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    try {
      await inngestTestEngine.send({
        name: 'text-to-video/process',
        data: {
          telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
          prompt: '',
          bot_name: TEST_CONFIG.TEST_BOT_NAME,
        },
      })

      results.push({
        name: 'Empty Prompt Test',
        success: false,
        message: '–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π',
        startTime,
        duration: Date.now() - startTime,
      })
    } catch (error) {
      results.push({
        name: 'Empty Prompt Test',
        success: true,
        message: '–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ–∂–∏–¥–∞–µ–º–æ–π –æ—à–∏–±–∫–æ–π',
        error: createTestError(error),
        startTime,
        duration: Date.now() - startTime,
      })
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
    results.push({
      name: 'Text to Video Tests',
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      error: createTestError(error),
      startTime,
      duration: Date.now() - startTime,
    })
  }

  return results
}
