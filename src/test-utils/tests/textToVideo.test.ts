import { InngestTester } from '../inngest-tests'
import { logger } from '@/utils/logger'
import { TEST_CONFIG } from '../test-config'

describe('textToVideo', () => {
  let tester: InngestTester

  beforeEach(() => {
    tester = new InngestTester()
  })

  it('üéØ –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞', async () => {
    logger.info({
      message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      description: 'Starting text to video test',
    })

    const result = await tester.textToVideo({
      text: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ',
      telegram_id: TEST_CONFIG.users.main.telegramId,
      is_ru: true,
      bot_name: TEST_CONFIG.users.main.botName,
    })

    logger.info({
      message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
      description: 'Checking test result',
      result,
    })

    expect(result.success).toBe(true)
    expect(result.videoBuffer).toBeDefined()
  })

  it('‚ùå –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–µ–∫—Å—Ç–∞', async () => {
    logger.info({
      message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏',
      description: 'Starting error handling test',
    })

    await expect(
      tester.textToVideo({
        text: '',
        telegram_id: TEST_CONFIG.users.main.telegramId,
        is_ru: true,
        bot_name: TEST_CONFIG.users.main.botName,
      })
    ).rejects.toThrow('Missing required fields')
  })

  it('üí∞ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É', async () => {
    logger.info({
      message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã',
      description: 'Starting payment processing test',
    })

    const result = await tester.textToVideo({
      text: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ',
      telegram_id: TEST_CONFIG.users.main.telegramId,
      is_ru: true,
      bot_name: TEST_CONFIG.users.main.botName,
    })

    logger.info({
      message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã',
      description: 'Checking payment result',
      result,
    })

    expect(result.paymentProcessed).toBe(true)
  })
})
