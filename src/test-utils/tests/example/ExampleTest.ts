import {
  TestSuite,
  Test,
  BeforeAll,
  AfterAll,
  BeforeEach,
  AfterEach,
} from '../../core/types'
import { TestCategory } from '../../core/categories'
import { logger } from '@/utils/logger'

/**
 * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
 */
@TestSuite('–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞', {
  category: TestCategory.Database,
  description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤',
})
export class ExampleTest {
  private testData: Record<string, any> = {}

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –≤ –∫–ª–∞—Å—Å–µ
   */
  @BeforeAll()
  async setupTestSuite() {
    logger.info('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞')
    this.testData = {
      createdAt: new Date(),
      items: ['item1', 'item2', 'item3'],
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–ª–∞—Å—Å–µ
   */
  @AfterAll()
  async teardownTestSuite() {
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞')
    this.testData = {}
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
   */
  @BeforeEach()
  async setupTest() {
    logger.info('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É')
    this.testData.counter = 0
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
   */
  @AfterEach()
  async teardownTest() {
    logger.info('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞')
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
   */
  @Test('–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç', {
    tags: ['simple', 'example'],
    description: '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–µ–Ω',
  })
  async testSimple() {
    logger.info('üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞')

    // –¢–µ—Å—Ç –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–µ–Ω
    return {
      success: true,
      message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
   */
  @Test('–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç', {
    tags: ['async', 'example'],
    description: '–¢–µ—Å—Ç —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏',
  })
  async testAsync() {
    logger.info('‚è±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞')

    // –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 100))

    this.testData.counter += 1

    return {
      success: true,
      message: `–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å—á–µ—Ç—á–∏–∫: ${this.testData.counter}`,
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –Ω–µ—É–¥–∞—á–µ–π
   */
  @Test('–£—Å–ª–æ–≤–Ω—ã–π —Ç–µ—Å—Ç', {
    tags: ['conditional', 'example'],
    description:
      '–¢–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è',
  })
  async testConditional() {
    logger.info('üé≤ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞')

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    const random = Math.random()

    // –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.3, —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω
    if (random > 0.3) {
      return {
        success: true,
        message: `–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω (${random})`,
      }
    } else {
      // –ò–Ω–∞—á–µ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ—É–¥–∞—á–µ–π
      return {
        success: false,
        message: `–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω (${random})`,
      }
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
   */
  @Test('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç', {
    tags: ['skipped', 'example'],
    description: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω',
    skip: true,
  })
  async testSkipped() {
    logger.info('‚è≠Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è')

    return {
      success: false,
      message: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è',
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º
   */
  @Test('–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–µ—Å—Ç', {
    tags: ['exclusive', 'example'],
    description: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä only',
    only: true,
  })
  async testOnly() {
    logger.info('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞')

    return {
      success: true,
      message: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω',
    }
  }
}
