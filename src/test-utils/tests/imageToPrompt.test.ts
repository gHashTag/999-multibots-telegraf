import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { TestResult } from '../types'
import { v4 as uuidv4 } from 'uuid'
import { TEST_CONFIG } from '../test-config'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { getUserBalance } from '@/core/supabase/getUserBalance'

export async function testImageToPrompt(): Promise<TestResult> {
  const testName = 'Image to Prompt Test'
  const testTelegramId = Date.now().toString()
  const testBotName = TEST_CONFIG.TEST_BOT_NAME
  const testImageUrl = TEST_CONFIG.TEST_IMAGE_URL

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç', {
      description: 'Starting image to prompt test',
      test_telegram_id: testTelegramId,
      test_bot_name: testBotName,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: testTelegramId,
      username: `test_user_${testTelegramId}`,
      bot_name: testBotName,
    })

    if (createError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`)
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const addInv_id = `${testTelegramId}-${Date.now()}`
    await TEST_CONFIG.inngestEngine.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        type: 'money_income',
        description: 'Test add stars for image processing',
        bot_name: testBotName,
        inv_id: addInv_id,
        service_type: ModeEnum.TopUpBalance,
        test_mode: true,
      },
    })

    logger.info('üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance top-up request sent',
      amount: 100,
      inv_id: addInv_id,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${balanceAfterAdd}, –æ–∂–∏–¥–∞–ª–æ—Å—å 100`
      )
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω', {
      description: 'Balance topped up',
      balance: balanceAfterAdd,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const eventId = uuidv4()
    await TEST_CONFIG.inngestEngine.send({
      name: 'image/process',
      data: {
        telegram_id: testTelegramId,
        bot_name: testBotName,
        image_url: testImageUrl,
        event_id: eventId,
        test_mode: true,
        service_type: ModeEnum.ImageToPrompt,
      },
    })

    logger.info('üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
      description: 'Image processing request sent',
      event_id: eventId,
      image_url: testImageUrl,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞
    await TEST_CONFIG.inngestEngine.send({
      name: 'image/to-prompt.generate',
      data: {
        telegram_id: testTelegramId,
        username: `test_user_${testTelegramId}`,
        bot_name: testBotName,
        image: testImageUrl,
        is_ru: true,
        cost_per_image: 1.875,
      },
    })

    logger.info('üéØ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞', {
      description: 'Prompt generation request sent',
      telegram_id: testTelegramId,
      image_url: testImageUrl,
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startTime = Date.now()
    const timeout = 10000 // 10 —Å–µ–∫—É–Ω–¥
    let imageProcessed = false

    while (Date.now() - startTime < timeout) {
      const { data: event, error: eventError } = await supabase
        .from('events')
        .select('*')
        .eq('id', eventId)
        .eq('telegram_id', testTelegramId)
        .eq('bot_name', testBotName)
        .single()

      if (eventError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${eventError.message}`)
      }

      if (event?.status === 'completed') {
        imageProcessed = true
        break
      }

      await new Promise(resolve => setTimeout(resolve, 500))
    }

    if (!imageProcessed) {
      throw new Error('–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    }

    logger.info('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', {
      description: 'Image processed',
      event_id: eventId,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const finalBalance = await getUserBalance(testTelegramId)
    const expectedCost = 1.875 // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞ ImageToPrompt
    const expectedBalance = balanceAfterAdd - expectedCost

    if (Math.abs(finalBalance - expectedBalance) > 0.01) {
      throw new Error(
        `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedBalance}, –ø–æ–ª—É—á–µ–Ω–æ: ${finalBalance}`
      )
    }

    logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      description: 'Balance check after processing',
      initial_balance: balanceAfterAdd,
      final_balance: finalBalance,
      cost: expectedCost,
    })

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (TEST_CONFIG.cleanupAfterEach) {
      await Promise.all([
        supabase
          .from('users')
          .delete()
          .eq('telegram_id', testTelegramId)
          .eq('bot_name', testBotName),
        supabase
          .from('events')
          .delete()
          .eq('telegram_id', testTelegramId)
          .eq('bot_name', testBotName),
      ])

      logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
        description: 'Test data cleaned up',
        telegram_id: testTelegramId,
        bot_name: testBotName,
      })
    }

    return {
      name: testName,
      success: true,
      message: '–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
    }
  } catch (err) {
    const error = err instanceof Error ? err : new Error(String(err))

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
      description: 'Error in image to prompt test',
      error: error.message,
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    return {
      name: testName,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      error,
    }
  }
}
