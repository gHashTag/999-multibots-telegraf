import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { calculateModeCost, ModeEnum } from '@/price/helpers/modelsCost'
import { v4 as uuidv4 } from 'uuid'
import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é imageToPrompt —á–µ—Ä–µ–∑ Inngest
 */
export async function testImageToPrompt(): Promise<TestResult> {
  const name = 'image_to_prompt_test'

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Image To Prompt:', {
      description: 'Starting Image To Prompt test',
    })

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    const cost = calculateModeCost({ mode: ModeEnum.ImageToPrompt }).stars

    logger.info('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
      description: 'Operation cost',
      cost,
      mode: ModeEnum.ImageToPrompt,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const event_id = `test-image-to-prompt-${Date.now()}-${uuidv4()}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ process payment –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    const payment_operation_id = `test-payment-${Date.now()}-${uuidv4()}`

    logger.info('üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', {
      description: 'Sending payment event',
      payment_operation_id,
      cost,
    })

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
    await inngest.send({
      id: payment_operation_id,
      name: 'payment/process',
      data: {
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        amount: cost,
        is_ru: true,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        type: 'money_income', // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        description: 'Test payment for image to prompt',
        operation_id: payment_operation_id,
        metadata: {
          service_type: ModeEnum.ImageToPrompt,
          test: true,
        },
      },
    })

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    await new Promise(resolve => setTimeout(resolve, 1000))

    logger.info('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ Image To Prompt:', {
      description: 'Sending Image To Prompt event',
      event_id,
      test_image: TEST_CONFIG.TEST_IMAGE_URL,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ imageToPrompt
    await inngest.send({
      id: event_id,
      name: 'image/to-prompt.generate',
      data: {
        image: TEST_CONFIG.TEST_IMAGE_URL,
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        username: 'test_user',
        is_ru: true,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        cost_per_image: cost,
      },
    })

    logger.info('‚è≥ –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', {
      description: 'Waiting for function execution',
      event_id,
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 5000))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
    logger.info('‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      description: 'Event sending test completed',
      event_id,
    })

    return {
      name,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç Image To Prompt —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      details: {
        event_id,
        cost,
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
      },
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Image To Prompt:', {
      description: 'Error in Image To Prompt test',
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
    })

    return {
      name,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${
        error instanceof Error ? error.message : String(error)
      }`,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}
