import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { calculateModeCost, ModeEnum } from '@/price/helpers/modelsCost'
import { v4 as uuidv4 } from 'uuid'
import { TestResult } from '../interfaces'
import { TEST_CONFIG } from '../test-config'
import { updateUserBalance } from '@/core/supabase'

interface BalanceResult {
  success: boolean
  error?: any
  balance?: number
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é imageToPrompt —á–µ—Ä–µ–∑ Inngest
 */
export async function testImageToPrompt(): Promise<TestResult> {
  const name = 'image_to_prompt_test'

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Image To Prompt:', {
      description: 'Starting Image To Prompt test',
    })

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    const cost = calculateModeCost({ mode: ModeEnum.ImageToPrompt }).stars

    logger.info('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
      description: 'Operation cost',
      cost,
      mode: ModeEnum.ImageToPrompt,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const event_id = `test-image-to-prompt-${Date.now()}-${uuidv4()}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ add_stars_to_balance –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    logger.info('üí∏ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é:', {
      description: 'Adding stars to user balance directly',
      telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
      cost: cost * 2, // –î–æ–±–∞–≤–ª—è–µ–º —Å –∑–∞–ø–∞—Å–æ–º
    })

    // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é updateUserBalance
    const balanceResult = (await updateUserBalance({
      telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
      amount: cost * 2, // –î–æ–±–∞–≤–ª—è–µ–º —Å –∑–∞–ø–∞—Å–æ–º
      type: 'money_income',
      description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ Image2Prompt',
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      service_type: 'testing',
    })) as BalanceResult

    if (!balanceResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: ${balanceResult.error}`)
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω:', {
      description: 'Balance added successfully',
      new_balance: balanceResult.balance,
      added_amount: cost * 2,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ imageToPrompt
    logger.info('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ Image To Prompt:', {
      description: 'Sending Image To Prompt event',
      event_id,
      test_image: TEST_CONFIG.TEST_IMAGE_URL,
    })

    await inngest.send({
      id: event_id,
      name: 'image/to-prompt.generate',
      data: {
        image: TEST_CONFIG.TEST_IMAGE_URL,
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        username: 'test_user',
        is_ru: true,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        cost_per_image: cost,
      },
    })

    logger.info('‚è≥ –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (5 —Å–µ–∫—É–Ω–¥):', {
      description: 'Waiting for function execution',
      event_id,
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 5000))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const afterBalanceResult = (await updateUserBalance({
      telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
      amount: 0, // –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
      type: 'money_income',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ Image2Prompt',
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
    })) as BalanceResult

    // –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
      description: 'Checking balance after operation',
      before_balance: balanceResult.balance,
      after_balance: afterBalanceResult.success
        ? afterBalanceResult.balance
        : 'error',
      expected_change: -cost,
    })

    const balanceChange =
      afterBalanceResult.success &&
      balanceResult.balance &&
      afterBalanceResult.balance
        ? balanceResult.balance - afterBalanceResult.balance
        : 0

    const isBalanceCorrect = Math.abs(balanceChange - cost) < 0.01 // –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

    if (afterBalanceResult.success && isBalanceCorrect) {
      logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è:', {
        description: 'Balance changed correctly',
        change: balanceChange,
        expected: cost,
      })
    } else {
      logger.warn('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:', {
        description: 'Unexpected balance change',
        change: balanceChange,
        expected: cost,
        before_balance: balanceResult.balance,
        after_balance: afterBalanceResult.success
          ? afterBalanceResult.balance
          : 'error',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    logger.info('‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      description: 'Event sending test completed',
      event_id,
      cost,
      telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
      bot_name: TEST_CONFIG.TEST_BOT_NAME,
      balance_change_correct: isBalanceCorrect,
    })

    return {
      name,
      success: true,
      message: '‚úÖ –¢–µ—Å—Ç Image To Prompt —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
      details: {
        event_id,
        cost,
        telegram_id: TEST_CONFIG.TEST_TELEGRAM_ID,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
        initial_balance: balanceResult.balance,
        final_balance: afterBalanceResult.success
          ? afterBalanceResult.balance
          : 'error',
        balance_change: balanceChange,
        balance_change_correct: isBalanceCorrect,
      },
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Image To Prompt:', {
      description: 'Error in Image To Prompt test',
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
    })

    return {
      name,
      success: false,
      message: `‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${
        error instanceof Error ? error.message : String(error)
      }`,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}
