import { Logger as logger } from '@/utils/logger'
import { TestResult } from '../types'
import { VIDEO_MODELS_CONFIG, VideoModelConfig } from '@/menu/videoModelMenu'
import { TEST_CONFIG } from '../test-config'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export async function testTextToVideoWizard(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const startTime = Date.now()

  logger.info({
    message: 'üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    description: 'Starting text-to-video wizard tests',
  })

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageModels = Object.values(VIDEO_MODELS_CONFIG).filter(
      model => model.inputType.includes('image')
    )

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      success: imageModels.length > 0,
      message: imageModels.length > 0
        ? `–ù–∞–π–¥–µ–Ω–æ ${imageModels.length} –º–æ–¥–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`
        : '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      duration: Date.now() - startTime,
      details: { models: imageModels.map(m => m.id) },
    })

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º
    const textModels = Object.values(VIDEO_MODELS_CONFIG).filter(
      model => model.inputType.includes('text')
    )

    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º',
      success: textModels.length > 0,
      message: textModels.length > 0
        ? `–ù–∞–π–¥–µ–Ω–æ ${textModels.length} –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º`
        : '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º',
      duration: Date.now() - startTime,
      details: { models: textModels.map(m => m.id) },
    })

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    results.push({
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏',
      success: !VIDEO_MODELS_CONFIG['invalid-model'],
      message: !VIDEO_MODELS_CONFIG['invalid-model']
        ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞'
        : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏',
      duration: Date.now() - startTime,
    })

    logger.info({
      message: '‚úÖ –¢–µ—Å—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      description: 'Text-to-video wizard tests completed',
      success_count: results.filter(r => r.success).length,
      total_count: results.length,
    })

    return results
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
      description: 'Error running text-to-video wizard tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [{
      name: '–¢–µ—Å—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      error: error instanceof Error ? error.message : String(error),
      duration: Date.now() - startTime,
    }]
  }
} 