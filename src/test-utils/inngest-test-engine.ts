import { logger } from '@/utils/logger'
import { InngestFunction } from 'inngest'

interface InngestTestEngineOptions {
  maxWaitTime?: number
  eventBufferSize?: number
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É Inngest
 */
export class InngestTestEngine {
  private events: any[] = []
  private registeredFunctions: Map<string, any> = new Map()
  private options: InngestTestEngineOptions

  constructor(options: InngestTestEngineOptions = {}) {
    this.options = {
      maxWaitTime: options.maxWaitTime || 10000,
      eventBufferSize: options.eventBufferSize || 200,
    }

    logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ Inngest', {
      description: 'Initializing Inngest test engine',
      options: this.options,
    })
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
   */
  register(eventName: string, handler: any) {
    logger.info('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏', {
      description: 'Registering function',
      event_name: eventName,
    })
    this.registeredFunctions.set(eventName, handler)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç step –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   */
  private createStepObject() {
    return {
      run: async (name: string, fn: () => Promise<any>) => {
        logger.info('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞', {
          description: 'Running step',
          step_name: name,
        })
        try {
          const result = await fn()
          logger.info('‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
            description: 'Step completed successfully',
            step_name: name,
            result,
          })
          return result
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–≥–∞', {
            description: 'Error executing step',
            step_name: name,
            error: error instanceof Error ? error.message : String(error),
          })
          throw error
        }
      },
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
   */
  async send(event: any) {
    logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫', {
      description: 'Sending event to test engine',
      event_name: event.name,
      event_id: event.id,
      event_data: event.data,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±—É—Ñ–µ—Ä
    const eventWithId = {
      ...event,
      id: event.id || Math.random().toString(36).substring(7),
      timestamp: new Date().toISOString(),
      status: 'pending',
    }
    this.events.push(eventWithId)

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (this.events.length > (this.options.eventBufferSize || 100)) {
      this.events.shift()
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë
    const handler = this.registeredFunctions.get(event.name)
    if (handler) {
      try {
        logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è', {
          description: 'Starting event handler',
          event_name: event.name,
          handler_name: handler.name,
        })

        const result = await handler({
          event: eventWithId,
          step: this.createStepObject(),
        })

        logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
          description: 'Event handler completed successfully',
          event_name: event.name,
          result,
        })

        await this.simulateExecution(eventWithId.id, result)
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏', {
          description: 'Error executing function',
          event_name: event.name,
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : undefined,
        })
        await this.simulateExecution(eventWithId.id, {
          success: false,
          error: error instanceof Error ? error.message : String(error),
        })
        throw error
      }
    } else {
      logger.warn('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è', {
        description: 'No handler found for event',
        event_name: event.name,
      })
    }

    return { event: eventWithId, success: true }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
   */
  getEvents() {
    return this.events
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
   */
  getEventById(id: string) {
    return this.events.find(e => e.id === id)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–º–µ–Ω–∏
   */
  getEventsByName(name: string) {
    return this.events.filter(e => e.name === name)
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π
   */
  clearEvents() {
    this.events = []
    logger.info('üßπ –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω', {
      description: 'Event buffer cleared',
    })
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  async waitForEvent(
    eventName: string,
    timeout = this.options.maxWaitTime
  ): Promise<any> {
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Waiting for event',
      event_name: eventName,
      timeout,
    })

    const startTime = Date.now()

    return new Promise((resolve, reject) => {
      const checkEvent = () => {
        const event = this.events.find(
          e => e.name === eventName && e.status === 'completed'
        )

        if (event) {
          logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', {
            description: 'Event found',
            event_name: eventName,
            event_id: event.id,
          })
          resolve(event)
          return
        }

        if (Date.now() - startTime > (timeout || 5000)) {
          logger.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è', {
            description: 'Event waiting timeout',
            event_name: eventName,
            timeout,
          })
          reject(new Error(`Timeout waiting for event: ${eventName}`))
          return
        }

        setTimeout(checkEvent, 100)
      }

      checkEvent()
    })
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   */
  private async simulateExecution(eventId: string, result: any) {
    const event = this.events.find(e => e.id === eventId)
    if (event) {
      event.status = result.success ? 'completed' : 'failed'
      event.result = result
    }
  }
}
