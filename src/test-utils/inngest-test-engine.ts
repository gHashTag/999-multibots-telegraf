import { logger } from '@/utils/logger'

export interface InngestTestEngineOptions {
  maxWaitTime?: number
  eventBufferSize?: number
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É Inngest
 */
export class InngestTestEngine {
  private events: any[] = []
  private options: InngestTestEngineOptions

  constructor(options: InngestTestEngineOptions = {}) {
    this.options = {
      maxWaitTime: 5000,
      eventBufferSize: 100,
      ...options,
    }

    logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ Inngest', {
      description: 'Initializing Inngest test engine',
      options: this.options,
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
   */
  async send(event: any) {
    logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫', {
      description: 'Sending event to test engine',
      event_name: event.name,
      event_id: event.id,
      event_data: event.data,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±—É—Ñ–µ—Ä
    this.events.push({
      ...event,
      timestamp: new Date().toISOString(),
      status: 'pending',
    })

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (this.events.length > (this.options.eventBufferSize || 100)) {
      this.events.shift()
    }

    return { event, success: true }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
   */
  getEvents() {
    return this.events
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
   */
  getEventById(id: string) {
    return this.events.find(e => e.id === id)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–º–µ–Ω–∏
   */
  getEventsByName(name: string) {
    return this.events.filter(e => e.name === name)
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π
   */
  clearEvents() {
    this.events = []
    logger.info('üßπ –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω', {
      description: 'Event buffer cleared',
    })
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  async waitForEvent(
    eventName: string,
    timeout = this.options.maxWaitTime
  ): Promise<any> {
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Waiting for event',
      event_name: eventName,
      timeout,
    })

    const startTime = Date.now()

    return new Promise((resolve, reject) => {
      const checkEvent = () => {
        const event = this.events.find(
          e => e.name === eventName && e.status === 'completed'
        )

        if (event) {
          logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', {
            description: 'Event found',
            event_name: eventName,
            event_id: event.id,
          })
          resolve(event)
          return
        }

        if (Date.now() - startTime > (timeout || 5000)) {
          logger.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è', {
            description: 'Event waiting timeout',
            event_name: eventName,
            timeout,
          })
          reject(new Error(`Timeout waiting for event: ${eventName}`))
          return
        }

        setTimeout(checkEvent, 100)
      }

      checkEvent()
    })
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   */
  async simulateExecution(eventId: string, result: any = { success: true }) {
    const eventIndex = this.events.findIndex(e => e.id === eventId)

    if (eventIndex >= 0) {
      this.events[eventIndex] = {
        ...this.events[eventIndex],
        result,
        status: 'completed',
        completed_at: new Date().toISOString(),
      }

      logger.info('üöÄ –°–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)', {
        description: 'Event executed (simulation)',
        event_id: eventId,
        event_name: this.events[eventIndex].name,
        result,
      })

      return this.events[eventIndex]
    }

    logger.warn('‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏', {
      description: 'Event not found for simulation',
      event_id: eventId,
    })

    return null
  }
}
