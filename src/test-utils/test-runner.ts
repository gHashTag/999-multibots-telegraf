#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø —Ç–µ—Å—Ç–∞]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all
 */

import { logger } from '@/utils/logger'
import { TEST_CONFIG } from './test-config'
import { DatabaseTester } from './database-tests'
import { BFLWebhookTester, NeuroPhotoWebhookTester } from './webhook-tests'
import { InngestTester } from './inngest-tests'
import { VoiceTester } from './test-voices'
import { TestResult, LogData } from './interfaces'

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
function formatResults(results: TestResult[], suiteName: string): void {
  const totalTests = results.length
  const passedTests = results.filter(r => r.success).length
  const failedTests = totalTests - passedTests

  logger.info(`\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ${suiteName}:`)
  logger.info(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}`)
  logger.info(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failedTests}`)
  logger.info(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}\n`)

  results.forEach(result => {
    const duration = result.duration ? `(${result.duration}–º—Å)` : ''
    const status = result.success ? '‚úÖ' : '‚ùå'
    logger.info(`${status} ${result.name} ${duration}`)

    if (!result.success && result.error) {
      logger.error(`   –û—à–∏–±–∫–∞: ${result.error}`)
    }

    if (result.details) {
      logger.info(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(result.details, null, 2)}`)
    }
  })
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
export async function runAllTests(): Promise<void> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...\n')

    // –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbTester = new DatabaseTester()
    const dbResults = await dbTester.runAllTests()
    formatResults(dbResults, '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')

    // –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
    const webhookTester = new BFLWebhookTester()
    const webhookResults = await webhookTester.runAllTests()
    formatResults(webhookResults, '–≤–µ–±—Ö—É–∫–æ–≤')

    // –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
    const inngestTester = new InngestTester()
    const inngestResults = await inngestTester.runAllTests()
    formatResults(inngestResults, 'Inngest —Ñ—É–Ω–∫—Ü–∏–π')

    // –¢–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    const neuroPhotoTester = new NeuroPhotoWebhookTester()
    const allNeuroResults = await neuroPhotoTester.runAllTests()
    formatResults(allNeuroResults, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')

    // –¢–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
    const neuroPhotoV2Results = await neuroPhotoTester.runAllTests()
    formatResults(neuroPhotoV2Results, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2')

    // –¢–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const voiceTester = new VoiceTester()
    const voiceResults = await voiceTester.runAllTests()
    formatResults(voiceResults, '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π')

    logger.info('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    const logData: LogData = {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      description: 'Error running test',
      error: errorMessage,
      context: {
        test: 'TestRunner',
        tester: 'TestRunner',
      },
    }
    logger.error(logData)
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', { error: errorMessage })
  }
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export class TestRunner {
  protected testResults: TestResult[] = []

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤
   */
  protected async runTest(
    name: string,
    testFn: () => Promise<void>
  ): Promise<void> {
    try {
      logger.info({
        message: `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`,
        description: `Starting test: ${name}`,
      })

      await testFn()

      this.testResults.push({
        name,
        success: true,
        message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      })

      logger.info({
        message: `‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: ${name}`,
        description: `Test completed successfully: ${name}`,
      })
    } catch (error) {
      this.testResults.push({
        name,
        success: false,
        message: `–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${
          error instanceof Error ? error.message : String(error)
        }`,
        error: error instanceof Error ? error.message : String(error),
      })

      logger.error({
        message: `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${name}`,
        description: `Test failed: ${name}`,
        error: error instanceof Error ? error.message : String(error),
      })
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  getResults(): TestResult[] {
    return this.testResults
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
   */
  clearResults(): void {
    this.testResults = []
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤
   */
  printSummary(): void {
    const totalTests = this.testResults.length
    const passedTests = this.testResults.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    logger.info({
      message: 'üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º',
      description: 'Test summary',
      total_tests: totalTests,
      passed_tests: passedTests,
      failed_tests: failedTests,
    })

    if (failedTests > 0) {
      const failedResults = this.testResults.filter(r => !r.success)
      logger.error({
        message: '‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã',
        description: 'Failed tests',
        tests: failedResults.map(r => ({
          name: r.name,
          message: r.message,
          error: r.error,
        })),
      })
    }
  }
}
