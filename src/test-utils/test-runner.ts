#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø —Ç–µ—Å—Ç–∞]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all
 */

import { ReplicateWebhookTester } from './webhook-tests'
import { DatabaseTester } from './database-tests'
import { logger } from '@/utils/logger'
import { TEST_CONFIG } from './test-config'
import fs from 'fs'
import path from 'path'

// –¢–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
type TestType = 'webhook' | 'database' | 'all'

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function formatResults(results, testType) {
  console.log(
    `\n${colors.bright}${colors.blue}=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ${testType} ===${colors.reset}\n`
  )

  const successful = results.filter(r => r.success).length
  const total = results.length

  console.log(
    `${colors.bright}–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${total} | –£—Å–ø–µ—à–Ω–æ: ${
      successful === total ? colors.green : colors.yellow
    }${successful}${colors.reset}/${total} | –û—à–∏–±–æ–∫: ${
      total - successful > 0 ? colors.red : colors.green
    }${total - successful}${colors.reset}\n`
  )

  results.forEach((result, index) => {
    const statusColor = result.success ? colors.green : colors.red
    const status = result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'
    const duration = result.duration ? `(${result.duration}–º—Å)` : ''

    console.log(
      `${index + 1}. ${statusColor}${status}${colors.reset} ${colors.bright}${
        result.testName
      }${colors.reset} ${colors.yellow}${duration}${colors.reset}`
    )
    console.log(`   ${result.message}`)

    if (!result.success && result.error) {
      console.log(`   ${colors.red}–û—à–∏–±–∫–∞: ${result.error}${colors.reset}`)
    }

    console.log('')
  })

  // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
  if (TEST_CONFIG.options.saveResults) {
    saveResults(results, testType)
  }

  return { successful, total }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª
 */
function saveResults(results, testType) {
  try {
    const resultsDir = TEST_CONFIG.options.resultsPath

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true })
    }

    const timestamp = new Date().toISOString().replace(/:/g, '-')
    const filename = `${testType}-tests-${timestamp}.json`
    const filePath = path.join(resultsDir, filename)

    fs.writeFileSync(
      filePath,
      JSON.stringify(
        {
          timestamp,
          testType,
          results,
          summary: {
            total: results.length,
            successful: results.filter(r => r.success).length,
          },
        },
        null,
        2
      )
    )

    logger.info({
      message: 'üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      description: 'Test results saved',
      filePath,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      description: 'Error saving test results',
      error: error.message,
    })
  }
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞
 */
function printHelp() {
  console.log(`
${colors.bright}${colors.blue}–°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í${colors.reset}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø-—Ç–µ—Å—Ç–æ–≤]${colors.reset}

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:${colors.reset}
  ${colors.cyan}webhook${colors.reset}    - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ Replicate
  ${colors.cyan}database${colors.reset}   - –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  ${colors.cyan}all${colors.reset}        - –í—Å–µ —Ç–µ—Å—Ç—ã

${colors.bright}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all${colors.reset}
  `)
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function main() {
  const args = process.argv.slice(2)
  const testType = args[0]?.toLowerCase() || 'all'

  console.log(
    `\n${colors.bright}${colors.blue}üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í${colors.reset}\n`
  )
  console.log(`–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: ${colors.cyan}${testType}${colors.reset}`)
  console.log(
    `URL API: ${colors.cyan}${TEST_CONFIG.server.apiUrl}${colors.reset}`
  )
  console.log(
    `–ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞: ${colors.cyan}${TEST_CONFIG.server.webhookPath}${colors.reset}\n`
  )

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if (testType === 'webhook' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'Starting webhook tests',
      })

      const webhookTester = new ReplicateWebhookTester()
      const webhookResults = await webhookTester.runAllTests()
      formatResults(webhookResults, '–≤–µ–±—Ö—É–∫–æ–≤')
    }

    if (testType === 'database' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: 'Starting database tests',
      })

      const dbTester = new DatabaseTester()
      const dbResults = await dbTester.runAllTests()
      formatResults(dbResults, '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    }

    if (!['webhook', 'database', 'all'].includes(testType)) {
      console.log(
        `${colors.red}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: ${testType}${colors.reset}\n`
      )
      printHelp()
      process.exit(1)
    }

    console.log(
      `\n${colors.bright}${colors.green}üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã${colors.reset}\n`
    )
  } catch (error) {
    console.error(
      `\n${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}\n`
    )
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      description: 'Critical error during tests',
      error: error.message,
      stack: error.stack,
    })

    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
main()
