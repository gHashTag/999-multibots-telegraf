#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø —Ç–µ—Å—Ç–∞]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all
 */

import {
  ReplicateWebhookTester,
  BFLWebhookTester,
  NeurophotoWebhookTester,
} from './webhook-tests'
import { DatabaseTester } from './database-tests'
import { InngestTester } from './inngest-tests'
import { logger } from '@/utils/logger'
import { TEST_CONFIG } from './test-config'

import { TestResult } from './types'

import { getBotByName } from '@/core/bot'

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function formatResults(results: TestResult[], testType: string) {
  console.log(
    `\n${colors.bright}${colors.blue}=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ${testType} ===${colors.reset}\n`
  )

  const successful = results.filter(r => r.success).length
  const total = results.length

  console.log(
    `${colors.bright}–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${total} | –£—Å–ø–µ—à–Ω–æ: ${
      successful === total ? colors.green : colors.yellow
    }${successful}${colors.reset}/${total} | –û—à–∏–±–æ–∫: ${
      total - successful > 0 ? colors.red : colors.green
    }${total - successful}${colors.reset}\n`
  )

  results.forEach((result, index) => {
    const statusColor = result.success ? colors.green : colors.red
    const status = result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'
    const duration = result.duration ? `(${result.duration}–º—Å)` : ''

    console.log(
      `${index + 1}. ${statusColor}${status}${colors.reset} ${colors.bright}${
        result.name
      }${colors.reset} ${colors.yellow}${duration}${colors.reset}`
    )
    console.log(`   ${result.message}`)

    if (!result.success && result.error) {
      console.log(`   ${colors.red}–û—à–∏–±–∫–∞: ${result.error}${colors.reset}`)
    }

    console.log('')
  })

  return { successful, total }
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞
 */
function printHelp() {
  console.log(`
${colors.bright}${colors.blue}–°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í${colors.reset}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø-—Ç–µ—Å—Ç–æ–≤] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]${colors.reset}

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:${colors.reset}
  ${colors.cyan}webhook${colors.reset}    - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ Replicate
  ${colors.cyan}bfl-webhook${colors.reset} - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ BFL
  ${colors.cyan}neurophoto-webhook${colors.reset} - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  ${colors.cyan}database${colors.reset}   - –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  ${colors.cyan}inngest${colors.reset}    - –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  ${colors.cyan}neuro${colors.reset}      - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  ${colors.cyan}neurophoto-v2${colors.reset} - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  ${colors.cyan}function${colors.reset}   - –¢–µ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏)
  ${colors.cyan}voice-avatar${colors.reset} - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  ${colors.cyan}text-to-speech${colors.reset} - –¢–µ—Å—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
  ${colors.cyan}text-to-video${colors.reset}    - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  ${colors.cyan}all${colors.reset}        - –í—Å–µ —Ç–µ—Å—Ç—ã

${colors.bright}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:${colors.reset}
  ${colors.cyan}--dry-run${colors.reset}        - –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
  ${colors.cyan}--debug-endpoint${colors.reset}  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ)

${colors.bright}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts bfl-webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --dry-run${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --debug-endpoint${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --dry-run --debug-endpoint${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts inngest${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neuro${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-v2${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts function hello-world${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts text-to-speech${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts text-to-video${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all${colors.reset}

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}
  ${colors.cyan}hello-world${colors.reset}       - –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  ${colors.cyan}broadcast${colors.reset}         - –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  ${colors.cyan}payment${colors.reset}           - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  ${colors.cyan}model-training${colors.reset}    - –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
  ${colors.cyan}model-training-v2${colors.reset} - –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π v2
  ${colors.cyan}neuro${colors.reset}             - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  ${colors.cyan}neurophoto-v2${colors.reset}     - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  ${colors.cyan}voice-avatar${colors.reset}       - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  ${colors.cyan}text-to-speech${colors.reset}    - –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
  `)
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function main() {
  const args = process.argv.slice(2)
  const testType = args[0]?.toLowerCase() || 'all'

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤
  let allSuccessful = true

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–æ–≤
  const dryRun = args.includes('--dry-run')
  const useDebugEndpoint = args.includes('--debug-endpoint')

  console.log(
    `\n${colors.bright}${colors.blue}üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í${colors.reset}\n`
  )
  console.log(`–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: ${colors.cyan}${testType}${colors.reset}`)
  if (dryRun) {
    console.log(
      `${colors.yellow}–†–µ–∂–∏–º: dry run (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)${colors.reset}`
    )
  }
  if (useDebugEndpoint) {
    console.log(
      `${colors.yellow}–†–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞${colors.reset}`
    )
  }
  console.log(
    `URL API: ${colors.cyan}${TEST_CONFIG.server.apiUrl}${colors.reset}`
  )

  if (['webhook', 'all'].includes(testType)) {
    console.log(
      `–ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ Replicate: ${colors.cyan}${TEST_CONFIG.server.webhookPath}${colors.reset}\n`
    )
  }

  if (['bfl-webhook', 'all'].includes(testType)) {
    console.log(
      `–ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ BFL: ${colors.cyan}${TEST_CONFIG.server.bflWebhookPath}${colors.reset}\n`
    )
  }

  if (['neurophoto-webhook', 'all'].includes(testType)) {
    console.log(
      `–ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: ${colors.cyan}${TEST_CONFIG.server.neurophotoWebhookPath}${colors.reset}\n`
    )
  }

  if (['inngest', 'neuro', 'all'].includes(testType)) {
    const inngestUrl = process.env.INNGEST_DEV_URL || 'http://localhost:8288'
    console.log(
      `URL Inngest Dev Server: ${colors.cyan}${inngestUrl}${colors.reset}`
    )
  }

  console.log('')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if (testType === 'webhook' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ Replicate',
        description: 'Starting Replicate webhook tests',
      })

      const webhookTester = new ReplicateWebhookTester()
      const webhookResults = await webhookTester.runAllTests()
      const { successful, total } = formatResults(
        webhookResults,
        '–≤–µ–±—Ö—É–∫–æ–≤ Replicate'
      )
      if (successful < total) {
        allSuccessful = false
      }
    }

    if (testType === 'bfl-webhook' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ BFL',
        description: 'Starting BFL webhook tests',
      })

      const bflWebhookTester = new BFLWebhookTester()
      const bflWebhookResults = await bflWebhookTester.runAllTests()
      formatResults(bflWebhookResults, '–≤–µ–±—Ö—É–∫–æ–≤ BFL')
    }

    if (testType === 'neurophoto-webhook' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
        description: 'Starting neurophoto webhook tests',
        dryRun,
        useDebugEndpoint,
      })

      const neurophotoWebhookTester = new NeurophotoWebhookTester()
      const neurophotoWebhookResults =
        await neurophotoWebhookTester.runAllTests({
          checkDatabase: !dryRun,
          useDebugEndpoint,
        })
      const { successful, total } = formatResults(
        neurophotoWebhookResults,
        '–≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'
      )
      allSuccessful = allSuccessful && successful === total
    }

    if (testType === 'database' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: 'Starting database tests',
      })

      const dbTester = new DatabaseTester()
      const dbResults = await dbTester.runAllTests()
      formatResults(dbResults as TestResult[], '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    }

    if (testType === 'inngest' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
        description: 'Starting Inngest function tests',
      })

      const inngestTester = new InngestTester()
      const inngestResults = await inngestTester.runAllTests()
      formatResults(inngestResults, 'Inngest —Ñ—É–Ω–∫—Ü–∏–π')
    }

    if (testType === 'neuro') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: 'Starting image generation tests',
      })

      const inngestTester = new InngestTester()
      const neuroResults = await inngestTester.runImageGenerationTests()

      // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã NeuroPhoto V2 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ neuro
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Starting NeuroPhoto V2 generation tests',
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ NeuroPhoto V2 –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      const neuroPhotoV2Results = await inngestTester.runSpecificFunctionTests(
        'neurophoto-v2'
      )
      const allNeuroResults = [...neuroResults, ...neuroPhotoV2Results]

      formatResults(allNeuroResults, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    }

    if (testType === 'neurophoto-v2') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Starting NeuroPhoto V2 generation tests',
      })

      const inngestTester = new InngestTester()
      const neuroPhotoV2Results = await inngestTester.runSpecificFunctionTests(
        'neurophoto-v2'
      )
      formatResults(neuroPhotoV2Results, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2')
    }

    if (testType === 'function') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π',
        description: 'Starting specific Inngest function tests',
      })

      const functionName = args[1]
      if (!functionName) {
        console.log(
          `${colors.red}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!${colors.reset}\n`
        )
        console.log(
          `${colors.cyan}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: hello-world, broadcast, payment, model-training, model-training-v2, neuro, neurophoto-v2, voice-avatar${colors.reset}\n`
        )
        console.log(
          `${colors.cyan}–ü—Ä–∏–º–µ—Ä: ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts function hello-world${colors.reset}\n`
        )
        printHelp()
        process.exit(1)
      }

      const inngestTester = new InngestTester()
      const functionResults = await inngestTester.runSpecificFunctionTests(
        functionName
      )
      formatResults(functionResults, `Inngest —Ñ—É–Ω–∫—Ü–∏–∏ "${functionName}"`)
    }

    if (testType === 'voice-avatar') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
        description: 'Starting voice avatar tests',
      })

      const inngestTester = new InngestTester()
      const voiceAvatarResults = await inngestTester.runVoiceAvatarTests()
      formatResults(voiceAvatarResults, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞')
    }

    if (testType === 'text-to-speech') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å',
        description: 'Starting text-to-speech tests',
      })

      const inngestTester = new InngestTester()
      const textToSpeechResults = await inngestTester.runTextToSpeechTests()
      const { successful, total } = formatResults(
        textToSpeechResults,
        '–¢–µ–∫—Å—Ç-–≤-—Ä–µ—á—å'
      )

      if (successful < total) {
        allSuccessful = false
      }
    }

    if (testType === 'text-to-video' || testType === 'all') {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
        description: 'Starting text-to-video tests',
      })

      const inngestTester = new InngestTester()
      const textToVideoResults = await inngestTester.runTextToVideoTests()
      const { successful, total } = formatResults(textToVideoResults, '–¢–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ')

      if (successful < total) {
        allSuccessful = false
      }
    }

    if (testType === 'help' || testType === '--help' || testType === '-h') {
      printHelp()
    }

    if (
      ![
        'webhook',
        'bfl-webhook',
        'neurophoto-webhook',
        'database',
        'inngest',
        'neuro',
        'neurophoto-v2',
        'function',
        'voice-avatar',
        'text-to-speech',
        'text-to-video',
        'all',
        'help',
        '--help',
        '-h',
      ].includes(testType)
    ) {
      console.log(
        `${colors.red}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: ${testType}${colors.reset}\n`
      )
      printHelp()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å —Ç–µ—Å—Ç—ã –≤ –æ–±—â–∏–µ —Ç–µ—Å—Ç—ã
    if (testType === 'all') {
      // –¢–µ—Å—Ç—ã —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å',
        description: 'Starting text-to-speech tests',
      })

      const inngestTester = new InngestTester()
      const textToSpeechResults = await inngestTester.runTextToSpeechTests()
      const textToSpeechStats = formatResults(
        textToSpeechResults,
        '–¢–µ–∫—Å—Ç-–≤-—Ä–µ—á—å'
      )

      if (textToSpeechStats.successful < textToSpeechStats.total) {
        allSuccessful = false
      }
    }

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    const speechResults = await runSpeechGenerationTest()

    if (speechResults.success) {
      logger.info({
        message: 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        description: 'All tests passed successfully',
        duration: speechResults.duration,
        name: speechResults.name,
        details: speechResults.message,
      })
    } else {
      logger.error({
        message: '‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏',
        description: 'Tests failed',
        error: speechResults.error,
        duration: speechResults.duration,
        name: speechResults.name,
        details: speechResults.message,
      })
      allSuccessful = false
      process.exit(1)
    }

    if (!allSuccessful) {
      process.exit(1)
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤',
      description: 'Error running tests',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    console.log(
      `\n${colors.red}${colors.bright}–û–®–ò–ë–ö–ê: ${
        error instanceof Error ? error.message : 'Unknown error'
      }${colors.reset}\n`
    )
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error(`Critical error: ${error.message}`)
    process.exit(1)
  })
}

async function runSpeechGenerationTest(): Promise<TestResult> {
  logger.info({
    message: 'üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
    description: 'Starting speech generation test',
  })

  const testCases = [
    {
      name: '–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ generateSpeech',
      text: '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
    },
    {
      name: '–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ generateSpeech',
      text: '–≠—Ç–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.',
    },
  ]

  try {
    const results: TestResult[] = []

    for (const testCase of testCases) {
      logger.info({
        message: `üß™ –¢–µ—Å—Ç –∫–µ–π—Å: ${testCase.name}`,
        description: `Testing case: ${testCase.name}`,
        text_length: testCase.text.length,
      })

      // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
      const botName = 'neuro_blogger_bot' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
      const botData = await getBotByName(botName)

      if (!botData?.bot) {
        throw new Error('Bot instance not found')
      }

      logger.info({
        message: 'üîÑ –ó–∞–ø—É—Å–∫ generateSpeech',
        description: 'Starting generateSpeech function',
        text: testCase.text,
        telegram_id: TEST_CONFIG.users.main.telegramId,
      })

      // // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é generateSpeech
      // const result = await generateSpeech({
      //   text: testCase.text,
      //   voice_id: 'ljyyJh982fsUinaSQPvv',
      //   telegram_id: TEST_CONFIG.users.main.telegramId,
      //   is_ru: TEST_CONFIG.users.main.isRussian,
      //   bot: botData.bot,
      //   bot_name: TEST_CONFIG.users.main.botName,
      // })

      // if (!result) {
      //   throw new Error('Failed to generate speech')
      // }

      // logger.info({
      //   message: '‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      //   description: 'Audio successfully generated',
      //   result_type: typeof result,
      // })

      results.push({
        success: true,
        name: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ - ${testCase.name}`,
        message: `–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ "${testCase.name}"`,
        duration: 0,
      })

      logger.info({
        message: `‚úÖ –¢–µ—Å—Ç "${testCase.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`,
        description: `Test "${testCase.name}" completed successfully`,
      })

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000))
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success: true,
      name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏',
      message: `–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${results.length} —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏`,
      duration: 0,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      description: 'Error in speech generation test',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
      name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏',
      duration: 0,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
    }
  }
}

async function testUserRegistrationWithoutReferral(): Promise<TestResult> {
  try {
    const ctx = {
      from: {
        id: 123456789,
        username: 'test_user',
        first_name: 'Test',
        last_name: 'User',
        language_code: 'ru',
        is_bot: false
      },
      message: {
        text: '/start'
      },
      session: {},
      scene: {
        enter: async () => {}
      },
      reply: async () => {},
      telegram: {
        sendMessage: async () => {}
      },
      botInfo: {
        username: 'test_bot'
      }
    }

    // –í—ã–∑—ã–≤–∞–µ–º createUserStep
    await createUserStep(ctx)

    return {
      success: true,
      description: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
      details: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏'
    }
  } catch (error) {
    return {
      success: false,
      description: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
      details: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
    }
  }
}
