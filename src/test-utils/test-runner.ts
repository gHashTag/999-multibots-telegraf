#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø —Ç–µ—Å—Ç–∞]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all
 */

import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { testBroadcastMessage } from './tests/broadcast.test'
import { testPaymentSystem } from './tests/payment.test'
import { testImageToPrompt } from './tests/imageToPrompt.test'
import 'dotenv/config'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.test
const envPath = path.resolve(process.cwd(), '.env.test')
require('dotenv').config({ path: envPath })

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
  description: 'Checking environment variables',
  SUPABASE_URL: process.env.SUPABASE_URL,
  NODE_ENV: process.env.NODE_ENV,
  env_path: envPath,
})

/** –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤ */
export const TEST_STATUS = {
  SUCCESS: 'success',
  FAILURE: 'failure',
  SKIPPED: 'skipped',
  ERROR: 'error',
} as const

/** –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏ –≤ –ª–æ–≥–∞—Ö */
const LOG_EMOJI = {
  START: 'üöÄ',
  SUCCESS: '‚úÖ',
  ERROR: '‚ùå',
  INFO: '‚ÑπÔ∏è',
  DETAILS: 'üìù',
  STATS: 'üìä',
  TIME: '‚è±Ô∏è',
  TEST: 'üß™',
} as const

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤ */
interface TestStats {
  /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ */
  total: number
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
  passed: number
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
  failed: number
  /** –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  totalDuration: number
  /** –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  averageDuration: number
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤
 * @param results - –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
 * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export function calculateStats(results: TestResult[]): TestStats {
  const total = results.length
  const passed = results.filter(r => r.success).length
  const failed = total - passed
  const totalDuration = 0 // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—á–µ—Ç duration
  const averageDuration = 0 // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—á–µ—Ç duration

  return {
    total,
    passed,
    failed,
    totalDuration,
    averageDuration,
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function formatResults(results: TestResult[], category: string) {
  const successCount = results.filter(r => r.success).length
  const failCount = results.filter(r => !r.success).length

  logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`, {
    description: `Test results for category "${category}"`,
    success_count: successCount,
    fail_count: failCount,
    total: results.length,
  })

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
  if (failCount > 0) {
    const failedTests = results.filter(r => !r.success)
    failedTests.forEach(test => {
      logger.error(`‚ùå –¢–µ—Å—Ç "${test.name}" –Ω–µ –ø—Ä–æ—à–µ–ª`, {
        description: `Test "${test.name}" failed`,
        error:
          test.error instanceof Error ? test.error.message : String(test.error),
      })
    })
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
export async function runAllTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', {
    description: 'Starting all tests',
  })

  try {
    // –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    logger.info('üí∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system tests',
    })
    const paymentResult = await testPaymentSystem()
    results.push(paymentResult)
    formatResults([paymentResult], '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')

    // –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info('üì® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏', {
      description: 'Starting broadcast tests',
    })
    const broadcastResults = await testBroadcastMessage()
    results.push(...broadcastResults)
    formatResults(broadcastResults, '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π')

    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    logger.info('üñºÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤', {
      description: 'Starting image to prompt tests',
    })
    const imageToPromptResult = await testImageToPrompt()
    results.push(imageToPromptResult)
    formatResults([imageToPromptResult], '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤')

    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const stats = calculateStats(results)

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
      description: 'All tests completed',
      total_tests: stats.total,
      passed_tests: stats.passed,
      failed_tests: stats.failed,
      success_rate: `${((stats.passed / stats.total) * 100).toFixed(2)}%`,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        success: false,
        name: 'Test Runner',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${
          error instanceof Error ? error.message : String(error)
        }`,
      },
    ]
  }
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export class TestRunner {
  /** –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ */
  protected testResults: TestResult[] = []

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤
   * @param name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
   * @param testFn - –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
   * @returns Promise<TestResult>
   */
  public async runTest(
    name: string,
    testFn: () => Promise<TestResult>
  ): Promise<TestResult> {
    logger.info(`${LOG_EMOJI.START} –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞`, {
      description: 'Starting test',
      test_name: name,
      start_time: new Date().toISOString(),
    })

    try {
      const result = await testFn()

      logger.info(`${LOG_EMOJI.SUCCESS} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω`, {
        description: 'Test completed',
        test_name: name,
        success: result.success,
        message: result.message,
      })

      return result
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)

      logger.error(`${LOG_EMOJI.ERROR} –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ`, {
        description: 'Test failed',
        test_name: name,
        error: errorMessage,
      })

      return {
        name,
        success: false,
        message: `${LOG_EMOJI.ERROR} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`,
        error: error instanceof Error ? error : new Error(errorMessage),
      }
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   * @returns TestResult[]
   */
  getResults(): TestResult[] {
    return this.testResults
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
   */
  clearResults(): void {
    this.testResults = []
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤
   */
  printSummary(): void {
    const totalTests = this.testResults.length
    const passedTests = this.testResults.filter(r => r.success).length
    const failedTests = totalTests - passedTests

    logger.info('üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º', {
      description: 'Test summary',
      total_tests: totalTests,
      passed_tests: passedTests,
      failed_tests: failedTests,
    })

    if (failedTests > 0) {
      const failedResults = this.testResults.filter(r => !r.success)
      logger.error('‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã', {
        description: 'Failed tests',
        tests: failedResults.map(r => ({
          name: r.name,
          message: r.message,
          error: r.error instanceof Error ? r.error.message : r.error,
        })),
      })
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç
 * @param testName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param testFn - –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
 * @returns Promise<TestResult>
 */
export async function runTest(
  testName: string,
  testFn: () => Promise<TestResult>
): Promise<TestResult> {
  const runner = new TestRunner()
  return runner.runTest(testName, testFn)
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤
 * @param tests - –ú–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π —Ç–µ—Å—Ç–æ–≤
 * @returns Promise<TestResult[]>
 */
export async function runTests(
  tests: Array<() => Promise<TestResult>>
): Promise<TestResult[]> {
  const results: TestResult[] = []

  for (const test of tests) {
    try {
      const result = await test()
      results.push(result)
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      results.push({
        name: 'Unknown Test',
        success: false,
        message: '‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π',
        error: error instanceof Error ? error : new Error(errorMessage),
      })
    }
  }

  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    try {
      const results = await runAllTests()
      const failedTests = results.filter(r => !r.success)

      if (failedTests.length > 0) {
        logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏:', {
          description: 'Some tests failed',
          failed_tests: failedTests.map(t => t.name),
        })
        process.exit(1)
      }

      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'All tests passed successfully',
      })
      process.exit(0)
    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
        description: 'Critical error running tests',
        error: error instanceof Error ? error.message : String(error),
      })
      process.exit(1)
    }
  })()
}
