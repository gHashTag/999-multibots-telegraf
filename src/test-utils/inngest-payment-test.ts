import { TelegramId } from '@/interfaces/telegram.interface';
import { inngest } from '@/core/inngest/clients'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'

const waitForPaymentCompletion = async (
  telegram_id: TelegramId,
  operation_id: string,
  expectedBalance: number
) => {
  let attempts = 0
  const maxAttempts = 10
  const delay = 1000 // 1 second

  while (attempts < maxAttempts) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
    const { data: payment } = await supabase
      .from('payments_v2')
      .select('status')
      .eq('telegram_id', telegram_id)
      .eq('inv_id', operation_id)
      .single()

    logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', {
      description: 'Checking operation status',
      attempt: attempts + 1,
      payment_status: payment?.status,
      operation_id,
    })

    if (payment?.status === 'COMPLETED') {
      logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        description: 'Operation completed successfully',
        operation_id,
      })
      return true
    }

    await new Promise(resolve => setTimeout(resolve, delay))
    attempts++
  }

  logger.error('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Operation timeout',
    operation_id,
    attempts,
  })
  return false
}

export const testInngestPayment = async () => {
  try {
    const testTelegramId = Date.now()
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π', {
      description: 'Starting Inngest payment function test',
      telegram_id: testTelegramId,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createUserError } = await supabase.from('users').insert([
      {
        telegram_id: testTelegramId.toString(),
        username: 'test_user',
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
        photo_url: '',
        chat_id: testTelegramId,
        mode: 'clean',
        model: 'gpt-4-turbo',
        count: 0,
        aspect_ratio: '9:16',
        balance: 0,
        bot_name: 'test_bot',
        level: 1,
      },
    ])

    if (createUserError) {
      throw new Error(`Failed to create test user: ${createUserError.message}`)
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
    })

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(testTelegramId)
    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Initial balance check',
      telegram_id: testTelegramId,
      balance: initialBalance,
    })

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const addOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-add-${addOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test add payment via Inngest',
        type: 'income',
        metadata: {
          service_type: 'System',
          test: true,
        },
        operation_id: addOperationId,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Waiting for add operation completion',
      operation_id: addOperationId,
    })

    const addOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      addOperationId,
      100 // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    )
    if (!addOperationCompleted) {
      throw new Error('Add operation timeout')
    }

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Balance after adding payment',
      telegram_id: testTelegramId,
      balance: balanceAfterAdd,
      expected: 100,
    })

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const spendOperationId = `${Date.now()}-${testTelegramId}-${uuidv4()}`
    await inngest.send({
      id: `test-payment-spend-${spendOperationId}`,
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 30,
        is_ru: true,
        bot_name: 'test_bot',
        description: 'Test spend payment via Inngest',
        type: 'outcome',
        metadata: {
          service_type: ModeEnum.TextToImage,
          test: true,
        },
        operation_id: spendOperationId,
      },
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è', {
      description: 'Waiting for spend operation completion',
      operation_id: spendOperationId,
    })

    const spendOperationCompleted = await waitForPaymentCompletion(
      testTelegramId,
      spendOperationId,
      70 // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    )
    if (!spendOperationCompleted) {
      throw new Error('Spend operation timeout')
    }

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const finalBalance = await getUserBalance(testTelegramId)
    logger.info('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Final balance check',
      telegram_id: testTelegramId,
      balance: finalBalance,
      expected: 70,
    })

    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select(
        'amount, stars, payment_method, status, description, metadata, inv_id'
      )
      .eq('telegram_id', testTelegramId)
      .order('payment_date', { ascending: false })

    if (error) {
      throw error
    }

    logger.info('üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2', {
      description: 'Payments records',
      telegram_id: testTelegramId,
      payments,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const testsPassed =
      initialBalance === 0 &&
      balanceAfterAdd === 100 &&
      finalBalance === 70 &&
      payments.length === 2 &&
      payments.every(p => p.status === 'COMPLETED') &&
      payments.some(p => p.inv_id === addOperationId) &&
      payments.some(p => p.inv_id === spendOperationId)

    logger.info(
      testsPassed ? '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' : '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã',
      {
        description: testsPassed
          ? 'All tests passed successfully'
          : 'Some tests failed',
        telegram_id: testTelegramId,
        initialBalance,
        balanceAfterAdd,
        finalBalance,
        paymentsCount: payments.length,
      }
    )

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase
      .from('payments_v2')
      .delete()
      .eq('telegram_id', testTelegramId.toString())
    await supabase
      .from('users')
      .delete()
      .eq('telegram_id', testTelegramId.toString())

    logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
      description: 'Test data cleaned up',
      telegram_id: testTelegramId,
    })

    return testsPassed
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', {
      description: 'Error during testing',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })
    throw error
  }
}
