import { TelegramId } from '@/interfaces/telegram.interface'
import { inngest } from '@/inngest-functions/clients'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { supabase } from '@/core/supabase'

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const generateTestTelegramId = (): TelegramId => {
  return Date.now().toString()
}

const generateOperationId = (telegram_id: TelegramId): string => {
  return `${Date.now()}-${telegram_id}-${uuidv4()}`
}

const waitForPaymentCompletion = async (
  telegram_id: TelegramId,
  operation_id: string
) => {
  let attempts = 0
  const maxAttempts = 5 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å 20 –¥–æ 5
  const delay = 1000 // 1 second

  while (attempts < maxAttempts) {
    attempts++

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
    const { data: payments, error: paymentError } = await supabase
      .from('payments_v2')
      .select('status, payment_id')
      .eq('telegram_id', telegram_id)
      .eq('inv_id', operation_id)
      .order('payment_date', { ascending: false })
      .limit(1)

    if (paymentError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error checking payment status',
        error: paymentError.message,
        attempt: attempts,
        telegram_id,
        operation_id,
      })
      continue
    }

    const payment = payments?.[0]

    logger.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Checking payment status',
      attempt: attempts,
      telegram_id,
      operation_id,
      payment_status: payment?.status || 'NOT_FOUND',
      payment_id: payment?.payment_id || 'NOT_FOUND',
    })

    if (!payment) {
      logger.error('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        description: 'Payment not found',
        operation_id,
        attempt: attempts,
        telegram_id,
      })
      await new Promise(resolve => setTimeout(resolve, delay))
      continue
    }

    if (payment.status === 'FAILED') {
      logger.error('‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
        description: 'Payment failed',
        operation_id,
        attempt: attempts,
        telegram_id,
      })
      return false
    }

    if (payment.status === 'COMPLETED') {
      logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        description: 'Operation completed successfully',
        operation_id,
        payment_id: payment.payment_id,
      })
      return true
    }

    await new Promise(resolve => setTimeout(resolve, delay))
  }

  logger.error('‚ùå –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Operation timeout',
    operation_id,
    attempts,
  })
  return false
}

export const testInngestPayment = async () => {
  const telegram_id = generateTestTelegramId()
  const bot_name = 'test_bot'

  logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
    description: 'Starting payment system test',
    telegram_id,
  })

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π operation_id –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const incomeOperationId = generateOperationId(telegram_id)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  await inngest.send({
    name: 'payment/process',
    data: {
      amount: 100,
      telegram_id,
      type: 'money_income',
      description: 'test money_income',
      bot_name,
      operation_id: incomeOperationId,
      metadata: {
        service_type: 'System',
        test: true,
      },
    },
  })

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const incomeResult = await waitForPaymentCompletion(
    telegram_id,
    incomeOperationId
  )

  if (!incomeResult) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error during money_income operation',
      telegram_id,
      operation_id: incomeOperationId,
    })
    process.exit(1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const balanceAfterIncome = await getUserBalance(telegram_id, bot_name)
  if (Number(balanceAfterIncome) !== 100) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', {
      description: 'Incorrect balance after money_income',
      telegram_id,
      expected: 100,
      actual: balanceAfterIncome,
    })
    process.exit(1)
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π operation_id –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
  const spendOperationId = generateOperationId(telegram_id)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è
  await inngest.send({
    name: 'payment/process',
    data: {
      amount: -30,
      telegram_id,
      type: 'money_expense',
      description: 'test money_expense',
      bot_name,
      operation_id: spendOperationId,
      metadata: {
        service_type: 'System',
        test: true,
      },
    },
  })

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è
  const spendResult = await waitForPaymentCompletion(
    telegram_id,
    spendOperationId
  )

  if (!spendResult) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Error during spend operation',
      telegram_id,
      operation_id: spendOperationId,
    })
    process.exit(1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
  const finalBalance = await getUserBalance(telegram_id, bot_name)
  if (Number(finalBalance) !== 70) {
    logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Incorrect final balance',
      telegram_id,
      expected: 70,
      actual: finalBalance,
    })
    process.exit(1)
  }

  logger.info('‚úÖ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
    description: 'Payment system test completed successfully',
    telegram_id,
    final_balance: finalBalance,
  })

  process.exit(0)
}
