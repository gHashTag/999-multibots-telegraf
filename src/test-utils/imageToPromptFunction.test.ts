import { TestResult } from './types'
import { logger } from '@/utils/logger'
import { imageToPromptFunction } from '@/inngest-functions/imageToPrompt'
import { getBotByName } from '@/core/bot'
import { getUserBalance } from '@/core/supabase'
import { inngest } from '@/core/inngest/clients'
import axios from 'axios'

// –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBot = {
  telegram: {
    sendMessage: async (chatId: string, message: string) => {
      logger.info('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram', {
        description: 'Mock bot sending message',
        chat_id: chatId,
        message
      })
    }
  }
}

const mockEvent = {
  data: {
    image: 'https://example.com/test.jpg',
    telegram_id: '123456789',
    username: 'testUser',
    is_ru: true,
    bot_name: 'testBot',
    cost_per_image: 10
  }
}

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const originalGetBot = getBotByName
const originalGetBalance = getUserBalance
const originalAxiosPost = axios.post
const originalAxiosGet = axios.get
const originalInngestSend = inngest.send

// –ú–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
const mocks = {
  getBotByName: async () => ({ bot: mockBot }),
  getUserBalance: async () => 100,
  axiosPost: async () => ({ data: { event_id: 'test-event-id' } }),
  axiosGet: async () => ({ data: 'data: ["", "Generated prompt description"]' }),
  inngestSend: async () => ({ ids: ['test-id'] })
}

export async function testImageToPromptFunction(): Promise<TestResult[]> {
  const results: TestResult[] = []
  
  // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Testing successful event processing'
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    Object.assign(global, {
      getBotByName: mocks.getBotByName,
      getUserBalance: mocks.getUserBalance
    })
    Object.assign(axios, {
      post: mocks.axiosPost,
      get: mocks.axiosGet
    })
    Object.assign(inngest, {
      send: mocks.inngestSend
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    await inngest.send({
      name: 'image/to-prompt.generate',
      data: mockEvent.data
    })
    
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'Event processing test passed'
    })
    
    results.push({
      name: 'successful_event_processing',
      success: true,
      message: 'Successfully processed image to prompt event'
    })
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è', {
      description: 'Event processing test failed',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
    
    results.push({
      name: 'successful_event_processing',
      success: false,
      message: 'Failed to process image to prompt event',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }

  // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API', {
      description: 'Testing API error handling'
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π
    Object.assign(axios, {
      post: async () => { throw new Error('API Error') }
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    await inngest.send({
      name: 'image/to-prompt.generate',
      data: mockEvent.data
    })
    
    logger.info('‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'API error handling test passed'
    })
    
    results.push({
      name: 'api_error_handling',
      success: true,
      message: 'Successfully handled API error'
    })
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API', {
      description: 'API error handling test failed',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
    
    results.push({
      name: 'api_error_handling',
      success: false,
      message: 'Failed to handle API error',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Testing payment processing'
    })
    
    let paymentProcessed = false
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    Object.assign(axios, {
      post: mocks.axiosPost,
      get: mocks.axiosGet
    })
    Object.assign(inngest, {
      send: async (event: any) => {
        if (event.name === 'payment/process') {
          paymentProcessed = true
          logger.info('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞', {
            description: 'Payment event processed',
            event
          })
        }
        return { ids: ['test-id'] }
      }
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    await inngest.send({
      name: 'image/to-prompt.generate',
      data: mockEvent.data
    })
    
    if (!paymentProcessed) {
      throw new Error('Payment was not processed')
    }
    
    logger.info('‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–π–¥–µ–Ω', {
      description: 'Payment processing test passed'
    })
    
    results.push({
      name: 'payment_processing',
      success: true,
      message: 'Successfully processed payment'
    })
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Payment processing test failed',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
    
    results.push({
      name: 'payment_processing',
      success: false,
      message: 'Failed to process payment',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  Object.assign(global, {
    getBotByName: originalGetBot,
    getUserBalance: originalGetBalance
  })
  Object.assign(axios, {
    post: originalAxiosPost,
    get: originalAxiosGet
  })
  Object.assign(inngest, {
    send: originalInngestSend
  })

  return results
} 