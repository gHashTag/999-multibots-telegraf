import axios from 'axios'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { testSupabase } from './test-env'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
 */
interface TestResult {
  testName: string
  success: boolean
  message: string
  details?: any
  error?: string
  duration?: number
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ Replicate
 */
export class ReplicateWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞',
        description: 'Webhook send test',
        status: payload.status,
        trainingId: payload.id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let beforeStatus: string | null = null
      if (options.checkDatabase) {
        try {
          const { data } = await testSupabase
            .from('model_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          beforeStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status before test',
            error: error.message,
          })
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.webhookPath}`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await testSupabase
            .from('model_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          afterStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status after test',
            error: error.message,
          })
        }
      }

      const duration = Date.now() - startTime
      return {
        testName,
        success: true,
        message: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
        details: {
          responseData: response.data,
          databaseCheck: options.checkDatabase
            ? {
                beforeStatus,
                afterStatus,
                changed: beforeStatus !== afterStatus,
              }
            : null,
        },
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during webhook test',
        error: error.message,
        payload,
      })

      return {
        testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples.find(
      s => s.status === 'succeeded'
    )

    if (!sample) {
      return {
        testName: 'Successful training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Successful training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'succeeded',
      output: {
        uri: sample.outputUrl,
        version: sample.version,
      },
      metrics: {
        predict_time: sample.metrics.predict_time,
      },
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testFailedTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples.find(
      s => s.status === 'failed'
    )

    if (!sample) {
      return {
        testName: 'Failed training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Failed training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'failed',
      error: sample.error || 'Unknown error occurred during training',
      metrics: {
        predict_time: sample.metrics.predict_time,
      },
    }

    return this.sendWebhook(payload)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testCanceledTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples.find(
      s => s.status === 'canceled'
    )

    if (!sample) {
      return {
        testName: 'Canceled training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Canceled training webhook test',
      sample,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: 'canceled',
      metrics: {
        predict_time: sample.metrics.predict_time,
      },
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Running all webhook tests',
    })

    try {
      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const successResult = await this.testSuccessfulTraining()
      results.push(successResult)

      // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const failedResult = await this.testFailedTraining()
      results.push(failedResult)

      // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const canceledResult = await this.testCanceledTraining()
      results.push(canceledResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Webhook tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'Critical error during webhook tests',
        error: error.message,
      })
      throw error
    }
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ BFL
 */
export class BFLWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async sendWebhook(
    payload: any,
    options = { checkDatabase: true }
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `BFL Webhook test: ${payload.status}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'BFL webhook send test',
        status: payload.status,
        task_id: payload.task_id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let beforeStatus: string | null = null
      if (options.checkDatabase) {
        try {
          const { data } = await testSupabase
            .from('model_trainings')
            .select('status')
            .eq('finetune_id', payload.task_id)
            .limit(1)
            .single()

          beforeStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get BFL training status before test',
            error: error.message,
          })
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.bflWebhookPath}`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await testSupabase
            .from('model_trainings')
            .select('status')
            .eq('finetune_id', payload.task_id)
            .limit(1)
            .single()

          afterStatus = data?.status || null
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get BFL training status after test',
            error: error.message,
          })
        }
      }

      const duration = Date.now() - startTime
      return {
        testName,
        success: true,
        message: `BFL –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
        details: {
          responseData: response.data,
          databaseCheck: options.checkDatabase
            ? {
                beforeStatus,
                afterStatus,
                changed: beforeStatus !== afterStatus,
              }
            : null,
        },
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during BFL webhook test',
        error: error.message,
        payload,
      })

      return {
        testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BFL –≤–µ–±—Ö—É–∫–∞',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'SUCCESS'
    )

    if (!sample) {
      return {
        testName: 'BFL successful training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'BFL successful training webhook test',
      sample,
    })

    return this.sendWebhook(sample)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ BFL
   */
  async testErrorTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'ERROR'
    )

    if (!sample) {
      return {
        testName: 'BFL error training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ—à–∏–±–æ—á–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—à–∏–±–æ—á–Ω–æ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'BFL error training webhook test',
      sample,
    })

    return this.sendWebhook(sample)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL
   */
  async testPendingTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.bflTraining.samples.find(
      s => s.status === 'PENDING'
    )

    if (!sample) {
      return {
        testName: 'BFL pending training webhook test',
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –æ–∂–∏–¥–∞—é—â–µ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: 'No sample found',
      }
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–π BFL —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'BFL pending training webhook test',
      sample,
    })

    return this.sendWebhook(sample)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    // –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    results.push(await this.testSuccessfulTraining())

    // –û—à–∏–±–æ—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    results.push(await this.testErrorTraining())

    // –û–∂–∏–¥–∞—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    results.push(await this.testPendingTraining())

    return results
  }
}
