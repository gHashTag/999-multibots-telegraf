import axios from 'axios'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { TrainingWithUser } from '@/core/supabase/getTrainingWithUser'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface TestResult {
  testName: string
  success: boolean
  message: string
  details?: any
  error?: string
  duration?: number
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—Ö—É–∫–æ–≤ Replicate
 */
export class ReplicateWebhookTester {
  private apiUrl: string
  private webhookPath: string

  constructor() {
    this.apiUrl = TEST_CONFIG.server.apiUrl
    this.webhookPath = TEST_CONFIG.server.webhookPath
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–±-—Ö—É–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  async sendWebhook(config: any): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Webhook test: ${config.status} status for training ${config.id}`

    try {
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–µ–±-—Ö—É–∫–∞',
        description: 'Starting webhook test',
        testName,
        config,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
      let trainingBefore: TrainingWithUser | null = null
      try {
        const { data, error } = await supabase
          .from('model_trainings')
          .select('*')
          .eq('replicate_training_id', config.id)
          .limit(1)
          .single()

        if (!error && data) {
          trainingBefore = data as unknown as TrainingWithUser
          logger.info({
            message: 'üîç –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º',
            description: 'Found training in database before test',
            trainingId: config.id,
            status: trainingBefore.status,
          })
        } else {
          logger.warn({
            message: '‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º',
            description: 'Training not found in database before test',
            trainingId: config.id,
            error: error?.message,
          })
        }
      } catch (dbError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º',
          description: 'Error checking database before test',
          error: dbError.message,
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±-—Ö—É–∫
      const response = await axios.post(
        `${this.apiUrl}${this.webhookPath}`,
        config,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      logger.info({
        message: 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–±-—Ö—É–∫',
        description: 'Webhook test sent',
        status: response.status,
        responseData: response.data,
      })

      // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await new Promise(resolve => setTimeout(resolve, 500))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      let trainingAfter: TrainingWithUser | null = null
      let statusUpdated = false
      try {
        const { data, error } = await supabase
          .from('model_trainings')
          .select('*')
          .eq('replicate_training_id', config.id)
          .limit(1)
          .single()

        if (!error && data) {
          trainingAfter = data as unknown as TrainingWithUser

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
          if (
            trainingBefore &&
            trainingBefore.status !== trainingAfter.status
          ) {
            statusUpdated = true
            logger.info({
              message: '‚úÖ –°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω',
              description: 'Database status updated',
              trainingId: config.id,
              oldStatus: trainingBefore.status,
              newStatus: trainingAfter.status,
            })
          } else {
            logger.warn({
              message: '‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è',
              description: 'Database status not changed',
              trainingId: config.id,
              status: trainingAfter.status,
            })
          }
        }
      } catch (dbError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
          description: 'Error checking database after test',
          error: dbError.message,
        })
      }

      const duration = Date.now() - startTime
      return {
        testName,
        success: response.status === 200,
        message: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${duration}–º—Å`,
        details: {
          response: response.data,
          statusCode: response.status,
          statusUpdated,
          trainingBefore: trainingBefore
            ? {
                id: trainingBefore.id,
                status: trainingBefore.status,
              }
            : null,
          trainingAfter: trainingAfter
            ? {
                id: trainingAfter.id,
                status: trainingAfter.status,
              }
            : null,
        },
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ–±-—Ö—É–∫–∞',
        description: 'Error during webhook test',
        error: error.message,
        testName,
      })

      return {
        testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testSucceededTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples[0]
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: sample.status,
      output: sample.output,
      metrics: sample.metrics,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testFailedTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples[1]
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: sample.status,
      error: sample.error,
      logs: sample.logs,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  async testCanceledTraining(): Promise<TestResult> {
    const sample = TEST_CONFIG.modelTraining.samples[2]
    const payload = {
      id: sample.trainingId,
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: sample.status,
    }

    return this.sendWebhook(payload)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±-—Ö—É–∫–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±-—Ö—É–∫–æ–≤',
      description: 'Running all webhook tests',
    })

    try {
      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      const successResult = await this.testSucceededTraining()
      results.push(successResult)

      // –¢–µ—Å—Ç –æ—à–∏–±–∫–∏
      const failureResult = await this.testFailedTraining()
      results.push(failureResult)

      // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã
      const cancelResult = await this.testCanceledTraining()
      results.push(cancelResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –≤–µ–±-—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Webhook tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±-—Ö—É–∫–æ–≤',
        description: 'Critical error during webhook tests',
        error: error.message,
      })
      throw error
    }
  }
}
