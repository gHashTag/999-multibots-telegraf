import axios from 'axios'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { supabaseTestClient } from './test-env'
import { TestResult } from './types'

/** –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */
const TRAINING_STATUS = {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED',
  PROCESSING: 'PROCESSING',
} as const

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±—Ö—É–∫–∞ */
interface WebhookPayload {
  task_id: string
  status?: string
  id?: string
  model?: string
  version?: string
  output?: {
    uri?: string
    version?: string
    image?: string
  }
  metrics?: {
    predict_time?: number
  }
  error?: string
  trainingId?: string
  result?: Record<string, unknown>
}

/** –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ */
interface WebhookOptions {
  /** –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö */
  checkDatabase: boolean
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ */
  expectedStatus?: string
  /** –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */
  expectedOutput?: string
  /** –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ */
  expectedError?: string
  /** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç */
  useDebugEndpoint?: boolean
}

/** –°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ */
interface DatabaseStatus {
  /** –°—Ç–∞—Ç—É—Å –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ */
  beforeStatus: string | null
  /** –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ */
  afterStatus: string | null
  /** –ò–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å */
  changed: boolean
  /** URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */
  output_url?: string
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ Replicate
 */
export class ReplicateWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param payload - –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞
   * @param options - –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async sendWebhook(
    payload: WebhookPayload,
    options: WebhookOptions = { checkDatabase: true }
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Webhook test: ${payload.status || 'unknown'}`

    try {
      logger.info({
        message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞',
        description: 'Starting webhook test',
        test_name: testName,
        status: payload.status,
        training_id: payload.id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let beforeStatus: string | null = null
      if (options.checkDatabase) {
        try {
          const { data } = await supabaseTestClient
            .from('model_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          beforeStatus = data?.status || null

          logger.info({
            message: 'üîç –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Got status before test',
            test_name: testName,
            status: beforeStatus,
          })
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status before test',
            test_name: testName,
            error: error instanceof Error ? error.message : 'Unknown error',
          })
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.webhookPath}`

      logger.info({
        message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞',
        description: 'Sending webhook',
        test_name: testName,
        url: webhookUrl,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      logger.info({
        message: '‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        description: 'Webhook sent successfully',
        test_name: testName,
        status: response.status,
      })

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      let afterStatus: string | null = null
      if (options.checkDatabase) {
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 1000))

        try {
          const { data } = await supabaseTestClient
            .from('model_trainings')
            .select('status')
            .eq('replicate_training_id', payload.id)
            .limit(1)
            .single()

          afterStatus = data?.status || null

          logger.info({
            message: 'üîç –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Got status after test',
            test_name: testName,
            status: afterStatus,
          })
        } catch (error) {
          logger.warn({
            message: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞',
            description: 'Failed to get training status after test',
            test_name: testName,
            error: error instanceof Error ? error.message : 'Unknown error',
          })
        }
      }

      const duration = Date.now() - startTime
      const databaseCheck: DatabaseStatus | null = options.checkDatabase
        ? {
            beforeStatus,
            afterStatus,
            changed: beforeStatus !== afterStatus,
          }
        : null

      logger.info({
        message: 'üèÅ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
        description: 'Test completed successfully',
        test_name: testName,
        duration: `${duration}ms`,
        database_check: databaseCheck,
      })

      return {
        name: testName,
        success: true,
        message: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during webhook test',
        test_name: testName,
        error: error instanceof Error ? error.message : 'Unknown error',
        payload,
        duration: `${duration}ms`,
      })

      return {
        name: testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error : new Error(String(error)),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const mockTraining: WebhookPayload = {
      id: 'test-training-id',
      task_id: 'test-task-id',
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: TRAINING_STATUS.SUCCESS,
      output: {
        uri: 'https://example.com/output.jpg',
        version: '1.0.0',
      },
      metrics: {
        predict_time: 1000,
      },
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Starting successful training webhook test',
      test_name: 'Successful Training Test',
      sample: mockTraining,
    })

    return this.sendWebhook(mockTraining)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testFailedTraining(): Promise<TestResult> {
    const mockTraining: WebhookPayload = {
      id: 'test-training-id-failed',
      task_id: 'test-task-id-failed',
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: TRAINING_STATUS.FAILED,
      error: 'Test error message',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Starting failed training webhook test',
      test_name: 'Failed Training Test',
      sample: mockTraining,
    })

    return this.sendWebhook(mockTraining)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testCanceledTraining(): Promise<TestResult> {
    const mockTraining: WebhookPayload = {
      id: 'test-training-id-canceled',
      task_id: 'test-task-id-canceled',
      model: 'ostris/flux-dev-lora-trainer',
      version:
        'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
      status: TRAINING_STATUS.CANCELED,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Starting canceled training webhook test',
      test_name: 'Canceled Training Test',
      sample: mockTraining,
    })

    return this.sendWebhook(mockTraining)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    const startTime = Date.now()

    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Starting all webhook tests',
      test_name: 'All Webhook Tests',
    })

    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    results.push(await this.testSuccessfulTraining())

    // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    results.push(await this.testFailedTraining())

    // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    results.push(await this.testCanceledTraining())

    const duration = Date.now() - startTime
    const successCount = results.filter(r => r.success).length
    const failureCount = results.filter(r => !r.success).length

    logger.info({
      message: 'üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      description: 'All webhook tests completed',
      test_name: 'All Webhook Tests',
      duration: `${duration}ms`,
      success_count: successCount,
      failure_count: failureCount,
      total_tests: results.length,
    })

    return results
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ BFL
 */
export class BFLWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param payload - –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞
   * @param options - –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async sendWebhook(payload: WebhookPayload): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `BFL Webhook test: ${payload.status || 'unknown'}`

    try {
      logger.info({
        message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'Starting BFL webhook test',
        test_name: testName,
        status: payload.status,
        training_id: payload.trainingId,
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.bflWebhookPath}`

      logger.info({
        message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'Sending BFL webhook',
        test_name: testName,
        url: webhookUrl,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      logger.info({
        message: '‚úÖ BFL –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        description: 'BFL webhook sent successfully',
        test_name: testName,
        status: response.status,
      })

      const duration = Date.now() - startTime

      logger.info({
        message: 'üèÅ –¢–µ—Å—Ç BFL –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
        description: 'BFL webhook test completed successfully',
        test_name: testName,
        duration: `${duration}ms`,
      })

      return {
        name: testName,
        success: true,
        message: `BFL –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BFL –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during BFL webhook test',
        test_name: testName,
        error: error instanceof Error ? error.message : 'Unknown error',
        payload,
        duration: `${duration}ms`,
      })

      return {
        name: testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BFL –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error : new Error(String(error)),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testSuccessfulTraining(): Promise<TestResult> {
    const mockTraining: WebhookPayload = {
      task_id: 'test-task-id',
      trainingId: 'test-training-id',
      status: TRAINING_STATUS.SUCCESS,
      result: {
        url: 'https://example.com/output.jpg',
      },
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç BFL –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Starting successful BFL training webhook test',
      test_name: 'Successful BFL Training Test',
      sample: mockTraining,
    })

    return this.sendWebhook(mockTraining)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testFailedTraining(): Promise<TestResult> {
    const mockTraining: WebhookPayload = {
      task_id: 'test-task-id-failed',
      trainingId: 'test-training-id-failed',
      status: TRAINING_STATUS.FAILED,
      error: 'Test error message',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç BFL –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      description: 'Starting failed BFL training webhook test',
      test_name: 'Failed BFL Training Test',
      sample: mockTraining,
    })

    return this.sendWebhook(mockTraining)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    const startTime = Date.now()

    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Starting all BFL webhook tests',
      test_name: 'All BFL Webhook Tests',
    })

    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    results.push(await this.testSuccessfulTraining())

    // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    results.push(await this.testFailedTraining())

    const duration = Date.now() - startTime
    const successCount = results.filter(r => r.success).length
    const failureCount = results.filter(r => !r.success).length

    logger.info({
      message: 'üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã BFL –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      description: 'All BFL webhook tests completed',
      test_name: 'All BFL Webhook Tests',
      duration: `${duration}ms`,
      success_count: successCount,
      failure_count: failureCount,
      total_tests: results.length,
    })

    return results
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ NeuroPhoto
 */
export class NeuroPhotoWebhookTester {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @param payload - –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async sendWebhook(payload: WebhookPayload): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `NeuroPhoto Webhook test: ${payload.status || 'unknown'}`

    try {
      logger.info({
        message: 'üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ NeuroPhoto –≤–µ–±—Ö—É–∫–∞',
        description: 'Starting NeuroPhoto webhook test',
        test_name: testName,
        status: payload.status,
        id: payload.id,
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const webhookUrl = `${TEST_CONFIG.server.apiUrl}${TEST_CONFIG.server.neurophotoWebhookPath}`

      logger.info({
        message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ NeuroPhoto –≤–µ–±—Ö—É–∫–∞',
        description: 'Sending NeuroPhoto webhook',
        test_name: testName,
        url: webhookUrl,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
      const response = await axios.post(webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (response.status !== 200) {
        throw new Error(`Unexpected status code: ${response.status}`)
      }

      logger.info({
        message: '‚úÖ NeuroPhoto –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        description: 'NeuroPhoto webhook sent successfully',
        test_name: testName,
        status: response.status,
      })

      const duration = Date.now() - startTime

      logger.info({
        message: 'üèÅ –¢–µ—Å—Ç NeuroPhoto –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
        description: 'NeuroPhoto webhook test completed successfully',
        test_name: testName,
        duration: `${duration}ms`,
      })

      return {
        name: testName,
        success: true,
        message: `NeuroPhoto –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ ${duration}–º—Å`,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NeuroPhoto –≤–µ–±—Ö—É–∫–∞',
        description: 'Error during NeuroPhoto webhook test',
        test_name: testName,
        error: error instanceof Error ? error.message : 'Unknown error',
        payload,
        duration: `${duration}ms`,
      })

      return {
        name: testName,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NeuroPhoto –≤–µ–±—Ö—É–∫–∞',
        error: error instanceof Error ? error : new Error(String(error)),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testSuccessfulGeneration(): Promise<TestResult> {
    const mockGeneration: WebhookPayload = {
      task_id: 'test-task-id',
      id: 'test-generation-id',
      status: TRAINING_STATUS.SUCCESS,
      output: {
        image: 'https://example.com/output.jpg',
      },
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç NeuroPhoto –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Starting successful NeuroPhoto generation webhook test',
      test_name: 'Successful NeuroPhoto Generation Test',
      sample: mockGeneration,
    })

    return this.sendWebhook(mockGeneration)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testFailedGeneration(): Promise<TestResult> {
    const mockGeneration: WebhookPayload = {
      task_id: 'test-task-id-failed',
      id: 'test-generation-id-failed',
      status: TRAINING_STATUS.FAILED,
      error: 'Test error message',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç NeuroPhoto –≤–µ–±—Ö—É–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      description: 'Starting failed NeuroPhoto generation webhook test',
      test_name: 'Failed NeuroPhoto Generation Test',
      sample: mockGeneration,
    })

    return this.sendWebhook(mockGeneration)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   * @returns –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    const startTime = Date.now()

    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ NeuroPhoto –≤–µ–±—Ö—É–∫–æ–≤',
      description: 'Starting all NeuroPhoto webhook tests',
      test_name: 'All NeuroPhoto Webhook Tests',
    })

    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    results.push(await this.testSuccessfulGeneration())

    // –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    results.push(await this.testFailedGeneration())

    const duration = Date.now() - startTime
    const successCount = results.filter(r => r.success).length
    const failureCount = results.filter(r => !r.success).length

    logger.info({
      message: 'üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã NeuroPhoto –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      description: 'All NeuroPhoto webhook tests completed',
      test_name: 'All NeuroPhoto Webhook Tests',
      duration: `${duration}ms`,
      success_count: successCount,
      failure_count: failureCount,
      total_tests: results.length,
    })

    return results
  }
}
