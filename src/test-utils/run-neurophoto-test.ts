import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'

import { TestResult } from './interfaces'

interface NeuroPhotoGenerateEvent {
  name: 'neuro/photo.generate'
  data: {
    prompt: string
    model_url: string
    numImages: number
    telegram_id: string | number
    username: string
    is_ru: boolean
    bot_name: string
  }
}

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function testNeuroPhotoGeneration(): Promise<TestResult> {
  const testName = 'üé® Test NeuroPhoto Generation'

  try {
    logger.info('üöÄ Starting neurophoto test', {
      description: 'Testing neurophoto generation',
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
    await inngest.send<NeuroPhotoGenerateEvent>({
      name: 'neuro/photo.generate',
      data: {
        prompt: 'Test prompt for neurophoto generation',
        model_url: TEST_CONFIG.models.neurophoto.name,
        numImages: 1,
        telegram_id: TEST_CONFIG.TEST_USER_ID,
        username: 'test_user',
        is_ru: true,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
      },
    })

    logger.info('‚úÖ Neurophoto generation event sent', {
      description: 'Event sent successfully',
      user_id: TEST_CONFIG.TEST_USER_ID,
    })

    // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    await inngest.send<NeuroPhotoGenerateEvent>({
      name: 'neuro/photo.generate',
      data: {
        prompt: 'Test prompt for error case',
        model_url: TEST_CONFIG.models.neurophoto.name,
        numImages: 1,
        telegram_id: '999999999', // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        username: 'test_user',
        is_ru: true,
        bot_name: TEST_CONFIG.TEST_BOT_NAME,
      },
    })

    logger.info('‚úÖ Error case test completed', {
      description: 'Error handling test completed',
    })

    return {
      name: testName,
      success: true,
      message: '‚úÖ NeuroPhoto tests completed successfully',
    }
  } catch (error) {
    logger.error('‚ùå NeuroPhoto test failed', {
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: testName,
      success: false,
      message: '‚ùå NeuroPhoto test failed',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    description: 'Starting neurophoto tests',
  })

  try {
    const result = await testNeuroPhotoGeneration()

    logger.info({
      message: result.success ? '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω' : '‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω',
      description: 'Test completed',
      testName: result.name,
      success: result.success,
      details: result.message,
      error: result.error,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      description: 'Error running test',
      error: error instanceof Error ? error.message : String(error),
    })
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()

export { testNeuroPhotoGeneration }
