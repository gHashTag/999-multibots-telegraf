import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { inngest } from '@/core/inngest/clients'
import { createTestUser } from './helpers/createTestUser'
import { getUserBalance } from '@/core/supabase'
import { TestResult } from './interfaces'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */
async function runNeuroPhotoTest(): Promise<TestResult> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Starting neurophoto generation test',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegram_id = `${Math.floor(Math.random() * 1000000000000)}`
    await createTestUser(telegram_id)

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(
      telegram_id,
      TEST_CONFIG.bots.default
    )

    logger.info({
      message: 'üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Initial user balance',
      balance: initialBalance,
      telegram_id,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    const eventResponse = await inngest.send({
      name: 'neuro/photo.generate',
      data: {
        prompt: 'Test prompt for neurophoto generation',
        model_url: TEST_CONFIG.models.neurophoto,
        numImages: 1,
        telegram_id,
        username: 'test_user',
        is_ru: true,
        bot_name: TEST_CONFIG.bots.default,
      },
    })

    logger.info({
      message: '‚úÖ –°–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      description: 'Generation event sent',
      eventId: eventResponse.ids?.[0],
      telegram_id,
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 2000))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const newBalance = await getUserBalance(
      telegram_id,
      TEST_CONFIG.bots.default
    )

    logger.info({
      message: 'üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'New user balance',
      balance: newBalance,
      telegram_id,
    })

    return {
      testName: 'NeuroPhoto Generation Test',
      success: true,
      message: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      description: 'Error in neurophoto generation test',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      testName: 'NeuroPhoto Generation Test',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runNeuroPhotoTest()
    .then(result => {
      if (!result.success) {
        process.exit(1)
      }
    })
    .catch(error => {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞',
        description: 'Critical error running test',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      process.exit(1)
    })
}

export { runNeuroPhotoTest }
