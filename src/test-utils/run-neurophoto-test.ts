import { testNeuroPhotoGeneration } from './tests/neuroPhoto.test'
import { Logger } from '@/utils/logger'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
 */
async function runNeurophotoTest(): Promise<void> {
  try {
    Logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', {
      description: 'Starting neurophoto test',
    })

    const result = await testNeuroPhotoGeneration()

    if (result.success) {
      Logger.info(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: ${result.name}`, {
        description: 'Test passed successfully',
        message: result.message,
        details: result.details || {},
      })
    } else {
      Logger.error(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${result.name}`, {
        description: 'Test failed',
        message: result.message || '',
        error: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      })
      process.exit(1)
    }
  } catch (error) {
    Logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞', {
      description: 'Critical error during test execution',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runNeurophotoTest()
