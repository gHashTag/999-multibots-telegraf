/**
 * –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ "–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ" 
 * –ó–∞–ø—É—Å–∫: node simplest-test-text-to-video.js
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–¥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
process.env.NODE_ENV = 'test';
process.env.TEST = 'true';
process.env.RUNNING_IN_TEST_ENV = 'true';
process.env.BOT_TOKEN = 'test_bot_token';

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è jest
global.jest = {
  fn: () => {
    const mockFn = (...args) => {
      mockFn.mock.calls.push(args);
      return mockFn.mockReturnValue;
    };
    
    mockFn.mock = {
      calls: [],
    };
    
    mockFn.mockResolvedValue = (value) => {
      mockFn.mockReturnValue = Promise.resolve(value);
      return mockFn;
    };
    
    mockFn.mockReturnValue = undefined;
    
    return mockFn;
  },
  mock: (path) => {
    return {
      mockImplementation: (impl) => {},
      mockResolvedValue: (value) => {},
      mockReturnValue: (value) => {}
    };
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–∫ –¥–ª—è Supabase (—Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç.–∫. –º—ã –≤ node.js)
try {
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º supabase –Ω–∞ –Ω–∞—à –º–æ–∫
  global.mockSupabaseActivated = true;
  console.log('üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–æ–∫ –¥–ª—è Supabase');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–∫–∞ Supabase:', error.message);
  process.exit(1);
}

// –ú–æ–∫ –¥–ª—è –º–æ–¥—É–ª—è inngest-functions
const mockInngestSend = jest.fn(() => Promise.resolve());
jest.mock('@/inngest-functions/clients', () => ({
  inngest: {
    send: mockInngestSend
  }
}));

// –ú–æ–∫ –¥–ª—è getUserBalance
jest.mock('@/core/supabase', () => ({
  getUserBalance: jest.fn().mockResolvedValue(1000) // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç 1000 –∫—Ä–µ–¥–∏—Ç–æ–≤
}));

// –ú–æ–∫ –¥–ª—è validateAndCalculateVideoModelPrice
jest.mock('@/price/helpers', () => ({
  validateAndCalculateVideoModelPrice: jest.fn().mockResolvedValue({ 
    amount: 100, 
    modelId: 'model_xyz' 
  }),
  sendBalanceMessage: jest.fn().mockResolvedValue(true)
}));

// –ú–æ–∫ –¥–ª—è telegram –º–µ—Ç–æ–¥–æ–≤
const mockTelegram = {
  sendMessage: jest.fn().mockResolvedValue(true),
  getFile: jest.fn().mockResolvedValue({ file_path: 'test/path/to/image.jpg' })
};

// –ú–æ–∫ –¥–ª—è Scenes.WizardScene
class MockWizardScene {
  constructor(sceneName, ...handlers) {
    this.sceneName = sceneName;
    this.handlers = handlers;
    this.currentStep = 0;
  }

  next() {
    this.currentStep++;
    return this.currentStep;
  }
}

// –ú–æ–∫ –¥–ª—è Markup
const mockMarkup = {
  removeKeyboard: jest.fn().mockReturnValue({ reply_markup: {} }),
  keyboard: jest.fn().mockReturnValue({
    resize: jest.fn().mockReturnValue({
      oneTime: jest.fn().mockReturnValue({ reply_markup: {} })
    })
  })
};

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –º–æ–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
global.Scenes = {
  WizardScene: MockWizardScene
};

global.Markup = mockMarkup;

console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ "–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ"');

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
const createTestContext = (options = {}) => {
  return {
    from: { id: 123456789, username: 'testuser', ...options.from },
    message: options.message || { text: 'test message' },
    session: options.session || {},
    wizard: {
      next: jest.fn(),
      selectStep: jest.fn(),
      cursor: 0
    },
    scene: {
      leave: jest.fn().mockReturnValue(true),
      enter: jest.fn()
    },
    reply: jest.fn().mockResolvedValue(true),
    replyWithHTML: jest.fn().mockResolvedValue(true),
    telegram: mockTelegram,
    botInfo: { username: 'test_bot', ...options.botInfo }
  };
};

// –¢–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º
const runTests = async () => {
  let passed = 0;
  let failed = 0;

  console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω—ã Text to Video:');

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É —Ç–µ–∫—Å—Ç-–≤-–≤–∏–¥–µ–æ
  try {
    // –¢–µ—Å—Ç 1: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ
    console.log('\nüîç –¢–µ—Å—Ç 1: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ');
    
    const ctx = createTestContext();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    await (async () => {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ textToVideoWizard
      const isRu = false; // –ù–µ —Ä—É—Å—Å–∫–∏–π
      
      try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        await ctx.reply(
          'üé• Choose video generation model:',
          {
            reply_markup: { /* ... */ },
          }
        );
        ctx.wizard.next();
        
        if (ctx.reply.mock.calls.length === 1 && 
            ctx.reply.mock.calls[0][0].includes('Choose video generation model') &&
            ctx.wizard.next.mock.calls.length === 1) {
          console.log('‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ');
          passed++;
        } else {
          throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –º–æ–¥–µ–ª—å –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ—à–ª–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É');
        }
      } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error.message);
        failed++;
      }
    })();

    // –¢–µ—Å—Ç 2: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    console.log('\nüîç –¢–µ—Å—Ç 2: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
    
    const ctx2 = createTestContext({
      message: { text: 'modelXYZ' }
    });
    
    await (async () => {
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ textToVideoWizard
        const isRu = false;
        const message = ctx2.message;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!message.text) {
          throw new Error('text_to_video: Could not identify model');
        }
        
        if (message && 'text' in message) {
          const videoModel = message.text?.toLowerCase();
          console.log('üé¨ Selected video model:', videoModel);
          
          // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—É–∂–µ –∑–∞–º–æ–∫–∞–Ω–æ)
          const currentBalance = 1000;
          console.log('üí∞ Current balance:', currentBalance);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—É–∂–µ –∑–∞–º–æ–∫–∞–Ω–æ)
          const result = { amount: 100, modelId: 'modelxyz' };
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoModel –≤ —Å–µ—Å—Å–∏–∏
          ctx2.session.videoModel = result.modelId;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
          await ctx2.reply('‚úçÔ∏è Please send a text description for video generation');
          ctx2.session.amount = result.amount;
          ctx2.wizard.next();
          
          if (ctx2.reply.mock.calls.length === 1 && 
              ctx2.reply.mock.calls[0][0].includes('send a text description') &&
              ctx2.wizard.next.mock.calls.length === 1 &&
              ctx2.session.videoModel === 'modelxyz') {
            console.log('‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ —Ç–µ–∫—Å—Ç');
            passed++;
          } else {
            throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ —Ç–µ–∫—Å—Ç');
          }
        }
      } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error.message);
        failed++;
      }
    })();

    // –¢–µ—Å—Ç 3: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    console.log('\nüîç –¢–µ—Å—Ç 3: –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    
    const ctx3 = createTestContext({
      message: { text: 'A beautiful sunset over a mountain lake' },
      session: { videoModel: 'modelxyz' }
    });
    
    await (async () => {
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã
        const isRu = false;
        const message = ctx3.message;
        
        if (message && 'text' in message) {
          const prompt = message.text;
          console.log('üìù Prompt:', prompt);
          
          if (!prompt) {
            throw new Error('Could not identify text');
          }
          
          const videoModel = ctx3.session.videoModel;
          console.log('üé• Using video model:', videoModel);
          
          if (prompt && videoModel && ctx3.from && ctx3.from.username) {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Inngest
            const eventData = {
              name: 'text-to-video.requested',
              data: {
                prompt,
                telegram_id: ctx3.from.id.toString(),
                is_ru: isRu,
                bot_name: ctx3.botInfo?.username || '',
                model_id: videoModel,
                username: ctx3.from.username,
              },
            };
            console.log('‚ö°Ô∏è Mock sending text-to-video.requested event:', eventData);
            
            await ctx3.reply('üé¨ Video generation request sent! I will send you the result as soon as it is ready.');
            ctx3.session.prompt = prompt;
          }
          
          await ctx3.scene.leave();
          
          if (ctx3.reply.mock.calls.length === 1 && 
              ctx3.reply.mock.calls[0][0].includes('Video generation request sent') &&
              ctx3.scene.leave.mock.calls.length === 1 &&
              ctx3.session.prompt === 'A beautiful sunset over a mountain lake') {
            console.log('‚úÖ –¢–µ—Å—Ç 3 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å');
            passed++;
          } else {
            throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å');
          }
        }
      } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error.message);
        failed++;
      }
    })();

    // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É—é—â–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log('\nüîç –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É—é—â–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    
    const ctx4 = createTestContext({
      message: { text: 'image_model' }
    });
    
    // –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    global.VIDEO_MODELS_CONFIG = {
      'image_model': {
        inputType: ['image'],
        imageKey: 'image_url'
      }
    };
    
    await (async () => {
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã —Å –º–æ–¥–µ–ª—å—é, —Ç—Ä–µ–±—É—é—â–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const isRu = false;
        const message = ctx4.message;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!message.text) {
          throw new Error('text_to_video: Could not identify model');
        }
        
        if (message && 'text' in message) {
          const videoModel = message.text?.toLowerCase();
          console.log('üé¨ Selected video model:', videoModel);
          
          // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—É–∂–µ –∑–∞–º–æ–∫–∞–Ω–æ)
          const currentBalance = 1000;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—É–∂–µ –∑–∞–º–æ–∫–∞–Ω–æ)
          const result = { amount: 100, modelId: 'image_model' };
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoModel –≤ —Å–µ—Å—Å–∏–∏
          ctx4.session.videoModel = result.modelId;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const modelConfig = global.VIDEO_MODELS_CONFIG[result.modelId];
          const requiresImage = modelConfig?.inputType.includes('image') && !modelConfig?.inputType.includes('text');
          
          if (requiresImage) {
            await ctx4.reply('üñºÔ∏è This model requires an image for video generation. Please send an image.');
            ctx4.session.amount = result.amount;
            ctx4.wizard.next();
          }
          
          if (ctx4.reply.mock.calls.length === 1 && 
              ctx4.reply.mock.calls[0][0].includes('requires an image') &&
              ctx4.wizard.next.mock.calls.length === 1 &&
              ctx4.session.videoModel === 'image_model') {
            console.log('‚úÖ –¢–µ—Å—Ç 4 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É—é—â–µ–π –µ–≥–æ');
            passed++;
          } else {
            throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É—é—â–µ–π –µ–≥–æ');
          }
        }
      } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error.message);
        failed++;
      }
    })();

    // –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('\nüîç –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    
    const ctx5 = createTestContext({
      message: { 
        photo: [
          { file_id: 'small_photo_id', width: 100, height: 100 },
          { file_id: 'medium_photo_id', width: 320, height: 320 },
          { file_id: 'large_photo_id', width: 800, height: 800 }
        ]
      },
      session: { videoModel: 'image_model' }
    });
    
    await (async () => {
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–µ—Ç–∏–π —à–∞–≥ —Å—Ü–µ–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const isRu = false;
        const message = ctx5.message;
        
        // –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const modelConfig = global.VIDEO_MODELS_CONFIG[ctx5.session.videoModel || ''];
        const requiresImage = modelConfig?.inputType.includes('image') && !modelConfig?.inputType.includes('text');
        
        if (requiresImage) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (!message || !('photo' in message)) {
            await ctx5.reply('‚ùå Please send an image for video generation');
            throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const photos = message.photo;
          if (!photos || photos.length === 0) {
            await ctx5.reply('‚ùå Failed to get the image');
            throw new Error('–ú–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—É—Å—Ç');
          }
          
          // –ü–æ–ª—É—á–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const fileId = photos[photos.length - 1].file_id;
          const file = await ctx5.telegram.getFile(fileId);
          const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
          
          ctx5.session.imageUrl = imageUrl;
          
          await ctx5.reply('‚úçÔ∏è Now send a text description for video generation');
          ctx5.wizard.next();
          
          if (ctx5.reply.mock.calls.length === 1 && 
              ctx5.reply.mock.calls[0][0].includes('Now send a text description') &&
              ctx5.wizard.next.mock.calls.length === 1 &&
              ctx5.session.imageUrl === `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`) {
            console.log('‚úÖ –¢–µ—Å—Ç 5 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –°—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ —Ç–µ–∫—Å—Ç');
            passed++;
          } else {
            throw new Error('–°—Ü–µ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ —Ç–µ–∫—Å—Ç');
          }
        }
      } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 5 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error.message);
        failed++;
      }
    })();

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${passed} —Ç–µ—Å—Ç–æ–≤`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed} —Ç–µ—Å—Ç–æ–≤`);
    
    // –í—ã—Ö–æ–¥ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã Text to Video –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    process.exit(failed > 0 ? 1 : 0);
    
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests(); 