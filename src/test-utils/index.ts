#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤:
 * - tests/neuro - –¢–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π
 * - tests/database - –¢–µ—Å—Ç—ã –ë–î
 * - tests/webhooks - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
 * - tests/inngest - –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
 * - tests/speech - –¢–µ—Å—Ç—ã –∞—É–¥–∏–æ
 * - tests/translations - –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * - tests/api - –¢–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npm run test:all - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 *   npm run test:discover - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
 *   npm run test:translations - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 *   npm run test:api - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API
 */

import { config } from 'dotenv'
import path from 'path'
import { logger } from '@/utils/logger'
import { TestCategory } from './core/categories'
import { runTests } from './core/runTests'
import { runBalanceTests } from './tests/payment/balance.test'
import { runPaymentNotificationTests } from './tests/payment/paymentNotification.test'
import { runNeuroPhotoTests } from './tests/neuro/runNeuroPhotoTests'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã API
import { runApiTests, runApiMonitoring } from './tests/api'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –í—ã–≤–æ–¥–∏–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function showHelp() {
  const message = `
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node -r tsconfig-paths/register src/test-utils [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h                   : –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --verbose, -v                : –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  --category=XXX               : –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  --only=XXX                   : –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  --skip=XXX                   : –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  --parallel=N                 : –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)
  --json                       : –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
  --html                       : –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç
  --output=FILE                : –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  --tags=TAG1,TAG2             : –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
  --discover                   : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
  --test-dir=DIR               : –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è --discover)

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
  all                          : –í—Å–µ —Ç–µ—Å—Ç—ã
  neuro                        : –¢–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π
  translations                 : –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  database                     : –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  webhook                      : –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
  inngest                      : –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  api                          : –¢–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä—ã:
  ts-node -r tsconfig-paths/register src/test-utils --category=translations
  ts-node -r tsconfig-paths/register src/test-utils --category=database --verbose
  ts-node -r tsconfig-paths/register src/test-utils --discover --test-dir=src/test-utils/tests
  ts-node -r tsconfig-paths/register src/test-utils --json --output=test-results.json
  ts-node -r tsconfig-paths/register src/test-utils --category=neuro --verbose
  ts-node -r tsconfig-paths/register src/test-utils --category=api --verbose
  `

  console.log(message)
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
export { TestRunner } from './core/TestRunner'
export { TestCategory }
export { TestResult, RunnerOptions } from './core/types'
export { default as assert } from './core/assert'
export { default as mock } from './core/mock/index'
export { default as snapshot } from './core/snapshot'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã Inngest
import {
  runInngestDirectTest,
  runInngestSDKTest,
  runInngestFunctionRegistrationTest,
  runInngestFullTest,
} from './tests/inngestTest'

export const paymentTests = {
  runBalanceTests,
  runPaymentNotificationTests,
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π
export const neuroTests = {
  runNeuroPhotoTests,
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã Inngest
export const inngestTests = {
  runInngestDirectTest,
  runInngestSDKTest,
  runInngestFunctionRegistrationTest,
  runInngestFullTest,
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ç–µ—Å—Ç—ã
export const apiTests = {
  runApiTests,
  runApiMonitoring,
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ Inngest –Ω–∞–ø—Ä—è–º—É—é
export {
  runInngestDirectTest,
  runInngestSDKTest,
  runInngestFunctionRegistrationTest,
  runInngestFullTest,
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø—Ä—è–º—É—é
export { runNeuroPhotoTests }

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
export { runApiTests, runApiMonitoring }

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
 */
async function start() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showHelp()
    process.exit(0)
  }

  logger.info('üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞')
  logger.info('üìä Running project tests')

  try {
    const exitCode = await runTests(process.argv.slice(2))
    process.exit(exitCode)
  } catch (error) {
    logger.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
    logger.error('üî• Critical error running tests:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  start()
}
