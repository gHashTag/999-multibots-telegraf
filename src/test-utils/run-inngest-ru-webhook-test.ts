import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { SUBSCRIPTION_PLANS } from '@/inngest-functions/ruPayment.service'

import { supabase } from '@/core/supabase'

const testTelegramId = `${Math.floor(Math.random() * 1000000000000)}`

const runTest = async () => {
  try {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook', {
      description: 'Starting webhook testing',
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Creating test user',
      telegram_id: testTelegramId,
    })

    const { data: userData, error: userError } = await supabase
      .from('users')
      .upsert({
        telegram_id: testTelegramId,
        language_code: 'ru',
        first_name: 'Test',
        last_name: 'User',
        username: `test_user_${Math.floor(Math.random() * 1000000)}`,
        balance: 0,
        bot_name: 'test_bot',
      })
      .select()

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error creating test user',
        error: userError.message,
        details: userError,
      })
      throw new Error(`Error creating test user: ${userError.message}`)
    }

    logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      user_data: userData,
    })

    // 1. –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const testBalancePayment = async () => {
      const inv_id = `test-invoice-${Date.now()}`
      const amount = 500

      logger.info('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Creating test payment',
        inv_id: inv_id,
        amount,
        telegram_id: testTelegramId,
      })

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        const { data: paymentData, error: paymentError } = await supabase
          .from('payments_v2')
          .insert({
            telegram_id: testTelegramId,
            amount: amount,
            currency: 'RUB',
            stars: 0,
            status: 'PENDING',
            payment_method: 'ROBOKASSA',
            bot_name: 'test_bot',
            description: 'Test balance payment',
            inv_id: inv_id,
            metadata: {},
            language: 'ru',
            invoice_url: '',
          })
          .select()

        if (paymentError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Error creating test payment',
            error: paymentError.message,
            details: paymentError,
          })
          throw paymentError
        }

        logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', {
          description: 'Test payment created',
          inv_id: inv_id,
          amount,
          telegram_id: testTelegramId,
          payment_data: paymentData,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
        await inngest.send({
          name: 'robokassa/webhook.ru',
          data: {
            inv_id: inv_id,
            out_sum: amount,
            crc: 'test-crc',
            SignatureValue: 'test-signature',
          },
        })

        logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
          description: 'Event sent to Inngest',
          inv_id: inv_id,
          amount,
        })
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Error in balance payment test',
          error: error instanceof Error ? error.message : String(error),
          inv_id: inv_id,
        })
        throw error
      }
    }

    // 2. –¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    const testSubscriptionPayment = async () => {
      const inv_id = `test-invoice-${Date.now()}`
      const subscriptionPlan = SUBSCRIPTION_PLANS[0]
      const amount = subscriptionPlan.ru_price
      const stars = subscriptionPlan.stars_price

      logger.info('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏', {
        description: 'Creating test subscription payment',
        inv_id: inv_id,
        amount,
        telegram_id: testTelegramId,
        plan: subscriptionPlan.callback_data,
      })

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        const { data: paymentData, error: paymentError } = await supabase
          .from('payments_v2')
          .insert({
            telegram_id: testTelegramId,
            amount: amount,
            currency: 'RUB',
            stars: stars,
            status: 'PENDING',
            payment_method: 'ROBOKASSA',
            bot_name: 'test_bot',
            description: `Test subscription payment - ${subscriptionPlan.text}`,
            inv_id: inv_id,
            metadata: {
              subscription_plan: subscriptionPlan.callback_data,
            },
            language: 'ru',
            invoice_url: '',
          })
          .select()

        if (paymentError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', {
            description: 'Error creating test subscription payment',
            error: paymentError.message,
            details: paymentError,
          })
          throw paymentError
        }

        logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω', {
          description: 'Test subscription payment created',
          inv_id: inv_id,
          amount,
          telegram_id: testTelegramId,
          plan: subscriptionPlan.callback_data,
          payment_data: paymentData,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest
        await inngest.send({
          name: 'robokassa/webhook.ru',
          data: {
            inv_id: inv_id,
            out_sum: amount,
            crc: 'test-crc',
            SignatureValue: 'test-signature',
          },
        })

        logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest', {
          description: 'Subscription event sent to Inngest',
          inv_id: inv_id,
          amount,
          plan: subscriptionPlan.callback_data,
        })
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏:', {
          description: 'Error in subscription payment test',
          error: error instanceof Error ? error.message : String(error),
          inv_id: inv_id,
        })
        throw error
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    await testBalancePayment()
    logger.info('‚úÖ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Balance payment test completed',
    })

    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000))

    await testSubscriptionPayment()
    logger.info('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Subscription test completed',
    })

    logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
      description: 'Webhook testing completed',
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTest().catch(error => {
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
    description: 'Critical error',
    error: error instanceof Error ? error.message : String(error),
  })
  process.exit(1)
})

export default runTest
