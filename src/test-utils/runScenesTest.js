#!/usr/bin/env node
/**
 * –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã —Å Supabase
 */
console.log('üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram —Å—Ü–µ–Ω...');

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è getUserSub
const mockGetUserSub = (telegramId) => {
  // –î–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å telegram_id –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (telegramId === '12345-active') {
    return Promise.resolve({
      id: 1,
      user_id: telegramId,
      plan_id: 'premium',
      is_active: true,
      expires_at: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), // 30 days from now
      created_at: new Date(),
      updated_at: new Date(),
      tariff_id: 1,
      discord_id: null,
      customer_id: 'cus_123456',
      subscription_id: 'sub_123456',
      status: 'active',
      canceled_at: null,
      payment_id: 'payment_123',
    });
  } else if (telegramId === '12345-expired') {
    return Promise.resolve({
      id: 1,
      user_id: telegramId,
      plan_id: 'premium',
      is_active: false,
      expires_at: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago
      created_at: new Date(),
      updated_at: new Date(),
      tariff_id: 1,
      discord_id: null,
      customer_id: 'cus_123456',
      subscription_id: 'sub_123456',
      status: 'canceled',
      canceled_at: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2), // 2 days ago
      payment_id: 'payment_123',
    });
  } else {
    return Promise.resolve(null); // –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  }
};

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è getUserBalance
const mockGetUserBalance = (telegramId) => {
  // –î–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Ä–∞–∑–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (telegramId === '12345-low') {
    return Promise.resolve(5); // –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å
  } else if (telegramId === '12345-zero') {
    return Promise.resolve(0); // –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å
  } else {
    return Promise.resolve(100); // –í—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
};

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–æ–¥—É–ª—å
const database = {
  getUserSub: mockGetUserSub,
  getUserBalance: mockGetUserBalance
};

// –ú–æ–∫ –¥–ª—è telegram –±–æ—Ç–∞
const mockBot = {
  telegram: {
    sendMessage: (chatId, text, options) => {
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}:`);
      console.log(text);
      return Promise.resolve();
    }
  }
};

// –ú–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const getTestContext = (telegramId, additionalData = {}) => {
  const context = {
    from: {
      id: telegramId,
      username: 'test_user',
      first_name: 'Test',
      last_name: 'User',
      is_bot: false,
      language_code: 'en'
    },
    chat: {
      id: telegramId,
      type: 'private',
      first_name: 'Test',
      last_name: 'User',
      username: 'test_user'
    },
    message: {
      message_id: 1,
      from: {
        id: telegramId,
        username: 'test_user',
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'en'
      },
      chat: {
        id: telegramId,
        type: 'private',
        first_name: 'Test',
        last_name: 'User',
        username: 'test_user'
      },
      date: Math.floor(Date.now() / 1000),
      text: 'Test message'
    },
    scene: {
      enter: () => Promise.resolve(),
      reenter: () => Promise.resolve(),
      leave: () => Promise.resolve(),
      state: {}
    },
    session: {
      balanceNotifications: {
        enabled: false,
        threshold: 10
      }
    },
    reply: (text, options = {}) => {
      console.log(`–û—Ç–≤–µ—Ç: ${text}`);
      console.log('–û–ø—Ü–∏–∏:', JSON.stringify(options));
      return Promise.resolve();
    },
    telegram: mockBot.telegram,
    botInfo: {
      username: 'test_bot'
    },
    answerCbQuery: (text) => {
      console.log(`–û—Ç–≤–µ—Ç –Ω–∞ callback: ${text}`);
      return Promise.resolve();
    }
  };
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  return {...context, ...additionalData};
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
const runSubscriptionTest = async (name, telegramId) => {
  console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`);
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const ctx = getTestContext(telegramId);
    
    // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    const subscription = await database.getUserSub(telegramId);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:', subscription ? {
      is_active: subscription.is_active,
      expires_at: subscription.expires_at,
      status: subscription.status
    } : 'null');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ü–µ–Ω—ã
    if (!subscription) {
      await mockBot.telegram.sendMessage(
        ctx.chat.id,
        `You don't have an active subscription.\n\nUse /subscribe to subscribe to our services.`,
        { parse_mode: 'Markdown' }
      );
    } else if (subscription.is_active) {
      const expiresAt = subscription.expires_at?.toLocaleDateString('en-US') || 'Unknown';
      await mockBot.telegram.sendMessage(
        ctx.chat.id,
        `Your subscription is active.\n\n` +
        `Plan: ${subscription.plan_id}\n` +
        `Status: Active\n` +
        `Expires: ${expiresAt}\n\n` +
        `Use /extend to extend your subscription.`,
        { parse_mode: 'Markdown' }
      );
    } else {
      const expiresAt = subscription.expires_at?.toLocaleDateString('en-US') || 'Unknown';
      await mockBot.telegram.sendMessage(
        ctx.chat.id,
        `Your subscription has expired.\n\n` +
        `Plan: ${subscription.plan_id}\n` +
        `Status: Expired\n` +
        `Expired on: ${expiresAt}\n\n` +
        `Use /subscribe to get a new subscription.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    console.log(`‚úÖ –¢–µ—Å—Ç ${name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${name}:`, error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
const runBalanceNotifierTest = async (name, telegramId, notificationsEnabled = false) => {
  console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`);
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const ctx = getTestContext(telegramId, {
      session: {
        balanceNotifications: {
          enabled: notificationsEnabled,
          threshold: 10
        }
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balance = await database.getUserBalance(telegramId);
    console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balance);
    console.log('–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await ctx.reply(
      `üí∞ Balance Notification Settings\n\n` +
      `Current balance: ${balance} ‚≠êÔ∏è\n\n` +
      `Notifications: ${notificationsEnabled ? 'Enabled ‚úÖ' : 'Disabled ‚ùå'}\n` +
      `Notification threshold: 10 ‚≠êÔ∏è\n\n` +
      `Choose an action:`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: notificationsEnabled ? 'üîï Disable' : 'üîî Enable',
                callback_data: 'toggle_notifications'
              }
            ],
            [
              {
                text: 'üîÑ Change threshold',
                callback_data: 'change_threshold'
              }
            ],
            [
              {
                text: 'üîô Back',
                callback_data: 'back_to_menu'
              }
            ]
          ]
        }
      }
    );
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log(`\n–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É: ${notificationsEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
    await ctx.answerCbQuery(`${!notificationsEnabled ? '‚úÖ Balance notifications enabled' : '‚ùå Balance notifications disabled'}`);
    
    console.log(`‚úÖ –¢–µ—Å—Ç ${name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${name}:`, error);
    return false;
  }
};

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
const runAllTests = async () => {
  const results = [];
  
  console.log('\nüìö –¢–ï–°–¢–´ –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò:');
  // –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  results.push(await runSubscriptionTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', '12345-active'));
  
  // –¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  results.push(await runSubscriptionTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', '12345-none'));
  
  // –¢–µ—Å—Ç –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
  results.push(await runSubscriptionTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', '12345-expired'));
  
  console.log('\nüìö –¢–ï–°–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ë–ê–õ–ê–ù–°–ï:');
  // –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
  results.push(await runBalanceNotifierTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—ã–∫–ª ‚Üí –≤–∫–ª)', '12345-high', false));
  
  // –¢–µ—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
  results.push(await runBalanceNotifierTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤–∫–ª ‚Üí –≤—ã–∫–ª)', '12345-high', true));
  
  // –¢–µ—Å—Ç –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  results.push(await runBalanceNotifierTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å)', '12345-low', true));
  
  // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const successful = results.filter(r => r).length;
  const failed = results.length - successful;
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
  console.log(`‚ùå –° –æ—à–∏–±–∫–∞–º–∏: ${failed}`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
  process.exit(failed > 0 ? 1 : 0);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests(); 