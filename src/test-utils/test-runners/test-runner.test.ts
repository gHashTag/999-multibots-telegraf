#!/usr/bin/env node
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø —Ç–µ—Å—Ç–∞]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database
 *   ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all
 */

import {
  ReplicateWebhookTester,
  BFLWebhookTester,
  NeurophotoWebhookTester,
} from '../tests/webhooks/webhook.test'
import { DatabaseTester } from '../tests/database/database-tests.test'
import { testSpeechGeneration } from '../tests/audio/audio-tests.test'
import { TestResult } from '../types'
import { runPaymentTests } from '../tests/payment/paymentProcessor.test'
import { logger } from '@/utils/logger'

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function formatResults(results: TestResult[]): void {
  const successful = results.filter(r => r.passed || r.success).length
  const total = results.length
  const successRate = ((successful / total) * 100).toFixed(1)

  console.log('\n' + colors.bright + 'üìä Test Results Summary:' + colors.reset)
  console.log(
    colors.dim + '----------------------------------------' + colors.reset
  )
  console.log(`Total Tests: ${colors.bright}${total}${colors.reset}`)
  console.log(`Successful: ${colors.bright}${successful}${colors.reset}`)
  console.log(`Success Rate: ${colors.bright}${successRate}%${colors.reset}`)
  console.log(
    colors.dim + '----------------------------------------' + colors.reset
  )

  results.forEach(result => {
    const status =
      result.passed || result.success ? colors.green + '‚úÖ' : colors.red + '‚ùå'
    const name = result.name || result.testName || 'Unknown Test'
    console.log(`${status} ${colors.bright}${name}${colors.reset}`)
    if (result.duration) {
      console.log(
        colors.dim + `  Duration: ${result.duration}ms` + colors.reset
      )
    }
    if (result.error) {
      console.log(colors.red + `  Error: ${result.error}` + colors.reset)
    }
    if (result.details) {
      console.log(colors.dim + '  Details:' + colors.reset)
      if (Array.isArray(result.details)) {
        result.details.forEach(detail => {
          console.log(colors.dim + `    - ${detail}` + colors.reset)
        })
      } else {
        console.log(colors.dim + `    - ${result.details}` + colors.reset)
      }
    }
  })
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞
 */
function printHelp() {
  console.log(`
${colors.bright}${colors.blue}–°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í${colors.reset}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts [—Ç–∏–ø-—Ç–µ—Å—Ç–æ–≤] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]${colors.reset}

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:${colors.reset}
  ${colors.cyan}webhook${colors.reset}    - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ Replicate
  ${colors.cyan}bfl-webhook${colors.reset} - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ BFL
  ${colors.cyan}neurophoto-webhook${colors.reset} - –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
  ${colors.cyan}database${colors.reset}   - –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  ${colors.cyan}inngest${colors.reset}    - –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  ${colors.cyan}neuro${colors.reset}      - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  ${colors.cyan}neurophoto-v2${colors.reset} - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  ${colors.cyan}function${colors.reset}   - –¢–µ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏)
  ${colors.cyan}voice-avatar${colors.reset} - –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  ${colors.cyan}text-to-speech${colors.reset} - –¢–µ—Å—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
  ${colors.cyan}all${colors.reset}        - –í—Å–µ —Ç–µ—Å—Ç—ã

${colors.bright}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:${colors.reset}
  ${colors.cyan}--dry-run${colors.reset}        - –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
  ${colors.cyan}--debug-endpoint${colors.reset}  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ)

${colors.bright}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts bfl-webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --dry-run${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --debug-endpoint${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-webhook --dry-run --debug-endpoint${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts database${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts inngest${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neuro${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts neurophoto-v2${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts function hello-world${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts text-to-speech${colors.reset}
  ${colors.cyan}ts-node -r tsconfig-paths/register src/test-utils/test-runner.ts all${colors.reset}

${colors.bright}–î–æ—Å—Ç—É–ø–Ω—ã–µ Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}
  ${colors.cyan}hello-world${colors.reset}       - –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  ${colors.cyan}broadcast${colors.reset}         - –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  ${colors.cyan}payment${colors.reset}           - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  ${colors.cyan}model-training${colors.reset}    - –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π
  ${colors.cyan}model-training-v2${colors.reset} - –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π v2
  ${colors.cyan}neuro${colors.reset}             - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  ${colors.cyan}neurophoto-v2${colors.reset}     - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
  ${colors.cyan}voice-avatar${colors.reset}       - –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  ${colors.cyan}text-to-speech${colors.reset}    - –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
  `)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
 */
export function getTestTypesAvailable(): string[] {
  return Object.keys(testTypes)
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –ø–æ —Ç–∏–ø—É
 */
export async function runTest(type: string, options?: any): Promise<any> {
  if (testTypes[type] && typeof testTypes[type] === 'function') {
    return await testTypes[type](options)
  }
  throw new Error(`–¢–∏–ø —Ç–µ—Å—Ç–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function main(args: string[] = []): Promise<boolean> {
  const cliArgs = args.length ? args : process.argv.slice(2)
  const testType = cliArgs[0] || 'all'

  if (testType === '--help' || testType === '-h') {
    printHelp()
    return false
  }

  try {
    let results: TestResult[] = []

    switch (testType) {
      case 'webhook':
        results = await runWebhookTests()
        break
      case 'database':
        results = await runDatabaseTests()
        break
      case 'inngest':
        results = await runInngestTests()
        break
      case 'speech':
        results = [await runSpeechGenerationTest()]
        break
      case 'all':
        results = [
          ...(await runWebhookTests()),
          ...(await runDatabaseTests()),
          ...(await runInngestTests()),
          await runSpeechGenerationTest(),
        ]
        break
      default:
        console.error(
          `${colors.red}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: ${testType}${colors.reset}`
        )
        printHelp()
        return false
    }

    formatResults(results)

    const failedTests = results.filter(r => !r.passed)
    if (failedTests.length > 0) {
      return false
    }
    return true
  } catch (error) {
    console.error(
      `${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${
        error instanceof Error ? error.message : String(error)
      }${colors.reset}`
    )
    return false
  }
}

/**
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —è–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ main –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
 */
module.exports = {
  main,
  getTestTypesAvailable,
  runTest
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
if (require.main === module) {
  main().catch(error => {
    console.error(`Critical error: ${error.message}`)
    process.exit(1)
  })
}

async function runSpeechGenerationTest(): Promise<TestResult> {
  try {
    const result = await testSpeechGeneration()
    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      testName: 'Speech Generation Test',
      passed: result.passed,
      success: result.passed === true,
      error: result.error,
      details: result.details || {},
      duration: 0,
      message: result.error || 'Test completed',
    }
  } catch (error) {
    return {
      name: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      testName: 'Speech Generation Test',
      passed: false,
      success: false,
      error: error instanceof Error ? error.message : String(error),
      details: {},
      duration: 0,
      message: error instanceof Error ? error.message : String(error),
    }
  }
}

async function runWebhookTests(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const replicateTester = new ReplicateWebhookTester()
  const bflTester = new BFLWebhookTester()
  const neurophotoTester = new NeurophotoWebhookTester()

  try {
    // –¢–µ—Å—Ç—ã Replicate
    const replicateResults = await replicateTester.runAllTests()
    results.push(...replicateResults)

    // –¢–µ—Å—Ç—ã BFL
    const bflResults = await bflTester.runAllTests()
    results.push(...bflResults)

    // –¢–µ—Å—Ç—ã Neurophoto
    const neurophotoResults = await neurophotoTester.runAllTests()
    results.push(...neurophotoResults)

    return results
  } catch (error) {
    return [
      {
        name: '–¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤',
        testName: 'Webhook Tests',
        passed: false,
        success: false,
        error: error instanceof Error ? error.message : String(error),
        details: {},
        duration: 0,
        message: error instanceof Error ? error.message : String(error),
      },
    ]
  }
}

async function runDatabaseTests(): Promise<TestResult[]> {
  try {
    const databaseTester = new DatabaseTester()
    const results = await databaseTester.runAllTests()
    return results
  } catch (error) {
    return [
      {
        name: '–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        testName: 'Database Tests',
        passed: false,
        success: false,
        error: error instanceof Error ? error.message : String(error),
        details: {},
        duration: 0,
        message: error instanceof Error ? error.message : String(error),
      },
    ]
  }
}

async function runInngestTests(): Promise<TestResult[]> {
  try {
    const results = await runPaymentTests()
    return results
  } catch (error) {
    return [
      {
        name: '–¢–µ—Å—Ç—ã Inngest',
        testName: 'Inngest Tests',
        passed: false,
        success: false,
        error: error instanceof Error ? error.message : String(error),
        details: {},
        duration: 0,
        message: error instanceof Error ? error.message : String(error),
      },
    ]
  }
}

export async function runAllTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', {
    description: 'Starting all tests',
  })

  const results: TestResult[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  const paymentResults = await runPaymentTests()
  results.push(...paymentResults)

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã...

  const passedTests = results.filter(r => r.passed).length
  const totalTests = results.length

  logger.info('üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
    description: 'Overall test results',
    passedTests,
    totalTests,
    successRate: `${((passedTests / totalTests) * 100).toFixed(2)}%`,
  })

  return results
}
