import { logger } from '@/utils/logger'
import { runVideoWebhookTest } from './videoWebhook.test'

async function runAllTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', {
    description: 'Starting all tests',
  })

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ –≤–∏–¥–µ–æ
    logger.info('üé• –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤ –≤–∏–¥–µ–æ', {
      description: 'Starting video webhook tests',
    })
    const videoWebhookResults = await runVideoWebhookTest()

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalTests = videoWebhookResults.length
    const passedTests = videoWebhookResults.filter(r => r.passed).length
    const failedTests = totalTests - passedTests

    logger.info('üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
      description: 'Final test results',
      total: totalTests,
      passed: passedTests,
      failed: failedTests,
      success_rate: `${((passedTests / totalTests) * 100).toFixed(2)}%`,
    })

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
    if (failedTests > 0) {
      const failedResults = videoWebhookResults.filter(r => !r.passed)
      logger.error('‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
        description: 'Failed tests',
        tests: failedResults.map(r => ({
          description: r.description,
          error: r.error?.message,
        })),
      })
      process.exit(1)
    }

    process.exit(0)
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests()
}

export { runAllTests }
