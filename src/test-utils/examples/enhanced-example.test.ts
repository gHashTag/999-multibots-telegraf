/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
 */

import { TestSuite, Test, BeforeAll, AfterAll } from '../core/types'
import { expect, testContext, mock } from '../core/enhanced'
import { logger } from '@/utils/logger'

// –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
class Calculator {
  add(a: number, b: number): number {
    return a + b
  }

  subtract(a: number, b: number): number {
    return a - b
  }

  multiply(a: number, b: number): number {
    return a * b
  }

  divide(a: number, b: number): number {
    if (b === 0) {
      throw new Error('Division by zero')
    }
    return a / b
  }

  async calculateAsync(
    a: number,
    b: number,
    operation: string
  ): Promise<number> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          switch (operation) {
            case 'add':
              resolve(this.add(a, b))
              break
            case 'subtract':
              resolve(this.subtract(a, b))
              break
            case 'multiply':
              resolve(this.multiply(a, b))
              break
            case 'divide':
              resolve(this.divide(a, b))
              break
            default:
              reject(new Error(`Unknown operation: ${operation}`))
          }
        } catch (error) {
          reject(error)
        }
      }, 100)
    })
  }
}

// –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
@TestSuite('Enhanced Calculator Tests')
class CalculatorTests {
  private calculator: Calculator

  @BeforeAll()
  async setup() {
    logger.info('üìã Setting up calculator tests...')
    this.calculator = new Calculator()
  }

  @AfterAll()
  async teardown() {
    logger.info('üßπ Cleaning up calculator tests...')
  }

  @Test('should add two numbers correctly')
  async testAddition() {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ expect –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    expect.toEqual(this.calculator.add(2, 3), 5, 'Addition failed')
  }

  @Test('should subtract two numbers correctly')
  async testSubtraction() {
    expect.toEqual(this.calculator.subtract(5, 3), 2, 'Subtraction failed')
  }

  @Test('should multiply two numbers correctly')
  async testMultiplication() {
    expect.toEqual(this.calculator.multiply(2, 3), 6, 'Multiplication failed')
  }

  @Test('should divide two numbers correctly')
  async testDivision() {
    expect.toEqual(this.calculator.divide(6, 3), 2, 'Division failed')
  }

  @Test('should throw error when dividing by zero')
  async testDivisionByZero() {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ expect.toThrow –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    expect.toThrow(
      () => this.calculator.divide(5, 0),
      Error,
      'Division by zero'
    )
  }

  @Test('should handle async calculations')
  async testAsyncCalculation() {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ expect.toResolve –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤
    const result = await expect.toResolve(
      this.calculator.calculateAsync(2, 3, 'add')
    )
    expect.toEqual(result, 5, 'Async addition failed')
  }

  @Test('should reject with error for unknown operations')
  async testAsyncUnknownOperation() {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ expect.toReject –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–æ–≤
    await expect.toReject(
      this.calculator.calculateAsync(2, 3, 'unknown'),
      Error
    )
  }

  @Test('should spy on calculator methods')
  async testSpyOnMethods() {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ spy –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤
    const spy = testContext.spy(this.calculator, 'add')

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
    this.calculator.add(5, 3)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    expect.toBeTrue(
      spy.calledWith(5, 3),
      'Method was not called with correct arguments'
    )
    expect.toEqual(
      spy.callCount,
      1,
      'Method was called incorrect number of times'
    )
  }

  @Test('should mock calculator methods')
  async testMockMethod() {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ—Ç–æ–¥–∞
    const mockAdd = mock.method(this.calculator, 'add', {
      returnValue: 42,
    })

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
    const result = this.calculator.add(5, 3)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    expect.toEqual(result, 42, 'Mock returned incorrect value')
    expect.toBeTrue(mockAdd.called, 'Mock was not called')

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    mock.restore(this.calculator)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect.toEqual(
      this.calculator.add(5, 3),
      8,
      'Original method was not restored'
    )
  }

  @Test('should capture async operations with snapshot')
  async testSnapshotCapture() {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–Ω–∞–ø—à–æ—Ç–∞
    const operations = {
      add: await this.calculator.calculateAsync(5, 3, 'add'),
      subtract: await this.calculator.calculateAsync(5, 3, 'subtract'),
      multiply: await this.calculator.calculateAsync(5, 3, 'multiply'),
      divide: await this.calculator.calculateAsync(6, 3, 'divide'),
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞–ø—à–æ—Ç
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞—Å—Ç —Å–Ω–∞–ø—à–æ—Ç,
    // –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å –Ω–∏–º
    testContext.snapshot.toMatchSnapshot('calculator-operations', operations)
  }

  @Test('should run code in sandbox')
  async testSandbox() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ process.env.NODE_ENV
    const originalNodeEnv = process.env.NODE_ENV

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
    await testContext.sandbox(async () => {
      // –ò–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
      process.env.NODE_ENV = 'test-sandbox'

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      expect.toEqual(process.env.NODE_ENV, 'test-sandbox')

      // –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è,
      // sandbox –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    expect.toEqual(process.env.NODE_ENV, originalNodeEnv)
  }

  @Test('should handle timeouts')
  async testTimeouts() {
    let completed = false

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ testContext
    testContext.setTimeout(() => {
      completed = true
    }, 50)

    // –û–∂–∏–¥–∞–µ–º —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã wait
    await testContext.wait(100)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
    expect.toBeTrue(completed, 'Timeout did not complete')
  }
}

// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  import('../core/TestDiscovery').then(async ({ TestDiscovery }) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    const suites = await TestDiscovery.initializeTests(__dirname)
    logger.info(
      `üìä Found ${suites.length} test suites with ${suites.reduce((sum, suite) => sum + suite.tests.length, 0)} tests`
    )

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    for (const suite of suites) {
      logger.info(`üß™ Running test suite: ${suite.name}`)

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö—É–∫–∏ beforeAll
      if (suite.beforeAll) {
        await suite.beforeAll()
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
      for (const test of suite.tests) {
        logger.info(`  üîç Running test: ${test.name}`)

        try {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          testContext.setCurrentTest(test.name)

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
          await test.test()

          logger.info(`  ‚úÖ Test passed: ${test.name}`)
        } catch (error) {
          logger.error(`  ‚ùå Test failed: ${test.name}`, error)
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö—É–∫–∏ afterAll
      if (suite.afterAll) {
        await suite.afterAll()
      }
    }
  })
}
