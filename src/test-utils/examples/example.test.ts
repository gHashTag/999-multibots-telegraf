import { createTest, createSuite, assert, assertEqual } from '../test-utils';
import { TestResult } from '../../types/test';
import { logger } from '../../logger';

// –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function sum(a: number, b: number): number {
  return a + b;
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
const mathTestSuite = createSuite('Math Tests', [
  createTest('sum should correctly add two numbers', async () => {
    const result = sum(2, 3);
    assertEqual(result, 5);
    return {
      success: true,
      message: 'Sum test passed',
      name: 'sum test'
    };
  }),
  
  createTest('sum should handle negative numbers', async () => {
    const result = sum(-2, 3);
    assertEqual(result, 1);
    return {
      success: true,
      message: 'Negative numbers test passed',
      name: 'negative numbers test'
    };
  })
], {
  beforeAll: async () => {
    logger.info('üöÄ Starting math tests...');
    await delay(100); // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  },
  afterAll: async () => {
    logger.info('üèÅ Math tests completed');
    await delay(100); // –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
  },
  beforeEach: async () => {
    logger.info('üìù Running test...');
  },
  afterEach: async () => {
    logger.info('‚úÖ Test completed');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export async function runMathTests(): Promise<void> {
  logger.info('üß™ Running math test suite...');
  
  const results = await runSuite(mathTestSuite);
  
  logger.info('üìä Test results:');
  results.forEach((result: TestResult) => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    logger.info(`${icon} ${result.name}: ${result.message}`);
  });
} 