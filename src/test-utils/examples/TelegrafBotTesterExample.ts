import { logger } from '@/utils/logger'
import { TelegrafBotTester } from '../testers/TelegrafBotTester'
import { TestResult } from '../types'

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TelegrafBotTester –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
 */
export async function runTelegrafBotTesterExample(): Promise<TestResult> {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TelegrafBotTester', {
      description: 'Running TelegrafBotTester example',
    })

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    const botTester = new TelegrafBotTester('example_token')
    const userId = 123456789

    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await botTester.simulateMessage(userId, '–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!')

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    // –û–±—ã—á–Ω–æ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞,
    // –∫–æ—Ç–æ—Ä—ã–π –±—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (botTester.getSentMessages(userId).length === 0) {
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
      const context = botTester.getUserContext(userId)
      await context.reply('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û–ø—Ü–∏—è 1', callback_data: 'option_1' }],
            [{ text: '–û–ø—Ü–∏—è 2', callback_data: 'option_2' }],
          ],
        },
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
    const hasGreeting = botTester.hasMessageWithText(userId, '–ü—Ä–∏–≤–µ—Ç!')
    if (!hasGreeting) {
      throw new Error('–ë–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
    const hasOption1 = botTester.hasInlineButton(userId, '–û–ø—Ü–∏—è 1')
    if (!hasOption1) {
      throw new Error('–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ "–û–ø—Ü–∏—è 1"')
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    const updatedContext = await botTester.simulateInlineButtonClick(
      userId,
      '–û–ø—Ü–∏—è 1'
    )

    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback query
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
    await updatedContext.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é 1!')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    const hasOptionResponse = botTester.hasMessageWithText(
      userId,
      '–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é 1'
    )
    if (!hasOptionResponse) {
      throw new Error('–ë–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏')
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    botTester.clearMessages(userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã
    if (botTester.getSentMessages(userId).length > 0) {
      throw new Error('–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã')
    }

    logger.info('‚úÖ –ü—Ä–∏–º–µ—Ä TelegrafBotTester —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      description: 'TelegrafBotTester example completed successfully',
    })

    return {
      success: true,
      name: 'TelegrafBotTester Example',
      message: '–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TelegrafBotTester —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ TelegrafBotTester', {
      description: 'Error in TelegrafBotTester example',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      success: false,
      name: 'TelegrafBotTester Example',
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}
