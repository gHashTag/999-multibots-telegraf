#!/usr/bin/env node
/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Ü–µ–Ω
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ES –º–æ–¥—É–ª–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
 */
import { loggerTest as logger } from '@/utils/logger';
import { TestResult } from './core/types';
import { TestCategory } from './core/categories';
import mockApi from './core/mock';
import * as database from '@/libs/database';
import * as supabaseModule from '@/supabase';
import { inngest } from '@/inngest-functions/clients';
import { setupTestEnvironment } from './core/setupTests';
import { safelyLoadTestFile } from './core/esmCompat';
import path from 'path';

// –ò–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ü–µ–Ω
const TEST_FILES = [
  'languageScene.test',
  'createUserScene.test',
  'textToVideoWizard.test',
  'textToImageWizard.test',
  'neuroPhotoWizard.test',
  'textToSpeechWizard.test',
  'subscriptionScene.test',
  'neuroPhotoWizardV2.test',
  'checkBalanceScene.test',
  'paymentScene.test',
  'imageToVideoWizard.test',
  'audioToTextScene.test',
  'startScene.test',
  'balanceScene.test',
  'selectModelScene.test',
  'imageToPromptWizard.test',
  'voiceAvatarWizard.test',
  'helpScene.test',
  'ideasGeneratorScene.test',  // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
  'menuScene.test',
  'lipSyncWizard.test',
  'errorScene.test',
  'botStartScene.test',
  'broadcastSendMessageScene.test',
  'mergeVideoAndAudioScene.test',
  'registerScene.test',
  'autopaySuccessScene.test',
  'autopayFailureScene.test',
  'successPayLinkScene.test',
  'successPayQRScene.test',
  'joinPromoScene.test',
  'selectNeuroPhotoScene.test',
  'imageGeneratorScene.test',
  'personalCabinetScene.test',
  'selectLanguageScene.test',
  'managePromocodesScene.test',
  'showPromocodesScene.test',
  'statisticsScene.test'
];

// –ú–æ–∫–∏—Ä—É–µ–º Supabase, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
try {
  Object.defineProperty(supabaseModule, 'supabase', {
    value: mockApi.mockSupabase(),
    configurable: true,
  });
} catch (error) {
  console.log('Supabase mock —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
}

// –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try {
  Object.defineProperty(database, 'getUserSub', {
    value: mockApi.create(),
    configurable: true,
  });
  Object.defineProperty(database, 'getUserBalance', {
    value: mockApi.create(),
    configurable: true,
  });
  Object.defineProperty(database, 'getUserByTelegramId', {
    value: mockApi.create(),
    configurable: true,
  });
} catch (error) {
  console.log('–ú–æ–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤
 * @param testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param testModule –ú–æ–¥—É–ª—å —Å —Ç–µ—Å—Ç–∞–º–∏
 * @param results –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
async function runTestModule(testName: string, testModule: any, results: TestResult[]): Promise<void> {
  if (!testModule) {
    results.push({
      success: false,
      name: testName,
      category: TestCategory.All,
      message: `–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${testName}`
    });
    return;
  }
  
  // –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é runTests - –≤—ã–∑—ã–≤–∞–µ–º –µ–µ
  if (typeof testModule.runTests === 'function') {
    try {
      const moduleResults = await testModule.runTests();
      if (Array.isArray(moduleResults)) {
        moduleResults.forEach(result => results.push(result));
      } else {
        results.push({
          success: true,
          name: testName,
          category: TestCategory.All,
          message: `–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${testName}`
        });
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testName}:`, error);
      results.push({
        success: false,
        name: testName,
        category: TestCategory.All,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
      });
    }
    return;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é
  if (Array.isArray(testModule)) {
    for (const test of testModule) {
      if (typeof test === 'function') {
        try {
          const result = await test();
          results.push(result);
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ ${testName}:`, error);
          results.push({
            success: false,
            name: `${testName} (—Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞)`,
            category: TestCategory.All,
            message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
          });
        }
      }
    }
    return;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é
  const testFunctions = Object.entries(testModule)
    .filter(([key, value]) => typeof value === 'function' && key.startsWith('test'));
  
  if (testFunctions.length > 0) {
    for (const [name, func] of testFunctions) {
      try {
        const result = await (func as Function)();
        if (result) {
          results.push(result);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${name} –∏–∑ –º–æ–¥—É–ª—è ${testName}:`, error);
        results.push({
          success: false,
          name: name,
          category: TestCategory.All,
          message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    }
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º –º–æ–¥—É–ª—å –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é
  if (typeof testModule === 'function') {
    try {
      const result = await testModule();
      if (Array.isArray(result)) {
        result.forEach(r => results.push(r));
      } else if (result) {
        results.push(result);
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥—É–ª—è ${testName} –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏:`, error);
      results.push({
        success: false,
        name: testName,
        category: TestCategory.All,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
      });
    }
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º
  results.push({
    success: false,
    name: testName,
    category: TestCategory.All,
    message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ: ${testName}`
  });
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω Telegram
 */
export async function runScenesTests(): Promise<TestResult[]> {
  console.log('ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram —Å—Ü–µ–Ω (–≤–µ—Ä—Å–∏—è 2.0)...');
  logger.info('ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram —Å—Ü–µ–Ω (–≤–µ—Ä—Å–∏—è 2.0)...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  setupTestEnvironment();
  
  const results: TestResult[] = [];
  
  // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
  const testsDir = path.resolve(__dirname, 'tests/scenes');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
  for (const testFile of TEST_FILES) {
    const testPath = path.join(testsDir, testFile);
    console.log(`\nüß™ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑: ${testFile}`);
    
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ES –º–æ–¥—É–ª–µ–π
      const testModule = await safelyLoadTestFile(testPath);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ –º–æ–¥—É–ª—è
      await runTestModule(testFile, testModule, results);
      
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ${testFile}:`, error);
      results.push({
        success: false,
        name: testFile,
        category: TestCategory.All,
        message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`
      });
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
  
  const totalTests = results.length;
  const successTests = results.filter(r => r.success).length;
  const failedTests = totalTests - successTests;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successTests}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`);
  console.log(`üìù –í—Å–µ–≥–æ: ${totalTests}`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö: ${Math.round((successTests / totalTests) * 100)}%`);
  
  // –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç:');
  
  results.forEach(result => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.name}`);
    if (!result.success) {
      console.log(`   üìå ${result.message}`);
    }
  });
  
  return results;
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runScenesTests()
    .then(() => {
      console.log('‚ú® –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
} 