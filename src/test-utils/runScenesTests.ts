#!/usr/bin/env node
/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Ü–µ–Ω
 */
import { loggerTest as logger } from '@/utils/logger';
import { TestResult } from './core/types';
import * as sceneTests from './tests/scenes/subscriptionCheckScene.test';
import * as balanceNotifierTests from './tests/scenes/balanceNotifierScene.test';
import * as checkBalanceTests from './tests/scenes/checkBalanceScene.test';
import * as menuSceneTests from './tests/scenes/menuScene.test';
import * as startSceneTests from './tests/scenes/startScene.test';  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
import * as helpSceneTests from './tests/scenes/helpScene.test';    // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
import * as selectNeuroPhotoTests from './tests/scenes/selectNeuroPhotoScene.test';
import mockApi from './core/mock';
import * as database from '@/libs/database';
import * as supabaseModule from '@/supabase';

// –ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ selectNeuroPhotoScene.test.ts
import {
  runSelectNeuroPhotoSceneTests,
  testSelectNeuroPhotoScene_EmptyString,
  testSelectNeuroPhotoScene_SpecialCharacters,
  testSelectNeuroPhotoScene_VeryLongInput,
  testSelectNeuroPhotoScene_StatePersistence
} from './tests/scenes/selectNeuroPhotoScene.test';

// Import our new payment scene tests
import * as paymentSceneTests from './tests/scenes/paymentScene.test';

// Mock Supabase to avoid credentials error - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –æ–±—ä–µ–∫—Ç
if (!Object.getOwnPropertyDescriptor(supabaseModule, 'supabase')?.configurable === false) {
  try {
    Object.defineProperty(supabaseModule, 'supabase', {
      value: mockApi.mockSupabase(),
      configurable: true,
    });
  } catch (error) {
    console.log('Supabase mock already defined, skipping redefinition');
  }
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserSub –¥–ª—è —Ç–µ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Supabase
try {
  Object.defineProperty(database, 'getUserSub', {
    value: mockApi.create(),
    configurable: true,
  });
} catch (error) {
  console.log('getUserSub mock already defined, skipping redefinition');
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserBalance –¥–ª—è —Ç–µ—Å—Ç–æ–≤
try {
  Object.defineProperty(database, 'getUserBalance', {
    value: mockApi.create(),
    configurable: true,
  });
} catch (error) {
  console.log('getUserBalance mock already defined, skipping redefinition');
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserByTelegramId –¥–ª—è —Ç–µ—Å—Ç–æ–≤
try {
  Object.defineProperty(database, 'getUserByTelegramId', {
    value: mockApi.create(),
    configurable: true,
  });
} catch (error) {
  console.log('getUserByTelegramId mock already defined, skipping redefinition');
}

export async function runScenesTests(): Promise<TestResult[]> {
  console.log('üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram —Å—Ü–µ–Ω...');
  logger.info('üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram —Å—Ü–µ–Ω...');
  
  const results: TestResult[] = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...');
    const activeSubscriptionResult = await sceneTests.testSubscriptionCheckScene_ActiveSubscription();
    results.push(activeSubscriptionResult);
    console.log(`‚úÖ ${activeSubscriptionResult.name}: ${activeSubscriptionResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${activeSubscriptionResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    results.push({
      name: 'subscriptionCheckScene: Active Subscription',
      success: false,
      message: String(error)
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...');
    const noSubscriptionResult = await sceneTests.testSubscriptionCheckScene_NoSubscription();
    results.push(noSubscriptionResult);
    console.log(`‚úÖ ${noSubscriptionResult.name}: ${noSubscriptionResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${noSubscriptionResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    results.push({
      name: 'subscriptionCheckScene: No Subscription',
      success: false,
      message: String(error)
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –∏—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...');
    const expiredSubscriptionResult = await sceneTests.testSubscriptionCheckScene_ExpiredSubscription();
    results.push(expiredSubscriptionResult);
    console.log(`‚úÖ ${expiredSubscriptionResult.name}: ${expiredSubscriptionResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${expiredSubscriptionResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    results.push({
      name: 'subscriptionCheckScene: Expired Subscription',
      success: false,
      message: String(error)
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ - –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
  try {
    console.log('–¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ...');
    const enterBalanceNotifierResult = await balanceNotifierTests.testBalanceNotifierScene_EnterScene();
    results.push(enterBalanceNotifierResult);
    console.log(`‚úÖ ${enterBalanceNotifierResult.name}: ${enterBalanceNotifierResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${enterBalanceNotifierResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    results.push({
      name: 'balanceNotifierScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  try {
    console.log('–¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ...');
    const toggleNotificationsResult = await balanceNotifierTests.testBalanceNotifierScene_ToggleNotifications();
    results.push(toggleNotificationsResult);
    console.log(`‚úÖ ${toggleNotificationsResult.name}: ${toggleNotificationsResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${toggleNotificationsResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    results.push({
      name: 'balanceNotifierScene: Toggle Notifications',
      success: false,
      message: String(error)
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
  try {
    console.log('–¢–µ—Å—Ç: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ...');
    const changeThresholdResult = await balanceNotifierTests.testBalanceNotifierScene_ChangeThreshold();
    results.push(changeThresholdResult);
    console.log(`‚úÖ ${changeThresholdResult.name}: ${changeThresholdResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${changeThresholdResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    results.push({
      name: 'balanceNotifierScene: Change Threshold',
      success: false,
      message: String(error)
    });
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const thresholdInputResult = await balanceNotifierTests.testBalanceNotifierScene_ThresholdInput();
    results.push(thresholdInputResult);
    console.log(`‚úÖ ${thresholdInputResult.name}: ${thresholdInputResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${thresholdInputResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    results.push({
      name: 'balanceNotifierScene: Threshold Input',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const backToMenuResult = await balanceNotifierTests.testBalanceNotifierScene_BackToMenu();
    results.push(backToMenuResult);
    console.log(`‚úÖ ${backToMenuResult.name}: ${backToMenuResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${backToMenuResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:', error);
    results.push({
      name: 'balanceNotifierScene: Back To Menu',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const exitCommandsResult = await balanceNotifierTests.testBalanceNotifierScene_ExitCommands();
    results.push(exitCommandsResult);
    console.log(`‚úÖ ${exitCommandsResult.name}: ${exitCommandsResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${exitCommandsResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞:', error);
    results.push({
      name: 'balanceNotifierScene: Exit Commands',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç—ã –º–µ–Ω—é —Å—Ü–µ–Ω—ã
  try {
    console.log('–¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ –º–µ–Ω—é...');
    const enterMenuResult = await menuSceneTests.testMenuScene_EnterScene();
    results.push(enterMenuResult);
    console.log(`‚úÖ ${enterMenuResult.name}: ${enterMenuResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${enterMenuResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é:', error);
    results.push({
      name: 'menuScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    const checkBalanceResult = await checkBalanceTests.testCheckBalanceScene_EnterScene();
    results.push(checkBalanceResult);
    console.log(`‚úÖ ${checkBalanceResult.name}: ${checkBalanceResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${checkBalanceResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    results.push({
      name: 'checkBalanceScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }

  // Payment Scene Tests
  try {
    console.log('–¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã...');
    const enterPaymentResult = await paymentSceneTests.testPaymentScene_Enter();
    results.push(enterPaymentResult);
    console.log(`‚úÖ ${enterPaymentResult.name}: ${enterPaymentResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${enterPaymentResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã:', error);
    results.push({
      name: 'paymentScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –û–ø–ª–∞—Ç–∞ —Å—Ü–µ–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º...');
    const withSelectedPaymentResult = await paymentSceneTests.testPaymentScene_WithSelectedPayment();
    results.push(withSelectedPaymentResult);
    console.log(`‚úÖ ${withSelectedPaymentResult.name}: ${withSelectedPaymentResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${withSelectedPaymentResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º:', error);
    results.push({
      name: 'paymentScene: With Selected Payment',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏...');
    const payWithStarsResult = await paymentSceneTests.testPaymentScene_PayWithStars();
    results.push(payWithStarsResult);
    console.log(`‚úÖ ${payWithStarsResult.name}: ${payWithStarsResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${payWithStarsResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏:', error);
    results.push({
      name: 'paymentScene: Pay With Stars',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –û–ø–ª–∞—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ...');
    const payWithSubscriptionResult = await paymentSceneTests.testPaymentScene_PayWithSubscription();
    results.push(payWithSubscriptionResult);
    console.log(`‚úÖ ${payWithSubscriptionResult.name}: ${payWithSubscriptionResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${payWithSubscriptionResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
    results.push({
      name: 'paymentScene: Pay With Subscription',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏...');
    const payWithRublesResult = await paymentSceneTests.testPaymentScene_PayWithRubles();
    results.push(payWithRublesResult);
    console.log(`‚úÖ ${payWithRublesResult.name}: ${payWithRublesResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${payWithRublesResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏:', error);
    results.push({
      name: 'paymentScene: Pay With Rubles',
      success: false,
      message: String(error)
    });
  }

  try {
    console.log('–¢–µ—Å—Ç: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã –æ–ø–ª–∞—Ç—ã...');
    const returnToMainMenuResult = await paymentSceneTests.testPaymentScene_ReturnToMainMenu();
    results.push(returnToMainMenuResult);
    console.log(`‚úÖ ${returnToMainMenuResult.name}: ${returnToMainMenuResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${returnToMainMenuResult.message}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã –æ–ø–ª–∞—Ç—ã:', error);
    results.push({
      name: 'paymentScene: Return To Main Menu',
      success: false,
      message: String(error)
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è startScene
  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É
  try {
    console.log('–¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É...');
    const enterStartSceneResult = await startSceneTests.testStartScene_EnterScene();
    results.push(enterStartSceneResult);
    console.log(`‚úÖ ${enterStartSceneResult.name}: ${enterStartSceneResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${enterStartSceneResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É:', error);
    results.push({
      name: 'startScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  try {
    console.log('–¢–µ—Å—Ç: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const welcomeMessageResult = await startSceneTests.testStartScene_WelcomeMessage();
    results.push(welcomeMessageResult);
    console.log(`‚úÖ ${welcomeMessageResult.name}: ${welcomeMessageResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${welcomeMessageResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    results.push({
      name: 'startScene: Welcome Message',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    console.log('–¢–µ—Å—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const newUserRegistrationResult = await startSceneTests.testStartScene_NewUserRegistration();
    results.push(newUserRegistrationResult);
    console.log(`‚úÖ ${newUserRegistrationResult.name}: ${newUserRegistrationResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${newUserRegistrationResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    results.push({
      name: 'startScene: New User Registration',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  try {
    console.log('–¢–µ—Å—Ç: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    const goToMainMenuResult = await startSceneTests.testStartScene_GoToMainMenu();
    results.push(goToMainMenuResult);
    console.log(`‚úÖ ${goToMainMenuResult.name}: ${goToMainMenuResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${goToMainMenuResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    results.push({
      name: 'startScene: Go To Main Menu',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ü–µ–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  try {
    console.log('–¢–µ—Å—Ç: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...');
    const goToSubscriptionSceneResult = await startSceneTests.testStartScene_GoToSubscriptionScene();
    results.push(goToSubscriptionSceneResult);
    console.log(`‚úÖ ${goToSubscriptionSceneResult.name}: ${goToSubscriptionSceneResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${goToSubscriptionSceneResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ü–µ–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ü–µ–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    results.push({
      name: 'startScene: Go To Subscription Scene',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    console.log('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const handleMissingUserIdResult = await startSceneTests.testStartScene_HandleMissingUserId();
    results.push(handleMissingUserIdResult);
    console.log(`‚úÖ ${handleMissingUserIdResult.name}: ${handleMissingUserIdResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${handleMissingUserIdResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    results.push({
      name: 'startScene: Handle Missing User ID',
      success: false,
      message: String(error)
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è helpScene
  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø–æ–º–æ—â–∏
  try {
    console.log('–¢–µ—Å—Ç: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø–æ–º–æ—â–∏...');
    const enterHelpSceneResult = await helpSceneTests.testHelpScene_EnterScene();
    results.push(enterHelpSceneResult);
    console.log(`‚úÖ ${enterHelpSceneResult.name}: ${enterHelpSceneResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${enterHelpSceneResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø–æ–º–æ—â–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø–æ–º–æ—â–∏:', error);
    results.push({
      name: 'helpScene: Enter Scene',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  try {
    console.log('–¢–µ—Å—Ç: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    const displayHelpResult = await helpSceneTests.testHelpScene_DisplayHelp();
    results.push(displayHelpResult);
    console.log(`‚úÖ ${displayHelpResult.name}: ${displayHelpResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${displayHelpResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
    results.push({
      name: 'helpScene: Display Help',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–ø—Ä–∞–≤–∫–∏
  try {
    console.log('–¢–µ—Å—Ç: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–ø—Ä–∞–≤–∫–∏...');
    const navigationResult = await helpSceneTests.testHelpScene_Navigation();
    results.push(navigationResult);
    console.log(`‚úÖ ${navigationResult.name}: ${navigationResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${navigationResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–ø—Ä–∞–≤–∫–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–ø—Ä–∞–≤–∫–∏:', error);
    results.push({
      name: 'helpScene: Navigation',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
  try {
    console.log('–¢–µ—Å—Ç: –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–º–æ—â–∏...');
    const backToMenuFromHelpResult = await helpSceneTests.testHelpScene_BackToMenu();
    results.push(backToMenuFromHelpResult);
    console.log(`‚úÖ ${backToMenuFromHelpResult.name}: ${backToMenuFromHelpResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${backToMenuFromHelpResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–º–æ—â–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–º–æ—â–∏:', error);
    results.push({
      name: 'helpScene: Back To Menu',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  try {
    console.log('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏...');
    const handlesUnknownModeResult = await helpSceneTests.testHelpScene_HandlesUnknownMode();
    results.push(handlesUnknownModeResult);
    console.log(`‚úÖ ${handlesUnknownModeResult.name}: ${handlesUnknownModeResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${handlesUnknownModeResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏:', error);
    results.push({
      name: 'helpScene: Handles Unknown Mode',
      success: false,
      message: String(error)
    });
  }

  // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  try {
    console.log('–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏...');
    const handlesErrorsResult = await helpSceneTests.testHelpScene_HandlesErrors();
    results.push(handlesErrorsResult);
    console.log(`‚úÖ ${handlesErrorsResult.name}: ${handlesErrorsResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${handlesErrorsResult.message}`);
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏:', error);
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏:', error);
    results.push({
      name: 'helpScene: Handles Errors',
      success: false,
      message: String(error)
    });
  }

  logger.info('üì± –¢–µ—Å—Ç—ã Telegram —Å—Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  console.log('üì± –¢–µ—Å—Ç—ã Telegram —Å—Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runScenesTests().catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
} 