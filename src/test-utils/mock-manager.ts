import { logger } from '@/utils/logger'

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class MockManager {
  private mocks: Map<string, any> = new Map()

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–∫ –¥–ª—è –º–æ–¥—É–ª—è
   */
  registerMock(modulePath: string, mockImplementation: any): void {
    logger.info(`üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è: ${modulePath}`)
    this.mocks.set(modulePath, mockImplementation)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–∫ –¥–ª—è –º–æ–¥—É–ª—è
   */
  getMock(modulePath: string): any {
    return this.mocks.get(modulePath)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–æ–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è
   */
  hasMock(modulePath: string): boolean {
    return this.mocks.has(modulePath)
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –º–æ–∫–∏
   */
  clearMocks(): void {
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–∫–æ–≤')
    this.mocks.clear()
  }
}

export const mockManager = new MockManager()
