import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { v4 as uuidv4 } from 'uuid'
import { TestResult } from '../types'
import { TEST_CONFIG } from '../test-config'
import { TransactionType } from '@/interfaces/payments.interface'

interface DockerPaymentTestCase {
  name: string
  input: {
    telegram_id: string
    amount: number
    type: TransactionType.MONEY_INCOME | TransactionType.MONEY_EXPENSE
    description: string
    bot_name: string
    service_type?: string
    metadata?: Record<string, any>
  }
  expected: {
    success: boolean
    error?: string
  }
}

const DOCKER_TEST_CASES: DockerPaymentTestCase[] = [
  {
    name: '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Docker',
    input: {
      telegram_id: '123456789',
      amount: 100,
      type: TransactionType.MONEY_INCOME,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ Docker',
      bot_name: 'test_bot',
      service_type: 'TopUpBalance',
      metadata: {
        payment_method: 'Test',
        test_case: true,
        environment: 'docker',
      },
    },
    expected: {
      success: true,
    },
  },
  {
    name: '–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Docker',
    input: {
      telegram_id: '123456789',
      amount: 50,
      type: TransactionType.MONEY_EXPENSE,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ Docker',
      bot_name: 'test_bot',
      service_type: 'TextToImage',
      metadata: {
        payment_method: 'Test',
        test_case: true,
        environment: 'docker',
      },
    },
    expected: {
      success: true,
    },
  },
  {
    name: '–ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –≤ Docker',
    input: {
      telegram_id: '987654321',
      amount: 1000,
      type: TransactionType.MONEY_EXPENSE,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –≤ Docker',
      bot_name: 'test_bot',
      service_type: 'TextToImage',
      metadata: {
        payment_method: 'Test',
        test_case: true,
        environment: 'docker',
      },
    },
    expected: {
      success: false,
      error: 'Insufficient funds',
    },
  },
]

async function runDockerPaymentTest(
  testCase: DockerPaymentTestCase
): Promise<TestResult> {
  const startTime = Date.now()
  const operationId = `docker-test-${testCase.name}-${Date.now()}-${uuidv4()}`

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ Docker', {
      description: 'Starting Docker payment test',
      testName: testCase.name,
      operationId,
      environment: 'docker',
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    const paymentType =
      testCase.input.type === TransactionType.MONEY_INCOME
        ? TransactionType.MONEY_INCOME
        : TransactionType.MONEY_EXPENSE

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
    await inngest.send({
      id: operationId,
      name: 'payment/process',
      data: {
        telegram_id: testCase.input.telegram_id,
        amount: testCase.input.amount,
        type: paymentType,
        description: testCase.input.description,
        bot_name: testCase.input.bot_name,
        service_type: testCase.input.service_type || 'Unknown',
        metadata: {
          ...testCase.input.metadata,
          operation_id: operationId,
          test: true,
          environment: 'docker',
        },
      },
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
    await new Promise(resolve =>
      setTimeout(resolve, TEST_CONFIG.TIMEOUTS.MEDIUM)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: payment, error: queryError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('operation_id', operationId)
      .single()

    if (queryError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ', {
        description: 'Error querying payment data',
        error: queryError.message,
        operationId,
      })

      return {
        name: testCase.name,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ: ${queryError.message}`,
        details: {
          operationId,
          error: queryError,
          testCase,
        },
      }
    }

    if (!payment) {
      return {
        name: testCase.name,
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)',
        details: {
          operationId,
          input: testCase.input,
        },
      }
    }

    const success = payment.status === 'COMPLETED'
    const error = payment.error_message || undefined

    const passed =
      success === testCase.expected.success &&
      (!testCase.expected.error ||
        (error && error.includes(testCase.expected.error)))

    const duration = Date.now() - startTime

    return {
      name: testCase.name,
      success: passed,
      message: passed
        ? `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ (${duration}ms)`
        : `‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å=${testCase.expected.success}, –ø–æ–ª—É—á–µ–Ω=${success}`,
      details: {
        operationId,
        payment,
        expected: testCase.expected,
        duration,
      },
    }
  } catch (error) {
    const duration = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Error running payment test',
      error: errorMessage,
      operationId,
      testName: testCase.name,
    })

    return {
      name: testCase.name,
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${errorMessage}`,
      details: {
        operationId,
        input: testCase.input,
        error,
        duration,
      },
    }
  }
}

export async function runDockerPaymentTests(): Promise<TestResult[]> {
  logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ Docker', {
    description: 'Starting payment system tests in Docker',
    numberOfTests: DOCKER_TEST_CASES.length,
    environment: 'docker',
  })

  const results: TestResult[] = []

  for (const testCase of DOCKER_TEST_CASES) {
    const result = await runDockerPaymentTest(testCase)
    results.push(result)

    logger.info(result.success ? '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω', {
      description: result.success ? 'Test passed' : 'Test failed',
      testName: testCase.name,
      error: result.success ? undefined : result.message,
      environment: 'docker',
    })
  }

  const passedTests = results.filter(r => r.success).length
  const totalTests = results.length

  logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ Docker', {
    description: 'Payment system test results in Docker',
    passedTests,
    totalTests,
    successRate: `${((passedTests / totalTests) * 100).toFixed(2)}%`,
    environment: 'docker',
  })

  return results
}
