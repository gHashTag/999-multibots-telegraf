import { logger } from '@/utils/logger'
import { runTests } from '../runTests'
import { testPaymentReceiptGeneration } from '../tests/payment/paymentReceiptTest'
import { testReceiptCommand } from '../tests/payment/receiptCommandTest'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤
 */
export async function runPaymentReceiptTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤', {
    description: 'Running payment receipt tests',
  })

  try {
    const results = await runTests([
      testPaymentReceiptGeneration,
      testReceiptCommand,
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤
    ])

    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const totalTests = results.length

    if (failedTests === 0) {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', {
        description: 'All payment receipt tests have passed successfully',
        passedTests,
        totalTests,
      })
    } else {
      logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'Some payment receipt tests have failed',
        passedTests,
        failedTests,
        totalTests,
      })
    }

    return results
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤', {
      description: 'Error running payment receipt tests',
      error: error.message,
      stack: error.stack,
    })
    throw error
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runPaymentReceiptTests()
    .then(() => {
      logger.info('üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
        description: 'Payment receipt tests execution completed',
      })
      process.exit(0)
    })
    .catch(error => {
      logger.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —á–µ–∫–æ–≤',
        {
          description: 'Critical error during payment receipt tests execution',
          error: error.message,
          stack: error.stack,
        }
      )
      process.exit(1)
    })
}
