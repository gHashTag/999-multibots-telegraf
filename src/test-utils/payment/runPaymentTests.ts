import { logger } from '@/utils/logger'
import { runTests } from '../runTests'
import { testPaymentReceiptGeneration } from '../tests/payment/paymentReceiptTest'
import { testSimpleReceiptGeneration } from '../tests/payment/simpleReceiptTest'
import { testReceiptCommand } from '../tests/payment/receiptCommandTest'
import { testPaymentProcessor } from '../tests/payment/paymentProcessorTest'
import {
  testSuccessfulPaymentCreation,
  testDuplicatePayment,
  testNonExistentUserPayment,
  testExistingInvIdCheck,
} from '../tests/payment/createSuccessfulPaymentTest'
import { testPaymentNotification } from '../tests/payment/paymentNotification.test'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runPaymentTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
    description: 'Running payment system tests',
  })

  try {
    const tests = [
      testPaymentReceiptGeneration,
      testSimpleReceiptGeneration,
      testReceiptCommand,
      testPaymentProcessor,
      testSuccessfulPaymentCreation,
      testDuplicatePayment,
      testNonExistentUserPayment,
      testExistingInvIdCheck,
      testPaymentNotification,
    ]

    const results = await runTests(tests)

    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const totalTests = results.length

    if (failedTests === 0) {
      logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'All payment system tests passed successfully',
        passedTests,
        totalTests,
      })
    } else {
      logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'Some payment system tests failed',
        passedTests,
        failedTests,
        totalTests,
      })
      process.exit(1)
    }

    return results
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Error running payment system tests',
      error: error.message,
      stack: error.stack,
    })
    throw error
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runPaymentTests()
    .then(() => {
      logger.info('üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
        description: 'Payment system tests execution completed',
      })
      process.exit(0)
    })
    .catch(error => {
      logger.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        {
          description: 'Critical error during payment system tests execution',
          error: error.message,
          stack: error.stack,
        }
      )
      process.exit(1)
    })
}
