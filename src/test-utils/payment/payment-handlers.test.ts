import { TestRunner } from '../TestRunner'
import { TEST_CONFIG } from '../test-config'
import { logger } from '@/utils/logger'

import { handleSuccessfulPayment } from '@/handlers/paymentHandlers'

describe('üè¶ Payment Handlers Tests', () => {
  const runner = new TestRunner()

  beforeAll(async () => {
    await runner.init()
    logger.info('üöÄ Payment handlers tests started')
    runner.registerHandler('handleSuccessfulPayment', handleSuccessfulPayment)
  })

  afterAll(async () => {
    await runner.cleanup()
    logger.info('üèÅ Payment handlers tests completed')
  })

  describe('üí∞ handleSuccessfulPayment', () => {
    it('‚úÖ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π', async () => {
      const testCase = {
        name: 'Successful payment with subscription',
        input: {
          chat: { id: TEST_CONFIG.user.telegramId },
          from: {
            id: TEST_CONFIG.user.telegramId,
            username: 'testuser',
          },
          message: {
            successful_payment: {
              total_amount: 1000,
              invoice_payload: 'test_payload',
            },
          },
          session: {
            subscription: 'premium',
            telegram_id: TEST_CONFIG.user.telegramId,
            email: 'test@test.com',
            buttons: [],
          },
          botInfo: {
            username: TEST_CONFIG.bot.name,
          },
        },
      }

      const result = await runner.runTestCase({
        testCase,
        handler: 'handleSuccessfulPayment',
        expectedCalls: {
          inngest: [
            {
              name: 'payment/process',
              data: {
                telegram_id: TEST_CONFIG.user.telegramId,
                type: 'income',
                bot_name: TEST_CONFIG.bot.name,
              },
            },
          ],
          supabase: [
            {
              function: 'updateUserSubscription',
              args: [TEST_CONFIG.user.telegramId, 'premium'],
            },
          ],
        },
        expectedMessages: [
          message =>
            message.includes('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É') ||
            message.includes('Thank you for your purchase'),
        ],
      })

      expect(result.success).toBe(true)
      expect(result.error).toBeUndefined()
    })

    it('‚úÖ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ—Å—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)', async () => {
      const testCase = {
        name: 'Successful payment without subscription',
        input: {
          chat: { id: TEST_CONFIG.user.telegramId },
          from: {
            id: TEST_CONFIG.user.telegramId,
            username: 'testuser',
          },
          message: {
            successful_payment: {
              total_amount: 500,
              invoice_payload: 'balance_top_up',
            },
          },
          session: {
            subscription: '',
            telegram_id: TEST_CONFIG.user.telegramId,
            email: 'test@test.com',
            buttons: [],
          },
          botInfo: {
            username: TEST_CONFIG.bot.name,
          },
        },
      }

      const result = await runner.runTestCase({
        testCase,
        handler: 'handleSuccessfulPayment',
        expectedCalls: {
          inngest: [
            {
              name: 'payment/process',
              data: {
                telegram_id: TEST_CONFIG.user.telegramId,
                type: 'income',
                description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram',
                bot_name: TEST_CONFIG.bot.name,
              },
            },
          ],
        },
        expectedMessages: [
          message =>
            message.includes('–±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω') ||
            message.includes('balance has been replenished'),
        ],
      })

      expect(result.success).toBe(true)
      expect(result.error).toBeUndefined()
    })

    it('‚ùå –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ chat', async () => {
      const testCase = {
        name: 'Payment without chat',
        input: {
          from: {
            id: TEST_CONFIG.user.telegramId,
            username: 'testuser',
          },
          message: {
            successful_payment: {
              total_amount: 1000,
              invoice_payload: 'test_payload',
            },
          },
          session: {
            subscription: 'premium',
            telegram_id: TEST_CONFIG.user.telegramId,
            email: 'test@test.com',
            buttons: [],
          },
        },
      }

      const result = await runner.runTestCase({
        testCase,
        handler: 'handleSuccessfulPayment',
        expectedLogs: [
          {
            level: 'error',
            message: '‚ùå Update does not belong to a chat',
          },
        ],
      })

      expect(result.success).toBe(true)
      expect(result.error).toBeUndefined()
    })

    it('‚ùå –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞', async () => {
      const testCase = {
        name: 'Invalid payment format',
        input: {
          chat: { id: TEST_CONFIG.user.telegramId },
          from: {
            id: TEST_CONFIG.user.telegramId,
            username: 'testuser',
          },
          message: {
            successful_payment: null,
          },
          session: {
            subscription: 'premium',
            telegram_id: TEST_CONFIG.user.telegramId,
            email: 'test@test.com',
            buttons: [],
          },
        },
      }

      const result = await runner.runTestCase({
        testCase,
        handler: 'handleSuccessfulPayment',
        expectedLogs: [
          {
            level: 'error',
            message: message =>
              message.includes('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'),
          },
        ],
      })

      expect(result.success).toBe(true)
      expect(result.error).toBeUndefined()
    })
  })
})
