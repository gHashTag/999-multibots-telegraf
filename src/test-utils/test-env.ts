import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { logger } from '@/utils/logger'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config()

/**
 * –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
const requiredEnvVars = [
  'SUPABASE_URL',
  'SUPABASE_SERVICE_KEY',
  'SUPABASE_ANON_KEY',
] as const

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @param name - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @throws Error –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
function getEnvVar(name: string): string {
  const value = process.env[name]
  if (!value) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è', {
      description: 'Missing environment variable',
      variable: name,
    })
    throw new Error(`Missing environment variable: ${name}`)
  }
  return value
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for (const envVar of requiredEnvVars) {
  getEnvVar(envVar)
}

/**
 * –ö–ª–∏–µ–Ω—Ç Supabase –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
 */
export const supabaseTestClient = createClient(
  getEnvVar('SUPABASE_URL'),
  getEnvVar('SUPABASE_SERVICE_KEY'),
  {
    auth: {
      persistSession: false,
    },
  }
)

/**
 * –ö–ª–∏–µ–Ω—Ç Supabase –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
export const supabaseAnon = createClient(
  getEnvVar('SUPABASE_URL'),
  getEnvVar('SUPABASE_ANON_KEY')
)

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
interface TestEnvironment {
  supabase: {
    url: string
    key: string
  }
  api: {
    url: string
    webhookPath: string
    bflWebhookPath: string
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export const TEST_ENV: TestEnvironment = {
  supabase: {
    url: getEnvVar('SUPABASE_URL'),
    key: getEnvVar('SUPABASE_ANON_KEY'),
  },
  api: {
    url: process.env.API_URL || 'http://localhost:2999',
    webhookPath: '/webhooks/replicate',
    bflWebhookPath: '/webhooks/bfl',
  },
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
 */
interface TestLogger {
  info: (message: string, data?: Record<string, any>) => void
  error: (message: string, error?: Error | string) => void
  success: (message: string, data?: Record<string, any>) => void
}

/**
 * –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏
 */
export const testLogger: TestLogger = {
  info: (message: string, data?: Record<string, any>) => {
    logger.info({
      message: `üß™ ${message}`,
      description: message,
      ...data,
    })
  },
  error: (message: string, error?: Error | string) => {
    logger.error({
      message: `‚ùå ${message}`,
      description: message,
      error: error instanceof Error ? error.message : error,
    })
  },
  success: (message: string, data?: Record<string, any>) => {
    logger.info({
      message: `‚úÖ ${message}`,
      description: message,
      ...data,
    })
  },
}
