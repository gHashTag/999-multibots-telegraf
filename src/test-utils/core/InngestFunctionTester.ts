import { config } from 'dotenv'
import path from 'path'
import { logger } from '@/utils/logger'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
export interface FunctionTestResult<T = any> {
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ */
  success: boolean
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞ */
  message: string
  /** –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω */
  result?: T
  /** –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ —É—Å–ø–µ—à–µ–Ω */
  error?: string
  /** –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ */
  details?: Record<string, any>
  /** –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  duration?: number
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
export interface FunctionTestOptions {
  /** –ò–º—è —Ç–µ—Å—Ç–∞ */
  name: string
  /** –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
  verbose?: boolean
  /** –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  timeout?: number
  /** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ */
  exitOnError?: boolean
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export abstract class InngestFunctionTester<TInput, TOutput> {
  protected name: string
  protected eventName: string
  protected verbose: boolean

  constructor(eventName: string, options: { name: string; verbose?: boolean }) {
    this.eventName = eventName
    this.name = options.name
    this.verbose = options.verbose || false
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async runTest(input: TInput): Promise<TOutput> {
    const startTime = Date.now()

    try {
      if (this.verbose) {
        logger.info({
          message: `üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${this.name}`,
          description: `Running test: ${this.name}`,
          eventName: this.eventName,
          input,
        })
      }

      const result = await this.executeTest(input)

      const duration = Date.now() - startTime

      if (this.verbose) {
        logger.info({
          message: `‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.name}`,
          description: `Test completed successfully: ${this.name}`,
          duration,
          eventName: this.eventName,
        })
      }

      return result
    } catch (error) {
      const duration = Date.now() - startTime

      logger.error({
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${this.name}`,
        description: `Test failed: ${this.name}`,
        error: error instanceof Error ? error.message : String(error),
        duration,
        eventName: this.eventName,
      })

      throw error
    }
  }

  /**
   * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ—Ç–æ–º–∫–∞—Ö
   * –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  protected abstract executeTest(input: TInput): Promise<TOutput>
}
