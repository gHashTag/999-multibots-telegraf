import { logger } from '@/utils/logger'

export interface InngestEvent {
  name: string
  data: Record<string, any>
}

class InngestTestEngine {
  private events: InngestEvent[] = []
  private processedEvents: InngestEvent[] = []

  constructor() {
    logger.info('üîß Initializing InngestTestEngine')
  }

  async send(event: InngestEvent): Promise<void> {
    this.events.push(event)
    logger.info(`üì§ Event sent: ${event.name}`)
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
    await this.processEvent(event)
  }

  private async processEvent(event: InngestEvent): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.processedEvents.push(event)
    logger.info(`‚úÖ Event processed: ${event.name}`)
  }

  async clearEventHistory(): Promise<void> {
    this.events = []
    this.processedEvents = []
    logger.info('üßπ Event history cleared')
  }

  async waitForEvents(timeout: number = 1000): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, timeout))
    logger.info('‚è≥ Waited for events to process')
  }

  async getProcessedEvents(): Promise<InngestEvent[]> {
    return this.processedEvents
  }

  async getEventHistory(): Promise<InngestEvent[]> {
    return [...this.events, ...this.processedEvents]
  }
}

export const inngestTestEngine = new InngestTestEngine()
