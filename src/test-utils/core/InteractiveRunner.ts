import readline from 'readline'
import { TestCategory, getSubcategories } from './categories'
import { TestRunner } from './TestRunner'
import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
 */
export class InteractiveRunner {
  private rl: readline.Interface
  private runner: TestRunner
  
  constructor(runner: TestRunner) {
    this.runner = runner
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
   */
  async start(): Promise<void> {
    try {
      console.log('\nüß™ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ üß™\n')
      
      // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
      const selectedCategories = await this.selectCategories()
      
      // –í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
      const options = await this.selectOptions()
      
      // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      if (selectedCategories.length > 0) {
        console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
        selectedCategories.forEach(cat => console.log(`  - ${cat}`))
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏ –∫ runner
        if (options.verbose) {
          this.runner.setVerbose(true)
        }
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        console.log('\n‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n')
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–∏ parallel
        if (options.parallel) {
          await this.runner.runTestsInParallel()
        } else {
          await this.runner.runTests()
        }
      } else {
        console.log('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤')
      }
    } finally {
      this.rl.close()
    }
  }
  
  /**
   * –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private async selectCategories(): Promise<string[]> {
    const mainCategories = [
      TestCategory.All,
      TestCategory.Neuro,
      TestCategory.Database,
      TestCategory.Webhook,
      TestCategory.Inngest,
      TestCategory.Payment,
      TestCategory.Speech
    ]
    
    console.log('üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤:')
    console.log('0. –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    
    mainCategories.forEach((cat, index) => {
      if (cat !== TestCategory.All) {
        console.log(`${index}. ${cat}`)
      }
    })
    
    console.log('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ "0" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
    const answer = await this.question('> ')
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (answer === '0') {
      return [TestCategory.All]
    }
    
    // –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const selectedIndices = answer.split(',')
      .map(s => s.trim())
      .filter(s => /^\d+$/.test(s))
      .map(s => parseInt(s, 10))
      .filter(i => i >= 0 && i < mainCategories.length)
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (selectedIndices.length === 0) {
      return [TestCategory.All]
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return selectedIndices.map(i => mainCategories[i])
  }
  
  /**
   * –í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
   */
  private async selectOptions(): Promise<{ verbose: boolean, parallel: boolean }> {
    const options = {
      verbose: false,
      parallel: false
    }
    
    console.log('\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:')
    
    // –û–ø—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    const verboseAnswer = await this.question('–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥? (y/n) [n]: ')
    options.verbose = verboseAnswer.toLowerCase() === 'y'
    
    // –û–ø—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const parallelAnswer = await this.question('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ? (y/n) [n]: ')
    options.parallel = parallelAnswer.toLowerCase() === 'y'
    
    return options
  }
  
  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é promise
   */
  private question(query: string): Promise<string> {
    return new Promise(resolve => {
      this.rl.question(query, answer => {
        resolve(answer)
      })
    })
  }
  
  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å readline
   */
  close(): void {
    this.rl.close()
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */
export async function runInteractive(runner: TestRunner): Promise<void> {
  const interactive = new InteractiveRunner(runner)
  await interactive.start()
} 