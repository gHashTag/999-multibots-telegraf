/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (HTML, JSON) –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * —Å –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.
 */

import fs from 'fs'
import path from 'path'
import { TestResult, TestStatus } from '../types'
import { logger } from '@/utils/logger'

/**
 * –§–æ—Ä–º–∞—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export enum ReportFormat {
  JSON = 'json',
  HTML = 'html',
}

/**
 * –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
 */
export interface ReportOptions {
  /** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ */
  outputDir: string
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) */
  reportName: string
  /** –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ */
  addTimestamp: boolean
  /** –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ */
  detailed: boolean
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
 */
interface ReportData {
  /** –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
  summary: {
    /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ */
    total: number
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
    success: number
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
    failed: number
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
    skipped: number
    /** –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ */
    timestamp: string
    /** –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
    successRate: number
  }
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */
  categories: Record<
    string,
    {
      /** –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
      total: number
      /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
      success: number
      /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
      failed: number
      /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
      skipped: number
      /** –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
      successRate: number
      /** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ */
      tests: TestResult[]
    }
  >
}

/**
 * –ö–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export class ReportGenerator {
  private options: ReportOptions

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ ReportGenerator
   * @param options –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
   */
  constructor(options: Partial<ReportOptions> = {}) {
    this.options = {
      outputDir: options.outputDir || 'test-reports',
      reportName: options.reportName || 'test-report',
      addTimestamp:
        options.addTimestamp !== undefined ? options.addTimestamp : true,
      detailed: options.detailed !== undefined ? options.detailed : true,
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.options.outputDir)) {
      fs.mkdirSync(this.options.outputDir, { recursive: true })
      logger.info({
        message: `üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: ${this.options.outputDir}`,
        description: 'Created directory for reports',
      })
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param results –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param format –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
   * @returns –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
   */
  async generateReport(
    results: TestResult[],
    format: ReportFormat = ReportFormat.HTML
  ): Promise<string> {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    const reportData = this.formatReportData(results)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if (format === ReportFormat.JSON) {
      return this.generateJsonReport(reportData)
    } else {
      return this.generateHtmlReport(reportData)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
   * @param reportData –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
   * @returns –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
   */
  private async generateJsonReport(reportData: ReportData): Promise<string> {
    const timestamp = this.options.addTimestamp ? this.getTimestamp() : ''
    const fileName = `${this.options.reportName}${timestamp}.json`
    const filePath = path.join(this.options.outputDir, fileName)

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª JSON
    const jsonContent = JSON.stringify(reportData, null, 2)
    await fs.promises.writeFile(filePath, jsonContent, 'utf8')

    logger.info({
      message: `üìä –°–æ–∑–¥–∞–Ω JSON –æ—Ç—á–µ—Ç: ${filePath}`,
      description: 'Created JSON report',
      filePath,
    })

    return filePath
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
   * @param reportData –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
   * @returns –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
   */
  private async generateHtmlReport(reportData: ReportData): Promise<string> {
    const timestamp = this.options.addTimestamp ? this.getTimestamp() : ''
    const fileName = `${this.options.reportName}${timestamp}.html`
    const filePath = path.join(this.options.outputDir, fileName)

    // –°–æ–∑–¥–∞–µ–º HTML-–æ—Ç—á–µ—Ç
    const htmlContent = this.convertToHtml(reportData)
    await fs.promises.writeFile(filePath, htmlContent, 'utf8')

    logger.info({
      message: `üìä –°–æ–∑–¥–∞–Ω HTML –æ—Ç—á–µ—Ç: ${filePath}`,
      description: 'Created HTML report',
      filePath,
    })

    return filePath
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
   * @param results –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
   */
  private formatReportData(results: TestResult[]): ReportData {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const total = results.length
    const success = results.filter(r => r.status === TestStatus.Success).length
    const failed = results.filter(r => r.status === TestStatus.Failed).length
    const skipped = results.filter(r => r.status === TestStatus.Skipped).length
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesMap: Record<string, TestResult[]> = {}

    for (const result of results) {
      const category = result.category || 'Uncategorized'
      if (!categoriesMap[category]) {
        categoriesMap[category] = []
      }
      categoriesMap[category].push(result)
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categories: ReportData['categories'] = {}

    for (const [category, tests] of Object.entries(categoriesMap)) {
      const categoryTotal = tests.length
      const categorySuccess = tests.filter(
        r => r.status === TestStatus.Success
      ).length
      const categoryFailed = tests.filter(
        r => r.status === TestStatus.Failed
      ).length
      const categorySkipped = tests.filter(
        r => r.status === TestStatus.Skipped
      ).length
      const categorySuccessRate =
        categoryTotal > 0
          ? Math.round((categorySuccess / categoryTotal) * 100)
          : 0

      categories[category] = {
        total: categoryTotal,
        success: categorySuccess,
        failed: categoryFailed,
        skipped: categorySkipped,
        successRate: categorySuccessRate,
        tests,
      }
    }

    return {
      summary: {
        total,
        success,
        failed,
        skipped,
        timestamp: new Date().toISOString(),
        successRate,
      },
      categories,
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç
   * @param reportData –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
   * @returns HTML-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  private convertToHtml(reportData: ReportData): string {
    const { summary, categories } = reportData

    // –ù–∞—á–∞–ª–æ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å—Ç–∏–ª—è–º–∏
    let html = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          line-height: 1.6;
          color: #333;
          margin: 0;
          padding: 20px;
          background-color: #f5f5f7;
        }
        .container {
          max-width: 1200px;
          margin: 0 auto;
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          padding: 30px;
        }
        h1 {
          color: #333;
          border-bottom: 2px solid #eee;
          padding-bottom: 10px;
          margin-top: 0;
        }
        h2 {
          margin-top: 30px;
          color: #444;
          border-bottom: 1px solid #eee;
          padding-bottom: 5px;
        }
        .summary {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          margin: 20px 0;
          gap: 15px;
        }
        .card {
          background-color: white;
          border-radius: 6px;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
          padding: 15px;
          flex: 1;
          min-width: 200px;
          text-align: center;
        }
        .card-title {
          font-size: 14px;
          color: #666;
          margin-bottom: 8px;
        }
        .card-value {
          font-size: 28px;
          font-weight: bold;
        }
        .success { color: #34c759; }
        .failed { color: #ff3b30; }
        .skipped { color: #ff9500; }
        .total { color: #007aff; }
        
        .category {
          margin-bottom: 30px;
          background-color: white;
          border-radius: 6px;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
          overflow: hidden;
        }
        .category-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px 20px;
          background-color: #f9f9f9;
          border-bottom: 1px solid #eee;
          cursor: pointer;
        }
        .category-name {
          font-weight: bold;
          color: #333;
        }
        .category-stats {
          display: flex;
          gap: 15px;
        }
        .category-stat {
          display: flex;
          align-items: center;
          font-size: 14px;
        }
        .category-stat-value {
          font-weight: bold;
          margin-left: 5px;
        }
        .category-content {
          padding: 0 15px;
          max-height: 0;
          overflow: hidden;
          transition: max-height 0.3s ease-in-out;
        }
        .category-content.expanded {
          max-height: 2000px;
          padding: 15px;
        }
        
        table {
          width: 100%;
          border-collapse: collapse;
          margin: 15px 0;
        }
        th, td {
          padding: 10px 12px;
          text-align: left;
          border-bottom: 1px solid #eee;
        }
        th {
          background-color: #f5f5f7;
          font-weight: 500;
        }
        .test-name {
          font-weight: 500;
        }
        .test-status {
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
          font-weight: 500;
        }
        .status-success {
          background-color: rgba(52, 199, 89, 0.1);
          color: #34c759;
        }
        .status-failed {
          background-color: rgba(255, 59, 48, 0.1);
          color: #ff3b30;
        }
        .status-skipped {
          background-color: rgba(255, 149, 0, 0.1);
          color: #ff9500;
        }
        .timestamp {
          color: #666;
          font-size: 14px;
          margin-top: 5px;
        }
        .progress-bar {
          height: 6px;
          background-color: #eeeeee;
          border-radius: 3px;
          overflow: hidden;
          margin-top: 5px;
        }
        .progress-fill {
          height: 100%;
          background-color: #34c759;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è */
        .toggle-button {
          background: none;
          border: none;
          cursor: pointer;
          font-size: 16px;
          color: #007aff;
        }
        
        /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫ */
        .arrow {
          display: inline-block;
          transition: transform 0.3s;
        }
        .expanded .arrow {
          transform: rotate(90deg);
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
          .summary {
            flex-direction: column;
          }
          .card {
            width: 100%;
          }
          .category-stats {
            flex-direction: column;
            gap: 5px;
          }
          .category-header {
            flex-direction: column;
            align-items: flex-start;
          }
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</h1>
        <div class="timestamp">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(summary.timestamp).toLocaleString()}</div>
        
        <div class="summary">
          <div class="card">
            <div class="card-title">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
            <div class="card-value total">${summary.total}</div>
          </div>
          <div class="card">
            <div class="card-title">–£—Å–ø–µ—à–Ω—ã—Ö</div>
            <div class="card-value success">${summary.success}</div>
          </div>
          <div class="card">
            <div class="card-title">–ù–µ—É–¥–∞—á–Ω—ã—Ö</div>
            <div class="card-value failed">${summary.failed}</div>
          </div>
          <div class="card">
            <div class="card-title">–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö</div>
            <div class="card-value skipped">${summary.skipped}</div>
          </div>
          <div class="card">
            <div class="card-title">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            <div class="card-value ${summary.successRate > 80 ? 'success' : summary.successRate > 50 ? 'skipped' : 'failed'}">${summary.successRate}%</div>
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${summary.successRate}%"></div>
            </div>
          </div>
        </div>
        
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h2>
    `

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const [categoryName, category] of Object.entries(categories)) {
      html += `
        <div class="category">
          <div class="category-header" onclick="toggleCategory(this.parentElement)">
            <div class="category-name">
              <span class="arrow">‚ñ∂</span> ${categoryName}
            </div>
            <div class="category-stats">
              <div class="category-stat">
                –í—Å–µ–≥–æ: <span class="category-stat-value total">${category.total}</span>
              </div>
              <div class="category-stat">
                –£—Å–ø–µ—à–Ω–æ: <span class="category-stat-value success">${category.success}</span>
              </div>
              <div class="category-stat">
                –ù–µ—É–¥–∞—á–Ω–æ: <span class="category-stat-value failed">${category.failed}</span>
              </div>
              <div class="category-stat">
                –ü—Ä–æ–ø—É—â–µ–Ω–æ: <span class="category-stat-value skipped">${category.skipped}</span>
              </div>
              <div class="category-stat">
                –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <span class="category-stat-value ${category.successRate > 80 ? 'success' : category.successRate > 50 ? 'skipped' : 'failed'}">${category.successRate}%</span>
              </div>
            </div>
          </div>
          <div class="category-content">
            <table>
              <thead>
                <tr>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–í—Ä–µ–º—è (–º—Å)</th>
                  ${this.options.detailed ? '<th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>' : ''}
                </tr>
              </thead>
              <tbody>
      `

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const test of category.tests) {
        const statusClass =
          test.status === TestStatus.Success
            ? 'status-success'
            : test.status === TestStatus.Failed
              ? 'status-failed'
              : 'status-skipped'

        const statusText =
          test.status === TestStatus.Success
            ? '–£—Å–ø–µ—à–Ω–æ'
            : test.status === TestStatus.Failed
              ? '–ù–µ—É–¥–∞—á–Ω–æ'
              : '–ü—Ä–æ–ø—É—â–µ–Ω–æ'

        html += `
                <tr>
                  <td class="test-name">${test.name}</td>
                  <td><span class="test-status ${statusClass}">${statusText}</span></td>
                  <td>${test.durationMs !== undefined ? test.durationMs.toFixed(2) : '-'}</td>
                  ${this.options.detailed ? `<td>${test.message || '-'}</td>` : ''}
                </tr>
        `
      }

      html += `
              </tbody>
            </table>
          </div>
        </div>
      `
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML-–¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    html += `
        <div style="text-align: center; margin-top: 30px; color: #666; font-size: 14px;">
          –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v1.0
        </div>
      </div>
      
      <script>
        function toggleCategory(categoryElement) {
          const content = categoryElement.querySelector('.category-content');
          content.classList.toggle('expanded');
          const arrow = categoryElement.querySelector('.arrow');
          arrow.style.transform = content.classList.contains('expanded') ? 'rotate(90deg)' : 'rotate(0)';
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.addEventListener('DOMContentLoaded', function() {
          const categoriesWithErrors = document.querySelectorAll('.category');
          categoriesWithErrors.forEach(category => {
            const failedStat = category.querySelector('.failed');
            if (failedStat && parseInt(failedStat.textContent) > 0) {
              toggleCategory(category);
            }
          });
        });
      </script>
    </body>
    </html>
    `

    return html
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
   */
  private getTimestamp(): string {
    const now = new Date()
    const year = now.getFullYear()
    const month = String(now.getMonth() + 1).padStart(2, '0')
    const day = String(now.getDate()).padStart(2, '0')
    const hours = String(now.getHours()).padStart(2, '0')
    const minutes = String(now.getMinutes()).padStart(2, '0')

    return `-${year}${month}${day}-${hours}${minutes}`
  }
}
