import fs from 'fs'
import path from 'path'
import crypto from 'crypto'
import { logger } from '@/utils/logger'

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–Ω—ç–ø—à–æ—Ç–∞
 */
export interface SnapshotResult {
  /** –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */
  success: boolean
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */
  message: string
  /** –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–Ω—ç–ø—à–æ—Ç–∞ */
  snapshotPath: string
  /** –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
  previousValue?: any
  /** –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
  newValue?: any
  /** –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ */
  diff?: any
}

/**
 * –û–ø—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–Ω—ç–ø—à–æ—Ç–æ–≤
 */
export interface SnapshotManagerOptions {
  /** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω—ç–ø—à–æ—Ç–æ–≤ */
  snapshotDir?: string
  /** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–Ω—ç–ø—à–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ */
  autoUpdate?: boolean
  /** –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
  verbose?: boolean
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–Ω—ç–ø—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
export class SnapshotManager {
  private snapshotDir: string
  private autoUpdate: boolean
  private verbose: boolean
  
  constructor(options: SnapshotManagerOptions = {}) {
    this.snapshotDir = options.snapshotDir || 'src/test-utils/snapshots'
    this.autoUpdate = options.autoUpdate || false
    this.verbose = options.verbose || false
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.snapshotDir)) {
      if (this.verbose) {
        logger.info(`üìÅ Creating snapshot directory: ${this.snapshotDir}`)
      }
      fs.mkdirSync(this.snapshotDir, { recursive: true })
    }
  }
  
  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–Ω—ç–ø—à–æ—Ç–æ–º
   * –ï—Å–ª–∏ —Å–Ω—ç–ø—à–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
   */
  async matchSnapshot(name: string, category: string, data: any): Promise<SnapshotResult> {
    const snapshotPath = this.getSnapshotPath(name, category)
    
    if (this.verbose) {
      logger.info(`üîÑ Matching snapshot for ${category}/${name}`)
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
    const stringData = this.serializeData(data)
    
    // –ï—Å–ª–∏ —Å–Ω—ç–ø—à–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∏–º
    if (fs.existsSync(snapshotPath)) {
      try {
        const previousData = fs.readFileSync(snapshotPath, 'utf-8')
        
        if (stringData === previousData) {
          return {
            success: true,
            message: 'Snapshot matches',
            snapshotPath
          }
        } else {
          // –°–Ω—ç–ø—à–æ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
          const diff = this.calculateDiff(previousData, stringData)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–Ω—ç–ø—à–æ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          if (this.autoUpdate) {
            await this.updateSnapshot(name, category, data)
            return {
              success: true,
              message: 'Snapshot automatically updated',
              snapshotPath,
              previousValue: this.parseData(previousData),
              newValue: data,
              diff
            }
          }
          
          return {
            success: false,
            message: 'Snapshot does not match',
            snapshotPath,
            previousValue: this.parseData(previousData),
            newValue: data,
            diff
          }
        }
      } catch (error) {
        logger.error(`‚ùå Error reading snapshot: ${snapshotPath}`, {
          error: error instanceof Error ? error.message : String(error)
        })
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–Ω—ç–ø—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è
        await this.updateSnapshot(name, category, data)
        
        return {
          success: false,
          message: `Error reading snapshot, new one created: ${error instanceof Error ? error.message : String(error)}`,
          snapshotPath
        }
      }
    } else {
      // –°–Ω—ç–ø—à–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      await this.updateSnapshot(name, category, data)
      
      return {
        success: true,
        message: 'New snapshot created',
        snapshotPath,
        newValue: data
      }
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–Ω—ç–ø—à–æ—Ç –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async updateSnapshot(name: string, category: string, data: any): Promise<string> {
    const snapshotPath = this.getSnapshotPath(name, category)
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const categoryDir = path.dirname(snapshotPath)
    if (!fs.existsSync(categoryDir)) {
      fs.mkdirSync(categoryDir, { recursive: true })
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    const stringData = this.serializeData(data)
    fs.writeFileSync(snapshotPath, stringData)
    
    if (this.verbose) {
      logger.info(`üíæ Snapshot updated: ${snapshotPath}`)
    }
    
    return snapshotPath
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–Ω—ç–ø—à–æ—Ç
   */
  async deleteSnapshot(name: string, category: string): Promise<boolean> {
    const snapshotPath = this.getSnapshotPath(name, category)
    
    if (fs.existsSync(snapshotPath)) {
      fs.unlinkSync(snapshotPath)
      
      if (this.verbose) {
        logger.info(`üóëÔ∏è Snapshot deleted: ${snapshotPath}`)
      }
      
      return true
    }
    
    return false
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–Ω—ç–ø—à–æ—Ç–∞
   */
  private getSnapshotPath(name: string, category: string): string {
    const sanitizedName = name.replace(/[^a-z0-9]/gi, '_').toLowerCase()
    const sanitizedCategory = category.replace(/[^a-z0-9]/gi, '_').toLowerCase()
    
    // –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–Ω—ç–ø—à–æ—Ç–æ–≤
    return path.join(this.snapshotDir, sanitizedCategory, `${sanitizedName}.snapshot`)
  }
  
  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  private serializeData(data: any): string {
    return JSON.stringify(data, null, 2)
  }
  
  /**
   * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private parseData(data: string): any {
    try {
      return JSON.parse(data)
    } catch {
      return data
    }
  }
  
  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –æ–±—ä–µ–∫—Ç–∞–º–∏
   */
  private calculateDiff(oldData: string, newData: string): any {
    try {
      const oldObj = this.parseData(oldData)
      const newObj = this.parseData(newData)
      
      // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è diff –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
      if (typeof oldObj === 'object' && typeof newObj === 'object') {
        const diff: Record<string, { old?: any; new?: any }> = {}
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        for (const key in oldObj) {
          if (!(key in newObj)) {
            diff[key] = { old: oldObj[key] }
          } else if (JSON.stringify(oldObj[key]) !== JSON.stringify(newObj[key])) {
            diff[key] = { old: oldObj[key], new: newObj[key] }
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        for (const key in newObj) {
          if (!(key in oldObj)) {
            diff[key] = { new: newObj[key] }
          } else if (JSON.stringify(oldObj[key]) !== JSON.stringify(newObj[key])) {
            diff[key] = { old: oldObj[key], new: newObj[key] }
          }
        }
        
        return diff
      }
      
      // –î–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      return { old: oldObj, new: newObj }
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏
      return { old: oldData, new: newData }
    }
  }
} 