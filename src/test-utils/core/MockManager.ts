import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –º–æ–∫–∞
 */
export interface Mock<T = any> {
  /** –ò–º—è –º–æ–∫–∞ */
  name: string
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∫–∞ */
  category: string
  /** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫–∞ */
  implementation: T
  /** –ë—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫ */
  called: boolean
  /** –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–æ–∫ */
  callCount: number
  /** –ê—Ä–≥—É–º–µ–Ω—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–æ–∫ */
  calls: any[][]
  /** –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –º–æ–∫–∞ */
  reset: () => void
  /** –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏ —ç—Ç–æ—Ç –º–æ–∫ */
  required?: boolean
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞
 */
export interface MockOptions<T = any> {
  /** –ò–º—è –º–æ–∫–∞ */
  name: string
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∫–∞ */
  category: string
  /** –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫–∞ */
  implementation: T
  /** –í—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–æ–∫ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω */
  required?: boolean
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class MockManager {
  private mocks: Map<string, Mock> = new Map()
  private callHistory: Array<{
    timestamp: number
    mockName: string
    args: any[]
  }> = []
  private verbose: boolean

  constructor(options: { verbose?: boolean } = {}) {
    this.verbose = options.verbose || false
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—é
   */
  createMockFn<T extends (...args: any[]) => any>(
    options: MockOptions<T>
  ): T {
    const mockName = `${options.category}.${options.name}`
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É
    const mockFn = (...args: any[]) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–∫
      const mock = this.mocks.get(mockName)
      if (!mock) {
        throw new Error(`Mock ${mockName} is not registered`)
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∑–æ–≤–æ–≤
      mock.called = true
      mock.callCount++
      mock.calls.push(args)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤
      this.callHistory.push({
        timestamp: Date.now(),
        mockName,
        args
      })
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω verbose —Ä–µ–∂–∏–º
      if (this.verbose) {
        logger.info({
          message: `üîÑ Mock called: ${mockName}`,
          callCount: mock.callCount,
          args
        })
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–∫–∞
      return mock.implementation(...args)
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
    const mock: Mock = {
      name: options.name,
      category: options.category,
      implementation: options.implementation,
      called: false,
      callCount: 0,
      calls: [],
      reset: () => {
        mock.called = false
        mock.callCount = 0
        mock.calls = []
      }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–∫
    this.mocks.set(mockName, mock)
    
    if (this.verbose) {
      logger.info({
        message: `üìù Mock registered: ${mockName}`,
        required: options.required
      })
    }
    
    return mockFn as T
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏
   */
  createMockObject<T extends object>(
    category: string,
    methods: Record<string, (...args: any[]) => any>,
    options: {
      baseObject?: Partial<T>
      requiredMethods?: string[]
    } = {}
  ): T {
    const mockObject: any = { ...(options.baseObject || {}) }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
    for (const [methodName, implementation] of Object.entries(methods)) {
      mockObject[methodName] = this.createMockFn({
        name: methodName,
        category,
        implementation,
        required: options.requiredMethods?.includes(methodName)
      })
    }
    
    return mockObject as T
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–∫
   */
  getMock(category: string, name: string): Mock | undefined {
    return this.mocks.get(`${category}.${name}`)
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –º–æ–∫
   */
  wasCalled(category: string, name: string): boolean {
    const mock = this.getMock(category, name)
    return mock ? mock.called : false
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –º–æ–∫–∞
   */
  getCallCount(category: string, name: string): number {
    const mock = this.getMock(category, name)
    return mock ? mock.callCount : 0
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–æ–≤ –º–æ–∫–∞
   */
  getCallArgs(category: string, name: string): any[][] {
    const mock = this.getMock(category, name)
    return mock ? mock.calls : []
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–∫–∏
   */
  resetAllMocks(): void {
    for (const mock of this.mocks.values()) {
      mock.reset()
    }
    this.callHistory = []
    
    if (this.verbose) {
      logger.info('üßπ All mocks reset')
    }
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  resetCategoryMocks(category: string): void {
    for (const [mockName, mock] of this.mocks.entries()) {
      if (mock.category === category) {
        mock.reset()
      }
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤
    this.callHistory = this.callHistory.filter(call => !call.mockName.startsWith(`${category}.`))
    
    if (this.verbose) {
      logger.info(`üßπ Mocks reset for category: ${category}`)
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–∫–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
   */
  verifyRequiredMocks(): void {
    const notCalled: string[] = []
    
    for (const [mockName, mock] of this.mocks.entries()) {
      if (mock.required && !mock.called) {
        notCalled.push(mockName)
      }
    }
    
    if (notCalled.length > 0) {
      throw new Error(`Required mocks were not called: ${notCalled.join(', ')}`)
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤ –º–æ–∫–æ–≤
   */
  getCallHistory(): typeof this.callHistory {
    return [...this.callHistory]
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤—ã–∑–æ–≤–∞—Ö –º–æ–∫–æ–≤
   */
  generateCallReport(): Record<string, { callCount: number, calls: any[][] }> {
    const report: Record<string, { callCount: number, calls: any[][] }> = {}
    
    for (const [mockName, mock] of this.mocks.entries()) {
      report[mockName] = {
        callCount: mock.callCount,
        calls: mock.calls
      }
    }
    
    return report
  }
} 