#!/usr/bin/env node
import { config } from 'dotenv'
import path from 'path'
import { TestRunner } from './TestRunner'
import { TestCategory, isInCategory } from './categories'
import { TestResult, RunnerOptions } from './types'
import { logger } from '@/utils/logger'
import { TestDiscovery } from './TestDiscovery'
import { TestReporter } from './TestReporter'
import fs from 'fs'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs(args: string[]): RunnerOptions {
  // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const result: RunnerOptions = {
    verbose: false,
    only: [],
    skip: [],
    category: TestCategory.All,
    parallel: 4,
    outputFormat: 'text',
  }

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  for (let i = 0; i < args.length; i++) {
    const arg = args[i]
    const nextArg = args[i + 1]

    if (arg === '--verbose' || arg === '-v') {
      result.verbose = true
    } else if (arg === '--help' || arg === '-h') {
      result.help = true
    } else if (arg.startsWith('--only=')) {
      result.only = [arg.split('=')[1]]
    } else if (arg.startsWith('--skip=')) {
      result.skip = [arg.split('=')[1]]
    } else if (arg.startsWith('--category=')) {
      result.category = arg.split('=')[1] as TestCategory
    } else if (arg.startsWith('--parallel=')) {
      result.parallel = parseInt(arg.split('=')[1], 10)
    } else if (arg === '--json') {
      result.outputFormat = 'json'
    } else if (arg === '--html') {
      result.outputFormat = 'html'
    } else if (arg.startsWith('--output=')) {
      result.outputFile = arg.split('=')[1]
    } else if (arg.startsWith('--tags=')) {
      result.tags = arg.split('=')[1].split(',')
    } else if (arg === '--discover') {
      result.discover = true
    } else if (arg.startsWith('--test-dir=')) {
      result.testDir = arg.split('=')[1]
    }
  }

  return result
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function printHelp() {
  const message = `
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node -r tsconfig-paths/register src/test-utils [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --verbose, -v       –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --category=XXX      –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, database, webhook, inngest)
  --only=XXX          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --skip=XXX          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --parallel=N        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)
  --json              –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
  --html              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç
  --output=FILE       –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  --tags=TAG1,TAG2    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
  --discover          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
  --test-dir=DIR      –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è --discover)

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
  all                 –í—Å–µ —Ç–µ—Å—Ç—ã
  database            –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  webhook             –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
  inngest             –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  payment             –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

–ü—Ä–∏–º–µ—Ä—ã:
  ts-node -r tsconfig-paths/register src/test-utils --category=database
  ts-node -r tsconfig-paths/register src/test-utils --category=inngest --verbose
  ts-node -r tsconfig-paths/register src/test-utils --discover --test-dir=src/test-utils/tests
  ts-node -r tsconfig-paths/register src/test-utils --json --output=test-results.json
  `

  console.log(message)
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function runTests(args = process.argv.slice(2)): Promise<number> {
  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const options = parseArgs(args)

  // –í—ã–≤–æ–¥–∏–º —Å–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
  if (options.help) {
    printHelp()
    return 0
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
  const reporter = new TestReporter(
    options.outputFormat,
    options.outputFile
  )

  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤
  const startTime = Date.now()
  reporter.setStartTime(startTime)

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TestRunner
  const runner = new TestRunner({
    verbose: options.verbose,
    only: options.only || [],
    skip: options.skip || [],
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TestRunner
  await runner.init()

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    const category = options.category as TestCategory

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    if (options.discover) {
      logger.info('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...')
      logger.info('üîç Automatic test discovery...')

      const testDir = options.testDir || path.resolve('src/test-utils/tests')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      if (!fs.existsSync(testDir)) {
        logger.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${testDir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        logger.error(`‚ùå Directory ${testDir} does not exist`)
        return 1
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
      const suites = await TestDiscovery.initializeTests(testDir)

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ —Ä–∞–Ω–Ω–µ—Ä
      for (const suite of suites) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (category === TestCategory.All || isInCategory(suite.category || '', category)) {
          logger.info(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: ${suite.name}`)
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º beforeAll —Ö—É–∫–∏
          if (suite.beforeAll) {
            await suite.beforeAll()
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ —Ä–∞–Ω–Ω–µ—Ä
          const testsToAdd = suite.tests.filter(test => {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
            if (options.tags && options.tags.length > 0) {
              return test.tags && test.tags.some(tag => options.tags!.includes(tag))
            }
            return true
          })

          if (testsToAdd.length > 0) {
            runner.addTests(testsToAdd.map(test => ({
              name: test.name,
              category: test.category || suite.category || 'unknown',
              description: test.description || '',
              run: test.test
            })))
          }
        }
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if (category === TestCategory.All || category === TestCategory.Inngest || 
        category === TestCategory.NeuroPhoto || category === TestCategory.NeuroPhotoV2) {
      logger.info('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π...')
      logger.info('ü§ñ Loading Inngest function tests...')
      
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const { runInngestTests } = await import('../tests/inngest')
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
        const results = await runInngestTests({ verbose: options.verbose })
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (Array.isArray(results)) {
          logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π: ${results.length}`)
          logger.info(`‚úÖ Added Inngest function tests: ${results.length}`)
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Å—Ç—ã –¥–ª—è TestRunner
          for (const result of results) {
            runner.addTests([{
              name: result.name || 'Inngest Function Test',
              category: result.category || 'inngest',
              description: result.message || 'Inngest function testing',
              run: async () => {
                if (!result.success) {
                  throw new Error(result.message || 'Inngest function test failed')
                }
                return result
              }
            }])
          }
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error)
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π: ${errorMessage}`)
        logger.error(`‚ùå Error running Inngest function tests: ${errorMessage}`)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–µ—Å—Ç
        runner.addTests([{
          name: 'Inngest Function Tests',
          category: 'inngest',
          description: 'Running Inngest function tests',
          run: async () => {
            throw new Error(`Failed to run Inngest function tests: ${errorMessage}`)
          }
        }])
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if (category === TestCategory.All || category === TestCategory.Payment) {
      logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...')
      logger.info('üí∞ Loading payment function tests...')
      
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const { runPaymentTests } = await import('../tests/payment')
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const result = await runPaymentTests({ verbose: options.verbose })
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (result && result.results && Array.isArray(result.results)) {
          const totalTests = result.results.reduce((total: number, group: any) => {
            return total + (Array.isArray(group.results) ? group.results.length : 0)
          }, 0)
          
          logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${totalTests}`)
          logger.info(`‚úÖ Added payment function tests: ${totalTests}`)
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Å—Ç—ã –¥–ª—è TestRunner
          for (const group of result.results) {
            if (Array.isArray(group.results)) {
              // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
              for (const test of group.results) {
                runner.addTests([{
                  name: test.name || `${group.name} Test`,
                  category: 'payment',
                  description: test.description || `Testing ${group.name}`,
                  run: async () => {
                    if (!test.success) {
                      throw new Error(test.error || `${group.name} test failed`)
                    }
                    return test
                  }
                }])
              }
            } else {
              // –î–ª—è –≥—Ä—É–ø–ø—ã –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ç–µ—Å—Ç
              runner.addTests([{
                name: group.name || 'Payment Test',
                category: 'payment',
                description: `Testing ${group.name}`,
                run: async () => {
                  if (!group.success) {
                    throw new Error(group.error || 'Payment test failed')
                  }
                  return group
                }
              }])
            }
          }
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error)
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${errorMessage}`)
        logger.error(`‚ùå Error running payment function tests: ${errorMessage}`)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–µ—Å—Ç
        runner.addTests([{
          name: 'Payment Function Tests',
          category: 'payment',
          description: 'Running payment function tests',
          run: async () => {
            throw new Error(`Failed to run payment function tests: ${errorMessage}`)
          }
        }])
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    if (runner.getTestCount() === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!')
      logger.warn('‚ö†Ô∏è No tests to run!')
      return 0
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const results = options.parallel && options.parallel > 1
      ? await runner.runTestsInParallel(options.parallel)
      : await runner.runTests()
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    const endTime = Date.now()
    reporter.setEndTime(endTime)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–ø–æ—Ä—Ç–µ—Ä
    reporter.addResults(results)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if (options.outputFormat !== 'text' || options.outputFile) {
      const report = await reporter.generateReport()
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
      if (options.outputFile) {
        await reporter.saveReport(report)
      } else {
        // –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(report)
      }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.length - successCount
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    return failCount > 0 ? 1 : 0
  } finally {
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await runner.cleanup()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests().then(exitCode => {
    process.exit(exitCode)
  }).catch(error => {
    logger.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
    logger.error('üî• Critical error running tests:', error)
    process.exit(1)
  })
} 