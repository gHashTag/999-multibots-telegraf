#!/usr/bin/env node
import { config } from 'dotenv'
import path from 'path'
import { TestRunner } from './TestRunner'
import { TestCategory, isInCategory } from './categories'
import { runTranslationTests } from '../tests/translations'
import { TestResult } from './types'
import { logger } from '@/utils/logger'
import { TestDiscovery } from './TestDiscovery'
import { TestReporter } from './TestReporter'
import { runPaymentProcessorTests } from '../tests/payment/paymentProcessorTest'
import { runSystemTests } from '../tests/system'
import { runAgentRouterTests } from '../tests/system/agentRouterTest'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –†–∞–∑–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
 */
function parseCategory(category?: string): TestCategory {
  if (!category) return TestCategory.All

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ enum
  if (Object.values(TestCategory).includes(category as TestCategory)) {
    return category as TestCategory
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
  switch (category.toLowerCase()) {
    case 'all':
      return TestCategory.All
    case 'translations':
      return TestCategory.Translations
    case 'database':
      return TestCategory.Database
    case 'webhook':
      return TestCategory.Webhook
    case 'inngest':
      return TestCategory.Inngest
    case 'payment':
      return TestCategory.Payment
    case 'payment-processor':
      return TestCategory.PaymentProcessor
    case 'api':
      return TestCategory.Api
    case 'system':
      return TestCategory.System
    case 'agent-router':
      return TestCategory.AgentRouter
    default:
      return TestCategory.All
  }
}

/**
 * –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs(args: string[]) {
  // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const result = {
    verbose: false,
    only: [] as string[],
    skip: [] as string[],
    category: TestCategory.All,
    parallel: 4,
    json: false,
    html: false,
    outputFile: undefined as string | undefined,
    discover: false,
    testDir: undefined as string | undefined,
    timeout: 30000,
    tags: [] as string[],
    help: false,
  }

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  for (let i = 0; i < args.length; i++) {
    const arg = args[i]

    if (arg === '--verbose' || arg === '-v') {
      result.verbose = true
    } else if (arg === '--help' || arg === '-h') {
      result.help = true
    } else if (arg.startsWith('--only=')) {
      result.only = [arg.split('=')[1]]
    } else if (arg.startsWith('--skip=')) {
      result.skip = [arg.split('=')[1]]
    } else if (arg.startsWith('--category=')) {
      result.category = parseCategory(arg.split('=')[1])
    } else if (arg.startsWith('--parallel=')) {
      result.parallel = parseInt(arg.split('=')[1], 10)
    } else if (arg === '--json') {
      result.json = true
    } else if (arg === '--html') {
      result.html = true
    } else if (arg.startsWith('--output=')) {
      result.outputFile = arg.split('=')[1]
    } else if (arg.startsWith('--tags=')) {
      result.tags = arg.split('=')[1].split(',')
    } else if (arg === '--discover') {
      result.discover = true
    } else if (arg.startsWith('--test-dir=')) {
      result.testDir = arg.split('=')[1]
    }
  }

  return result
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function printHelp() {
  const message = `
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node -r tsconfig-paths/register src/test-utils [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --verbose, -v       –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --category=XXX      –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, translations, database, webhook)
  --only=XXX          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --skip=XXX          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --parallel=N        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)
  --json              –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
  --html              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç
  --output=FILE       –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  --tags=TAG1,TAG2    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
  --discover          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
  --test-dir=DIR      –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è --discover)

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
  all                 –í—Å–µ —Ç–µ—Å—Ç—ã
  translations        –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  database            –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  webhook             –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
  inngest             –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  payment             –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  payment-processor   –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
  api                 –¢–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  system              –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã (–∞–≥–µ–Ω—Ç, —Ä–æ—É—Ç–µ—Ä, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã)

–ü—Ä–∏–º–µ—Ä—ã:
  ts-node -r tsconfig-paths/register src/test-utils --category=translations
  ts-node -r tsconfig-paths/register src/test-utils --category=database --verbose
  ts-node -r tsconfig-paths/register src/test-utils --discover --test-dir=src/test-utils/tests
  ts-node -r tsconfig-paths/register src/test-utils --json --output=test-results.json
  ts-node -r tsconfig-paths/register src/test-utils --category=payment-processor
  ts-node -r tsconfig-paths/register src/test-utils --category=system
  `

  console.log(message)
}

/**
 * –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ src/test-utils/tests/payment/paymentProcessorTest.ts
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function testPaymentProcessorIncome(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π Telegram ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const telegramId = Math.floor(Math.random() * 10000000000).toString()
  const amount = 100
  const stars = 100

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    const result = await runPaymentProcessorTests(telegramId, amount, stars)

    return {
      success: result.success,
      name: '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      message: result.message || '–£—Å–ø–µ—à–Ω–æ',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error)
    return {
      success: false,
      name: '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      error: error.stack,
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ src/test-utils/tests/payment/paymentProcessorTest.ts
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function testPaymentProcessorExpense(): Promise<TestResult> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π Telegram ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const telegramId = Math.floor(Math.random() * 10000000000).toString()
  const amount = 50 // –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è
  const stars = 50 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å—ã–≤–∞–µ–º—ã—Ö –∑–≤–µ–∑–¥

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    const result = await runPaymentProcessorTests(
      telegramId,
      amount,
      stars,
      'money_expense'
    )

    return {
      success: result.success,
      name: '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
      message: result.message || '–£—Å–ø–µ—à–Ω–æ',
    }
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:', error)
    return {
      success: false,
      name: '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
      message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      error: error.stack,
    }
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */
async function registerSystemTests(runner: TestRunner) {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤')
  logger.info('üöÄ Running system tests')

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  try {
    const results = await runSystemTests()

    if (Array.isArray(results) && results.length > 0) {
      runner.addTests([
        {
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
          category: TestCategory.System,
          description: '–û–±—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞',
          run: async () => {
            const failed = results.filter(r => !r.success)

            if (failed.length > 0) {
              const errors = failed
                .map(f => `${f.name}: ${f.message}`)
                .join('\n')
              throw new Error(`–û—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö:\n${errors}`)
            }

            return {
              name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
              category: TestCategory.System,
              success: true,
              message: `‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã (${results.length} —Ç–µ—Å—Ç–æ–≤)`,
            }
          },
        },
      ])

      logger.info(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${results.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤`)
      logger.info(`‚úÖ Registered ${results.length} system tests`)
    } else {
      logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
      logger.warn('‚ö†Ô∏è No system tests found to run')
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
    runner.addTests([
      {
        name: '–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
        category: TestCategory.AgentRouter,
        description: '–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
        run: async () => {
          console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...')
          const results = await runAgentRouterTests()

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const failedTests = results.filter(test => !test.success)

          if (failedTests.length > 0) {
            logger.error(
              '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤:'
            )
            failedTests.forEach(test => {
              logger.error(`  ‚ùå ${test.name}: ${test.message}`)
            })
            return {
              success: false,
              message: `–û—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤: ${failedTests.length}`,
              name: '–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
            }
          }

          return {
            success: true,
            message: `–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤: ${results.filter(t => t.success).length}`,
            name: '–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
          }
        },
      },
    ])
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:', error)
    logger.error('‚ùå Error registering system tests:', error)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –ø—Ä–æ–±–ª–µ–º—É
    runner.addTests([
      {
        name: '–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö',
        category: TestCategory.System,
        description: '–¢–µ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö',
        run: async () => ({
          success: false,
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${error instanceof Error ? error.message : String(error)}`,
        }),
      },
    ])
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function runTests(args = process.argv.slice(2)): Promise<number> {
  try {
    const options = parseArgs(args)
    const reporter = new TestReporter({
      verbose: options.verbose,
      json: options.json,
      html: options.html,
      output: options.outputFile,
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    logger.info('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤', {
      options,
      description: 'Initializing tests',
    })

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TestRunner
    const runner = new TestRunner({
      verbose: options.verbose,
      parallel: options.parallel,
      reporter,
      timeout: options.timeout,
      tags: options.tags,
      only: options.only,
      skip: options.skip,
    })

    await runner.init()

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (options.discover) {
      logger.info('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...')

      const discovery = new TestDiscovery()
      discovery.testDir = options.testDir || 'src/test-utils/tests'
      discovery.verbose = options.verbose || false

      const discoveredTests = await discovery.discover()
      logger.info(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${discoveredTests.length} —Ç–µ—Å—Ç–æ–≤`, {
        description: 'Discovered tests',
        count: discoveredTests.length,
      })

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const filteredTests = discoveredTests.filter(
        test =>
          options.category === TestCategory.All ||
          test.category === options.category
      )

      logger.info(
        `üìù –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredTests.length} —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${options.category}`,
        {
          description: 'Filtered tests',
          count: filteredTests.length,
          category: options.category,
        }
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
      runner.addTests(filteredTests)
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
      const category = parseCategory(options.category)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
      const shouldRunSystemTests = isInCategory(
        TestCategory.System,
        category as TestCategory
      )
      if (shouldRunSystemTests) {
        await registerSystemTests(runner)
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...')
    const results = await runner.runAllTests()

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const { passed, failed, total } = results
    logger.info(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ - ${passed}, –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ - ${failed}, –≤—Å–µ–≥–æ - ${total}`,
      {
        description: 'Test results',
        passed,
        failed,
        total,
      }
    )

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await runner.cleanup()

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    return failed === 0 ? 0 : 1
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
    return 1
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  runTests()
    .then(exitCode => {
      process.exit(exitCode)
    })
    .catch(error => {
      logger.error('üî• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}
