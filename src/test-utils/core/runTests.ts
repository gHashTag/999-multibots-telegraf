#!/usr/bin/env node
import { config } from 'dotenv'
import path from 'path'
import { TestRunner } from './TestRunner'
import { TestCategory, isInCategory } from './categories'
import { logger } from '@/utils/logger'
import { runSystemTests } from '../tests/system'
import { runAgentRouterTests } from '../tests/system/agentRouterTest'
import { TestResult } from '../types'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –†–∞–∑–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
 */
function parseCategory(category?: string): TestCategory {
  if (!category) return TestCategory.All

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ enum
  if (Object.values(TestCategory).includes(category as TestCategory)) {
    return category as TestCategory
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
  switch (category.toLowerCase()) {
    case 'all':
      return TestCategory.All
    case 'translations':
      return TestCategory.Translations
    case 'database':
      return TestCategory.Database
    case 'webhook':
      return TestCategory.Webhook
    case 'inngest':
      return TestCategory.Inngest
    case 'payment':
      return TestCategory.Payment
    case 'payment-processor':
      return TestCategory.PaymentProcessor
    case 'api':
      return TestCategory.Api
    case 'system':
      return TestCategory.System
    case 'agent-router':
      return TestCategory.AgentRouter
    default:
      return TestCategory.All
  }
}

/**
 * –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs(args: string[]) {
  // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const result = {
    verbose: false,
    only: [] as string[],
    skip: [] as string[],
    category: TestCategory.All,
    parallel: 4,
    json: false,
    html: false,
    outputFile: undefined as string | undefined,
    discover: false,
    testDir: undefined as string | undefined,
    timeout: 30000,
    tags: [] as string[],
    help: false,
  }

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  for (let i = 0; i < args.length; i++) {
    const arg = args[i]

    if (arg === '--verbose' || arg === '-v') {
      result.verbose = true
    } else if (arg === '--help' || arg === '-h') {
      result.help = true
    } else if (arg.startsWith('--only=')) {
      result.only = [arg.split('=')[1]]
    } else if (arg.startsWith('--skip=')) {
      result.skip = [arg.split('=')[1]]
    } else if (arg.startsWith('--category=')) {
      result.category = parseCategory(arg.split('=')[1])
    } else if (arg.startsWith('--parallel=')) {
      result.parallel = parseInt(arg.split('=')[1], 10)
    } else if (arg === '--json') {
      result.json = true
    } else if (arg === '--html') {
      result.html = true
    } else if (arg.startsWith('--output=')) {
      result.outputFile = arg.split('=')[1]
    } else if (arg.startsWith('--tags=')) {
      result.tags = arg.split('=')[1].split(',')
    } else if (arg === '--discover') {
      result.discover = true
    } else if (arg.startsWith('--test-dir=')) {
      result.testDir = arg.split('=')[1]
    }
  }

  return result
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function runTests(args: string[]) {
  const testRunner = new TestRunner({
    filter: args,
    parallel: false,
    timeout: 30000,
  })

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
  testRunner.addTest({
    name: '–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
    category: TestCategory.AgentRouter,
    run: async () => {
      const results = await runSystemTests()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
      const allSuccess = results.every(result => result.success)

      if (allSuccess) {
        return {
          success: true,
          message: '–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã',
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
        }
      } else {
        const failedTests = results.filter(result => !result.success)
        const failMessages = failedTests
          .map(test => `${test.name}: ${test.message}`)
          .join(', ')

        return {
          success: false,
          message: `–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: ${failMessages}`,
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã',
        }
      }
    },
  })

  await testRunner.run()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  runTests(process.argv.slice(2))
    .then(exitCode => {
      process.exit(exitCode)
    })
    .catch(error => {
      logger.error('üî• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}
