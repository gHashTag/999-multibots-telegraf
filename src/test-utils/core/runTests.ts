#!/usr/bin/env node
import { config } from 'dotenv'
import path from 'path'
import { TestRunner } from './TestRunner'
import { TestResult } from '../types'
import { logger } from '@/utils/logger'
import { runSystemTests } from '../tests/system'
import { runAgentRouterTests } from '../tests/system/agentRouterTest'
import { TestCategory } from './categories'
import fs from 'fs'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

// –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è runAgentTests
let runAgentTests: () => Promise<TestResult[]>
const agentTestPath = path.resolve(__dirname, '../tests/agent/index.ts')

try {
  if (fs.existsSync(agentTestPath)) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const agentTestModule = require('../tests/agent/index')
    runAgentTests = agentTestModule.runAgentTests
  }
} catch (error) {
  logger.warn(
    `üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
  )
}

// –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è runTasksTests
let runTasksTests: () => Promise<TestResult[]>
const tasksTestPath = path.resolve(__dirname, '../tests/tasks/index.ts')

try {
  if (fs.existsSync(tasksTestPath)) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const tasksTestModule = require('../tests/tasks/index')
    runTasksTests = tasksTestModule.runTasksTests
  }
} catch (error) {
  logger.warn(
    `üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã –∑–∞–¥–∞—á: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
  )
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseCategories(args: string[]): string[] {
  const categories: string[] = []

  for (const arg of args) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    const categoryMatch = /^--category=(.+)$/.exec(arg)
    if (categoryMatch && categoryMatch[1]) {
      categories.push(...categoryMatch[1].split(','))
    }
  }

  return categories
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseOptions(args: string[]): {
  verbose: boolean
  output?: string
  testDir?: string
  only?: string[]
  skip?: string[]
} {
  const options: {
    verbose: boolean
    output?: string
    testDir?: string
    only?: string[]
    skip?: string[]
  } = {
    verbose: false,
  }

  for (const arg of args) {
    if (arg === '--verbose' || arg === '-v') {
      options.verbose = true
    } else if (arg.startsWith('--output=')) {
      options.output = arg.substring('--output='.length)
    } else if (arg.startsWith('--test-dir=')) {
      options.testDir = arg.substring('--test-dir='.length)
    } else if (arg.startsWith('--only=')) {
      options.only = arg.substring('--only='.length).split(',')
    } else if (arg.startsWith('--skip=')) {
      options.skip = arg.substring('--skip='.length).split(',')
    }
  }

  return options
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
export async function runTests(
  args: string[] = process.argv.slice(2)
): Promise<void> {
  const categories = parseCategories(args)
  const options = parseOptions(args)

  logger.info(
    `üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${categories.join(', ') || '–≤—Å–µ'}`
  )
  logger.info(`üìã –û–ø—Ü–∏–∏: ${JSON.stringify(options)}`)

  const testRunner = new TestRunner({
    verbose: options.verbose,
    only: options.only,
    skip: options.skip,
  })

  await testRunner.init()

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const registeredTests: string[] = []

  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è System
  if (categories.length === 0 || categories.includes(TestCategory.System)) {
    logger.info(` –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${TestCategory.System}"`)

    const systemTests = await runSystemTests()
    testRunner.addTests(
      systemTests.map(result => ({
        name: result.name,
        category: TestCategory.System,
        description: result.message || '–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç',
        run: async (): Promise<void> => {
                    if (!result.success) {
            throw new Error(result.message || '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          }
        },
      }))
    )

    registeredTests.push(TestCategory.System)
  }

  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è AgentRouter
  if (
    categories.length === 0 ||
    categories.includes(TestCategory.AgentRouter)
  ) {
    logger.info(`üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${TestCategory.AgentRouter}"`)

    const agentRouterTests = await runAgentRouterTests()
    testRunner.addTests(
      agentRouterTests.map(result => ({
        name: result.name,
        category: TestCategory.AgentRouter,
        description: result.message || '–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤',
        run: async (): Promise<void> => {
                    if (!result.success) {
            throw new Error(result.message || '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          }
        },
      }))
    )

    registeredTests.push(TestCategory.AgentRouter)
  }

  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è Agents –∏ —Ñ—É–Ω–∫—Ü–∏—è runAgentTests –¥–æ—Å—Ç—É–ø–Ω–∞
  if (
    (categories.length === 0 || categories.includes(TestCategory.Agents)) &&
    runAgentTests
  ) {
    logger.info(`üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${TestCategory.Agents}"`)

    const agentTests = await runAgentTests()
    testRunner.addTests(
      agentTests.map(result => ({
        name: result.name,
        category: TestCategory.Agents,
        description: result.message || '–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤',
        run: async (): Promise<void> => {
          if (!result.success) {
            throw new Error(result.message || '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          }
        },
      }))
    )

    registeredTests.push(TestCategory.Agents)
  }

  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è Tasks –∏ —Ñ—É–Ω–∫—Ü–∏—è runTasksTests –¥–æ—Å—Ç—É–ø–Ω–∞
  if (
    (categories.length === 0 || categories.includes(TestCategory.Tasks)) &&
    runTasksTests
  ) {
    logger.info(`üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${TestCategory.Tasks}"`)

    const tasksTests = await runTasksTests()
    testRunner.addTests(
      tasksTests.map(result => ({
        name: result.name,
        category: TestCategory.Tasks,
        description: result.message || '–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∑–∞–¥–∞—á',
        run: async (): Promise<void> => {
                    if (!result.success) {
            throw new Error(result.message || '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω')
          }
        },
      }))
    )

    registeredTests.push(TestCategory.Tasks)
  }

  if (registeredTests.length === 0) {
    logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞')
    return
  }

  logger.info(`üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testRunner.getTestCount()}`)
  logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${registeredTests.join(', ')}`)

  const results = await testRunner.runTestsInParallel()

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  const successfulTests = results.filter(result => result.success).length
  const failedTests = results.length - successfulTests

  if (failedTests > 0) {
    logger.error(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${failedTests}/${results.length}`)
    process.exit(1)
      } else {
    logger.info(
      `‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã: ${successfulTests}/${results.length}`
    )
    process.exit(0)
  }

  await testRunner.cleanup()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  runTests()
    .then(() => {
      process.exit(0)
    })
    .catch(error => {
      logger.error('üî• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}
