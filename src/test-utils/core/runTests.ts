#!/usr/bin/env node
import { config } from 'dotenv'
import path from 'path'
import { TestRunner } from './TestRunner'
import { TestCategory, isInCategory } from './categories'
import { runTranslationTests } from '../tests/translations'
import { TestResult, RunnerOptions, TestCase } from './types'
import { logger } from '@/utils/logger'
import { TestDiscovery } from './TestDiscovery'
import { TestReporter } from './TestReporter'
import fs from 'fs'
import { InngestFunctionTester } from '../testers/InngestFunctionTester'
import { runPaymentProcessorTests } from '../tests/payment/paymentProcessorTest'
import { runRobokassaFormTests } from '../tests/payment/robokassaFormValidator.test'
import { runCheckFullAccessTests } from '../tests/handlers/checkFullAccess.test'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve('.env.test') })

/**
 * –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs(args: string[]): RunnerOptions {
  // –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const result: RunnerOptions = {
    verbose: false,
    only: [],
    skip: [],
    category: TestCategory.All,
    parallel: 4,
    outputFormat: 'text',
  }

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  for (let i = 0; i < args.length; i++) {
    const arg = args[i]

    if (arg === '--verbose' || arg === '-v') {
      result.verbose = true
    } else if (arg === '--help' || arg === '-h') {
      result.help = true
    } else if (arg.startsWith('--only=')) {
      result.only = [arg.split('=')[1]]
    } else if (arg.startsWith('--skip=')) {
      result.skip = [arg.split('=')[1]]
    } else if (arg.startsWith('--category=')) {
      result.category = arg.split('=')[1] as TestCategory
    } else if (arg.startsWith('--parallel=')) {
      result.parallel = parseInt(arg.split('=')[1], 10)
    } else if (arg === '--json') {
      result.outputFormat = 'json'
    } else if (arg === '--html') {
      result.outputFormat = 'html'
    } else if (arg.startsWith('--output=')) {
      result.outputFile = arg.split('=')[1]
    } else if (arg.startsWith('--tags=')) {
      result.tags = arg.split('=')[1].split(',')
    } else if (arg === '--discover') {
      result.discover = true
    } else if (arg.startsWith('--test-dir=')) {
      result.testDir = arg.split('=')[1]
    }
  }

  return result
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function printHelp() {
  const message = `
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node -r tsconfig-paths/register src/test-utils [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --verbose, -v       –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --category=XXX      –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, translations, database, webhook)
  --only=XXX          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --skip=XXX          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  --parallel=N        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)
  --json              –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
  --html              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç—á–µ—Ç
  --output=FILE       –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  --tags=TAG1,TAG2    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
  --discover          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
  --test-dir=DIR      –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è --discover)

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
  all                 –í—Å–µ —Ç–µ—Å—Ç—ã
  translations        –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  database            –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  webhook             –¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤
  inngest             –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
  payment             –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  payment-processor   –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π

–ü—Ä–∏–º–µ—Ä—ã:
  ts-node -r tsconfig-paths/register src/test-utils --category=translations
  ts-node -r tsconfig-paths/register src/test-utils --category=database --verbose
  ts-node -r tsconfig-paths/register src/test-utils --discover --test-dir=src/test-utils/tests
  ts-node -r tsconfig-paths/register src/test-utils --json --output=test-results.json
  ts-node -r tsconfig-paths/register src/test-utils --category=payment-processor
  `

  console.log(message)
}

/**
 * –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ src/test-utils/tests/payment/paymentProcessorTest.ts
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function testPaymentProcessorIncome(): Promise<TestResult> {
  logger.info('üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)')
  logger.info('üß™ Testing payment processor function (income)')

  const tester = new InngestFunctionTester({ verbose: true })

  try {
    const result = await tester.testPaymentProcessorIncome()

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)',
      category: TestCategory.PaymentProcessor,
      success: result.success,
      message: result.message || '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      details: result.data,
      error: result.error ? String(result.error) : undefined,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)', {
      description: 'Error during payment processor test (income)',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)',
      category: TestCategory.PaymentProcessor,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ src/test-utils/tests/payment/paymentProcessorTest.ts
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function testPaymentProcessorExpense(): Promise<TestResult> {
  logger.info('üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)')
  logger.info('üß™ Testing payment processor function (expense)')

  const tester = new InngestFunctionTester({ verbose: true })

  try {
    const result = await tester.testPaymentProcessorExpense()

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)',
      category: TestCategory.PaymentProcessor,
      success: result.success,
      message: result.message || '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      details: result.data,
      error: result.error ? String(result.error) : undefined,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)', {
      description: 'Error during payment processor test (expense)',
      error: error instanceof Error ? error.message : String(error),
    })

    return {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)',
      category: TestCategory.PaymentProcessor,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function runTests(args = process.argv.slice(2)): Promise<number> {
  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const options = parseArgs(args)

  // –í—ã–≤–æ–¥–∏–º —Å–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
  if (options.help) {
    printHelp()
    return 0
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä
  const reporter = new TestReporter(options.outputFormat, options.outputFile)

  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤
  const startTime = Date.now()
  reporter.setStartTime(startTime)

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TestRunner
  const runner = new TestRunner({
    verbose: options.verbose,
    only: options.only || [],
    skip: options.skip || [],
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TestRunner
  await runner.init()

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Starting tests',
      category: options.category,
      verbose: options.verbose,
    })

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    if (options.discover) {
      logger.info('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤', {
        description: 'Auto-discovering tests',
        testDir: options.testDir ?? 'src',
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º initializeTests –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤
      const testSuites = await TestDiscovery.initializeTests(
        options.testDir ?? 'src'
      )
      logger.info(
        `üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${testSuites.length} –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å ${testSuites.reduce((sum, suite) => sum + suite.tests.length, 0)} —Ç–µ—Å—Ç–∞–º–∏`,
        {
          description: 'Discovered tests',
          count: testSuites.length,
        }
      )

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TestCase –≤ —Ñ–æ—Ä–º–∞—Ç Test –¥–ª—è TestRunner
      const discoveredTests = testSuites.flatMap(suite =>
        suite.tests.map(testCase => ({
          name: `${suite.name} - ${testCase.name}`,
          category: testCase.category || suite.category || TestCategory.All,
          description: testCase.description || suite.description || '',
          run: testCase.test,
        }))
      )

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const filteredTests = discoveredTests.filter(
        test =>
          options.category === TestCategory.All ||
          isInCategory(test.category, options.category ?? TestCategory.All)
      )

      runner.addTests(filteredTests)
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      logger.info('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', {
        description: 'Preparing tests from category',
        category: options.category,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const shouldRunTranslationTests = isInCategory(
        TestCategory.Translations,
        options.category ?? TestCategory.All
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const shouldRunPaymentProcessorTests = isInCategory(
        TestCategory.PaymentProcessor,
        options.category ?? TestCategory.All
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const shouldRunPaymentTests = isInCategory(
        TestCategory.Payment,
        options.category ?? TestCategory.All
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL Robokassa
      const shouldRunRobokassaFormTests = isInCategory(
        TestCategory.Payment,
        options.category ?? TestCategory.All
      ) || options.category === 'robokassa'

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Supabase
      const shouldRunDatabaseTests = isInCategory(TestCategory.Database, options.category ?? TestCategory.All)

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Api (–¥–ª—è checkFullAccess)
      const shouldRunApiTests = isInCategory(TestCategory.Api, options.category ?? TestCategory.All)

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      if (shouldRunTranslationTests) {
        logger.info('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
        logger.info('üåê Loading translation tests...')

        try {
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
          const translationResults = runTranslationTests()

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (Array.isArray(translationResults)) {
            logger.info(
              `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationResults.length}`
            )
            logger.info(
              `‚úÖ Added translation tests: ${translationResults.length}`
            )

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –≤ TestRunner
            for (const result of translationResults) {
              runner.addTests([
                {
                  name: result.name || 'Translation Test',
                  category: TestCategory.Translations,
                  description: result.message || 'Translation validation',
                  run: async () => {
                    if (!result.success) {
                      throw new Error(result.message || 'Translation test failed')
                    }
                    return result
                  },
                },
              ])
            }
          }
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : String(error)
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${errorMessage}`)
          logger.error(`‚ùå Error running translation tests: ${errorMessage}`)

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–µ—Å—Ç
          runner.addTests([
            {
              name: 'Translation Tests',
              category: TestCategory.Translations,
              description: 'Running translation tests',
              run: async () => {
                throw new Error(
                  `Failed to run translation tests: ${errorMessage}`
                )
              },
            },
          ])
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      if (shouldRunPaymentProcessorTests) {
        logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...')
        logger.info('üí∞ Loading payment processor tests...')

        try {
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
          const paymentResults = await runPaymentProcessorTests()

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
          for (const result of paymentResults) {
            if (!result.name) {
              logger.warn('–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∏–º–µ–Ω–∏', result)
              continue
            }
            runner.addTests([
              {
                name: result.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥—Ç–µ—Å—Ç–∞
                category: TestCategory.PaymentProcessor,
                description: result.message || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                run: async () => {
                  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç.–∫. —Ç–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
                  if (!result.success) {
                    throw new Error(result.message || '–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω')
                  }
                  return {
                    success: result.success,
                    message: result.message || '',
                    details: result.details, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                  }
                },
              },
            ])
          }

          logger.info(
            `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ${paymentResults.length}`
          )
          logger.info(
            `‚úÖ Added payment processor tests: ${paymentResults.length}`
          )
        } catch (error) {
          logger.error(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
            error
          )
          logger.error('‚ùå Error loading payment processor tests', error)
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      if (
        options.category === TestCategory.All ||
        options.category === TestCategory.Inngest ||
        options.category === TestCategory.NeuroPhoto ||
        options.category === TestCategory.NeuroPhotoV2
      ) {
        logger.info('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π...')
        logger.info('ü§ñ Loading Inngest function tests...')

        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          const { runInngestTests } = await import('../tests/inngest')

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
          const results = await runInngestTests({ verbose: options.verbose })

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (Array.isArray(results)) {
            logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π: ${results.length}`)
            logger.info(`‚úÖ Added Inngest function tests: ${results.length}`)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Å—Ç—ã –¥–ª—è TestRunner
            for (const result of results) {
              runner.addTests([
                {
                  name: result.name || 'Inngest Function Test',
                  category: result.category || 'inngest',
                  description: result.message || 'Inngest function testing',
                  run: async () => {
                    if (!result.success) {
                      throw new Error(
                        result.message || 'Inngest function test failed'
                      )
                    }
                    return result
                  },
                },
              ])
            }
          }
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : String(error)
          logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π: ${errorMessage}`
          )
          logger.error(`‚ùå Error running Inngest function tests: ${errorMessage}`)

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–µ—Å—Ç
          runner.addTests([
            {
              name: 'Inngest Function Tests',
              category: 'inngest',
              description: 'Running Inngest function tests',
              run: async () => {
                throw new Error(
                  `Failed to run Inngest function tests: ${errorMessage}`
                )
              },
            },
          ])
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      if (shouldRunPaymentTests) {
        logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...')
        logger.info('üí∞ Loading payment function tests...')

        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          const { runPaymentTests } = await import('../tests/payment')

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
          const paymentRunResult = await runPaymentTests({ verbose: options.verbose })

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (paymentRunResult && Array.isArray(paymentRunResult.results)) {
            let totalTests = 0
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º —Ç–µ—Å—Ç–æ–≤ (–º–∞—Å—Å–∏–≤–∞–º TestResult[])
            for (const testGroup of paymentRunResult.results) {
              if (Array.isArray(testGroup)) {
                totalTests += testGroup.length
                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
                for (const testResult of testGroup) {
                  if (testResult && testResult.name) {
                    runner.addTests([
                      {
                        name: testResult.name,
                        category: TestCategory.Payment,
                        description: testResult.message || '',
                        run: async () => {
                          if (!testResult.success) {
                            // Safely determine the error message
                            let errorMessage = testResult.message || 'Payment test failed';
                            if ('error' in testResult && testResult.error) {
                              const errorObj = testResult.error;
                              errorMessage = errorObj instanceof Error ? errorObj.message : String(errorObj);
                            }
                            throw new Error(errorMessage);
                          }
                          return testResult
                        },
                      },
                    ])
                  }
                }
              }
            }

            logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${totalTests}`)
            logger.info(`‚úÖ Added payment function tests: ${totalTests}`)
          }
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : String(error)
          logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${errorMessage}`
          )
          logger.error(`‚ùå Error running payment function tests: ${errorMessage}`)

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–µ—Å—Ç
          runner.addTests([
            {
              name: 'Payment Function Tests',
              category: 'payment',
              description: 'Running payment function tests',
              run: async () => {
                throw new Error(
                  `Failed to run payment function tests: ${errorMessage}`
                )
              },
            },
          ])
        }
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ URL —Ñ–æ—Ä–º—ã Robokassa
      if (shouldRunRobokassaFormTests) {
        logger.info('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL —Ñ–æ—Ä–º—ã Robokassa', {
          description: 'Running Robokassa form URL validation tests',
        })

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Robokassa
        const robokassaRunResult = await runRobokassaFormTests()

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Å—Ç—ã –¥–ª—è TestRunner
        if (robokassaRunResult && Array.isArray(robokassaRunResult.results)) {
          for (const testResult of robokassaRunResult.results) {
            if (testResult && testResult.name) {
              runner.addTests([
                {
                  name: testResult.name || '–¢–µ—Å—Ç URL Robokassa',
                  category: TestCategory.Payment,
                  description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL —Ñ–æ—Ä–º—ã Robokassa',
                  run: async () => {
                    if (!testResult.success) {
                      // Safely determine the error message
                      let errorMessage = testResult.message || '–¢–µ—Å—Ç URL Robokassa –Ω–µ –ø—Ä–æ–π–¥–µ–Ω';
                      if ('error' in testResult && testResult.error) {
                        const errorObj = testResult.error;
                        errorMessage = errorObj instanceof Error ? errorObj.message : String(errorObj);
                      }
                      throw new Error(errorMessage);
                    }
                    return {
                      success: true,
                      name: testResult.name,
                      message: '–¢–µ—Å—Ç URL Robokassa —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
                      details: testResult,
                    }
                  },
                },
              ])
            }
          }
           logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ Robokassa: ${robokassaRunResult.results.length}`)
           logger.info(`‚úÖ Added Robokassa tests: ${robokassaRunResult.results.length}`)
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Api
      if (shouldRunApiTests) {
          logger.info('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ API/Handlers...');
          try {
              const handlerResults = await runCheckFullAccessTests(options);
              for (const result of handlerResults) {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result.name –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                  if (result && result.name) {
                      runner.addTests([
                          {
                              name: result.name,
                              category: TestCategory.Api, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Api –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                              description: result.message || '',
                              run: async () => { 
                                  if (!result.success) {
                                      const error = result.error || result.message || 'Handler test failed';
                                      throw new Error(error instanceof Error ? error.message : String(error));
                                  }
                                  return result;
                              }
                          }
                      ]);
                  } else {
                      logger.warn('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–µ–∑ –∏–º–µ–Ω–∏:', result);
                  }
              }
              logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ API/Handlers: ${handlerResults.length}`);
          } catch (error) {
              const errorMessage = error instanceof Error ? error.message : String(error);
              logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ API/Handlers: ${errorMessage}`);
              runner.addTests([
                  {
                      name: 'API/Handler Tests',
                      category: TestCategory.Api,
                      description: 'Running API/Handler tests',
                      run: async () => { throw new Error(`Failed to run API/Handler tests: ${errorMessage}`) }
                  }
              ]);
          }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    if (runner.getTestCount() === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!')
      logger.warn('‚ö†Ô∏è No tests to run!')
      return 0
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const results = await runner.runTests()

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    const endTime = Date.now()
    reporter.setEndTime(endTime)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–ø–æ—Ä—Ç–µ—Ä
    reporter.addResults(results)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if (options.outputFormat !== 'text' || options.outputFile) {
      const report = await reporter.generateReport()

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
      if (options.outputFile) {
        await reporter.saveReport(report)
      } else {
        // –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(report)
      }
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.length - successCount

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    return failCount > 0 ? 1 : 0
  } finally {
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await runner.cleanup()
    logger.info('üßπ Test resources cleanup finished.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests()
    .then(exitCode => {
      process.exit(exitCode)
    })
    .catch(error => {
      logger.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      logger.error('üî• Critical error running tests:', error)
      process.exit(1)
    })
}
