import fs from 'fs';
import path from 'path';
import { TEST_REGISTRY, TestCase, TestSuite } from './types';
import { logger } from '@/utils/logger';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
export class TestDiscovery {
  /**
   * –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  private static readonly TEST_FILE_PATTERNS = [
    '.test.ts',
    '.spec.ts',
    'Test.ts',
    'Tests.ts'
  ];

  /**
   * –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  private static readonly EXCLUDED_DIRS = [
    'node_modules',
    'dist',
    '.git'
  ];

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   * 
   * @param baseDir –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param recursive –ò—Å–∫–∞—Ç—å –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
   * @returns –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
   */
  static async discoverTestFiles(baseDir: string, recursive: boolean = true): Promise<string[]> {
    logger.info(`üîç Discovering test files in ${baseDir}`);

    if (!fs.existsSync(baseDir)) {
      logger.error(`‚ùå Directory ${baseDir} does not exist`);
      return [];
    }

    const files: string[] = [];
    await this.scanDirectory(baseDir, files, recursive);
    
    logger.info(`‚úÖ Found ${files.length} test files`);
    return files;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø–æ–∏—Å–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  private static async scanDirectory(dir: string, files: string[], recursive: boolean): Promise<void> {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        if (recursive && !this.EXCLUDED_DIRS.includes(entry.name)) {
          await this.scanDirectory(fullPath, files, recursive);
        }
      } else if (entry.isFile() && this.isTestFile(entry.name)) {
        files.push(fullPath);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤—ã–º
   */
  private static isTestFile(fileName: string): boolean {
    return this.TEST_FILE_PATTERNS.some(pattern => fileName.endsWith(pattern));
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
   * 
   * @param files –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
   */
  static async loadTestFiles(files: string[]): Promise<void> {
    logger.info(`üìÇ Loading ${files.length} test files`);

    for (const file of files) {
      try {
        logger.debug(`üîÑ Loading test file: ${file}`);
        await import(file);
      } catch (error) {
        logger.error(`‚ùå Error loading test file ${file}:`, error);
      }
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è TestRunner
   */
  static collectTestSuites(): TestSuite[] {
    const suites: TestSuite[] = [];

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤
    for (const [target, suiteMetadata] of TEST_REGISTRY.suites.entries()) {
      const tests = TEST_REGISTRY.tests.get(target) || [];
      
      if (tests.length === 0) {
        logger.warn(`‚ö†Ô∏è Test suite ${suiteMetadata.name} has no tests`);
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ö—É–∫–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
      const beforeAllHooks = TEST_REGISTRY.beforeAll.get(target) || [];
      const afterAllHooks = TEST_REGISTRY.afterAll.get(target) || [];
      const beforeEachHooks = TEST_REGISTRY.beforeEach.get(target) || [];
      const afterEachHooks = TEST_REGISTRY.afterEach.get(target) || [];

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å —Ç–µ—Å—Ç–∞–º–∏
      const instance = new target();

      // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
      const suite: TestSuite = {
        name: suiteMetadata.name,
        category: suiteMetadata.category,
        description: suiteMetadata.description,
        tests: [],
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫–∏
        beforeAll: beforeAllHooks.length > 0 
          ? async () => {
              for (const hook of beforeAllHooks) {
                await instance[hook]();
              }
            }
          : undefined,
        
        afterAll: afterAllHooks.length > 0
          ? async () => {
              for (const hook of afterAllHooks) {
                await instance[hook]();
              }
            }
          : undefined,
        
        beforeEach: beforeEachHooks.length > 0
          ? async () => {
              for (const hook of beforeEachHooks) {
                await instance[hook]();
              }
            }
          : undefined,
        
        afterEach: afterEachHooks.length > 0
          ? async () => {
              for (const hook of afterEachHooks) {
                await instance[hook]();
              }
            }
          : undefined
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ –Ω–∞–±–æ—Ä
      for (const testMetadata of tests) {
        const testCase: TestCase = {
          name: testMetadata.name,
          category: testMetadata.category || suiteMetadata.category,
          description: testMetadata.description,
          tags: testMetadata.tags,
          timeout: testMetadata.timeout,
          skip: testMetadata.skip,
          only: testMetadata.only,
          test: async () => {
            // –ó–∞–ø—É—Å–∫–∞–µ–º beforeEach —Ö—É–∫–∏
            if (suite.beforeEach) {
              await suite.beforeEach();
            }

            try {
              // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
              const result = await instance[testMetadata.propertyKey]();
              return result;
            } finally {
              // –ó–∞–ø—É—Å–∫–∞–µ–º afterEach —Ö—É–∫–∏
              if (suite.afterEach) {
                await suite.afterEach();
              }
            }
          }
        };

        suite.tests.push(testCase);
      }

      suites.push(suite);
    }

    return suites;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   * 
   * @param baseDir –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param recursive –ò—Å–∫–∞—Ç—å –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
   * @returns –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
   */
  static async initializeTests(baseDir: string, recursive: boolean = true): Promise<TestSuite[]> {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const files = await this.discoverTestFiles(baseDir, recursive);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    await this.loadTestFiles(files);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –Ω–∞–±–æ—Ä—ã
    const suites = this.collectTestSuites();
    
    logger.info(`‚úÖ Initialized ${suites.length} test suites with ${suites.reduce((sum, suite) => sum + suite.tests.length, 0)} tests`);
    
    return suites;
  }
} 