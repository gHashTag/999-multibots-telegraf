import { MyContext } from '@/interfaces/telegram-bot.interface'
import { createMockContext } from '../helpers/createMockContext'
import { logger } from '@/utils/logger'
import { WizardScene } from 'telegraf/scenes'

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å—Ü–µ–Ω
 */
export class TelegramSceneTester {
  scene: WizardScene<MyContext>

  constructor(scene: WizardScene<MyContext>) {
    this.scene = scene
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @returns –ú–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  createContext(
    options: Parameters<typeof createMockContext>[0] = {}
  ): ReturnType<typeof createMockContext> {
    return createMockContext(options)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã
   * @param stepIndex –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞
   * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
   */
  async runStep(stepIndex: number, context: MyContext): Promise<void> {
    if (!this.scene.steps || !this.scene.steps[stepIndex]) {
      throw new Error(
        `–®–∞–≥ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${stepIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ ${this.scene.id}`
      )
    }

    const step = this.scene.steps[stepIndex]
    logger.info(`üéØ –ó–∞–ø—É—Å–∫ —à–∞–≥–∞ ${stepIndex} —Å—Ü–µ–Ω—ã ${this.scene.id}`, {
      description: `Running step ${stepIndex} of scene ${this.scene.id}`,
    })

    // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —à–∞–≥–∞
    return (step as Function)(context)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
   * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param predicate –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  hasMessageMatching(
    context: any,
    predicate: (message: any) => boolean
  ): boolean {
    const sentReplies = context.sentReplies || []
    return sentReplies.some(predicate)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param text –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
   */
  hasMessageWithText(context: any, text: string): boolean {
    return this.hasMessageMatching(
      context,
      message => message.text && message.text.includes(text)
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
   * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param buttonText –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
   */
  hasInlineButton(context: any, buttonText: string): boolean {
    return this.hasMessageMatching(context, message => {
      const keyboard = message.extra?.reply_markup?.inline_keyboard
      if (!keyboard) return false

      return keyboard.some((row: any[]) =>
        row.some((button: any) => button.text === buttonText)
      )
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å URL –∫–Ω–æ–ø–∫–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —É–∫–∞–∑–∞–Ω–Ω—ã–π URL
   * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param urlFragment –§—Ä–∞–≥–º–µ–Ω—Ç URL
   * @returns true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å URL, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
   */
  hasUrlButton(context: any, urlFragment: string): boolean {
    return this.hasMessageMatching(context, message => {
      const keyboard = message.extra?.reply_markup?.inline_keyboard
      if (!keyboard) return false

      return keyboard.some((row: any[]) =>
        row.some(
          (button: any) => button.url && button.url.includes(urlFragment)
        )
      )
    })
  }
}
