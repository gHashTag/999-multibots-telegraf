import { logger } from '@/utils/logger'
import { TestResult } from './types'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TypeScript
 */
export class TestLogger {
  private static formatError(error: Error | string): Error {
    if (error instanceof Error) {
      return error
    }
    return new Error(error)
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
   */
  static logTestStart(testName: string): void {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞', {
      description: 'Test started',
      test_name: testName,
    })
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
   */
  static logTestSuccess(result: TestResult): void {
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: 'Test completed successfully',
      test_name: result.name,
      success: result.success,
      message: result.message,
    })
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∞
   */
  static logTestError(error: Error | string, testName: string): void {
    const errorMessage = error instanceof Error ? error.message : error
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ', {
      description: 'Test failed',
      test_name: testName,
      error: errorMessage,
      stack: error instanceof Error ? error.stack : undefined,
    })
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  static createTestResult(params: {
    name: string
    success: boolean
    message: string
    error?: Error | string
    startTime: number
  }): TestResult {
    const { name, success, message, error } = params

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ', {
        description: 'Test error details',
        test_name: name,
        error: error instanceof Error ? error.message : error,
        stack: error instanceof Error ? error.stack : undefined,
      })
    }

    return {
      name,
      success,
      message,
      error: error ? this.formatError(error) : undefined,
      startTime: params.startTime,
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∞
   */
  static logTestInfo(
    message: string,
    description: string,
    context?: Record<string, unknown>
  ): void {
    logger.info('‚ÑπÔ∏è ' + message, {
      description,
      ...context,
    })
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∞
   */
  static logTestWarning(
    message: string,
    description: string,
    context?: Record<string, unknown>
  ): void {
    logger.warn('‚ö†Ô∏è ' + message, {
      description,
      ...context,
    })
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  static logTestDebug(
    message: string,
    description: string,
    context?: Record<string, unknown>
  ): void {
    logger.debug('üîç ' + message, {
      description,
      ...context,
    })
  }

  static logTestSkipped(testName: string, reason: string): void {
    logger.info({
      message: `‚è≠Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω: ${testName}`,
      description: 'Test skipped',
      reason,
      context: {
        test: testName,
      },
    })
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  static createTestError(error: unknown): Error {
    return error instanceof Error ? error : new Error(String(error))
  }
}

export const createTestError = TestLogger.createTestError

export async function testLogger(): Promise<TestResult> {
  const testName = 'Logger Test'

  try {
    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞',
      description: 'Testing logger functionality',
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.debug({
      message: 'üîç –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      description: 'Test debug message',
    })

    logger.info({
      message: '‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      description: 'Test info message',
    })

    logger.warn({
      message: '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      description: 'Test warning message',
    })

    logger.error({
      message: '‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞',
      description: 'Test error message',
      error: new Error('Test error'),
    })

    return {
      name: testName,
      success: true,
      message: '–í—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      startTime: Date.now(),
    }
  } catch (err) {
    const error = err instanceof Error ? err : new Error(String(err))

    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–≥–µ—Ä–∞',
      description: 'Logger test error',
      error,
    })

    return {
      name: testName,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–≥–µ—Ä–∞',
      error: error,
      startTime: Date.now(),
    }
  }
}
