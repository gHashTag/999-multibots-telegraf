import { isRubPayment } from '../price/helpers/costHelpers'
import { logger } from '../utils/logger'

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É–±–ª—ë–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
const testPaymentDetection = async () => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É–±–ª—ë–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', {
    description: 'Starting payment detection test',
  })

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
  const testPayments = [
    {
      id: 1,
      description: '–Ø–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö',
      payment: {
        amount: 1000,
        stars: 434,
        currency: 'RUB',
        payment_method: null,
      },
      expectedResult: true,
    },
    {
      id: 2,
      description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Robokassa',
      payment: {
        amount: 500,
        stars: 217,
        currency: 'STARS',
        payment_method: 'Robokassa',
      },
      expectedResult: true,
    },
    {
      id: 3,
      description: '–ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥',
      payment: {
        amount: 1000,
        stars: 1000,
        currency: 'STARS',
        payment_method: null,
      },
      expectedResult: false,
    },
    {
      id: 4,
      description: '–ë–æ–Ω—É—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ',
      payment: {
        amount: 100,
        stars: 100,
        currency: 'STARS',
        payment_method: 'system',
      },
      expectedResult: false,
    },
    {
      id: 5,
      description: '–ó–≤—ë–∑–¥—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∫—É—Ä—Å—É, –Ω–æ –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ RUB',
      payment: {
        amount: 1000,
        stars: 434,
        currency: 'STARS',
        payment_method: null,
      },
      expectedResult: false, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç false, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    },
  ]

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
  let passedTests = 0
  let failedTests = 0

  for (const test of testPayments) {
    const result = isRubPayment(test.payment)
    const passed = result === test.expectedResult

    if (passed) {
      passedTests++
      logger.info(`‚úÖ –¢–µ—Å—Ç #${test.id} –ø—Ä–æ–π–¥–µ–Ω:`, {
        description: `Test #${test.id} passed`,
        testCase: test.description,
        expected: test.expectedResult,
        actual: result,
      })
    } else {
      failedTests++
      logger.error(`‚ùå –¢–µ—Å—Ç #${test.id} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:`, {
        description: `Test #${test.id} failed`,
        testCase: test.description,
        expected: test.expectedResult,
        actual: result,
        payment: test.payment,
      })
    }
  }

  logger.info(`üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, {
    description: 'Test results',
    total: testPayments.length,
    passed: passedTests,
    failed: failedTests,
    success_rate: `${((passedTests / testPayments.length) * 100).toFixed(2)}%`,
  })
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPaymentDetection().catch(error => {
  logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', {
    description: 'Error running test',
    error: error instanceof Error ? error.message : String(error),
  })
})
