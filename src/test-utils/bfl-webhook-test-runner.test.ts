/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ BFL
 */
import { BFLWebhookTester } from './webhook.test'
import { logger } from '@/utils/logger'
import { TestResult } from './types'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestSummary {
  success: boolean
  totalTests: number
  successCount: number
  failCount: number
  results: TestResult[]
}

async function runBFLWebhookTests(): Promise<TestSummary> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
    description: 'Starting BFL webhook tests',
  })

  const tester = new BFLWebhookTester()
  const results = await tester.runAllTests()

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const successCount = results.filter(r => r.success).length
  const failCount = results.length - successCount

  logger.info({
    message: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
    description: 'BFL webhook test results',
    successCount,
    failCount,
    totalTests: results.length,
  })

  return {
    success: failCount === 0,
    totalTests: results.length,
    successCount,
    failCount,
    results,
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runBFLWebhookTests()
    .then(summary => {
      logger.info({
        message: 'üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BFL –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'BFL webhook testing summary',
        summary,
      })

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
      process.exit(summary.success ? 0 : 1)
    })
    .catch(error => {
      logger.error({
        message: 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ BFL –≤–µ–±—Ö—É–∫–æ–≤',
        description: 'Critical error during BFL webhook tests',
        error: error.message,
        stack: error.stack,
      })
      process.exit(1)
    })
}

export { runBFLWebhookTests }
