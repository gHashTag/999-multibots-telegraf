import { runAllPulseIntegrationTests } from './tests/pulse/pulseIntegrationTest'
import { logger } from '@/utils/logger'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Pulse
 */
async function runAllTests() {
  try {
    logger.info(
      'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ Pulse'
    )

    const results = await runAllPulseIntegrationTests()
    const successCount = results.filter(r => r.success).length
    const failedCount = results.length - successCount

    logger.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pulse:`)
    logger.info(`   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`)
    logger.info(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}`)
    logger.info(`   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedCount}`)

    if (failedCount > 0) {
      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      const failedTests = results.filter(r => !r.success)

      logger.error('‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:')
      failedTests.forEach((test, index) => {
        logger.error(`   ${index + 1}. ${test.name}: ${test.message}`)
      })

      // –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
      process.exit(1)
    }

    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
    process.exit(0)
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pulse',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests()
}
