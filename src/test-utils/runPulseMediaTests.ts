import { logger } from '@/utils/logger'
import { runAllPulseMediaTests } from './tests/pulse/pulseMediaTest'
import { TestResult } from './types'
import { runTests } from './runTests'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Pulse
 */
export async function runPulseTests(): Promise<TestResult[]> {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Pulse',
    description: 'Running all Pulse tests',
  })

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã Pulse
    const results = await runTests([runAllPulseMediaTests])

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    logger.info({
      message: `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Pulse: ‚úÖ ${successCount} —É—Å–ø–µ—à–Ω—ã—Ö, ‚ùå ${failCount} –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö`,
      description: `All Pulse tests completed: ${successCount} successful, ${failCount} failed`,
    })

    return results
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ Pulse',
      description: 'Error running Pulse tests',
      error: (error as Error).message,
      stack: (error as Error).stack,
    })

    return [
      {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${(error as Error).message}`,
        name: '–¢–µ—Å—Ç—ã Pulse',
      },
    ]
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    await runPulseTests()
  })()
}
