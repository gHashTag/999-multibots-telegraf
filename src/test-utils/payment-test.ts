import { TelegramId } from '@/interfaces/telegram.interface'
import { supabase } from '@/core/supabase'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'
import { logger } from '@/utils/logger'

export const testPaymentSystem = async () => {
  try {
    const testTelegramId = Date.now()
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', {
      description: 'Starting payment system test',
      telegram_id: testTelegramId,
    })

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const initialBalance = await getUserBalance(
      testTelegramId.toString(),
      'ai_koshey_bot'
    )
    logger.info('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Initial balance check',
      telegram_id: testTelegramId,
      balance: initialBalance,
    })

    // –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
    const addResult = await updateUserBalance({
      telegram_id: testTelegramId.toString(),
      amount: 100,
      type: 'income',
      operation_description: 'Test add stars',
      bot_name: 'ai_koshey_bot',
    })

    logger.info('‚ûï –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥', {
      description: 'Add stars result',
      telegram_id: testTelegramId,
      result: addResult,
    })

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(
      testTelegramId.toString(),
      'ai_koshey_bot'
    )
    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', {
      description: 'Balance after adding stars',
      telegram_id: testTelegramId,
      balance: balanceAfterAdd,
      expected: 100,
    })

    // –®–∞–≥ 4: –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    const spendResult = await updateUserBalance({
      telegram_id: testTelegramId.toString(),
      amount: 30,
      type: 'outcome',
      operation_description: 'Test spend stars',
      bot_name: 'ai_koshey_bot',
    })

    logger.info('‚ûñ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–µ–∑–¥', {
      description: 'Spend stars result',
      telegram_id: testTelegramId,
      result: spendResult,
    })

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const finalBalance = await getUserBalance(
      testTelegramId.toString(),
      'ai_koshey_bot'
    )
    logger.info('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', {
      description: 'Final balance check',
      telegram_id: testTelegramId,
      balance: finalBalance,
      expected: 70,
    })

    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
    const { data: payments, error } = await supabase
      .from('payments_v2')
      .select('amount, stars, payment_method, status, description')
      .eq('telegram_id', testTelegramId.toString())
      .order('payment_date', { ascending: false })

    if (error) {
      throw error
    }

    logger.info('üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2', {
      description: 'Payments records',
      telegram_id: testTelegramId,
      payments,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const testsPassed =
      initialBalance === 0 &&
      balanceAfterAdd === 100 &&
      finalBalance === 70 &&
      payments.length === 2

    if (testsPassed) {
      logger.info('‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'All tests passed successfully',
        telegram_id: testTelegramId,
      })
    } else {
      logger.error('‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã', {
        description: 'Tests failed',
        telegram_id: testTelegramId,
        initialBalance,
        balanceAfterAdd,
        finalBalance,
        paymentsCount: payments.length,
      })
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await supabase
      .from('payments_v2')
      .delete()
      .eq('telegram_id', testTelegramId)

    return testsPassed
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', {
      description: 'Error during testing',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return false
  }
}
