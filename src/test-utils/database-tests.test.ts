import { testSupabase } from './test-env'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'
import { TestResult } from './types'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export class DatabaseTester {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async testConnection(): Promise<TestResult> {
    const startTime = Date.now()
    const testName = 'Database connection test'

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        description: 'Database connection test',
      })

      // –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error, count } = await testSupabase
        .from('users')
        .select('*', { count: 'exact', head: true })
        .limit(1)

      if (error) {
        throw new Error(error.message)
      }

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${duration}–º—Å`,
        details: [`Count: ${count}`],
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        description: 'Error during database connection test',
        error: error.message,
      })

      return {
        name: testName,
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID
   */
  async testTrainingExists(trainingId: string): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Training existence test: ${trainingId}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        description: 'Training existence test',
        trainingId,
      })

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      const { data, error } = await testSupabase
        .from('model_trainings')
        .select('*')
        .eq('replicate_training_id', trainingId)
        .limit(1)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          // –ö–æ–¥ –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          const duration = Date.now() - startTime
          return {
            name: testName,
            passed: false,
            success: false,
            message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${trainingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
            details: [`Error: ${error.message}`],
            duration,
          }
        }
        throw new Error(error.message)
      }

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${trainingId} –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
        details: [
          `ID: ${data.id}`,
          `Model Name: ${data.model_name}`,
          `Status: ${data.status}`,
          `Created At: ${data.created_at}`,
        ],
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        description: 'Error during training existence test',
        error: error.message,
        trainingId,
      })

      return {
        name: testName,
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testUserTrainings(telegramId: string): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `User trainings test: ${telegramId}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'User trainings test',
        telegramId,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await testSupabase
        .from('model_trainings')
        .select('*')
        .eq('telegram_id', telegramId)
        .order('created_at', { ascending: false })
        .limit(5)

      if (error) {
        throw new Error(error.message)
      }

      const trainingsCount = data.length

      const duration = Date.now() - startTime
      return {
        name: testName,
        passed: true,
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${trainingsCount} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
        details: data.map(
          t =>
            `Training: ID=${t.id}, Model=${t.model_name}, Status=${t.status}, Created=${t.created_at}`
        ),
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'Error during user trainings test',
        error: error.message,
        telegramId,
      })

      return {
        name: testName,
        passed: false,
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      description: 'Running all database tests',
    })

    try {
      // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const connectionResult = await this.testConnection()
      results.push(connectionResult)

      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
      if (!connectionResult.success) {
        logger.error({
          message: '‚ùå –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
          description: 'Database tests aborted due to connection error',
        })

        return results
      }

      // –¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const trainingId = TEST_CONFIG.bflTraining.samples[0].task_id
      const trainingResult = await this.testTrainingExists(trainingId)
      results.push(trainingResult)

      // –¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramId = TEST_CONFIG.user.telegramId
      const userTrainingsResult = await this.testUserTrainings(telegramId)
      results.push(userTrainingsResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Database tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: 'Critical error during database tests',
        error: error.message,
      })
      throw error
    }
  }
}
