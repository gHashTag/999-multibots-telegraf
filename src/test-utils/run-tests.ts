import { InngestTester } from './inngest-tests'
import { logger } from '@/utils/logger'
import { runBalanceTest } from './tests/balance-test'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.NODE_ENV = 'test'

async function runTests() {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
    description: 'Starting tests',
  })

  const tester = new InngestTester()

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞
    const balanceTestResult = await runBalanceTest()

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
    const inngestResults = await tester.runAllTests()

    const results = [balanceTestResult, ...inngestResults]

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info({
      message: `‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successCount}/${totalTests} —É—Å–ø–µ—à–Ω–æ`,
      description: 'Tests completed',
      successRate: `${((successCount / totalTests) * 100).toFixed(2)}%`,
      results: results.map(r => ({
        name: r.testName,
        success: r.success,
        message: r.message,
        error: r.error,
      })),
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
