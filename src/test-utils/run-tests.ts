import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { DatabaseTester } from './database-tests'
import { ReplicateWebhookTester } from './webhook-tests'
import { VoiceTester } from './test-voices'
import { InngestTester } from './inngest-tests'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
export async function runTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...', {
    description: 'Starting test execution',
  })

  const results: TestResult[] = []

  try {
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const databaseTester = new DatabaseTester()
    const databaseResults = await databaseTester.runAllTests()
    results.push(...databaseResults)

    // –í–µ–±—Ö—É–∫–∏
    const webhookTester = new ReplicateWebhookTester()
    const webhookResults = await webhookTester.runAllTests()
    results.push(...webhookResults)

    // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    const voiceTester = new VoiceTester()
    const voiceResults = await voiceTester.runAllTests()
    results.push(...voiceResults)

    // –¢–µ—Å—Ç—ã Inngest
    const inngestTester = new InngestTester()
    const inngestResults = await inngestTester.runAllTests()
    results.push(...inngestResults)

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length
    const totalCount = results.length

    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Test statistics',
      total: totalCount,
      success: successCount,
      fail: failCount,
    })

    return results
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error during test execution',
      error: error instanceof Error ? error.message : String(error),
    })
    return [
      {
        success: false,
        name: '–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤',
        message: error instanceof Error ? error.message : String(error),
      },
    ]
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
  .then(results => {
    const hasFailures = results.some(r => !r.success)

    if (hasFailures) {
      logger.error('üî¥ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏', {
        description: 'Some tests failed',
        failed_count: results.filter(r => !r.success).length,
        failed_tests: results.filter(r => !r.success).map(r => r.name),
      })
      process.exit(1)
    } else {
      logger.info('üü¢ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
        description: 'All tests passed successfully',
        total_tests: results.length,
      })
      process.exit(0)
    }
  })
  .catch(error => {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
