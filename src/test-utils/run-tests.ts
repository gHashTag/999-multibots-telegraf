import { logger } from '@/utils/logger'
import { statsTest } from './tests/stats.test'
import { balanceTest } from './tests/balance.test'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.NODE_ENV = 'test'

async function runTests() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...', {
      description: 'Starting tests',
    })

    const results = await Promise.all([statsTest(), balanceTest()])

    const failedTests = results.filter(test => !test.success)

    if (failedTests.length > 0) {
      logger.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏:', {
        description: 'Some tests failed',
        failedTests,
      })
      process.exit(1)
    }

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã', {
      description: 'All tests passed successfully',
      results,
    })
    process.exit(0)
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
