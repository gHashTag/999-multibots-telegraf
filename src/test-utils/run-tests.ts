import { logger } from '@/utils/logger'
import { testImageToPrompt } from './tests'
import { TestResult } from './types'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
async function runTests(): Promise<TestResult[]> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
    description: 'Starting tests',
  })

  const results: TestResult[] = []

  try {
    // –¢–µ—Å—Ç imageToPrompt
    logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ imageToPrompt', {
      description: 'Running imageToPrompt test',
    })

    const imageToPromptResult = await testImageToPrompt()
    results.push(imageToPromptResult)

    if (imageToPromptResult.success) {
      logger.info('‚úÖ –¢–µ—Å—Ç imageToPrompt —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        description: 'imageToPrompt test completed successfully',
        details: imageToPromptResult.details,
      })
    } else {
      logger.error('‚ùå –¢–µ—Å—Ç imageToPrompt –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', {
        description: 'imageToPrompt test failed',
        error: imageToPromptResult.error,
      })
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
      description: 'Error during testing',
      error: error instanceof Error ? error.message : String(error),
    })
  }

  // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const successCount = results.filter(r => r.success).length
  const totalCount = results.length

  logger.info(
    `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${successCount}/${totalCount} —É—Å–ø–µ—à–Ω–æ`,
    {
      description: 'Test results',
      success_count: successCount,
      total_count: totalCount,
      success_rate: `${(successCount / totalCount) * 100}%`,
    }
  )

  return results
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
  .then(results => {
    const hasFailures = results.some(r => !r.success)

    if (hasFailures) {
      logger.error('üî¥ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏', {
        description: 'Some tests failed',
        failed_count: results.filter(r => !r.success).length,
        failed_tests: results.filter(r => !r.success).map(r => r.name),
      })
      process.exit(1)
    } else {
      logger.info('üü¢ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', {
        description: 'All tests passed successfully',
      })
      process.exit(0)
    }
  })
  .catch(error => {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
