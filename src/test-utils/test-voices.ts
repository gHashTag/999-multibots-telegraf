import { elevenlabs } from '@/core/elevenlabs'
import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { supabase } from '@/core/supabase'
import { inngest } from '@/core/inngest'
import { v4 as uuidv4 } from 'uuid'
import { TEST_CONFIG } from './test-config'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { createTestError } from './test-logger'

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
 */
interface VoiceSettings {
  stability: number
  similarity_boost: number
  style: number
  use_speaker_boost: boolean
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ
 */
interface Voice {
  voice_id: string
  name: string
  category: string
  description: string | null
  preview_url: string | null
  samples:
    | {
        sample_id: string
        file_name: string
        mime_type: string
        size_bytes: number
        hash: string
      }[]
    | null
  settings: VoiceSettings | null
  labels: Record<string, string>
  created_at_unix: number | null
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function testGetVoices(): Promise<TestResult> {
  try {
    logger.info('üéØ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤', {
      description: 'Testing voice list retrieval',
      test_name: 'Get voices test',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.ELEVEN_LABS_API_KEY) {
      logger.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á ElevenLabs', {
        description: 'Missing ElevenLabs API key',
        test_name: 'Get voices test',
      })

      return {
        name: 'Get voices test',
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á ElevenLabs',
        error: new Error('Missing ElevenLabs API key'),
        startTime: Date.now(),
      }
    }

    const response = await elevenlabs.voices.getAll()
    const voices = response.voices as unknown as Voice[]

    if (!voices || voices.length === 0) {
      logger.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø—É—Å—Ç', {
        description: 'Voice list is empty',
        test_name: 'Get voices test',
      })

      return {
        name: 'Get voices test',
        success: false,
        message: '–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø—É—Å—Ç',
        error: new Error('Empty voice list'),
        startTime: Date.now(),
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = new Map<string, number>()
    voices.forEach((voice: Voice) => {
      const count = categories.get(voice.category) || 0
      categories.set(voice.category, count + 1)
    })

    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≥–æ–ª–æ—Å–æ–≤', {
      description: 'Voice categories statistics',
      test_name: 'Get voices test',
      categories: Object.fromEntries(categories),
      voiceCount: voices.length,
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≥–æ–ª–æ—Å–µ
    voices.forEach((voice: Voice) => {
      logger.debug('üó£Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ', {
        description: 'Voice details',
        test_name: 'Get voices test',
        voice_id: voice.voice_id,
        name: voice.name,
        category: voice.category,
      })
    })

    return {
      name: 'Get voices test',
      success: true,
      message: `–ü–æ–ª—É—á–µ–Ω–æ ${voices.length} –≥–æ–ª–æ—Å–æ–≤`,
      startTime: Date.now(),
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    const err = error instanceof Error ? error : new Error(errorMessage)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤', {
      description: 'Error getting voice list',
      test_name: 'Get voices test',
      error: errorMessage,
    })

    return {
      name: 'Get voices test',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
      error: err,
      startTime: Date.now(),
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–æ–ª–æ—Å–∞–º–∏
 * @returns Promise<TestResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function testVoices(): Promise<TestResult> {
  const testName = 'Voice Tests'
  const testTelegramId = Date.now().toString()
  const testBotName = TEST_CONFIG.TEST_BOT_NAME
  const testText = 'Hello, this is a test message for voice generation.'
  const testVoiceId = TEST_CONFIG.TEST_VOICE_ID || 'pNInz6obpgDQGcFmaJgB' // Adam voice as default

  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', {
      description: 'Starting voice tests',
      test_telegram_id: testTelegramId,
      test_bot_name: testBotName,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.ELEVEN_LABS_API_KEY) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á ElevenLabs')
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: createError } = await supabase.from('users').insert({
      telegram_id: testTelegramId,
      username: `test_user_${testTelegramId}`,
      bot_name: testBotName,
    })

    if (createError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`)
    }

    logger.info('üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
      description: 'Test user created',
      telegram_id: testTelegramId,
      bot_name: testBotName,
    })

    // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const addInv_id = uuidv4()
    await inngest.send({
      name: 'payment/process',
      data: {
        telegram_id: testTelegramId,
        amount: 100,
        type: 'money_income',
        description: 'Test add stars for voice generation',
        bot_name: testBotName,
        inv_id: addInv_id,
        service_type: ModeEnum.TopUpBalance,
        test_mode: true,
      },
    })

    logger.info('üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Balance top-up request sent',
      amount: 100,
      inv_id: addInv_id,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const balanceAfterAdd = await getUserBalance(testTelegramId)
    if (balanceAfterAdd !== 100) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${balanceAfterAdd}, –æ–∂–∏–¥–∞–ª–æ—Å—å: 100`
      )
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω', {
      description: 'Balance topped up successfully',
      balance: balanceAfterAdd,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞
    const voiceInv_id = uuidv4()
    await inngest.send({
      name: 'voice/generate',
      data: {
        telegram_id: testTelegramId,
        text: testText,
        voice_id: testVoiceId,
        bot_name: testBotName,
        inv_id: voiceInv_id,
        test_mode: true,
      },
    })

    logger.info('üé§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞', {
      description: 'Voice generation request sent',
      text: testText,
      voice_id: testVoiceId,
      inv_id: voiceInv_id,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const balanceAfterVoice = await getUserBalance(testTelegramId)
    const expectedBalance = balanceAfterAdd - TEST_CONFIG.VOICE_GENERATION_COST

    if (balanceAfterVoice !== expectedBalance) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: ${balanceAfterVoice}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedBalance}`
      )
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–Ω—å—à–µ–Ω –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞', {
      description: 'Balance correctly reduced after voice generation',
      balance: balanceAfterVoice,
      cost: TEST_CONFIG.VOICE_GENERATION_COST,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ voice_generations
    const { data: voiceGeneration, error: voiceError } = await supabase
      .from('voice_generations')
      .select('*')
      .eq('inv_id', voiceInv_id)
      .single()

    if (voiceError || !voiceGeneration) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: ${
          voiceError?.message || '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }`
      )
    }

    logger.info('‚úÖ –ó–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞', {
      description: 'Voice generation record created',
      voice_generation: voiceGeneration,
    })

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (TEST_CONFIG.CLEANUP_TEST_DATA) {
      const { error: deleteUserError } = await supabase
        .from('users')
        .delete()
        .eq('telegram_id', testTelegramId)

      if (deleteUserError) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error deleting test user',
          error: deleteUserError.message,
        })
      }

      const { error: deleteVoiceError } = await supabase
        .from('voice_generations')
        .delete()
        .eq('inv_id', voiceInv_id)

      if (deleteVoiceError) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞', {
          description: 'Error deleting voice generation record',
          error: deleteVoiceError.message,
        })
      }

      logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', {
        description: 'Test data cleaned up',
      })
    }

    return {
      name: testName,
      success: true,
      message: '–¢–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      startTime: Date.now(),
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    const err = error instanceof Error ? error : new Error(errorMessage)

    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', {
      description: 'Error in voice tests',
      error: errorMessage,
    })

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (TEST_CONFIG.CLEANUP_TEST_DATA) {
      try {
        await supabase.from('users').delete().eq('telegram_id', testTelegramId)
        logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏', {
          description: 'Test data cleaned up after error',
        })
      } catch (cleanupError) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Error cleaning up test data',
          error:
            cleanupError instanceof Error
              ? cleanupError.message
              : String(cleanupError),
        })
      }
    }

    return {
      name: testName,
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
      error: err,
      startTime: Date.now(),
    }
  }
}

export async function runVoiceTests(): Promise<TestResult[]> {
  const results: TestResult[] = []
  const startTime = Date.now()

  try {
    logger.info('üé§ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π')

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
    try {
      const voiceResult = await createTestVoice()
      results.push({
        name: 'Voice Creation Test',
        success: true,
        message: '–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        startTime,
        details: voiceResult,
      })
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: ${error}`)
      results.push({
        name: 'Voice Creation Test',
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞',
        error: createTestError(error),
        startTime,
      })
    }

    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
    try {
      const speechResult = await generateTestSpeech()
      results.push({
        name: 'Speech Generation Test',
        success: true,
        message: '–†–µ—á—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
        startTime,
        details: speechResult,
      })
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: ${error}`)
      results.push({
        name: 'Speech Generation Test',
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
        error: createTestError(error),
        startTime,
      })
    }

    return results
  } catch (error) {
    logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${error}`)
    results.push({
      name: 'Voice Tests',
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
      error: createTestError(error),
      startTime,
    })
    return results
  }
}

async function createTestVoice() {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
  return { voice_id: 'test_voice_id' }
}

async function generateTestSpeech() {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ—á–∏
  return { audio_url: 'test_audio_url' }
}
