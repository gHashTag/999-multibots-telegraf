import { elevenlabs } from '@/core/elevenlabs'
import { logger } from '@/utils/logger'
import { TestResult } from './interfaces'
import { TEST_CONFIG } from './test-config'

interface Voice {
  voice_id: string
  name: string
  category: string
  description: string | null
  preview_url: string | null
  samples: any[] | null
  settings: any | null
  labels: Record<string, any>
  created_at_unix: number | null
}

export interface VoiceTestResult extends TestResult {
  duration?: number
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤
 */
export async function testGetVoices(): Promise<TestResult> {
  const startTime = Date.now()

  try {
    logger.info({
      message: 'üéØ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
      description: 'Testing voice list retrieval',
    })

    const response = await elevenlabs.voices.getAll()
    const voices = response.voices as unknown as Voice[]

    if (!voices || voices.length === 0) {
      logger.warn({
        message: '‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø—É—Å—Ç',
        description: 'Voice list is empty',
      })

      return {
        name: 'Get voices test',
        success: false,
        message: '–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø—É—Å—Ç',
        error: 'Empty voice list',
        duration: Date.now() - startTime,
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = new Map<string, number>()
    voices.forEach((voice: Voice) => {
      const count = categories.get(voice.category) || 0
      categories.set(voice.category, count + 1)
    })

    logger.info({
      message: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≥–æ–ª–æ—Å–æ–≤',
      description: 'Voice categories statistics',
      categories: Object.fromEntries(categories),
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≥–æ–ª–æ—Å–µ
    voices.forEach((voice: Voice) => {
      logger.debug({
        message: 'üó£Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ',
        description: 'Voice details',
        voice_id: voice.voice_id,
        name: voice.name,
        category: voice.category,
      })
    })

    return {
      name: 'Get voices test',
      success: true,
      message: `–ü–æ–ª—É—á–µ–Ω–æ ${voices.length} –≥–æ–ª–æ—Å–æ–≤`,
      details: {
        voiceCount: voices.length,
        categories: Object.fromEntries(categories),
      },
      duration: Date.now() - startTime,
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
      description: 'Error getting voice list',
      error: error instanceof Error ? error.message : 'Unknown error',
    })

    return {
      name: 'Get voices test',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
      error: error instanceof Error ? error.message : String(error),
      duration: Date.now() - startTime,
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
export class VoiceTester {
  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞
   */
  async testVoiceGeneration(): Promise<VoiceTestResult> {
    const startTime = Date.now()

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000))

      logger.info('üéôÔ∏è –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', {
        duration: Date.now() - startTime,
      })

      return {
        success: true,
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞',
        message: '–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        duration: Date.now() - startTime,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞', {
        error: error instanceof Error ? error.message : String(error),
        duration: Date.now() - startTime,
      })

      return {
        success: false,
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞',
        error: error instanceof Error ? error.message : String(error),
        duration: Date.now() - startTime,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
   */
  async testVoiceRecognition(): Promise<VoiceTestResult> {
    const startTime = Date.now()

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000))

      logger.info('üëÇ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω', {
        duration: Date.now() - startTime,
      })

      return {
        success: true,
        name: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞',
        message: '–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω',
        duration: Date.now() - startTime,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞', {
        error: error instanceof Error ? error.message : String(error),
        duration: Date.now() - startTime,
      })

      return {
        success: false,
        name: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞',
        error: error instanceof Error ? error.message : String(error),
        duration: Date.now() - startTime,
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runAllTests(): Promise<VoiceTestResult[]> {
    const results: VoiceTestResult[] = []

    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
    const generationResult = await this.testVoiceGeneration()
    results.push(generationResult)

    // –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
    const recognitionResult = await this.testVoiceRecognition()
    results.push(recognitionResult)

    return results
  }
}
