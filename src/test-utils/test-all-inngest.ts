#!/usr/bin/env node
/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   ts-node -r tsconfig-paths/register src/test-utils/test-all-inngest.ts
 */

import { InngestTester } from './inngest-tests'
import { logger } from '@/utils/logger'
import { TEST_CONFIG } from './test-config'

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const functionNames = [
  'hello-world',
  'broadcast',
  'payment',
  'model-training',
  'model-training-v2',
  'neuro',
]

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface FormattedResults {
  successful: number
  total: number
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏
 */
interface FunctionStats {
  total: number
  successful: number
  failed: number
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
interface TestSummary {
  total: number
  successful: number
  failed: number
  functions: Record<string, FunctionStats>
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function formatResults(results, functionName): FormattedResults {
  console.log(
    `\n${colors.bright}${colors.blue}=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName} ===${colors.reset}\n`
  )

  const successful = results.filter(r => r.success).length
  const total = results.length

  console.log(
    `${colors.bright}–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${total} | –£—Å–ø–µ—à–Ω–æ: ${
      successful === total ? colors.green : colors.yellow
    }${successful}${colors.reset}/${total} | –û—à–∏–±–æ–∫: ${
      total - successful > 0 ? colors.red : colors.green
    }${total - successful}${colors.reset}\n`
  )

  results.forEach((result, index) => {
    const statusColor = result.success ? colors.green : colors.red
    const status = result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'
    const duration = result.duration ? `(${result.duration}–º—Å)` : ''

    console.log(
      `${index + 1}. ${statusColor}${status}${colors.reset} ${colors.bright}${
        result.testName
      }${colors.reset} ${colors.yellow}${duration}${colors.reset}`
    )
    console.log(`   ${result.message}`)

    if (!result.success && result.error) {
      console.log(`   ${colors.red}–û—à–∏–±–∫–∞: ${result.error}${colors.reset}`)
    }

    console.log('')
  })

  return { successful, total }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function main() {
  console.log(
    `\n${colors.bright}${colors.blue}üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –í–°–ï–• INNGEST –§–£–ù–ö–¶–ò–ô${colors.reset}\n`
  )
  console.log(
    `URL Inngest Dev Server: ${colors.cyan}${
      process.env.INNGEST_DEV_URL || 'http://localhost:8288'
    }${colors.reset}\n`
  )

  const inngestTester = new InngestTester()
  const allResults = []
  const summary: TestSummary = {
    total: 0,
    successful: 0,
    failed: 0,
    functions: {},
  }

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (const functionName of functionNames) {
      console.log(
        `\n${colors.bright}${colors.magenta}‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}${colors.reset}\n`
      )

      const results = await inngestTester.runSpecificFunctionTests(functionName)
      const stats = formatResults(results, functionName)

      allResults.push(...results)
      summary.total += stats.total
      summary.successful += stats.successful
      summary.failed += stats.total - stats.successful
      summary.functions[functionName] = {
        total: stats.total,
        successful: stats.successful,
        failed: stats.total - stats.successful,
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      if (functionName !== functionNames[functionNames.length - 1]) {
        console.log(
          `${colors.dim}-----------------------------------------------------------${colors.reset}`
        )
        await new Promise(resolve => setTimeout(resolve, 500))
      }
    }

    // –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(
      `\n${colors.bright}${colors.blue}=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –§–£–ù–ö–¶–ò–Ø–ú ===${colors.reset}\n`
    )
    console.log(
      `${colors.bright}–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${summary.total} | –£—Å–ø–µ—à–Ω–æ: ${
        summary.successful === summary.total ? colors.green : colors.yellow
      }${summary.successful}${colors.reset} | –û—à–∏–±–æ–∫: ${
        summary.failed > 0 ? colors.red : colors.green
      }${summary.failed}${colors.reset}\n`
    )

    console.log(`${colors.bright}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:${colors.reset}`)
    for (const [name, stats] of Object.entries(summary.functions)) {
      const successRate = Math.round((stats.successful / stats.total) * 100)
      const statusColor =
        stats.failed === 0
          ? colors.green
          : stats.failed < stats.total / 2
          ? colors.yellow
          : colors.red

      console.log(
        `  ${statusColor}${name}${colors.reset}: ${stats.successful}/${stats.total} (${successRate}%)`
      )
    }

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
    if (TEST_CONFIG.options.saveResults) {
      const fs = require('fs')
      const path = require('path')
      const resultsDir = TEST_CONFIG.options.resultsPath

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!fs.existsSync(resultsDir)) {
        fs.mkdirSync(resultsDir, { recursive: true })
      }

      const timestamp = new Date().toISOString().replace(/:/g, '-')
      const filename = `all-inngest-functions-${timestamp}.json`
      const filePath = path.join(resultsDir, filename)

      fs.writeFileSync(
        filePath,
        JSON.stringify(
          {
            timestamp,
            summary,
            results: allResults,
          },
          null,
          2
        )
      )

      logger.info({
        message: 'üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        description: 'Test results saved',
        filePath,
      })

      console.log(
        `\n${colors.dim}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}${colors.reset}`
      )
    }

    console.log(
      `\n${colors.bright}${colors.green}üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã${colors.reset}\n`
    )
  } catch (error) {
    console.error(
      `\n${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}\n`
    )
    logger.error({
      message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      description: 'Critical error during tests',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
main()
