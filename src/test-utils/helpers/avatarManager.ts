import { SupabaseClient } from '@supabase/supabase-js'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
 */
export interface Avatar {
  id?: number
  telegram_id: string
  avatar_url: string
  bot_name: string
  group?: string
  created_at?: string
  updated_at?: string
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
 */
export interface CreateAvatarParams {
  telegram_id: string
  avatar_url: string
  bot_name: string
  group?: string
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
 */
export interface FindAvatarParams {
  telegram_id?: string
  bot_name?: string
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
 */
export class AvatarManager {
  private client: SupabaseClient
  private tableName: string = 'avatars'

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
   * @param client –∫–ª–∏–µ–Ω—Ç Supabase
   */
  constructor(client?: SupabaseClient) {
    this.client = client || supabase
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
   * @param params –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
   * @returns —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async createAvatar(params: CreateAvatarParams): Promise<Avatar | null> {
    try {
      logger.debug(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${params.telegram_id} –∏ –±–æ—Ç–∞ ${params.bot_name}`
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≤–∞—Ç–∞—Ä —Å —Ç–∞–∫–∏–º–∏ telegram_id –∏ bot_name
      const existingAvatar = await this.findAvatar({
        telegram_id: params.telegram_id,
        bot_name: params.bot_name,
      })

      if (existingAvatar) {
        logger.debug(
          `‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${params.telegram_id} –∏ –±–æ—Ç–∞ ${params.bot_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π`
        )
        return existingAvatar
      }

      logger.debug(
        `üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${params.telegram_id} –∏ –±–æ—Ç–∞ ${params.bot_name}`
      )

      const { data, error } = await this.client
        .from(this.tableName)
        .insert({
          telegram_id: params.telegram_id,
          avatar_url: params.avatar_url,
          bot_name: params.bot_name,
          group: params.group,
        })
        .select()
        .single()

      if (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
        return null
      }

      logger.debug(
        `‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${params.telegram_id} –∏ –±–æ—Ç–∞ ${params.bot_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
      )
      return data as Avatar
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
      return null
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
   * @param params –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
   * @returns –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ null, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async findAvatar(params: FindAvatarParams): Promise<Avatar | null> {
    try {
      logger.debug(`üîç –ü–æ–∏—Å–∫ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ${JSON.stringify(params)}`)

      let query = this.client.from(this.tableName).select('*')

      if (params.telegram_id) {
        query = query.eq('telegram_id', params.telegram_id)
      }

      if (params.bot_name) {
        query = query.eq('bot_name', params.bot_name)
      }

      const { data, error } = await query.maybeSingle()

      if (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
        return null
      }

      if (!data) {
        logger.debug(
          `‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ${JSON.stringify(params)}`
        )
        return null
      }

      logger.debug(`‚úÖ –ê–≤–∞—Ç–∞—Ä –Ω–∞–π–¥–µ–Ω: ${JSON.stringify(data)}`)
      return data as Avatar
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
      return null
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä
   * @param avatar –∞–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async updateAvatar(avatar: Avatar): Promise<Avatar | null> {
    try {
      if (!avatar.id) {
        logger.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–µ–∑ id')
        return null
      }

      logger.debug(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å id ${avatar.id}`)

      const { data, error } = await this.client
        .from(this.tableName)
        .update({
          telegram_id: avatar.telegram_id,
          avatar_url: avatar.avatar_url,
          bot_name: avatar.bot_name,
          group: avatar.group,
        })
        .eq('id', avatar.id)
        .select()
        .single()

      if (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
        return null
      }

      logger.debug(`‚úÖ –ê–≤–∞—Ç–∞—Ä —Å id ${avatar.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`)
      return data as Avatar
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
      return null
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä
   * @param avatarId id –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns true –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, false –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async deleteAvatar(avatarId: number): Promise<boolean> {
    try {
      logger.debug(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å id ${avatarId}`)

      const { error } = await this.client
        .from(this.tableName)
        .delete()
        .eq('id', avatarId)

      if (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
        return false
      }

      logger.debug(`‚úÖ –ê–≤–∞—Ç–∞—Ä —Å id ${avatarId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
      return true
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   * @param telegram_id id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param bot_name –∏–º—è –±–æ—Ç–∞
   * @returns –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async getUserAvatar(
    telegram_id: string,
    bot_name: string
  ): Promise<Avatar | null> {
    return this.findAvatar({ telegram_id, bot_name })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegram_id id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –º–∞—Å—Å–∏–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserAvatars(telegram_id: string): Promise<Avatar[]> {
    try {
      logger.debug(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id}`)

      const { data, error } = await this.client
        .from(this.tableName)
        .select('*')
        .eq('telegram_id', telegram_id)

      if (error) {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
        )
        return []
      }

      logger.debug(
        `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id}`
      )
      return data as Avatar[]
    } catch (error: any) {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
      )
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   * @param bot_name –∏–º—è –±–æ—Ç–∞
   * @returns –º–∞—Å—Å–∏–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞
   */
  async getBotAvatars(bot_name: string): Promise<Avatar[]> {
    try {
      logger.debug(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${bot_name}`)

      const { data, error } = await this.client
        .from(this.tableName)
        .select('*')
        .eq('bot_name', bot_name)

      if (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞: ${error.message}`)
        return []
      }

      logger.debug(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${bot_name}`)
      return data as Avatar[]
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –±–æ—Ç–∞: ${error.message}`)
      return []
    }
  }
}
