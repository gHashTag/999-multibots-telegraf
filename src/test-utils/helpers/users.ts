import { supabase } from '../../supabase'
import { logger } from '../../utils/logger'
import { TestUser } from '../../types/tests'

export async function createTestUser(
  telegramId: string,
  initialBalance: number = 0
): Promise<TestUser | null> {
  try {
    logger.info(`üß™ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`)
    const { data: user, error } = await supabase
      .from('users')
      .insert([{ telegram_id: telegramId }])
      .select()
      .single()

    if (error) {
      if (error.code === '23505') {
        logger.warn(
          `‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${telegramId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
        )
        const { data: existingUser, error: fetchError } = await supabase
          .from('users')
          .select('*')
          .eq('telegram_id', telegramId)
          .single()
        if (fetchError) {
          logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`,
            fetchError
          )
          return null
        }
        logger.info(
          `‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramId}`
        )
        return existingUser as TestUser
      } else {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`,
          error
        )
        return null
      }
    }
    logger.info(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${telegramId}`)
    return user as TestUser
  } catch (error) {
    logger.error(
      `‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`,
      error
    )
    return null
  }
}
