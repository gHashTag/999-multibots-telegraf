import axios from 'axios'
import { TEST_CONFIG } from './test-config'
import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
 */
interface TestResult {
  testName: string
  success: boolean
  message: string
  details?: any
  error?: string
  duration?: number
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export class InngestTester {
  private inngestDevUrl: string
  private eventKey: string

  constructor() {
    this.inngestDevUrl = process.env.INNGEST_DEV_URL || 'http://localhost:8288'
    this.eventKey = process.env.INNGEST_EVENT_KEY || 'test-event-key'
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest Dev Server
   */
  async sendEvent(name: string, data: any): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Inngest event test: ${name}`

    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è Inngest',
        description: 'Inngest event send test',
        eventName: name,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest Dev Server
      const response = await axios.post(
        `${this.inngestDevUrl}/e/${this.eventKey}`,
        {
          name,
          data,
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      const duration = Date.now() - startTime
      return {
        testName,
        success: response.status === 200,
        message: `–°–æ–±—ã—Ç–∏–µ "${name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ ${duration}–º—Å`,
        details: {
          eventName: name,
          responseStatus: response.status,
          responseData: response.data,
        },
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è Inngest',
        description: 'Error during Inngest event test',
        error: error.message,
        eventName: name,
      })

      return {
        testName,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è "${name}"`,
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async testModelTraining(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.users.main.botName,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_training_model',
      steps: 1500,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      triggerWord: 'person_test',
      zipUrl: 'https://example.com/training-images.zip',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      description: 'Model training function test',
      trainingData,
    })

    return this.sendEvent('model-training/start', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async testNeuroImageGeneration(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful snowy mountain landscape at sunset',
      model_url:
        'stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b',
      numImages: 1,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      username: 'test_user',
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: 'Neuro image generation function test',
      generationData: {
        ...generationData,
        prompt: generationData.prompt.substring(0, 20) + '...',
      },
    })

    return this.sendEvent('neuro/photo.generate', generationData)
  }

  /**
   * –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Inngest Dev Server
   */
  async invokeFunction(
    functionId: string,
    eventData: any
  ): Promise<TestResult> {
    const startTime = Date.now()
    const testName = `Inngest function invoke: ${functionId}`

    try {
      logger.info({
        message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest',
        description: 'Inngest function direct invocation',
        functionId,
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
      const invokeUrl = `${this.inngestDevUrl}/fn/${functionId}/invoke`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
      const response = await axios.post(
        invokeUrl,
        { event: { data: eventData } },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      const duration = Date.now() - startTime
      return {
        testName,
        success: response.status === 200,
        message: `–§—É–Ω–∫—Ü–∏—è "${functionId}" —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ –∑–∞ ${duration}–º—Å`,
        details: {
          functionId,
          responseStatus: response.status,
          responseData: response.data,
        },
        duration,
      }
    } catch (error) {
      const duration = Date.now() - startTime
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest',
        description: 'Error during Inngest function invocation',
        error: error.message,
        functionId,
      })

      return {
        testName,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ "${functionId}"`,
        error: error.message,
        duration,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
   */
  async testModelTrainingDirectInvoke(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.users.main.botName,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_direct_invoke_model',
      steps: 1000,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      triggerWord: 'direct_invoke_test',
      zipUrl: 'https://example.com/direct-invoke-images.zip',
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      description: 'Direct invocation of model training function',
      trainingData,
    })

    return this.invokeFunction('model-training', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
   */
  async testNeuroImageGenerationDirectInvoke(): Promise<TestResult> {
    const generationData = {
      prompt: 'Futuristic cityscape with flying cars and neon lights',
      model_url:
        'stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b',
      numImages: 1,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      username: 'test_user',
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: 'Direct invocation of neuro image generation function',
      generationData: {
        ...generationData,
        prompt: generationData.prompt.substring(0, 20) + '...',
      },
    })

    return this.invokeFunction('neuro-image-generation', generationData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é HelloWorld
   */
  async testHelloWorld(): Promise<TestResult> {
    const testData = {
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      timestamp: new Date().toISOString(),
      userId: TEST_CONFIG.users.main.telegramId,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ Hello World',
      description: 'Hello World function test',
      testData,
    })

    return this.sendEvent('test/hello.world', testData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ HelloWorld
   */
  async testHelloWorldDirectInvoke(): Promise<TestResult> {
    const testData = {
      message: '–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ Hello World',
      timestamp: new Date().toISOString(),
      userId: TEST_CONFIG.users.main.telegramId,
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ Hello World',
      description: 'Direct invocation of Hello World function',
      testData,
    })

    return this.invokeFunction('hello-world-handler', testData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async testBroadcastMessage(): Promise<TestResult> {
    const broadcastData = {
      textRu: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
      textEn: 'Test broadcast message',
      bot_name: TEST_CONFIG.users.main.botName,
      sender_telegram_id: TEST_CONFIG.users.main.telegramId,
      test_mode: true,
      test_telegram_id: TEST_CONFIG.users.main.telegramId,
      contentType: 'photo',
      imageUrl: 'https://example.com/test-image.jpg',
      parse_mode: 'Markdown',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
      description: 'Broadcast message function test',
      broadcastData: {
        ...broadcastData,
        textRu: broadcastData.textRu.substring(0, 20) + '...',
      },
    })

    return this.sendEvent('broadcast/send-message', broadcastData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async testBroadcastMessageDirectInvoke(): Promise<TestResult> {
    const broadcastData = {
      textRu: '–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
      textEn: 'Direct broadcast test',
      bot_name: TEST_CONFIG.users.main.botName,
      sender_telegram_id: TEST_CONFIG.users.main.telegramId,
      test_mode: true,
      test_telegram_id: TEST_CONFIG.users.main.telegramId,
      contentType: 'post_link',
      postLink: 'https://example.com/test-post',
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏',
      description: 'Direct invocation of broadcast function',
      broadcastData: {
        ...broadcastData,
        textRu: broadcastData.textRu.substring(0, 20) + '...',
      },
    })

    return this.invokeFunction('broadcast-message', broadcastData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
   */
  async testPaymentProcessorIncomeTransaction(): Promise<TestResult> {
    const paymentData = {
      telegram_id: TEST_CONFIG.users.main.telegramId,
      paymentAmount: 100, // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      operation_id: `test-income-${Date.now()}`,
      type: 'income', // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
      metadata: {
        payment_method: 'test',
        test_transaction: true,
      },
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)',
      description: 'Payment processor function test (income)',
      paymentData,
    })

    return this.sendEvent('payment/process', paymentData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤)
   */
  async testPaymentProcessorOutcomeTransaction(): Promise<TestResult> {
    const paymentData = {
      telegram_id: TEST_CONFIG.users.main.telegramId,
      paymentAmount: 10, // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
      operation_id: `test-outcome-${Date.now()}`,
      type: 'outcome', // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–ø–∏—Å–∞–Ω–∏–µ
      metadata: {
        service_type: 'Test',
        test_transaction: true,
      },
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)',
      description: 'Payment processor function test (outcome)',
      paymentData,
    })

    return this.sendEvent('payment/process', paymentData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
   */
  async testPaymentProcessorDirectInvoke(): Promise<TestResult> {
    const paymentData = {
      telegram_id: TEST_CONFIG.users.main.telegramId,
      paymentAmount: 5, // –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
      description: '–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
      operation_id: `test-direct-${Date.now()}`,
      type: 'outcome',
      metadata: {
        service_type: 'DirectTest',
        test_transaction: true,
      },
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
      description: 'Direct invocation of payment processor function',
      paymentData,
    })

    return this.invokeFunction('payment-processor', paymentData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
   */
  async testModelTrainingV2(): Promise<TestResult> {
    const trainingData = {
      zipUrl: 'https://example.com/training-images-v2.zip',
      triggerWord: 'person_test_v2',
      modelName: 'test_model_v2',
      steps: 1000,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
      description: 'Model training V2 function test',
      trainingData,
    })

    return this.sendEvent('model-training/v2/requested', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
   */
  async testModelTrainingV2DirectInvoke(): Promise<TestResult> {
    const trainingData = {
      zipUrl: 'https://example.com/direct-invoke-v2-images.zip',
      triggerWord: 'direct_v2_test',
      modelName: 'test_direct_v2_model',
      steps: 800,
      telegram_id: TEST_CONFIG.users.main.telegramId,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.users.main.botName,
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
      description: 'Direct invocation of model training V2 function',
      trainingData,
    })

    return this.invokeFunction('model-training-v2', trainingData)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runAllTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
      description: 'Running all Inngest function tests',
    })

    try {
      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
      const trainingEventResult = await this.testModelTraining()
      results.push(trainingEventResult)

      // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
      const trainingInvokeResult = await this.testModelTrainingDirectInvoke()
      results.push(trainingInvokeResult)

      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageEventResult = await this.testNeuroImageGeneration()
      results.push(imageEventResult)

      // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageInvokeResult =
        await this.testNeuroImageGenerationDirectInvoke()
      results.push(imageInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é HelloWorld
      const helloWorldResult = await this.testHelloWorld()
      results.push(helloWorldResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ HelloWorld
      const helloWorldDirectInvokeResult =
        await this.testHelloWorldDirectInvoke()
      results.push(helloWorldDirectInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const broadcastMessageResult = await this.testBroadcastMessage()
      results.push(broadcastMessageResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const broadcastMessageDirectInvokeResult =
        await this.testBroadcastMessageDirectInvoke()
      results.push(broadcastMessageDirectInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
      const incomeTransactionResult =
        await this.testPaymentProcessorIncomeTransaction()
      results.push(incomeTransactionResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)
      const outcomeTransactionResult =
        await this.testPaymentProcessorOutcomeTransaction()
      results.push(outcomeTransactionResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
      const paymentProcessorResult =
        await this.testPaymentProcessorDirectInvoke()
      results.push(paymentProcessorResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
      const modelTrainingV2Result = await this.testModelTrainingV2()
      results.push(modelTrainingV2Result)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
      const modelTrainingV2DirectInvokeResult =
        await this.testModelTrainingV2DirectInvoke()
      results.push(modelTrainingV2DirectInvokeResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã Inngest —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Inngest function tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ Inngest —Ñ—É–Ω–∫—Ü–∏–π',
        description: 'Critical error during Inngest function tests',
        error: error.message,
      })
      throw error
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async runImageGenerationTests(): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: 'Running image generation function tests',
    })

    try {
      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageEventResult = await this.testNeuroImageGeneration()
      results.push(imageEventResult)

      // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageInvokeResult =
        await this.testNeuroImageGenerationDirectInvoke()
      results.push(imageInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é HelloWorld
      const helloWorldResult = await this.testHelloWorld()
      results.push(helloWorldResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ HelloWorld
      const helloWorldDirectInvokeResult =
        await this.testHelloWorldDirectInvoke()
      results.push(helloWorldDirectInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const broadcastMessageResult = await this.testBroadcastMessage()
      results.push(broadcastMessageResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const broadcastMessageDirectInvokeResult =
        await this.testBroadcastMessageDirectInvoke()
      results.push(broadcastMessageDirectInvokeResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
      const incomeTransactionResult =
        await this.testPaymentProcessorIncomeTransaction()
      results.push(incomeTransactionResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–ø–∏—Å–∞–Ω–∏–µ)
      const outcomeTransactionResult =
        await this.testPaymentProcessorOutcomeTransaction()
      results.push(outcomeTransactionResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
      const paymentProcessorResult =
        await this.testPaymentProcessorDirectInvoke()
      results.push(paymentProcessorResult)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
      const modelTrainingV2Result = await this.testModelTrainingV2()
      results.push(modelTrainingV2Result)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
      const modelTrainingV2DirectInvokeResult =
        await this.testModelTrainingV2DirectInvoke()
      results.push(modelTrainingV2DirectInvokeResult)

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: 'Image generation tests completed',
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message:
          '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: 'Critical error during image generation tests',
        error: error.message,
      })
      throw error
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runSpecificFunctionTests(functionName: string): Promise<TestResult[]> {
    const results: TestResult[] = []
    logger.info({
      message: `üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}`,
      description: `Running tests for specific function: ${functionName}`,
    })

    try {
      switch (functionName) {
        case 'hello-world':
          results.push(await this.testHelloWorld())
          results.push(await this.testHelloWorldDirectInvoke())
          break
        case 'broadcast':
          results.push(await this.testBroadcastMessage())
          results.push(await this.testBroadcastMessageDirectInvoke())
          break
        case 'payment':
          results.push(await this.testPaymentProcessorIncomeTransaction())
          results.push(await this.testPaymentProcessorOutcomeTransaction())
          results.push(await this.testPaymentProcessorDirectInvoke())
          break
        case 'model-training':
          results.push(await this.testModelTraining())
          results.push(await this.testModelTrainingDirectInvoke())
          break
        case 'model-training-v2':
          results.push(await this.testModelTrainingV2())
          results.push(await this.testModelTrainingV2DirectInvoke())
          break
        case 'neuro':
          results.push(await this.testNeuroImageGeneration())
          results.push(await this.testNeuroImageGenerationDirectInvoke())
          break
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${functionName}`)
      }

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const successful = results.filter(r => r.success).length
      const total = results.length

      logger.info({
        message: `üèÅ –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName} –∑–∞–≤–µ—Ä—à–µ–Ω—ã: ${successful}/${total} —É—Å–ø–µ—à–Ω–æ`,
        description: `Function tests completed for ${functionName}`,
        successCount: successful,
        totalCount: total,
      })

      return results
    } catch (error) {
      logger.error({
        message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName}`,
        description: `Critical error during function tests for ${functionName}`,
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }
}
