import { logger } from '@/utils/logger'
import { TEST_CONFIG } from './test-config'
import axios, { AxiosError } from 'axios'
import { elevenlabs } from '@/core/elevenlabs'
import path from 'path'
import os from 'os'
import { createWriteStream } from 'fs'
import { getBotByName } from '@/core/bot'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { TelegramId } from '@/interfaces/telegram.interface'
import { Inngest } from 'inngest'
import { TestResult } from './interfaces'
import { createTestError } from './test-logger'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Inngest
interface InngestEventResponse {
  id: string
  name: string
  data: Record<string, any>
  ts: number
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
import { testTextToVideo } from './tests/textToVideo.test'
import { testImageToVideo } from './tests/imageToVideo.test'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã
interface TextToSpeechParams {
  text: string
  voice_id: string
  telegram_id: TelegramId
  is_ru: boolean
  bot_name: string
  username?: string
}

interface TextToVideoParams {
  prompt?: string
  telegram_id?: TelegramId
  is_ru?: boolean
  bot_name?: string
  model_id?: string
  username?: string
  aspect_ratio?: string
  duration?: number
}

export interface TextToVideoTestParams extends TextToVideoParams {
  _test?: {
    api_error?: boolean
    insufficient_balance?: boolean
  }
}

export interface PaymentTestData {
  telegram_id: TelegramId
  amount: number
  stars?: number
  type: 'money_income' | 'money_expense'
  description: string
  bot_name: string
  service_type: ModeEnum
  metadata?: Record<string, any>
}

export interface PaymentParams {
  amount: number
  telegram_id: string
  type: string
  description: string
  bot_name: string
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 */
export class InngestTester {
  private inngestDevUrl: string
  private eventKey: string
  private inngestClient: Inngest

  constructor() {
    this.inngestDevUrl = process.env.INNGEST_DEV_URL || 'http://localhost:8288'
    this.eventKey = process.env.INNGEST_EVENT_KEY || 'test-event-key'
    this.inngestClient = new Inngest({
      id: 'test-inngest',
      eventKey: this.eventKey,
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private handleError(error: unknown): string {
    if (error instanceof AxiosError) {
      const responseData = error.response?.data as { message?: string }
      return responseData?.message || error.message
    }
    if (error instanceof Error) {
      if (
        'response' in error &&
        error.response &&
        typeof error.response === 'object'
      ) {
        const response = error.response as {
          data?: { message?: string; error?: string }
        }
        if (response.data) {
          return response.data.message || response.data.error || error.message
        }
      }
      return error.message
    }
    return String(error)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest Dev Server
   */
  async sendEvent(
    name: string,
    data: Record<string, any>
  ): Promise<TestResult> {
    const startTime = Date.now()
    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è Inngest',
        description: 'Inngest event send test',
        eventName: name,
      })

      const response = await axios.post<InngestEventResponse>(
        `${this.inngestDevUrl}/e/${this.eventKey}`,
        {
          name,
          data,
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      return {
        name,
        success: response.status === 200,
        message: `–°–æ–±—ã—Ç–∏–µ "${name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ ${
          Date.now() - startTime
        }–º—Å`,
        error: undefined,
        startTime,
      }
    } catch (error) {
      const errorMessage = this.handleError(error)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è Inngest',
        description: 'Error during Inngest event test',
        error: errorMessage,
        eventName: name,
      })

      return {
        name,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è "${name}"`,
        error: new Error(errorMessage),
        startTime,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async testModelTraining(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.bots.test_bot.name,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_training_model',
      steps: 1500,
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      triggerWord: 'person_test',
      zipUrl: 'https://example.com/training-images.zip',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      description: 'Model training function test',
      trainingData,
    })

    return this.sendEvent('model-training/start', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async testNeuroImageGeneration(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful snowy mountain landscape at sunset',
      model_url:
        'stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b',
      numImages: 1,
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      description: 'Neuro image generation function test',
      generationData,
    })

    return this.sendEvent('neuro-image/generate', generationData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeuroPhoto V2
   */
  async testNeuroPhotoV2Generation(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful portrait photo',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeuroPhoto V2',
      description: 'NeuroPhoto V2 generation function test',
      generationData,
    })

    return this.sendEvent('neurophoto-v2/generate', generationData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async testTextToImage(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful landscape with mountains',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      description: 'Text to image generation function test',
      generationData,
    })

    return this.sendEvent('text-to-image/generate', generationData)
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Inngest Dev Server
   */
  async invokeFunction(
    functionId: string,
    eventData: any
  ): Promise<TestResult> {
    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest',
        description: 'Direct Inngest function invocation test',
        functionId,
        eventData,
      })

      const response = await axios.post<InngestEventResponse>(
        `${this.inngestDevUrl}/fn/${functionId}`,
        eventData,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      return {
        name: functionId,
        success: response.status === 200,
        message: `–§—É–Ω–∫—Ü–∏—è "${functionId}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`,
        error: undefined,
        startTime: Date.now(),
      }
    } catch (error) {
      const errorMessage = this.handleError(error)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ Inngest',
        description: 'Error during direct Inngest function invocation',
        error: errorMessage,
        functionId,
      })

      return {
        name: functionId,
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ "${functionId}"`,
        error: new Error(errorMessage),
        startTime: Date.now(),
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
   */
  async testModelTrainingV2(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.bots.test_bot.name,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_training_model_v2',
      steps: 2000,
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      triggerWord: 'person_test_v2',
      zipUrl: 'https://example.com/training-images-v2.zip',
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2',
      description: 'Model training V2 function test',
      trainingData,
    })

    return this.sendEvent('model-training-v2/start', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
   */
  async testModelTrainingDirectInvoke(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.bots.test_bot.name,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_training_model',
      steps: 1500,
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      triggerWord: 'person_test',
      zipUrl: 'https://example.com/training-images.zip',
    }

    return this.invokeFunction('model-training/start', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ V2
   */
  async testModelTrainingV2DirectInvoke(): Promise<TestResult> {
    const trainingData = {
      bot_name: TEST_CONFIG.bots.test_bot.name,
      is_ru: TEST_CONFIG.users.main.isRussian,
      modelName: 'test_training_model_v2',
      steps: 2000,
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      triggerWord: 'person_test_v2',
      zipUrl: 'https://example.com/training-images-v2.zip',
    }

    return this.invokeFunction('model-training-v2/start', trainingData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeuroPhoto V2
   */
  async testNeuroPhotoV2DirectInvoke(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful portrait photo',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    return this.invokeFunction('neurophoto-v2/generate', generationData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async testTextToImageDirectInvoke(): Promise<TestResult> {
    const generationData = {
      prompt: 'Beautiful landscape with mountains',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    return this.invokeFunction('text-to-image/generate', generationData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ ElevenLabs
   */
  async testVoiceAvatarCreation(): Promise<TestResult> {
    const voiceAvatarData = {
      fileUrl: 'https://example.com/voice-message.oga',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      description: 'Voice avatar creation function test',
      voiceAvatarData: {
        ...voiceAvatarData,
        fileUrl: 'https://example.com/voice-message.oga',
      },
    })

    return this.sendEvent('voice-avatar.requested', voiceAvatarData)
  }

  /**
   * –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ ElevenLabs
   */
  async testVoiceAvatarDirectInvoke(): Promise<TestResult> {
    const voiceAvatarData = {
      fileUrl: 'https://example.com/voice-message.oga',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      description: 'Direct invocation of voice avatar creation function test',
      voiceAvatarData: {
        ...voiceAvatarData,
        fileUrl: 'https://example.com/voice-message.oga',
      },
    })

    return this.invokeFunction('voice-avatar-creation', voiceAvatarData)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
   */
  async runTextToSpeechTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ text-to-speech',
      description: 'Starting text-to-speech tests',
    })

    try {
      // –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
      const shortTextResult = await this.testTextToSpeech({
        text: '–ü—Ä–∏–≤–µ—Ç!',
        voice_id: 'ljyyJh982fsUinaSQPvv',
        telegram_id: TEST_CONFIG.users.main.telegram_id,
        username: TEST_CONFIG.users.main.username,
        is_ru: TEST_CONFIG.users.main.isRussian,
        bot_name: TEST_CONFIG.bots.test_bot.name,
      })
      results.push({
        ...shortTextResult,
        name: 'Text-to-speech short text test',
      })

      // –¢–µ—Å—Ç 2: –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const longTextResult = await this.testTextToSpeech({
        text: '–≠—Ç–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.',
        voice_id: 'ljyyJh982fsUinaSQPvv',
        telegram_id: TEST_CONFIG.users.main.telegram_id,
        username: TEST_CONFIG.users.main.username,
        is_ru: TEST_CONFIG.users.main.isRussian,
        bot_name: TEST_CONFIG.bots.test_bot.name,
      })
      results.push({
        ...longTextResult,
        name: 'Text-to-speech long text test',
      })

      // –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≥–æ–ª–æ—Å–∞
      const invalidVoiceResult = await this.testTextToSpeech({
        text: '–¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –≥–æ–ª–æ—Å–∞',
        voice_id: 'invalid_voice_id',
        telegram_id: TEST_CONFIG.users.main.telegram_id,
        username: TEST_CONFIG.users.main.username,
        is_ru: TEST_CONFIG.users.main.isRussian,
        bot_name: TEST_CONFIG.bots.test_bot.name,
      })
      results.push({
        ...invalidVoiceResult,
        name: 'Text-to-speech invalid voice ID test',
      })

      // –¢–µ—Å—Ç 4: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
      const directInvokeResult = await this.testTextToSpeechDirectInvoke()
      results.push({
        ...directInvokeResult,
        name: 'Text-to-speech direct invocation test',
      })

      // –¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
      logger.info({
        message: 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
        description: 'Starting audio generation tests',
      })

      // –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const shortTextAudioResult = await this.testAudioGeneration(
        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        'ljyyJh982fsUinaSQPvv'
      )
      results.push({
        name: 'Audio generation - short text',
        ...shortTextAudioResult,
      })

      // –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const longTextAudioResult = await this.testAudioGeneration(
        '–≠—Ç–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –±–æ–ª—å—à–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç—ã.'.repeat(
          3
        ),
        'ljyyJh982fsUinaSQPvv'
      )
      results.push({
        name: 'Audio generation - long text',
        ...longTextAudioResult,
      })

      // –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º voice_id
      const invalidVoiceAudioResult = await this.testAudioGeneration(
        '–¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –≥–æ–ª–æ—Å–∞',
        'invalid_voice_id'
      )
      results.push({
        name: 'Audio generation - invalid voice ID',
        ...invalidVoiceAudioResult,
      })

      logger.info({
        message: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã —Ç–µ—Å—Ç—ã text-to-speech',
        description: 'Text-to-speech tests completed',
        results: results.map(r => ({
          name: r.name,
          success: r.success,
          message: r.message,
        })),
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ text-to-speech',
        description: 'Error in text-to-speech tests',
        error: error instanceof Error ? error.message : String(error),
      })

      results.push({
        name: 'Text-to-speech tests error',
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ text-to-speech',
        error: error instanceof Error ? error : new Error(String(error)),
        startTime: Date.now(),
      })

      return results
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
   */
  private async testTextToSpeech(
    data?: Partial<TextToSpeechParams>
  ): Promise<TestResult> {
    const textToSpeechData = {
      text: data?.text || '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å.',
      voice_id: data?.voice_id || 'ljyyJh982fsUinaSQPvv',
      telegram_id: data?.telegram_id || TEST_CONFIG.users.main.telegram_id,
      username: data?.username || TEST_CONFIG.users.main.username,
      is_ru: data?.is_ru ?? TEST_CONFIG.users.main.isRussian,
      bot_name: data?.bot_name || TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å',
      description: 'Text to speech function test',
      textToSpeechData: {
        ...textToSpeechData,
        text: textToSpeechData.text.substring(0, 20) + '...',
      },
    })

    return this.sendEvent('text-to-speech.requested', textToSpeechData)
  }

  /**
   * –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
   */
  async testTextToSpeechDirectInvoke(): Promise<TestResult> {
    const textToSpeechData = {
      text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å.',
      voice_id: 'ljyyJh982fsUinaSQPvv',
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      username: TEST_CONFIG.users.main.username,
      is_ru: TEST_CONFIG.users.main.isRussian,
      bot_name: TEST_CONFIG.bots.test_bot.name,
    }

    logger.info({
      message: 'üß™ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å',
      description: 'Text to speech direct invocation test',
      textToSpeechData: {
        ...textToSpeechData,
        text: textToSpeechData.text.substring(0, 20) + '...',
      },
    })

    return this.invokeFunction('text-to-speech', textToSpeechData)
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  async runTextToVideoTests(): Promise<TestResult[]> {
    const startTime = Date.now()
    logger.info({
      message: 'üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      description: 'Starting text-to-video tests',
    })

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è text-to-video
      const textToVideoResults = await testTextToVideo()

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è image-to-video
      const imageToVideoResults = await testImageToVideo()

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = [...textToVideoResults, ...imageToVideoResults]

      logger.info({
        message: '‚úÖ –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
        description: 'Text-to-video tests completed',
        success_count: results.filter(r => r.success).length,
        total_count: results.length,
      })

      return results
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
        description: 'Error running text-to-video tests',
        error: error instanceof Error ? error.message : String(error),
      })

      return [
        {
          name: '–¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
          success: false,
          message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
          error: createTestError(error),
          startTime,
          duration: Date.now() - startTime,
        },
      ]
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests(): Promise<TestResult[]> {
    logger.info({
      message: 'üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤',
      description: 'Running all tests',
    })

    const results: TestResult[] = []

    // –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
    const paymentResults = await this.runPaymentTests()
    results.push(...paymentResults)

    // –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageResults = await this.runImageGenerationTests()
    results.push(...imageResults)

    // –¢–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    const voiceResults = await this.runVoiceAvatarTests()
    results.push(...voiceResults)

    // –¢–µ—Å—Ç—ã text-to-speech
    const ttsResults = await this.runTextToSpeechTests()
    results.push(...ttsResults)

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const totalTests = results.length

    logger.info({
      message: `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤`,
      description: 'All tests completed',
      successRate: `${((successCount / totalTests) * 100).toFixed(2)}%`,
    })

    return results
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
   */
  async runPaymentTests(): Promise<TestResult[]> {
    const startTime = Date.now()
    const results: TestResult[] = []

    try {
      // –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      results.push(await this.testBasicIncomeOperation())
      results.push(await this.testBasicOutcomeOperation())

      // –¢–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞
      const serviceTypeResults = await this.testServiceTypeDetection()
      results.push(...serviceTypeResults)

      // –¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      results.push(await this.testPaymentMetadata())

      return results
    } catch (error) {
      const errorMessage = this.handleError(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π',
        description: 'Error running payment tests',
        error: errorMessage,
      })

      results.push({
        name: 'Error in runPaymentTests',
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π',
        error: createTestError(error),
        startTime,
        duration: Date.now() - startTime,
      })

      return results
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async testBasicIncomeOperation(): Promise<TestResult> {
    const paymentData = {
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      amount: 100,
      stars: 100,
      type: 'money_income',
      description: 'Test income operation',
      bot_name: TEST_CONFIG.bots.test_bot.name,
      service_type: ModeEnum.NeuroPhoto,
      metadata: {
        test: true,
        service_type: ModeEnum.NeuroPhoto,
      },
    }

    return this.sendEvent('payment/process', paymentData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async testBasicOutcomeOperation(): Promise<TestResult> {
    const paymentData = {
      telegram_id: TEST_CONFIG.users.main.telegram_id,
      amount: 50,
      stars: 50,
      type: 'money_expense',
      description: 'Test expense operation',
      bot_name: TEST_CONFIG.bots.test_bot.name,
      service_type: ModeEnum.NeuroPhoto,
      metadata: {
        test: true,
        service_type: ModeEnum.NeuroPhoto,
      },
    }

    return this.sendEvent('payment/process', paymentData)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  async testServiceTypeDetection(): Promise<TestResult[]> {
    const telegram_id = TEST_CONFIG.users.main.telegram_id
    const bot_name = TEST_CONFIG.bots.test_bot.name
    const is_ru = TEST_CONFIG.users.main.isRussian
    const testAmount = 10
    const results: TestResult[] = []

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ ModeEnum
    for (const mode of Object.values(ModeEnum)) {
      const description = `Test payment for ${String(mode).replace(/_/g, ' ')}`

      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞',
        description: 'Service type detection test',
        mode,
        testDescription: description,
      })

      const paymentData = {
        telegram_id,
        amount: testAmount,
        type: 'money_expense',
        description,
        bot_name,
        is_ru,
        payment_type: 'regular',
        currency: 'STARS',
        money_amount: 0,
      }

      const result = await this.sendEvent('payment/process', paymentData)
      results.push({
        ...result,
        name: `Service Type Detection Test - ${mode}`,
        message: result.message || 'Test completed',
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
   */
  async testPaymentMetadata(): Promise<TestResult> {
    const telegram_id = TEST_CONFIG.users.main.telegram_id
    const bot_name = TEST_CONFIG.bots.test_bot.name
    const is_ru = TEST_CONFIG.users.main.isRussian
    const testAmount = 25

    logger.info({
      message: 'üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Payment metadata processing test',
      telegram_id,
    })

    const paymentData = {
      telegram_id,
      amount: testAmount,
      type: 'money_expense',
      description: 'Test payment with metadata',
      bot_name,
      is_ru,
      payment_type: 'subscription',
      currency: 'RUB',
      money_amount: 1000,
      metadata: {
        service_type: ModeEnum.TextToImage,
        campaign: 'test_campaign',
        operation_id: 'test_op_123',
      },
    }

    const result = await this.sendEvent('payment/process', paymentData)
    return {
      ...result,
      name: 'Payment Metadata Test',
      message: result.message || 'Test completed',
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async runImageGenerationTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    try {
      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const neuroImageResult = await this.testNeuroImageGeneration()
      results.push(neuroImageResult)

      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
      const neuroPhotoV2Result = await this.testNeuroPhotoV2Generation()
      results.push(neuroPhotoV2Result)

      // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const textToImageResult = await this.testTextToImage()
      results.push(textToImageResult)

      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
      const directInvokeNeuroPhotoV2Result =
        await this.testNeuroPhotoV2DirectInvoke()
      results.push(directInvokeNeuroPhotoV2Result)

      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç-–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const directInvokeTextToImageResult =
        await this.testTextToImageDirectInvoke()
      results.push(directInvokeTextToImageResult)

      return results
    } catch (error) {
      const errorMessage = this.handleError(error)
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        description: 'Error running image generation tests',
        error: errorMessage,
      })

      results.push({
        name: 'Error in runImageGenerationTests',
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        error: error instanceof Error ? error : new Error(String(error)),
        startTime: Date.now(),
      })

      return results
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
   */
  async runVoiceAvatarTests(): Promise<TestResult[]> {
    const results: TestResult[] = []

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    const voiceAvatarResult = await this.testVoiceAvatarCreation()
    results.push(voiceAvatarResult)

    // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    const directInvokeResult = await this.testVoiceAvatarDirectInvoke()
    results.push(directInvokeResult)

    logger.info({
      message: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã —Ç–µ—Å—Ç—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      description: 'Voice avatar tests completed',
      results: results.map(r => ({
        name: r.name,
        success: r.success,
        message: r.message,
      })),
    })

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   */
  async testAudioGeneration(
    text: string,
    voice_id: string
  ): Promise<Omit<TestResult, 'name'>> {
    const startTime = Date.now()
    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
        description: 'Audio generation test',
        text,
        voice_id,
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ generate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
      const audioStream = await elevenlabs.generate({
        voice: voice_id,
        model_id: 'eleven_turbo_v2_5',
        text,
      })

      if (!audioStream) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫')
      }

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
      const outputPath = path.join(os.tmpdir(), `test_audio_${Date.now()}.mp3`)
      const writeStream = createWriteStream(outputPath)

      await new Promise<void>((resolve, reject) => {
        audioStream.pipe(writeStream)
        writeStream.on('finish', resolve)
        writeStream.on('error', reject)
      })

      return {
        success: true,
        message: `–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${Date.now() - startTime}–º—Å`,
        error: undefined,
        startTime,
        duration: Date.now() - startTime,
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : String(err)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
        description: 'Error during audio generation',
        error: errorMessage,
      })

      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
        error: new Error(errorMessage),
        startTime,
        duration: Date.now() - startTime,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ
   */
  async testAudioSending({
    text,
    voice_id,
    telegram_id,
    bot_name,
  }: {
    text: string
    voice_id: string
    telegram_id: TelegramId
    bot_name: string
  }): Promise<TestResult> {
    const startTime = Date.now()
    try {
      logger.info({
        message: 'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ',
        description: 'Audio sending test',
        text,
        voice_id,
        telegram_id,
        bot_name,
      })

      const bot = await getBotByName(bot_name)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      const audioResult = await this.testAudioGeneration(text, voice_id)
      if (!audioResult.success) {
        throw audioResult.error || new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ')
      }

      return {
        name: 'Audio Sending Test',
        success: true,
        message: `–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ ${Date.now() - startTime}–º—Å`,
        error: undefined,
        startTime,
        duration: Date.now() - startTime,
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : String(err)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ',
        description: 'Error during audio sending',
        error: errorMessage,
      })

      return {
        name: 'Audio Sending Test',
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ',
        error: new Error(errorMessage),
        startTime,
        duration: Date.now() - startTime,
      }
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
  /*
  async testTextToVideo(params: TextToVideoTestParams): Promise<VideoTestResult> {
    const startTime = Date.now()
    logger.info({
      message: 'üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
      description: 'Starting text to video generation test',
      params,
    })

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
      const response = await this.sendEvent('text-to-video/generate', {
        prompt: params.prompt,
        telegram_id: params.telegram_id || '123456789',
        is_ru: params.is_ru !== undefined ? params.is_ru : true,
        bot_name: params.bot_name || 'test_bot',
        model_id: params.model_id,
        _test: {
          api_error: true
        }
      })

      if (!response.success) {
        const errorMessage = typeof response.error === 'string' 
          ? response.error 
          : response.error instanceof Error 
            ? response.error.message 
            : 'Failed to generate video'
        throw new Error(errorMessage)
      }

      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å URL –∏–ª–∏ –±—É—Ñ–µ—Ä –≤–∏–¥–µ–æ
      const videoBuffer = response.details?.videoBuffer as Buffer

      const duration = Date.now() - startTime
      return {
        name: 'text-to-video',
        success: true,
        message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
        error: undefined,
        videoBuffer,
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : String(err)
      const error = new Error(errorMessage)

      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
        description: 'Error during video generation',
        error: errorMessage,
      })

      return {
        name: 'text-to-video',
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
        error: error instanceof Error ? error : new Error(errorMessage),
        duration,
        metadata: {
          startTime,
          endTime: Date.now(),
          testType: 'text-to-video',
        },
      }
    }
  }
  */
}
