/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ selectNeuroPhotoScene
 * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é: node simple-run-neurophoto.js
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–∫–æ–≤
const mockApi = require('./core/mock').default;

// –ú–æ–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
global.logger = {
  info: (...args) => console.log('[INFO]', ...args),
  error: (...args) => console.error('[ERROR]', ...args),
  warn: (...args) => console.warn('[WARN]', ...args),
  debug: (...args) => console.debug('[DEBUG]', ...args)
};

// –ú–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
global.database = {
  getUserBalance: () => Promise.resolve(100),
  getUserBalanceNotificationSettings: () => Promise.resolve({ enabled: true, threshold: 50 }),
  updateUserBalanceNotificationSettings: () => Promise.resolve({ success: true })
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  try {
    console.log('üñº –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è selectNeuroPhotoScene...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JavaScript
    const { runSelectNeuroPhotoSceneTests } = require('./tests/scenes/selectNeuroPhotoScene.test');
    
    if (typeof runSelectNeuroPhotoSceneTests !== 'function') {
      console.error('‚ùå –§—É–Ω–∫—Ü–∏—è runSelectNeuroPhotoSceneTests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const results = await runSelectNeuroPhotoSceneTests();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    let passed = 0;
    let failed = 0;
    
    results.forEach(result => {
      if (result.success) {
        console.log(`‚úÖ ${result.name}: –£–°–ü–ï–•`);
        passed++;
      } else {
        console.log(`‚ùå ${result.name}: –û–®–ò–ë–ö–ê`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
        failed++;
      }
    });
    
    console.log(`\nüìà –ò—Ç–æ–≥–æ: —É—Å–ø–µ—à–Ω–æ - ${passed}, —Å –æ—à–∏–±–∫–∞–º–∏ - ${failed}`);
    
    if (failed > 0) {
      process.exit(1);
    } else {
      process.exit(0);
    }
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests(); 