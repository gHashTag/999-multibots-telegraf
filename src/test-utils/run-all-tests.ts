import { logger } from '@/utils/logger'
import { testBroadcastMessage } from './tests/broadcast.test'
import { testClientsMigration } from './tests/clients-migration.test'
import { testImageToPrompt } from './tests/imageToPrompt.test'
import { testPaymentSystem } from './tests/payment.test'
import { testVoiceCost } from './tests/voice-cost-test'
import { TestResult } from './types'
import dotenv from 'dotenv'
import path from 'path'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NODE_ENV –≤ test
process.env.NODE_ENV = 'test'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.test
const envPath = path.resolve(process.cwd(), '.env.test')
dotenv.config({ path: envPath })

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ run-all-tests.ts:', {
  description: 'Checking environment variables',
  SUPABASE_URL: process.env.SUPABASE_URL,
  SUPABASE_SERVICE_KEY: process.env.SUPABASE_SERVICE_KEY?.slice(0, 10) + '...',
  SUPABASE_SERVICE_ROLE_KEY:
    process.env.SUPABASE_SERVICE_ROLE_KEY?.slice(0, 10) + '...',
  INNGEST_EVENT_KEY: process.env.INNGEST_EVENT_KEY?.slice(0, 10) + '...',
  ELEVENLABS_API_KEY: process.env.ELEVENLABS_API_KEY?.slice(0, 10) + '...',
  NODE_ENV: process.env.NODE_ENV,
  env_path: envPath,
})

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const requiredEnvVars = [
  'SUPABASE_URL',
  'SUPABASE_SERVICE_KEY',
  'SUPABASE_SERVICE_ROLE_KEY',
  'INNGEST_EVENT_KEY',
  'ELEVENLABS_API_KEY',
]

const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName])

if (missingEnvVars.length > 0) {
  logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
    description: 'Missing required environment variables',
    missing_vars: missingEnvVars,
  })
  process.exit(1)
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
export async function runAllTests(): Promise<TestResult[]> {
  const results: TestResult[] = []

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...', {
      description: 'Starting all tests',
    })

    // –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    logger.info('üí∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...', {
      description: 'Starting payment system tests',
    })
    const paymentResults = await testPaymentSystem()
    results.push(
      ...(Array.isArray(paymentResults) ? paymentResults : [paymentResults])
    )

    // –¢–µ—Å—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info('üì® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏...', {
      description: 'Starting broadcast tests',
    })
    const broadcastResults = await testBroadcastMessage()
    results.push(
      ...(Array.isArray(broadcastResults)
        ? broadcastResults
        : [broadcastResults])
    )

    // –¢–µ—Å—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    logger.info('üí∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞...', {
      description: 'Starting voice cost tests',
    })
    const voiceCostResults = await testVoiceCost()
    results.push(voiceCostResults)

    // –¢–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...', {
      description: 'Starting client migration tests',
    })
    const migrationResults = await testClientsMigration()
    results.push(
      ...(Array.isArray(migrationResults)
        ? migrationResults
        : [migrationResults])
    )

    // –¢–µ—Å—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç—ã
    logger.info('üñºÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...', {
      description: 'Starting image to prompt tests',
    })
    const imageResults = await testImageToPrompt()
    results.push(imageResults)

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalTests = results.length
    const passedTests = results.filter(r => r.success).length
    const failedTests = results.filter(r => !r.success).length
    const successRate = (passedTests / totalTests) * 100

    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      description: 'Test results summary',
      total_tests: totalTests,
      passed_tests: passedTests,
      failed_tests: failedTests,
      success_rate: `${successRate.toFixed(2)}%`,
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    const failedTestResults = results.filter(r => !r.success)
    if (failedTestResults.length > 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
        description: 'Failed tests details',
        failed_tests: failedTestResults.map(r => ({
          name: r.name,
          message: r.message,
          error: r.error instanceof Error ? r.error.message : String(r.error),
        })),
      })
    }

    return results
  } catch (error) {
    const err = error instanceof Error ? error : new Error(String(error))

    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Critical error in test execution',
      error: err.message,
      stack: err.stack,
    })

    results.push({
      name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      error: err,
    })

    return results
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  ;(async () => {
    try {
      const results = await runAllTests()
      const failedTests = results.filter(r => !r.success)

      if (failedTests.length > 0) {
        console.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏:', failedTests)
        process.exit(1)
      } else {
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
        process.exit(0)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
      process.exit(1)
    }
  })()
}
