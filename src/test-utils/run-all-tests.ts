import { logger } from '@/utils/logger'
import { TestResult } from './interfaces'
import { runBalanceTests } from './run-balance-test'
import { testPaymentSystem } from './tests/payment.test'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.NODE_ENV = 'test'

export async function runAllTests(): Promise<TestResult[]> {
  const allResults: TestResult[] = []

  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', {
      description: 'Starting all tests',
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞
    const balanceResults = await runBalanceTests()
    allResults.push(...balanceResults)

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const paymentResults = await testPaymentSystem()
    allResults.push(paymentResults)

    return allResults
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤',
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })

    return [
      {
        name: 'All Tests',
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${
          error instanceof Error ? error.message : String(error)
        }`,
      },
    ]
  }
}

async function runTests() {
  try {
    const results = await runAllTests()

    for (const result of results) {
      logger.info({
        message: result.success
          ? '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'
          : '‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω',
        description: 'Test completed',
        name: result.name,
        success: result.success,
        details: result.message,
        error: result.error,
      })
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤',
      description: 'Error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
