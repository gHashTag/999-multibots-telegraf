import { logger } from '@/utils/logger'
import { TestResult } from './types'
import { runAllPaymentTests } from './tests/payment.test'
import { runBalanceTests } from './tests/balance.test'
import { InngestTestEngine } from './inngest-test-engine'
import { paymentProcessor } from '@/inngest-functions/paymentProcessor'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
const inngestTestEngine = new InngestTestEngine()

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
inngestTestEngine.register('payment/process', paymentProcessor)

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
export const runAllTests = async () => {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', {
    description: 'Starting all tests',
  })

  const results: TestResult[] = []

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const paymentResults = await runAllPaymentTests()
    results.push(...paymentResults)

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∞
    const balanceResults = await runBalanceTests()
    results.push(...balanceResults)

    // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r.success).length
    const failCount = results.filter(r => !r.success).length

    logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      description: 'Test results summary',
      total_tests: results.length,
      successful_tests: successCount,
      failed_tests: failCount,
    })

    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const failedTests = results.filter(r => !r.success)
    if (failedTests.length > 0) {
      logger.error('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
        description: 'Failed tests details',
        tests: failedTests.map(t => ({
          name: t.name,
          message: t.message,
          error: t.error,
        })),
      })
      process.exit(1)
    }

    logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!', {
      description: 'All tests passed successfully',
    })
    process.exit(0)
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', {
      description: 'Critical error running tests',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests()
