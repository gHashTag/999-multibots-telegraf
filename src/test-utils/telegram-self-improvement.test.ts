/**
 * –¢–µ—Å—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ Telegram-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç –æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Telegram
 * –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
 */

import '../utils/websocket-polyfill.js';
import readline from 'readline';
import { createAgent } from '../bot/agent/index.js';
import { TaskType, Task } from '../bot/agent/state.js';
import path from 'path';
import fs from 'fs';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MCP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const MCP_SERVER_URL = process.env.MCP_SERVER_URL || `ws://localhost:${process.env.MOCK_SERVER_PORT || '8888'}`;
const MCP_API_KEY = process.env.MCP_API_KEY || 'test-api-key';

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const TEST_TMP_DIR = path.join(process.cwd(), 'test-tmp');
if (!fs.existsSync(TEST_TMP_DIR)) {
  fs.mkdirSync(TEST_TMP_DIR, { recursive: true });
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${TEST_TMP_DIR}`);
}

// –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ Telegram
const telegramState = {
  agent: createAgent({
    id: 'telegram-test-agent',
    mcpConfig: {
      serverUrl: MCP_SERVER_URL,
      apiKey: MCP_API_KEY
    }
  }),
  initialized: false,
  conversations: new Map(),
  chatHistory: [] // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
const addToHistory = (role: 'user' | 'assistant', message: string) => {
  telegramState.chatHistory.push({ 
    role, 
    message, 
    timestamp: new Date() 
  });
  
  // –í—ã–≤–æ–¥–∏–º —á–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
  if (role === 'user') {
    console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${message}`);
  } else {
    console.log(`\nü§ñ –ë–æ—Ç: ${message}`);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
const processUserInput = async (input: string): Promise<void> => {
  try {
    addToHistory('user', input);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if (input.startsWith('/')) {
      switch (input) {
        case '/start':
          addToHistory('assistant', 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã —è –º–æ–≥ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.');
          return;
        case '/help':
          addToHistory('assistant', 'üîç –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n1. "–ù–∞—É—á–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"\n2. "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª utils/logger.ts —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"');
          return;
        case '/improve':
          addToHistory('assistant', 'üß† –û–ø–∏—à–∏—Ç–µ, —á–µ–º—É –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –∏–ª–∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ:');
          return;
        case '/create':
          addToHistory('assistant', 'üìù –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∞–π–ª –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:');
          return;
        case '/background':
          addToHistory('assistant', 'üîÑ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ñ–æ–Ω–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:');
          return;
        case '/check_tasks':
          if (!telegramState.initialized) {
            addToHistory('assistant', '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            return;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
          const allTasks = telegramState.agent.getAllTasks();
          const backgroundTasks = allTasks.filter((task: Task) => 
            task.type === TaskType.BACKGROUND_IMPROVEMENT
          );
          
          if (backgroundTasks.length === 0) {
            addToHistory('assistant', 'üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.');
            return;
          }
          
          let statusMessage = 'üìä –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:\n\n';
          
          for (const task of backgroundTasks) {
            statusMessage += `ID: ${task.id}\n`;
            statusMessage += `–°—Ç–∞—Ç—É—Å: ${task.status}\n`;
            statusMessage += `–°–æ–∑–¥–∞–Ω–∞: ${task.created.toLocaleString()}\n`;
            statusMessage += `–ó–∞–¥–∞—á–∞: ${task.description.substring(0, 50)}${task.description.length > 50 ? '...' : ''}\n`;
            
            if (task.status === 'COMPLETED' && task.result) {
              const createdFiles = task.result.createdFiles || [];
              if (createdFiles.length > 0) {
                statusMessage += `\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n`;
                createdFiles.forEach((file: string) => {
                  statusMessage += `- ${file}\n`;
                });
              }
            }
            
            statusMessage += '\n-----------------\n\n';
          }
          
          addToHistory('assistant', statusMessage);
          return;
        case '/status':
          addToHistory('assistant', `üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: ${telegramState.initialized ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}`);
          return;
        case '/history':
          const historyText = telegramState.chatHistory
            .map(item => `[${item.timestamp.toLocaleTimeString()}] ${item.role === 'user' ? 'üë§' : 'ü§ñ'} ${item.message}`)
            .join('\n');
          console.log(`\nüìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n${historyText}`);
          return;
        case '/cleanup':
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          if (fs.existsSync(TEST_TMP_DIR)) {
            fs.readdirSync(TEST_TMP_DIR).forEach(file => {
              const filePath = path.join(TEST_TMP_DIR, file);
              fs.unlinkSync(filePath);
              console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
            });
            addToHistory('assistant', 'üßπ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
          }
          return;
        case '/exit':
          console.log('üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
          await telegramState.agent.shutdown();
          rl.close();
          process.exit(0);
        case '/set_commands':
          addToHistory('assistant', 'üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...');
          
          // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
          const commandsList = [
            { command: 'start', description: '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥' },
            { command: 'help', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å' },
            { command: 'analyze', description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞' },
            { command: 'generate', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞' },
            { command: 'refactor', description: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞' },
            { command: 'test', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤' },
            { command: 'docs', description: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏' },
            { command: 'deps', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏' },
            { command: 'git', description: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git' },
            { command: 'improve', description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ' },
            { command: 'background', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ' },
            { command: 'check_tasks', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á' },
            { command: 'status', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞' }
          ];
          
          // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
          let commandsOutput = 'üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n\n';
          commandsList.forEach(cmd => {
            commandsOutput += `/${cmd.command} - ${cmd.description}\n`;
          });
          
          addToHistory('assistant', commandsOutput);
          return;
        default:
          addToHistory('assistant', '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
          return;
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (!telegramState.initialized) {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...');
      await telegramState.agent.initialize();
      telegramState.initialized = true;
      console.log('‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const selfImprovementKeywords = [
      '–Ω–∞—É—á–∏—Å—å', '—É–ª—É—á—à–∏ —Å–µ–±—è', '—Å—Ç–∞–Ω—å –ª—É—á—à–µ', '—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Å—è', 
      '—Ä–∞–∑–≤–∏–≤–∞–π—Å—è', '–æ–±—É—á–∏—Å—å', '–∏–∑—É—á–∏', '–¥–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏—é', 
      '–æ–±–Ω–æ–≤–∏', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', '—É–ª—É—á—à–∏ —Å–≤–æ–π –∫–æ–¥'
    ];
    
    const fileCreationKeywords = [
      '—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª', '—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª', '–Ω–æ–≤—ã–π —Ñ–∞–π–ª', 
      '–¥–æ–±–∞–≤—å —Ñ–∞–π–ª', '—Å–¥–µ–ª–∞–π —Ñ–∞–π–ª', '–Ω–∞–ø–∏—à–∏ —Ñ–∞–π–ª'
    ];
    
    const backgroundKeywords = [
      '—Ñ–æ–Ω–æ–≤—ã–π', '—Ñ–æ–Ω–æ–º', '–∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ', '—Ñ–æ–Ω–æ–≤–æ–º', 
      '—Ñ–æ–Ω–æ–≤–æ–µ', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ'
    ];
    
    const isSelfImprovement = selfImprovementKeywords.some(keyword => 
      input.toLowerCase().includes(keyword.toLowerCase())
    );

    const isFileCreation = fileCreationKeywords.some(keyword => 
      input.toLowerCase().includes(keyword.toLowerCase())
    );
    
    const isBackground = backgroundKeywords.some(keyword => 
      input.toLowerCase().includes(keyword.toLowerCase())
    );
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    let taskType = TaskType.CODE_GENERATION; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (isBackground) {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ...');
      addToHistory('assistant', 'üîÑ –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É–ª—É—á—à–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É...');
      
      try {
        if (!telegramState.initialized) {
          console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...');
          await telegramState.agent.initialize();
          telegramState.initialized = true;
          console.log('‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        const backgroundTask = await telegramState.agent.startBackgroundImprovement(
          input,
          'test-user-id'
        );
        
        addToHistory('assistant', `üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è (ID: ${backgroundTask.taskId})\n\n–Ø –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ–æ–±—â—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.`);
      } catch (error) {
        console.error('Error starting background improvement:', error);
        addToHistory('assistant', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      return;
    } else if (isSelfImprovement || isFileCreation) {
      taskType = TaskType.SELF_IMPROVEMENT;
      
      if (isFileCreation) {
        console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...');
        addToHistory('assistant', 'üìù –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª. –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º...');
      } else {
        console.log('üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ...');
        addToHistory('assistant', 'üß† –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —É–ª—É—á—à–∏–ª —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º...');
      }
    } else {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≥–µ–Ω—Ç–∞
    const dialogResult = await telegramState.agent.processDialog(
      'test-user-id',
      input,
      taskType
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory('assistant', dialogResult.response);
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã
    if (isFileCreation && dialogResult.result && dialogResult.result.createdFiles) {
      const createdFiles = dialogResult.result.createdFiles;
      if (createdFiles.length > 0) {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${createdFiles.length}`);
        createdFiles.forEach(file => console.log(`   - ${file}`));
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    addToHistory('assistant', `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
const runTelegramTest = async (): Promise<void> => {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —ç–º—É–ª—è—Ü–∏—é Telegram');
    console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('   /start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥');
    console.log('   /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å');
    console.log('   /improve - –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ');
    console.log('   /create - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª');
    console.log('   /background - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ');
    console.log('   /check_tasks - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á');
    console.log('   /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞');
    console.log('   /history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞');
    console.log('   /cleanup - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã');
    console.log('   /exit - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç');
    console.log('\nüí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
    console.log('   ‚Ä¢ –°–æ–∑–¥–∞–π —Ñ–∞–π–ª src/utils/logger.ts —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('   ‚Ä¢ –ù–∞—É—á–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å API —Å–µ—Ä–≤–∏—Å–æ–≤');
    console.log('\nüí° –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rl.on('line', async (line) => {
      await processUserInput(line.trim());
      console.log('\nüí° –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:');
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥
    rl.on('close', async () => {
      console.log('üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      if (telegramState.initialized) {
        await telegramState.agent.shutdown();
      }
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    if (telegramState.initialized) {
      await telegramState.agent.shutdown();
    }
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTelegramTest(); 