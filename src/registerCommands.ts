import { Telegraf, Scenes, session, Markup } from 'telegraf'
import { type MyContext } from './interfaces'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
import { levels } from './menu/mainMenu'
import { getUserDetailsSubscription } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getUserInfo } from './handlers/getUserInfo'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
import { handleRestartVideoGeneration } from './handlers/handleVideoRestart'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ index
import {
  avatarBrainWizard,
  textToVideoWizard,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  imageToPromptWizard,
  improvePromptWizard,
  sizeWizard,
  textToImageWizard,
  imageToVideoWizard,
  cancelPredictionsWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  selectModelWizard,
  voiceAvatarWizard,
  textToSpeechWizard,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  levelQuestWizard,
  neuroCoderScene,
  lipSyncWizard,
  startScene,
  chatWithAvatarWizard,
  helpScene,
  balanceScene,
  menuScene,
  subscriptionScene,
  inviteScene,
  getRuBillWizard,
  subscriptionCheckScene,
  createUserScene,
  checkBalanceScene,
  uploadVideoScene,
} from './scenes'

import { defaultSession } from './store'

import { get100Command } from './commands/get100Command'
import { handleTechSupport } from './commands/handleTechSupport'
import { handleBuy } from './handlers/handleBuy'
import { isRussian } from '@/helpers'
import { registerPaymentActions } from './handlers/paymentActions'
//https://github.com/telegraf/telegraf/issues/705
export const stage = new Scenes.Stage<MyContext>([
  startScene,
  menuScene,
  helpScene,
  inviteScene,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  subscriptionScene,
  subscriptionCheckScene,
  checkBalanceScene,
  balanceScene,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  textToImageWizard,
  textToVideoWizard,
  imageToVideoWizard,
  imageToPromptWizard,
  improvePromptWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  uploadVideoScene,
  voiceAvatarWizard,
  textToSpeechWizard,
  lipSyncWizard,
  avatarBrainWizard,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  getRuBillWizard,
  levelQuestWizard,
  createUserScene,
])

export function registerCommands({ bot }: { bot: Telegraf<MyContext> }) {
  bot.use(session({ defaultSession: () => ({ ...defaultSession }) }))
  bot.use(stage.middleware())

  // --- –ù–ê–ß–ê–õ–û: –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (ACTION) ---

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–ö–ò "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" (Callback Query)
  bot.action('go_main_menu', async ctx => {
    logger.info('GLOBAL ACTION: go_main_menu', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in go_main_menu action:', {
        error,
        telegramId: ctx.from?.id,
      })
      // –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é.')
      } catch {
        /* ignore */
      }
    }
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–ö–ò "–°–ø—Ä–∞–≤–∫–∞" (Callback Query)
  bot.action('go_help', async ctx => {
    logger.info('GLOBAL ACTION: go_help', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –í—Ö–æ–¥ –≤ helpScene. –ö–æ–Ω—Ç–µ–∫—Å—Ç (ctx.session.mode) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–´–ó–´–í–ê–Æ–©–ï–ô —Å—Ç–æ—Ä–æ–Ω–æ–π/—Å—Ü–µ–Ω–æ–π.
      // –ï—Å–ª–∏ ctx.session.mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, helpScene –ø–æ–∫–∞–∂–µ—Ç –æ–±—â—É—é —Å–ø—Ä–∞–≤–∫—É.
      await ctx.scene.enter('helpScene')
    } catch (error) {
      logger.error('Error in go_help action:', {
        error,
        telegramId: ctx.from?.id,
      })
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.')
      } catch {
        /* ignore */
      }
    }
  })

  // –î–û–ë–ê–í–ò–¢–¨: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–ö–ò "–ù–∞–∑–∞–¥" (Callback Query)
  bot.action('go_back', async ctx => {
    logger.info('GLOBAL ACTION: go_back', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã. –ï—Å–ª–∏ —ç—Ç–æ helpScene, –æ–Ω–∞ —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
      // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ü–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –≤—ã–π–¥–µ—Ç.
      await ctx.scene.leave()
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
      // try { await ctx.deleteMessage(); } catch { /* ignore */ }
    } catch (error) {
      logger.error('Error in go_back action:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // --- –ö–û–ù–ï–¶: –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (ACTION) ---

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ /start, /support
  bot.command('start', async ctx => {
    console.log('CASE bot.command: start')
    // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –≤—Ö–æ–¥–∏–º –≤ createUserScene
    ctx.session = { ...defaultSession }
    await ctx.scene.leave() // –Ø–≤–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±–æ–π —Å—Ü–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.CreateUserScene)
  })

  bot.command('support', async ctx => {
    console.log('CASE bot.command: support')
    await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await handleTechSupport(ctx)
  })

  // --- –ù–ê–ß–ê–õ–û: –ì–õ–û–ë–ê–õ–¨–ù–´–ï HEARS –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö ---

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–ö–ò "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" (ReplyKeyboard)
  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
    logger.info('GLOBAL HEARS: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { telegramId: ctx.from?.id })
    try {
      await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
      await ctx.scene.enter(ModeEnum.MainMenu) // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –º–µ–Ω—é
    } catch (error) {
      logger.error('Error in –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ù–û–ü–ö–ò "–°–ø—Ä–∞–≤–∫–∞" (ReplyKeyboard)
  bot.hears(['‚ùì –°–ø—Ä–∞–≤–∫–∞', '‚ùì Help'], async ctx => {
    logger.info('GLOBAL HEARS: –°–ø—Ä–∞–≤–∫–∞', { telegramId: ctx.from?.id })
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã —Å–ø—Ä–∞–≤–∫–∞ –∑–Ω–∞–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –º—ã –Ω–µ –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã)
      // ctx.session.mode = ctx.session.__scenes?.current ?? ModeEnum.Help;
      await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
      await ctx.scene.enter(ModeEnum.Help) // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Å–ø—Ä–∞–≤–∫–∏ (–£–±–µ–¥–∏—Å—å, —á—Ç–æ ModeEnum.Help = 'helpScene')
    } catch (error) {
      logger.error('Error in –°–ø—Ä–∞–≤–∫–∞ hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // --- –ö–û–ù–ï–¶: –ì–õ–û–ë–ê–õ–¨–ù–´–ï HEARS –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö ---

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.hears([levels[103].title_ru, levels[103].title_en], async ctx => {
    console.log('CASE bot.hears: üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support')
    await ctx.scene.leave()
    await handleTechSupport(ctx)
  })

  bot.hears([levels[105].title_ru, levels[105].title_en], async ctx => {
    console.log('CASE bot.hears: üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É / Subscribe')
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.SubscriptionScene
    await ctx.scene.enter(ModeEnum.SubscriptionScene)
  })

  bot.hears([levels[100].title_ru, levels[100].title_en], async ctx => {
    console.log('CASE bot.hears: üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å / Top up balance')
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.PaymentScene
    ctx.session.subscription = SubscriptionType.STARS
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })

  bot.hears([levels[101].title_ru, levels[101].title_en], async ctx => {
    console.log('CASE bot.hears: ü§ë –ë–∞–ª–∞–Ω—Å / Balance')
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.Balance
    await ctx.scene.enter(ModeEnum.Balance)
  })

  // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu ---
  bot.command('menu', async ctx => {
    const { telegramId } = getUserInfo(ctx)
    logger.info({
      message: `[Command /menu START] User: ${telegramId}. Leaving scene, resetting session and checking subscription...`,
      telegramId,
    })

    await ctx.scene.leave() // <-- –Ø–í–ù–´–ô –í–´–•–û–î –ò–ó –°–¶–ï–ù–´
    ctx.session = { ...defaultSession } // Reset session –ü–û–°–õ–ï –≤—ã—Ö–æ–¥–∞

    try {
      const userDetails = await getUserDetailsSubscription(telegramId)
      logger.info({
        message: `[Command /menu DETAILS] User: ${telegramId}. Status received.`,
        telegramId,
        details: userDetails,
      })

      if (userDetails.isSubscriptionActive) {
        logger.info({
          message: `[Command /menu DECISION] User: ${telegramId}. Subscription ACTIVE. Entering 'menuScene'.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu
        return ctx.scene.enter(ModeEnum.MainMenu)
      } else {
        logger.info({
          message: `[Command /menu DECISION] User: ${telegramId}. Subscription INACTIVE. Entering SubscriptionScene.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu
        return ctx.scene.enter(ModeEnum.SubscriptionScene)
      }
    } catch (error) {
      logger.error({
        message: `[Command /menu ERROR] Failed to get user details for User: ${telegramId}`,
        telegramId,
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.'
      )
    }
  })

  bot.command('get100', async ctx => {
    console.log('CASE: get100')
    await get100Command(ctx)
  })

  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–∞–Ω–¥—É /buy –∏–∑ composer –≤ bot
  bot.command('buy', async ctx => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å—Ü–µ–Ω—É
    console.log('[Command /buy] Entering payment scene...')
    logger.info(`[Command /buy] User: ${ctx.from?.id}. Entering payment scene.`)
    ctx.session.subscription = SubscriptionType.STARS
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })

  bot.command('invite', async ctx => {
    console.log('CASE: invite')
    await ctx.scene.enter('inviteScene')
  })

  bot.command('balance', async ctx => {
    console.log('CASE: balance')
    await ctx.scene.enter('balanceScene')
  })

  bot.command('help', async ctx => {
    await ctx.scene.enter('step0')
  })

  bot.command('neuro_coder', async ctx => {
    await ctx.scene.enter('neuroCoderScene')
  })

  // Register payment handlers (pre_checkout_query, successful_payment, etc.)
  registerPaymentActions(bot)

  // <<< –ù–ê–ß–ê–õ–û: –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò HEARS >>>
  bot.hears([levels[106].title_ru, levels[106].title_en], async ctx => {
    console.log('CASE bot.hears: ‚ùì –°–ø—Ä–∞–≤–∫–∞ / Help')
    if (!ctx.session?.currentScene) {
      ctx.session.mode = ModeEnum.Help // –û–±—â–∏–π —Ä–µ–∂–∏–º —Å–ø—Ä–∞–≤–∫–∏
    } // –ï—Å–ª–∏ currentScene —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, helpScene –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ
    await ctx.scene.enter(ModeEnum.Help) // HelpScene ID = 'helpScene'
  })

  bot.hears([levels[104].title_ru, levels[104].title_en], async ctx => {
    console.log('CASE bot.hears: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main menu')
    // –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ /menu
    const { telegramId } = getUserInfo(ctx)
    logger.info({
      message: `[HEARS –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é START] User: ${telegramId}. Resetting session and checking subscription status...`,
      telegramId,
    })
    ctx.session = { ...defaultSession } // Reset session

    try {
      const userDetails = await getUserDetailsSubscription(telegramId)
      logger.info({
        message: `[HEARS –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DETAILS] User: ${telegramId}. Status received.`,
        telegramId,
        details: userDetails,
      })

      if (userDetails.isSubscriptionActive) {
        logger.info({
          message: `[HEARS –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DECISION] User: ${telegramId}. Subscription ACTIVE. Entering 'menuScene'.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu
        await ctx.scene.enter(ModeEnum.MainMenu) // MenuScene ID = 'menuScene'
      } else {
        logger.info({
          message: `[HEARS –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DECISION] User: ${telegramId}. Subscription INACTIVE. Entering SubscriptionScene.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu // –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        await ctx.scene.enter(ModeEnum.SubscriptionScene)
      }
    } catch (error) {
      logger.error({
        message: `[HEARS –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ERROR] Failed to get user details for User: ${telegramId}`,
        telegramId,
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.'
      )
    }
  })

  bot.hears([levels[102].title_ru, levels[102].title_en], async ctx => {
    console.log('CASE bot.hears: üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ / Invite a friend')
    ctx.session.mode = ModeEnum.Invite // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
    await ctx.scene.enter(ModeEnum.Invite) // InviteScene ID = 'inviteScene'
  })
  // <<< –ö–û–ù–ï–¶: –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò HEARS >>>

  bot.command('info', async ctx => {
    // ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /info ...
  })

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
  bot.action(/buy_(\d+)_days/, handleBuy)

  // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query –¥–ª—è Telegram Payments (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  bot.on('pre_checkout_query', ctx => ctx.answerPreCheckoutQuery(true))

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ successful_payment
  bot.on('successful_payment', async ctx => {
    // ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment ...
  })

  // --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π ---
  registerPaymentActions(bot)

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ ---
  bot.action(/^restart_video:(.+)$/, handleRestartVideoGeneration)

  // --- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î/–¢–ï–ö–°–¢–ê ---
  // –õ–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ
  bot.on('text', async ctx => {
    console.log('CASE bot.on: text')
    if (ctx.scene.current) {
      console.log(
        ` -> Text in scene: ${ctx.scene.current.id}. Ignoring global handler.`
      )
      return // –í–∞–∂–Ω–æ! –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ü–µ–Ω–∞.
    }

    // –ï—Å–ª–∏ –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    console.log(
      ` -> Text outside scene: ${ctx.message.text}. Sending unknown command message.`
    )
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu
        ? 'ü´§ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.'
        : 'ü´§ Unknown command. Please use the menu buttons.'
    )
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.scene.enter(ModeEnum.MainMenu)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
  bot.on('callback_query', async ctx => {
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    console.warn('Unhandled callback_query:', ctx.callbackQuery)
  })

  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  console.log(
    'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
    stage.scenes.size
  )
}
