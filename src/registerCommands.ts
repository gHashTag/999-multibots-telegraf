import { Telegraf, Scenes, session } from 'telegraf'
import { MyContext } from './interfaces'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
import { levels } from './menu/mainMenu'
import { getUserDetails } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getUserInfo } from './handlers/getUserInfo'
import { setupErrorHandler } from './helpers/error/errorHandler'
import { handlePriceCommand } from './handlers/handlePriceCommand'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ index
import {
  avatarBrainWizard,
  textToVideoWizard,
  emailWizard,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  imageToPromptWizard,
  improvePromptWizard,
  sizeWizard,
  textToImageWizard,
  imageToVideoWizard,
  cancelPredictionsWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  selectModelWizard,
  voiceAvatarWizard,
  textToSpeechWizard,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  levelQuestWizard,
  neuroCoderScene,
  lipSyncWizard,
  startScene,
  chatWithAvatarWizard,
  helpScene,
  balanceScene,
  menuScene,
  subscriptionScene,
  inviteScene,
  getRuBillWizard,
  subscriptionCheckScene,
  createUserScene,
  checkBalanceScene,
  uploadVideoScene,
} from './scenes'

import { setupLevelHandlers } from './handlers/setupLevelHandlers'

import { defaultSession } from './store'

import { get100Command } from './commands/get100Command'
import { handleTechSupport } from './commands/handleTechSupport'
import { handleBuy } from './handlers/handleBuy'
import { isRussian } from '@/helpers'
//https://github.com/telegraf/telegraf/issues/705
export const stage = new Scenes.Stage<MyContext>([
  startScene,
  subscriptionScene,
  subscriptionCheckScene,
  createUserScene,
  checkBalanceScene,
  chatWithAvatarWizard,
  menuScene,
  getRuBillWizard,
  balanceScene,
  avatarBrainWizard,
  imageToPromptWizard,
  emailWizard,
  textToImageWizard,
  improvePromptWizard,
  sizeWizard,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  textToVideoWizard,
  imageToVideoWizard,
  cancelPredictionsWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  selectModelWizard,
  voiceAvatarWizard,
  textToSpeechWizard,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  neuroCoderScene,
  lipSyncWizard,
  helpScene,
  inviteScene,
  levelQuestWizard,
  uploadVideoScene,
])

export function registerCommands({ bot }: { bot: Telegraf<MyContext> }) {
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  setupErrorHandler(bot)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  bot.use(session({ defaultSession: () => ({ ...defaultSession }) }))
  bot.use(stage.middleware())

  setupLevelHandlers(bot as Telegraf<MyContext>)

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
  bot.command('start', async ctx => {
    console.log('CASE bot.command: start')
    ctx.session = { ...defaultSession } // Reset session
    ctx.session.mode = ModeEnum.StartScene
    await ctx.scene.enter(ModeEnum.CreateUserScene)
  })

  bot.command('support', async ctx => {
    console.log('CASE bot.command: support')
    await handleTechSupport(ctx)
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É price
  bot.command('price', handlePriceCommand)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.hears([levels[103].title_ru, levels[103].title_en], async ctx => {
    console.log('CASE bot.hears: üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support')
    await handleTechSupport(ctx)
  })

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –≤–µ–¥–µ—Ç –≤ —Å—Ü–µ–Ω—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  bot.hears([levels[105].title_ru, levels[105].title_en], async ctx => {
    console.log('CASE bot.hears: üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É / Subscribe')
    ctx.session.mode = ModeEnum.SubscriptionScene
    await ctx.scene.enter(ModeEnum.SubscriptionScene)
  })

  // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
  bot.hears([levels[100].title_ru, levels[100].title_en], async ctx => {
    console.log('CASE bot.hears: üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å / Top up balance')
    ctx.session.mode = ModeEnum.PaymentScene // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    ctx.session.subscription = SubscriptionType.STARS // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'stars' –∫–∞–∫ –º–∞—Ä–∫–µ—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await ctx.scene.enter(ModeEnum.PaymentScene) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  })

  // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ë–∞–ª–∞–Ω—Å
  bot.hears([levels[101].title_ru, levels[101].title_en], async ctx => {
    console.log('CASE bot.hears: ü§ë –ë–∞–ª–∞–Ω—Å / Balance')
    ctx.session.mode = ModeEnum.Balance // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
    await ctx.scene.enter(ModeEnum.Balance) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –±–∞–ª–∞–Ω—Å–∞
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ü–µ–Ω–∞–º–∏
  bot.hears(['üí∞ –¶–µ–Ω—ã / Prices'], async ctx => {
    console.log('CASE bot.hears: üí∞ –¶–µ–Ω—ã / Prices')
    await handlePriceCommand(ctx)
  })

  bot.command('menu', async ctx => {
    const { telegramId } = getUserInfo(ctx) // –ü–æ–ª—É—á–∞–µ–º ID
    logger.info({
      message: `[Command /menu START] User: ${telegramId}. Resetting session and checking subscription status...`,
      telegramId,
    })
    ctx.session = { ...defaultSession } // Reset session

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userDetails = await getUserDetails(telegramId)
      logger.info({
        message: `[Command /menu DETAILS] User: ${telegramId}. Status received.`,
        telegramId,
        details: userDetails,
      })

      // –®–∞–≥ 2: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      if (userDetails.isSubscriptionActive) {
        // --- –ï–°–õ–ò –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ù–ê ---
        logger.info({
          message: `[Command /menu DECISION] User: ${telegramId}. Subscription ACTIVE. Entering 'menuScene'.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—É–±–µ–¥–∏—Å—å, —á—Ç–æ ID 'menuScene' –≤–µ—Ä–Ω—ã–π)
        return ctx.scene.enter(ModeEnum.MainMenu)
      } else {
        // --- –ï–°–õ–ò –ü–û–î–ü–ò–°–ö–ò –ù–ï–¢ ---
        logger.info({
          message: `[Command /menu DECISION] User: ${telegramId}. Subscription INACTIVE. Entering SubscriptionScene.`,
          telegramId,
        })
        ctx.session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º (—á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é)
        // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        return ctx.scene.enter(ModeEnum.SubscriptionScene) // –£–±–µ–¥–∏—Å—å, —á—Ç–æ ModeEnum.SubscriptionScene = 'subscription_scene'
      }
    } catch (error) {
      // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      logger.error({
        message: `[Command /menu ERROR] Failed to get user details for User: ${telegramId}`,
        telegramId,
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.'
      )
      // –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      // return ctx.scene.enter('menuScene');
      return
    }
  })

  bot.command('get100', async ctx => {
    console.log('CASE: get100')
    await get100Command(ctx)
  })

  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–∞–Ω–¥—É /buy –∏–∑ composer –≤ bot
  bot.command('buy', async ctx => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å—Ü–µ–Ω—É
    console.log('[Command /buy] Entering payment scene...')
    logger.info(`[Command /buy] User: ${ctx.from?.id}. Entering payment scene.`)
    ctx.session.subscription = SubscriptionType.STARS
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })

  bot.command('invite', async ctx => {
    console.log('CASE: invite')
    await ctx.scene.enter('inviteScene')
  })

  bot.command('balance', async ctx => {
    console.log('CASE: balance')
    await ctx.scene.enter('balanceScene')
  })

  bot.command('help', async ctx => {
    await ctx.scene.enter('step0')
  })

  bot.command('neuro_coder', async ctx => {
    await ctx.scene.enter('neuroCoderScene')
  })

  // --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –î–õ–Ø –ü–û–ö–£–ü–ö–ò –ó–í–ï–ó–î ---
  bot.action(/top_up_(\d+)$/, async ctx => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callbackQuery –∏ data —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      const data = ctx.callbackQuery.data
      const isRu = isRussian(ctx) // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
      console.log(
        `[Global Action top_up_X] Received callback: ${data}. Calling handleBuy.`
      )
      try {
        await handleBuy({ ctx, data, isRu })
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ handleBuy –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
        await ctx.answerCbQuery()
      } catch (error) {
        console.error(
          `[Global Action top_up_X] Error calling handleBuy for ${data}:`,
          error
        )
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        try {
          await ctx.answerCbQuery(
            isRu ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞' : '‚ö†Ô∏è Error creating invoice'
          )
        } catch (e) {
          console.error('Failed to answer callback query with error')
        }
      }
    } else {
      console.error('[Global Action top_up_X] Invalid callback query received.')
      // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫
      try {
        await ctx.answerCbQuery()
      } catch (e) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        console.error(
          '[Global Action top_up_X] Failed to answer callback query even after invalid query:',
          e
        )
      }
    }
  })
  // --- –ö–û–ù–ï–¶ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---
}
