import { Telegraf, Scenes, session, Markup } from 'telegraf'
import { message, callbackQuery } from 'telegraf/filters'
import { MyContext } from './interfaces'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
import { levels } from './menu/mainMenu'
import { getUserDetailsSubscription } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getUserInfo } from './handlers/getUserInfo'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
import { handleRestartVideoGeneration } from './handlers/handleVideoRestart'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ index
import {
  avatarBrainWizard,
  textToVideoWizard,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  imageToPromptWizard,
  improvePromptWizard,
  sizeWizard,
  textToImageWizard,
  imageToVideoWizard,
  cancelPredictionsWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  selectModelWizard,
  voiceAvatarWizard,
  textToSpeechWizard,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  levelQuestWizard,
  neuroCoderScene,
  lipSyncWizard,
  startScene,
  chatWithAvatarWizard,
  helpScene,
  balanceScene,
  menuScene,
  subscriptionScene,
  inviteScene,
  getRuBillWizard,
  subscriptionCheckScene,
  createUserScene,
  checkBalanceScene,
  uploadVideoScene,
} from './scenes'

import { defaultSession } from './store'
//
import { get100Command } from './commands/get100Command'
import { handleTechSupport } from './commands/handleTechSupport'
import { handleBuy } from './handlers/handleBuy'
import { isRussian } from '@/helpers'
import { registerPaymentActions } from './handlers/paymentActions'
import { handleTextMessage } from './handlers/handleTextMessage'
//https://github.com/telegraf/telegraf/issues/705
export const stage = new Scenes.Stage<MyContext>([
  startScene,
  menuScene,
  helpScene,
  inviteScene,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  subscriptionScene,
  subscriptionCheckScene,
  checkBalanceScene,
  balanceScene,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  textToImageWizard,
  textToVideoWizard,
  imageToVideoWizard,
  imageToPromptWizard,
  improvePromptWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  uploadVideoScene,
  sizeWizard,
  new Scenes.WizardScene(ModeEnum.Voice, ...(voiceAvatarWizard.steps as any)),
  new Scenes.WizardScene(
    ModeEnum.TextToSpeech,
    ...(textToSpeechWizard.steps as any)
  ),
  lipSyncWizard,
  new Scenes.WizardScene(ModeEnum.Avatar, ...(avatarBrainWizard.steps as any)),
  new Scenes.WizardScene(
    ModeEnum.ChatWithAvatar,
    ...(chatWithAvatarWizard.steps as any)
  ),
  selectModelWizard,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  getRuBillWizard,
  levelQuestWizard,
  createUserScene,
  neuroCoderScene,
])

// Function to send the promotional message
const sendGroupCommandReply = async (ctx: MyContext) => {
  try {
    const botUsername = ctx.botInfo.username
    const message = `üïâÔ∏è –ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—è, ${botUsername}, —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ. ‚ú®\n\n–Ø —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–π —Å–µ–º—å–∏ –±–æ—Ç–æ–≤! ü§ñ‚ù§Ô∏è –ß—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: @${botUsername}\n\n*–û–º –®–∞–Ω—Ç–∏!* üôè`
    await ctx.reply(message)
  } catch (e) {
    logger.error(
      `Error replying to command in group for ${ctx.botInfo?.username || 'unknown bot'}:`,
      {
        error: e instanceof Error ? e.message : String(e),
        chatId: ctx.chat?.id,
        userId: ctx.from?.id,
      }
    )
    // console.error(`Error replying to command in group for ${ctx.botInfo?.username}:`, e); // Fallback if logger fails
  }
}

export function registerCommands({ bot }: { bot: Telegraf<MyContext> }) {
  // 1. –õ–æ–≥–≥–µ—Ä –¥–ª—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  bot.use((ctx, next) => {
    logger.info('>>> RAW UPDATE RECEIVED', {
      updateId: ctx.update.update_id,
      updateType: ctx.updateType,
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
      messageText:
        ctx.message && 'text' in ctx.message ? ctx.message.text : undefined,
      callbackData:
        ctx.callbackQuery && 'data' in ctx.callbackQuery
          ? ctx.callbackQuery.data
          : undefined,
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–µ
      sceneInfo: ctx.scene?.current?.id,
    })
    return next()
  })

  // 2. –°–µ—Å—Å–∏—è (–î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–ï–î –°–¶–ï–ù–ê–ú–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò, –ò–°–ü–û–õ–¨–ó–£–Æ–©–ò–ú–ò –°–ï–°–°–ò–Æ)
  bot.use(session({ defaultSession: () => ({ ...defaultSession }) }))

  // 3. Middleware —Å—Ü–µ–Ω (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï –°–ï–°–°–ò–ò –ò –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò, –ò–°–ü–û–õ–¨–ó–£–Æ–©–ò–ú–ò –°–¶–ï–ù–´)
  bot.use(stage.middleware())

  // --- –¢–ï–ü–ï–†–¨ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

  // 4. –ì–õ–û–ë–ê–õ–¨–ù–´–ï HEARS –î–õ–Ø –û–°–ù–û–í–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
    logger.info('GLOBAL HEARS (POST-STAGE): –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é hears (POST-STAGE):', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })
  bot.hears(['‚ùì –°–ø—Ä–∞–≤–∫–∞', '‚ùì Help'], async ctx => {
    logger.info('GLOBAL HEARS (POST-STAGE): –°–ø—Ä–∞–≤–∫–∞', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.Help)
    } catch (error) {
      logger.error('Error in –°–ø—Ä–∞–≤–∫–∞ hears (POST-STAGE):', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })
  bot.hears(['–û—Ç–º–µ–Ω–∞', 'Cancel'], async ctx => {
    logger.info('GLOBAL HEARS (POST-STAGE): –û—Ç–º–µ–Ω–∞/Cancel', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.reply(
        isRussian(ctx) ? '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.' : '‚ùå Process cancelled.',
        Markup.removeKeyboard()
      )
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in –û—Ç–º–µ–Ω–∞/Cancel hears (POST-STAGE):', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // 5. –ì–õ–û–ë–ê–õ–¨–ù–´–ï HEARS –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö (–ö–†–û–ú–ï –ù–ê–í–ò–ì–ê–¶–ò–ò) (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.hears([levels[103].title_ru, levels[103].title_en], async ctx => {
    console.log('CASE bot.hears: üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support')
    await ctx.scene.leave() // –¢–µ–ø–µ—Ä—å ctx.scene –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    await handleTechSupport(ctx)
  })
  bot.hears([levels[100].title_ru, levels[100].title_en], async ctx => {
    console.log('CASE bot.hears: üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å / Top up balance')
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.PaymentScene
    ctx.session.subscription = SubscriptionType.STARS
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })
  bot.hears([levels[101].title_ru, levels[101].title_en], async ctx => {
    console.log('CASE bot.hears: ü§ë –ë–∞–ª–∞–Ω—Å / Balance')
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.Balance
    await ctx.scene.enter(ModeEnum.Balance)
  })
  bot.hears([levels[5].title_ru, levels[5].title_en], async ctx => {
    console.log('CASE bot.hears: üí≠ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º / Chat with avatar')
    logger.info('GLOBAL HEARS: –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º', { telegramId: ctx.from?.id })
    try {
      await ctx.scene.leave()
      ctx.session.mode = ModeEnum.ChatWithAvatar
      await ctx.scene.enter(ModeEnum.ChatWithAvatar)
    } catch (error) {
      logger.error('Error in –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º hears:', {
        error,
        telegramId: ctx.from?.id,
      })
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º.')
    }
  })
  bot.hears([levels[7].title_ru, levels[7].title_en], async ctx => {
    console.log('CASE bot.hears: üé§ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ / Avatar Voice')
    logger.info('GLOBAL HEARS: –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞', { telegramId: ctx.from?.id })
    try {
      await ctx.scene.leave()
      ctx.session.mode = ModeEnum.Voice
      await ctx.scene.enter(ModeEnum.Voice)
    } catch (error) {
      logger.error('Error in –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ hears:', {
        error,
        telegramId: ctx.from?.id,
      })
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ì–æ–ª–æ—Å –ê–≤–∞—Ç–∞—Ä–∞.')
    }
  })

  // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ hears –¥–ª—è levels[0]...levels[10]) ...
  // –ù–∞–ø—Ä–∏–º–µ—Ä:
  if (levels && typeof levels === 'object' && levels[1]) {
    bot.hears([levels[1].title_ru, levels[1].title_en], async ctx => {
      // ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ
      logger.info('GLOBAL HEARS: –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ', { telegramId: ctx.from?.id })
      await ctx.scene.leave() // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
      ctx.session.mode = ModeEnum.DigitalAvatarBody
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    })
  }
  // ... (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ hears
  bot.hears('ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ 2', async ctx => {
    logger.info('GLOBAL HEARS: –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ 2 (Admin)', {
      telegramId: ctx.from?.id,
    })
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.DigitalAvatarBodyV2
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })
  bot.hears('üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2', async ctx => {
    logger.info('GLOBAL HEARS: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2 (Admin)', {
      telegramId: ctx.from?.id,
    })
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.NeuroPhotoV2
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  // hears –¥–ª—è "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
  if (levels && typeof levels === 'object' && levels[102]) {
    bot.hears([levels[102].title_ru, levels[102].title_en], async ctx => {
      console.log('CASE bot.hears: üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ / Invite a friend')
      ctx.session.mode = ModeEnum.Invite // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
      await ctx.scene.enter(ModeEnum.Invite) // InviteScene ID = 'inviteScene'
    })
  }

  // 6. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (ACTION) (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.action('go_main_menu', async ctx => {
    logger.info('GLOBAL ACTION: go_main_menu', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in go_main_menu action:', {
        error,
        telegramId: ctx.from?.id,
      })
      // –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é.')
      } catch {
        /* ignore */
      }
    }
  })

  bot.action('go_help', async ctx => {
    logger.info('GLOBAL ACTION: go_help', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –í—Ö–æ–¥ –≤ helpScene. –ö–æ–Ω—Ç–µ–∫—Å—Ç (ctx.session.mode) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–´–ó–´–í–ê–Æ–©–ï–ô —Å—Ç–æ—Ä–æ–Ω–æ–π/—Å—Ü–µ–Ω–æ–π.
      // –ï—Å–ª–∏ ctx.session.mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, helpScene –ø–æ–∫–∞–∂–µ—Ç –æ–±—â—É—é —Å–ø—Ä–∞–≤–∫—É.
      await ctx.scene.enter('helpScene')
    } catch (error) {
      logger.error('Error in go_help action:', {
        error,
        telegramId: ctx.from?.id,
      })
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.')
      } catch {
        /* ignore */
      }
    }
  })

  bot.action('go_back', async ctx => {
    logger.info('GLOBAL ACTION: go_back', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã. –ï—Å–ª–∏ —ç—Ç–æ helpScene, –æ–Ω–∞ —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
      // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ü–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –≤—ã–π–¥–µ—Ç.
      await ctx.scene.leave()
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
      // try { await ctx.deleteMessage(); } catch { /* ignore */ }
    } catch (error) {
      logger.error('Error in go_back action:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // 7. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ /start, /support, /menu (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.command('start', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }
    console.log('CASE bot.command: start')
    // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –≤—Ö–æ–¥–∏–º –≤ createUserScene
    ctx.session = { ...defaultSession }
    await ctx.scene.leave() // –Ø–≤–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±–æ–π —Å—Ü–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.CreateUserScene)
  })

  bot.command('support', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }
    console.log('CASE bot.command: support')
    await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await handleTechSupport(ctx as MyContext)
  })

  bot.command('menu', async ctx => {
    if (ctx.chat.type !== 'private') {
      // –í –≥—Ä—É–ø–ø–∞—Ö –∫–æ–º–∞–Ω–¥–∞ /menu –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ /start
      // –ú–æ–∂–Ω–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–µ
    }
    logger.info('COMMAND /menu: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', {
      telegramId: ctx.from?.id,
    })
    try {
      // Re-enter the menu scene
      ctx.session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
      await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in /menu command:', {
        error,
        telegramId: ctx.from?.id,
      })
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é.')
      } catch {
        /* ignore */
      }
    }
  })

  // 8. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
  registerPaymentActions(bot)

  // 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
  bot.action(/^restart_video:(.+)$/, handleRestartVideoGeneration)

  // 10. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤ (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π)
  bot.on(callbackQuery('data'), async ctx => {
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    console.warn('Unhandled callback_query:', ctx.callbackQuery)
  })

  // 11. –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–ü–û–°–õ–ï–î–ù–ò–ô)
  bot.on(message('text'), handleTextMessage)

  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  console.log(
    'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
    stage.scenes.size
  )
}
