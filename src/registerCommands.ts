import { Telegraf, Scenes, session, Markup } from 'telegraf'
import { message, callbackQuery } from 'telegraf/filters'
import { MyContext } from './interfaces'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
import { levels } from './menu/mainMenu'
import { getUserDetailsSubscription } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getUserInfo } from './handlers/getUserInfo'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
import { handleRestartVideoGeneration } from './handlers/handleVideoRestart'
import { sendMediaToPulse } from './helpers/pulse'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã hello_world
import { handleHelloWorld } from './commands/handleHelloWorld'
import { priceCommand } from './commands/priceCommand'
import { checkSubscriptionGuard } from './helpers/subscriptionGuard'
import { setupInteractiveStats } from './commands/interactiveStatsCommand'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
import {
  handleAddBalanceCommand,
  handleCheckBalanceCommand,
} from './handlers/adminCommands'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
import expenseAnalysisCommand from './commands/expenseAnalysisCommand'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FLUX Kontext –∫–æ–º–∞–Ω–¥—É
import { handleFluxKontextCommand } from './commands/fluxKontextCommand'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ index
import {
  avatarBrainWizard,
  textToVideoWizard,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  imageToPromptWizard,
  improvePromptWizard,
  sizeWizard,
  textToImageWizard,
  imageToVideoWizard,
  cancelPredictionsWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  selectModelWizard,
  voiceAvatarWizard,
  textToSpeechWizard,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  levelQuestWizard,
  neuroCoderScene,
  lipSyncWizard,
  startScene,
  chatWithAvatarWizard,
  helpScene,
  balanceScene,
  menuScene,
  subscriptionScene,
  inviteScene,
  getRuBillWizard,
  subscriptionCheckScene,
  createUserScene,
  checkBalanceScene,
  uploadVideoScene,
  fluxKontextScene,
} from './scenes'

import { defaultSession } from './store'
//
import { get100Command } from './commands/get100Command'
import { handleTechSupport } from './commands/handleTechSupport'
import { handleBuy } from './handlers/handleBuy'
import { isRussian } from '@/helpers'
import { registerPaymentActions } from './handlers/paymentActions'
import { handleTextMessage } from './handlers/handleTextMessage'
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç handleMenu, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
// import { handleMenu } from './handlers/handleMenu'
//https://github.com/telegraf/telegraf/issues/705
export const stage = new Scenes.Stage<MyContext>([
  startScene,
  menuScene,
  helpScene,
  inviteScene,
  paymentScene,
  rublePaymentScene,
  starPaymentScene,
  subscriptionScene,
  subscriptionCheckScene,
  checkBalanceScene,
  balanceScene,
  neuroPhotoWizard,
  neuroPhotoWizardV2,
  textToImageWizard,
  textToVideoWizard,
  imageToVideoWizard,
  imageToPromptWizard,
  improvePromptWizard,
  trainFluxModelWizard,
  uploadTrainFluxModelScene,
  uploadVideoScene,
  sizeWizard,
  fluxKontextScene,
  new Scenes.WizardScene(ModeEnum.Voice, ...(voiceAvatarWizard.steps as any)),
  new Scenes.WizardScene(
    ModeEnum.TextToSpeech,
    ...(textToSpeechWizard.steps as any)
  ),
  lipSyncWizard,
  new Scenes.WizardScene(ModeEnum.Avatar, ...(avatarBrainWizard.steps as any)),
  new Scenes.WizardScene(
    ModeEnum.ChatWithAvatar,
    ...(chatWithAvatarWizard.steps as any)
  ),
  selectModelWizard,
  digitalAvatarBodyWizard,
  digitalAvatarBodyWizardV2,
  getRuBillWizard,
  levelQuestWizard,
  createUserScene,
  neuroCoderScene,
])

// Function to send the promotional message
const sendGroupCommandReply = async (ctx: MyContext) => {
  try {
    const botUsername = ctx.botInfo.username
    const message = `üïâÔ∏è –ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—è, ${botUsername}, —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ. ‚ú®\n\n–Ø —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–π —Å–µ–º—å–∏ –±–æ—Ç–æ–≤! ü§ñ‚ù§Ô∏è –ß—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: @${botUsername}\n\n*–û–º –®–∞–Ω—Ç–∏!* üôè`
    await ctx.reply(message)
  } catch (e) {
    logger.error(
      `Error replying to command in group for ${ctx.botInfo?.username || 'unknown bot'}:`,
      {
        error: e instanceof Error ? e.message : String(e),
        chatId: ctx.chat?.id,
        userId: ctx.from?.id,
      }
    )
    // console.error(`Error replying to command in group for ${ctx.botInfo?.username}:`, e); // Fallback if logger fails
  }
}

export function registerCommands({ bot }: { bot: Telegraf<MyContext> }) {
  // 1. –õ–æ–≥–≥–µ—Ä –¥–ª—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  bot.use((ctx, next) => {
    logger.info('>>> RAW UPDATE RECEIVED', {
      updateId: ctx.update.update_id,
      updateType: ctx.updateType,
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
      messageText:
        ctx.message && 'text' in ctx.message ? ctx.message.text : undefined,
      callbackData:
        ctx.callbackQuery && 'data' in ctx.callbackQuery
          ? ctx.callbackQuery.data
          : undefined,
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–µ
      sceneInfo: ctx.scene?.current?.id,
    })
    return next()
  })

  // 3. Middleware —Å—Ü–µ–Ω (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï –°–ï–°–°–ò–ò - —Å–µ—Å—Å–∏—è —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ bot.ts)
  bot.use(stage.middleware())

  // 4. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ü–õ–ê–¢–ï–ñ–ï–ô
  registerPaymentActions(bot)

  // 6. --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ì–õ–û–ë–ê–õ–¨–ù–´–• –ö–û–ú–ê–ù–î ---
  // –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å, –¥–æ hears –∏ –æ–±—â–µ–≥–æ on('text')

  bot.command('start', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }
    console.log('CASE bot.command: start')
    // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –≤—Ö–æ–¥–∏–º –≤ createUserScene
    ctx.session = { ...defaultSession }
    await ctx.scene.leave() // –Ø–≤–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±–æ–π —Å—Ü–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.CreateUserScene)
  })

  bot.command('get100', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –±–æ–Ω—É—Å–∞
    const hasSubscription = await checkSubscriptionGuard(ctx, '/get100')
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    // –ü–µ—Ä–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä get100
    if (!ctx.session.userModel) {
      ctx.session.userModel = {
        model_name: 'default',
        trigger_word: '',
        model_url: 'placeholder/placeholder:placeholder',
        finetune_id: '',
      }
    }
    await get100Command(ctx)
  })

  bot.command('support', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }
    console.log('CASE bot.command: support')
    await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await handleTechSupport(ctx as MyContext)
  })

  bot.command('menu', async ctx => {
    if (ctx.chat.type !== 'private') {
      // –í –≥—Ä—É–ø–ø–∞—Ö –∫–æ–º–∞–Ω–¥–∞ /menu –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ /start
      // –ú–æ–∂–Ω–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–µ
    }
    logger.info('COMMAND /menu: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
      const telegramId = ctx.from?.id?.toString() || 'unknown'
      const { getUserDetailsSubscription } = await import('@/core/supabase')
      const { simulateSubscriptionForDev } = await import(
        '@/scenes/menuScene/helpers/simulateSubscription'
      )
      const { isDev } = await import('@/config')

      const userDetails = await getUserDetailsSubscription(telegramId)
      const effectiveSubscription = simulateSubscriptionForDev(
        userDetails?.subscriptionType || null,
        isDev
      )

      logger.info('COMMAND /menu: Checking subscription', {
        telegramId,
        originalSubscription: userDetails?.subscriptionType,
        effectiveSubscription,
        isDev,
      })

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–∏–º—É–ª—è—Ü–∏—é), –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ subscriptionScene
      if (!effectiveSubscription || effectiveSubscription === 'STARS') {
        logger.info(
          'COMMAND /menu: No subscription, redirecting to subscription scene',
          {
            telegramId,
            effectiveSubscription,
          }
        )
        ctx.session.mode = ModeEnum.SubscriptionScene
        await ctx.scene.enter(ModeEnum.SubscriptionScene)
        return
      }

      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –≤—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
      ctx.session.mode = ModeEnum.MainMenu
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in /menu command:', {
        error,
        telegramId: ctx.from?.id,
      })
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é.')
      } catch {
        /* ignore */
      }
    }
  })

  bot.command('price', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ü–µ–Ω
    const hasSubscription = await checkSubscriptionGuard(ctx, '/price')
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    return priceCommand(ctx)
  })

  bot.command('kontext', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FLUX Kontext
    const hasSubscription = await checkSubscriptionGuard(ctx, '/kontext')
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    logger.info('COMMAND /kontext: FLUX Kontext image editing started', {
      telegramId: ctx.from?.id,
    })

    await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
    await handleFluxKontextCommand(ctx)
  })

  // üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  setupInteractiveStats(bot)

  // üëë –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
  bot.command('addbalance', handleAddBalanceCommand)
  bot.command('checkbalance', handleCheckBalanceCommand)

  // üìä –ö–û–ú–ê–ù–î–ê –ê–ù–ê–õ–ò–ó–ê –†–ê–°–•–û–î–û–í
  bot.use(expenseAnalysisCommand)

  // üß™ –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–°–õ–ï –û–ü–õ–ê–¢–´
  bot.command('test_payment_message', async ctx => {
    if (ctx.chat.type !== 'private') {
      return sendGroupCommandReply(ctx)
    }

    const isRu = ctx.from?.language_code === 'ru'
    logger.info('TEST COMMAND: test_payment_message', {
      telegramId: ctx.from?.id,
    })

    try {
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      await ctx.reply(
        isRu
          ? `üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "NEUROVIDEO" —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º.`
          : `üéâ Your subscription "NEUROVIDEO" has been successfully activated! Enjoy the bot.`
      )

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
      const { getSubScribeChannel } = await import(
        '@/handlers/getSubScribeChannel'
      )
      const channelId = await getSubScribeChannel(ctx)

      if (channelId) {
        const chatInviteMessage = isRu
          ? `–ù–µ–π—Ä–æ –ø—É—Ç–Ω–∏–∫, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ú®

–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞?

–í —ç—Ç–æ–º —á–∞—Ç–µ —Ç—ã: 
üîπ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (–¥–∞, –ª–∏—á–Ω–æ –æ—Ç –º–µ–Ω—è)
üîπ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –±—ã—Ç—å –≤ —Å–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–µ–π—Ä–æ –ø—É—Ç–Ω–∏–∫–∞–º–∏  
üîπ—Å—Ç–∞–Ω–µ—à—å —á–∞—Å—Ç—å—é —Ç—ë–ø–ª–æ–≥–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏

–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø —Å –≤–∞–º–∏¬ª –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü§ó 

–ê –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–Ø —Å–∞–º¬ª`
          : `Neuro traveler, your subscription is activated ‚ú®

Want to join the chat for communication and become part of the creative community?

In this chat you:
üîπ can ask questions and get answers (yes, personally from me)
üîπ share your work and be in co-creation with other neuro travelers
üîπ become part of a warm, creative community

If yes, click the "I'm with you" button and welcome ü§ó

If not, continue on your own and click the "I myself" button`

        await ctx.reply(chatInviteMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: isRu ? 'üëã ‚ò∫Ô∏è –Ø —Å –≤–∞–º–∏' : "üëã ‚ò∫Ô∏è I'm with you",
                  url: channelId.startsWith('@')
                    ? `https://t.me/${channelId.slice(1)}`
                    : channelId,
                },
              ],
              [
                {
                  text: isRu ? 'üôÖüôÖ‚Äç‚ôÄÔ∏è –Ø —Å–∞–º' : 'üôÖüôÖ‚Äç‚ôÄÔ∏è I myself',
                  callback_data: 'continue_solo',
                },
              ],
            ],
          },
        })
      } else {
        await ctx.reply(
          isRu
            ? '‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            : '‚ö†Ô∏è Channel for joining is not configured'
        )
      }
    } catch (error) {
      logger.error('Error in test_payment_message command:', {
        error,
        telegramId: ctx.from?.id,
      })
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
          : '‚ùå Error testing message'
      )
    }
  })

  // 5. –ì–õ–û–ë–ê–õ–¨–ù–´–ï HEARS –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö (–ö–†–û–ú–ï –ù–ê–í–ò–ì–ê–¶–ò–ò) (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.hears([levels[103].title_ru, levels[103].title_en], async ctx => {
    console.log('CASE bot.hears: üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / Support')
    await ctx.scene.leave() // –¢–µ–ø–µ—Ä—å ctx.scene –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    await handleTechSupport(ctx)
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
  bot.hears([levels[105].title_ru, levels[105].title_en], async ctx => {
    logger.info('GLOBAL HEARS (POST-STAGE): –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É / Subscribe', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave() // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      ctx.session.mode = ModeEnum.SubscriptionScene // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
      // ctx.session.subscription = SubscriptionType.???; // TODO: –†–µ—à–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–¥–µ—Å—å? –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω—É–∂–Ω–æ?
      await ctx.scene.enter(ModeEnum.SubscriptionScene) // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    } catch (error) {
      logger.error('Error in –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É hears (POST-STAGE):', {
        error,
        telegramId: ctx.from?.id,
      })
      const isRu = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏.'
          : '‚ùå Error entering subscription.'
      )
    }
  })

  // –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï HEARS –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ï–†–ï–ù–ï–°–ï–ù–´ –í hearsHandlers.ts

  // 6. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (ACTION) (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï stage)
  bot.action('go_main_menu', async ctx => {
    logger.info('GLOBAL ACTION: go_main_menu', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in go_main_menu action:', {
        error,
        telegramId: ctx.from?.id,
      })
      // –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é.')
      } catch {
        /* ignore */
      }
    }
  })

  bot.action('go_help', async ctx => {
    logger.info('GLOBAL ACTION: go_help', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –í—Ö–æ–¥ –≤ helpScene. –ö–æ–Ω—Ç–µ–∫—Å—Ç (ctx.session.mode) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –í–´–ó–´–í–ê–Æ–©–ï–ô —Å—Ç–æ—Ä–æ–Ω–æ–π/—Å—Ü–µ–Ω–æ–π.
      // –ï—Å–ª–∏ ctx.session.mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, helpScene –ø–æ–∫–∞–∂–µ—Ç –æ–±—â—É—é —Å–ø—Ä–∞–≤–∫—É.
      await ctx.scene.enter('helpScene')
    } catch (error) {
      logger.error('Error in go_help action:', {
        error,
        telegramId: ctx.from?.id,
      })
      try {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.')
      } catch {
        /* ignore */
      }
    }
  })

  bot.action('go_back', async ctx => {
    logger.info('GLOBAL ACTION: go_back', { telegramId: ctx.from?.id })
    try {
      await ctx.answerCbQuery()
      // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã. –ï—Å–ª–∏ —ç—Ç–æ helpScene, –æ–Ω–∞ —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
      // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ü–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –≤—ã–π–¥–µ—Ç.
      await ctx.scene.leave()
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
      // try { await ctx.deleteMessage(); } catch { /* ignore */ }
    } catch (error) {
      logger.error('Error in go_back action:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
  bot.action('go_to_subscription_scene', async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    logger.info('GLOBAL ACTION: go_to_subscription_scene', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.answerCbQuery()
      await ctx.scene.leave()
      ctx.session.mode = ModeEnum.SubscriptionScene
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
    } catch (error) {
      logger.error('Error in go_to_subscription_scene action:', {
        error,
        telegramId: ctx.from?.id,
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred. Please try again later.'
      )
    }
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø —Å–∞–º"
  bot.action('continue_solo', async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    logger.info('GLOBAL ACTION: continue_solo', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.answerCbQuery()
      await ctx.reply(
        isRu
          ? 'üëç –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!'
          : 'üëç Great! Continue using the bot on your own. If you need help - feel free to ask!'
      )
    } catch (error) {
      logger.error('Error in continue_solo action:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // 10. –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–ü–û–°–õ–ï–î–ù–ò–ô)
  // –£–±–∏—Ä–∞–µ–º —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫,
  // —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ hears –≤—ã—à–µ.
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ handleTextMessage, –∫–æ—Ç–æ—Ä—ã–π, –≤–µ—Ä–æ—è—Ç–Ω–æ,
  // –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –í–ù–£–¢–†–ò —Å—Ü–µ–Ω.
  bot.on(message('text'), handleTextMessage)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è FLUX Kontext
  bot.on(message('photo'), async ctx => {
    logger.info('GLOBAL PHOTO HANDLER: Photo received', {
      telegramId: ctx.from?.id,
      awaitingFluxKontextImage: ctx.session?.awaitingFluxKontextImage,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è FLUX Kontext
    if (ctx.session?.awaitingFluxKontextImage) {
      const { handleFluxKontextImageUpload } = await import(
        './commands/fluxKontextCommand'
      )
      await handleFluxKontextImageUpload(ctx)
      return
    }

    // –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º FLUX Kontext –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    logger.info('GLOBAL PHOTO HANDLER: Photo not for FLUX Kontext, skipping', {
      telegramId: ctx.from?.id,
    })
  })

  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  console.log(
    'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
    stage.scenes.size
  )
}
