import { Telegraf, session /*Composer*/ } from 'telegraf'
import { MyContext } from './interfaces'
import {
  handleTechSupport,
  getStatsCommand,
  priceCommand,
  glamaMcpCommand,
  httpRequestCommand,
} from './commands'
import { privateChat } from './middlewares/privateChat'
import { zepMemoryMiddleware } from './middlewares/zepMemory'
import { imageModelMenu } from './menu/imageModelMenu'
import { generateTextToImage } from './services/generateTextToImage'
import { isRussian } from './helpers/language'

import { generateNeuroImage } from './services/generateNeuroImage'

import { handleSizeSelection } from './handlers'
import { levels, mainMenu } from './menu'
import { getReferalsCountAndUserData } from './core/supabase'

import { setupLevelHandlers } from './handlers/setupLevelHandlers'

import { defaultSession } from './store'
import { getTrainingCancelUrl } from './core/supabase'
import fetch from 'node-fetch'
import { stage } from './stage'
// import { handleTextMessage } from './handlers'

import { get100Command } from './commands/get100Command'

import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'

import { handleReceiptCommand } from './handlers/handleReceiptCommand'
import { SubscriptionType } from '@/interfaces/subscription.interface'

/**
 * –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è
 * –§–ê–ô–õ registerCommands.ts –ù–ï–õ–¨–ó–Ø –ü–†–ê–í–ò–¢–¨ –ë–ï–ó –°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø!
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–æ –±–æ—Ç–∞.
 * –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã.
 * –°–æ–≥–ª–∞—Å—É–π—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–∏–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 * –ò –Ω–µ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!!!
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —á–∞—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
function resetSessionForMenu(session: MyContext['session']) {
  logger.info(
    'üîÑ [resetSessionForMenu] Resetting session before entering menu...'
  )
  session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –º–µ–Ω—é
  session.prompt = ''
  session.userModel = {
    model_name: '',
    trigger_word: '',
    model_url: '' as `${string}/${string}:${string}`,
    model_key: '' as `${string}/${string}:${string}`,
  }
  session.selectedModel = undefined
  session.audioUrl = undefined
  // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –º–µ–Ω—é
}

export function registerCommands({ bot }: { bot: Telegraf<MyContext> }) {
  bot.use(session({ defaultSession: defaultSession }))
  bot.use(stage.middleware())
  bot.use(privateChat)
  setupLevelHandlers(bot as Telegraf<MyContext>)

  bot.use(glamaMcpCommand.middleware())
  bot.use(httpRequestCommand.middleware())

  bot.command('start', async ctx => {
    logger.info('‚û°Ô∏è [RegisterCommands /start] Received /start command', {
      telegramId: ctx.from?.id,
    })
    logger.info('‚û°Ô∏è [RegisterCommands /start] Intending to enter StartScene...')
    await ctx.scene.enter(ModeEnum.StartScene)
  })

  bot.command('stats', async ctx => {
    logger.info('üìä –ö–æ–º–∞–Ω–¥–∞ stats:', {
      description: 'Stats command received',
      telegramId: ctx.from?.id,
    })
    await getStatsCommand(ctx)
  })

  bot.command('price', async ctx => {
    logger.info('üí∞ –ö–æ–º–∞–Ω–¥–∞ price:', {
      description: 'Price command received',
      telegramId: ctx.from?.id,
    })
    await priceCommand(ctx)
  })

  bot.command('broadcast', async ctx => {
    logger.info('üì¢ –ö–æ–º–∞–Ω–¥–∞ broadcast:', {
      description: 'Broadcast command received',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.BroadcastWizard)
  })

  bot.command('menu', async ctx => {
    logger.info('‚û°Ô∏è [RegisterCommands /menu] Received /menu command', {
      description: 'Menu command received (bot)',
      telegramId: ctx.from?.id,
    })
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
    resetSessionForMenu(ctx.session)
    logger.info(
      '‚û°Ô∏è [RegisterCommands /menu] Intending to enter MainMenu scene...'
    )
    await ctx.scene.enter(ModeEnum.MainMenu)
  })

  bot.command('tech', async ctx => {
    logger.info('üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∞ tech:', {
      description: 'Tech command received',
      telegramId: ctx.from?.id,
    })
    await handleTechSupport(ctx)
  })

  bot.hears(['‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '‚¨ÜÔ∏è Improve prompt'], async ctx => {
    logger.info('‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', {
      description: 'Improve prompt requested',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.ImprovePromptWizard)
  })

  bot.hears(['üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', 'üìê Change size'], async ctx => {
    logger.info('üìê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', {
      description: 'Change size requested',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.SizeWizard)
  })

  bot.hears(/^(üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞|üõ† Tech Support)$/i, handleTechSupport)

  bot.command('buy', async ctx => {
    logger.info('üí∏ –ö–æ–º–∞–Ω–¥–∞ buy:', {
      description: 'Buy command received',
      telegramId: ctx.from?.id,
    })
    ctx.session.subscription = SubscriptionType.NEUROTESTER
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })

  bot.command('invite', async ctx => {
    logger.info('üë• –ö–æ–º–∞–Ω–¥–∞ invite:', {
      description: 'Invite command received',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.InviteScene)
  })

  bot.command('balance', async ctx => {
    logger.info('üí∞ –ö–æ–º–∞–Ω–¥–∞ balance:', {
      description: 'Balance command received',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.BalanceScene)
  })

  bot.command('help', async ctx => {
    await ctx.scene.enter('step0')
  })

  bot.command('neuro_coder', async ctx => {
    await ctx.scene.enter(ModeEnum.NeuroCoderScene)
  })

  bot.hears([levels[1].title_ru, levels[1].title_en], async ctx => {
    logger.info('ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ:', {
      description: 'Digital avatar body selected',
      level: levels[1].title_ru,
    })
    ctx.session.mode = ModeEnum.DigitalAvatarBody
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[2].title_ru, levels[2].title_en], async ctx => {
    logger.info('üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ:', {
      description: 'Neurophoto selected',
      level: levels[2].title_ru,
    })
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[3].title_ru, levels[3].title_en], async ctx => {
    logger.info('üîç –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ:', {
      description: 'Image to prompt selected',
      level: levels[3].title_ru,
    })
    ctx.session.mode = ModeEnum.ImageToPrompt
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[4].title_ru, levels[4].title_en], async ctx => {
    logger.info('üß† –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞:', {
      description: 'Avatar brain selected',
      level: levels[4].title_ru,
    })
    ctx.session.mode = ModeEnum.Avatar
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[5].title_ru, levels[5].title_en], async ctx => {
    logger.info('üí≠ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
      description: 'Chat with avatar selected',
      level: levels[5].title_ru,
    })
    ctx.session.mode = ModeEnum.ChatWithAvatar
    await ctx.scene.enter(ModeEnum.ChatWithAvatar)
  })

  bot.hears([levels[6].title_ru, levels[6].title_en], async ctx => {
    logger.info('ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò:', {
      description: 'Select model selected',
      level: levels[6].title_ru,
    })
    ctx.session.mode = ModeEnum.DigitalAvatarBody
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[7].title_ru, levels[7].title_en], async ctx => {
    logger.info('üé§ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞:', {
      description: 'Voice selected',
      level: levels[7].title_ru,
    })
    ctx.session.mode = ModeEnum.Voice
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[8].title_ru, levels[8].title_en], async ctx => {
    logger.info('üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å:', {
      description: 'Text to speech selected',
      level: levels[8].title_ru,
    })
    ctx.session.mode = ModeEnum.TextToSpeech
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[9].title_ru, levels[9].title_en], async ctx => {
    logger.info('üé• –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ:', {
      description: 'Image to video selected',
      level: levels[9].title_ru,
    })
    ctx.session.mode = ModeEnum.ImageToVideo
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[10].title_ru, levels[10].title_en], async ctx => {
    logger.info('üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞:', {
      description: 'Text to video selected',
      level: levels[10].title_ru,
    })
    ctx.session.mode = ModeEnum.TextToVideo
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears([levels[11].title_ru, levels[11].title_en], async ctx => {
    logger.info('üñºÔ∏è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ:', {
      description: 'Text to image selected',
      level: levels[11].title_ru,
    })
    ctx.session.mode = ModeEnum.TextToImage
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    await imageModelMenu(ctx)
  })

  bot.hears(['‚ùì –ü–æ–º–æ—â—å', '‚ùì Help'], async ctx => {
    logger.info('‚ùì –ü–æ–º–æ—â—å:', {
      description: 'Help requested',
      telegramId: ctx.from?.id,
    })
    ctx.session.mode = ModeEnum.Help
    await ctx.scene.enter(ModeEnum.HelpScene)
  })

  bot.hears([levels[100].title_ru, levels[100].title_en], async ctx => {
    logger.info('üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:', {
      description: 'Top up balance requested',
      level: levels[100].title_ru,
    })
    ctx.session.mode = ModeEnum.TopUpBalance
    await ctx.scene.enter(ModeEnum.PaymentScene)
  })

  bot.hears([levels[101].title_ru, levels[101].title_en], async ctx => {
    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å:', {
      description: 'Balance requested',
      level: levels[101].title_ru,
    })
    ctx.session.mode = ModeEnum.Balance
    await ctx.scene.enter(ModeEnum.BalanceScene)
  })

  bot.hears([levels[102].title_ru, levels[102].title_en], async ctx => {
    logger.info('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:', {
      description: 'Invite friend requested',
      level: levels[102].title_ru,
    })
    ctx.session.mode = ModeEnum.Invite
    await ctx.scene.enter(ModeEnum.InviteScene)
  })

  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
    logger.info('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      description: 'Main menu requested',
      telegramId: ctx.from?.id,
    })
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
    resetSessionForMenu(ctx.session)
    logger.info(
      '‚û°Ô∏è [RegisterCommands hearsMainMenu] Intending to enter MainMenu scene...'
    )
    await ctx.scene.enter(ModeEnum.MainMenu)
  })

  bot.hears([levels[104].title_ru, levels[104].title_en], handleTechSupport)

  bot.hears(['/get100'], async ctx => {
    logger.info('/get100:', {
      description: 'Get100 command received',
      telegramId: ctx.from?.id,
    })
    await get100Command(ctx)
  })

  bot.hears(
    ['üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?', 'üé• Generate new video?'],
    async ctx => {
      logger.info('üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ:', {
        description: 'Generate new video requested',
        telegramId: ctx.from?.id,
      })
      const mode = ctx.session.mode
      logger.info('mode:', { mode })
      if (mode === ModeEnum.TextToVideo) {
        await ctx.scene.enter(ModeEnum.TextToVideo)
      } else if (mode === ModeEnum.ImageToVideo) {
        await ctx.scene.enter(ModeEnum.ImageToVideo)
      } else {
        await ctx.reply(
          isRussian(ctx)
            ? '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ'
            : 'You cannot generate a new video in this mode'
        )
      }
    }
  )

  bot.hears(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£'], async ctx => {
    const text = ctx.message.text
    logger.info(`CASE: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${text}:`, {
      description: 'Button pressed',
      text: text,
      telegramId: ctx.from?.id,
    })
    const isRu = isRussian(ctx)
    const prompt = ctx.session.prompt
    const userId = ctx.from.id
    const numImages = parseInt(text[0])

    logger.info('ctx.session.mode:', { mode: ctx.session.mode })
    logger.info('ctx.session.prompt:', { prompt })
    logger.info('ctx.session.userModel:', { userModel: ctx.session.userModel })
    logger.info('ctx.session.selectedModel:', {
      selectedModel: ctx.session.selectedModel,
    })

    if (!prompt) {
      await ctx.reply(
        isRu
          ? '‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.'
          : '‚ö†Ô∏è Error: prompt is missing. Please start over.'
      )
      return
    }

    const generate = async (num: number) => {
      if (ctx.session.mode === ModeEnum.NeuroPhoto) {
        if (!ctx.session.userModel?.model_url) {
          await ctx.reply(
            isRu
              ? '‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.'
              : '‚ö†Ô∏è Error: model not selected. Please start over.'
          )
          return
        }

        await generateNeuroImage(
          prompt,
          ctx.session.userModel.model_url,
          num,
          userId.toString(),
          ctx,
          ctx.botInfo?.username
        )
      } else {
        if (!ctx.session.selectedModel) {
          await ctx.reply(
            isRu
              ? '‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.'
              : '‚ö†Ô∏è Error: model not selected. Please start over.'
          )
          return
        }

        logger.info('–í—ã–∑–æ–≤ generateTextToImage —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
          prompt,
          model: ctx.session.selectedModel,
          numImages: num,
          userId: userId.toString(),
          isRu,
          botName: ctx.botInfo?.username,
        })

        await generateTextToImage(
          prompt,
          ctx.session.selectedModel || '',
          num,
          userId.toString(),
          ctx,
          ctx.botInfo?.username,
          isRu
        )
      }
    }

    if (numImages >= 1 && numImages <= 4) {
      await generate(numImages)
    } else {
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞')
    }
  })

  bot.hears(['‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '‚¨ÜÔ∏è Improve prompt'], async ctx => {
    logger.info('‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', {
      description: 'Improve prompt requested',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.ImprovePromptWizard)
  })

  bot.hears(['üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', 'üìê Change size'], async ctx => {
    logger.info('üìê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', {
      description: 'Change size requested',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.SizeWizard)
  })

  bot.hears(
    [
      '21:9',
      '16:9',
      '3:2',
      '4:3',
      '5:4',
      '1:1',
      '4:5',
      '3:4',
      '2:3',
      '9:16',
      '9:21',
    ],
    async ctx => {
      logger.info('üìê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', {
        description: 'Change size requested',
        telegramId: ctx.from?.id,
      })
      const size = ctx.message.text
      await handleSizeSelection(ctx, size)
    }
  )

  bot.hears(/^(–û—Ç–º–µ–Ω–∞|–æ—Ç–º–µ–Ω–∞|Cancel|cancel)$/i, async ctx => {
    logger.info('–û—Ç–º–µ–Ω–∞:', {
      description: 'Cancel requested',
      telegramId: ctx.from?.id,
    })
    const isRu = isRussian(ctx)
    const telegram_id = ctx.from?.id?.toString() || ''
    const { count, subscription, level } = await getReferalsCountAndUserData(
      telegram_id
    )
    if (!subscription) {
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üòî'
          : 'An error occurred while processing your profile üòî'
      )
      return ctx.scene.leave()
    }
    await mainMenu({
      isRu,
      subscription: subscription?.type || SubscriptionType.STARS,
      level,
      ctx,
      inviteCount: count,
    })
    return ctx.scene.leave()
  })

  bot.hears(['–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ', 'Help for the command'], async ctx => {
    logger.info('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ:', {
      description: 'Help for the command requested',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.enter(ModeEnum.HelpScene)
  })

  bot.action(/^cancel_train:(.+)$/, async ctx => {
    const trainingId = ctx.match[1]

    try {
      const cancelUrl = await getTrainingCancelUrl(trainingId)

      if (!cancelUrl) {
        await ctx.answerCbQuery(
          '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        )
        return
      }

      const response = await fetch(cancelUrl, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${process.env.REPLICATE_API_TOKEN}`,
        },
      })

      if (response.ok) {
        await ctx.editMessageText('üõë –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.', {
          reply_markup: { inline_keyboard: [] },
        })
        await ctx.answerCbQuery('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
      } else {
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', {
        description: 'Error cancelling training',
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
    }
  })

  bot.use(zepMemoryMiddleware)

  bot.command('receipt', async ctx => {
    logger.info('üßæ –ö–æ–º–∞–Ω–¥–∞ receipt:', {
      description: 'Receipt command received',
      telegramId: ctx.from?.id,
    })
    await handleReceiptCommand(ctx)
  })
}
