import { connect } from 'inngest/connect'
import { inngest } from './inngest-functions/clients'
import { logger } from './utils/logger'
import { functions } from './inngest-functions/registry'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Inngest Connect –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WebSocket –≤–º–µ—Å—Ç–æ HTTP endpoint –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @see https://www.inngest.com/docs/setup/connect
 */
async function startInngestConnect() {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ Inngest Connect',
      description: 'Starting Inngest Connect with WebSocket connection',
      functions_count: functions.length,
      timestamp: new Date().toISOString(),
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const connection = await connect({
      apps: [
        {
          client: inngest,
          functions: functions,
        },
      ],
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ —Ö–æ—Å—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
      // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ process.env.HOSTNAME –∏–ª–∏ –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      instanceId: `neuro-blogger-worker-${process.pid}`,
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      handleShutdownSignals: ['SIGTERM', 'SIGINT'],
    })

    logger.info({
      message: `‚úÖ Inngest Connect —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${connection.state}`,
      description: 'Inngest Connect connection established',
      state: connection.state,
      app_id: inngest.id,
      app_version: inngest.appVersion || 'unknown',
      timestamp: new Date().toISOString(),
    })

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    let lastState = connection.state
    setInterval(() => {
      if (connection.state !== lastState) {
        logger.info({
          message: `üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ Inngest Connect –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${connection.state}`,
          description: 'Inngest Connect connection state changed',
          previous_state: lastState,
          current_state: connection.state,
          timestamp: new Date().toISOString(),
        })
        lastState = connection.state
      }
    }, 5000)

    // –û–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await connection.closed
    logger.info({
      message: 'üëã Inngest Connect —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ',
      description: 'Inngest Connect connection closed',
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Inngest Connect',
      description: 'Error starting Inngest Connect',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString(),
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { startInngestConnect }

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
if (require.main === module) {
  logger.info({
    message: 'üöÄ –ó–∞–ø—É—Å–∫ Inngest Connect –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ',
    description: 'Starting Inngest Connect in standalone process',
    timestamp: new Date().toISOString(),
  })

  startInngestConnect()
}
