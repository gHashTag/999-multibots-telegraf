import express from 'express'
import robokassaTestRouter from './robokassa/test'
import { logger } from '@/utils/logger'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
export interface CustomRequest extends express.Request {
  originalUrl: string
  method: string
}

export interface CustomResponse extends express.Response {
  json: (body: any) => CustomResponse
  status: (code: number) => CustomResponse
}

const app = express()

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json())

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(
  (req: CustomRequest, res: CustomResponse, next: express.NextFunction) => {
    logger.info('üìù API Request:', {
      method: req.method,
      url: req.originalUrl,
    })
    next()
  }
)

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è Robokassa
app.use('/api/robokassa', robokassaTestRouter)

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req: CustomRequest, res: CustomResponse) => {
  logger.info('‚úÖ Root endpoint accessed')
  res.json({ status: 'ok', message: 'API is running' })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: Error, req: CustomRequest, res: CustomResponse) => {
  logger.error('‚ùå API Error:', {
    description: 'API request error',
    error: err.message,
    method: req.method,
    url: req.originalUrl,
  })

  res.status(500).json({
    status: 'error',
    message: 'Internal server error',
  })
})

export default app
