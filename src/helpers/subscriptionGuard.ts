import { MyContext } from '@/interfaces'
import { getUserDetailsSubscription } from '@/core/supabase'
import { simulateSubscriptionForDev } from '@/scenes/menuScene/helpers/simulateSubscription'
import { isDev } from '@/config'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.
 * –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ subscriptionScene.
 *
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param commandName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns true –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, false –µ—Å–ª–∏ –Ω–µ—Ç (–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω)
 */
export async function checkSubscriptionGuard(
  ctx: MyContext,
  commandName: string
): Promise<boolean> {
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  try {
    const userDetails = await getUserDetailsSubscription(telegramId)
    const effectiveSubscription = simulateSubscriptionForDev(
      userDetails?.subscriptionType || null,
      isDev
    )

    logger.info(`[SubscriptionGuard] ${commandName}: Checking subscription`, {
      telegramId,
      originalSubscription: userDetails?.subscriptionType,
      effectiveSubscription,
      isDev,
      command: commandName,
    })

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–∏–º—É–ª—è—Ü–∏—é), –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ subscriptionScene
    if (!effectiveSubscription || effectiveSubscription === 'STARS') {
      logger.info(
        `[SubscriptionGuard] ${commandName}: No subscription, redirecting to subscription scene`,
        {
          telegramId,
          effectiveSubscription,
          command: commandName,
        }
      )

      await ctx.scene.leave()
      ctx.session.mode = ModeEnum.SubscriptionScene
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
      return false
    }

    logger.info(
      `[SubscriptionGuard] ${commandName}: Subscription valid, allowing access`,
      {
        telegramId,
        effectiveSubscription,
        command: commandName,
      }
    )

    return true
  } catch (error) {
    logger.error(
      `[SubscriptionGuard] ${commandName}: Error checking subscription`,
      {
        error,
        telegramId,
        command: commandName,
      }
    )

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ subscriptionScene –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.SubscriptionScene
    await ctx.scene.enter(ModeEnum.SubscriptionScene)
    return false
  }
}

/**
 * –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export const COMMANDS_WITHOUT_SUBSCRIPTION_CHECK = [
  '/start',
  '/menu', // menu —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
  '/support', // —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
  'support',
  'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
  'üí¨ Support',
  'üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
  'üí´ Subscribe',
]
