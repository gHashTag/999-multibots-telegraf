import { inngest } from '@/core/inngest'
import { ModeEnum, TransactionType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { directPaymentProcessor } from '@/core/supabase/directPayment'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 * –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inngest, –Ω–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,
 * –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ directPaymentProcessor
 *
 * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param amount - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param type - –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (income, expense –∏ —Ç.–¥.)
 * @param description - –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 * @param botName - –ò–º—è –±–æ—Ç–∞
 * @param serviceType - –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞
 * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function processPayment(
  telegramId: string,
  amount: number,
  type: TransactionType,
  description: string,
  botName: string,
  serviceType: ModeEnum
): Promise<boolean> {
  try {
    logger.info('üöÄ Payment processing started', {
      telegramId,
      amount,
      type,
      description,
      botName,
      serviceType,
    })

    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Inngest
    try {
      const { data, error } = await inngest.send({
        name: 'payment/process',
        data: {
          telegram_id: telegramId,
          amount: amount,
          type: type,
          description: description,
          bot_name: botName,
          service_type: serviceType,
        },
      })

      if (error) {
        logger.error(
          '‚ùå Error processing payment through Inngest, falling back to direct payment',
          {
            error,
            telegramId,
            amount,
            type,
          }
        )
        // –ï—Å–ª–∏ Inngest –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        throw new Error(
          'Inngest error: ' +
            (error instanceof Error ? error.message : JSON.stringify(error))
        )
      }

      logger.info('‚úÖ Successful payment processing via Inngest', {
        telegramId,
        amount,
        type,
        data,
      })
      return true
    } catch (inngestError) {
      // –ï—Å–ª–∏ Inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      logger.warn(
        '‚ö†Ô∏è Inngest unavailable or returned error, using direct payment processing',
        {
          description: 'Falling back to direct payment processing',
          error:
            inngestError instanceof Error
              ? inngestError.message
              : String(inngestError),
          telegramId,
          amount,
          type,
        }
      )

      // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
      const directResult = await directPaymentProcessor({
        telegram_id: telegramId,
        amount,
        type,
        description,
        bot_name: botName,
        service_type: serviceType,
      })

      if (!directResult.success) {
        logger.error('‚ùå Direct payment processing failed', {
          error: directResult.error,
          telegramId,
          amount,
          type,
        })
        return false
      }

      logger.info(
        '‚úÖ Successful direct payment processing (Inngest fallback)',
        {
          telegramId,
          amount,
          type,
          paymentId: directResult.payment?.payment_id,
        }
      )
      return true
    }
  } catch (error) {
    logger.error('‚ùå Critical error during payment processing', {
      error,
      telegramId,
      amount,
      type,
    })
    return false
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 *
 * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param amount - –°—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
 * @param description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param botName - –ò–º—è –±–æ—Ç–∞
 * @param serviceType - –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞
 * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function deductFunds(
  telegramId: string,
  amount: number,
  description: string,
  botName: string,
  serviceType: ModeEnum
): Promise<{ success: boolean; error?: string }> {
  try {
    if (amount <= 0) {
      return { success: false, error: 'Amount must be positive' }
    }

    const result = await processPayment(
      telegramId,
      amount,
      TransactionType.MONEY_EXPENSE,
      description,
      botName,
      serviceType
    )

    return { success: result }
  } catch (error) {
    logger.error('‚ùå Error during funds deduction', {
      error,
      telegramId,
      amount,
    })
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : 'Unknown error during funds deduction',
    }
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 *
 * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param amount - –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
 * @param description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param botName - –ò–º—è –±–æ—Ç–∞
 * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function addFunds(
  telegramId: string,
  amount: number,
  description: string,
  botName: string
): Promise<{ success: boolean; error?: string }> {
  try {
    if (amount <= 0) {
      return { success: false, error: 'Amount must be positive' }
    }

    const result = await processPayment(
      telegramId,
      amount,
      TransactionType.MONEY_INCOME,
      description,
      botName,
      ModeEnum.TopUpBalance
    )

    return { success: result }
  } catch (error) {
    logger.error('‚ùå Error during funds addition', {
      error,
      telegramId,
      amount,
    })
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : 'Unknown error during funds addition',
    }
  }
}
