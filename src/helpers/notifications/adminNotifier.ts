import { logger } from '@/utils/logger'
import { createBotByName, pulseBot } from '@/core/bot'
import { supabase } from '@/core/supabase'
import { TransactionType } from '@/interfaces/payments.interface' // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª) ---

interface BasePaymentDetails {
  telegram_id: number | string
  bot_name: string
  language_code?: string
  username?: string | null
}

interface SuccessfulPaymentDetails extends BasePaymentDetails {
  amount: number
  stars?: number
  currency?: string
  description: string
  operationId?: string
  currentBalance?: number
  newBalance?: number
  subscription?: string
  type: TransactionType
}

// --- –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users.
 */
async function getBotOwnerIds(botName: string): Promise<string[]> {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('bot_name', botName)
      .eq('is_bot_owner', true)

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞ –∏–∑ users:', {
        error,
        botName,
      })
      return []
    }
    return data
      .map(owner => owner.telegram_id?.toString())
      .filter((id): id is string => !!id)
  } catch (error) {
    logger.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞:', {
      error,
      botName,
    })
    return []
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–ª–∞—Ç–µ–∂–µ) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤ –≥—Ä—É–ø–ø—ã.
 */
export async function notifyAdminsAboutPayment(
  details: SuccessfulPaymentDetails
): Promise<void> {
  const {
    telegram_id,
    bot_name,
    username,
    amount,
    stars,
    subscription,
    currency,
  } = details
  const userIdentifier = username ? `@${username}` : `ID: ${telegram_id}`
  const starsAmount = stars || amount
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã –∏–ª–∏ –Ω–∞–ª–∏—á–∏—è –∑–≤–µ–∑–¥
  const amountStr = currency === 'RUB' ? `${amount} RUB` : `${starsAmount} ‚≠êÔ∏è`
  const starsStr = starsAmount ? `–∏ –ø–æ–ª—É—á–∏–ª ${starsAmount} ‚≠êÔ∏è` : ''

  let message = `üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdentifier} –æ–ø–ª–∞—Ç–∏–ª ${amountStr} ${starsStr}.`
  if (subscription) {
    message = `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdentifier} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É \"${subscription}\" (${amountStr}) ${starsStr}.`
  }

  // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ @neuro_blogger_pulse
  const pulseGroupId = '@neuro_blogger_pulse'
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ pulseBot –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã
    if (pulseBot && pulseBot.telegram && pulseBot.telegram.sendMessage) {
      await pulseBot.telegram.sendMessage(pulseGroupId, message)
      logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${pulseGroupId}`, {
        telegram_id,
      })
    } else {
      logger.warn(
        `[notifyAdminsAboutPayment] pulseBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ${pulseGroupId}.`
      )
    }
  } catch (error: any) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ${pulseGroupId}:`, {
      error: error?.message || error,
      groupId: pulseGroupId,
    })
  }

  // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∏ –≤ –≥—Ä—É–ø–ø—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
  try {
    const botData = await createBotByName(bot_name)
    if (!botData?.bot) {
      logger.warn(
        `[notifyAdminsAboutPayment] –ë–æ—Ç ${bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º/–≥—Ä—É–ø–ø–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`
      )
      return // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    }
    const { groupId, bot } = botData
    const owners = await getBotOwnerIds(bot_name)
    let successfulOwnerNotifications = 0

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    if (owners.length > 0) {
      for (const ownerId of owners) {
        try {
          await bot.telegram.sendMessage(
            ownerId,
            `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n${message}`
          )
          successfulOwnerNotifications++
        } catch (error: any) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É', {
            error: error?.message || error,
            ownerId,
            botName: bot_name,
          })
        }
      }
      logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞–º', {
        totalOwners: owners.length,
        successful: successfulOwnerNotifications,
        botName: bot_name,
      })
    } else {
      logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
        botName: bot_name,
      })
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞
    if (groupId) {
      try {
        await bot.telegram.sendMessage(`@${groupId}`, message)
        logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ ${groupId}`, {
          botName: bot_name,
        })
      } catch (error: any) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞', {
          error: error?.message || error,
          groupId,
          botName: bot_name,
        })
      }
    } else {
      logger.warn(
        '‚ö†Ô∏è groupId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É',
        { botName: bot_name }
      )
    }
  } catch (error) {
    logger.error(
      '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º/–≥—Ä—É–ø–ø–µ',
      { error, botName: bot_name }
    )
  }
}
