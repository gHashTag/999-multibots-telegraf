import { logger } from '@/utils/logger'
import { createBotByName } from '@/core/bot'
import { TransactionType } from '@/interfaces/payments.interface'

interface BasePaymentDetails {
  telegram_id: number | string
  bot_name: string
  language_code?: string
  username?: string | null
}

interface SuccessfulPaymentDetails extends BasePaymentDetails {
  amount: number
  stars?: number
  currency?: string
  description: string
  operationId?: string
  currentBalance?: number
  newBalance?: number
  subscription?: string
  type: TransactionType
}

interface FailedPaymentDetails extends BasePaymentDetails {
  error: Error | string
  operationId?: string
  attemptedAmount?: number
  attemptedAction?: string
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
 */
export async function notifyUserAboutSuccess(
  details: SuccessfulPaymentDetails
): Promise<void> {
  const {
    telegram_id,
    bot_name,
    language_code = 'ru',
    amount,
    stars,
    description,
    currentBalance,
    newBalance,
    operationId,
    type,
  } = details
  const botData = await createBotByName(bot_name)
  if (!botData?.bot) {
    logger.error(`[notifyUserAboutSuccess] –ë–æ—Ç ${bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return
  }

  const isRu = language_code === 'ru'
  let message = ''
  const starsAmount = stars || amount

  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–∏–ø–∞
  if (
    description.toLowerCase().includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ') ||
    description.toLowerCase().includes('balance top-up')
  ) {
    message = isRu
      ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.\\n\\n‚≠êÔ∏è –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${starsAmount} –∑–≤–µ–∑–¥.\\n\\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.`
      : `üéâ Congratulations! Your balance has been successfully topped up.\\n\\n‚≠êÔ∏è ${starsAmount} stars have been credited to your balance.\\n\\nEnjoy using our service! \\n\\nClick on the /menu command to start using the bot.`
  } else if (
    description.toLowerCase().includes('–ø–æ–∫—É–ø–∫–∞') ||
    description.toLowerCase().includes('purchase')
  ) {
    message = isRu
      ? `‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ${starsAmount} ‚≠êÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!**\\n\\n${description}\\n\\n‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\\nüè† /menu\\n‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é /tech\\n–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!`
      : `‚úÖ **Thank you for your purchase! ${starsAmount} stars added to your balance!**\\n\\n${description}\\n\\n‚ú® Now you can use your new features. To do this, go to the main menu by clicking the button below:\\nüè† /menu\\n‚ùì If you have any questions, feel free to ask for help /tech\\nWe're always here to assist you!`
  } else if (
    type === TransactionType.MONEY_EXPENSE &&
    currentBalance !== undefined &&
    newBalance !== undefined
  ) {
    const id = operationId || 'N/A'
    message = isRu
      ? `ID: ${id}\\n–°—É–º–º–∞: ${amount} ‚≠êÔ∏è\\n–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚≠êÔ∏è\\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠êÔ∏è\\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`
      : `ID: ${id}\\nAmount: ${amount} ‚≠êÔ∏è\\nOld balance: ${currentBalance} ‚≠êÔ∏è\\nNew balance: ${newBalance} ‚≠êÔ∏è\\nDescription: ${description}`
  } else {
    message = isRu
      ? `‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è "${description}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ù–∞—á–∏—Å–ª–µ–Ω–æ ${starsAmount} ‚≠êÔ∏è.`
      : `‚úÖ Operation "${description}" completed successfully. ${starsAmount} ‚≠êÔ∏è credited.`
  }

  try {
    await botData.bot.telegram.sendMessage(telegram_id.toString(), message, {
      parse_mode: 'Markdown',
    })
    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      telegram_id,
      description,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
 */
export async function notifyUserAboutFailure(
  details: FailedPaymentDetails
): Promise<void> {
  const {
    telegram_id,
    bot_name,
    language_code = 'ru',
    error,
    attemptedAction,
  } = details
  const botData = await createBotByName(bot_name)
  if (!botData?.bot) {
    logger.error(`[notifyUserAboutFailure] –ë–æ—Ç ${bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return
  }

  const isRu = language_code === 'ru'
  const errorMessage = error instanceof Error ? error.message : String(error)
  const actionText = attemptedAction || (isRu ? '–æ–ø–µ—Ä–∞—Ü–∏–∏' : 'operation')

  const message = isRu
    ? `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è ${actionText}:

\`${errorMessage}\`

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /tech.`
    : `‚ùå Unfortunately, an error occurred during ${actionText}:

\`${errorMessage}\`

Please try again or contact support /tech.`

  try {
    await botData.bot.telegram.sendMessage(telegram_id.toString(), message, {
      parse_mode: 'Markdown',
    })
    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      telegram_id,
      error: errorMessage,
    })
  } catch (sendError) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      error: sendError instanceof Error ? sendError.message : String(sendError),
      telegram_id,
    })
  }
}

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ notifyUserAboutSuccess
 */
export async function sendTransactionNotificationTest(
  params: any
): Promise<{ success: boolean }> {
  logger.warn('sendTransactionNotificationTest is deprecated and not used')
  return { success: true }
}
