import { pulseBot } from '@/core/bot'
import fs from 'fs'
import { logger } from '@/utils/logger'

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
export const pulse = async (
  imageOrOptions: string | PulseOptions,
  prompt?: string,
  command?: string,
  telegram_id?: string,
  username?: string,
  is_ru?: boolean,
  bot_name?: string
) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ä–µ–∫—Ç)
    if (typeof imageOrOptions === 'object') {
      const options = imageOrOptions as PulseOptions

      logger.info({
        message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ pulse (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)',
        description: 'Sending data to pulse (new format)',
        action: options.action,
      })

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
      if (options.action === 'NeurophotoV2') {
        const { imageUrl, prompt, service, user } = options.result
        const { telegramId, username, language } = user
        const isRussian = language === 'ru'

        const truncatedPrompt =
          prompt.length > 800 ? prompt.slice(0, 800) : prompt
        const caption = isRussian
          ? `@${
              username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'
            } Telegram ID: ${telegramId} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt} \n\n –°–µ—Ä–≤–∏—Å: ${service}`
          : `@${
              username || 'User without username'
            } Telegram ID: ${telegramId} generated an image with a prompt: ${truncatedPrompt} \n\n Service: ${service}`

        const chatId = '@neuro_blogger_pulse'

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ URL –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        await pulseBot.telegram.sendPhoto(
          chatId,
          { url: imageUrl },
          { caption }
        )

        return
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –≤ pulse',
        description: 'Unknown action type in pulse',
        action: options.action,
      })

      return
    }

    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏)
    logger.info({
      message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ pulse (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)',
      description: 'Sending data to pulse (old format)',
      telegram_id,
      command,
    })
    if (!telegram_id || !prompt || !command || !bot_name) {
      throw new Error('Invalid data received in pulse')
    }

    const image = imageOrOptions // –í —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    const truncatedPrompt =
      prompt?.length > 800 ? prompt?.slice(0, 800) : prompt
    const caption = is_ru
      ? `@${
          username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'
        } Telegram ID: ${telegram_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt} \n\n –ö–æ–º–∞–Ω–¥–∞: ${command} \n\n Bot: @${bot_name}`
      : `@${
          username || 'User without username'
        } Telegram ID: ${telegram_id} generated an image with a prompt: ${truncatedPrompt} \n\n Command: ${command} \n\n Bot: @${bot_name}`

    const chatId = '@neuro_blogger_pulse'

    // send image as buffer
    await pulseBot.telegram.sendPhoto(
      chatId,
      { source: fs.createReadStream(image) },
      { caption }
    )
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ pulse',
      description: 'Error sending to pulse',
      error: (error as Error).message,
      stack: (error as Error).stack,
    })
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
interface PulseOptions {
  action: string
  result: any
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª @neuro_blogger_pulse
 *
 * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
 * @returns Promise<void>
 */
export const sendMediaToPulse = async (
  options: MediaPulseOptions
): Promise<void> => {
  try {
    const chatId = '@neuro_blogger_pulse'

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const {
      mediaType,
      mediaSource,
      telegramId,
      username = '',
      language = 'ru',
      serviceType,
      prompt = '',
      botName = '',
      additionalInfo = {},
    } = options

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
    const isRussian = language === 'ru'
    const truncatedPrompt = prompt.length > 800 ? prompt.slice(0, 800) : prompt

    // –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    let caption = isRussian
      ? `@${username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'} Telegram ID: ${telegramId} `
      : `@${username || 'User without username'} Telegram ID: ${telegramId} `

    // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (mediaType === 'photo') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ` : `generated an image`
    } else if (mediaType === 'video') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤–∏–¥–µ–æ` : `generated a video`
    } else if (mediaType === 'audio') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∞—É–¥–∏–æ` : `generated audio`
    } else if (mediaType === 'document') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç` : `generated a document`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (prompt) {
      caption += isRussian
        ? ` —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt}`
        : ` with a prompt: ${truncatedPrompt}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    if (serviceType) {
      caption += isRussian
        ? `\n\n –°–µ—Ä–≤–∏—Å: ${serviceType}`
        : `\n\n Service: ${serviceType}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    if (botName) {
      caption += isRussian ? `\n\n Bot: @${botName}` : `\n\n Bot: @${botName}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for (const [key, value] of Object.entries(additionalInfo)) {
      caption += `\n${key}: ${value}`
    }

    // –ò—Å—Ç–æ—á–Ω–∏–∫ –º–µ–¥–∏–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å URL –∏–ª–∏ –ø—É—Ç–µ–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    const isUrl =
      typeof mediaSource === 'string' &&
      (mediaSource.startsWith('http://') || mediaSource.startsWith('https://'))

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const mediaParams = isUrl
      ? { url: mediaSource }
      : { source: fs.createReadStream(mediaSource as string) }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    logger.info({
      message: `üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ${mediaType} –≤ pulse`,
      description: `Sending ${mediaType} to pulse channel`,
      telegramId,
      serviceType,
      mediaType,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –º–µ–¥–∏–∞
    switch (mediaType) {
      case 'photo':
        await pulseBot.telegram.sendPhoto(chatId, mediaParams, { caption })
        break
      case 'video':
        await pulseBot.telegram.sendVideo(chatId, mediaParams, { caption })
        break
      case 'audio':
        await pulseBot.telegram.sendAudio(chatId, mediaParams, { caption })
        break
      case 'document':
        await pulseBot.telegram.sendDocument(chatId, mediaParams, { caption })
        break
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: ${mediaType}`)
    }

    logger.info({
      message: '‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ pulse',
      description: 'Media successfully sent to pulse channel',
      mediaType,
      telegramId,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ pulse',
      description: 'Error sending media to pulse channel',
      error: (error as Error).message,
      stack: (error as Error).stack,
      options,
    })
  }
}

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
export interface MediaPulseOptions {
  mediaType: 'photo' | 'video' | 'audio' | 'document'
  mediaSource: string | Buffer // URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  telegramId: string | number
  username?: string
  language?: 'ru' | 'en'
  serviceType?: string
  prompt?: string
  botName?: string
  additionalInfo?: Record<string, string>
}
