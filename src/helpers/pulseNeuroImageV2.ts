import { pulseBot } from '@/core/bot'
import * as fs from 'fs'
import { Logger as logger } from '@/utils/logger'
import { TelegramId } from '@/interfaces/telegram.interface'
export const pulseNeuroImageV2 = async (
  imagePath: string,
  prompt: string,
  command: string,
  telegram_id: TelegramId,
  username: string,
  is_ru: boolean
) => {
  try {
    // if (process.env.NODE_ENV === 'development') return

    if (!imagePath) {
      throw new Error('Invalid data received in pulseNeuroImageV2')
    }

    if (!prompt) {
      throw new Error('Invalid prompt received in pulseNeuroImageV2')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –ø–æ–ª—É—á–∞–µ–º –ª–∏ –º—ã URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const isLocalFile =
      !imagePath.startsWith('http') && fs.existsSync(imagePath)

    logger.info({
      message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—É–ª—å—Å',
      description: 'Sending image to pulse channel',
      isLocalFile,
      imagePath: imagePath.substring(0, 50) + '...',
    })

    const truncatedPrompt = prompt.length > 800 ? prompt.slice(0, 800) : prompt
    const caption = is_ru
      ? `@${
          username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'
        } Telegram ID: ${telegram_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt} \n\n –ö–æ–º–∞–Ω–¥–∞: ${command}`
      : `@${
          username || 'User without username'
        } Telegram ID: ${telegram_id} generated an image with a prompt: ${truncatedPrompt} \n\n Command: ${command}`

    const chatId = '@neuro_blogger_pulse'

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if (isLocalFile) {
      await pulseBot.telegram.sendPhoto(
        chatId,
        { source: fs.createReadStream(imagePath) },
        { caption }
      )
    } else {
      // Fallback –Ω–∞ URL, —Ö–æ—Ç—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      await pulseBot.telegram.sendPhoto(chatId, imagePath, { caption })
    }

    logger.info({
      message: '‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª—å—Å',
      description: 'Image successfully sent to pulse channel',
      telegram_id,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø—É–ª—å—Å',
      description: 'Error sending to pulse channel',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : null,
    })
    throw new Error('Error sending pulse')
  }
}
