import { logger } from '@/utils/logger'
import { Telegram } from 'telegraf'
import { supabase } from '@/supabase'
import { isDev } from '@/config'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
 */
export interface AmbassadorNotificationParams {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂ */
  user_telegram_id: number | string

  /** –ò–º—è –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–ª–∞—Ç–µ–∂ */
  bot_name: string

  /** –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ */
  amount: number

  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ */
  stars: number

  /** –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */
  transaction_type: TransactionType | string

  /** –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */
  description: string

  /** ID –æ–ø–µ—Ä–∞—Ü–∏–∏ */
  operation_id: string
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–µ –ø–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
 * @param bot_name –ò–º—è –±–æ—Ç–∞
 * @returns –î–∞–Ω–Ω—ã–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export async function getAmbassadorByBotName(bot_name: string) {
  try {
    const { data, error } = await supabase
      .from('avatars')
      .select('telegram_id, bot_name, group')
      .eq('bot_name', bot_name)
      .single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞:', {
        description: 'Error fetching ambassador data',
        error: error.message,
        bot_name,
      })
      return null
    }

    if (!data) {
      logger.warn('‚ö†Ô∏è –ê–º–±–∞—Å—Å–∞–¥–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞:', {
        description: 'Ambassador not found for bot',
        bot_name,
      })
      return null
    }

    return data
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞:', {
      description: 'Error in getAmbassadorByBotName',
      error: error instanceof Error ? error.message : String(error),
      bot_name,
    })
    return null
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞
 */
function formatAmbassadorNotification(
  params: AmbassadorNotificationParams,
  username?: string
): string {
  const { user_telegram_id, amount, stars, transaction_type, description } =
    params

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  let emoji = 'üí∞'
  if (transaction_type.toLowerCase().includes('expense')) {
    emoji = 'üí∏'
  } else if (transaction_type.toLowerCase().includes('subscription')) {
    emoji = '‚≠êÔ∏è'
  }

  // –¢–µ–∫—Å—Ç –ø–ª–∞—Ç–µ–∂–∞
  const userLink = username
    ? `<a href="tg://user?id=${user_telegram_id}">${username}</a>`
    : `<a href="tg://user?id=${user_telegram_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>`

  return `${emoji} <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ!</b>

${userLink} —Å–æ–≤–µ—Ä—à–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:
‚îú –¢–∏–ø: <b>${transaction_type}</b>
‚îú –°—É–º–º–∞: <b>${amount} —Ä—É–±.</b>
‚îú –ó–≤–µ–∑–¥—ã: <b>${stars} ‚≠êÔ∏è</b>
‚îî –û–ø–∏—Å–∞–Ω–∏–µ: <i>${description}</i>

<i>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${params.operation_id}</i>`
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –µ–≥–æ –±–æ—Ç–µ
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function sendAmbassadorNotification(
  params: AmbassadorNotificationParams
): Promise<{ success: boolean; message?: string }> {
  try {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (isDev) {
      logger.info('üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É (DEV —Ä–µ–∂–∏–º):', {
        description: 'Ambassador notification in DEV mode',
        params,
      })
      return { success: true, message: 'DEV mode, notification skipped' }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–µ
    const ambassador = await getAmbassadorByBotName(params.bot_name)
    if (!ambassador) {
      return {
        success: false,
        message: `Ambassador not found for bot: ${params.bot_name}`,
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    let username: string | undefined
    try {
      const { data: userData } = await supabase
        .from('users')
        .select('username, first_name, last_name')
        .eq('telegram_id', String(params.user_telegram_id))
        .single()

      if (userData) {
        username =
          userData.username ||
          (userData.first_name
            ? `${userData.first_name} ${userData.last_name || ''}`.trim()
            : undefined)
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Could not fetch user data',
        telegram_id: params.user_telegram_id,
      })
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatAmbassadorNotification(params, username)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É
    const telegram = new Telegram(process.env.BOT_TOKEN || '')
    await telegram.sendMessage(ambassador.telegram_id, message, {
      parse_mode: 'HTML',
    })

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      description: 'Ambassador notification sent',
      ambassador_telegram_id: ambassador.telegram_id,
      bot_name: params.bot_name,
      operation_id: params.operation_id,
    })

    return { success: true }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É:', {
      description: 'Error sending ambassador notification',
      error: error instanceof Error ? error.message : String(error),
      params,
    })

    return {
      success: false,
      message: error instanceof Error ? error.message : String(error),
    }
  }
}
