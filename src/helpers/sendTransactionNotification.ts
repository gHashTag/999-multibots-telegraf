import { logger } from '@/utils/logger'
import { createBotByName } from '@/core/bot'

interface TransactionNotificationParams {
  telegram_id: number
  operationId: string
  amount: number
  currentBalance: number
  newBalance: number
  description: string
  isRu: boolean
  bot_name: string
}

interface SendTransactionNotificationParams {
  telegram_id: number
  operationId: string
  amount: number
  currentBalance: number
  newBalance: number
  description: string
  isRu?: boolean
  bot_name?: string
}

export const sendTransactionNotification = async ({
  telegram_id,
  operationId,
  amount,
  currentBalance,
  newBalance,
  isRu,
  bot_name,
}: TransactionNotificationParams) => {
  try {
    logger.info('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Sending transaction notification',
      telegram_id,
      operationId,
      amount,
      currentBalance,
      newBalance,
    })

    const botData = await createBotByName(bot_name)

    if (!botData) {
      throw new Error(`Bot ${bot_name} not found`)
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∫ —á–∏—Å–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    const oldBalanceNumber = Number(currentBalance)
    const newBalanceNumber = Number(newBalance)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    // –ï—Å–ª–∏ amount –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤—ã—à–µ —Å—Ç–∞—Ä–æ–≥–æ, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (amount < 0 && newBalanceNumber > oldBalanceNumber) {
      logger.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Suspicious balance change',
        amount,
        currentBalance: oldBalanceNumber,
        newBalance: newBalanceNumber,
        expected_new_balance: oldBalanceNumber + amount,
      })
    }

    const message = isRu
      ? `
ID: ${operationId}
–°—É–º–º–∞: ${amount} ‚≠êÔ∏è
–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${oldBalanceNumber} ‚≠êÔ∏è
–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalanceNumber} ‚≠êÔ∏è`
      : `
ID: ${operationId}
Amount: ${amount} ‚≠êÔ∏è
Old balance: ${oldBalanceNumber} ‚≠êÔ∏è
New balance: ${newBalanceNumber} ‚≠êÔ∏è`

    await botData.bot.telegram.sendMessage(telegram_id, message)

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      description: 'Transaction notification sent',
      telegram_id,
      operationId,
      amount,
      old_balance: oldBalanceNumber,
      new_balance: newBalanceNumber,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
      description: 'Error sending transaction notification',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      operationId,
    })
    throw error
  }
}

export async function sendTransactionNotificationTest(
  params: SendTransactionNotificationParams
): Promise<{ success: boolean }> {
  // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
  if (process.env.NODE_ENV === 'test') {
    logger.info('üì® –ú–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Mock transaction notification',
      telegram_id: params.telegram_id,
      operationId: params.operationId,
      amount: params.amount,
      currentBalance: params.currentBalance,
      newBalance: params.newBalance,
    })
    return { success: true }
  }

  // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  try {
    const {
      telegram_id,
      operationId,
      amount,
      currentBalance,
      newBalance,
      description,
      isRu = true,
      bot_name = 'default',
    } = params

    logger.info('üì® –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Starting to send transaction notification',
      telegram_id,
      operationId,
      amount,
      currentBalance,
      newBalance,
      bot_name,
    })

    await sendTransactionNotification({
      telegram_id,
      operationId,
      amount,
      currentBalance,
      newBalance,
      description,
      isRu,
      bot_name,
    })

    logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      description: 'Transaction notification successfully sent',
      telegram_id,
      operationId,
      amount,
    })

    return { success: true }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Error sending transaction notification',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: params.telegram_id,
      operationId: params.operationId,
      amount: params.amount,
    })
    return { success: false }
  }
}
