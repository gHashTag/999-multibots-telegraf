import { logger } from '@/utils/logger'

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API Replicate –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param output –û—Ç–≤–µ—Ç –æ—Ç API Replicate
 * @returns URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function processApiResponse(output: unknown): Promise<string> {
  logger.info({
    message: 'üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API',
    description: 'Processing API response',
    output_type: typeof output,
    output_is_array: Array.isArray(output),
    output_preview: JSON.stringify(output).substring(0, 200) + '...',
  })

  // –°–ª—É—á–∞–π 1: –æ—Ç–≤–µ—Ç - —Å—Ç—Ä–æ–∫–∞ (–ø—Ä—è–º–æ–π URL)
  if (typeof output === 'string') {
    logger.info({
      message: '‚úÖ –û—Ç–≤–µ—Ç API - —Å—Ç—Ä–æ–∫–∞ URL',
      description: 'API response is a string URL',
      url: output,
    })
    return output
  }

  // –°–ª—É—á–∞–π 2: –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  if (Array.isArray(output)) {
    logger.info({
      message: '‚úÖ –û—Ç–≤–µ—Ç API - –º–∞—Å—Å–∏–≤',
      description: 'API response is an array',
      array_length: output.length,
      first_element_type: output.length > 0 ? typeof output[0] : 'none',
    })

    if (output.length > 0 && typeof output[0] === 'string') {
      logger.info({
        message: '‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL –∏–∑ –º–∞—Å—Å–∏–≤–∞',
        description: 'Extracted URL from array',
        url: output[0],
      })
      return output[0]
    }
  }

  // –°–ª—É—á–∞–π 3: –æ—Ç–≤–µ—Ç - –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º output
  if (output && typeof output === 'object') {
    logger.info({
      message: '‚úÖ –û—Ç–≤–µ—Ç API - –æ–±—ä–µ–∫—Ç',
      description: 'API response is an object',
      has_output_field: 'output' in output,
      keys: Object.keys(output),
    })

    if ('output' in output) {
      const outputField = (output as { output: unknown }).output

      // –ï—Å–ª–∏ –ø–æ–ª–µ output - —Å—Ç—Ä–æ–∫–∞
      if (typeof outputField === 'string') {
        logger.info({
          message: '‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL –∏–∑ –ø–æ–ª—è output (—Å—Ç—Ä–æ–∫–∞)',
          description: 'Extracted URL from output field (string)',
          url: outputField,
        })
        return outputField
      }

      // –ï—Å–ª–∏ –ø–æ–ª–µ output - –º–∞—Å—Å–∏–≤
      if (Array.isArray(outputField) && outputField.length > 0) {
        if (typeof outputField[0] === 'string') {
          logger.info({
            message: '‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL –∏–∑ –ø–æ–ª—è output (–º–∞—Å—Å–∏–≤)',
            description: 'Extracted URL from output field (array)',
            url: outputField[0],
          })
          return outputField[0]
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
    const possibleFields = ['url', 'image', 'image_url', 'result', 'prediction']
    for (const field of possibleFields) {
      if (field in output) {
        const value = (output as Record<string, unknown>)[field]
        if (typeof value === 'string') {
          logger.info({
            message: `‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL –∏–∑ –ø–æ–ª—è ${field}`,
            description: `Extracted URL from ${field} field`,
            url: value,
          })
          return value
        }

        if (
          Array.isArray(value) &&
          value.length > 0 &&
          typeof value[0] === 'string'
        ) {
          logger.info({
            message: `‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–æ–ª–µ ${field}`,
            description: `Extracted URL from array in ${field} field`,
            url: value[0],
          })
          return value[0]
        }
      }
    }
  }

  // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ URL
  logger.error({
    message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ API',
    description: 'Failed to extract URL from API response',
    output_type: typeof output,
    output_preview: JSON.stringify(output).substring(0, 500) + '...',
    output_full: JSON.stringify(output),
  })

  throw new Error(
    `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: ${JSON.stringify(output).substring(0, 200)}...`
  )
}
