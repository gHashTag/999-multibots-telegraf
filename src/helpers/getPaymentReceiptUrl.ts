import { logger } from '@/utils/logger'
import { supabaseClient } from '@/core/supabase'
import { generateReceiptUrl } from './generateReceiptUrl'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL —á–µ–∫–∞ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
 *
 * @param paymentId - ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 * @returns URL —á–µ–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export async function getPaymentReceiptUrl(
  paymentId: string | number
): Promise<string> {
  try {
    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–∞', {
      description: 'Getting payment data for receipt generation',
      paymentId,
    })

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: payment, error } = await supabaseClient
      .from('payments_v2')
      .select('*')
      .eq('id', paymentId)
      .single()

    if (error || !payment) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error getting payment data',
        paymentId,
        error: error?.message,
      })
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: ${error?.message || '–ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'}`
      )
    }

    logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω—ã', {
      description: 'Payment data retrieved successfully',
      paymentId,
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —á–µ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const receiptUrl = generateReceiptUrl({
      operationId: payment.id.toString(),
      amount: payment.amount,
      stars: payment.stars,
      botName: payment.bot_name,
      telegramId: payment.telegram_id?.toString(),
      timestamp: payment.created_at,
    })

    logger.info('üßæ URL —á–µ–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', {
      description: 'Receipt URL generated',
      paymentId,
      url: receiptUrl,
    })

    return receiptUrl
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —á–µ–∫–∞', {
      description: 'Error generating receipt URL',
      paymentId,
      error: error.message,
    })
    throw error
  }
}
