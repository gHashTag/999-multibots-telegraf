import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ supportRequest
// import { supportRequest } from '@/core/bot'

// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ supportRequest
const supportRequest = (message: string, data: any) => {
  logger.warn('‚ö†Ô∏è –í—ã–∑–æ–≤ –∑–∞–≥–ª—É—à–∫–∏ supportRequest:', { message, data })
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ Telegram API
interface TelegramError {
  message?: string
  on?: {
    method?: string
    payload?: any
  }
  code?: number
  response?: any
  description?: string
  stack?: string
}

// –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
enum ErrorType {
  AUTH = 'AUTH',
  RATE_LIMIT = 'RATE_LIMIT',
  BLOCKED = 'BLOCKED',
  INVALID_MESSAGE = 'INVALID_MESSAGE',
  NETWORK = 'NETWORK',
  API = 'API',
  UNKNOWN = 'UNKNOWN',
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ Telegram API
function classifyTelegramError(error: TelegramError): ErrorType {
  const message = error.message?.toLowerCase() || ''
  const description = error.description?.toLowerCase() || ''

  if (message.includes('401: unauthorized') || message.includes('not found')) {
    return ErrorType.AUTH
  }

  if (
    message.includes('429: too many requests') ||
    description.includes('retry after')
  ) {
    return ErrorType.RATE_LIMIT
  }

  if (
    message.includes('403: forbidden') ||
    description.includes('blocked') ||
    description.includes('deactivated') ||
    description.includes('not enough rights') ||
    description.includes('bot was kicked')
  ) {
    return ErrorType.BLOCKED
  }

  if (
    message.includes('400: bad request') &&
    (description.includes('message to edit not found') ||
      description.includes('message is not modified') ||
      description.includes('message text is empty'))
  ) {
    return ErrorType.INVALID_MESSAGE
  }

  if (
    message.includes('network error') ||
    message.includes('socket') ||
    message.includes('timedout') ||
    message.includes('connection')
  ) {
    return ErrorType.NETWORK
  }

  if (message.includes('telegram')) {
    return ErrorType.API
  }

  return ErrorType.UNKNOWN
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫
const errorCounts: Record<ErrorType, number> = {
  [ErrorType.AUTH]: 0,
  [ErrorType.RATE_LIMIT]: 0,
  [ErrorType.BLOCKED]: 0,
  [ErrorType.INVALID_MESSAGE]: 0,
  [ErrorType.NETWORK]: 0,
  [ErrorType.API]: 0,
  [ErrorType.UNKNOWN]: 0,
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –æ—á–∏—Å—Ç–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
let errorCountResetTimer: NodeJS.Timeout | null = null

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)
errorCountResetTimer = setInterval(() => {
  Object.keys(errorCounts).forEach(key => {
    const type = key as ErrorType
    if (errorCounts[type] > 0) {
      logger.info(
        `üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ ${type}. –ë—ã–ª–æ: ${errorCounts[type]}`
      )
      errorCounts[type] = 0
    }
  })
}, 3600000) // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram API –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –æ—Ç–∫–∞–∑–∞ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ç–æ–∫–µ–Ω–∞–º–∏
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
export const setupErrorHandler = (bot: Telegraf<MyContext>): void => {
  bot.catch((err, ctx) => {
    // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    const error = err as TelegramError

    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    const errorType = classifyTelegramError(error)

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    errorCounts[errorType]++

    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const errorInfo = {
      error_type: errorType,
      description: error.description || error.message,
      bot_name: ctx?.botInfo?.username || 'unknown',
      error_message: error.message,
      error_code: error.code,
      method: error.on?.method || 'unknown',
      payload: error.on?.payload || {},
      update_id: ctx?.update?.update_id,
      user_id: ctx?.from?.id,
      chat_id: ctx?.chat?.id,
      timestamp: new Date().toISOString(),
      count: errorCounts[errorType],
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (errorType) {
      case ErrorType.AUTH:
        logger.error('üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram API:', errorInfo)
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        supportRequest('üö® –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram API', errorInfo)
        break

      case ErrorType.RATE_LIMIT:
        logger.warn('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API:', errorInfo)
        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –º–Ω–æ–≥–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ - –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if (errorCounts[ErrorType.RATE_LIMIT] > 10) {
          supportRequest('üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API', errorInfo)
        }
        break

      case ErrorType.BLOCKED:
        logger.warn('üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', errorInfo)
        break

      case ErrorType.INVALID_MESSAGE:
        logger.debug('üìù –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', errorInfo)
        break

      case ErrorType.NETWORK:
        logger.warn(
          'üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Telegram API:',
          errorInfo
        )
        // –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if (errorCounts[ErrorType.NETWORK] > 20) {
          supportRequest('üö® –°–µ—Ä–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram API', errorInfo)
        }
        break

      case ErrorType.API:
        logger.error('üîÑ –û—à–∏–±–∫–∞ API Telegram:', errorInfo)
        break

      default: // UNKNOWN
        logger.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API:', {
          ...errorInfo,
          stack: error.stack,
        })
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if (errorCounts[ErrorType.UNKNOWN] > 3) {
          supportRequest('üö® –°–µ—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram API', errorInfo)
        }
        break
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    // –∏ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (
      [ErrorType.AUTH, ErrorType.API, ErrorType.UNKNOWN].includes(errorType) &&
      ctx &&
      ctx.from &&
      ctx.chat &&
      ctx.telegram
    ) {
      try {
        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ
        const errorMessage =
          'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–∞–Ω–¥–æ–π /support'

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (error.on?.method !== 'sendMessage') {
          ctx.telegram.sendMessage(ctx.chat.id, errorMessage).catch(e =>
            logger.error(
              '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:',
              {
                user_id: ctx.from?.id,
                error: e.message,
              }
            )
          )
        }
      } catch (e) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          original_error: errorInfo,
          notification_error: e instanceof Error ? e.message : String(e),
        })
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise<void>
    return Promise.resolve()
  })
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö
 * –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
 */
export const clearErrorHandlerTimers = (): void => {
  if (errorCountResetTimer) {
    clearInterval(errorCountResetTimer)
    errorCountResetTimer = null
  }
}
