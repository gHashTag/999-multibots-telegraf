/**
 * –§–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Node.js
 * –ó–∞–ø—É—Å–∫: pnpm vite-node src/test-modules.ts
 */

import fs from 'node:fs'
import path from 'node:path'
import { Buffer } from 'node:buffer'
import { logger } from './utils/logger'

// –ó–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
const GREEN = '\x1b[32m'
// –ö—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
const RED = '\x1b[31m'
// –ñ—ë–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º
const YELLOW = '\x1b[33m'
// –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
const RESET = '\x1b[0m'

// –£—Å–ø–µ—à–Ω–æ
const SUCCESS = `${GREEN}‚úì${RESET}`
// –û—à–∏–±–∫–∞
const ERROR = `${RED}‚úó${RESET}`
// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
const WARNING = `${YELLOW}!${RESET}`

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –≤—ã–≤–æ–¥–æ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
function handleError(error: unknown, context: string): void {
  console.error(`${ERROR} –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "${context}":`)

  if (error instanceof Error) {
    console.error(`   –¢–∏–ø: ${error.name}`)
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`)
    console.error(`   –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:`)
    console.error(`   ${error.stack?.split('\n').slice(1).join('\n   ')}`)
  } else {
    console.error(`   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`)
  }

  console.error(`${WARNING} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`)
  console.error(`   Node.js: ${process.version}`)
  console.error(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}`)
  console.error(`   ESM –º–æ–¥—É–ª–∏: ${!!process.env.USE_ESM || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`)
  console.error(`   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`)
  console.error(
    `   NODE_OPTIONS: ${process.env.NODE_OPTIONS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`
  )
}

async function testModules() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π Node.js')
  console.log('------------------------------')

  const tempDir = path.join(process.cwd(), 'temp')
  const tempFile = path.join(tempDir, 'test.json')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è fs
    console.log('üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fs...')
    console.log(`   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ fs: ${typeof fs}`)
    console.log(
      `   –°–≤–æ–π—Å—Ç–≤–∞: ${Object.keys(fs).join(', ').substring(0, 100)}...`
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true })
      console.log(`${SUCCESS} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${tempDir}`)
    } else {
      console.log(`${SUCCESS} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${tempDir}`)
    }

    // –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const testData = { test: true, timestamp: Date.now() }
    fs.writeFileSync(tempFile, JSON.stringify(testData, null, 2))
    console.log(`${SUCCESS} –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: ${tempFile}`)

    // –ß—Ç–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const fileContent = fs.readFileSync(tempFile, 'utf-8')
    const parsedData = JSON.parse(fileContent)
    console.log(`${SUCCESS} –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${JSON.stringify(parsedData)}`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Buffer
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Buffer...')
    console.log(`   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ Buffer: ${typeof Buffer}`)
    const buffer = Buffer.from('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!')
    console.log(`${SUCCESS} Buffer —Å–æ–∑–¥–∞–Ω: ${buffer.toString()}`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º path
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ path...')
    console.log(`   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ path: ${typeof path}`)
    console.log(`   –°–≤–æ–π—Å—Ç–≤–∞: ${Object.keys(path).join(', ')}`)
    const resolvedPath = path.resolve('./src')
    console.log(`${SUCCESS} path.resolve: ${resolvedPath}`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞...')
    try {
      console.log(`   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ logger: ${typeof logger}`)
      console.log(`   –°–≤–æ–π—Å—Ç–≤–∞: ${Object.keys(logger).join(', ')}`)
      logger.info('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞')
      console.log(`${SUCCESS} –õ–æ–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç`)
    } catch (error) {
      console.log(`${ERROR} –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:`)
      handleError(error, 'logger')
    }

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error(`\n${ERROR} –û—à–∏–±–∫–∞:`)
    handleError(error, 'global')
  }
}

testModules().catch(error => {
  console.error(`\n${ERROR} –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`)
  handleError(error, 'promise')
})
