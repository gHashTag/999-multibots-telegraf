import { imageModelMenu } from './menu/imageModelMenu'
import { logger } from './utils/logger'
import { generateTextToImage } from './services/generateTextToImage'
import { isRussian } from './helpers/language'
import { MyContext } from './interfaces/'
import { Telegraf, Context } from 'telegraf'

import { generateNeuroImage } from './services/generateNeuroImage'
import { handleSizeSelection } from './handlers'
import { levels, mainMenu } from './menu'
import { getReferalsCountAndUserData } from './core/supabase'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
import { handleRestartVideoGeneration } from './handlers/handleVideoRestart'
import { getUserProfileAndSettings } from '@/db/userSettings'

export const setupHearsHandlers = (bot: Telegraf<MyContext>) => {
  logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears...')

  bot.hears(
    [levels[1].title_ru, levels[1].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.DigitalAvatarBody
      await ctx.scene.enter('digitalAvatarBodyWizard')
    }
  )

  bot.hears(
    [levels[2].title_ru, levels[2].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.NeuroPhotoV2
      await ctx.scene.enter('neuroPhotoWizardV2')
    }
  )

  bot.hears(['üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2', 'üì∏ NeuroPhoto 2'], async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2 –æ—Ç ${ctx.from?.id}`)
    ctx.session.mode = ModeEnum.NeuroPhoto
    await ctx.scene.enter('neuroPhotoWizard')
  })

  bot.hears(
    [levels[3].title_ru, levels[3].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.ImageToPrompt
      await ctx.scene.enter(ModeEnum.ImageToPrompt)
    }
  )

  bot.hears(
    [levels[4].title_ru, levels[4].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.Avatar
      await ctx.scene.enter('avatarWizard')
    }
  )

  bot.hears(
    [levels[5].title_ru, levels[5].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.ChatWithAvatar
      await ctx.scene.enter('chatWithAvatarWizard')
    }
  )

  bot.hears(
    [levels[6].title_ru, levels[6].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.SelectModel
      await ctx.scene.enter('selectModelWizard')
    }
  )

  bot.hears(
    [levels[7].title_ru, levels[7].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.Voice
      await ctx.scene.enter('voiceAvatarWizard')
    }
  )

  bot.hears(
    [levels[8].title_ru, levels[8].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.TextToSpeech
      await ctx.scene.enter('textToSpeechWizard')
    }
  )

  bot.hears(
    [levels[9].title_ru, levels[9].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.ImageToVideo
      await ctx.scene.enter('imageToVideoWizard')
    }
  )

  bot.hears(
    [levels[10].title_ru, levels[10].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.TextToVideo
      await ctx.scene.enter('textToVideoWizard')
    }
  )

  bot.hears(
    [levels[11].title_ru, levels[11].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.TextToImage
      await ctx.scene.enter('textToImageWizard')
    }
  )

  bot.hears(
    ['üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?', 'üé• Generate new video?'],
    async (ctx: MyContext) => {
      await handleRestartVideoGeneration(ctx)
    }
  )

  bot.hears(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£'], async (ctx: MyContext) => {
    if (!('text' in ctx.message)) {
      logger.warn('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ hears')
      return
    }
    const text = ctx.message.text
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${text} –æ—Ç ${ctx.from?.id}`)
    const isRu = isRussian(ctx)
    const prompt = ctx.session.prompt
    const telegramId = ctx.from.id
    const numImages = parseInt(text[0])

    const { profile, settings } = await getUserProfileAndSettings(telegramId)

    if (!profile || !settings) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è hears handler',
        { telegramId }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : 'Error: Could not retrieve user data.'
      )
      return
    }

    if (!prompt) {
      logger.error('–ü—Ä–æ–º–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è hears handler', {
        telegramId,
      })
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : 'Error: Prompt not found. Please try again.'
      )
      return
    }

    const generate = async (num: number) => {
      if (ctx.session.mode === ModeEnum.NeuroPhotoV2) {
        await generateNeuroImage(
          prompt,
          ctx.session.userModel.model_url,
          num,
          telegramId.toString(),
          ctx,
          ctx.botInfo?.username
        )
      } else {
        await generateTextToImage(
          prompt,
          settings.imageModel,
          numImages,
          telegramId.toString(),
          isRu,
          ctx,
          ctx.botInfo?.username || 'unknown_bot'
        )
      }
    }

    if (numImages >= 1 && numImages <= 4) {
      await generate(numImages)
    } else {
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞')
    }
  })

  bot.hears(
    ['‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '‚¨ÜÔ∏è Improve prompt'],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –æ—Ç ${ctx.from?.id}`)
      await ctx.scene.enter('improvePromptWizard')
    }
  )

  bot.hears(
    ['üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', 'üìê Change size'],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç ${ctx.from?.id}`)
      await ctx.scene.enter('sizeWizard')
    }
  )

  bot.hears(
    [
      '21:9',
      '16:9',
      '3:2',
      '4:3',
      '5:4',
      '1:1',
      '4:5',
      '3:4',
      '2:3',
      '9:16',
      '9:21',
    ],
    async (ctx: MyContext) => {
      if (!('text' in ctx.message)) {
        logger.warn(
          '–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è hears –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞'
        )
        return
      }
      const size = ctx.message.text
      logger.debug(
        `–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ ${size} –æ—Ç ${ctx.from?.id}`
      )
      await handleSizeSelection(ctx, size)
    }
  )

  bot.hears(/^(–û—Ç–º–µ–Ω–∞|–æ—Ç–º–µ–Ω–∞|Cancel|cancel)$/i, async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –û—Ç–º–µ–Ω–∞ –æ—Ç ${ctx.from?.id}`)
    const isRu = isRussian(ctx)
    const telegram_id = ctx.from?.id?.toString() || ''
    const { subscriptionType } = await getReferalsCountAndUserData(telegram_id)

    await mainMenu({
      isRu,
      subscription: subscriptionType,
      ctx,
    })
    await ctx.scene.leave()
  })

  bot.hears(
    [levels[103].title_ru, levels[103].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–º–æ—â—å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.HelpScene
      await ctx.scene.enter('helpScene')
    }
  )

  bot.hears(
    [levels[100].title_ru, levels[100].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.TopUpBalance
      ctx.session.subscription = SubscriptionType.STARS
      await ctx.scene.enter(ModeEnum.PaymentScene)
    }
  )

  bot.hears(
    [levels[101].title_ru, levels[101].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ë–∞–ª–∞–Ω—Å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.Balance
      await ctx.scene.enter('balanceScene')
    }
  )

  bot.hears(
    [levels[102].title_ru, levels[102].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.Invite
      await ctx.scene.enter('inviteScene')
    }
  )

  bot.hears(
    [levels[104].title_ru, levels[104].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–º–æ—â—å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.HelpScene
      await ctx.scene.enter('helpScene')
    }
  )

  bot.hears([isRu ? 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' : 'üí¨ Support'], async ctx => {
    logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
    ctx.session.mode = ModeEnum.HelpScene
    await ctx.scene.enter('helpScene')
  })

  bot.hears([isRu ? '‚ùì –ü–æ–º–æ—â—å' : '‚ùì Help'], async ctx => {
    logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–æ–º–æ—â—å')
    ctx.session.mode = ModeEnum.HelpScene
    await ctx.scene.enter('helpScene')
  })
}
