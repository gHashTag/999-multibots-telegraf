import { imageModelMenu } from './menu/imageModelMenu'
import { logger } from './utils/logger'
import { generateTextToImage } from './services/generateTextToImage'
import { isRussian } from './helpers/language'
import { MyContext } from './interfaces/'
import { Telegraf, Markup } from 'telegraf'

import { generateNeuroImage } from './services/generateNeuroImage'
import { handleSizeSelection } from './handlers'
import { levels, mainMenu } from './menu'
import { getReferalsCountAndUserData } from './core/supabase'
import { ModeEnum } from './interfaces/modes'
import { SubscriptionType } from './interfaces/subscription.interface'
// import { handleRestartVideoGeneration } from './handlers/handleVideoRestart' // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –Ω–µ—è—Å–Ω–∞
import { getUserProfileAndSettings } from '@/db/userSettings'
import { checkSubscriptionGuard } from './helpers/subscriptionGuard'

export const setupHearsHandlers = (bot: Telegraf<MyContext>) => {
  logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears...')

  // === –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
    logger.info('GLOBAL HEARS: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  bot.hears(['‚ùì –°–ø—Ä–∞–≤–∫–∞', '‚ùì Help'], async ctx => {
    logger.info('GLOBAL HEARS: –°–ø—Ä–∞–≤–∫–∞', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.Help)
    } catch (error) {
      logger.error('Error in –°–ø—Ä–∞–≤–∫–∞ hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  bot.hears(['–û—Ç–º–µ–Ω–∞', 'Cancel'], async ctx => {
    logger.info('GLOBAL HEARS: –û—Ç–º–µ–Ω–∞/Cancel', {
      telegramId: ctx.from?.id,
    })
    try {
      await ctx.reply(
        isRussian(ctx) ? '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.' : '‚ùå Process cancelled.',
        Markup.removeKeyboard()
      )
      await ctx.scene.leave()
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (error) {
      logger.error('Error in –û—Ç–º–µ–Ω–∞/Cancel hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // === –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –ó–ê–©–ò–¢–û–ô ===

  bot.hears(
    [levels[1].title_ru, levels[1].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.DigitalAvatarBody
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[2].title_ru, levels[2].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
      const hasSubscription = await checkSubscriptionGuard(ctx, 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ')
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.NeuroPhotoV2
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(['üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2', 'üì∏ NeuroPhoto 2'], async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2 –æ—Ç ${ctx.from?.id}`)

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const hasSubscription = await checkSubscriptionGuard(ctx, 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2')
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    ctx.session.mode = ModeEnum.NeuroPhoto
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears(
    [levels[3].title_ru, levels[3].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üîç –ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–æ—Ç–æ'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.ImageToPrompt
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[4].title_ru, levels[4].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üß† –ú–æ–∑–≥ –∞–≤–∞—Ç–∞—Ä–∞'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.Avatar
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[5].title_ru, levels[5].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —á–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üí≠ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.ChatWithAvatar
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[6].title_ru, levels[6].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.SelectModel
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[7].title_ru, levels[7].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –≥–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üé§ –ì–æ–ª–æ—Å –∞–≤–∞—Ç–∞—Ä–∞'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.Voice
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[8].title_ru, levels[8].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.TextToSpeech
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[9].title_ru, levels[9].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ–æ
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üé• –§–æ—Ç–æ –≤ –≤–∏–¥–µ–æ'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.ImageToVideo
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[10].title_ru, levels[10].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üé• –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.TextToVideo
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  bot.hears(
    [levels[11].title_ru, levels[11].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üñºÔ∏è –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.TextToImage
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    }
  )

  // bot.hears(
  //   ['üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?', 'üé• Generate new video?'],
  //   async (ctx: MyContext) => {
  //     await handleRestartVideoGeneration(ctx)
  //   }
  // )

  bot.hears('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ (–§–æ—Ç–æ –≤ –í–∏–¥–µ–æ)', async (ctx: MyContext) => {
    logger.info('HEARS: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ (–§–æ—Ç–æ –≤ –í–∏–¥–µ–æ)', {
      telegramId: ctx.from?.id,
    })
    try {
      ctx.session.mode = ModeEnum.ImageToVideo
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
    } catch (error) {
      logger.error('Error entering imageToVideoWizard from hears:', {
        error,
        telegramId: ctx.from?.id,
      })
    }
  })

  // –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø "–¢–ï–ö–°–¢ –í –í–ò–î–ï–û"
  bot.hears(
    ['‚ú® –°–æ–∑–¥–∞—Ç—å –µ—â–µ (–¢–µ–∫—Å—Ç –≤ –í–∏–¥–µ–æ)', '‚ú® Create More (Text to Video)'],
    async (ctx: MyContext) => {
      logger.info('HEARS: –°–æ–∑–¥–∞—Ç—å –µ—â–µ (–¢–µ–∫—Å—Ç –≤ –í–∏–¥–µ–æ)', {
        telegramId: ctx.from?.id,
      })
      try {
        ctx.session.mode = ModeEnum.TextToVideo
        if (ctx.scene.current) {
          await ctx.scene.leave()
        }
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      } catch (error) {
        logger.error(
          'Error entering textToVideoWizard from "–°–æ–∑–¥–∞—Ç—å –µ—â–µ" hears:',
          {
            error: error,
            errorString: String(error),
            errorJson: JSON.stringify(error, Object.getOwnPropertyNames(error)),
            telegramId: ctx.from?.id,
          }
        )
        const isRu = isRussian(ctx)
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
            : 'An error occurred while trying to start a new generation. Please try returning to the main menu.'
        )
      }
    }
  )

  bot.hears(
    ['üñº –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (–í–∏–¥–µ–æ)', 'üñº Select Another Model (Video)'],
    async (ctx: MyContext) => {
      logger.info('HEARS: –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (–í–∏–¥–µ–æ)', {
        telegramId: ctx.from?.id,
      })
      try {
        ctx.session.mode = ModeEnum.TextToVideo
        if (ctx.scene.current) {
          await ctx.scene.leave()
        }
        await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      } catch (error) {
        logger.error(
          'Error entering textToVideoWizard from "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å" hears:',
          {
            error: error,
            errorString: String(error),
            errorJson: JSON.stringify(error, Object.getOwnPropertyNames(error)),
            telegramId: ctx.from?.id,
          }
        )
        const isRu = isRussian(ctx)
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
            : 'An error occurred while trying to select another model. Please try returning to the main menu.'
        )
      }
    }
  )

  bot.hears(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£'], async (ctx: MyContext) => {
    if (!('text' in ctx.message)) {
      logger.warn('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ hears')
      return
    }
    const text = ctx.message.text
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${text} –æ—Ç ${ctx.from?.id}`)
    const isRu = isRussian(ctx)
    const prompt = ctx.session.prompt
    const telegramId = ctx.from.id
    const numImages = parseInt(text[0])

    // --- DEBUG LOG ---
    logger.debug('>>> HEARS HANDLER (1-4):', {
      telegramId: telegramId,
      textButton: text,
      parsedNumImages: numImages,
      sessionPromptSample: prompt ? prompt.substring(0, 70) + '...' : 'null',
      sessionMode: ctx.session.mode,
      sessionSelectedImageModel: ctx.session.selectedImageModel,
    })
    // --- END DEBUG LOG ---

    const { profile, settings } = await getUserProfileAndSettings(telegramId)

    if (!profile || !settings) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è hears handler',
        { telegramId }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : 'Error: Could not retrieve user data.'
      )
      return
    }

    if (!prompt) {
      logger.error('–ü—Ä–æ–º–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è hears handler', {
        telegramId,
      })
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : 'Error: Prompt not found. Please try again.'
      )
      return
    }

    const generate = async (num: number) => {
      if (ctx.session.mode === ModeEnum.NeuroPhoto) {
        await generateNeuroImage(
          prompt,
          ctx.session.userModel.model_url,
          num,
          telegramId.toString(),
          ctx,
          ctx.botInfo?.username
        )
      } else if (ctx.session.mode === ModeEnum.TextToImage) {
        const modelToUse = ctx.session.selectedImageModel

        if (!modelToUse) {
          logger.error(
            '[Hears 1-4 TextToImage] Model not found in session (ctx.session.selectedImageModel).',
            { telegramId }
          )
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.'
              : 'Error: Model for generation not found in the current session. Please try starting over from the main menu.'
          )
          return
        }

        logger.info(
          `[Hears 1-4 TextToImage] Using model from session: ${modelToUse} for user ${telegramId}`
        )
        await generateTextToImage(
          prompt,
          modelToUse,
          numImages,
          telegramId.toString(),
          isRu,
          ctx,
          ctx.botInfo?.username
        )
      }
    }

    if (numImages >= 1 && numImages <= 4) {
      await generate(numImages)
    } else {
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞')
    }
  })

  bot.hears(
    ['‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '‚¨ÜÔ∏è Improve prompt'],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –æ—Ç ${ctx.from?.id}`)
      await ctx.scene.enter(ModeEnum.ImprovePromptWizard, {
        prompt: ctx.session.prompt,
        mode: ctx.session.mode,
      })
    }
  )

  bot.hears(
    ['üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', 'üìê Change size'],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç ${ctx.from?.id}`)
      await ctx.scene.enter(ModeEnum.SizeWizard)
    }
  )

  bot.hears(
    [
      '21:9',
      '16:9',
      '3:2',
      '4:3',
      '5:4',
      '1:1',
      '4:5',
      '3:4',
      '2:3',
      '9:16',
      '9:21',
    ],
    async (ctx: MyContext) => {
      if (!('text' in ctx.message)) {
        logger.warn(
          '–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è hears –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞'
        )
        return
      }
      const size = ctx.message.text
      logger.debug(
        `–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ ${size} –æ—Ç ${ctx.from?.id}`
      )
      await handleSizeSelection(ctx, size)
    }
  )

  bot.hears(/^(–û—Ç–º–µ–Ω–∞|–æ—Ç–º–µ–Ω–∞|Cancel|cancel)$/i, async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –û—Ç–º–µ–Ω–∞ –æ—Ç ${ctx.from?.id}`)
    const isRu = isRussian(ctx)
    const telegram_id = ctx.from?.id?.toString() || ''
    const { subscriptionType } = await getReferalsCountAndUserData(telegram_id)

    await mainMenu({
      isRu,
      subscription: subscriptionType,
      ctx,
    })
    await ctx.scene.leave()
  })

  bot.hears(
    [levels[103].title_ru, levels[103].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–º–æ—â—å –æ—Ç ${ctx.from?.id}`)
      ctx.session.mode = ModeEnum.Help
      await ctx.scene.enter(ModeEnum.Help)
    }
  )

  bot.hears(
    [levels[100].title_ru, levels[100].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.TopUpBalance
      ctx.session.subscription = SubscriptionType.STARS
      await ctx.scene.enter(ModeEnum.PaymentScene)
    }
  )

  bot.hears(
    [levels[101].title_ru, levels[101].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ë–∞–ª–∞–Ω—Å –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –±–∞–ª–∞–Ω—Å–∞
      const hasSubscription = await checkSubscriptionGuard(ctx, 'üí∞ –ë–∞–ª–∞–Ω—Å')
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.Balance
      await ctx.scene.enter(ModeEnum.BalanceScene)
    }
  )

  bot.hears(
    [levels[102].title_ru, levels[102].title_en],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç ${ctx.from?.id}`)

      // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      const hasSubscription = await checkSubscriptionGuard(
        ctx,
        'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'
      )
      if (!hasSubscription) {
        return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
      }

      ctx.session.mode = ModeEnum.Invite
      await ctx.scene.enter(ModeEnum.InviteScene)
    }
  )

  bot.hears(
    ['‚ú® –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç', '‚ú® Improve Prompt'],
    async (ctx: MyContext) => {
      logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç –æ—Ç ${ctx.from?.id}`)
      await ctx.scene.enter(ModeEnum.ImprovePromptWizard, {
        prompt: ctx.session.prompt,
        mode: ctx.session.mode,
      })
    }
  )

  bot.hears(['üìù –†–∞–∑–º–µ—Ä', 'üìù Size'], async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –†–∞–∑–º–µ—Ä –æ—Ç ${ctx.from?.id}`)
    ctx.session.mode = ModeEnum.ChangeSize
    await ctx.scene.enter(ModeEnum.SizeWizard)
  })

  bot.hears(['‚ùì –ü–æ–º–æ—â—å', '‚ùì Help'], async (ctx: MyContext) => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –ü–æ–º–æ—â—å –æ—Ç ${ctx.from?.id}`)
    await ctx.scene.enter(ModeEnum.Help)
  })

  bot.hears(['‚ÑπÔ∏è –û –±–æ—Ç–µ', '‚ÑπÔ∏è About'], async ctx => {
    logger.debug(`–ü–æ–ª—É—á–µ–Ω hears –¥–ª—è –û –±–æ—Ç–µ –æ—Ç ${ctx.from?.id}`)
    await ctx.scene.enter(ModeEnum.Help)
  })

  // === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–ù–û–ü–ö–ò ===
  bot.hears('ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ 2', async ctx => {
    logger.info('GLOBAL HEARS: –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ 2 (Admin)', {
      telegramId: ctx.from?.id,
    })

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const hasSubscription = await checkSubscriptionGuard(
      ctx,
      'ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ 2'
    )
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.DigitalAvatarBodyV2
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })

  bot.hears('üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2', async ctx => {
    logger.info('GLOBAL HEARS: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2 (Admin)', {
      telegramId: ctx.from?.id,
    })

    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const hasSubscription = await checkSubscriptionGuard(ctx, 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ 2')
    if (!hasSubscription) {
      return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
    }

    await ctx.scene.leave()
    ctx.session.mode = ModeEnum.NeuroPhoto
    await ctx.scene.enter(ModeEnum.CheckBalanceScene)
  })
}
//
