import dns from 'dns'
import { promisify } from 'util'
import fetch from 'node-fetch'

const lookup = promisify(dns.lookup)

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ DNS
 */
export async function checkHostConnection(hostname: string): Promise<boolean> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è —Ö–æ—Å—Ç–∞:', {
      description: 'Checking DNS resolution',
      hostname,
    })

    await lookup(hostname)

    console.log('‚úÖ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:', {
      description: 'DNS resolution successful',
      hostname,
    })

    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞:', {
      description: 'DNS resolution failed',
      hostname,
      error: error instanceof Error ? error.message : String(error),
    })
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
 */
export async function checkApiConnection(apiUrl: string): Promise<boolean> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', {
      description: 'Checking API connection',
      url: apiUrl,
    })

    const response = await fetch(apiUrl)
    const isOk = response.ok

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      description: 'API check completed',
      status: response.status,
      ok: isOk,
    })

    return isOk
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', {
      description: 'API connection failed',
      url: apiUrl,
      error: error instanceof Error ? error.message : String(error),
    })
    return false
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
 */
export async function retryWithBackoff<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  initialDelay: number = 1000
): Promise<T> {
  let retries = 0
  let delay = initialDelay

  for (;;) {
    try {
      return await operation()
    } catch (error) {
      retries++

      if (retries >= maxRetries) {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:', {
          description: 'Max retries exceeded',
          retries,
          error: error instanceof Error ? error.message : String(error),
        })
        throw error
      }

      console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞:', {
        description: 'Retrying operation',
        attempt: retries,
        nextDelay: delay,
      })

      await new Promise(resolve => setTimeout(resolve, delay))
      delay *= 2 // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
  }
}
