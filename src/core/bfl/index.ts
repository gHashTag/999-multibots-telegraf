import { supabase } from '../supabase'
import { logger } from '@/utils/logger'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Ñ–∏–Ω—Ç—é–Ω–∞
 */
export async function getTelegramIdFromFinetune(
  finetuneId: string
): Promise<string> {
  try {
    logger.info({
      message: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Ñ–∏–Ω—Ç—é–Ω–∞',
      finetuneId,
    })

    const { data, error } = await supabase
      .from('model_trainings')
      .select('telegram_id')
      .eq('finetune_id', finetuneId)
      .single()

    if (error || !data) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram ID –∏–∑ —Ñ–∏–Ω—Ç—é–Ω–∞',
        finetuneId,
        error: error?.message,
      })
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ ID: ${finetuneId}`)
    }

    return data.telegram_id.toString()
  } catch (err) {
    const error = err as Error
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram ID –∏–∑ —Ñ–∏–Ω—Ç—é–Ω–∞',
      finetuneId,
      error: error?.message || 'Unknown error',
      stack: error?.stack || 'No stack trace',
    })
    throw error
  }
}
