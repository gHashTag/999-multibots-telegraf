import { createWriteStream } from 'fs'
import path from 'path'
import os from 'os'
import elevenLabsClient from './elevenlabs'
import { InputFile } from 'telegraf/typings/core/types/typegram'
import { getUserByTelegramId, updateUserLevelPlusOne } from './supabase'

import { Telegraf } from 'telegraf'
import { MyContext } from '../interfaces'
import { modeCosts, ModeEnum } from '../price/helpers/modelsCost'
import { logger } from '../utils/logger'
import fs from 'fs'
import { inngest } from '../core/inngest/clients'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
const validateText = (text: string): boolean => {
  if (!text || text.trim().length === 0) {
    return false
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
  const invalidChars = /[^\p{L}\p{N}\p{P}\s]/u
  return !invalidChars.test(text)
}

export const generateSpeech = async ({
  text,
  voice_id,
  telegram_id,
  is_ru,
  bot,
  bot_name,
}: {
  text: string
  voice_id: string
  telegram_id: string
  is_ru: boolean
  bot: Telegraf<MyContext>
  bot_name: string
}): Promise<{ audioUrl: string }> => {
  logger.info({
    message: 'üéôÔ∏è –ù–∞—á–∞–ª–æ generateSpeech',
    description: 'Starting generateSpeech',
    telegram_id,
    text_length: text?.length,
    voice_id,
  })

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!validateText(text)) {
    logger.error({
      message: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç',
      description: 'Invalid text input',
      telegram_id,
      text_length: text?.length,
    })
    throw new Error('Invalid text input')
  }

  const userExists = await getUserByTelegramId(telegram_id)
  logger.info({
    message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: 'User check',
    telegram_id,
    userExists,
  })

  if (!userExists) {
    throw new Error(`User with ID ${telegram_id} does not exist.`)
  }

  const level = userExists.level
  if (level === 7) {
    await updateUserLevelPlusOne(telegram_id, level)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  if (!process.env.ELEVENLABS_API_KEY) {
    throw new Error('ELEVENLABS_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  await bot.telegram.sendMessage(
    telegram_id,
    is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...' : '‚è≥ Generating audio...'
  )

  logger.info({
    message: 'üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API',
    description: 'Sending request to ElevenLabs API',
    telegram_id,
    voice_id,
    text_length: text.length,
    model_id: 'eleven_turbo_v2_5',
  })

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    const audioStream = await elevenLabsClient.generate({
      voice: voice_id,
      model_id: 'eleven_turbo_v2_5',
      text,
    })

    logger.info({
      message: '‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      description: 'Audio generated successfully',
      telegram_id,
    })

    // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    const paymentResult = await inngest.send({
      name: 'payment/process',
      data: {
        telegram_id,
        paymentAmount: modeCosts[ModeEnum.TextToSpeech] as number,
        is_ru,
        bot_name,
        description: 'Payment for text to speech',
        type: 'outcome',
        metadata: {
          service_type: 'Text to speech',
          text_length: text.length,
          voice_id,
        },
      },
    })

    if (!paymentResult) {
      throw new Error('Payment processing failed')
    }

    return new Promise<{ audioUrl: string }>((resolve, reject) => {
      const audioUrl = path.join(os.tmpdir(), `audio_${Date.now()}.mp3`)
      const writeStream = createWriteStream(audioUrl)

      audioStream.pipe(writeStream)

      writeStream.on('finish', () => {
        logger.info({
          message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ',
          description: 'Sending audio',
          telegram_id,
          audioUrl,
        })

        const audio = { source: audioUrl }
        bot.telegram
          .sendAudio(telegram_id, audio as InputFile, {
            reply_markup: {
              keyboard: [
                [
                  {
                    text: is_ru ? 'üéôÔ∏è –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å' : 'üéôÔ∏è Text to voice',
                  },
                  { text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' },
                ],
              ],
            },
          })
          .then(() => {
            logger.info({
              message: '‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
              description: 'Audio sent',
              telegram_id,
            })

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fs.unlink(audioUrl, err => {
              if (err) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
                  description: 'File deletion error',
                  error: err.message,
                })
              } else {
                logger.info({
                  message: 'üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω',
                  description: 'File deleted',
                  audioUrl,
                })
              }
            })

            resolve({ audioUrl })
          })
          .catch(error => {
            logger.error({
              message: '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ',
              description: 'Audio send error',
              error: error instanceof Error ? error.message : String(error),
              telegram_id,
            })
            reject(error)
          })
      })

      writeStream.on('error', error => {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏',
          description: 'Write error',
          error: error instanceof Error ? error.message : String(error),
          telegram_id,
        })
        reject(error)
      })
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Audio generation error',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      text_length: text.length,
      voice_id,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const errorMessage = error instanceof Error ? error.message : String(error)
    const isInvalidVoice = errorMessage.includes('400 Bad Request')

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? isInvalidVoice
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–ª–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        : isInvalidVoice
        ? '‚ùå Error: invalid voice. Please select another voice or contact support.'
        : '‚ùå An error occurred while generating audio. Please try again later or contact support.'
    )

    throw error
  }
}
