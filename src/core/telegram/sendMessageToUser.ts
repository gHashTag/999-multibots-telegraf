import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'

interface SendMessageParams {
  telegram_id: string
  bot_name: string
  text: string
  parse_mode?: 'HTML' | 'Markdown'
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 */
export async function sendMessageToUser({
  telegram_id,
  bot_name,
  text,
  parse_mode = 'HTML',
}: SendMessageParams): Promise<void> {
  try {
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Sending message to user',
      telegram_id,
      bot_name,
    })

    const { bot, error } = getBotByName(bot_name)
    if (error || !bot) {
      throw new Error(error || `Bot ${bot_name} not found`)
    }

    await bot.telegram.sendMessage(telegram_id, text, {
      parse_mode,
    })

    logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Message sent successfully',
      telegram_id,
      bot_name,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      description: 'Error sending message',
      telegram_id,
      bot_name,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}
