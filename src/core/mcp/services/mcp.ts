import { Client } from '@modelcontextprotocol/sdk/client/index.js'
import { WebSocketClientTransport } from '@modelcontextprotocol/sdk/client/websocket.js'
import type { Service } from '../types'

interface McpConfig {
  serverUrl: string
  apiKey: string
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ MCP
const createMcpClient = () => {
  console.log('üöÄ Initializing MCP service...')
  return new Client({
    name: 'NeuroBlogger',
    version: '1.0.0',
  })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
const initializeConnection = async (
  client: Client,
  config: McpConfig
): Promise<void> => {
  const { serverUrl, apiKey } = config

  if (!serverUrl || !apiKey) {
    throw new Error('üö´ MCP server URL or API key not set')
  }

  try {
    console.log('üöÄ Connecting to MCP server...')

    const url = new URL(serverUrl)
    url.searchParams.set('token', apiKey)

    const transport = new WebSocketClientTransport(url)
    await client.connect(transport)

    console.log('‚úÖ Connected to MCP server')
  } catch (error) {
    console.error('‚ùå Failed to connect to MCP server:', error)
    throw error
  }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const closeConnection = async (client: Client): Promise<void> => {
  try {
    await client.close()
    console.log('‚úÖ Closed MCP connection')
  } catch (error) {
    console.error('‚ùå Failed to close MCP connection:', error)
    throw error
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏
const processTask = async (client: Client, prompt: string) => {
  try {
    console.log('üéØ Processing task with prompt:', prompt)

    const result = await client.complete({
      ref: {
        type: 'ref/prompt',
        name: 'default',
      },
      argument: {
        name: 'prompt',
        value: prompt,
      },
    })

    console.log('‚úÖ Task processed successfully')
    return result
  } catch (error) {
    console.error('‚ùå Failed to process task:', error)
    throw error
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ MCP
export const createMcpService = (
  config: McpConfig = {
    serverUrl: process.env.MCP_SERVER_URL || '',
    apiKey: process.env.MCP_API_KEY || '',
  }
): Service => {
  const client = createMcpClient()

  return {
    initialize: () => initializeConnection(client, config),
    close: () => closeConnection(client),
    processTask: (prompt: string) => processTask(client, prompt),
    getClient: () => client,
  }
}
