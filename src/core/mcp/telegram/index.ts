/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
 * –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
 */

import { Telegraf, Context } from 'telegraf'
import { createAgent, AgentConfig } from '../agent/index.js'
import { TaskType, TaskStatus } from '../agent/state.js'
import { config } from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'
import fs from 'fs'
import { getLatestChangelogEntry, getNewChangelogEntries } from './utils.js'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const rootDir = path.resolve(__dirname, '../../../')

config({ path: path.join(rootDir, '.env') })

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
type TelegramTask = {
  userId: number
  messageId: number
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
type BotState = {
  agent: ReturnType<typeof createAgent>
  allowedUsers: number[]
  tasks: Map<string, TelegramTask>
  initialized: boolean
  config: {
    repositories?: { path: string; name: string }[]
  }
  notifications: {
    changelog: Map<number, boolean> // userId -> enabled
    lastCheckedChangelog: Date
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
 */
const createBotState = (): BotState => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ALLOWED_USERS, –ø–∞—Ä—Å–∏–º –µ—ë
  const allowedUsersEnv = process.env.ALLOWED_USERS || ''
  const allowedUsers = allowedUsersEnv
    .split(',')
    .map(id => parseInt(id.trim()))
    .filter(id => !isNaN(id))

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
  const agentConfig: AgentConfig = {
    id: process.env.AGENT_ID || 'telegram-agent',
    maxConcurrentTasks: Number(process.env.MAX_CONCURRENT_TASKS || 3),
    mcpConfig: {
      serverUrl: process.env.MCP_SERVER_URL || 'ws://localhost:8888',
      apiKey: process.env.MCP_API_KEY || 'test-key',
    },
  }

  return {
    agent: createAgent(agentConfig),
    allowedUsers,
    tasks: new Map<string, TelegramTask>(),
    initialized: false,
    config: {
      repositories: process.env.REPOSITORIES
        ? process.env.REPOSITORIES.split(',').map(repo => ({
            path: repo.trim(),
            name: path.basename(repo.trim()),
          }))
        : undefined,
    },
    notifications: {
      changelog: new Map<number, boolean>(),
      lastCheckedChangelog: new Date(),
    },
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
 */
const isAllowedUser = (ctx: Context, state: BotState): boolean => {
  // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
  if (state.allowedUsers.length === 0) {
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
  const userId = ctx.from?.id
  return userId !== undefined && state.allowedUsers.includes(userId)
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
const setupHandlers = (bot: Telegraf<Context>, state: BotState): void => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply(
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n' +
        '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n' +
        'üîç /analyze - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n' +
        'üíª /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞\n' +
        'üîÑ /refactor - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞\n' +
        'üß™ /test - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤\n' +
        'üìù /docs - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n' +
        'üì¶ /deps - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏\n' +
        'üîß /git - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git\n' +
        'üß† /improve - –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ\n' +
        'üîÑ /background - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ\n' +
        'üìã /check_tasks - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n\n' +
        '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏!'
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.help(async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply(
      'ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n\n' +
        '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n' +
        '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á:\n' +
        '   üîç /analyze - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n' +
        '   üíª /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞\n' +
        '   üîÑ /refactor - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞\n' +
        '   üß™ /test - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤\n' +
        '   üìù /docs - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n' +
        '   üì¶ /deps - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏\n' +
        '   üîß /git - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git\n' +
        '   üß† /improve - –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ\n' +
        '   üîÑ /background - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ\n' +
        '   üìã /check_tasks - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n' +
        '2. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏\n' +
        '3. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n' +
        'ü§î –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º.'
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
  bot.command('status', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply('üîÑ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: –∞–∫—Ç–∏–≤–µ–Ω')
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze (–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞)
  bot.command('analyze', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply('üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:')
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞)
  bot.command('generate', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply('üíª –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:')
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /refactor (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞)
  bot.command('refactor', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply(
      'üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:'
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /improve (—Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ)
  bot.command('improve', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply(
      'üß† –û–ø–∏—à–∏—Ç–µ, —á–µ–º—É –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –∏–ª–∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ:'
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /background (—Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ)
  bot.command('background', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    await ctx.reply('üîÑ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ñ–æ–Ω–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:')
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check_tasks (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á)
  bot.command('check_tasks', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
      const allTasks = state.agent.getAllTasks()
      const backgroundTasks = allTasks.filter(
        task => task.type === TaskType.BACKGROUND_IMPROVEMENT
      )

      if (backgroundTasks.length === 0) {
        await ctx.reply('üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.')
        return
      }

      let statusMessage = 'üìä –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:\n\n'

      for (const task of backgroundTasks) {
        statusMessage += `ID: ${task.id}\n`
        statusMessage += `–°—Ç–∞—Ç—É—Å: ${task.status}\n`
        statusMessage += `–°–æ–∑–¥–∞–Ω–∞: ${task.created.toLocaleString()}\n`
        statusMessage += `–ó–∞–¥–∞—á–∞: ${task.description.substring(0, 50)}${
          task.description.length > 50 ? '...' : ''
        }\n`

        if (task.status === TaskStatus.COMPLETED && task.result) {
          const createdFiles = task.result.createdFiles || []
          if (createdFiles.length > 0) {
            statusMessage += `\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n`
            createdFiles.forEach((file: string) => {
              statusMessage += `- ${file}\n`
            })
          }

          const updatedFiles = task.result.updatedFiles || []
          if (updatedFiles.length > 0) {
            statusMessage += `\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n`
            updatedFiles.forEach((file: string) => {
              statusMessage += `- ${file}\n`
            })
          }
        }

        statusMessage += '\n-----------------\n\n'
      }

      await ctx.reply(statusMessage)
    } catch (error) {
      console.error('Error checking tasks:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: ${
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scan_improvements (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π)
  bot.command('scan_improvements', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      await ctx.reply(
        'üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π...'
      )

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
      setTimeout(async () => {
        try {
          const scanResults = await state.agent.scanForImprovements('src', {
            saveResults: true,
            limit: 10,
          })

          const replyMessage = `‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${scanResults.total_files_analyzed}\n- –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${scanResults.suggestions.length}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_improvements –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`

          if (scanResults.stats) {
            let statsMessage = '\n\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:'
            for (const type in scanResults.stats.by_type) {
              statsMessage += `\n- ${type}: ${scanResults.stats.by_type[type]}`
            }

            statsMessage += '\n\nüî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:'
            for (const priority in scanResults.stats.by_priority) {
              statsMessage += `\n- ${priority}: ${scanResults.stats.by_priority[priority]}`
            }

            await ctx.reply(replyMessage + statsMessage)
          } else {
            await ctx.reply(replyMessage)
          }
        } catch (error) {
          console.error('Error during improvement scanning:', error)
          await ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          )
        }
      }, 0)
    } catch (error) {
      console.error('Error handling scan_improvements command:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã')
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scan_multi_repo –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  bot.command('scan_multi_repo', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1)

    if (args.length === 0) {
      // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      return ctx.reply(
        'üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scan_multi_repo [–æ–ø—Ü–∏–∏]\n\n' +
          '–û–ø—Ü–∏–∏:\n' +
          '  repo1,repo2,...  - –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n' +
          '–ü—Ä–∏–º–µ—Ä: /scan_multi_repo /path/to/repo1,/path/to/repo2\n\n' +
          '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.'
      )
    }

    try {
      await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...')

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
      setTimeout(async () => {
        try {
          // –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
          let repositories: { path: string; name: string }[] = []

          if (args[0]) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            const repoPaths = args[0].split(',')
            repositories = repoPaths.map(repoPath => ({
              path: repoPath.trim(),
              name: path.basename(repoPath.trim()),
            }))
          } else {
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            repositories = state.config.repositories || [
              {
                path: process.cwd(),
                name: path.basename(process.cwd()),
              },
            ]
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
          const scanResults = await state.agent.scanMultipleRepositories(
            repositories,
            {
              limit: 20,
              aspectTypes: ['code_quality', 'performance', 'security'],
            }
          )

          let replyMessage =
            `‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${
              scanResults.analyzed_repositories?.length || 0
            }\n` +
            `- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${scanResults.total_files_analyzed}\n` +
            `- –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${scanResults.suggestions.length}\n\n`

          // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
          if (
            scanResults.analyzed_repositories &&
            scanResults.analyzed_repositories.length > 0
          ) {
            replyMessage +=
              `üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n` +
              scanResults.analyzed_repositories
                .map(repo => `- ${repo}`)
                .join('\n') +
              '\n\n'
          }

          replyMessage += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_multi_improvements –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`

          await ctx.reply(replyMessage)

          // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
          const highPriorityItems = scanResults.suggestions
            .filter(s => s.priority >= 8)
            .slice(0, 5)

          if (highPriorityItems.length > 0) {
            let priorityMessage = `üö® –¢–æ–ø-${highPriorityItems.length} –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:\n\n`

            highPriorityItems.forEach((item, index) => {
              priorityMessage +=
                `${index + 1}. [${item.id}] ${item.title}\n` +
                `   üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${item.repository || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
                `   üîç –¢–∏–ø: ${item.type}\n` +
                `   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${item.priority}/10\n` +
                `   üîß –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${item.estimate_complexity}\n\n`
            })

            await ctx.reply(priorityMessage)
          }
        } catch (error) {
          console.error('Error during multi-repo scanning:', error)
          await ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          )
        }
      }, 0)
    } catch (error) {
      console.error('Error handling scan_multi_repo command:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã')
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /improvement_details [id] (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —É–ª—É—á—à–µ–Ω–∏—è)
  bot.command('improvement_details', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1)
    const improvementId = args[0]

    if (!improvementId) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —É–ª—É—á—à–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /improvement_details imp_123456'
      )
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è
      const improvement = await state.agent.getImprovementDetails(improvementId)

      if (!improvement) {
        return ctx.reply(`‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ —Å ID "${improvementId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`)
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
      let detailsMessage =
        `üìù –î–µ—Ç–∞–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è [${improvement.id}]\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${improvement.title}\n` +
        `–¢–∏–ø: ${improvement.type}\n` +
        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${improvement.priority}/10\n` +
        `–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${improvement.estimate_complexity}\n`

      if (improvement.repository) {
        detailsMessage += `–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${improvement.repository}\n`
      }

      if (improvement.tags && improvement.tags.length > 0) {
        detailsMessage += `–¢–µ–≥–∏: ${improvement.tags.join(', ')}\n`
      }

      if (improvement.confidence_score !== undefined) {
        detailsMessage += `–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(
          improvement.confidence_score * 100
        ).toFixed(1)}%\n`
      }

      if (improvement.potential_impact) {
        detailsMessage += `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: ${improvement.potential_impact}\n`
      }

      if (improvement.estimated_effort_hours !== undefined) {
        detailsMessage += `–û—Ü–µ–Ω–∫–∞ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç: ${improvement.estimated_effort_hours} —á.\n`
      }

      detailsMessage +=
        `\n–û–ø–∏—Å–∞–Ω–∏–µ:\n${improvement.description}\n\n` +
        `–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã:\n${improvement.affected_files
          .map(file => `- ${file}`)
          .join('\n')}\n\n` +
        `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n${improvement.suggested_action}\n\n` +
        `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${improvement.detected_at.toLocaleString()}\n`

      if (improvement.is_implemented) {
        detailsMessage += `\n‚úÖ –°—Ç–∞—Ç—É—Å: –†–ï–ê–õ–ò–ó–û–í–ê–ù–û`
      } else {
        detailsMessage += `\n‚è≥ –°—Ç–∞—Ç—É—Å: –û–ñ–ò–î–ê–ï–¢ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò`
      }

      await ctx.reply(detailsMessage)

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
      if (!improvement.is_implemented) {
        await ctx.reply(
          `–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ?\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /apply_improvement ${improvement.id}`
        )
      }
    } catch (error) {
      console.error('Error getting improvement details:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /apply_improvement [id] (–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è)
  bot.command('apply_improvement', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1)
    const improvementId = args[0]

    if (!improvementId) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —É–ª—É—á—à–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /apply_improvement imp_123456'
      )
    }

    try {
      await ctx.reply(`üîß –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è ${improvementId}...`)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
      const taskId = await state.agent.applyImprovement(improvementId, {
        feedbackRequired: true,
        notifyOnCompletion: true,
      })

      await ctx.reply(
        `‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n` +
          `ID –∑–∞–¥–∞—á–∏: ${taskId}\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_tasks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.`
      )
    } catch (error) {
      console.error('Error applying improvement:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rate_improvement [id] [score 1-5] [feedback] (–æ—Ü–µ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã)
  bot.command('rate_improvement', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1)
    const improvementId = args[0]
    const scoreStr = args[1]
    const feedback = args.slice(2).join(' ')

    if (!improvementId || !scoreStr) {
      return ctx.reply(
        '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —É–ª—É—á—à–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫—É (1-5).\n' +
          '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rate_improvement [id] [–æ—Ü–µ–Ω–∫–∞ 1-5] [–æ—Ç–∑—ã–≤]\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: /rate_improvement imp_123456 4 –•–æ—Ä–æ—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'
      )
    }

    const score = parseInt(scoreStr)
    if (isNaN(score) || score < 1 || score > 5) {
      return ctx.reply('‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5.')
    }

    try {
      await ctx.reply(`üìä –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ü–µ–Ω–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ${improvementId}...`)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      await state.agent.rateImprovement(improvementId, score, feedback)

      await ctx.reply(
        `‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n` +
          `ID —É–ª—É—á—à–µ–Ω–∏—è: ${improvementId}\n` +
          `–û—Ü–µ–Ω–∫–∞: ${'‚≠ê'.repeat(score)}\n` +
          `–û—Ç–∑—ã–≤: ${feedback || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
          `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.`
      )
    } catch (error) {
      console.error('Error rating improvement:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /enable_periodic_scan [–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö] (–≤–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
  bot.command('enable_periodic_scan', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1)
    const intervalStr = args[0]

    let interval = 60 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç

    if (intervalStr) {
      const parsedInterval = parseInt(intervalStr)
      if (!isNaN(parsedInterval) && parsedInterval >= 1) {
        interval = parsedInterval
      } else {
        return ctx.reply('‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–∏–Ω—É—Ç—ã) –Ω–µ –º–µ–Ω–µ–µ 1.')
      }
    }

    try {
      // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      state.agent.startPeriodicScanning(interval)

      await ctx.reply(
        `‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!\n\n` +
          `–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${interval} –º–∏–Ω—É—Ç\n\n` +
          `–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–∞–∂–¥—ã–µ ${interval} –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö.\n\n` +
          `–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /disable_periodic_scan`
      )
    } catch (error) {
      console.error('Error enabling periodic scanning:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /disable_periodic_scan (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
  bot.command('disable_periodic_scan', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      state.agent.stopPeriodicScanning()

      await ctx.reply('‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.')
    } catch (error) {
      console.error('Error disabling periodic scanning:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /improvement_report (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º)
  bot.command('improvement_report', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      await ctx.reply('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º...')

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const report = await state.agent.generateImprovementReport()

      if (!report) {
        return ctx.reply(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º.'
        )
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(report.summary)

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
      if (report.fullReportPath) {
        await ctx.replyWithDocument({
          source: report.fullReportPath,
          filename: 'improvement_report.md',
        })
      }
    } catch (error) {
      console.error('Error generating improvement report:', error)
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe_changelog (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ CG Log)
  bot.command('subscribe_changelog', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      const userId = ctx.from.id
      state.notifications.changelog.set(userId, true)

      await ctx.reply(
        '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ CG Log!\n\n' +
          '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞.\n\n' +
          '–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe_changelog'
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const lastEntry = await getLatestChangelogEntry()
      if (lastEntry) {
        await ctx.reply('üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ CG Log:\n\n' + lastEntry)
      }
    } catch (error) {
      console.error('Error subscribing to changelog:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unsubscribe_changelog (–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ CG Log)
  bot.command('unsubscribe_changelog', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      const userId = ctx.from.id
      state.notifications.changelog.set(userId, false)

      await ctx.reply(
        '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ CG Log.\n\n' +
          '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è.\n\n' +
          '–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe_changelog'
      )
    } catch (error) {
      console.error('Error unsubscribing from changelog:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get_last_changelog (–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ CG Log)
  bot.command('get_last_changelog', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if (!state.initialized) {
      return ctx.reply(
        '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
    }

    try {
      await ctx.reply('üîç –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ CG Log...')

      const lastEntry = await getLatestChangelogEntry()
      if (lastEntry) {
        await ctx.reply('üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ CG Log:\n\n' + lastEntry)
      } else {
        await ctx.reply(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ CG Log. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
        )
      }
    } catch (error) {
      console.error('Error getting latest changelog entry:', error)
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ CG Log'
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async ctx => {
    if (!isAllowedUser(ctx, state)) {
      return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    }

    if ('text' in ctx.message) {
      const text = ctx.message.text

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const statusMessage = await ctx.reply('ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...')

        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        const selfImprovementKeywords = [
          '–Ω–∞—É—á–∏—Å—å',
          '—É–ª—É—á—à–∏ —Å–µ–±—è',
          '—Å—Ç–∞–Ω—å –ª—É—á—à–µ',
          '—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Å—è',
          '—Ä–∞–∑–≤–∏–≤–∞–π—Å—è',
          '–æ–±—É—á–∏—Å—å',
          '–∏–∑—É—á–∏',
          '–¥–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏—é',
          '–æ–±–Ω–æ–≤–∏',
          '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π',
          '—É–ª—É—á—à–∏ —Å–≤–æ–π –∫–æ–¥',
        ]

        const backgroundKeywords = [
          '—Ñ–æ–Ω–æ–≤—ã–π',
          '—Ñ–æ–Ω–æ–º',
          '–∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ',
          '—Ñ–æ–Ω–æ–≤–æ–º',
          '—Ñ–æ–Ω–æ–≤–æ–µ',
          '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
        ]

        const isSelfImprovement = selfImprovementKeywords.some(keyword =>
          text.toLowerCase().includes(keyword.toLowerCase())
        )

        const isBackground = backgroundKeywords.some(keyword =>
          text.toLowerCase().includes(keyword.toLowerCase())
        )

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CODE_GENERATION)
        let taskType = TaskType.CODE_GENERATION

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (!state.initialized) {
          await ctx.reply('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...')
          await state.agent.initialize()
          state.initialized = true
        }

        if (isBackground) {
          try {
            await ctx.reply(
              'üîÑ –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É–ª—É—á—à–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É...'
            )

            if (!state.initialized) {
              await ctx.reply('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...')
              await state.agent.initialize()
              state.initialized = true
            }

            const backgroundTask = await state.agent.startBackgroundImprovement(
              text,
              ctx.from.id.toString()
            )

            await ctx.reply(
              `üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è (ID: ${backgroundTask.taskId})\n\n` +
                `–Ø –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ–æ–±—â—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. ` +
                `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /check_tasks.`
            )

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            state.tasks.set(backgroundTask.taskId, {
              userId: ctx.from.id,
              messageId: ctx.message.message_id,
            })
          } catch (error) {
            console.error('Error starting background improvement:', error)
            await ctx.reply(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è: ${
                error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              }`
            )
          }
          return
        } else if (isSelfImprovement) {
          // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ —Ñ–æ–Ω–æ–≤—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
          await ctx.reply(
            'üß† –ü–æ–Ω—è–ª, –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —É–ª—É—á—à–∏–ª —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º...'
          )
          taskType = TaskType.SELF_IMPROVEMENT
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const task = await state.agent.addTask(taskType, text, {
          priority: 1,
          metadata: {
            telegramUser: ctx.from?.id,
            messageId: ctx.message.message_id,
          },
        })

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        if (ctx.from) {
          state.tasks.set(task.id, {
            userId: ctx.from.id,
            messageId: statusMessage.message_id,
          })
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await new Promise(resolve => setTimeout(resolve, 3000))

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
        if (ctx.chat?.id) {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            statusMessage.message_id,
            undefined,
            `‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å: "${text}"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.`
          )
        }
      } catch (error: unknown) {
        console.error('Error processing message:', error)
        const errorMessage =
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`)
      }
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err: unknown, ctx: Context) => {
    console.error(`Error for ${ctx.updateType}:`, err)
    ctx.reply(
      '‚ùå –û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
  const checkCompletedTasks = async () => {
    if (!state.initialized) {
      return
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
      const allTasks = state.agent.getAllTasks()
      const backgroundTasks = allTasks.filter(
        task =>
          task.type === TaskType.BACKGROUND_IMPROVEMENT &&
          task.status === TaskStatus.COMPLETED &&
          !task.metadata.notificationSent // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      )

      for (const task of backgroundTasks) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        const taskInfo = state.tasks.get(task.id)

        if (taskInfo && taskInfo.userId) {
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.telegram.sendMessage(
              taskInfo.userId,
              `‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `–ó–∞–¥–∞—á–∞: ${task.description}\n\n` +
                `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${JSON.stringify(task.result, null, 2)}`
            )

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            const adminUsers = process.env.ADMIN_USERS
              ? process.env.ADMIN_USERS.split(',').map(id => Number(id))
              : []

            if (
              process.env.ADMIN_NOTIFICATION_ENABLED === 'true' &&
              adminUsers.length > 0 &&
              !adminUsers.includes(taskInfo.userId)
            ) {
              for (const adminId of adminUsers) {
                await bot.telegram.sendMessage(
                  adminId,
                  `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n` +
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${taskInfo.userId}\n` +
                    `–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${task.description}\n\n` +
                    `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${JSON.stringify(task.result, null, 2)}`
                )
              }
            }

            // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—É—é
            task.metadata.notificationSent = true
          } catch (error) {
            console.error(
              `Error sending notification for task ${task.id}:`,
              error
            )
          }
        }
      }

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
      const oneDayAgo = new Date()
      oneDayAgo.setDate(oneDayAgo.getDate() - 1)

      const oldTasks = allTasks.filter(
        task => task.status === TaskStatus.COMPLETED && task.updated < oneDayAgo
      )

      for (const task of oldTasks) {
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        state.tasks.delete(task.id)
        console.log(`Cleaned up old task: ${task.id}`)
      }
    } catch (error) {
      console.error('Error checking completed tasks:', error)
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  const taskCheckInterval = setInterval(checkCompletedTasks, 30000)

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
  bot.telegram.getMe().then(() => {
    console.log('Task completion check started')

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
    process.once('SIGINT', () => {
      clearInterval(taskCheckInterval)
      console.log('Task completion check stopped')
    })

    process.once('SIGTERM', () => {
      clearInterval(taskCheckInterval)
      console.log('Task completion check stopped')
    })
  })

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É CG Log –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const startChangelogMonitoring = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const MONITORING_INTERVAL = 5 * 60 * 1000

    console.log('üìù –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CG Log...')

    const checkForChangelogUpdates = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ CG Log
        const newEntries = await getNewChangelogEntries(
          state.notifications.lastCheckedChangelog
        )

        if (newEntries.length > 0) {
          console.log(
            `üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newEntries.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ CG Log`
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          state.notifications.lastCheckedChangelog = new Date()

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
          const subscribedUsers = [...state.notifications.changelog.entries()]
            .filter(([_, enabled]) => enabled)
            .map(([userId, _]) => userId)

          if (subscribedUsers.length > 0) {
            for (const entry of newEntries) {
              // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—å—é
              const message = `üìù *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ CG Log:*\n\n${entry}`

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
              for (const userId of subscribedUsers) {
                try {
                  await bot.telegram.sendMessage(userId, message, {
                    parse_mode: 'Markdown',
                  })
                  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                  await new Promise(resolve => setTimeout(resolve, 500))
                } catch (sendError) {
                  console.error(
                    `Error sending changelog notification to user ${userId}:`,
                    sendError
                  )
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('Error monitoring changelog:', error)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    setInterval(checkForChangelogUpdates, MONITORING_INTERVAL)

    // –ò –æ–¥–∏–Ω —Ä–∞–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    checkForChangelogUpdates()
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
  if (state.initialized) {
    startChangelogMonitoring()
  } else {
    // –ó–∞–º–µ–Ω—è–µ–º bot.once –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    let monitoringStarted = false
    bot.on('text', () => {
      if (state.initialized && !monitoringStarted) {
        monitoringStarted = true
        startChangelogMonitoring()
      }
    })
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
 */
const startBot = async (token: string): Promise<void> => {
  try {
    const bot = new Telegraf(token)
    const state = createBotState()

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupHandlers(bot, state)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    await state.agent.initialize()
    state.initialized = true
    console.log('‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
    await bot.telegram.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥' },
      { command: 'help', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å' },
      { command: 'analyze', description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞' },
      { command: 'generate', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞' },
      { command: 'refactor', description: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞' },
      { command: 'test', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤' },
      { command: 'docs', description: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏' },
      { command: 'deps', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏' },
      { command: 'git', description: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git' },
      { command: 'improve', description: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ' },
      { command: 'background', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ' },
      { command: 'check_tasks', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á' },
      { command: 'scan_improvements', description: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è' },
      { command: 'list_improvements', description: '–°–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π' },
      { command: 'improvement_report', description: '–û—Ç—á–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º' },
    ])
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch()
    console.log('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const stopBot = async (): Promise<void> => {
      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot.stop()
        console.log('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await state.agent.shutdown()
        console.log('‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É')
      } catch (error: unknown) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error)
      }
    }

    process.once('SIGINT', stopBot)
    process.once('SIGTERM', stopBot)
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error)
    throw error
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
const main = async (): Promise<void> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.TELEGRAM_BOT_TOKEN

    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ')
    }

    await startBot(token)
  } catch (error: unknown) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
main()
