/**
 * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
 */

import { AgentState, Task, TaskType, TaskStatus, getNextTask } from './state'
import { Service } from '../types/index'
import { EventEmitter } from 'events'
import { Client } from '@modelcontextprotocol/sdk/client/index.js'
import { logger } from '@/utils/logger'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
export interface RouterConfig {
  defaultAgentId?: string
  mcpService: Service
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –≤ —Å–µ—Ç–∏
export interface NetworkAgent {
  id: string
  name: string
  description: string
  capabilities: string[]
  canHandle: (task: Task) => Promise<boolean>
  handle: (task: Task, state: AgentState) => Promise<any>
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
export interface Router {
  registerAgent: (agent: NetworkAgent) => void
  routeTask: (task: Task, state: AgentState) => Promise<NetworkAgent | null>
  getAgents: () => NetworkAgent[]
  getAgentById: (id: string) => NetworkAgent | undefined
  on: (event: string, listener: (...args: any[]) => void) => void
  getNextTaskToProcess: (state: AgentState) => Promise<Task | null>
}

/**
 * –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
 */
export type RouterState = {
  agents: Map<string, NetworkAgent>
  mcpService: Service
  defaultAgentId?: string
  eventEmitter: EventEmitter
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
 */
const createRouterState = (config: RouterConfig): RouterState => ({
  agents: new Map<string, NetworkAgent>(),
  mcpService: config.mcpService,
  defaultAgentId: config.defaultAgentId,
  eventEmitter: new EventEmitter(),
})

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ
 */
const registerAgent = (state: RouterState, agent: NetworkAgent): void => {
  state.agents.set(agent.id, agent)
  console.log(`ü§ñ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: ${agent.name} (${agent.id})`)
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
 */
const getAgents = (state: RouterState): NetworkAgent[] => {
  return Array.from(state.agents.values())
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
 */
const getAgentById = (
  state: RouterState,
  id: string
): NetworkAgent | undefined => {
  return state.agents.get(id)
}

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞
 */
const on = (
  state: RouterState,
  event: string,
  listener: (...args: any[]) => void
): void => {
  state.eventEmitter.on(event, listener)
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
const selectBestAgent = async (
  state: RouterState,
  task: Task,
  candidates: NetworkAgent[]
): Promise<NetworkAgent> => {
  const prompt = `
You are an expert agent router that needs to select the best agent to handle a specific task.

TASK:
- ID: ${task.id}
- Type: ${task.type}
- Description: ${task.description}
- Priority: ${task.priority}

Available agents:
${candidates
  .map(
    (agent, index) => `
${index + 1}. ${agent.name} (${agent.id})
   Description: ${agent.description}
   Capabilities: ${agent.capabilities.join(', ')}
`
  )
  .join('\n')}

Please analyze the task and the available agents. Select the most appropriate agent for this task.
Respond with only the agent ID of your selected agent.
`

  try {
    const result = await state.mcpService.processTask(prompt)
    const agentId = result.trim()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    const selectedAgent = candidates.find(agent => agent.id === agentId)

    if (selectedAgent) {
      logger.info(
        `üéØ –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: ${selectedAgent.name} (${selectedAgent.id})`
      )
      state.eventEmitter.emit('agent_selected', { task, agent: selectedAgent })
      return selectedAgent
    }

    // –ï—Å–ª–∏ MCP –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π ID, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    logger.warn(
      `‚ö†Ô∏è MCP –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≥–µ–Ω—Ç–∞: ${agentId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞`
    )
    return candidates[0]
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:', error)
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    return candidates[0]
  }
}

/**
 * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –∞–≥–µ–Ω—Ç—É
 */
const routeTask = async (
  state: RouterState,
  task: Task,
  // AgentState –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _agentState: AgentState
): Promise<NetworkAgent | null> => {
  logger.info(`üöÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: ${task.id} (${task.type})`)

  // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  if (state.agents.size === 0) {
    logger.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤')
    return null
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
  const capableAgents: NetworkAgent[] = []
  for (const agent of state.agents.values()) {
    try {
      const canHandle = await agent.canHandle(task)
      if (canHandle) {
        capableAgents.push(agent)
      }
    } catch (error) {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç ${agent.id} –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É:`,
        error
      )
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≥–µ–Ω—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ —Å –ø–æ–º–æ—â—å—é MCP
  if (capableAgents.length > 0) {
    if (capableAgents.length === 1) {
      return capableAgents[0]
    }

    // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º MCP –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ
    return await selectBestAgent(state, task, capableAgents)
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (state.defaultAgentId) {
    const defaultAgent = state.agents.get(state.defaultAgentId)
    if (defaultAgent) {
      logger.info(`‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultAgent.name}`)
      return defaultAgent
    }
  }

  logger.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}`)
  return null
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
const getNextTaskToProcess = async (
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _state: RouterState,
  agentState: AgentState
): Promise<Task | null> => {
  console.log('üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...')
  const nextTask = getNextTask(agentState)

  if (nextTask) {
    logger.info(
      `‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${nextTask.id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority})`
    )
  } else {
    logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
  }

  return nextTask
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
 */
export function createAgentRouter(config: RouterConfig): Router {
  const state = createRouterState(config)

  return {
    registerAgent: agent => registerAgent(state, agent),
    routeTask: (task, agentState) => routeTask(state, task, agentState),
    getAgents: () => getAgents(state),
    getAgentById: id => getAgentById(state, id),
    on: (event, listener) => on(state, event, listener),
    getNextTaskToProcess: agentState => getNextTaskToProcess(state, agentState),
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (process.env.NODE_ENV === 'test') {
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
  ;(async () => {
    if (require.main !== module) return

    logger.info('üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    const testService: Service = {
      processTask: async (prompt: string) => {
        logger.info(`üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${prompt.substring(0, 50)}...`)
        return 'agent-1'
      },
      initialize: async () => {
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      close: async () => {
        logger.info('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
      },
      getClient: () => {
        logger.info('üîå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
        return {} as Client // –ú–æ–∫–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
      },
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    const router = createAgentRouter({
      mcpService: testService,
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    const agent1 = {
      id: 'agent-1',
      name: 'Agent 1',
      description: 'Test agent 1',
      capabilities: [TaskType.CODE_GENERATION, TaskType.CODE_ANALYSIS],
      canHandle: async (task: Task) => {
        logger.info(`üëÄ –ê–≥–µ–Ω—Ç 1 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á—É: ${task.id}`)
        return true
      },
      handle: async (task: Task) => {
        logger.info(`üî® –ê–≥–µ–Ω—Ç 1 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É: ${task.id}`)
        return { success: true, result: 'Done by Agent 1' }
      },
    }

    const agent2 = {
      id: 'agent-2',
      name: 'Agent 2',
      description: 'Test agent 2',
      capabilities: [TaskType.CODE_ANALYSIS, TaskType.DOCUMENTATION],
      canHandle: async (task: Task) => {
        logger.info(`üëÄ –ê–≥–µ–Ω—Ç 2 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á—É: ${task.id}`)
        return task.type === TaskType.DOCUMENTATION
      },
      handle: async (task: Task) => {
        logger.info(`üî® –ê–≥–µ–Ω—Ç 2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É: ${task.id}`)
        return { success: true, result: 'Done by Agent 2' }
      },
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    router.registerAgent(agent1)
    router.registerAgent(agent2)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    router.on('agent_selected', data => {
      logger.info(
        `üéØ –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: ${data.agent.name} –¥–ª—è –∑–∞–¥–∞—á–∏ ${data.task.id}`
      )
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    const task: Task = {
      id: 'task-1',
      type: TaskType.DOCUMENTATION,
      description: 'Test task',
      priority: 1,
      status: TaskStatus.PENDING,
      created: new Date(),
      updated: new Date(),
      dependencies: [],
      metadata: {},
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    logger.info('üöÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏...')
    const agentState: AgentState = {
      id: 'test',
      tasks: new Map(),
      context: new Map<string, any>(),
      history: [],
    }

    const selectedAgent = await router.routeTask(task, agentState)
    logger.info(`‚úÖ –í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: ${selectedAgent?.name || 'null'}`)

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    logger.info('üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
  })()
}
