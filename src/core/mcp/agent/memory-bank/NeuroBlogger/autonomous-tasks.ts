import { Task, TaskType, TaskStatus } from '../../../state'
import { AutonomousSystem } from '../../../autonomous-system'
import { v4 as uuidv4 } from 'uuid'

/**
 * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã NeuroBlogger
 */
export class AutonomousTasks {
  private system: AutonomousSystem
  private isRunning: boolean = false
  private taskQueue: Task[] = []

  constructor(system: AutonomousSystem) {
    this.system = system
    this.initializeTaskQueue()
  }

  private initializeTaskQueue() {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    this.addTask(TaskType.SELF_IMPROVEMENT, '–ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã')
    this.addTask(TaskType.CODE_GENERATION, '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º')
    this.addTask(TaskType.CODE_ANALYSIS, '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã')
  }

  private addTask(type: TaskType, description: string, priority: number = 1) {
    const task: Task = {
      id: uuidv4(),
      type,
      description,
      status: TaskStatus.PENDING,
      priority,
      created: new Date(),
      updated: new Date(),
      metadata: {
        autonomous: true,
        initiator: 'NeuroBlogger'
      }
    }
    this.taskQueue.push(task)
  }

  public async startAutonomousWork() {
    if (this.isRunning) return
    this.isRunning = true
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É...')
    
    while (this.isRunning && this.taskQueue.length > 0) {
      const task = this.taskQueue.shift()
      if (!task) continue

      try {
        console.log(`üìã –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É: ${task.description}`)
        await this.system.processTask(task)
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        this.analyzeAndCreateNewTasks(task)
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${task.id}:`, error)
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        task.priority = Math.max(1, task.priority - 1)
        this.taskQueue.push(task)
      }
    }
  }

  private analyzeAndCreateNewTasks(completedTask: Task) {
    // –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    switch (completedTask.type) {
      case TaskType.SELF_IMPROVEMENT:
        this.addTask(TaskType.CODE_REFACTORING, '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞')
        break
      
      case TaskType.CODE_GENERATION:
        this.addTask(TaskType.CODE_ANALYSIS, '–ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞')
        this.addTask(TaskType.TESTING, '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
        break
      
      case TaskType.CODE_ANALYSIS:
        this.addTask(TaskType.SELF_IMPROVEMENT, '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
        break
    }
  }

  public stop() {
    this.isRunning = false
    console.log('üõë –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }
} 