import { AutonomousSystem, Task } from '../../autonomous-system'
import { TaskType } from '../../state'
import { logger } from '../../../logger'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É NeuroBlogger
 */
async function startNeuroBlogger() {
  logger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NeuroBlogger...')
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  const system = new AutonomousSystem()
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
  system.addTask({
    type: TaskType.SELF_IMPROVEMENT,
    description: '–ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã',
    priority: 1
  })
  
  system.addTask({
    type: TaskType.CODE_GENERATION,
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
    priority: 2
  })
  
  system.addTask({
    type: TaskType.CODE_ANALYSIS,
    description: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã',
    priority: 1
  })
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  system.on('taskCompleted', (task: Task) => {
    logger.info('‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', {
      taskId: task.id,
      type: task.type,
      description: task.description
    })
  })
  
  system.on('taskFailed', (task: Task, error: Error | unknown) => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', {
      taskId: task.id,
      type: task.type,
      error: error instanceof Error ? error.message : String(error)
    })
  })
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
  system.start()
  
  logger.info('üöÄ NeuroBlogger –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ')
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  process.on('SIGINT', async () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NeuroBlogger...')
    system.stop()
    process.exit(0)
  })
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
startNeuroBlogger().catch((error: Error | unknown) => {
  logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ NeuroBlogger:', {
    error: error instanceof Error ? error.message : String(error)
  })
  process.exit(1)
}) 