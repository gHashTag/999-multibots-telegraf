/**
 * –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –§–∞–π–ª src/test-utils/test-config.ts
 */

import { InngestTestEngine } from './inngestTestEngine'
import { createClient } from '@supabase/supabase-js'
import { Database } from '../types/supabase'

// –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ Inngest
export const inngestTestEngine = new InngestTestEngine()

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
export const TEST_CONFIG = {
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  general: {
    logLevel: process.env.TEST_LOG_LEVEL || 'info',
    timeouts: {
      defaultWait: 1000,
      eventProcessing: 5000,
      databaseOperation: 3000,
      cleanup: 2000,
    },
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  payment: {
    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    testUsers: {
      regular: { telegram_id: '123456789' },
      premium: { telegram_id: '987654321' },
      new: { telegram_id: '111222333' },
    },

    // –°—É–º–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    amounts: {
      small: 10,
      medium: 100,
      large: 1000,
      zero: 0,
      negative: -50, // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    },

    // –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    transactionTypes: [
      'money_income',
      'money_expense',
      'subscription_purchase',
      'subscription_renewal',
      'refund',
      'bonus',
    ],

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    errorScenarios: {
      insufficientFunds: true,
      invalidAmount: true,
      duplicateOperation: true,
      timeoutScenario: true,
      concurrentRequests: true,
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    concurrency: {
      enabled: false, // –í–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      maxConcurrentRequests: 5,
      requestDelay: 100,
    },
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤ Docker
  docker: {
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Docker-–æ–∫—Ä—É–∂–µ–Ω–∏—è
    timeouts: {
      defaultWait: 2000,
      eventProcessing: 8000,
      databaseOperation: 5000,
      cleanup: 3000,
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    reporting: {
      saveResults: true,
      outputDir: '/app/test-results',
      format: 'json',
    },
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–∫–æ–≤
  mocks: {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    useRealFunctions: process.env.USE_REAL_FUNCTIONS === 'true',

    // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–æ–∫–æ–≤
    userBalances: {
      '123456789': 1000,
      '987654321': 5000,
      '111222333': 0,
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
    errors: {
      simulateErrors: false,
      errorRate: 0.2, // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
      errorTypes: ['network', 'timeout', 'database'],
    },
  },

  // –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  helpers: {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ operation_id
    generateTestOperationId: () =>
      `test_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`,

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async cleanupTestData(
      supabaseClient: ReturnType<typeof createClient<Database>>,
      telegram_id: string
    ) {
      try {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await supabaseClient
          .from('payments_v2')
          .delete()
          .eq('telegram_id', telegram_id)
          .like('description', 'Test%')

        console.log(
          `üßπ –û—á–∏—â–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id}`
        )
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
      }
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    async setupTestEnvironment() {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        await inngestTestEngine.init({
          mockEvents: TEST_CONFIG.mocks.useRealFunctions ? false : true,
          logLevel: TEST_CONFIG.general.logLevel as any,
          simulateErrors: TEST_CONFIG.mocks.errors.simulateErrors,
          errorRate: TEST_CONFIG.mocks.errors.errorRate,
        })

        console.log('üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ')
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${error.message}`
        )
        throw error
      }
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    async teardownTestEnvironment() {
      try {
        await inngestTestEngine.cleanup()
        console.log('üßπ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ')
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${error.message}`
        )
      }
    },
  },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤
  categories: {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    'payment-processor': {
      enabled: true,
      description: '–¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
      priority: 'high',
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∞–º–∏
    'payment-mock': {
      enabled: true,
      description: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤',
      priority: 'medium',
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Docker-—Ç–µ—Å—Ç–æ–≤
    'payment-docker': {
      enabled: process.env.DOCKER_TESTING === 'true',
      description: '–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Docker',
      priority: 'low',
    },

    // –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    payment: {
      enabled: true,
      description: '–í—Å–µ —Ç–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
      priority: 'high',
      includes: ['payment-processor', 'payment-mock', 'payment-docker'],
    },
  },
}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export interface TestConfig {
  general: {
    logLevel: string
    timeouts: {
      defaultWait: number
      eventProcessing: number
      databaseOperation: number
      cleanup: number
    }
  }
  payment: {
    testUsers: {
      [key: string]: { telegram_id: string }
    }
    amounts: {
      [key: string]: number
    }
    transactionTypes: string[]
    errorScenarios: {
      [key: string]: boolean
    }
    concurrency: {
      enabled: boolean
      maxConcurrentRequests: number
      requestDelay: number
    }
  }
  docker: {
    timeouts: {
      defaultWait: number
      eventProcessing: number
      databaseOperation: number
      cleanup: number
    }
    reporting: {
      saveResults: boolean
      outputDir: string
      format: string
    }
  }
  mocks: {
    useRealFunctions: boolean
    userBalances: {
      [key: string]: number
    }
    errors: {
      simulateErrors: boolean
      errorRate: number
      errorTypes: string[]
    }
  }
  helpers: {
    generateTestOperationId: () => string
    cleanupTestData: (supabaseClient: any, telegram_id: string) => Promise<void>
    setupTestEnvironment: () => Promise<void>
    teardownTestEnvironment: () => Promise<void>
  }
  categories: {
    [key: string]: {
      enabled: boolean
      description: string
      priority: 'high' | 'medium' | 'low'
      includes?: string[]
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export { InngestTestEngine }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function getTestConfig(
  environment: 'local' | 'docker' = 'local'
): TestConfig {
  if (environment === 'docker') {
    return {
      ...TEST_CONFIG,
      general: {
        ...TEST_CONFIG.general,
        timeouts: TEST_CONFIG.docker.timeouts,
      },
    }
  }

  return TEST_CONFIG
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤
export function isTestCategoryEnabled(category: string): boolean {
  if (!TEST_CONFIG.categories[category]) {
    return false
  }

  return TEST_CONFIG.categories[category].enabled
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/*
import { TEST_CONFIG, isTestCategoryEnabled } from './test-config';

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
if (isTestCategoryEnabled('payment-processor')) {
  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const eventTimeout = TEST_CONFIG.general.timeouts.eventProcessing;

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const testUser = TEST_CONFIG.payment.testUsers.regular;
*/
