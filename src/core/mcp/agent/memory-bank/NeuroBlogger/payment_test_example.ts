/**
 * –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å
 * —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ NeuroBlogger
 */

import { TestResult } from '../../types';
import { InngestTestEngine } from '../../inngestTestEngine';
import { getUserBalance } from '../../../core/supabase/getUserBalance';
import { ModeEnum } from '../../../types/enums';
import { generateUniqueId } from '../../../utils/generateId';
import { wait } from '../../../utils/time';

// –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Inngest
const inngestTestEngine = new InngestTestEngine();

/**
 * –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function testMoneyIncome(): Promise<TestResult> {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    await inngestTestEngine.init({
      mockEvents: false,
      logLevel: 'info'
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUser = { telegram_id: '123456789' };
    const amount = 100;
    const operationId = generateUniqueId();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: testUser.telegram_id,
        amount: amount,
        type: 'money_income',
        description: 'Test balance replenishment',
        bot_name: 'TestBot',
        service_type: ModeEnum.TopUpBalance,
        operation_id: operationId
      }
    });
    
    console.log('üîç –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è...');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    const processedEvent = await inngestTestEngine.waitForEvent('payment/processed', {
      timeout: 5000,
      filter: (event) => event.data.telegram_id === testUser.telegram_id
    });
    
    if (!processedEvent) {
      console.log('‚ùå –°–æ–±—ã—Ç–∏–µ payment/processed –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
      return {
        success: false,
        message: '–°–æ–±—ã—Ç–∏–µ payment/processed –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞',
        name: 'Money Income Test'
      };
    }
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ payment/processed –ø–æ–ª—É—á–µ–Ω–æ');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await wait(1000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const newBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
    
    const expectedBalance = initialBalance + amount;
    
    if (newBalance !== expectedBalance) {
      console.log(`‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: ${newBalance} != ${expectedBalance}`);
      return {
        success: false,
        message: `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–µ–Ω. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedBalance}, –ø–æ–ª—É—á–µ–Ω–æ: ${newBalance}`,
        name: 'Money Income Test'
      };
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω');
    return {
      success: true,
      message: '–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Money Income Test'
    };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`,
      name: 'Money Income Test'
    };
  } finally {
    await inngestTestEngine.cleanup();
  }
}

/**
 * –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function testMoneyExpense(): Promise<TestResult> {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    await inngestTestEngine.init({
      mockEvents: false,
      logLevel: 'info'
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUser = { telegram_id: '123456789' };
    const expenseAmount = 50;
    const operationId = generateUniqueId();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    if (initialBalance < expenseAmount) {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–ø–æ–ª–Ω—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞');
      
      // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      await inngestTestEngine.sendEvent({
        name: 'payment/process',
        data: {
          telegram_id: testUser.telegram_id,
          amount: expenseAmount * 2,
          type: 'money_income',
          description: 'Test balance replenishment for expense test',
          bot_name: 'TestBot',
          service_type: ModeEnum.TopUpBalance,
          operation_id: generateUniqueId()
        }
      });
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      await inngestTestEngine.waitForEvent('payment/processed', {
        timeout: 5000,
        filter: (event) => 
          event.data.telegram_id === testUser.telegram_id && 
          event.data.type === 'money_income'
      });
      
      await wait(1000);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const updatedInitialBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${updatedInitialBalance}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: testUser.telegram_id,
        amount: expenseAmount,
        type: 'money_expense',
        description: 'Test expense operation',
        bot_name: 'TestBot',
        service_type: ModeEnum.TextGeneration,
        operation_id: operationId
      }
    });
    
    console.log('üîç –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è...');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    const processedEvent = await inngestTestEngine.waitForEvent('payment/processed', {
      timeout: 5000,
      filter: (event) => 
        event.data.telegram_id === testUser.telegram_id && 
        event.data.type === 'money_expense'
    });
    
    if (!processedEvent) {
      console.log('‚ùå –°–æ–±—ã—Ç–∏–µ payment/processed –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
      return {
        success: false,
        message: '–°–æ–±—ã—Ç–∏–µ payment/processed –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞',
        name: 'Money Expense Test'
      };
    }
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ payment/processed –ø–æ–ª—É—á–µ–Ω–æ');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await wait(1000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const newBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
    
    const expectedBalance = updatedInitialBalance - expenseAmount;
    
    if (newBalance !== expectedBalance) {
      console.log(`‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: ${newBalance} != ${expectedBalance}`);
      return {
        success: false,
        message: `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–≤–µ—Ä–µ–Ω. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedBalance}, –ø–æ–ª—É—á–µ–Ω–æ: ${newBalance}`,
        name: 'Money Expense Test'
      };
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω');
    return {
      success: true,
      message: '–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω',
      name: 'Money Expense Test'
    };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`,
      name: 'Money Expense Test'
    };
  } finally {
    await inngestTestEngine.cleanup();
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export async function testDuplicatePayments(): Promise<TestResult> {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    await inngestTestEngine.init({
      mockEvents: false,
      logLevel: 'info'
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUser = { telegram_id: '123456789' };
    const amount = 100;
    const operationId = generateUniqueId(); // –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ ID –¥–ª—è –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const initialBalance = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: testUser.telegram_id,
        amount: amount,
        type: 'money_income',
        description: 'Test duplicate payment - first attempt',
        bot_name: 'TestBot',
        service_type: ModeEnum.TopUpBalance,
        operation_id: operationId
      }
    });
    
    console.log('üîç –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    await inngestTestEngine.waitForEvent('payment/processed', {
      timeout: 5000,
      filter: (event) => event.data.telegram_id === testUser.telegram_id
    });
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await wait(1000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const balanceAfterFirstOperation = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: ${balanceAfterFirstOperation}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–º –∂–µ operation_id
    await inngestTestEngine.sendEvent({
      name: 'payment/process',
      data: {
        telegram_id: testUser.telegram_id,
        amount: amount,
        type: 'money_income',
        description: 'Test duplicate payment - second attempt',
        bot_name: 'TestBot',
        service_type: ModeEnum.TopUpBalance,
        operation_id: operationId // –¢–æ—Ç –∂–µ ID
      }
    });
    
    console.log('üîç –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...');
    
    // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await wait(2000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ)
    const balanceAfterSecondOperation = await getUserBalance(testUser.telegram_id);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: ${balanceAfterSecondOperation}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (balanceAfterFirstOperation !== balanceAfterSecondOperation) {
      console.log(`‚ùå –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: ${balanceAfterFirstOperation} ‚Üí ${balanceAfterSecondOperation}`);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: –¥—É–±–ª–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞ –±–∞–ª–∞–Ω—Å. –ë—ã–ª–æ: ${balanceAfterFirstOperation}, —Å—Ç–∞–ª–æ: ${balanceAfterSecondOperation}`,
        name: 'Duplicate Payment Test'
      };
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω');
    return {
      success: true,
      message: '–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ –±–∞–ª–∞–Ω—Å)',
      name: 'Duplicate Payment Test'
    };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`,
      name: 'Duplicate Payment Test'
    };
  } finally {
    await inngestTestEngine.cleanup();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
export async function runPaymentProcessorTests(): Promise<TestResult[]> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
  
  const results: TestResult[] = [];
  
  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  results.push(await testMoneyIncome());
  results.push(await testMoneyExpense());
  results.push(await testDuplicatePayments());
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const successCount = results.filter(r => r.success).length;
  const totalCount = results.length;
  
  console.log(`üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount}`);
  
  return results;
}