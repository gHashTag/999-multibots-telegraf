import { Task, TaskStatus } from '../state'
import { Service } from '../../types'
import { v4 as uuidv4 } from 'uuid'
import * as fs from 'fs'
import * as path from 'path'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
export interface ImprovementResult {
  success: boolean
  message: string
  timestamp: Date
  changes?: string[]
}

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
export class SelfImprovementSystem {
  private mcpService: Service
  private logPath: string

  constructor(mcpService: Service) {
    this.mcpService = mcpService
    this.logPath = path.join(__dirname, 'improvement-log.json')
    this.initializeLog()
  }

  private initializeLog(): void {
    if (!fs.existsSync(this.logPath)) {
      fs.writeFileSync(this.logPath, JSON.stringify([], null, 2))
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  async improve(task: Task): Promise<ImprovementResult> {
    console.log('ü§ñ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è...')
    
    try {
      // MVP: –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
      const result: ImprovementResult = {
        success: true,
        message: '–í—ã–ø–æ–ª–Ω–µ–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        timestamp: new Date(),
        changes: ['–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è']
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.logImprovement(result)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      task.status = TaskStatus.COMPLETED
      task.result = result

      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω')
      return result

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è:', error)
      return {
        success: false,
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: new Date()
      }
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  private async logImprovement(result: ImprovementResult): Promise<void> {
    try {
      const logs = JSON.parse(fs.readFileSync(this.logPath, 'utf-8'))
      logs.push({
        ...result,
        id: uuidv4()
      })
      fs.writeFileSync(this.logPath, JSON.stringify(logs, null, 2))
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
export function createSelfImprovementSystem(mcpService: Service): SelfImprovementSystem {
  return new SelfImprovementSystem(mcpService)
} 