import { readFileSync } from 'fs'
import path from 'path'
import { logger } from '@/utils/logger'

interface MCPServerConfig {
  command?: string
  url?: string
  env?: Record<string, string>
}

interface MCPConfig {
  mcpServers: Record<string, MCPServerConfig>
}

class MCPManager {
  private config: MCPConfig

  constructor() {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const configPath = path.resolve(process.cwd(), 'config.json')
      if (this.fileExists(configPath)) {
        const configContent = readFileSync(configPath, 'utf-8')
        this.config = JSON.parse(configContent)
        logger.info('üîå MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞')
      } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.config = this.loadFromEnv()
        logger.info('üîå MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error)
      throw error
    }
  }

  private fileExists(path: string): boolean {
    try {
      readFileSync(path)
      return true
    } catch {
      return false
    }
  }

  private loadFromEnv(): MCPConfig {
    const config: MCPConfig = { mcpServers: {} }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Replicate
    if (process.env.REPLICATE_API_TOKEN) {
      config.mcpServers.replicate = {
        command: 'mcp-replicate',
        env: {
          REPLICATE_API_TOKEN: process.env.REPLICATE_API_TOKEN,
        },
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Telegram
    if (process.env.TG_APP_ID && process.env.TG_API_HASH) {
      config.mcpServers['telegram-mcp'] = {
        command: 'telegram-mcp',
        env: {
          TG_APP_ID: process.env.TG_APP_ID,
          TG_API_HASH: process.env.TG_API_HASH,
        },
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º URL-based —Å–µ—Ä–≤–∏—Å—ã
    const urlServices = [
      'googlesheets',
      'googlesuper',
      'supabase',
      'gmail',
      'googlemeet',
      'github',
      'hackernews',
      'zoom',
      'coinbase',
    ]

    for (const service of urlServices) {
      const envKey = `MCP_${service.toUpperCase()}_URL`
      const url = process.env[envKey]
      if (url) {
        config.mcpServers[`${service}_composio`] = { url }
      }
    }

    return config
  }

  public getServerConfig(serverName: string): MCPServerConfig | null {
    return this.config.mcpServers[serverName] || null
  }

  public getAllServers(): Record<string, MCPServerConfig> {
    return this.config.mcpServers
  }

  public async connectToServer(serverName: string): Promise<boolean> {
    const serverConfig = this.getServerConfig(serverName)
    if (!serverConfig) {
      logger.error(`‚ùå –°–µ—Ä–≤–µ—Ä ${serverName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`)
      return false
    }

    try {
      if (serverConfig.command) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ command-based —Å–µ—Ä–≤–µ—Ä–æ–≤
        logger.info(
          `üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${serverName}: ${serverConfig.command}`
        )
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
      } else if (serverConfig.url) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL-based —Å–µ—Ä–≤–µ—Ä–æ–≤
        logger.info(
          `üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${serverName} –ø–æ URL: ${serverConfig.url}`
        )
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ URL
      }

      return true
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${serverName}:`, error)
      return false
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton –∏–Ω—Å—Ç–∞–Ω—Å
export const mcpManager = new MCPManager()
