import { createClient } from '@supabase/supabase-js'
import {
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE_KEY,
  SUPABASE_SERVICE_KEY,
} from '../../config'
import { logger } from '@/utils/logger'
import fs from 'fs'

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY || !SUPABASE_SERVICE_KEY) {
  throw new Error('Missing Supabase environment variables')
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role key
export const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

// –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º
export const supabaseAdmin = createClient(
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE_KEY
)

// –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å anon key (—Ç–µ–ø–µ—Ä—å SUPABASE_SERVICE_KEY)
export const supabaseClient = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

logger.info('üîå Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
  description: 'Supabase client initialized',
  url: SUPABASE_URL?.substring(0, 15) + '...',
})

export * from './createUser'
export * from './createModelTraining'
export * from './checkSubscriptionByTelegramId'
export * from './updateUserBalance'
export * from './getAspectRatio'
export * from './getGeneratedImages'
export * from './getHistory'
export * from './getModel'
export * from './getPrompt'
export * from './getUserData'
export * from './incrementGeneratedImages'
export * from './isLimitAi'
export * from './savePrompt'
export * from './saveNeuroPhotoPrompt'
export * from './setAspectRatio'
export * from './getUidInviter'
export * from './getUserBalance'
export * from './updateUserVoice'
export * from './getUserModel'
export * from './getReferalsCountAndUserData'
export * from './cleanupOldArchives'
export * from './deleteFileFromSupabase'
export * from './ensureSupabaseAuth'
export * from './getTelegramIdByUserId'
export * from './getVoiceId'
export * from './saveUserEmail'
export * from './sendPaymentInfo'
export * from './getPaymentsInfoByTelegramId'
export * from './setModel'
export * from './updateModelTraining'
export * from './updateUserSoul'
export * from './getUserByTelegramId'
export * from './getLatestUserModel'
export * from './getUid'
export * from './updateUserSubscription'
export * from './getTranslation'
export * from './checkPaymentStatus'
export * from './updateUserLevelPlusOne'
export * from './getSubScribeChannel'
export * from './getTrainingCancelUrl'
export * from './getGroupByBotName'
export * from './isOwner'
export * from './createModelTrainingV2'
export * from './updateLatestModelTraining'
export * from './getUserByTelegramIdString'
export * from './getTrainingWithUser'
export * from './notifyTrainingSuccess'
export * from './updatePrompt'
export * from './getTaskData'
export * from './getFineTuneIdByTelegramId'
export * from './getUserByTaskId'
export * from './getTelegramIdFromInvId'
export * from './getBotGroupFromAvatars'

export * from './getAllUsersData'

export * from './getUser'
export * from './createPayment'

// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
// –ò–º–µ–Ω–Ω–æ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ paymentProcessor.ts
export { getPaymentByInvId } from './getPaymentByInvId'
export { createSuccessfulPayment } from './createSuccessfulPayment'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param botName –ò–º—è –±–æ—Ç–∞
 * @returns –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export const getUserById = async (userId: number, botName: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .eq('bot_name', botName)
      .single()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return null
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL
 * @param url URL —Ñ–∞–π–ª–∞
 * @param destinationPath –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
 * @returns true –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω
 */
export const downloadFile = async (
  url: string,
  destinationPath: string
): Promise<boolean> => {
  try {
    const response = await fetch(url)

    if (!response.ok) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`
      )
    }

    const fileStream = fs.createWriteStream(destinationPath)
    const buffer = await response.arrayBuffer()

    return new Promise((resolve, reject) => {
      fileStream.write(Buffer.from(buffer), err => {
        if (err) {
          reject(err)
          return
        }

        fileStream.close(() => {
          resolve(true)
        })
      })
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error)
    throw error
  }
}
