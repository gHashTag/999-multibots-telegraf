import { supabase } from '.'
import { Logger as logger } from '../../utils/logger'

export async function isOwner(
  userId: number,
  botName: string
): Promise<boolean> {
  try {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞',
      description: 'Checking bot owner',
      user_id: userId,
      bot_name: botName,
    })

    const { data, error } = await supabase
      .from('avatars')
      .select('telegram_id')
      .eq('bot_name', botName)
      .single()

    if (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞',
        description: 'Error checking owner',
        error: error.message,
        user_id: userId,
        bot_name: botName,
      })
      return false
    }

    if (!data) {
      logger.warn({
        message: '‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Bot not found',
        bot_name: botName,
      })
      return false
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const ownerTelegramId = parseInt(data.telegram_id)
    const isOwnerResult = !isNaN(ownerTelegramId) && ownerTelegramId === userId

    logger.info({
      message: isOwnerResult
        ? '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º'
        : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º',
      description: isOwnerResult ? 'User is owner' : 'User is not owner',
      user_id: userId,
      owner_id: ownerTelegramId,
      bot_name: botName,
    })

    return isOwnerResult
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
      description: 'Query execution error',
      error: error instanceof Error ? error.message : String(error),
      user_id: userId,
      bot_name: botName,
    })
    return false
  }
}
