import { MyContext } from '@/interfaces'
import { supabase } from '@/core/supabase'
import { getBotNameByToken, DEFAULT_BOT_NAME } from '@/core/bot'
import logger from '@/utils/logger'
import { isRussian } from '@/helpers/language'
import { TranslationButton } from '@/interfaces/supabase.interface'
import { SubscriptionType } from '@/interfaces/subscription.interface'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const DEFAULT_BUTTONS_RU: TranslationButton[] = [
  {
    row: 1,
    text: 'üì∏ –ù–µ–π—Ä–æ–§–æ—Ç–æ',
    stars_price: 476,
    en_price: 15,
    ru_price: 1110,
    description: '–û–ø–∏—Å —Ç–∞—Ä–∏—Ñ—É –ù–µ–π—Ä–æ–§–æ—Ç–æ...',
    callback_data: 'neurophoto', // SubscriptionType.NEUROPHOTO.toLowerCase()
    subscription: SubscriptionType.NEUROPHOTO,
  },
  {
    row: 2,
    text: 'üìö –ù–µ–π—Ä–æ–í–∏–¥–µ–æ',
    stars_price: 1303,
    en_price: 35,
    ru_price: 2999,
    description: '–û–ø–∏—Å —Ç–∞—Ä–∏—Ñ—É –ù–µ–π—Ä–æ–í–∏–¥–µ–æ...',
    subscription: SubscriptionType.NEUROVIDEO,
    callback_data: 'neurovideo', // SubscriptionType.NEUROVIDEO.toLowerCase()
  },
]
const DEFAULT_BUTTONS_EN: TranslationButton[] = [
  {
    row: 1,
    text: 'üì∏ NeuroPhoto',
    en_price: 15,
    ru_price: 1110,
    description: 'Description of the NeuroPhoto tariff...',
    stars_price: 476,
    callback_data: 'neurophoto',
    subscription: SubscriptionType.NEUROPHOTO,
  },
  {
    row: 2,
    text: 'üìö NeuroVideo',
    en_price: 35,
    ru_price: 2999,
    description: 'Description of the NeuroVideo tariff...',
    stars_price: 1303,
    callback_data: 'neurovideo',
    subscription: SubscriptionType.NEUROVIDEO,
  },
]

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ–±—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const COMMON_BOT_NAME = 'common'

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export async function getTranslation({
  key,
  ctx,
  bot_name,
}: {
  key: string
  ctx: MyContext
  bot_name: string
}): Promise<{
  translation: string
  url: string
  buttons: TranslationButton[]
}> {
  // –î–æ–±–∞–≤–ª—è–µ–º buttons
  console.log('CASE: getTranslation:', key)
  if (!ctx.from) {
    console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return {
      translation: '',
      url: '',
      buttons: [],
    }
  }
  const { language_code } = ctx.from
  const token = ctx.telegram.token

  const botName = bot_name ? bot_name : getBotNameByToken(token).bot_name

  const fetchTranslation = async (name: string) => {
    return await supabase
      .from('translations')
      .select('translation, url, buttons')
      .eq('language_code', language_code)
      .eq('key', key)
      .eq('bot_name', name)
      .single()
  }
  try {
    let { data, error } = await fetchTranslation(botName)

    if (error) {
      logger.warn({
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞/–∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –∫–ª—é—á–∞ "${key}"`,
        bot_name: botName,
        language_code,
        key,
        error: error.message,
      })

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–ª—è DEFAULT_BOT_NAME
      const defaultBot = DEFAULT_BOT_NAME
      ;({ data, error } = await fetchTranslation(defaultBot))

      // –ï—Å–ª–∏ –∏ –¥–ª—è DEFAULT_BOT_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      if (error) {
        logger.warn({
          message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞/–∫–Ω–æ–ø–æ–∫ —Å DEFAULT_BOT_NAME –¥–ª—è –∫–ª—é—á–∞ "${key}"`,
          bot_name: defaultBot,
          language_code,
          key,
          error: error.message,
        })
        ;({ data, error } = await fetchTranslation(COMMON_BOT_NAME))

        if (!error) {
          logger.info({
            message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ "${key}"`,
            bot_name: COMMON_BOT_NAME,
            language_code,
            key,
          })
        }
      }
    }

    // –ü–∞—Ä—Å–∏–º buttons_config, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    let buttons: TranslationButton[] = []
    if (data?.buttons) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ buttons_config —É–∂–µ –æ–±—ä–µ–∫—Ç–æ–º/–º–∞—Å—Å–∏–≤–æ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase)
        if (typeof data.buttons === 'object') {
          buttons = data.buttons as TranslationButton[]
        } else if (typeof data.buttons === 'string') {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É JSON
          buttons = JSON.parse(data.buttons)
        } else {
          logger.warn(
            `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è buttons_config: ${typeof data.buttons}`
          )
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ buttons –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(buttons)) {
          logger.warn(
            '–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π buttons_config –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.'
          )
          buttons = []
        }
      } catch (parseError) {
        logger.error({
          message: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è buttons –∫–ª—é—á–∞ "${key}"`,
          error:
            parseError instanceof Error
              ? parseError.message
              : String(parseError),
          buttons_raw: data.buttons,
          bot_name: botName,
          language_code,
          key,
        })
        buttons = [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    } else {
      logger.warn(`–ü–æ–ª–µ buttons –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –∫–ª—é—á–∞ "${key}"`)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª—é—á–∞ digitalAvatar, –µ—Å–ª–∏ buttons –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (key === 'digitalAvatar' && buttons.length === 0) {
      buttons = language_code === 'ru' ? DEFAULT_BUTTONS_RU : DEFAULT_BUTTONS_EN
      logger.info(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª—é—á–∞ "${key}"`)
    }

    return {
      translation: data?.translation || '',
      url: data?.url || '',
      buttons: buttons, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  } catch (e) {
    const errorMessage = e instanceof Error ? e.message : String(e)
    logger.error({
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞/–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª—é—á–∞ "${key}"`,
      error: errorMessage,
      bot_name: botName,
      language_code,
      key,
    })
    return {
      translation: '',
      url: '',
      buttons: [],
    }
  }
}
