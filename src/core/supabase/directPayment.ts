import { TelegramId } from '@/interfaces/telegram.interface'
import { ModeEnum } from '@/interfaces/modes'
import { TransactionType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { createSuccessfulPayment } from './createSuccessfulPayment'
import { getUserBalance, invalidateBalanceCache } from './getUserBalance'
import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import { normalizeTransactionType } from '@/interfaces/payments.interface'
import { notifyAmbassadorAboutPayment } from '@/services/ambassadorPaymentNotifier'

interface DirectPaymentParams {
  telegram_id: TelegramId
  amount: number
  type: TransactionType | string
  description: string
  bot_name: string
  service_type?: ModeEnum
  stars?: number
  metadata?: Record<string, any>
  inv_id?: string
  bypass_payment_check?: boolean
}

interface DirectPaymentResult {
  success: boolean
  payment?: {
    payment_id: number
    telegram_id: string
    amount: number
    stars: number
    type: string
    status: string
  }
  balanceChange?: {
    before: number
    after: number
    difference: number
  }
  operation_id?: string
  error?: string
  telegram_id?: string
  amount?: number
  type?: string
}

/**
 * –ü—Ä—è–º–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ Inngest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 *
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ –∂–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ –∏ Inngest-—Ñ—É–Ω–∫—Ü–∏—è paymentProcessor,
 * –Ω–æ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Inngest
 *
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 */
export async function directPaymentProcessor(
  params: DirectPaymentParams
): Promise<DirectPaymentResult> {
  try {
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const validatedParams = { ...params }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    if (validatedParams.type) {
      validatedParams.type = normalizeTransactionType(
        validatedParams.type as TransactionType
      )
    }

    if (!validatedParams.telegram_id || !validatedParams.amount) {
      throw new Error(
        'üö´ –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: telegram_id –∏–ª–∏ amount'
      )
    }

    const {
      telegram_id,
      amount,
      type,
      description,
      bot_name,
      service_type,
      stars,
      metadata,
      inv_id,
      bypass_payment_check,
    } = validatedParams

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    const operationId = inv_id || uuidv4()

    logger.info('üöÄ [DIRECT] –ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting direct payment processing (Inngest fallback)',
      telegram_id,
      amount,
      type,
      bot_name,
      service_type,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    if (amount <= 0) {
      throw new Error(
        `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${amount}. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.`
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stars –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if (stars !== undefined && stars <= 0) {
      throw new Error(
        `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ${stars}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.`
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    logger.info('üí∞ [DIRECT] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Getting current balance (direct)',
      telegram_id,
    })
    const currentBalance = await getUserBalance(telegram_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    if (type === TransactionType.MONEY_EXPENSE && !bypass_payment_check) {
      logger.info('üí∞ [DIRECT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', {
        description: 'Checking balance for expense (direct)',
        telegram_id,
        currentBalance,
        amount,
      })

      if (currentBalance < amount) {
        const errorMessage = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
        logger.error('‚ùå [DIRECT] ' + errorMessage, {
          description: 'Insufficient funds (direct)',
          telegram_id,
          currentBalance,
          amount,
        })
        return {
          success: false,
          error: errorMessage,
          telegram_id: telegram_id.toString(),
          amount,
          type: type.toString(),
        }
      }
    } else if (bypass_payment_check && type === TransactionType.MONEY_EXPENSE) {
      logger.info('üîÑ [DIRECT] –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)', {
        description: 'Bypassing balance check (test mode)',
        telegram_id,
        currentBalance,
        amount,
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    logger.info('üí≥ [DIRECT] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
      description: 'Creating payment record (direct)',
      telegram_id,
      amount,
      type,
    })

    try {
      const payment = await createSuccessfulPayment({
        telegram_id,
        amount,
        stars: stars || amount,
        type,
        description,
        bot_name,
        service_type,
        payment_method: 'balance',
        status: 'COMPLETED',
        inv_id: operationId,
        metadata,
      })

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
      logger.info('üîÑ [DIRECT] –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Invalidating balance cache (direct)',
        telegram_id,
      })
      invalidateBalanceCache(telegram_id)

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const newBalance = await getUserBalance(telegram_id)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        logger.info('üì® [DIRECT] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
          description: 'Sending notification to user (direct)',
          telegram_id,
          amount,
          paymentId: payment.id,
        })

        await sendTransactionNotificationTest({
          telegram_id: Number(telegram_id),
          operationId: payment.operation_id || operationId,
          amount: payment.amount,
          currentBalance,
          newBalance,
          description: payment.description,
          isRu: true,
          bot_name: payment.bot_name,
        })
      } catch (notificationError) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.error('‚ö†Ô∏è [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
          description: 'Error sending notification (direct payment continues)',
          error:
            notificationError instanceof Error
              ? notificationError.message
              : String(notificationError),
          telegram_id,
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–≤–µ—Ä—à–µ–Ω –≤ –µ–≥–æ –±–æ—Ç–µ
      try {
        if (payment.bot_name) {
          const hasAmbassador = await notifyAmbassadorAboutPayment(payment)

          if (hasAmbassador) {
            logger.info('‚úÖ [DIRECT] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
              description: 'Ambassador notification sent successfully (direct)',
              paymentId: payment.id,
              botName: payment.bot_name,
            })
          }
        }
      } catch (ambassadorError) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
        logger.error(
          '‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
          {
            description: 'Error sending notification to ambassador (direct)',
            error:
              ambassadorError instanceof Error
                ? ambassadorError.message
                : String(ambassadorError),
            paymentId: payment.id,
            botName: payment.bot_name || 'unknown',
          }
        )
      }

      logger.info('‚úÖ [DIRECT] –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        description: 'Payment processed successfully (direct)',
        telegram_id,
        amount,
        type,
        paymentId: payment.id,
      })

      return {
        success: true,
        payment: {
          payment_id: payment.id,
          telegram_id: telegram_id.toString(),
          amount,
          stars: stars || amount,
          type: type.toString(),
          status: 'COMPLETED',
        },
        balanceChange: {
          before: currentBalance,
          after: newBalance,
          difference: newBalance - currentBalance,
        },
        operation_id: operationId,
      }
    } catch (paymentError) {
      logger.error('‚ùå [DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error creating payment (direct)',
        error:
          paymentError instanceof Error
            ? paymentError.message
            : String(paymentError),
        telegram_id,
        amount,
        type,
      })

      return {
        success: false,
        error:
          paymentError instanceof Error
            ? paymentError.message
            : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
        telegram_id: telegram_id.toString(),
        amount,
        type: type.toString(),
      }
    }
  } catch (error) {
    logger.error('‚ùå [DIRECT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ directPaymentProcessor', {
      description: 'Critical error in directPaymentProcessor',
      error: error instanceof Error ? error.message : String(error),
      params,
    })

    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
      telegram_id: params.telegram_id?.toString(),
      amount: params.amount,
      type: params.type?.toString(),
    }
  }
}
