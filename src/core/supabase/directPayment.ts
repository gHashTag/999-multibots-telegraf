import { v4 as uuidv4 } from 'uuid'

import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { TransactionType } from '@/interfaces/payments.interface'
import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import { invalidateBalanceCache } from '@/core/supabase/getUserBalance'

export interface DirectPaymentParams {
  telegram_id: string
  amount: number
  type: TransactionType
  description: string
  bot_name: string
  service_type: ModeEnum | string
  inv_id?: string // Optional invoice/operation ID
  bypass_payment_check?: boolean // Optional flag to bypass balance check
  metadata?: Record<string, any> // Optional metadata
}

export interface DirectPaymentResult {
  success: boolean
  payment_id?: number
  operation_id?: string
  error?: string
  balanceChange?: {
    before: number
    after: number
    difference: number
  }
}

/**
 * –ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Inngest.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
 */
export async function directPaymentProcessor(
  params: DirectPaymentParams
): Promise<DirectPaymentResult> {
  const {
    telegram_id,
    amount,
    type,
    description,
    bot_name,
    service_type,
    inv_id,
    bypass_payment_check = false,
    metadata = {},
  } = params

  const operationId = inv_id || uuidv4()
  const normalizedAmount = Number(amount)

  logger.info('üöÄ [DIRECT_PAYMENT] –ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
    description: 'Starting direct payment processing',
    telegram_id,
    amount: normalizedAmount,
    type,
    bot_name,
    service_type,
    operationId,
    bypass_payment_check,
  })

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã
    if (normalizedAmount <= 0) {
      throw new Error(
        `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${normalizedAmount}. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.`
      )
    }

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const currentBalance = await getUserBalance(telegram_id)
    logger.info('üí∞ [DIRECT_PAYMENT] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω', {
      description: 'Current balance retrieved',
      telegram_id,
      currentBalance,
    })

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É)
    if (
      type === TransactionType.MONEY_EXPENSE &&
      !bypass_payment_check &&
      currentBalance < normalizedAmount
    ) {
      const errorMessage = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${normalizedAmount}`
      logger.error('‚ö†Ô∏è [DIRECT_PAYMENT] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', {
        description: 'Insufficient funds',
        telegram_id,
        currentBalance,
        requiredAmount: normalizedAmount,
      })
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      return {
        success: false,
        error: errorMessage,
        operation_id: operationId,
      }
    } else if (type === TransactionType.MONEY_EXPENSE && bypass_payment_check) {
      logger.warn(
        'üîì [DIRECT_PAYMENT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–∂–∏–º bypass)',
        {
          description: 'Balance check skipped (bypass mode)',
          telegram_id,
          currentBalance,
          requiredAmount: normalizedAmount,
        }
      )
    }

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ (–ò–°–ü–û–õ–¨–ó–£–ï–ú createSuccessfulPayment)
    logger.info(
      'üí≥ [DIRECT_PAYMENT] –í—ã–∑–æ–≤ createSuccessfulPayment –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ',
      {
        description: 'Calling createSuccessfulPayment to record payment',
        telegram_id,
        amount: normalizedAmount,
        type,
        operationId,
      }
    )

    const paymentRecord = await createSuccessfulPayment({
      telegram_id: String(telegram_id),
      amount: normalizedAmount,
      stars: metadata.stars || normalizedAmount,
      type: type,
      description: description,
      bot_name: bot_name,
      service_type: String(service_type),
      payment_method: 'balance',
      status: 'COMPLETED',
      inv_id: operationId,
      metadata: { ...metadata, direct_payment: true },
    })

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ ID
    if (!paymentRecord || !paymentRecord.payment_id) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º payment_id
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–µ ID')
    }

    logger.info('‚úÖ [DIRECT_PAYMENT] –ó–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', {
      description: 'Payment record created successfully',
      payment_id: paymentRecord.payment_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º payment_id
      telegram_id,
    })

    // 5. –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞
    logger.info('üîÑ [DIRECT_PAYMENT] –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Invalidating balance cache',
      telegram_id,
    })
    await invalidateBalanceCache(String(telegram_id))

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ—Å–ª–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞)
    const newBalance = await getUserBalance(telegram_id)
    logger.info('üí∞ [DIRECT_PAYMENT] –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω', {
      description: 'New balance retrieved',
      telegram_id,
      newBalance,
    })

    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sendTransactionNotificationTest({
      telegram_id: Number(telegram_id),
      operationId: operationId,
      amount: normalizedAmount,
      currentBalance: currentBalance,
      newBalance: newBalance,
      description: description,
      isRu: metadata?.is_ru ?? true,
      bot_name: bot_name,
    }).catch(err => {
      logger.error(
        '‚ùå [DIRECT_PAYMENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        {
          description: 'Error sending transaction notification',
          error: err instanceof Error ? err.message : String(err),
          telegram_id,
          operationId,
        }
      )
    })

    logger.info(
      'üèÅ [DIRECT_PAYMENT] –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      {
        description: 'Direct payment processing completed successfully',
        telegram_id,
        payment_id: paymentRecord.payment_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º payment_id
        operationId,
        newBalance,
      }
    )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å payment_id
    return {
      success: true,
      payment_id: paymentRecord.payment_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º payment_id
      operation_id: operationId,
      balanceChange: {
        before: currentBalance,
        after: newBalance,
        difference: newBalance - currentBalance,
      },
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : 'Unknown direct payment error'
    logger.error(
      '‚ùå [DIRECT_PAYMENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
      {
        description: 'Critical error during direct payment processing',
        error: errorMessage,
        stack: error instanceof Error ? error.stack : undefined,
        telegram_id,
        operationId,
        params,
      }
    )
    return {
      success: false,
      error: errorMessage,
      operation_id: operationId,
    }
  }
}
