import { supabase } from '@/core/supabase'
import { Logger as logger } from '@/utils/logger'

export const getPaymentStatus = async (inv_id: string) => {
  try {
    logger.info({
      message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Checking payment status',
      inv_id,
    })

    const { data, error } = await supabase
      .from('payments_v2')
      .select('status, amount')
      .eq('inv_id', inv_id)
      .limit(1)

    if (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Error checking payment status',
        error: error.message,
        inv_id,
      })
      return null
    }

    if (!data || data.length === 0) {
      logger.info({
        message: '‚ùì –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Payment not found',
        inv_id,
      })
      return null
    }

    logger.info({
      message: '‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω',
      description: 'Payment status retrieved',
      inv_id,
      status: data[0].status,
      amount: data[0].amount,
    })

    return data[0]
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Error checking payment status',
      error: error instanceof Error ? error.message : String(error),
      inv_id,
    })
    return null
  }
}
