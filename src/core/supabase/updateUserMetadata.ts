import { supabase } from '.'
import { logger } from '@/utils/logger'
import { TelegramId, normalizeTelegramId } from '@/types/telegram.interface'

export interface UpdateUserMetadataParams {
  telegram_id: TelegramId
  metadata: Record<string, any>
}

export const updateUserMetadata = async ({
  telegram_id,
  metadata,
}: UpdateUserMetadataParams) => {
  try {
    if (!telegram_id) {
      throw new Error('telegram_id is required')
    }

    if (!metadata) {
      throw new Error('metadata is required')
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É
    const normalizedId = normalizeTelegramId(telegram_id)

    logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Updating user metadata',
      telegram_id: normalizedId,
      metadata,
    })

    const { data, error } = await supabase
      .from('users')
      .update({ metadata })
      .eq('telegram_id', normalizedId)
      .select()
      .single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', {
        description: 'Error updating metadata',
        error: error.message,
        telegram_id: normalizedId,
      })
      throw error
    }

    logger.info('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
      description: 'Metadata updated successfully',
      telegram_id: normalizedId,
      user: data,
    })

    return data
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserMetadata:', {
      description: 'Error in updateUserMetadata function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
    throw error
  }
}
