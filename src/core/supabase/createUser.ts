import { TelegramId } from '@/interfaces/telegram.interface';
import { supabase } from '.'
import { logger } from '@/utils/logger'
import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'

export interface CreateUserParams {
  telegram_id: TelegramId
  username?: string
  first_name?: string
  last_name?: string
  language_code?: string
  is_bot?: boolean
  photo_url?: string
  chat_id?: string
  mode?: string
  model?: string
  count?: number
  aspect_ratio?: string
  balance?: number
  bot_name?: string
  level?: number
}

export const createUser = async (userData: CreateUserParams) => {
  try {
    const {
      telegram_id,
      username,
      first_name,
      last_name,
      language_code = 'ru',
      is_bot = false,
      photo_url = '',
      chat_id,
      mode = 'clean',
      model = 'gpt-4-turbo',
      count = 0,
      aspect_ratio = '9:16',
      balance = 0,
      bot_name,
      level = 1,
    } = userData

    logger.info('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Creating new user',
      telegram_id,
    })

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É
    const normalizedTelegramId = normalizeTelegramId(telegram_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', normalizedTelegramId)
      .single()

    if (checkError && checkError.code !== 'PGRST116') {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error checking existing user',
        error: checkError.message,
        telegram_id: normalizedTelegramId,
      })
      throw checkError
    }

    if (existingUser) {
      logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', {
        description: 'User already exists',
        telegram_id: normalizedTelegramId,
      })
      return existingUser
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert([
        {
          telegram_id: normalizedTelegramId,
          username,
          first_name,
          last_name,
          language_code,
          is_bot,
          photo_url,
          chat_id: chat_id || normalizedTelegramId,
          mode,
          model,
          count,
          aspect_ratio,
          balance,
          bot_name,
          level,
        },
      ])

    if (createError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error creating user',
        error: createError.message,
        telegram_id: normalizedTelegramId,
      })
      throw createError
    }

    logger.info('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
      description: 'User created successfully',
      telegram_id: normalizedTelegramId,
    })

    return newUser
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ createUser:', {
      description: 'Error in createUser function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: userData.telegram_id,
    })
    throw error
  }
}
