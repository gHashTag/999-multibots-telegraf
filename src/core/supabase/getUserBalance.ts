import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'

interface BalanceResult {
  total_balance: number
  income: number
  outcome: number
  commission: number
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ç–∞–±–ª–∏—Ü—ã users
 * @param telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param bot_name - –ò–º—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export const getUserBalance = async (
  telegram_id: string | number,
  bot_name: string
): Promise<number> => {
  try {
    const normalizedId = normalizeTelegramId(telegram_id)

    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Getting user balance',
      telegram_id: normalizedId,
      bot_name,
    })

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', normalizedId)
      .single()

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error getting user data',
        error: userError,
        telegram_id: normalizedId,
      })
      throw userError
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –±–∞–ª–∞–Ω—Å
    if (userData) {
      logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users:', {
        description: 'Balance retrieved from users table',
        telegram_id: normalizedId,
        balance: userData.balance,
      })
      return userData.balance
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: transactionData, error: transactionError } =
      await supabase.rpc('calculate_user_balance', {
        p_telegram_id: normalizedId,
        p_bot_name: bot_name,
      })

    if (transactionError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error calculating balance',
        error: transactionError,
        telegram_id: normalizedId,
      })
      throw transactionError
    }

    const balance = transactionData?.[0] as BalanceResult

    if (!balance) {
      logger.info('‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
        description: 'No transactions found',
        telegram_id: normalizedId,
      })
      return 0
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
      description: 'Balance calculated from transactions',
      telegram_id: normalizedId,
      total_balance: balance.total_balance,
      income: balance.income,
      outcome: balance.outcome,
      commission: balance.commission,
    })

    return balance.total_balance
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserBalance:', {
      description: 'Error in getUserBalance function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: normalizeTelegramId(telegram_id),
    })
    throw error
  }
}
