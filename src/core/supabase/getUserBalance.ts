import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'
import { supabase } from './index'
import { logger } from '@/utils/logger'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param bot_name - –ò–º—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export const getUserBalance = async (
  telegram_id: TelegramId,
  bot_name?: string
): Promise<number | null> => {
  try {
    if (!telegram_id) {
      throw new Error('telegram_id is required')
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É
    const normalizedId = normalizeTelegramId(telegram_id)

    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Getting user balance',
      telegram_id: normalizedId,
      bot_name,
    })

    let query = supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', normalizedId)

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω bot_name, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —É—Å–ª–æ–≤–∏–µ
    if (bot_name) {
      query = query.eq('bot_name', bot_name)
    }

    const { data: user, error } = await query.single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error getting balance',
        error: error.message,
        telegram_id: normalizedId,
        bot_name,
      })
      throw error
    }

    if (!user) {
      logger.info('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found',
        telegram_id: normalizedId,
        bot_name,
      })
      return 0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', {
      description: 'Balance retrieved successfully',
      telegram_id: normalizedId,
      balance: user.balance,
      bot_name,
    })

    return user.balance
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserBalance:', {
      description: 'Error in getUserBalance function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      bot_name,
    })
    throw error
  }
}
