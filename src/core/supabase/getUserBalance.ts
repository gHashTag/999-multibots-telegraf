import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'

interface BalanceResult {
  total_balance: string
  income: string
  outcome: string
  commission: string
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
 * @param telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param bot_name - –ò–º—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export const getUserBalance = async (
  telegram_id: string | number,
  bot_name: string
): Promise<number> => {
  try {
    const normalizedId = normalizeTelegramId(telegram_id)

    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Getting user balance',
      telegram_id: normalizedId,
      bot_name,
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const numericId = parseInt(normalizedId, 10)
    if (isNaN(numericId)) {
      logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id:', {
        description: 'Invalid telegram_id format',
        telegram_id: normalizedId,
      })
      return 0
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
    const { data: balanceData, error: balanceError } = await supabase.rpc(
      'calculate_user_balance',
      {
        p_telegram_id: numericId,
        p_bot_name: bot_name,
      }
    )

    if (balanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error calculating balance',
        error: balanceError,
        telegram_id: normalizedId,
      })
      return 0
    }

    const balance = balanceData?.[0] as BalanceResult

    if (!balance) {
      logger.info('‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
        description: 'No transactions found',
        telegram_id: normalizedId,
      })
      return 0
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞
    const totalBalance = parseFloat(balance.total_balance)
    const income = parseFloat(balance.income)
    const outcome = parseFloat(balance.outcome)
    const commission = parseFloat(balance.commission)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if (isNaN(totalBalance)) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error converting balance to number',
        telegram_id: normalizedId,
        raw_balance: balance.total_balance,
      })
      return 0
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
      description: 'Balance calculated from transactions',
      telegram_id: normalizedId,
      total_balance: totalBalance,
      income: income,
      outcome: outcome,
      commission: commission,
    })

    return totalBalance
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserBalance:', {
      description: 'Error in getUserBalance function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: normalizeTelegramId(telegram_id),
    })
    return 0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
  }
}
