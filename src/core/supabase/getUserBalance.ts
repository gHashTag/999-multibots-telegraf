import { supabase } from './index'
import { logger } from '@/utils/logger'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Ç–µ–º –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ payments
 * –°—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö income –º–∏–Ω—É—Å —Å—É–º–º—É –≤—Å–µ—Ö outcome
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ —á–∏—Å–ª–æ (–±–∞–ª–∞–Ω—Å), –ª–∏–±–æ 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export const getUserBalance = async (
  telegram_id: number | string
): Promise<number> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å telegram_id
    if (!telegram_id) {
      logger.error('‚ùå –ü—É—Å—Ç–æ–π telegram_id –≤ getUserBalance:', {
        description: 'Empty telegram_id in getUserBalance',
        telegram_id,
      })
      return 0
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    const id =
      typeof telegram_id === 'number' ? telegram_id.toString() : telegram_id

    logger.info('üîç –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments:', {
      description: 'Calculating user balance from payments table',
      telegram_id: id,
      telegram_id_type: typeof id,
    })

    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const { data: rpcBalance, error: rpcError } = await supabase.rpc(
      'get_user_balance',
      { user_telegram_id: Number(id) }
    )

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ RPC-–∑–∞–ø—Ä–æ—Å–∞
    logger.info('üîé –†–µ–∑—É–ª—å—Ç–∞—Ç RPC-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
      description: 'RPC balance request result details',
      telegram_id: id,
      rpcBalance,
      rpcBalanceType: typeof rpcBalance,
      rpcBalanceIsNull: rpcBalance === null,
      hasError: !!rpcError,
      errorMessage: rpcError ? rpcError.message : undefined,
    })

    if (!rpcError && rpcBalance !== null) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      let safeBalance
      try {
        safeBalance = Number(rpcBalance)
        if (isNaN(safeBalance)) {
          logger.warn('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç RPC –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ NaN:', {
            description: 'RPC result converted to NaN',
            telegram_id: id,
            raw_balance: rpcBalance,
          })
          safeBalance = 0
        }
      } catch (conversionError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ RPC:', {
          description: 'Error converting RPC result',
          telegram_id: id,
          raw_balance: rpcBalance,
          error:
            conversionError instanceof Error
              ? conversionError.message
              : 'Unknown error',
        })
        safeBalance = 0
      }

      logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ RPC-—Ñ—É–Ω–∫—Ü–∏—é:', {
        description: 'Balance obtained via RPC function',
        telegram_id: id,
        balance: safeBalance,
        raw_balance: rpcBalance,
        balance_type: typeof safeBalance,
      })
      return safeBalance
    }

    if (rpcError) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ RPC-—Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥:', {
        description: 'RPC function error, using fallback method',
        telegram_id: id,
        error: rpcError.message,
      })
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, error } = await supabase
      .from('payments')
      .select('amount, type')
      .eq('telegram_id', id)
      .eq('status', 'COMPLETED')

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', {
        description: 'Error fetching user payments',
        error: error.message,
        telegram_id: id,
      })
      return 0
    }

    if (!data || data.length === 0) {
      logger.info('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
        description: 'No payments found for user',
        telegram_id: id,
      })
      return 0
    }

    // –°—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å: —Å—É–º–º–∞ –≤—Å–µ—Ö income –º–∏–Ω—É—Å —Å—É–º–º–∞ –≤—Å–µ—Ö outcome
    let balance = 0

    for (const payment of data) {
      const amount = payment.amount ? Number(payment.amount) : 0

      if (isNaN(amount)) {
        logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
          description: 'Invalid payment amount',
          payment,
          telegram_id: id,
        })
        continue
      }

      if (payment.type === 'income') {
        balance += amount
      } else if (payment.type === 'outcome') {
        balance -= amount
      }
    }

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    balance = parseFloat(balance.toFixed(2))

    logger.info('üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π:', {
      description: 'User balance calculated from payments',
      telegram_id: id,
      balance,
      payments_count: data.length,
    })

    return balance
  } catch (err) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserBalance:', {
      description: 'Exception in getUserBalance',
      error: err instanceof Error ? err.message : 'Unknown error',
      stack: err instanceof Error ? err.stack : undefined,
      telegram_id,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return 0
  }
}
