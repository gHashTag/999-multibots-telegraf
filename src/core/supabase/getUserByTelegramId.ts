import { MyContext } from '@/interfaces'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É Telegram
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
 * 1. –û–±—ä–µ–∫—Ç MyContext (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞)
 * 2. –°—Ç—Ä–æ–∫–æ–≤—ã–π telegram_id (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö Inngest)
 */
export async function getUserByTelegramId(ctxOrId: MyContext | string) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ ID
    let telegramId: string
    let botName: string | null = null

    if (typeof ctxOrId === 'string') {
      telegramId = ctxOrId
      logger.info({
        message: 'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID',
        description: 'Getting user by string ID',
        telegramId,
      })

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      if (
        process.env.NODE_ENV === 'test' ||
        process.env.IS_TESTING === 'true'
      ) {
        logger.info({
          message: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
          description: 'Test mode detected, returning mock user',
          telegramId,
        })

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
          id: 'test-user-id',
          telegram_id: telegramId,
          username: 'test_user',
          level: 2,
          balance: 1000,
          bot_name: 'neuro_blogger_bot',
          created_at: new Date().toISOString(),
          voice_id: 'test-voice-id',
          fine_tune_id: 'test-finetune-id',
          aspect_ratio: '1:1',
        }
      }
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      telegramId = normalizeTelegramId(ctxOrId.from?.id || '')
      botName = ctxOrId.botInfo?.username || null
      logger.info({
        message: 'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
        description: 'Getting user from context',
        telegramId,
        botName,
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single()

    if (error) {
      logger.error({
        message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        description: 'User not registered',
        telegramId,
        error: error.message,
      })
      return null
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –∏–º–µ–Ω–∏
    if (botName && data.bot_name !== botName) {
      logger.info({
        message: 'üîÑ –ò–º—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º...',
        description: 'Bot name changed, updating',
        oldBotName: data.bot_name,
        newBotName: botName,
        telegramId,
      })

      const { error: updateError } = await supabase
        .from('users')
        .update({ bot_name: botName })
        .eq('telegram_id', telegramId)

      if (updateError) {
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞',
          description: 'Error updating bot name',
          error: updateError.message,
          telegramId,
        })
      } else {
        logger.info({
          message: '‚úÖ –ò–º—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
          description: 'Bot name updated successfully',
          telegramId,
          botName,
        })
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        data.bot_name = botName
      }
    }

    logger.info({
      message: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
      description: 'User found in database',
      userId: data.id,
      telegramId,
    })

    return data
  } catch (error) {
    logger.error({
      message: '‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      description: 'Unexpected error fetching user by Telegram ID',
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : null,
    })
    return null
  }
}
