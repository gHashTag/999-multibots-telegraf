import { supabase } from './'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç Supabase


/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã avatars
 * @param botName –ò–º—è –±–æ—Ç–∞
 * @returns –ì—Ä—É–ø–ø–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
export const getGroupByBotName = async (botName: string): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from('avatars')
      .select('group')
      .eq('bot_name', botName)
      .single();
    
    if (error) {
      console.error(`üö® –û—à–∏–±–∫–∞ Supabase: ${error.message}`);
      return null;
    }
    
    if (!data || !data.group) {
      console.log(`‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞: ${botName}`);
      return null;
    }
    
    return data.group;
  } catch (error) {
    console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: ${error}`);
    return null;
  }
}