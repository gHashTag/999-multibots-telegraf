import { supabase } from '.'
import { logger } from '@/utils/logger'
import { Payment, TransactionType } from '@/interfaces/payments.interface'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ inv_id
 */
export async function getPaymentByInvId(inv_id: string): Promise<Payment | null> {
  try {
    logger.info({
      message: 'üîç –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ inv_id',
      description: 'Looking up payment by inv_id',
      inv_id,
    })

    const { data: payment, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('inv_id', inv_id)
      .single()

    if (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
        description: 'Error looking up payment',
        error,
        inv_id,
      })
      return null
    }

    if (!payment) {
      logger.info({
        message: '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Payment not found',
        inv_id,
      })
      return null
    }

    logger.info({
      message: '‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω',
      description: 'Payment found',
      payment,
    })

    return payment as Payment
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
      description: 'Error looking up payment',
      error,
      inv_id,
    })
    return null
  }
}
