import { supabase } from '.'
import { logger } from '@/utils/logger'

export interface Payment {
  payment_id: number
  telegram_id: string
  amount: number
  stars: number
  status: string
  payment_method: string
  description: string
  metadata: any
  currency: string
  subscription: string
  bot_name: string
  language: string
  inv_id: string
  email?: string
  payment_date?: Date
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º—ã (inv_id)
 */
export const getPaymentByInvId = async (invId: string) => {
  try {
    logger.info('üîç –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ inv_id:', {
      description: 'Finding payment by inv_id',
      inv_id: invId,
    })

    const { data, error } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('inv_id', invId)
      .single()

    if (error && error.code !== 'PGRST116') {
      // PGRST116 - —ç—Ç–æ –∫–æ–¥ –æ—à–∏–±–∫–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –µ–≥–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error finding payment',
        error: error.message,
        error_details: error,
        inv_id: invId,
      })
      return null
    }

    if (!data) {
      logger.info('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'Payment not found',
        inv_id: invId,
      })
      return null
    }

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω:', {
      description: 'Payment found',
      payment_id: data.payment_id,
      inv_id: invId,
      amount: data.amount,
      status: data.status,
    })

    return data
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPaymentByInvId:', {
      description: 'Error in getPaymentByInvId function',
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      inv_id: invId,
    })
    return null
  }
}
