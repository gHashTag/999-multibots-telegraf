import { TelegramId } from '@/interfaces/telegram.interface'
import { supabase } from './index'
import { logger } from '@/utils/logger'
import { TransactionType } from '@/interfaces/payments.interface'

interface UpdateUserBalanceParams {
  telegram_id: TelegramId
  amount: number
  type: TransactionType
  description: string
  bot_name: string
  service_type?: string
  payment_method?: string
  metadata?: Record<string, any>
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–∞—Ç–µ–∂–µ–π payments_v2
 * –ë–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ SQL-—Ñ—É–Ω–∫—Ü–∏—é get_user_balance
 */
export const updateUserBalance = async ({
  telegram_id,
  amount,
  type,
  description,
  bot_name,
  service_type = 'default',
  metadata = {},
}: UpdateUserBalanceParams): Promise<{
  success: boolean
  error?: any
}> => {
  try {
    logger.info('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
      description: 'Creating payment record',
      telegram_id,
      amount,
      type,
      operation_description: description,
      metadata,
      bot_name,
      payment_method: 'system',
      service_type,
    })

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –∫ BIGINT –∏ amount –∫ numeric
    const normalizedTelegramId = String(telegram_id)
    const normalizedAmount = Number(amount)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_balance
    const { data: currentBalance, error: balanceError } = await supabase.rpc(
      'get_user_balance',
      {
        user_telegram_id: normalizedTelegramId,
      }
    )

    if (balanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error getting user balance',
        error: balanceError.message,
        error_details: balanceError,
        telegram_id: normalizedTelegramId,
      })
      return { success: false, error: balanceError }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID
    const { data: userData } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', normalizedTelegramId)
      .single()

    let userId: number

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!userData) {
      logger.info('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Creating new user',
        telegram_id: normalizedTelegramId,
      })

      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert({
          telegram_id: normalizedTelegramId,
          bot_name: bot_name,
          last_payment_date: new Date().toISOString(),
        })
        .select('id')
        .single()

      if (createError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Error creating user',
          error: createError.message,
          error_details: createError,
          telegram_id: normalizedTelegramId,
        })
        return { success: false, error: createError }
      }

      userId = newUser.id
    } else {
      userId = userData.id
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏
    if (
      type === TransactionType.MONEY_EXPENSE &&
      currentBalance < Math.abs(normalizedAmount)
    ) {
      const errorMessage = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${Math.abs(
        normalizedAmount
      )}`
      logger.error('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
        description: 'Insufficient funds',
        current_balance: currentBalance,
        required_amount: Math.abs(normalizedAmount),
        telegram_id: normalizedTelegramId,
      })

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è
      await supabase.from('payments_v2').insert({
        payment_date: new Date().toISOString(),
        amount: normalizedAmount,
        status: 'FAILED',
        payment_method: 'system',
        description: `${description} (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)`,
        metadata: {
          type: 'system_deduction_failed',
          error: 'insufficient_funds',
          current_balance: currentBalance,
          requested_stars: normalizedAmount,
          service_type: service_type,
          user_id: userId,
        },
        stars: normalizedAmount,
        telegram_id: normalizedTelegramId,
        currency: 'STARS',
        bot_name: bot_name,
        language: 'ru',
        type: type,
      })

      return {
        success: false,
        error: new Error(errorMessage),
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é –ø–ª–∞—Ç–µ–∂–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ payments_v2 –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    if (metadata && metadata.payment_id) {
      logger.info(
        '‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π:',
        {
          description:
            'Main payment record exists, skipping system record creation',
          telegram_id: normalizedTelegramId,
          payment_id: metadata.payment_id,
          amount: normalizedAmount,
        }
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º last_payment_date —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .update({
          last_payment_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        })
        .eq('telegram_id', normalizedTelegramId)

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const { data: updatedBalance, error: updatedBalanceError } =
        await supabase.rpc('get_user_balance', {
          user_telegram_id: normalizedTelegramId,
        })

      if (updatedBalanceError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Error getting updated balance',
          error: updatedBalanceError.message,
          telegram_id: normalizedTelegramId,
        })
        return { success: false, error: updatedBalanceError }
      }

      logger.info('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±–Ω–æ–≤–∏–ª–∏ –±–∞–ª–∞–Ω—Å:', {
        description: 'Transaction already processed, updated balance',
        telegram_id: normalizedTelegramId,
        old_balance: currentBalance,
        new_balance: updatedBalance,
        amount: normalizedAmount,
      })

      return {
        success: true,
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    const { data: paymentData, error: paymentError } = await supabase
      .from('payments_v2')
      .insert({
        payment_date: new Date().toISOString(),
        amount: normalizedAmount,
        status: 'COMPLETED',
        payment_method: 'system',
        description: description,
        metadata: {
          type: normalizedAmount >= 0 ? 'system_add' : 'system_deduction',
          current_balance: currentBalance,
          stars_change: normalizedAmount,
          service_type: service_type,
          user_id: userId,
        },
        stars: normalizedAmount,
        telegram_id: normalizedTelegramId,
        currency: 'STARS',
        bot_name: bot_name,
        language: 'ru',
        type: type,
      })
      .select('payment_id')
      .single()

    if (paymentError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error creating payment record',
        error: paymentError.message,
        error_details: paymentError,
        telegram_id: normalizedTelegramId,
      })
      return { success: false, error: paymentError }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º last_payment_date —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase
      .from('users')
      .update({
        last_payment_date: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq('telegram_id', normalizedTelegramId)

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const { data: newBalance, error: newBalanceError } = await supabase.rpc(
      'get_user_balance',
      {
        user_telegram_id: normalizedTelegramId,
      }
    )

    if (newBalanceError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error getting new user balance',
        error: newBalanceError.message,
        error_details: newBalanceError,
        telegram_id: normalizedTelegramId,
      })
      return { success: false, error: newBalanceError }
    }

    logger.info('‚úÖ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      description: 'Payment record created successfully',
      telegram_id: normalizedTelegramId,
      payment_id: paymentData.payment_id,
      old_balance: currentBalance,
      new_balance: newBalance,
      amount: normalizedAmount,
      type,
      bot_name,
    })

    return {
      success: true,
    }
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
      description: 'Critical error creating payment record',
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      telegram_id,
      amount,
      type,
      bot_name,
    })
    return { success: false, error }
  }
}
