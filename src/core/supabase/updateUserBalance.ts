import { supabase } from './index'
import { logger } from '@/utils/logger'
import { getUserBalance } from './getUserBalance'

interface UpdateUserBalanceParams {
  telegram_id: string | number
  amount: number
  type: 'income' | 'outcome'
  operation_description?: string
  metadata?: Record<string, any>
  bot_name?: string
  payment_method?: string
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å—ã–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É payments
 * –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const updateUserBalance = async ({
  telegram_id,
  amount,
  type,
  operation_description = '',
  metadata = {},
  bot_name,
  payment_method = 'System',
}: UpdateUserBalanceParams): Promise<{
  success: boolean
  newBalance: number | null
}> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω
    if (!telegram_id) {
      logger.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'User ID not specified',
        telegram_id,
      })
      return { success: false, newBalance: null }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info('üîç –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ updateUserBalance:', {
      log_description: 'Input parameters for updateUserBalance',
      telegram_id,
      amount,
      amount_type: typeof amount,
      type,
      operation_description,
      metadata: JSON.stringify(metadata),
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
    // –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞ - –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
    let operationAmount = amount

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è outcome) –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (type === 'outcome' && amount > 100) {
      // –í–µ—Ä–æ—è—Ç–Ω–æ, –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
      logger.warn(
        '‚ö†Ô∏è ‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5:',
        {
          description:
            'Cannot determine operation amount, setting default value of 5',
          telegram_id,
          original_amount: amount,
        }
      )

      operationAmount = 5 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è outcome-–æ–ø–µ—Ä–∞—Ü–∏–∏
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentBalance = await getUserBalance(telegram_id, bot_name)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const inv_id = `${Date.now()}-${Math.floor(
      Math.random() * 1000000
    )}-${String(telegram_id).substring(0, 5)}`

    logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Creating new transaction record',
      telegram_id,
      inv_id,
      transaction_amount: operationAmount,
      type,
    })

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ payments
    const { data, error } = await supabase
      .from('payments')
      .insert([
        {
          telegram_id,
          amount: operationAmount,
          stars: operationAmount,
          inv_id,
          type,
          status: 'COMPLETED',
          description: operation_description || `${type} operation`,
          metadata,
          payment_method,
          bot_name,
        },
      ])
      .select()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ payments:', {
        description: 'Error creating payment record',
        error: error.message,
        telegram_id,
        operationAmount,
        type,
        inv_id,
      })
      return { success: false, newBalance: null }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const newBalance = await getUserBalance(telegram_id, bot_name)

    logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
      description: 'Balance update result',
      telegram_id,
      operationAmount,
      type,
      inv_id,
      newBalance,
      payment_record: data && data.length > 0 ? data[0] : null,
    })

    return { success: true, newBalance }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Error updating user balance',
      telegram_id,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return { success: false, newBalance: null }
  }
}
