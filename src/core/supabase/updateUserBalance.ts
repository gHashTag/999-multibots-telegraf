import { supabase } from './index'
import { logger } from '@/utils/logger'

type PaymentService =
  | 'NeuroPhoto'
  | 'Text to speech'
  | 'Image to video'
  | 'Training'
  | 'Refund'
  | 'System'
  | 'Telegram'

type BalanceUpdateMetadata = {
  stars?: number
  payment_method?: PaymentService
  bot_name?: string
  language?: string
  service_type?: PaymentService
  [key: string]: any
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
export const updateUserBalance = async (
  telegram_id: string,
  amount: number,
  type: 'income' | 'outcome',
  description?: string,
  metadata?: BalanceUpdateMetadata
): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegram_id) {
      logger.error('‚ùå –ü—É—Å—Ç–æ–π telegram_id –≤ updateUserBalance:', {
        description: 'Empty telegram_id in updateUserBalance',
        telegram_id,
      })
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (amount === undefined || amount === null || isNaN(Number(amount))) {
      logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
        description: 'Invalid operation amount',
        amount,
        telegram_id,
      })
      return false
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ
    let safeAmount = Number(amount)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ NaN, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    if (isNaN(safeAmount)) {
      logger.warn(
        '‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ NaN, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º—É –≤ 0',
        {
          description: 'Got NaN after conversion, setting amount to 0',
          telegram_id,
          original_value: amount,
        }
      )
      safeAmount = 0
    }

    logger.info('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Creating transaction record',
      telegram_id,
      amount: safeAmount,
      type,
      bot_name: metadata?.bot_name || 'system',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', telegram_id)
      .single()

    if (userError) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        description: 'User not found during transaction creation',
        telegram_id,
        error: userError.message,
      })
      return false
    }

    if (!userData) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö):', {
        description: 'User not found (no data)',
        telegram_id,
      })
      return false
    }

    // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
    const invId = `${Date.now()}-${Math.floor(
      Math.random() * 1000000
    )}-${telegram_id.substring(0, 5)}`

    logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Creating transaction record',
      telegram_id,
      inv_id: invId,
      amount: Math.abs(safeAmount),
      type,
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { error: paymentError } = await supabase.from('payments').insert({
      telegram_id,
      inv_id: invId,
      currency: 'STARS',
      amount: parseFloat(Math.abs(safeAmount).toFixed(2)),
      status: 'COMPLETED',
      stars: parseFloat(Math.abs(safeAmount).toFixed(2)) || 0,
      type,
      description: description || `Balance ${type}`,
      payment_method: metadata?.payment_method,
      bot_name: metadata?.bot_name || 'neuro_blogger_bot',
      language: metadata?.language || 'ru',
    })

    if (paymentError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        description: 'Error creating transaction record',
        telegram_id,
        error: paymentError.message,
      })
      return false
    }

    logger.info('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
      description: 'Transaction successfully created',
      telegram_id,
      amount: safeAmount,
      type,
    })

    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Unexpected error creating transaction',
      telegram_id,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return false
  }
}
