import {
  TelegramId,
  normalizeTelegramId,
} from '@/interfaces/telegram.interface'
import { supabase } from './index'
import { logger } from '@/utils/logger'

interface UpdateUserBalanceParams {
  telegram_id: TelegramId
  amount: number
  type: 'money_income' | 'money_expense'
  operation_description?: string
  metadata?: Record<string, any>
  bot_name?: string
  payment_method?: string
  bot_name: string
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å—ã–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É payments_v2
 * –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const updateUserBalance = async ({
  telegram_id,
  amount,
  type,
  operation_description = '',
  metadata = {},
  bot_name,
  payment_method = 'System',
}: UpdateUserBalanceParams): Promise<{
  success: boolean
  newBalance: number | null
  error?: string
}> => {
}: UpdateUserBalanceParams): Promise<number | null> => {
  try {
    if (!telegram_id) {
      throw new Error('telegram_id is required')
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É
    const normalizedId = normalizeTelegramId(telegram_id)

    logger.info('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Updating user balance',
      telegram_id: normalizedId,
      amount,
      type,
      operation_description,
      metadata,
      bot_name,
      payment_method,
    })

    const { data: result, error } = await supabase.rpc('update_user_balance', {
      p_telegram_id: normalizedId,
      p_amount: amount,
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error updating balance',
        error: error.message,
        telegram_id: normalizedId,
        amount,
        type,
        operation_description,
        metadata,
        bot_name,
        payment_method,
        operation_id,
        metadata: {
          ...metadata,
        },
      },
    })

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000))

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const newBalance = await getUserBalance(telegram_id, bot_name)

    if (!newBalance) {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
        description: 'Failed to get updated balance',
        telegram_id,
      })
      throw error
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      description: 'Balance updated successfully',
      telegram_id: normalizedId,
      new_balance: result,
      type,
      operation_description,
      metadata,
      bot_name,
      payment_method,
    })

    return { success: true, newBalance: result }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserBalance:', {
      description: 'Error in updateUserBalance function',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      type,
      operation_description,
      metadata,
      bot_name,
      payment_method,
    })
    return {
      success: false,
      newBalance: null,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}
