/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ Supabase
 */
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { Task, TaskStatus, TaskType } from '@/core/mcp/agent/state'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 */
export interface GetNextTaskParams {
  telegram_id: string | number
  bot_name: string
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ Supabase
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 * @returns –ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
 */
export async function getNextTask(
  params: GetNextTaskParams
): Promise<Task | null> {
  try {
    logger.info('üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Supabase', {
      telegram_id: params.telegram_id,
      bot_name: params.bot_name,
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    const telegram_id =
      typeof params.telegram_id === 'string'
        ? parseInt(params.telegram_id, 10)
        : params.telegram_id

    // –í—ã–∑—ã–≤–∞–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
    const { data, error } = await supabase.rpc('get_next_task', {
      p_telegram_id: telegram_id,
      p_bot_name: params.bot_name,
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ Supabase', {
        error: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
        params,
      })
      return null
    }

    if (!data) {
      logger.info('‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
        telegram_id: params.telegram_id,
        bot_name: params.bot_name,
      })
      return null
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Task
    const task: Task = {
      id: data.external_id || data.id,
      type: data.type as TaskType,
      description: data.description,
      status: data.status as TaskStatus,
      priority: data.priority,
      created: new Date(data.created_at),
      updated: new Date(data.updated_at),
      dependencies: Array.isArray(data.dependencies) ? data.dependencies : [],
      metadata: data.metadata || {},
      parentTaskId: data.parent_task_id || undefined,
      isSubtask: data.is_subtask || false,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      _originalId: data.id,
    }

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      task_id: task.id,
      type: task.type,
      priority: task.priority,
    })

    return task
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      params,
    })
    return null
  }
}
