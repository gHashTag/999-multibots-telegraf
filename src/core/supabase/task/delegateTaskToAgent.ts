/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É –≤ Supabase
 */
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { TaskStatus } from '@/core/mcp/agent/state'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É
 */
export interface DelegateTaskParams {
  task_id: string
  agent_id: string
}

/**
 * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "PROCESSING" –≤ Supabase
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @returns true, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –∏–Ω–∞—á–µ false
 */
export async function delegateTaskToAgent(
  params: DelegateTaskParams
): Promise<boolean> {
  try {
    logger.info('üîÑ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É –≤ Supabase', {
      task_id: params.task_id,
      agent_id: params.agent_id,
    })

    // –í—ã–∑—ã–≤–∞–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É
    const { data, error } = await supabase.rpc('delegate_task_to_agent', {
      p_task_id: params.task_id,
      p_agent_id: params.agent_id,
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É –≤ Supabase', {
        error: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
        params,
      })
      return false
    }

    if (!data) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
        task_id: params.task_id,
        agent_id: params.agent_id,
      })
      return false
    }

    logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É', {
      task_id: params.task_id,
      agent_id: params.agent_id,
      status: TaskStatus.PROCESSING,
    })

    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      params,
    })
    return false
  }
}
