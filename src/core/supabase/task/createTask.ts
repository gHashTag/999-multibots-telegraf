/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ Supabase
 */
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { TaskType } from '@/core/mcp/agent/state'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export interface CreateTaskParams {
  telegram_id: string | number
  bot_name: string
  type: TaskType
  description: string
  priority?: number
  metadata?: Record<string, any>
  external_id?: string
  parent_task_id?: string
  is_subtask?: boolean
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Supabase
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏
 * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function createTask(
  params: CreateTaskParams
): Promise<string | null> {
  try {
    logger.info('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ Supabase', {
      telegram_id: params.telegram_id,
      bot_name: params.bot_name,
      type: params.type,
      description: params.description.substring(0, 50) + '...',
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    const telegram_id =
      typeof params.telegram_id === 'string'
        ? parseInt(params.telegram_id, 10)
        : params.telegram_id

    // –í—ã–∑—ã–≤–∞–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    const { data, error } = await supabase.rpc('create_task', {
      p_telegram_id: telegram_id,
      p_bot_name: params.bot_name,
      p_type: params.type,
      p_description: params.description,
      p_priority: params.priority || 1,
      p_metadata: params.metadata || {},
      p_external_id: params.external_id || null,
      p_parent_task_id: params.parent_task_id || null,
      p_is_subtask: params.is_subtask || false,
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Supabase', {
        error: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
        params,
      })
      return null
    }

    logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase', { task_id: data })
    return data
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      params,
    })
    return null
  }
}
