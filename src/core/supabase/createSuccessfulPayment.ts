import { TelegramId } from '@/interfaces/telegram.interface'
import { PaymentStatus, Currency } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { getSubscriptionTypeByAmount } from '@/price/constants/index'
import { ADMIN_IDS_ARRAY } from '@/config'

import { supabase } from '@/core/supabase'
import { getUserByTelegramIdString } from '@/core/supabase'
import { normalizeTransactionType } from '@/utils/service.utils'
import {
  CreatePaymentV2Schema,
  type PaymentV2,
  type CreatePaymentV2,
  PaymentV2Schema as ZodPaymentV2Schema,
} from '@/interfaces/zod/payment.zod'
import { z } from 'zod'

interface CreateSuccessfulPaymentParams {
  telegram_id: TelegramId
  amount: number
  type: string
  description: string
  bot_name: string
  service_type?: string
  model_name?: string // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (kling_video, haiper_video, neuro_photo –∏ —Ç.–¥.)
  payment_method?: string
  metadata?: Record<string, any>
  inv_id: string
  stars?: number
  status?: PaymentStatus
  currency?: Currency
  invoice_url?: string
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–∏—Å—Ç–µ–º–µ
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 */
export async function createSuccessfulPayment({
  telegram_id,
  amount,
  type,
  description,
  service_type,
  model_name,
  stars,
  payment_method = 'Telegram',
  bot_name,
  metadata = {},
  status = PaymentStatus.COMPLETED,
  inv_id,
  currency = Currency.XTR,
  invoice_url,
}: CreateSuccessfulPaymentParams): Promise<PaymentV2 | null> {
  try {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω inv_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º ID
    if (inv_id) {
      const { data: existingPayment, error: existingPaymentError } =
        await supabase
          .from('payments_v2')
          .select('id, inv_id')
          .eq('inv_id', inv_id)
          .maybeSingle()

      if (existingPaymentError) {
        logger.error(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ inv_id:',
          { inv_id, error: existingPaymentError }
        )
        return null
      }

      if (existingPayment) {
        logger.info('üîÑ [–î–£–ë–õ–ò–ö–ê–¢]: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞—Ç–µ–∂ —Å —Ç–µ–º –∂–µ inv_id:', {
          description:
            'Attempt to create payment with existing inv_id (duplicate prevented)',
          inv_id,
          existing_payment_id: existingPayment.id,
        })

        const { data: paymentData, error: paymentError } = await supabase
          .from('payments_v2')
          .select('*')
          .eq('id', existingPayment.id)
          .single()

        if (paymentError) {
          logger.error(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:',
            { id: existingPayment.id, error: paymentError }
          )
          return null
        }
        if (!paymentData) {
          logger.warn(
            '‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ inv_id',
            { id: existingPayment.id }
          )
          return null
        }

        try {
          const validatedExistingPayment = ZodPaymentV2Schema.parse(paymentData)
          logger.info(
            '‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞:',
            {
              description:
                'Returning existing validated payment instead of creating duplicate',
              payment_id: validatedExistingPayment.inv_id,
            }
          )
          return validatedExistingPayment as PaymentV2
        } catch (validationError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ Zod-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Zod validation failed for existing payment data',
            errors:
              validationError instanceof z.ZodError
                ? validationError.errors
                : validationError,
            payment_id: existingPayment.id,
            rawData: paymentData,
          })
          return null
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const user = await getUserByTelegramIdString(telegram_id)
    if (!user) {
      throw new Error(`User not found for telegram_id: ${telegram_id}`)
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
    const normalizedType = normalizeTransactionType(type)

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –∫ —Å—Ç—Ä–æ–∫–µ
    const telegramIdStr = String(telegram_id)

    const numericAmount = Number(amount)
    const numericStars = stars !== undefined ? Number(stars) : numericAmount

    // ---> –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –î–õ–Ø –¢–ï–°–¢–û–í–´–• –ü–õ–ê–¢–ï–ñ–ï–ô –ê–î–ú–ò–ù–û–í <---
    let finalMetadata = metadata || {} // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º finalMetadata
    const numericTelegramId = Number(telegram_id)
    if (
      !isNaN(numericTelegramId) &&
      ADMIN_IDS_ARRAY.includes(numericTelegramId)
    ) {
      finalMetadata = { ...finalMetadata, is_test_payment: true }
      logger.info('üß™ –ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π (–∞–¥–º–∏–Ω)', {
        telegram_id: telegramIdStr,
        inv_id,
      })
    }
    // ---> –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò <---

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º subscription_type —Å –ø–æ–º–æ—â—å—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const calculatedSubscriptionType =
      status === PaymentStatus.COMPLETED &&
      normalizedType === 'money_income' &&
      currency === Currency.RUB
        ? getSubscriptionTypeByAmount(numericAmount)
        : null

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const rawInsertData = {
      telegram_id: telegramIdStr,
      amount: numericAmount,
      stars: numericStars,
      payment_method,
      description,
      type: normalizedType,
      service_type,
      model_name,
      bot_name,
      status,
      metadata: finalMetadata,
      currency,
      inv_id,
      invoice_url,
      subscription_type: calculatedSubscriptionType,
    }

    // ---> –ù–ê–ß–ê–õ–û ZOD –í–ê–õ–ò–î–ê–¶–ò–ò <---
    let insertDataValidated: CreatePaymentV2
    try {
      insertDataValidated = CreatePaymentV2Schema.parse(rawInsertData)
      logger.info('‚úÖ Zod-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', {
        validatedData: insertDataValidated,
      })
    } catch (validationError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ Zod-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', {
        description: 'Zod validation failed for payment insert data',
        errors:
          validationError instanceof z.ZodError
            ? validationError.errors
            : validationError,
        rawData: rawInsertData,
      })
      throw validationError
    }
    // ---> –ö–û–ù–ï–¶ ZOD –í–ê–õ–ò–î–ê–¶–ò–ò <---

    logger.info('‚û°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
      insertData: insertDataValidated,
    })

    // –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É
    const { data, error } = await supabase
      .from('payments_v2')
      .insert(insertDataValidated)
      .select()
      .single()

    if (error) {
      // –î–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è inv_id
      if (
        error &&
        typeof error === 'object' &&
        'code' in error &&
        error.code === '23505'
      ) {
        logger.info('üîÑ [–î–£–ë–õ–ò–ö–ê–¢]: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', {
          description:
            'Duplicate payment prevented (unique constraint violation)',
          error: error instanceof Error ? error.message : String(error),
          code: error.code,
          details: 'details' in error ? error.details : 'Unknown details',
        })
      }
      // –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      else if (
        error instanceof Error &&
        error.message.includes('User not found')
      ) {
        logger.info('üë§ [–ü–†–û–í–ï–†–ö–ê]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          description: 'User not found check (expected in some test cases)',
          error: error.message,
        })
      }
      // –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      else {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', {
          description: 'Error creating payment record',
          error: error instanceof Error ? error.message : String(error),
          error_details: error,
          telegram_id,
          amount,
          type,
          bot_name,
        })
      }
      throw error
    }

    logger.info('‚úÖ –ó–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
      description: 'Payment record created successfully',
      payment_id: data.id,
      telegram_id,
      amount,
      type: data.type,
      bot_name,
    })

    try {
      const validatedData = ZodPaymentV2Schema.parse(data)
      return validatedData
    } catch (validationError) {
      logger.error(
        '‚ùå –û—à–∏–±–∫–∞ Zod-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ë–î –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏:',
        {
          description:
            'Zod validation failed for data returned from DB after insert',
          errors:
            validationError instanceof z.ZodError
              ? validationError.errors
              : validationError,
          rawData: data,
        }
      )
      return null
    }
  } catch (error) {
    // –î–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è inv_id
    if (
      error &&
      typeof error === 'object' &&
      'code' in error &&
      error.code === '23505'
    ) {
      logger.info('üîÑ [–î–£–ë–õ–ò–ö–ê–¢]: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description:
          'Duplicate payment prevented (unique constraint violation)',
        error: error instanceof Error ? error.message : String(error),
        code: error.code,
        details: 'details' in error ? error.details : 'Unknown details',
      })
    }
    // –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (
      error instanceof Error &&
      error.message.includes('User not found')
    ) {
      logger.info('üë§ [–ü–†–û–í–ï–†–ö–ê]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found check (expected in some test cases)',
        error: error.message,
      })
    }
    // –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    else {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ createSuccessfulPayment:', {
        description: 'Error in createSuccessfulPayment function',
        error: error instanceof Error ? error.message : String(error),
        error_details: error,
      })
    }
    throw error
  }
}
