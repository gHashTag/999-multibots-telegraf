import { supabaseAdmin } from '@/core/supabase/client'
import { TelegramId } from '@/interfaces/telegram.interface'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'
import { logger } from '@/utils/logger'
import { getUserById } from '../getUserById' // Corrected path
import { invalidateBalanceCache } from '../balance/getUserBalance' // Corrected path

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users.
 * @param telegram_id ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
 * @param amount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ) –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ).
 * @returns true –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, false –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
export const updateUserStarsBalance = async (
  telegram_id: TelegramId,
  amount: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
): Promise<boolean> => {
  const normalizedId = normalizeTelegramId(telegram_id)
  logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥:', {
    telegram_id: normalizedId,
    amount,
  })

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const user = await getUserById(normalizedId)
    if (!user) {
      logger.error('‚ùå updateUserStarsBalance: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        telegram_id: normalizedId,
      })
      return false
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ users
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è stars_balance
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º rpc –≤—ã–∑–æ–≤ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (value = value + amount)
    const { error } = await supabaseAdmin.rpc('update_user_stars', {
      user_id_param: user.id,
      stars_to_add: amount,
    })

    // –ï—Å–ª–∏ RPC –Ω–µ —É–¥–∞–ª–∞—Å—å (–∏–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏), –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π UPDATE
    // –í–ê–ñ–ù–û: –ü—Ä—è–º–æ–π UPDATE –º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω –≤ –ø–ª–∞–Ω–µ –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö, RPC –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ.
    // –ï—Å–ª–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UPDATE, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.
    /*
    const { data: userData, error: fetchError } = await supabaseAdmin
        .from('users')
        .select('stars_balance')
        .eq('id', user.id)
        .single();

    if (fetchError || !userData) {
        logger.error('‚ùå updateUserStarsBalance: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥', {
            telegram_id: normalizedId,
            error: fetchError,
        });
        return false;
    }

    const currentStars = userData.stars_balance || 0;
    const newStarsBalance = currentStars + amount;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
    if (newStarsBalance < 0) {
         logger.warn('‚ö†Ô∏è updateUserStarsBalance: –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥', {
            telegram_id: normalizedId,
            currentStars,
            amount,
            newStarsBalance
         });
         // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å false –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
         // return false;
    }

    const { error } = await supabaseAdmin
      .from('users')
      .update({ stars_balance: newStarsBalance })
      .eq('id', user.id)
    */

    if (error) {
      logger.error(
        '‚ùå updateUserStarsBalance: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥',
        {
          telegram_id: normalizedId,
          error: error.message,
          error_details: error,
        }
      )
      return false
    }

    // 3. –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
    invalidateBalanceCache(normalizedId)

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', {
      telegram_id: normalizedId,
      amount,
    })
    return true
  } catch (error) {
    logger.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ updateUserStarsBalance:', {
      telegram_id: normalizedId,
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
    })
    return false
  }
}
