import { logger } from '@/utils/logger'
import { Readable } from 'stream'

interface GenerateOptions {
  voice: string
  model_id: string
  text: string
}

interface Voice {
  voice_id: string
  name: string
}

class ElevenLabsClient {
  private apiKey: string
  private baseUrl = 'https://api.elevenlabs.io/v1'
  private defaultVoiceId = 'EXAVITQu4vr4xnSDxMaL' // Rachel voice
  private timeout = 30000 // 30 seconds timeout
  private maxRetries = 3
  private retryDelay = 1000 // 1 second

  constructor(apiKey: string) {
    this.apiKey = apiKey
  }

  private async retryOperation<T>(
    operation: () => Promise<T>,
    retryCount = 0
  ): Promise<T> {
    try {
      return await operation()
    } catch (error) {
      if (
        retryCount < this.maxRetries &&
        (error.code === 'ECONNREFUSED' ||
          error.code === 'ETIMEDOUT' ||
          error.code === 'ECONNRESET' ||
          error.message.includes('fetch failed'))
      ) {
        logger.warn({
          message: 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞',
          description: 'Retrying request',
          attempt: retryCount + 1,
          max_retries: this.maxRetries,
          error: error.message,
        })

        await new Promise(resolve =>
          setTimeout(resolve, this.retryDelay * (retryCount + 1))
        )
        return this.retryOperation(operation, retryCount + 1)
      }
      throw error
    }
  }

  private async getVoices(): Promise<Voice[]> {
    return this.retryOperation(async () => {
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), this.timeout)

      try {
        const response = await fetch(`${this.baseUrl}/voices`, {
          headers: {
            'xi-api-key': this.apiKey,
          },
          signal: controller.signal,
        })

        clearTimeout(timeoutId)

        if (!response.ok) {
          throw new Error(
            `Failed to get voices: ${response.status} ${response.statusText}`
          )
        }

        const data = await response.json()
        return data.voices || []
      } catch (error) {
        clearTimeout(timeoutId)
        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
          description: 'Error getting voices list',
          error: error instanceof Error ? error.message : String(error),
        })
        throw error
      }
    })
  }

  private async validateVoice(voiceId: string): Promise<string> {
    try {
      const voices = await this.getVoices()
      const voiceExists = voices.some(voice => voice.voice_id === voiceId)

      if (!voiceExists) {
        logger.warn({
          message: '‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
          description: 'Voice not found, using default voice',
          requested_voice: voiceId,
          default_voice: this.defaultVoiceId,
        })
        return this.defaultVoiceId
      }

      return voiceId
    } catch (error) {
      logger.warn({
        message: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        description: 'Voice validation error, using default voice',
        error: error instanceof Error ? error.message : String(error),
        requested_voice: voiceId,
        default_voice: this.defaultVoiceId,
      })
      return this.defaultVoiceId
    }
  }

  async generate({
    voice,
    model_id,
    text,
  }: GenerateOptions): Promise<Readable> {
    return this.retryOperation(async () => {
      logger.info({
        message: 'üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API',
        description: 'Sending request to ElevenLabs API',
        voice,
        model_id,
        text_length: text.length,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
      if (!this.apiKey) {
        logger.error({
          message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á',
          description: 'Missing API key',
        })
        throw new Error('ElevenLabs API key is missing')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º voice_id
      const validatedVoice = await this.validateVoice(voice)

      const url = `${this.baseUrl}/text-to-speech/${validatedVoice}`
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), this.timeout)

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'xi-api-key': this.apiKey,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text,
            model_id,
            voice_settings: {
              stability: 0.5,
              similarity_boost: 0.75,
            },
          }),
          signal: controller.signal,
        })

        clearTimeout(timeoutId)

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
        logger.info({
          message: 'üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API',
          description: 'API response details',
          status: response.status,
          statusText: response.statusText,
          headers: {
            'content-type': response.headers.get('content-type'),
            'content-length': response.headers.get('content-length'),
          },
        })

        if (!response.ok) {
          let errorDetails = ''
          try {
            const errorJson = await response.json()
            errorDetails = JSON.stringify(errorJson)
          } catch (e) {
            errorDetails = await response.text()
          }

          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ API',
            description: 'API error details',
            status: response.status,
            statusText: response.statusText,
            errorDetails,
            voice: validatedVoice,
            model_id,
          })

          if (response.status === 400) {
            if (errorDetails.includes('voice_id')) {
              throw new Error('Invalid voice ID')
            }
            if (errorDetails.includes('text')) {
              throw new Error('Invalid text format')
            }
            throw new Error(`Bad request: ${errorDetails}`)
          }

          if (response.status === 502) {
            throw new Error(
              'ElevenLabs API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
          }

          throw new Error(
            `ElevenLabs API error: ${response.status} ${response.statusText}\n${errorDetails}`
          )
        }

        if (!response.body) {
          throw new Error('No response body received from API')
        }

        logger.info({
          message: '‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API',
          description: 'Response received from API',
          status: response.status,
          voice: validatedVoice,
        })

        const reader = response.body.getReader()
        let isDestroyed = false

        return new Readable({
          read() {
            if (isDestroyed) return

            reader.read().then(
              ({ done, value }) => {
                if (done) {
                  this.push(null)
                } else {
                  try {
                    this.push(Buffer.from(value))
                  } catch (error) {
                    logger.error({
                      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                      description: 'Error processing data chunk',
                      error:
                        error instanceof Error ? error.message : String(error),
                    })
                    this.destroy(error as Error)
                  }
                }
              },
              error => {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞',
                  description: 'Stream read error',
                  error: error instanceof Error ? error.message : String(error),
                })
                if (!isDestroyed) {
                  this.destroy(error as Error)
                }
              }
            )
          },
          destroy(error, callback) {
            isDestroyed = true
            reader.cancel().then(() => {
              if (callback) {
                callback(error)
              }
            })
            return this
          },
        })
      } catch (error) {
        clearTimeout(timeoutId)

        if (error.name === 'AbortError') {
          logger.error({
            message: '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞',
            description: 'Request timeout exceeded',
            timeout: this.timeout,
          })
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ElevenLabs API')
        }

        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
          description: 'Error generating audio',
          error: error instanceof Error ? error.message : String(error),
          voice: validatedVoice,
          model_id,
        })
        throw error
      }
    })
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
const elevenlabs = new ElevenLabsClient(process.env.ELEVENLABS_API_KEY || '')
export default elevenlabs
