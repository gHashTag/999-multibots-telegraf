import { ElevenLabsService } from './ElevenLabsService'
import { logger } from '@/utils/logger'
import fetch from 'node-fetch'

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
if (!process.env.ELEVENLABS_API_KEY) {
  logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ELEVENLABS_API_KEY', {
    description: 'Missing ELEVENLABS_API_KEY environment variable',
  })
  process.exit(1)
}

logger.info('üîÑ Initializing ElevenLabs service...', {
  description: 'Initializing ElevenLabs service',
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞
export const elevenLabsService = ElevenLabsService.getInstance()

logger.info('‚úÖ ElevenLabs service initialized:', {
  description: 'ElevenLabs service initialization status',
  success: !!elevenLabsService,
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ URL –≤ Blob
async function urlToBlob(url: string): Promise<Blob> {
  const response = await fetch(url)
  const buffer = await response.buffer()
  return new Blob([buffer])
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
interface CreateVoiceParams {
  name: string
  description: string
  files?: string[]
  fileUrl?: string
  labels?: string
}

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
export async function createVoiceElevenLabs(
  params: CreateVoiceParams
): Promise<string> {
  const files = params.files || (params.fileUrl ? [params.fileUrl] : [])
  const blobs = await Promise.all(files.map(urlToBlob))
  return await elevenLabsService.addVoice(params.name, blobs)
}

export interface AddVoiceParams {
  name: string
  files: string[]
  labels?: Record<string, string>
}

export async function addVoice(params: AddVoiceParams): Promise<string> {
  const service = ElevenLabsService.getInstance()
  const blobs = await Promise.all(params.files.map(urlToBlob))
  return await service.addVoice(params.name, blobs)
}
