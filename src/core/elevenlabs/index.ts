import { logger } from '@/utils/logger'
import { Readable } from 'stream'

interface GenerateOptions {
  voice: string
  model_id: string
  text: string
}

interface Voice {
  voice_id: string
  name: string
}

class ElevenLabsClient {
  private apiKey: string
  private baseUrl = 'https://api.elevenlabs.io/v1'
  private defaultVoiceId = 'EXAVITQu4vr4xnSDxMaL' // Rachel voice

  constructor(apiKey: string) {
    this.apiKey = apiKey
  }

  private async getVoices(): Promise<Voice[]> {
    try {
      const response = await fetch(`${this.baseUrl}/voices`, {
        headers: {
          'xi-api-key': this.apiKey,
        },
      })

      if (!response.ok) {
        throw new Error(
          `Failed to get voices: ${response.status} ${response.statusText}`
        )
      }

      const data = await response.json()
      return data.voices || []
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤',
        description: 'Error getting voices list',
        error: error instanceof Error ? error.message : String(error),
      })
      return []
    }
  }

  private async validateVoice(voiceId: string): Promise<string> {
    try {
      const voices = await this.getVoices()
      const voiceExists = voices.some(voice => voice.voice_id === voiceId)

      if (!voiceExists) {
        logger.warn({
          message: '‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
          description: 'Voice not found, using default voice',
          requested_voice: voiceId,
          default_voice: this.defaultVoiceId,
        })
        return this.defaultVoiceId
      }

      return voiceId
    } catch (error) {
      logger.warn({
        message: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        description: 'Voice validation error, using default voice',
        error: error instanceof Error ? error.message : String(error),
        requested_voice: voiceId,
        default_voice: this.defaultVoiceId,
      })
      return this.defaultVoiceId
    }
  }

  async generate({
    voice,
    model_id,
    text,
  }: GenerateOptions): Promise<Readable> {
    logger.info({
      message: 'üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API',
      description: 'Sending request to ElevenLabs API',
      voice,
      model_id,
      text_length: text.length,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (!this.apiKey) {
      logger.error({
        message: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á',
        description: 'Missing API key',
      })
      throw new Error('ElevenLabs API key is missing')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º voice_id
    const validatedVoice = await this.validateVoice(voice)

    const url = `${this.baseUrl}/text-to-speech/${validatedVoice}`

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'xi-api-key': this.apiKey,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          model_id,
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.75,
          },
        }),
      })

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
      logger.info({
        message: 'üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API',
        description: 'API response details',
        status: response.status,
        statusText: response.statusText,
        headers: {
          'content-type': response.headers.get('content-type'),
          'content-length': response.headers.get('content-length'),
        },
      })

      if (!response.ok) {
        let errorDetails = ''
        try {
          const errorJson = await response.json()
          errorDetails = JSON.stringify(errorJson)
        } catch (e) {
          errorDetails = await response.text()
        }

        logger.error({
          message: '‚ùå –û—à–∏–±–∫–∞ API',
          description: 'API error details',
          status: response.status,
          statusText: response.statusText,
          errorDetails,
          voice: validatedVoice,
          model_id,
        })

        if (response.status === 400) {
          if (errorDetails.includes('voice_id')) {
            throw new Error('Invalid voice ID')
          }
          if (errorDetails.includes('text')) {
            throw new Error('Invalid text format')
          }
          throw new Error(`Bad request: ${errorDetails}`)
        }

        throw new Error(
          `ElevenLabs API error: ${response.status} ${response.statusText}\n${errorDetails}`
        )
      }

      if (!response.body) {
        throw new Error('No response body received from API')
      }

      logger.info({
        message: '‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API',
        description: 'Response received from API',
        status: response.status,
        voice: validatedVoice,
      })

      const reader = response.body.getReader()
      return new Readable({
        read() {
          reader.read().then(
            ({ done, value }) => {
              if (done) {
                this.push(null)
              } else {
                this.push(Buffer.from(value))
              }
            },
            error => {
              logger.error({
                message: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞',
                description: 'Stream read error',
                error: error instanceof Error ? error.message : String(error),
              })
              this.destroy(error)
            }
          )
        },
      })
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API',
        description: 'API request error',
        error: error instanceof Error ? error.message : String(error),
        voice: validatedVoice,
        model_id,
      })
      throw error
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
const elevenLabsClient = new ElevenLabsClient(
  process.env.ELEVENLABS_API_KEY || ''
)
export default elevenLabsClient
