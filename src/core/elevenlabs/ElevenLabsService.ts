import { ElevenLabsClient } from 'elevenlabs'
import { Readable } from 'stream'
import {
  checkHostConnection,
  checkApiConnection,
  retryWithBackoff,
} from '../network/checkConnection'

export class ElevenLabsService {
  private static instance: ElevenLabsService
  private client: ElevenLabsClient
  private readonly API_HOST = 'api.elevenlabs.io'
  private readonly API_URL = 'https://api.elevenlabs.io/v1/user'

  private constructor() {
    const apiKey = process.env.ELEVENLABS_API_KEY
    if (!apiKey) {
      throw new Error('ELEVENLABS_API_KEY is not set')
    }
    this.client = new ElevenLabsClient({
      apiKey,
    })
  }

  public static getInstance(): ElevenLabsService {
    if (!ElevenLabsService.instance) {
      ElevenLabsService.instance = new ElevenLabsService()
    }
    return ElevenLabsService.instance
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API ElevenLabs
   */
  private async checkConnection(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs:', {
      description: 'Checking ElevenLabs connection',
      host: this.API_HOST,
    })

    const isDnsOk = await checkHostConnection(this.API_HOST)
    if (!isDnsOk) {
      throw new Error('DNS resolution failed for ElevenLabs API')
    }

    const isApiOk = await checkApiConnection(this.API_URL)
    if (!isApiOk) {
      throw new Error('Cannot connect to ElevenLabs API')
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:', {
      description: 'ElevenLabs connection verified',
    })
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * @param text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å
   * @param voice - ID –≥–æ–ª–æ—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @returns Readable –ø–æ—Ç–æ–∫ —Å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
   */
  public async generateSpeech(text: string, voice: string): Promise<Readable> {
    try {
      console.log('üéôÔ∏è –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:', {
        text_length: text.length,
        voice,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
      await this.checkConnection()

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const audioStream = await retryWithBackoff(
        async () => {
          const stream = await this.client.generate({
            text,
            voice,
            model_id: 'eleven_multilingual_v2',
          })

          if (!stream) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Ç ElevenLabs API')
          }

          if (!(stream instanceof Readable)) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
          }

          return stream
        },
        3, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        1000 // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
      )

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫')
      return audioStream
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:', error)
      throw error
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
   * @param name - –ò–º—è –≥–æ–ª–æ—Å–∞
   * @param description - –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
   * @param files - –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
   * @param labels - –ú–µ—Ç–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
   */
  public async addVoice(
    name: string,
    description: string,
    files: string[],
    labels?: string
  ): Promise<string> {
    try {
      console.log('üé§ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:', {
        name,
        description,
        files_count: files.length,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞
      await this.checkConnection()

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
      const voice = await retryWithBackoff(
        async () => {
          return await this.client.voices.add({
            name,
            description,
            files,
            labels,
          })
        },
        3,
        1000
      )

      console.log('‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
        voice_id: voice.voice_id,
      })

      return voice.voice_id
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞:', error)
      throw error
    }
  }
}
