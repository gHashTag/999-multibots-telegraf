import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { sendPaymentNotificationWithBot } from '@/price/helpers/sendPaymentNotificationWithBot'
import { sendPaymentNotificationToUser } from '@/price/helpers/sendPaymentNotificationToUser'
import { inngest } from '@/core/inngest/clients'
import { updateUserSubscription } from '@/core/supabase'
import { updatePaymentStatus } from '@/core/supabase/updatePaymentStatus'
import { logger } from '@/utils/logger'
import { errorMessage, errorMessageAdmin } from '@/helpers/errorMessage'
import { getTelegramIdFromInvId } from '@/helpers/getTelegramIdFromInvId'
import { AVATARS_GROUP_ID, createBotByName } from '@/core/bot'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
const PAYMENT_OPTIONS = [
  { amount: 500, stars: 217 },
  { amount: 1000, stars: 434 },
  { amount: 2000, stars: 869 },
  { amount: 5000, stars: 2173 },
  { amount: 10000, stars: 4347 },
  { amount: 10, stars: 6 },
]

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
const SUBSCRIPTION_PLANS = [
  {
    row: 0,
    text: 'üé® NeuroPhoto',
    en_price: 10,
    ru_price: 1110,
    description: 'Creating photos using neural networks.',
    stars_price: 476,
    callback_data: 'neurophoto',
  },
  {
    row: 1,
    text: 'üìö NeuroBase',
    en_price: 33,
    ru_price: 2999,
    description: 'Self-study using neural networks with an AI avatar.',
    stars_price: 1303,
    callback_data: 'neurobase',
  },
  {
    row: 2,
    text: 'ü§ñ NeuroBlogger',
    en_price: 833,
    ru_price: 75000,
    description: 'Training on neural networks with a mentor.',
    stars_price: 32608,
    callback_data: 'neuroblogger',
  },
  {
    row: 3, // –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
    text: 'üß™ –¢–µ—Å—Ç', // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    en_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    ru_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
    description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.',
    stars_price: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    callback_data: 'neurotester', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
  },
]

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const SUBSCRIPTION_AMOUNTS = SUBSCRIPTION_PLANS.reduce((acc, plan) => {
  acc[plan.ru_price] = plan.callback_data
  return acc
}, {})

// –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
export const ruPaymentProcessPayment = inngest.createFunction(
  {
    id: 'ru-payment-processing',
    name: 'ru-payment-processing',
    retries: 3, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ —Å–±–æ—è—Ö
    onFailure: async ({ error }) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error)
      errorMessageAdmin(error)
      return { error: error.message }
    },
  },
  { event: 'ru-payment/process-payment' }, // –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  async ({ event, step }) => {
    const { IncSum, inv_id } = event.data
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
    const roundedIncSum = Math.round(Number(IncSum))

    console.log('üöÄ processPayment: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞')
    console.log('üí∞ processPayment: –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞', IncSum)
    console.log('üí∞ processPayment: –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞', roundedIncSum)
    console.log('üìù processPayment: –∏–Ω–≤–æ–π—Å ID', inv_id)

    try {
      let stars = 0
      let subscription = ''

      // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await step.run('get-user-data', async () => {
        return await getTelegramIdFromInvId(inv_id)
      })

      const { telegram_id, username, language_code, bot_name } = userData

      console.log('üë§ processPayment: telegram_id', telegram_id)
      console.log('üë§ processPayment: username', username)
      console.log('üåê processPayment: language_code', language_code)
      console.log('ü§ñ processPayment: bot_name', bot_name)

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—É–º–º–∞ –æ–¥–Ω–æ–º—É –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤
      const checkSubscriptionStep = await step.run(
        'check-subscription-plan',
        async () => {
          if (SUBSCRIPTION_AMOUNTS[roundedIncSum]) {
            const plan = SUBSCRIPTION_PLANS.find(
              p => p.ru_price === roundedIncSum
            )
            if (plan) {
              return {
                stars: plan.stars_price,
                subscription: plan.callback_data,
              }
            }
          }
          return { stars: 0, subscription: '' }
        }
      )

      stars = checkSubscriptionStep.stars
      subscription = checkSubscriptionStep.subscription

      // 3. –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
      if (stars === 0) {
        const checkPaymentOptionStep = await step.run(
          'check-payment-option',
          async () => {
            const option = PAYMENT_OPTIONS.find(
              opt => opt.amount === roundedIncSum
            )
            if (option) {
              return { stars: option.stars }
            }
            return { stars: 0 }
          }
        )

        stars = checkPaymentOptionStep.stars
      }

      // 4. –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await step.run('update-payment-status', async () => {
        await updatePaymentStatus({
          inv_id,
          status: 'SUCCESS',
          stars,
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ${roundedIncSum} —Ä—É–±.`,
          metadata: {
            payment_method: 'Robokassa',
            bot_name,
            language: language_code || 'ru',
            stars,
            currency: 'RUB',
            ru_amount: roundedIncSum,
          },
        })
        return { success: true }
      })

      if (stars > 0) {
        const botConfig = await step.run('get-bot-config', async () => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot_name —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∫–ª—é—á–æ–º AVATARS_GROUP_ID
          if (!(bot_name in AVATARS_GROUP_ID)) {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –±–æ—Ç–∞: ${bot_name}`)
          }

          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
          const botToken = createBotByName(bot_name)

          // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
          const groupId =
            AVATARS_GROUP_ID[bot_name as keyof typeof AVATARS_GROUP_ID]
          if (!groupId) {
            throw new Error(
              `ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${bot_name} –≤ AVATARS_GROUP_ID`
            )
          }

          logger.info('ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞', {
            description: 'Bot configuration retrieved',
            bot_name,
            group_id: groupId,
          })

          return {
            token: botToken?.token,
            groupId: botToken?.groupId,
          }
        })

        // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ - –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥
        await step.run('send-notification', async () => {
          const bot = new Telegraf<MyContext>(botConfig.token)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
          await sendPaymentNotificationWithBot({
            amount: roundedIncSum.toString(),
            stars,
            telegramId: telegram_id.toString(),
            language_code,
            username,
            groupId: botConfig.groupId,
            bot,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await sendPaymentNotificationToUser({
            amount: roundedIncSum.toString(),
            stars,
            telegramId: telegram_id.toString(),
            language_code,
            bot,
          })

          console.log('üì® processPayment: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
          return { success: true }
        })

        // 7. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É - –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥
        if (subscription) {
          await step.run('update-subscription', async () => {
            await updateUserSubscription(telegram_id, subscription)
            console.log(
              'üîÑ processPayment: –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞',
              subscription
            )
            return { success: true }
          })
        }

        logger.info('üí∞ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
          description: 'Payment processed successfully',
          telegram_id,
          language_code,
          amount: roundedIncSum,
          stars,
        })

        return {
          success: true,
          telegram_id,
          amount: roundedIncSum,
          stars,
          subscription: subscription || null,
          timestamp: new Date().toISOString(),
        }
      } else {
        logger.warn(
          '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥',
          {
            description:
              'Payment not processed: no matching plan or star package found',
            amount: roundedIncSum,
            inv_id,
          }
        )

        return {
          success: false,
          reason:
            '–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã',
          amount: roundedIncSum,
        }
      }
    } catch (error) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      try {
        const { telegram_id, language_code } = await getTelegramIdFromInvId(
          inv_id
        )
        errorMessage(error as Error, telegram_id, language_code === 'ru')
        errorMessageAdmin(error as Error)
      } catch (innerError) {
        console.log(
          '‚ùå processPayment: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ telegram_id',
          innerError
        )
        errorMessageAdmin(innerError as Error)
      }

      throw error // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    }
  }
)
// {
//     "data": {
//       "inv_id": "999999", "IncSum": "1110.00"
//     }
//   }
