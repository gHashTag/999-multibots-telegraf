import { notifyUserAboutSuccess, notifyUserAboutFailure } from '@/helpers/notifications/userNotifier'
import { notifyAdminsAboutPayment } from '@/helpers/notifications/adminNotifier'
import { inngest } from '@/inngest-functions/clients'
import { updateUserSubscription } from '@/core/supabase'
import { updatePaymentStatus } from '@/core/supabase/updatePaymentStatus'
import { logger } from '@/utils/logger'
import { errorMessageAdmin } from '@/helpers/error/errorMessageAdmin'
import { getTelegramIdFromInvId } from '@/helpers/getTelegramIdFromInvId'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { createBotByName } from '@/core/bot'
import { TransactionType, PaymentProcessParams } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/payments.interface'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
export const PAYMENT_OPTIONS = [
  { amount: 500, stars: 217 },
  { amount: 1000, stars: 434 },
  { amount: 2000, stars: 869 },
  { amount: 5000, stars: 2173 },
  { amount: 10000, stars: 4347 },
] as const

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
export const SUBSCRIPTION_PLANS = [
  {
    row: 0,
    text: 'üé® NeuroPhoto',
    en_price: 10,
    ru_price: 1110,
    description: 'Creating photos using neural networks.',
    stars_price: 476,
    callback_data: 'neurophoto',
  },
  {
    row: 1,
    text: 'üìö NeuroBase',
    en_price: 33,
    ru_price: 2999,
    description: 'Self-study using neural networks with an AI avatar.',
    stars_price: 1303,
    callback_data: 'neurobase',
  },
  {
    row: 2,
    text: 'ü§ñ NeuroBlogger',
    en_price: 833,
    ru_price: 75000,
    description: 'Training on neural networks with a mentor.',
    stars_price: 32608,
    callback_data: 'neuroblogger',
  },
  {
    row: 3, // –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
    text: 'üß™ –¢–µ—Å—Ç', // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    en_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    ru_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
    description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.',
    stars_price: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    callback_data: 'neurotester', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
  },
] as const

// –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
export const ruPaymentProcessPayment = inngest.createFunction(
  {
    id: 'ru-payment-processing',
    name: 'ru-payment-processing',
    retries: 3, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ —Å–±–æ—è—Ö
  },
  { event: 'ru-payment/process-payment' }, // –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  async ({ event, step }) => {
    const { IncSum, inv_id } = event.data
    const roundedIncSum = Math.round(Number(IncSum))
    let userData: Awaited<ReturnType<typeof getTelegramIdFromInvId>> | null = null

    try {
      let stars = 0
      let subscription = ''

      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userData = await step.run('get-user-data', async () => {
        return await getTelegramIdFromInvId(inv_id)
      })

      const { telegram_id, username, language_code, bot_name } = userData

      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–≤–µ–∑–¥—ã)
      const paymentDetails = await step.run('determine-payment-type', async () => {
        const plan = SUBSCRIPTION_PLANS.find(p => p.ru_price === roundedIncSum)
        if (plan) {
          return { stars: plan.stars_price, subscription: plan.callback_data }
        }
        const option = PAYMENT_OPTIONS.find(opt => opt.amount === roundedIncSum)
        if (option) {
          return { stars: option.stars, subscription: '' }
        }
        return { stars: 0, subscription: '' }
      })

      stars = paymentDetails.stars
      subscription = paymentDetails.subscription

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
      await step.run('update-status', async () => {
        await updatePaymentStatus({
          telegram_id,
          inv_id,
          status: 'COMPLETED',
        })
        if (subscription) {
          logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            telegram_id,
            subscription,
          })
          await updateUserSubscription(telegram_id.toString(), subscription)
          logger.info('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
            telegram_id,
            subscription,
          })
        }
      })

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–≤–µ–∑–¥—ã
      if (stars > 0) {
        await step.run('send-balance-update-event', async () => {
          const paymentData: PaymentProcessParams = {
            amount: stars, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∫–∞–∫ amount
            stars: stars,
            telegram_id: telegram_id.toString(),
            type: subscription ? TransactionType.SUBSCRIPTION_PURCHASE : TransactionType.MONEY_INCOME,
            description: subscription
              ? `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription}`
              : `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Robokassa –Ω–∞ ${stars} –∑–≤–µ–∑–¥`,
            bot_name: bot_name || 'default',
            inv_id: inv_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π inv_id
            service_type: subscription ? ModeEnum.Subscribe : ModeEnum.TopUpBalance,
            metadata: {
              payment_method: 'Robokassa',
              subscription: subscription || undefined,
              amount_rub: roundedIncSum,
            },
          }
          await inngest.send({ name: 'payment/process', data: paymentData })
          logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
            telegram_id,
            stars,
            subscription,
          })
        })

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await step.run('send-user-notification', async () => {
          await notifyUserAboutSuccess({
            telegram_id: telegram_id.toString(),
            bot_name: bot_name || 'default',
            language_code: language_code || 'ru',
            amount: roundedIncSum, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö
            currency: 'RUB',
            stars: stars,
            description: subscription ? `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription}` : `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Robokassa`,
            subscription: subscription || undefined,
            type: subscription ? TransactionType.SUBSCRIPTION_PURCHASE : TransactionType.MONEY_INCOME,
            // –ë–∞–ª–∞–Ω—Å –∑–¥–µ—Å—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
          })
        })

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await step.run('send-admin-notification', async () => {
          await notifyAdminsAboutPayment({
            telegram_id: telegram_id.toString(),
            bot_name: bot_name || 'default',
            username: username,
            amount: roundedIncSum,
            currency: 'RUB',
            stars: stars,
            subscription: subscription || undefined,
            type: subscription ? TransactionType.SUBSCRIPTION_PURCHASE : TransactionType.MONEY_INCOME,
            description: subscription ? `–∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É ${subscription}` : `–ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Robokassa`,
          })
        })
      } else {
        // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ (stars === 0), —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        logger.warn('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ Robokassa –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ/–ø–∞–∫–µ—Ç', {
          amount: roundedIncSum,
          inv_id,
        })
        await step.run('send-failure-notification', async () => {
          await notifyUserAboutFailure({
            telegram_id: telegram_id.toString(),
            bot_name: bot_name || 'default',
            language_code: language_code || 'ru',
            error: '–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã',
            attemptedAmount: roundedIncSum,
            attemptedAction: '–æ–ø–ª–∞—Ç—ã Robokassa',
          })
        })
      }

      logger.info('üí∞ –ü–ª–∞—Ç–µ–∂ Robokassa —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        telegram_id,
        amount: roundedIncSum,
        stars,
      })

      return {
        success: stars > 0,
        telegram_id,
        amount: roundedIncSum,
        stars,
        subscription: subscription || null,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Robokassa:', {
        error,
        inv_id,
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (userData?.telegram_id) {
        try {
          await notifyUserAboutFailure({
            telegram_id: userData.telegram_id.toString(),
            bot_name: userData.bot_name || 'default',
            language_code: userData.language_code || 'ru',
            error: error instanceof Error ? error : new Error(String(error)),
            attemptedAction: '–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Robokassa',
          })
        } catch (notifyError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ', {
            notifyError,
          })
        }
      }
      errorMessageAdmin(error as Error)
      throw error
    }
  }
)
// {
//     "data": {
//       "inv_id": "999999", "IncSum": "1110.00"
//     }
//   }
