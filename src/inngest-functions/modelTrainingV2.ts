import { inngest } from '@/core/inngest/clients'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  getUserBalance,
  createModelTrainingV2,
} from '@/core/supabase'

import { calculateModeCost } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { v4 as uuidv4 } from 'uuid'
import { logger } from '@/utils/logger'

import axios from 'axios'

const MAX_ACTIVE_TRAININGS = 3

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ base64
async function encodeFileToBase64(url: string): Promise<string> {
  const response = await axios.get(url, { responseType: 'arraybuffer' })
  const buffer = Buffer.from(response.data)
  return buffer.toString('base64')
}

// –°–æ–∑–¥–∞–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏—é
export const modelTrainingV2 = inngest.createFunction(
  {
    id: 'model-training-v2',
  },
  { event: 'model-training/v2/requested' },
  async ({ event, step }) => {
    logger.info({
      message: 'üöÄ Model training initiated',
      eventId: event.id,
      data: event.data,
    })

    const {
      zipUrl,
      triggerWord,
      modelName,
      steps,
      telegram_id,
      is_ru,
      bot_name,
    } = event.data

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.BFL_API_KEY) {
      throw new Error('BFL_API_KEY is not set')
    }
    if (!process.env.BFL_WEBHOOK_URL) {
      throw new Error('BFL_WEBHOOK_URL is not set')
    }
    if (!process.env.REPLICATE_USERNAME) {
      throw new Error('REPLICATE_USERNAME is not set')
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏
    const botData = await step.run('get-bot', async () => {
      logger.info({
        message: 'ü§ñ Getting bot instance',
        botName: bot_name,
        step: 'get-bot',
      })

      return getBotByName(bot_name)
    })

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ getBotByName, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    const bot = (botData as any).bot

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await step.run('check-user-exists', async () => {
      logger.info({
        message: 'üîç Checking user existence',
        telegramId: telegram_id,
        step: 'check-user-exists',
      })

      const user = await getUserByTelegramId(telegram_id)
      if (!user) {
        logger.error({
          message: '‚ùå User not found',
          telegramId: telegram_id,
          step: 'check-user-exists',
        })
        throw new Error(`User with ID ${telegram_id} does not exist.`)
      }

      logger.info({
        message: '‚úÖ User found',
        telegramId: telegram_id,
        userId: user.id,
        step: 'check-user-exists',
      })

      return user
    })

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 0
    if (userExists.level === 0) {
      await step.run('update-user-level', async () => {
        logger.info({
          message: '‚¨ÜÔ∏è Upgrading user level from 0 to 1',
          telegramId: telegram_id,
          currentLevel: userExists.level,
          step: 'update-user-level',
        })

        await updateUserLevelPlusOne(telegram_id, userExists.level)

        logger.info({
          message: '‚úÖ User level updated successfully',
          telegramId: telegram_id,
          newLevel: 1,
          step: 'update-user-level',
        })
      })
    }

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    const balanceResult = await step.run('check-and-deduct-balance', async () => {
      logger.info('üí∞ –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤', {
        description: 'Step 2: Checking and deducting funds',
        telegram_id,
        bot_name,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await getUserBalance(telegram_id, bot_name)

      if (!currentBalance) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          description: 'User not found',
          telegram_id,
        })
        throw new Error('User not found')
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const costResult = calculateModeCost({
        mode: 'training',
        steps: steps,
      })

      const cost = costResult.stars

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
      if (currentBalance < cost) {
        logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:', {
          description: 'Insufficient funds for training',
          telegram_id,
          required: cost,
          available: currentBalance,
        })
        throw new Error(`Insufficient funds. Required: ${cost}, available: ${currentBalance}`)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
      await inngest.send({
        name: 'balance/process',
        data: {
          telegram_id,
          amount: -cost,
          type: 'balance_decrease',
          description: `Training model ${modelName}`,
          bot_name,
          metadata: {
            model_name: modelName,
            training_steps: steps,
            current_balance: currentBalance,
          },
        },
      })

      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000))

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const newBalance = await getUserBalance(telegram_id, bot_name)

      if (!newBalance) {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
          description: 'Failed to get updated balance',
          telegram_id,
        })
        throw new Error('Failed to get updated balance')
      }

      logger.info('‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã:', {
        description: 'Funds deducted successfully',
        telegram_id,
        old_balance: currentBalance,
        new_balance: newBalance,
        cost,
      })

      return {
        cost,
        old_balance: currentBalance,
        new_balance: newBalance,
      }
    })

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const existingTrainings = await step.run(
        'check-existing-trainings',
        async () => {
          const { data: trainings, error } = await supabase
            .from('trainings')
            .select('*')
            .eq('telegram_id', telegram_id)
            .eq('status', 'active')

          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', {
              description: 'Error checking existing trainings',
              error: error instanceof Error ? error.message : String(error),
            })
            throw error instanceof Error ? error : new Error(String(error))
          }

          return trainings || []
        }
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      if (existingTrainings.length >= MAX_ACTIVE_TRAININGS) {
        throw new Error(
          is_ru
            ? `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å ${existingTrainings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`
            : `You already have ${existingTrainings.length} active trainings. Please wait for them to complete.`
        )
      }

      // –ö–æ–¥–∏—Ä—É–µ–º ZIP —Ñ–∞–π–ª
      await step.run('encode-zip', async () => {
        try {
          const result = await encodeFileToBase64(zipUrl)

          logger.info({
            message: '‚úÖ ZIP file encoded successfully',
            zipUrl,
            step: 'encode-zip',
          })

          return result
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ ZIP —Ñ–∞–π–ª–∞:', {
            description: 'Error encoding ZIP file',
            error: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
          })
          throw error instanceof Error
            ? error
            : new Error('Failed to encode ZIP file')
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
      const trainingResponse = await step.run(
        'create-training-bfl',
        async () => {
          try {
            const headers = {
              'Content-Type': 'application/json',
              'X-Key': process.env.BFL_API_KEY || '',
            } as const

            const response = await fetch(
              `${process.env.BFL_API_URL}/api/v1/finetune`,
              {
                method: 'POST',
                headers,
                body: JSON.stringify({
                  name: modelName,
                  type: 'character',
                  instance_prompt: triggerWord,
                  class_prompt: 'person',
                  num_class_images: 0,
                  save_sample_prompt: triggerWord,
                  negative_prompt: '',
                  steps,
                }),
              }
            )

            if (!response.ok) {
              const errorText = await response.text()
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ BFL API:', {
                description: 'Error creating training in BFL API',
                status: response.status,
                error: errorText,
              })
              throw new Error(`Failed to create training: ${errorText}`)
            }

            const data = await response.json()
            console.log('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ BFL API:', {
              description: 'Training created successfully in BFL API',
              finetune_id: data.finetune_id,
            })

            if (!data.finetune_id) {
              throw new Error('No finetune_id in response')
            }

            return data
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', {
              description: 'Error creating training',
              error: error instanceof Error ? error.message : String(error),
              stack: error instanceof Error ? error.stack : undefined,
            })
            throw error instanceof Error ? error : new Error(String(error))
          }
        }
      )

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await step.run('save-training-to-db', async () => {
        try {
          logger.info({
            message: 'üíæ Saving training information to database',
            finetune_id: trainingResponse.finetune_id,
            telegramId: telegram_id,
            modelName,
            step: 'save-training-to-db',
          })

          if (!trainingResponse.finetune_id) {
            throw new Error('No finetune_id in training response')
          }

          await createModelTrainingV2({
            finetune_id: trainingResponse.finetune_id,
            telegram_id,
            model_name: modelName,
            trigger_word: triggerWord,
            zip_url: zipUrl,
            steps,
            api: 'bfl',
          })

          logger.info({
            message: '‚úÖ Training information saved successfully',
            finetune_id: trainingResponse.finetune_id,
            telegramId: telegram_id,
            modelName,
            step: 'save-training-to-db',
          })
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', {
            description: 'Error saving training to database',
            error: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
          })
          throw error instanceof Error
            ? error
            : new Error('Failed to save training to database')
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('notify-user', async () => {
        logger.info({
          message: 'üì© Sending notification to user',
          telegramId: telegram_id,
          modelName,
          step: 'notify-user',
        })

        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚úÖ –û–±—É—á–µ–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ "${modelName}" –Ω–∞—á–∞–ª–æ—Å—å! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.`
            : `‚úÖ Your model "${modelName}" training has started! We'll notify you when it's ready.`
        )

        logger.info({
          message: 'üì® Notification sent successfully',
          telegramId: telegram_id,
          step: 'notify-user',
        })
      })

      logger.info({
        message: 'üèÅ Model training process completed successfully',
        telegramId: telegram_id,
        modelName,
        finetune_id: trainingResponse.finetune_id,
      })

      return {
        success: true,
        message: `Training initiated successfully: ${JSON.stringify(
          trainingResponse
        )}`,
      }
    } catch (error) {
      console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', {
        description: 'Global error in training creation',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
      await inngest.send({
        name: 'balance/process',
        data: {
          telegram_id,
          amount: balanceResult.cost,
          type: 'balance_increase',
          description: `Refund for failed training of model ${modelName}`,
          bot_name,
          metadata: {
            model_name: modelName,
            training_steps: steps,
            error: error instanceof Error ? error.message : 'Unknown error',
          },
        },
      })

      throw error
    }
  }
)
