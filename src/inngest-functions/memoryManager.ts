import { inngest } from './clients'
import { memoryBankMCP } from './clients'
import { logger } from '@/utils/logger'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
export const storeMemoryFunction = inngest.createFunction(
  { id: 'store-memory' },
  { event: 'memory/store' },
  async ({ event, step }) => {
    try {
      const { data } = event

      logger.info('üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏', {
        description: 'Processing memory store request',
        eventId: event.id,
        dataType: typeof data,
        timestamp: new Date().toISOString(),
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å –≤ Memory Bank
      const result = await step.run('store-memory-step', async () => {
        return await memoryBankMCP.storeMemory(data)
      })

      logger.info('‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', {
        description: 'Memory stored successfully',
        eventId: event.id,
        memoryId: result.id || 'unknown',
        timestamp: new Date().toISOString(),
      })

      return {
        success: true,
        memoryId: result.id,
        message: 'Memory stored successfully',
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏', {
        description: 'Error storing memory',
        eventId: event.id,
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
      })

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        message: 'Failed to store memory',
      }
    }
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏
export const retrieveMemoryFunction = inngest.createFunction(
  { id: 'retrieve-memory' },
  { event: 'memory/retrieve' },
  async ({ event, step }) => {
    try {
      const { data } = event

      logger.info('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏', {
        description: 'Processing memory retrieval request',
        eventId: event.id,
        query: data.query || 'no-query',
        timestamp: new Date().toISOString(),
      })

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Memory Bank
      const result = await step.run('retrieve-memory-step', async () => {
        if (data.semanticSearch) {
          return await memoryBankMCP.semanticSearch(data.query, data.options)
        } else {
          return await memoryBankMCP.retrieveMemory(data)
        }
      })

      logger.info('‚úÖ –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        description: 'Memory retrieval successful',
        eventId: event.id,
        resultsCount: Array.isArray(result) ? result.length : 'n/a',
        timestamp: new Date().toISOString(),
      })

      return {
        success: true,
        results: result,
        message: 'Memory retrieval successful',
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–∞–º—è—Ç–∏', {
        description: 'Error retrieving memory',
        eventId: event.id,
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
      })

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        message: 'Failed to retrieve memory',
      }
    }
  }
)

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ serve.ts
export const memoryFunctions = [storeMemoryFunction, retrieveMemoryFunction]
