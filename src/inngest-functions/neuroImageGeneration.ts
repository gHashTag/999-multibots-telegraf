import { inngest } from '@/core/inngest/clients'
import { replicate } from '@/core/replicate'
import { getAspectRatio } from '@/core/supabase/ai'
import { savePrompt } from '@/core/supabase/savePrompt'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { processApiResponse } from '@/helpers/processApiResponse'

import { saveFileLocally } from '@/helpers'
import { pulse } from '@/helpers/pulse'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import path from 'path'
import { API_URL } from '@/config'
import fs from 'fs'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'

import { getUserBalance } from '@/core/supabase/getUserBalance'

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
console.log('üß™ –¢–ï–°–¢ –õ–û–ì–û–í: –ø—Ä—è–º–æ–π console.log')
logger.info('üß™ –¢–ï–°–¢ –õ–û–ì–û–í: logger.info —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –ø–µ—Ä–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ', {
  description: 'Test log description',
})
logger.info({
  message: 'üß™ –¢–ï–°–¢ –õ–û–ì–û–í: logger.info —Å –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º message',
})

export const neuroImageGeneration = inngest.createFunction(
  {
    id: `neuro-image-generation`,
    retries: 3,
  },
  { event: 'neuro/photo.generate' },
  async ({ event, step }) => {
    try {
      const {
        prompt,
        model_url,
        numImages,
        telegram_id,
        username,
        is_ru,
        bot_name,
      } = event.data

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ numImages –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º
      const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

      logger.info('üé® Starting neuro image generation', {
        description: 'Starting neuro image generation process',
        telegram_id,
        prompt: prompt.substring(0, 50) + '...',
        model_url,
        num_images: validNumImages,
        original_numImages: numImages,
        original_numImages_type: typeof numImages,
      })

      const botData = (await step.run('get-bot', async () => {
        logger.info('ü§ñ Getting bot instance', {
          description: 'Retrieving bot instance by name',
          botName: bot_name,
          step: 'get-bot',
        })

        return getBotByName(bot_name)
      })) as { bot: any }
      console.log('botData ü§ñ', botData)
      const bot = botData.bot

      if (!bot) {
        logger.error('‚ùå Bot instance not found', {
          description: 'Bot instance not found by name',
          bot_name,
          telegram_id,
        })
      } else {
        logger.info('‚úÖ Bot instance found', {
          description: 'Successfully found bot instance by name',
          bot_name,
          telegram_id,
        })
      }

      const userExists = await step.run('check-user', async () => {
        logger.info('üë§ Validating user existence', {
          description: 'Checking if user exists in database',
          telegram_id,
        })
        const user = await getUserByTelegramIdString(telegram_id)
        if (!user) {
          logger.error('‚ùå User not found in database', {
            description: 'User telegram_id not found in users table',
            telegram_id: telegram_id,
            bot_name,
          })

          if (bot && bot.telegram) {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
                  : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
              )
            } catch (sendError) {
              logger.error('‚ùå Failed to send error message to user', {
                description:
                  'Error occurred while sending error message to user',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          }

          throw new Error(`User with ID ${telegram_id} not found in database`)
        }

        logger.info('‚úÖ User found in database', {
          description: 'Successfully found user in database',
          telegram_id,
          user_id: user.id,
          bot_name: user.bot_name,
        })

        return user
      })

      // –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userExists.level === 1) {
        await step.run('update-level', async () => {
          await updateUserLevelPlusOne(telegram_id, userExists.level)
          logger.info('‚¨ÜÔ∏è User level upgraded', {
            description: 'User level was successfully increased',
            telegram_id,
            newLevel: userExists.level + 1,
          })
        })
      }

      const costPerImage = await step.run('calculate-cost', async () => {
        logger.info('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', {
          description: 'Calculating cost per image',
          num_images: validNumImages,
          mode: ModeEnum.NeuroPhoto,
        })

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
        const rawCost = modeCosts[ModeEnum.NeuroPhoto]
        logger.info('üîç –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏', {
          description: 'Cost calculation details',
          rawCost,
          rawCostType: typeof rawCost,
          rawCostValue: String(rawCost),
        })

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ
        const costPerImage = parseFloat(
          Number(modeCosts[ModeEnum.NeuroPhoto]).toFixed(2)
        )

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if (isNaN(costPerImage)) {
          logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            description: 'Invalid image cost calculation',
            costPerImage,
            costPerImageType: typeof costPerImage,
            mode: ModeEnum.NeuroPhoto,
            num_images: validNumImages,
          })
          throw new Error('Invalid cost calculation')
        }

        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
        const totalCost = parseFloat(
          (costPerImage * Number(validNumImages)).toFixed(2)
        )

        logger.info('üí∏ Calculated image cost', {
          description: 'Image cost calculated successfully',
          costPerImage,
          costPerImageType: typeof costPerImage,
          num_images: validNumImages,
          num_imagesType: typeof validNumImages,
          totalCost,
          totalCostType: typeof totalCost,
          telegram_id,
        })

        return costPerImage
      })

      const balanceCheck = await step.run('process-payment', async () => {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º processBalanceOperation
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id', {
            description: 'Missing telegram_id for payment processing',
          })
          throw new Error('Missing telegram_id')
        }

        if (!costPerImage || isNaN(Number(costPerImage))) {
          logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            description: 'Invalid cost per image for payment processing',
            costPerImage,
            telegram_id,
          })
          throw new Error('Invalid cost per image')
        }

        if (!validNumImages || isNaN(Number(validNumImages))) {
          logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', {
            description: 'Invalid number of images for payment processing',
            num_images: validNumImages,
            original_numImages: numImages,
            telegram_id,
          })
          throw new Error('Invalid number of images')
        }

        // –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const validNumImagesAsNumber = Number(validNumImages)

        const paymentAmount = parseFloat(
          (Number(costPerImage) * validNumImagesAsNumber).toFixed(2)
        )

        logger.info('üí∞ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤', {
          description: 'Processing payment',
          telegram_id,
          costPerImage: Number(costPerImage),
          num_images: validNumImages,
          totalAmount: paymentAmount,
          bot_name,
        })

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        const payment_operation_id = `${telegram_id}-${Date.now()}-${prompt.substring(
          0,
          10
        )}`

        logger.info('üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Generating unique ID for operation',
          telegram_id,
          payment_operation_id,
        })

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
        const paymentResult = await inngest.send({
          id: payment_operation_id,
          name: 'payment/process',
          data: {
            telegram_id,
            paymentAmount,
            is_ru,
            bot_name,
            bot,
            type: 'outcome', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            description: `Payment for generating ${validNumImages} image${
              validNumImages === 1 ? '' : 's'
            } with prompt: ${prompt.substring(0, 30)}...`,
            operation_id: payment_operation_id,
            metadata: {
              service_type: 'NeuroPhoto',
              bot_name,
              language: is_ru ? 'ru' : 'en',
              prompt_preview: prompt.substring(0, 50),
              num_images: validNumImages,
              cost_per_image: costPerImage,
            },
          },
        })

        logger.info(
          'üí∏ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ payment/process',
          {
            description:
              'Payment sent for processing via payment/process event',
            telegram_id,
            payment_operation_id,
            payment_event_id: paymentResult.ids?.[0] || 'unknown',
            paymentAmount,
          }
        )

        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
        await new Promise(resolve => setTimeout(resolve, 500))

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = await getUserBalance(telegram_id, bot_name)

        logger.info(
          '‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ payment/process, –±–∞–ª–∞–Ω—Å:',
          {
            description: 'Payment processed via payment/process event',
            telegram_id,
            newBalance,
            paymentAmount,
            payment_operation_id,
          }
        )

        return {
          success: true,
          newBalance,
          payment_operation_id,
        }
      })

      const aspect_ratio = await step.run('get-aspect-ratio', async () => {
        const ratio = await getAspectRatio(telegram_id)
        logger.info('üìê –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
          message: 'üìê Using aspect ratio',
          ratio,
        })
        return ratio
      })

      const generatedImages = []

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Ü–∏–∫–ª–µ
      const numImagesToGenerate = Number(validNumImages)

      for (let i = 0; i < numImagesToGenerate; i++) {
        const generationResult = await step.run(
          `generate-image-${i}`,
          async () => {
            const { bot } = getBotByName(bot_name)
            await bot.telegram.sendMessage(
              telegram_id,
              is_ru
                ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${numImagesToGenerate}`
                : `‚è≥ Generating image ${i + 1} of ${numImagesToGenerate}`
            )

            const input = {
              prompt: `Fashionable: ${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
              negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
              num_inference_steps: 40,
              guidance_scale: 3,
              lora_scale: 1,
              megapixels: '1',
              output_quality: 80,
              prompt_strength: 0.8,
              extra_lora_scale: 1,
              go_fast: false,
              ...(aspect_ratio === '1:1'
                ? { width: 1024, height: 1024 }
                : aspect_ratio === '16:9'
                ? { width: 1368, height: 768 }
                : aspect_ratio === '9:16'
                ? { width: 768, height: 1368 }
                : { width: 1024, height: 1024 }),
              sampler: 'flowmatch',
              num_outputs: 1,
              aspect_ratio,
            }

            const output = await replicate.run(model_url, { input })
            const imageUrl = await processApiResponse(output)

            if (!imageUrl) throw new Error('Image generation failed')

            const localPath = await saveFileLocally(
              telegram_id,
              imageUrl,
              'neuro-photo',
              '.jpeg'
            )

            const prompt_id = await savePrompt(
              prompt,
              model_url,
              ModeEnum.NeuroPhoto,
              imageUrl,
              telegram_id,
              'SUCCESS'
            )

            if (!prompt_id) {
              logger.error('Failed to save prompt')
              throw new Error('Prompt save failed')
            }

            await pulse(
              localPath,
              prompt,
              `/${model_url}`,
              telegram_id,
              username,
              is_ru,
              bot_name
            )

            return {
              url: `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
                localPath
              )}`,
              path: localPath,
              prompt_id,
            }
          }
        )

        await step.run(`notify-image-${i}`, async () => {
          const { bot } = getBotByName(bot_name)
          await bot.telegram.sendPhoto(telegram_id, {
            source: fs.createReadStream(generationResult.path),
          })
        })

        generatedImages.push(generationResult.url)
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
      const userBalance = await step.run('check-balance', async () => {
        try {
          logger.info('üîç –ù–∞—á–∞–ª–æ —à–∞–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Starting balance check step',
            telegram_id,
            bot_name,
          })

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const isProblematicCase =
            bot_name === 'neuro_blogger_bot' &&
            telegram_id &&
            telegram_id.toString() === '144022504'

          if (isProblematicCase) {
            logger.info('üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ü–†–û–ë–õ–ï–ú–ù–´–ô –ö–ï–ô–°', {
              description: 'Known problematic case detected',
              telegram_id,
              bot_name,
              balanceCheck: balanceCheck
                ? JSON.stringify(balanceCheck)
                : 'null',
            })

            // –î–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–µ–π—Å–∞ –±–µ—Ä–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            if (balanceCheck && typeof balanceCheck.newBalance === 'number') {
              logger.info('üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã', {
                description: 'Using balance from payment process',
                telegram_id,
                balance: balanceCheck.newBalance,
                bot_name,
              })

              return {
                rawBalance: balanceCheck.newBalance,
                formattedBalance: balanceCheck.newBalance.toFixed(2),
                balanceFromOperation: balanceCheck.newBalance,
              }
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ getUserBalance
          let actualBalance
          try {
            if (bot_name === 'neuro_blogger_bot') {
              logger.info('üîß –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è neuro_blogger_bot', {
                description: 'Special handling for neuro_blogger_bot',
                telegram_id,
                usingBalanceCheck: !!balanceCheck?.newBalance,
                bot_name,
              })

              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
              if (balanceCheck && typeof balanceCheck.newBalance === 'number') {
                actualBalance = balanceCheck.newBalance
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç balanceCheck, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–∞—Å—á–µ—Ç –∏–∑ payments
                actualBalance = await getUserBalance(telegram_id, bot_name)
              }
            } else {
              // –î–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
              actualBalance = await getUserBalance(telegram_id, bot_name)
            }

            logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
              description: 'User balance retrieved',
              telegram_id,
              actualBalance,
              actualBalanceType: typeof actualBalance,
              actualBalanceIsNull: actualBalance === null,
            })
          } catch (balanceError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', {
              message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞',
              description: 'Error while getting user balance',
              telegram_id,
              error:
                balanceError instanceof Error
                  ? balanceError.message
                  : 'Unknown error',
            })
            actualBalance = 0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }

          // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          logger.info('üíµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π', {
            description: 'Balance check after operations',
            telegram_id,
            balanceFromOperation: balanceCheck?.newBalance || 'unknown',
            balanceFromPayments: actualBalance,
            costTotal: (costPerImage * validNumImages).toFixed(2),
          })

          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
          const formattedBalance =
            actualBalance !== null && actualBalance !== undefined
              ? Number(actualBalance).toFixed(2)
              : '0.00'

          return {
            rawBalance: actualBalance,
            formattedBalance,
            balanceFromOperation: balanceCheck?.newBalance,
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Error in balance check step',
            telegram_id,
            error: error instanceof Error ? error.message : 'Unknown error',
          })
          return {
            rawBalance: 0,
            formattedBalance: '0.00',
            balanceFromOperation: 'unknown',
          }
        }
      })

      await step.run('final-notification', async () => {
        try {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
          const botResult = getBotByName(bot_name)
          if (!botResult || !botResult.bot) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞', {
              description: 'Failed to get bot instance',
              bot_name,
              telegram_id,
              botResult: JSON.stringify(botResult),
            })
            return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
          }

          const { bot } = botResult

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —à–∞–≥–∞ check-balance
          const message = is_ru
            ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°—Ç–æ–∏–º–æ—Å—Ç—å: ${(
                costPerImage * Number(validNumImages)
              ).toFixed(2)} ‚≠êÔ∏è\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${
                userBalance.formattedBalance
              } ‚≠êÔ∏è`
            : `Your images generated! Cost: ${(
                costPerImage * Number(validNumImages)
              ).toFixed(2)} ‚≠êÔ∏è\nNew balance: ${
                userBalance.formattedBalance
              } ‚≠êÔ∏è`

          // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          const keyboard = {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }

          // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
          try {
            await bot.telegram.sendMessage(telegram_id, message, keyboard)
            logger.info({
              message: '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
              description: 'Final message sent to user',
              telegram_id,
            })
          } catch (sendError) {
            logger.error({
              message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
              description: 'Error sending message to user',
              telegram_id,
              error:
                sendError instanceof Error
                  ? sendError.message
                  : 'Unknown error',
            })
          }
        } catch (finalStepError) {
          // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ —à–∞–≥–∞
          logger.error({
            message: '‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ final-notification',
            description: 'General error in final-notification step',
            telegram_id,
            error:
              finalStepError instanceof Error
                ? finalStepError.message
                : 'Unknown error',
            stack:
              finalStepError instanceof Error
                ? finalStepError.stack
                : undefined,
          })
        }
      })

      logger.info({
        message: '‚úÖ Successfully completed neuro generation',
        telegram_id,
        numImages: generatedImages.length,
      })

      return { success: true, images: generatedImages }
    } catch (error) {
      logger.error({
        message: 'üö® Neuro image generation failed',
        error: error.message,
        stack: error.stack,
        telegram_id: event.data.telegram_id,
      })

      await inngest.send({
        name: 'neuro/photo.failed',
        data: {
          ...event.data,
          error: error.message,
        },
      })

      throw error
    }
  }
)
