import { inngest } from '@/inngest-functions/clients'
import { replicate } from '@/core/replicate'
import { getAspectRatio } from '@/core/supabase/ai'
import { savePrompt } from '@/core/supabase/savePrompt'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { processApiResponse } from '@/helpers/processApiResponse'

import { saveFileLocally } from '@/helpers'
import { pulse } from '@/helpers/pulse'
import { ModeEnum, calculateModeCost } from '@/price/helpers'
import path from 'path'
import { API_URL } from '@/config'
import fs from 'fs'
import { Logger as logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { v4 as uuidv4 } from 'uuid'

import { getUserBalance } from '@/core/supabase/getUserBalance'
import { supabase } from '@/core/supabase'

export const neuroImageGeneration = inngest.createFunction(
  {
    id: `neuro-image-generation`,
    retries: 1,
  },
  { event: 'neuro/photo.generate' },
  async ({ event, step }) => {
    try {
      const {
        prompt,
        model_url,
        numImages,
        telegram_id,
        username,
        is_ru,
        bot_name,
      } = event.data

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
      const isProcessing = await step.run('check-processing', async () => {
        const { data: existingPrompts } = await supabase
          .from('prompts')
          .select('*')
          .eq('telegram_id', telegram_id)
          .eq('prompt', prompt)
          .eq('status', 'PROCESSING')
          .gte('created_at', new Date(Date.now() - 5 * 60 * 1000).toISOString())
          .order('created_at', { ascending: false })
          .limit(1)

        return existingPrompts && existingPrompts.length > 0
      })

      if (isProcessing) {
        logger.info('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', {
          description: 'Request is already being processed',
          telegram_id,
          prompt: prompt.substring(0, 50) + '...',
        })
        return { success: false, error: 'Request is already being processed' }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å PROCESSING
      await step.run('save-processing-status', async () => {
        await savePrompt(
          prompt,
          model_url,
          ModeEnum.NeuroPhoto,
          '',
          telegram_id,
          'PROCESSING'
        )
      })

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ numImages –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º
      const validNumImages = numImages ? parseInt(String(numImages), 10) : 1

      logger.info('üé® Starting neuro image generation', {
        description: 'Starting neuro image generation process',
        telegram_id,
        prompt: prompt.substring(0, 50) + '...',
        model_url,
        num_images: validNumImages,
        original_numImages: numImages,
        original_numImages_type: typeof numImages,
      })

      const botData = (await step.run('get-bot', async () => {
        logger.info('ü§ñ Getting bot instance', {
          description: 'Retrieving bot instance by name',
          botName: bot_name,
          step: 'get-bot',
        })

        return getBotByName(bot_name)
      })) as { bot: any }
      console.log('botData ü§ñ', botData)
      const bot = botData.bot

      if (!bot) {
        logger.error('‚ùå Bot instance not found', {
          description: 'Bot instance not found by name',
          bot_name,
          telegram_id,
        })
      } else {
        logger.info('‚úÖ Bot instance found', {
          description: 'Successfully found bot instance by name',
          bot_name,
          telegram_id,
        })
      }

      const userExists = await step.run('check-user', async () => {
        logger.info('üë§ Validating user existence', {
          description: 'Checking if user exists in database',
          telegram_id,
        })
        const user = await getUserByTelegramIdString(telegram_id)
        if (!user) {
          logger.error('‚ùå User not found in database', {
            description: 'User telegram_id not found in users table',
            telegram_id: telegram_id,
            bot_name,
          })

          if (bot && bot.telegram) {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
                  : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
              )
            } catch (sendError) {
              logger.error('‚ùå Failed to send error message to user', {
                description:
                  'Error occurred while sending error message to user',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          }

          throw new Error(`User with ID ${telegram_id} not found in database`)
        }

        logger.info('‚úÖ User found in database', {
          description: 'Successfully found user in database',
          telegram_id,
          user_id: user.id,
          bot_name: user.bot_name,
        })

        return user
      })

      // –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userExists.level === 1) {
        await step.run('update-level', async () => {
          await updateUserLevelPlusOne(telegram_id, userExists.level)
          logger.info('‚¨ÜÔ∏è User level upgraded', {
            description: 'User level was successfully increased',
            telegram_id,
            newLevel: userExists.level + 1,
          })
        })
      }

      const costPerImage = await step.run('calculate-cost', async () => {
        logger.info('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', {
          description: 'Calculating cost per image',
          num_images: validNumImages,
          mode: ModeEnum.NeuroPhoto,
        })

        const cost = calculateModeCost({
          mode: ModeEnum.NeuroPhoto,
          steps: validNumImages,
        })

        logger.info('üí∏ Calculated image cost', {
          description: 'Image cost calculated successfully',
          costPerImage: cost.stars,
          costPerImageType: typeof cost.stars,
          num_images: validNumImages,
          num_imagesType: typeof validNumImages,
          totalCost: cost.stars,
          totalCostType: typeof cost.stars,
          telegram_id,
        })

        return cost.stars
      })

      const balanceCheck = await step.run('process-payment', async () => {
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id', {
            description: 'Missing telegram_id for payment processing',
          })
          throw new Error('Missing telegram_id')
        }

        if (!costPerImage || isNaN(Number(costPerImage))) {
          logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            description: 'Invalid cost per image for payment processing',
            costPerImage,
            telegram_id,
          })
          throw new Error('Invalid cost per image')
        }

        if (!validNumImages || isNaN(Number(validNumImages))) {
          logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', {
            description: 'Invalid number of images for payment processing',
            num_images: validNumImages,
            original_numImages: numImages,
            telegram_id,
          })
          throw new Error('Invalid number of images')
        }

        // –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const validNumImagesAsNumber = Number(validNumImages)

        const paymentAmount = parseFloat(
          (Number(costPerImage) * validNumImagesAsNumber).toFixed(2)
        )

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        const payment_operation_id = uuidv4()

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await inngest.send({
          id: payment_operation_id,
          name: 'payment/process',
          data: {
            telegram_id,
            amount: Math.abs(paymentAmount),
            stars: Math.abs(paymentAmount),
            type: 'money_expense',
            description: `Payment for generating ${numImages} image${
              numImages > 1 ? 's' : ''
            } with prompt: ${prompt.slice(0, 50)}...`,
            bot_name,
            inv_id: payment_operation_id,
            service_type: ModeEnum.NeuroPhoto,
            metadata: {
              num_images: numImages,
              operation_id: payment_operation_id,
              service_type: ModeEnum.NeuroPhoto,
              cost_per_image: costPerImage,
              prompt_preview: prompt.slice(0, 50),
            },
          },
        })

        logger.info('üí∏ Payment sent for processing', {
          description: 'Payment sent via payment/process event',
          telegram_id,
          payment_operation_id,
          paymentAmount: -Math.abs(paymentAmount),
        })

        return { success: true, payment_id: payment_operation_id }
      })

      if (!balanceCheck.success) {
        logger.error('‚ùå Payment processing failed', {
          description: 'Failed to process payment',
          telegram_id,
          payment_id: balanceCheck.payment_id,
        })
        throw new Error('Payment processing failed')
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞—Å–ø–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const aspect_ratio = await getAspectRatio(telegram_id)

      const generatedImages = []

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Ü–∏–∫–ª–µ
      const numImagesToGenerate = Number(validNumImages)
      let failedAttempts = 0

      for (let i = 0; i < numImagesToGenerate; i++) {
        try {
          const generationResult = await step.run(
            `generate-image-${i}`,
            async () => {
              const botResult = getBotByName(bot_name)
              if (!botResult?.bot) {
                throw new Error('Bot instance not found')
              }
              const { bot } = botResult

              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${
                      i + 1
                    } –∏–∑ ${numImagesToGenerate}`
                  : `‚è≥ Generating image ${i + 1} of ${numImagesToGenerate}`
              )

              const input = {
                prompt: `${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
                negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
                num_inference_steps: 40,
                guidance_scale: 3,
                lora_scale: 1,
                megapixels: '1',
                output_quality: 80,
                prompt_strength: 0.8,
                extra_lora_scale: 1,
                go_fast: false,
                ...(aspect_ratio === '1:1'
                  ? { width: 1024, height: 1024 }
                  : aspect_ratio === '16:9'
                  ? { width: 1368, height: 768 }
                  : aspect_ratio === '9:16'
                  ? { width: 768, height: 1368 }
                  : { width: 1024, height: 1024 }),
                sampler: 'flowmatch',
                num_outputs: 1,
                aspect_ratio,
              }

              const output = await replicate.run(model_url, { input })
              const imageUrl = await processApiResponse(output)

              if (!imageUrl) throw new Error('Image generation failed')

              const localPath = await saveFileLocally(
                telegram_id,
                imageUrl,
                'neuro-photo',
                '.jpeg'
              )

              const prompt_id = await savePrompt(
                prompt,
                model_url,
                ModeEnum.NeuroPhoto,
                imageUrl,
                telegram_id,
                'COMPLETED'
              )

              if (!prompt_id) {
                logger.error('Failed to save prompt')
                throw new Error('Prompt save failed')
              }

              await pulse(
                localPath,
                prompt,
                `/${model_url}`,
                telegram_id,
                username,
                is_ru,
                bot_name
              )

              return {
                url: `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
                  localPath
                )}`,
                path: localPath,
                prompt_id,
              }
            }
          )

          await step.run(`notify-image-${i}`, async () => {
            const botResult = getBotByName(bot_name)
            if (!botResult?.bot) {
              throw new Error('Bot instance not found')
            }
            const { bot } = botResult

            await bot.telegram.sendPhoto(telegram_id, {
              source: fs.createReadStream(generationResult.path),
            })
          })

          generatedImages.push(generationResult.url)
        } catch (genError) {
          failedAttempts++
          logger.error({
            message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            description: 'Error generating single image',
            attempt: i + 1,
            total_attempts: numImagesToGenerate,
            error:
              genError instanceof Error ? genError.message : 'Unknown error',
            telegram_id,
          })

          // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
          try {
            const refundAmount = calculateModeCost({
              mode: ModeEnum.NeuroPhoto,
              steps: 1, // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }).stars

            await inngest.send({
              id: `refund-${telegram_id}-${Date.now()}-${uuidv4()}`,
              name: 'payment/process',
              data: {
                telegram_id,
                amount: refundAmount,
                type: 'refund',
                description: `–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${
                  i + 1
                }/${numImagesToGenerate}`,
                bot_name,
                metadata: {
                  service_type: ModeEnum.NeuroPhoto,
                  error:
                    genError instanceof Error
                      ? genError.message
                      : 'Unknown error',
                  attempt: i + 1,
                  total_attempts: numImagesToGenerate,
                },
              },
            })

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const botResult = getBotByName(bot_name)
            if (botResult?.bot) {
              const { bot } = botResult
              const message = is_ru
                ? `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${
                    i + 1
                  }/${numImagesToGenerate}. ${refundAmount} ‚≠êÔ∏è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
                : `‚ùå Failed to generate image ${
                    i + 1
                  }/${numImagesToGenerate}. ${refundAmount} ‚≠êÔ∏è have been refunded.`

              await bot.telegram.sendMessage(telegram_id, message)
            }
          } catch (refundError) {
            logger.error({
              message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
              error:
                refundError instanceof Error
                  ? refundError.message
                  : 'Unknown error',
              originalError:
                genError instanceof Error ? genError.message : 'Unknown error',
              telegram_id,
              attempt: i + 1,
            })
          }
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      if (failedAttempts === numImagesToGenerate) {
        throw new Error('All image generation attempts failed')
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
      await step.run('check-balance', async () => {
        try {
          logger.info('üîç –ù–∞—á–∞–ª–æ —à–∞–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Starting balance check step',
            telegram_id,
            bot_name,
          })

          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ getUserBalance
          let actualBalance
          try {
            // –î–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            actualBalance = await getUserBalance(telegram_id, bot_name)

            logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
              description: 'User balance retrieved',
              telegram_id,
              actualBalance,
              actualBalanceType: typeof actualBalance,
              actualBalanceIsNull: actualBalance === null,
            })
          } catch (balanceError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', {
              message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞',
              description: 'Error while getting user balance',
              telegram_id,
              error:
                balanceError instanceof Error
                  ? balanceError.message
                  : 'Unknown error',
            })
            actualBalance = 0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }

          // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          logger.info('üíµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π', {
            description: 'Balance check after operations',
            telegram_id,
            balanceFromPayments: actualBalance,
            costTotal: (costPerImage * validNumImages).toFixed(2),
          })

          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
          const formattedBalance =
            actualBalance !== null && actualBalance !== undefined
              ? Number(actualBalance).toFixed(2)
              : '0.00'

          return {
            rawBalance: actualBalance,
            formattedBalance,
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Error in balance check step',
            telegram_id,
            error: error instanceof Error ? error.message : 'Unknown error',
          })
          return {
            rawBalance: 0,
            formattedBalance: '0.00',
          }
        }
      })

      await step.run('final-notification', async () => {
        try {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
          const botResult = getBotByName(bot_name)
          if (!botResult || !botResult.bot) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞', {
              description: 'Failed to get bot instance',
              bot_name,
              telegram_id,
              botResult: JSON.stringify(botResult),
            })
            return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
          }

          const { bot } = botResult

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —à–∞–≥–∞ check-balance
          const message = is_ru
            ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! Ô∏è`
            : `Your images generated!`

          // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          const keyboard = {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }

          // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
          try {
            await bot.telegram.sendMessage(telegram_id, message, keyboard)
            logger.info({
              message: '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
              description: 'Final message sent to user',
              telegram_id,
            })
          } catch (sendError) {
            logger.error({
              message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
              description: 'Error sending message to user',
              telegram_id,
              error:
                sendError instanceof Error
                  ? sendError.message
                  : 'Unknown error',
            })
          }
        } catch (finalStepError) {
          // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ —à–∞–≥–∞
          logger.error({
            message: '‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ final-notification',
            description: 'General error in final-notification step',
            telegram_id,
            error:
              finalStepError instanceof Error
                ? finalStepError.message
                : 'Unknown error',
            stack:
              finalStepError instanceof Error
                ? finalStepError.stack
                : undefined,
          })
        }
      })

      logger.info({
        message: '‚úÖ Successfully completed neuro generation',
        telegram_id,
        numImages: generatedImages.length,
      })

      return { success: true, images: generatedImages }
    } catch (error: unknown) {
      logger.error({
        message: 'üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        telegram_id: event.data.telegram_id,
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
      try {
        const { telegram_id, bot_name, is_ru } = event.data
        const validNumImages = event.data.numImages
          ? parseInt(String(event.data.numImages), 10)
          : 1

        // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const refundAmount = calculateModeCost({
          mode: ModeEnum.NeuroPhoto,
          steps: validNumImages,
        }).stars

        logger.info({
          message: 'üí∏ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤',
          description: 'Starting refund process due to generation error',
          telegram_id,
          refundAmount,
          error: error instanceof Error ? error.message : String(error),
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
        await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id,
            amount: refundAmount,
            type: 'refund',
            description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${validNumImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
            bot_name,
            metadata: {
              service_type: ModeEnum.NeuroPhoto,
              error: error instanceof Error ? error.message : String(error),
              num_images: validNumImages,
            },
          },
        })

        logger.info({
          message: '‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω',
          description: 'Refund processed successfully',
          telegram_id,
          refundAmount,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const botResult = getBotByName(bot_name)
        if (botResult?.bot) {
          const { bot } = botResult
          const message = is_ru
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°—Ä–µ–¥—Å—Ç–≤–∞ (${refundAmount} ‚≠êÔ∏è) –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
            : `‚ùå An error occurred during image generation. Funds (${refundAmount} ‚≠êÔ∏è) have been returned to your balance.`

          await bot.telegram.sendMessage(telegram_id, message)
        }
      } catch (refundError: unknown) {
        logger.error({
          message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤',
          error:
            refundError instanceof Error
              ? refundError.message
              : String(refundError),
          originalError: error instanceof Error ? error.message : String(error),
          telegram_id: event.data.telegram_id,
        })
      }

      await inngest.send({
        name: 'neuro/photo.failed',
        data: {
          ...event.data,
          error: error instanceof Error ? error.message : String(error),
        },
      })

      throw error
    }
  }
)
