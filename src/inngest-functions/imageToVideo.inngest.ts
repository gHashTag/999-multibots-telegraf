import { inngest } from './clients'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '../core/supabase'
import { ModeEnum } from '../interfaces/modes'
import { calculateModeCost } from '../price/calculators/modeCalculator'
import { sendBalanceMessage } from '../price/helpers'
import { v4 as uuidv4 } from 'uuid'
import axios from 'axios'
import { TransactionType } from '../interfaces/payments.interface'
import { sendMediaToPulse } from '@/helpers/pulse'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export interface ImageToVideoEvent {
  name: 'image-to-video/generate'
  data: {
    telegram_id: string
    bot_name: string
    image_url: string
    model_id?: string
    duration?: number
    is_ru: boolean
    _test?: {
      skip_balance_check?: boolean
      skip_payment?: boolean
      skip_generation?: boolean
      skip_sending?: boolean
    }
  }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 */
interface VideoResult {
  success: boolean
  videoUrl?: string
  previewUrl?: string
  error?: string
  operationId?: string
  telegram_id?: string
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const imageToVideoFunction = inngest.createFunction(
  {
    id: 'image-to-video-generation',
    name: 'Image to Video Generation',
  },
  { event: 'image-to-video/generate' },
  async ({ event, step }) => {
    const validatedParams = event.data

    if (!validatedParams) {
      throw new Error('üö´ –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'minimax' –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    const modelId = validatedParams.model_id || 'minimax'

    // –ü—Ä—è–º–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    if (validatedParams._test && !validatedParams._test.skip_payment) {
      try {
        const cost = calculateModeCost({
          mode: ModeEnum.ImageToVideo,
          modelId: modelId,
        }).stars

        logger.info('üí∞ [–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
          description: 'Sending payment event for testing',
          telegram_id: validatedParams.telegram_id,
          cost,
          modelId,
        })

        await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id: validatedParams.telegram_id,
            amount: cost,
            stars: cost,
            type: TransactionType.MONEY_EXPENSE,
            description: validatedParams.is_ru
              ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ—Å—Ç)'
              : 'Image to video generation (test)',
            bot_name: validatedParams.bot_name,
            service_type: ModeEnum.ImageToVideo,
            metadata: {
              image_url:
                validatedParams.image_url || 'https://example.com/test.jpg',
              is_test: true,
              operation_id: uuidv4(),
            },
          },
        })

        logger.info('‚úÖ [–¢–ï–°–¢] –ü–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
          description: 'Test payment event successfully sent',
          telegram_id: validatedParams.telegram_id,
        })
      } catch (error) {
        logger.error(
          '‚ùå [–¢–ï–°–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
          {
            description: 'Error sending test payment event',
            telegram_id: validatedParams.telegram_id,
            error: error instanceof Error ? error.message : String(error),
          }
        )
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResult = await step.run('get-user', async () => {
      const user = await getUserByTelegramIdString(validatedParams.telegram_id)
      if (!user) {
        throw new Error('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      return user
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await step.run('send-start-notification', async () => {
      const botResult = getBotByName(validatedParams.bot_name)
      if (!botResult.bot) {
        throw new Error('üö´ –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      await botResult.bot.telegram.sendMessage(
        validatedParams.telegram_id,
        validatedParams.is_ru
          ? 'üé¨ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...'
          : 'üé¨ Starting video generation...'
      )
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (!validatedParams._test?.skip_balance_check) {
      const cost = calculateModeCost({
        mode: ModeEnum.ImageToVideo,
        modelId: modelId,
      }).stars

      if (userResult.balance < cost) {
        const botResult = getBotByName(validatedParams.bot_name)
        if (!botResult.bot) {
          throw new Error('üö´ –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        }

        await sendBalanceMessage(
          validatedParams.telegram_id,
          userResult.balance,
          cost,
          validatedParams.is_ru,
          botResult.bot.telegram
        )
        return { insufficient_balance: true }
      }
    } else {
      logger.info('üîÑ –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ', {
        description: 'Skipping balance check in test mode',
        telegram_id: validatedParams.telegram_id,
      })
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (!validatedParams._test?.skip_payment) {
      await step.run('charge-user', async () => {
        const cost = calculateModeCost({
          mode: ModeEnum.ImageToVideo,
          modelId: modelId,
        }).stars

        logger.info('üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', {
          description: 'Sending payment event',
          telegram_id: validatedParams.telegram_id,
          cost,
          modelId,
          service_type: ModeEnum.ImageToVideo,
        })

        await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id: validatedParams.telegram_id,
            amount: cost,
            stars: cost,
            type: TransactionType.MONEY_EXPENSE,
            description: validatedParams.is_ru
              ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
              : 'Image to video generation',
            bot_name: validatedParams.bot_name,
            service_type: ModeEnum.ImageToVideo,
            metadata: {
              image_url: validatedParams.image_url,
              operation_id: uuidv4(),
            },
          },
        })

        logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
          description: 'Payment event sent successfully',
          telegram_id: validatedParams.telegram_id,
        })
      })
    } else {
      logger.info('üîÑ –ü—Ä–æ–ø—É—Å–∫ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ', {
        description: 'Skipping payment in test mode',
        telegram_id: validatedParams.telegram_id,
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    let videoResult: VideoResult = { success: false }

    if (!validatedParams._test?.skip_generation) {
      videoResult = await step.run('generate-video', async () => {
        try {
          const operationId = uuidv4()
          const response = await axios.post(
            'https://api.d-id.com/talks',
            {
              script: {
                type: 'text',
                input: 'Hello',
                provider: {
                  type: 'microsoft',
                  voice_id: 'en-US-JennyNeural',
                },
              },
              config: {
                result_format: 'mp4',
              },
              source_url: validatedParams.image_url,
            },
            {
              headers: {
                Authorization: `Basic ${process.env.D_ID_API_KEY}`,
                'Content-Type': 'application/json',
              },
            }
          )

          return {
            success: true,
            videoUrl: response.data.result_url,
            previewUrl: response.data.preview_url,
            operationId,
            telegram_id: validatedParams.telegram_id,
          }
        } catch (error) {
          console.error('Error generating video:', error)
          return {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
          }
        }
      })
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!validatedParams._test?.skip_sending && videoResult.videoUrl) {
      await step.run('send-result', async () => {
        const botResult = getBotByName(validatedParams.bot_name)
        if (!botResult.bot) {
          throw new Error('üö´ –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        }

        await botResult.bot.telegram.sendVideo(
          validatedParams.telegram_id,
          videoResult.videoUrl!,
          {
            caption: validatedParams.is_ru
              ? '‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!'
              : '‚ú® Your video is ready!',
          }
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Pulse
        try {
          await sendMediaToPulse({
            mediaType: 'video',
            mediaSource: videoResult.videoUrl!,
            telegramId: validatedParams.telegram_id,
            username: userResult.username || '',
            language: validatedParams.is_ru ? 'ru' : 'en',
            serviceType: ModeEnum.ImageToVideo.toString(),
            botName: validatedParams.bot_name,
            additionalInfo: {
              '–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': validatedParams.image_url,
            },
          })

          logger.info({
            message: '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Pulse',
            description: 'Video successfully sent to Pulse channel',
            telegram_id: validatedParams.telegram_id,
            service: ModeEnum.ImageToVideo,
          })
        } catch (error) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ Pulse',
            description: 'Error sending video to Pulse channel',
            error: (error as Error).message,
            telegram_id: validatedParams.telegram_id,
          })
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUserLevelPlusOne(
          validatedParams.telegram_id,
          validatedParams.bot_name
        )
      })
    }

    return videoResult
  }
)
