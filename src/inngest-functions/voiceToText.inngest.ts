import { inngest } from './clients'
import { OpenAI, toFile } from 'openai'
import { logger } from '@/utils/logger'
import { sendSafeFormattedMessage } from '@/handlers/handleTextMessage'
import { answerAi } from '@/core/openai'
import { getUserByTelegramIdString } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'
import fetch from 'node-fetch'
import { Context } from 'telegraf'
import { Update } from 'telegraf/typings/core/types/typegram'

export const voiceToTextProcessor = inngest.createFunction(
  { 
    id: 'voice-to-text-processor',
    name: 'voice-to-text.requested' 
  },
  { event: 'voice-to-text.requested' },
  async ({ event }) => {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è [Starting voice message processing]')
    const { fileUrl, telegram_id, is_ru, bot_name, username } = event.data

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await getUserByTelegramIdString(telegram_id)
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
      console.log('üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ [Getting audio file]')
      const audioResponse = await fetch(fileUrl)
      if (!audioResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞')
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Whisper API
      console.log('üé§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API [Sending to Whisper API]')
      const transcription = await openai.audio.transcriptions.create({
        file: await toFile(audioResponse, 'audio.ogg'),
        model: 'whisper-1',
        language: is_ru ? 'ru' : 'en',
      })

      console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcription.text)

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const systemPrompt = is_ru
        ? '–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.'
        : 'You are a friendly assistant. Respond to user messages naturally and friendly.'

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT [Getting GPT response]')
      const gptResponse = await answerAi(
        user.model,
        user,
        transcription.text,
        is_ru ? 'ru' : 'en',
        systemPrompt
      )

      if (gptResponse) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const ctx = {
          from: {
            id: Number(telegram_id),
            username: username,
            language_code: is_ru ? 'ru' : 'en'
          },
          message: {
            text: transcription.text,
            chat: {
              id: Number(telegram_id)
            }
          },
          reply: async (text: string, options?: any) => {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId: telegram_id, text, options })
            return { message_id: Date.now() }
          },
          telegram: {
            sendChatAction: async (chatId: number, action: string) => {
              console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è:', { chatId, action })
            }
          }
        } as unknown as Context<Update>

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendSafeFormattedMessage(ctx, gptResponse)

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [Response sent to user]')
      }

      return { success: true }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      const ctx = {
        from: {
          id: Number(telegram_id),
          username: username,
          language_code: is_ru ? 'ru' : 'en'
        },
        message: {
          text: '',
          chat: {
            id: Number(telegram_id)
          }
        },
        reply: async (text: string, options?: any) => {
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId: telegram_id, text, options })
          return { message_id: Date.now() }
        },
        telegram: {
          sendChatAction: async (chatId: number, action: string) => {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è:', { chatId, action })
          }
        }
      } as unknown as Context<Update>

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendSafeFormattedMessage(
        ctx,
        is_ru
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred while processing your voice message. Please try again later.'
      )

      throw error
    }
  }
) 