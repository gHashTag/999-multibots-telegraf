import { inngest } from './clients'
import { logger } from '../utils/logger'
import { convertAudioToText } from '../core/voiceToText/convertAudioToText'
import { CustomError } from '../utils/customError'

const MAX_FILE_SIZE = 20 * 1024 * 1024 // 20MB

export const voiceToTextProcessor = inngest.createFunction(
  { id: 'voice-to-text' },
  { event: 'voice/to-text' },
  async ({ event }) => {
    const { fileUrl, telegram_id, service_type } = event.data

    logger.info('üéôÔ∏è Starting voice to text conversion', {
      telegram_id,
      service_type,
      fileUrl,
    })

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
      const response = await fetch(fileUrl)
      const buffer = await response.arrayBuffer()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (buffer.byteLength > MAX_FILE_SIZE) {
        throw new CustomError(
          'File size exceeds maximum allowed',
          'FILE_SIZE_ERROR'
        )
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
      const result = await convertAudioToText(fileUrl)

      logger.info('‚úÖ Voice successfully converted to text', {
        telegram_id,
        service_type,
        text_length: result.text.length,
      })

      return { text: result.text }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error'

      logger.error('‚ùå Error converting voice to text', {
        telegram_id,
        service_type,
        error: errorMessage,
      })

      throw new CustomError(
        'Failed to convert voice to text',
        'CONVERSION_ERROR',
        error instanceof Error ? error : undefined
      )
    }
  }
)

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const functions = [voiceToTextProcessor]
