import { inngest } from './clients'
import { OpenAI, toFile } from 'openai'
import { logger } from '@/utils/logger'
import { sendSafeFormattedMessage } from '@/handlers/handleTextMessage'
import { answerAi } from '@/core/openai'
import { getUserByTelegramIdString } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'
import fetch from 'node-fetch'
import { Context } from 'telegraf'
import { Update } from 'telegraf/typings/core/types/typegram'
import * as fs from 'fs'
import * as path from 'path'
import { getBotByName } from '@/core/bot'
import { supabase } from '@/core/supabase'

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ
const SUPPORTED_FORMATS = [
  'flac',
  'm4a',
  'mp3',
  'mp4',
  'mpeg',
  'mpga',
  'oga',
  'ogg',
  'wav',
  'webm',
]
const MAX_FILE_SIZE = 25 * 1024 * 1024 // 25MB - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Whisper API

export const voiceToTextProcessor = inngest.createFunction(
  {
    id: 'voice-to-text-processor',
    name: 'voice-to-text.requested',
  },
  { event: 'voice-to-text.requested' },
  async ({ event }) => {
    console.log(
      'üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è [Starting voice message processing]'
    )
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
      fileUrl: event.data.fileUrl,
      telegram_id: event.data.telegram_id,
      is_ru: event.data.is_ru,
      bot_name: event.data.bot_name,
      username: event.data.username,
    })

    const { fileUrl, telegram_id, is_ru, bot_name, username } = event.data

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegram_id)
      const user = await getUserByTelegramIdString(telegram_id)
      if (!user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.username)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!user.model || user.model === 'default') {
        console.log('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [Setting default model]')
        user.model = 'gpt-3.5-turbo' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gpt-3.5-turbo –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:', user.model)

      // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
      console.log('üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ [Getting audio file]')
      console.log('üîó URL —Ñ–∞–π–ª–∞:', fileUrl)
      let audioBuffer: Buffer
      let fileExtension: string

      if (fileUrl.startsWith('file://')) {
        console.log('üìÇ –ß—Ç–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ [Reading local file]')
        // –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        const filePath = fileUrl.slice(7) // –£–±–∏—Ä–∞–µ–º 'file://'
        fileExtension = path.extname(filePath).slice(1).toLowerCase()
        console.log('üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileExtension)

        if (!SUPPORTED_FORMATS.includes(fileExtension)) {
          console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', fileExtension)
          throw new Error(
            `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${SUPPORTED_FORMATS.join(', ')}`
          )
        }

        const stats = fs.statSync(filePath)
        console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', stats.size)
        if (stats.size > MAX_FILE_SIZE) {
          console.error('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', stats.size)
          throw new Error(
            `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_FILE_SIZE / 1024 / 1024}MB`
          )
        }

        audioBuffer = fs.readFileSync(filePath)
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω [File read successfully]')
      } else {
        console.log('üåê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ URL [Getting file from URL]')
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
        const audioResponse = await fetch(fileUrl)
        console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', audioResponse.status)
        if (!audioResponse.ok) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', audioResponse.statusText)
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞')
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–∑ URL
        const url = new URL(fileUrl)
        const pathname = url.pathname.toLowerCase()
        console.log('üîç –ê–Ω–∞–ª–∏–∑ URL:', { pathname })

        if (pathname.includes('.oga')) {
          fileExtension = 'oga'
        } else if (pathname.includes('.ogg')) {
          fileExtension = 'ogg'
        } else {
          const contentType = audioResponse.headers.get('content-type')
          console.log('üìÑ Content-Type:', contentType)
          if (!contentType) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞')
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞')
          }
          fileExtension = contentType.split('/')[1].toLowerCase()
        }
        console.log('üìÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileExtension)

        if (!SUPPORTED_FORMATS.includes(fileExtension)) {
          console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', fileExtension)
          throw new Error(
            `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${SUPPORTED_FORMATS.join(', ')}`
          )
        }

        const contentLength = audioResponse.headers.get('content-length')
        console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', contentLength)
        if (contentLength && parseInt(contentLength) > MAX_FILE_SIZE) {
          console.error('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', contentLength)
          throw new Error(
            `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_FILE_SIZE / 1024 / 1024}MB`
          )
        }

        audioBuffer = Buffer.from(await audioResponse.arrayBuffer())
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω [File downloaded successfully]')
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
      console.log('üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI [Initializing OpenAI]')
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Whisper API
      console.log('üé§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper API [Sending to Whisper API]')
      console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileExtension)
      const transcription = await openai.audio.transcriptions.create({
        file: await toFile(audioBuffer, `audio.${fileExtension}`),
        model: 'whisper-1',
        language: is_ru ? 'ru' : 'en',
      })

      console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcription.text)

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const systemPrompt = is_ru
        ? '–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.'
        : 'You are a friendly assistant. Respond to user messages naturally and friendly.'

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT [Getting GPT response]')
      const gptResponse = await answerAi(
        user.model,
        user,
        transcription.text,
        is_ru ? 'ru' : 'en',
        systemPrompt
      )

      if (gptResponse) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.log(
          'üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è... [Preparing to send message]'
        )
        console.log('üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', gptResponse)

        try {
          // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
          const botResult = getBotByName(bot_name)
          if (!botResult?.bot) {
            throw new Error(`Bot ${bot_name} not found`)
          }
          const { bot } = botResult

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
          await bot.telegram.sendChatAction(Number(telegram_id), 'typing')

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ bot.telegram.sendMessage
          const result = await bot.telegram.sendMessage(
            Number(telegram_id),
            gptResponse,
            { parse_mode: 'HTML' }
          )
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
          throw error
        }

        return { success: true }
      }

      return { success: true }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const errorMessage = is_ru
        ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        : 'Sorry, an error occurred while processing your voice message. Please try again.'

      await sendSafeFormattedMessage(
        {
          from: {
            id: Number(telegram_id),
            username: username,
            language_code: is_ru ? 'ru' : 'en',
          },
          message: {
            text: '',
            chat: {
              id: Number(telegram_id),
            },
          },
          reply: async (text: string, options?: any) => {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', {
              chatId: telegram_id,
              text,
              options,
            })
            return { message_id: Date.now() }
          },
        } as unknown as Context<Update>,
        errorMessage
      )

      throw error
    }
  }
)
