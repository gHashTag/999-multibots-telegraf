import { inngest } from '@/core/inngest/clients'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  saveNeuroPhotoPrompt,
  getFineTuneIdByTelegramId,
  getAspectRatio,
} from '@/core/supabase'
import { API_URL } from '@/config'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'

/**
 * Inngest —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export const neuroPhotoV2Generation = inngest.createFunction(
  {
    id: 'neuro-photo-v2-generation',
    retries: 3,
  },
  { event: 'neuro/photo-v2.generate' },
  async ({ event, step }) => {
    try {
      const { prompt, num_images, telegram_id, is_ru, bot_name } = event.data

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ num_images –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º
      const numImagesToGenerate = num_images
        ? parseInt(String(num_images), 10)
        : 1

      logger.info({
        message: 'üé® –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Starting neurophoto V2 generation process',
        telegram_id,
        prompt: prompt.substring(0, 50) + '...',
        num_images: numImagesToGenerate,
      })

      // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const botData = await step.run('get-bot', async () => {
        logger.info({
          message: 'ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
          description: 'Retrieving bot instance by name',
          botName: bot_name,
        })
        const botResult = getBotByName(bot_name)
        return {
          bot: botResult.bot as Telegraf<MyContext>,
          error: botResult.error,
        }
      })

      const bot = botData.bot as Telegraf<MyContext>

      if (!bot) {
        logger.error({
          message: '‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          description: 'Bot instance not found by name',
          bot_name,
          telegram_id,
          error: botData.error,
        })
        throw new Error(`Bot with name ${bot_name} not found`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userExists = await step.run('check-user', async () => {
        logger.info({
          message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          description: 'Checking if user exists in database',
          telegram_id,
        })

        const user = await getUserByTelegramId(telegram_id)

        if (!user) {
          logger.error({
            message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            description: 'User not found in database',
            telegram_id,
          })

          if (bot && bot.telegram) {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
                  : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
              )
            } catch (sendError) {
              logger.error({
                message:
                  '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                description: 'Failed to send error message to user',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          }

          throw new Error(`User with ID ${telegram_id} not found in database`)
        }

        logger.info({
          message: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          description: 'User found in database',
          telegram_id,
          user_id: user.id,
        })

        return user
      })

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
      if (userExists.level === 1) {
        await step.run('update-level', async () => {
          await updateUserLevelPlusOne(telegram_id, userExists.level)
          logger.info({
            message: '‚¨ÜÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–ª–∏—á–µ–Ω',
            description: 'User level increased',
            telegram_id,
            newLevel: userExists.level + 1,
          })
        })
      }

      // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const costCalculation = await step.run('calculate-cost', async () => {
        logger.info({
          message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          description: 'Calculating generation cost',
          num_images: numImagesToGenerate,
          mode: ModeEnum.NeuroPhotoV2,
        })

        let costPerImage: number
        if (typeof modeCosts[ModeEnum.NeuroPhotoV2] === 'function') {
          costPerImage = modeCosts[ModeEnum.NeuroPhotoV2](numImagesToGenerate)
        } else {
          costPerImage = modeCosts[ModeEnum.NeuroPhotoV2]
        }

        const totalCost = costPerImage * numImagesToGenerate

        logger.info({
          message: 'üí∏ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          description: 'Generation cost calculated',
          costPerImage,
          totalCost,
          num_images: numImagesToGenerate,
        })

        return { costPerImage, totalCost }
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ payment/process
      const paymentResult = await step.run('process-payment', async () => {
        logger.info({
          message: 'üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã',
          description: 'Processing payment',
          telegram_id,
          totalCost: costCalculation.totalCost,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        return await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id,
            paymentAmount: costCalculation.totalCost,
            is_ru,
            bot_name,
            description: `Payment for generating ${numImagesToGenerate} image${
              numImagesToGenerate === 1 ? '' : 's'
            } with prompt: ${prompt.substring(0, 30)}...`,
            type: 'NeuroPhotoV2',
            metadata: {
              prompt,
              num_images: numImagesToGenerate,
            },
          },
        })
      })

      logger.info({
        message: '‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        description: 'Payment processed',
        telegram_id,
        paymentResult,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏ ID —Ñ–∞–π–Ω—Ç—é–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const aspectRatio = await step.run('get-aspect-ratio', async () => {
        return await getAspectRatio(telegram_id)
      })

      const finetuneId = await step.run('get-finetune-id', async () => {
        return await getFineTuneIdByTelegramId(telegram_id)
      })

      logger.info({
        message: 'üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
        description: 'Generation parameters retrieved',
        telegram_id,
        aspectRatio,
        finetuneId,
      })

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
      const dimensions = await step.run('calculate-dimensions', () => {
        if (aspectRatio === '1:1') {
          return { width: 1024, height: 1024 }
        } else if (aspectRatio === '16:9') {
          return { width: 1368, height: 768 }
        } else if (aspectRatio === '9:16') {
          return { width: 768, height: 1368 }
        } else {
          return { width: 1024, height: 1024 }
        }
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const input = {
        finetune_id: finetuneId,
        finetune_strength: 2,
        prompt: `Fashionable: ${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
        aspect_ratio: aspectRatio,
        width: dimensions.width,
        height: dimensions.height,
        safety_tolerance: 0,
        output_format: 'jpeg',
        prompt_upsampling: true,
        webhook_url: `${API_URL}/webhooks/neurophoto`,
        webhook_secret: process.env.BFL_WEBHOOK_SECRET,
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const generatedTasks = []

      for (let i = 0; i < numImagesToGenerate; i++) {
        const generationResult = await step.run(
          `generate-image-${i}`,
          async () => {
            // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —à–∞–≥–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const stepBotResult = getBotByName(bot_name)
            if (!stepBotResult.bot) {
              logger.error({
                message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: 'Bot not found during generation',
                bot_name,
                error: stepBotResult.error,
              })
              throw new Error(
                `Bot with name ${bot_name} not found in generation step`
              )
            }

            const stepBot = stepBotResult.bot

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if (numImagesToGenerate > 1) {
              try {
                await stepBot.telegram.sendMessage(
                  telegram_id,
                  is_ru
                    ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${
                        i + 1
                      } –∏–∑ ${numImagesToGenerate}`
                    : `‚è≥ Generating image ${i + 1} of ${numImagesToGenerate}`
                )
              } catch (sendError) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                  description: 'Error sending generation message',
                  error:
                    sendError instanceof Error
                      ? sendError.message
                      : 'Unknown error',
                  telegram_id,
                })
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
              }
            } else {
              try {
                await stepBot.telegram.sendMessage(
                  telegram_id,
                  is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
                  {
                    reply_markup: { remove_keyboard: true },
                  }
                )
              } catch (sendError) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                  description: 'Error sending generation message',
                  error:
                    sendError instanceof Error
                      ? sendError.message
                      : 'Unknown error',
                  telegram_id,
                })
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
              }
            }

            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const response = await fetch(
              'https://api.us1.bfl.ai/v1/flux-pro-1.1-ultra-finetuned',
              {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Key': process.env.BFL_API_KEY,
                },
                body: JSON.stringify(input),
              }
            )

            if (!response.ok) {
              const errorText = await response.text()
              logger.error({
                message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: 'API error during generation',
                status: response.status,
                statusText: response.statusText,
                error: errorText,
              })
              throw new Error(
                `API error: ${response.statusText} - ${errorText}`
              )
            }

            const data = await response.json()

            logger.info({
              message: '‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
              description: 'Generation request sent successfully',
              taskId: data.id,
              status: data.status,
            })

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const savedTask = await saveNeuroPhotoPrompt(
              data.id,
              prompt,
              ModeEnum.NeuroPhotoV2,
              telegram_id,
              data.status
            )

            return {
              taskId: data.id,
              status: data.status,
              prompt,
              savedTask,
            }
          }
        )

        generatedTasks.push(generationResult)
      }

      logger.info({
        message: 'üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
        description: 'All generation tasks successfully sent',
        tasksCount: generatedTasks.length,
        tasks: generatedTasks.map(task => task.taskId),
        telegram_id,
      })

      return {
        success: true,
        message: 'Generation tasks successfully initiated',
        tasks: generatedTasks,
        telegram_id,
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Error during neurophoto V2 generation',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : null,
        data: event.data,
      })

      const { telegram_id, bot_name, is_ru } = event.data

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const botResult = getBotByName(bot_name)

        if (!botResult.bot) {
          logger.error({
            message:
              '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ',
            description: 'Bot not found when trying to send error message',
            bot_name,
            error: botResult.error,
          })
          return
        }

        const bot = botResult.bot as Telegraf<MyContext>

        let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'

        if (
          error instanceof Error &&
          error.message.includes('NSFW content detected')
        ) {
          errorMessageToUser = is_ru
            ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
            : '‚ùå NSFW content detected. Please try another prompt.'
        } else if (error instanceof Error) {
          const match = error.message.match(/{"detail":"(.*?)"/)
          if (match && match[1]) {
            errorMessageToUser = is_ru
              ? `‚ùå –û—à–∏–±–∫–∞: ${match[1]}`
              : `‚ùå Error: ${match[1]}`
          } else {
            errorMessageToUser = is_ru
              ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
              : '‚ùå An error occurred. Please try again.'
          }
        }

        try {
          await bot.telegram.sendMessage(telegram_id, errorMessageToUser)
        } catch (msgError) {
          logger.error({
            message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
            description: 'Failed to send error message',
            error:
              msgError instanceof Error ? msgError.message : 'Unknown error',
            telegram_id,
          })
        }
      } catch (sendError) {
        logger.error({
          message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          description: 'Failed to send error message to user',
          error:
            sendError instanceof Error ? sendError.message : 'Unknown error',
          telegram_id,
        })
      }

      throw error
    }
  }
)
