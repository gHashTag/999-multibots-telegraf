import { inngest } from '@/inngest-functions/clients'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  saveNeuroPhotoPrompt,
} from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'

// –û–±—ä—è–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è Inngest
interface InngestEvent {
  name: string
  data: any
  user?: any
  version?: string
  id?: string
  ts?: number
  [key: string]: any
}

interface InngestStep {
  run: <T>(id: string, fn: () => Promise<T>) => Promise<T>
  sleep: (id: string, duration: string) => Promise<void>
  [key: string]: any
}

/**
 * Inngest —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2
 */
export const neuroPhotoV2Generation = inngest.createFunction(
  {
    id: 'neuro-photo-v2-generation',
    retries: 3,
  },
  { event: 'neuro/photo-v2.generate' },
  async ({ event, step }: { event: InngestEvent; step: InngestStep }) => {
    try {
      const { prompt, num_images, telegram_id, is_ru, bot_name } = event.data

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ num_images –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º
      const numImagesToGenerate = num_images
        ? parseInt(String(num_images), 10)
        : 1

      logger.info({
        message: 'üé® –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Starting neurophoto V2 generation process',
        telegram_id,
        prompt: prompt.substring(0, 50) + '...',
        num_images: numImagesToGenerate,
      })

      // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const botData = await step.run('get-bot', async () => {
        logger.info({
          message: 'ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
          description: 'Retrieving bot instance by name',
          botName: bot_name,
        })
        const botResult = getBotByName(bot_name)
        return {
          bot: botResult.bot as Telegraf<MyContext>,
          error: botResult.error,
        }
      })

      const bot = botData.bot as Telegraf<MyContext>

      if (!bot) {
        logger.error({
          message: '‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          description: 'Bot instance not found by name',
          bot_name,
          telegram_id,
          error: botData.error,
        })
        throw new Error(`Bot with name ${bot_name} not found`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userExists = await step.run('check-user', async () => {
        logger.info({
          message: 'üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          description: 'Checking if user exists in database',
          telegram_id,
        })

        const user = await getUserByTelegramId(telegram_id)

        if (!user) {
          logger.error({
            message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            description: 'User not found in database',
            telegram_id,
          })

          if (bot && bot.telegram) {
            try {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
                  : '‚ùå Your account was not found in our database. Please restart the bot using the /start command'
              )
            } catch (sendError) {
              logger.error({
                message:
                  '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                description: 'Failed to send error message to user',
                error:
                  sendError instanceof Error
                    ? sendError.message
                    : 'Unknown error',
                telegram_id,
              })
            }
          }

          throw new Error(`User with ID ${telegram_id} not found in database`)
        }

        logger.info({
          message: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          description: 'User found in database',
          telegram_id,
          user_id: user.id,
        })

        return user
      })

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
      if (userExists.level === 1) {
        await step.run('update-level', async () => {
          if (!userExists.level) {
            await updateUserLevelPlusOne(telegram_id, 1)
          } else {
            await updateUserLevelPlusOne(telegram_id, userExists.level)
          }
        })
      }

      // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const costCalculation = await step.run('calculate-cost', async () => {
        logger.info({
          message: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          description: 'Calculating generation cost',
          num_images: numImagesToGenerate,
          mode: ModeEnum.NeuroPhotoV2,
        })

        const costPerImage = calculateModeCost({
          mode: ModeEnum.NeuroPhotoV2,
          steps: numImagesToGenerate,
        })
        const totalCost = Number(costPerImage) * numImagesToGenerate

        logger.info({
          message: 'üí∏ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          description: 'Generation cost calculated',
          costPerImage,
          totalCost,
          num_images: numImagesToGenerate,
        })

        return { costPerImage, totalCost }
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ payment/process
      await step.run('process-payment', async () => {
        logger.info({
          message: 'üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã',
          description: 'Processing payment',
          telegram_id,
          totalCost: costCalculation.totalCost,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        return await inngest.send({
          id: `payment-${telegram_id}-${Date.now()}-${numImagesToGenerate}-${uuidv4()}`,
          name: 'payment/process',
          data: {
            telegram_id,
            amount: costCalculation.totalCost,
            is_ru,
            bot_name,
            type: TransactionType.MONEY_EXPENSE,
            description: `Payment for generating ${numImagesToGenerate} image${
              numImagesToGenerate > 1 ? 's' : ''
            } with prompt: ${prompt.slice(0, 50)}...`,
            service_type: ModeEnum.NeuroPhotoV2,
            metadata: {
              prompt: prompt.substring(0, 100),
              num_images: numImagesToGenerate,
            },
          },
        })
      })

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const generatedTasks = []

      for (let i = 0; i < numImagesToGenerate; i++) {
        const generationResult = await step.run(
          `generate-image-${i}`,
          async () => {
            // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —à–∞–≥–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const stepBotResult = getBotByName(bot_name)
            if (!stepBotResult.bot) {
              logger.error({
                message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: 'Bot not found during generation',
                bot_name,
                error: stepBotResult.error,
              })
              throw new Error(
                `Bot with name ${bot_name} not found in generation step`
              )
            }

            const stepBot = stepBotResult.bot

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if (numImagesToGenerate > 1) {
              try {
                await stepBot.telegram.sendMessage(
                  telegram_id,
                  is_ru
                    ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${
                        i + 1
                      } –∏–∑ ${numImagesToGenerate}`
                    : `‚è≥ Generating image ${i + 1} of ${numImagesToGenerate}`
                )
              } catch (sendError) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                  description: 'Error sending generation message',
                  error:
                    sendError instanceof Error
                      ? sendError.message
                      : 'Unknown error',
                  telegram_id,
                })
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
              }
            } else {
              try {
                await stepBot.telegram.sendMessage(
                  telegram_id,
                  is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
                  {
                    reply_markup: { remove_keyboard: true },
                  }
                )
              } catch (sendError) {
                logger.error({
                  message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                  description: 'Error sending generation message',
                  error:
                    sendError instanceof Error
                      ? sendError.message
                      : 'Unknown error',
                  telegram_id,
                })
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
              }
            }

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ generateImage
            const taskId = `task-${uuidv4()}`

            logger.info({
              message: '‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π task_id (–∑–∞–≥–ª—É—à–∫–∞)',
              description: 'Created test task_id (stub)',
              taskId,
              telegram_id,
              prompt: prompt.substring(0, 50) + '...',
            })

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const savedTask = await saveNeuroPhotoPrompt(
              taskId,
              prompt,
              ModeEnum.NeuroPhotoV2,
              telegram_id,
              'PROCESSING'
            )

            return {
              taskId,
              status: 'PROCESSING',
              prompt,
              savedTask,
            }
          }
        )

        generatedTasks.push(generationResult)
      }

      logger.info({
        message: 'üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
        description: 'All generation tasks successfully sent',
        tasksCount: generatedTasks.length,
        tasks: generatedTasks.map(task => task.taskId),
        telegram_id,
      })

      return {
        success: true,
        message: 'Generation tasks successfully initiated',
        tasks: generatedTasks,
        telegram_id,
      }
    } catch (error) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ V2',
        description: 'Error during neurophoto V2 generation',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : null,
        data: event.data,
      })

      const { telegram_id, bot_name, is_ru, num_images } = event.data
      const numImagesToGenerate = num_images
        ? parseInt(String(num_images), 10)
        : 1

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
      try {
        // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const refundAmount = calculateModeCost({
          mode: ModeEnum.NeuroPhotoV2,
          steps: numImagesToGenerate,
        }).stars

        logger.info({
          message: 'üí∏ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤',
          description: 'Starting refund process due to generation error',
          telegram_id,
          refundAmount,
          error: error instanceof Error ? error.message : 'Unknown error',
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
        await inngest.send({
          id: `refund-${telegram_id}-${Date.now()}-${uuidv4()}`,
          name: 'payment/process',
          data: {
            telegram_id,
            amount: refundAmount, // –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            type: TransactionType.REFUND,
            description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${numImagesToGenerate} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π V2`,
            bot_name,
            metadata: {
              service_type: ModeEnum.NeuroPhotoV2,
              error: error instanceof Error ? error.message : 'Unknown error',
              num_images: numImagesToGenerate,
            },
          },
        })

        logger.info({
          message: '‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω',
          description: 'Refund processed successfully',
          telegram_id,
          refundAmount,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const botResult = getBotByName(bot_name)
        if (botResult?.bot) {
          const { bot } = botResult
          const message = is_ru
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°—Ä–µ–¥—Å—Ç–≤–∞ (${refundAmount} ‚≠êÔ∏è) –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
            : `‚ùå An error occurred during image generation. Funds (${refundAmount} ‚≠êÔ∏è) have been returned to your balance.`

          await bot.telegram.sendMessage(telegram_id, message)
        }
      } catch (refundError) {
        logger.error({
          message: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤',
          description: 'Error during refund attempt',
          error:
            refundError instanceof Error
              ? refundError.message
              : 'Unknown error',
          originalError:
            error instanceof Error ? error.message : 'Unknown error',
          telegram_id,
        })
      }

      throw error
    }
  }
)
