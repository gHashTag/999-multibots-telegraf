import { inngest } from '@/core/inngest/clients'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { errorMessage, errorMessageAdmin } from '@/helpers'
import { InputFile } from 'telegraf/typings/core/types/typegram'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { sendBalanceMessage } from '@/price/helpers'
import { v4 as uuidv4 } from 'uuid'
import { elevenlabs } from '@/core/elevenlabs'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import * as path from 'path'
import * as os from 'os'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { Telegraf } from 'telegraf'

interface TextToSpeechParams {
  text: string
  voice_id: string
  telegram_id: string
  is_ru: boolean
  bot_name: string
  username?: string
}

interface PaymentResult {
  data?: {
    newBalance: number
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è ElevenLabs API
 */
export async function generateAudioBuffer(
  text: string,
  voice_id: string
): Promise<Buffer> {
  logger.info({
    message: 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ',
    description: 'Starting audio generation',
    text,
    voice_id,
    timestamp: new Date().toISOString(),
  })

  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voice_id}`
  const headers = {
    'xi-api-key': process.env.ELEVENLABS_API_KEY as string,
    'Content-Type': 'application/json',
  }

  const body = {
    text,
    model_id: 'eleven_turbo_v2_5',
    voice_settings: {
      stability: 0.5,
      similarity_boost: 0.75,
    },
  }

  logger.info({
    message: 'üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API',
    description: 'Sending request to ElevenLabs API',
    url,
    voice_id,
    timestamp: new Date().toISOString(),
  })

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    })

    if (!response.ok) {
      throw new Error(
        `ElevenLabs API –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`
      )
    }

    if (!response.body) {
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω —Å—Ç—Ä–∏–º –æ—Ç API')
    }

    logger.info({
      message: 'üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API, –Ω–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      description: 'Response received from API, starting binary data reading',
      timestamp: new Date().toISOString(),
    })

    const chunks: Uint8Array[] = []
    let totalSize = 0
    let isReading = true

    const reader = response.body.getReader()

    while (isReading) {
      const { done, value } = await reader.read()

      if (done) {
        logger.info({
          message: '‚úÖ –ß—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          description: 'Stream reading completed',
          totalSize,
          timestamp: new Date().toISOString(),
        })
        isReading = false
        continue
      }

      chunks.push(value)
      totalSize += value.length
      logger.debug({
        message: 'üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö',
        description: 'Data chunk received',
        chunkSize: value.length,
        totalSize,
        timestamp: new Date().toISOString(),
      })
    }

    const audioBuffer = Buffer.concat(chunks)
    logger.info({
      message: '‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω',
      description: 'Audio buffer created',
      size: audioBuffer.length,
      timestamp: new Date().toISOString(),
    })

    if (audioBuffer.length === 0) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä')
    }

    return audioBuffer
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Error generating audio',
      error: error instanceof Error ? error.message : String(error),
      voice_id,
      timestamp: new Date().toISOString(),
    })
    throw error
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
export async function generateSpeech(
  params: TextToSpeechParams
): Promise<void> {
  const { text, voice_id, telegram_id, is_ru, bot_name, username } = params

  logger.info({
    message: 'üéôÔ∏è –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
    description: 'Starting speech generation',
    params: {
      textLength: text.length,
      voice_id,
      telegram_id,
      is_ru,
      bot_name,
      username,
    },
  })

  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('balance')
      .eq('telegram_id', telegram_id)
      .single()

    if (userError || !userData) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'Error getting user balance',
        error: userError?.message,
        telegram_id,
      })
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    const cost = calculateModeCost({ mode: ModeEnum.TextToSpeech }).stars
    const currentBalance = userData.balance

    logger.info({
      message: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
      description: 'Checking balance',
      currentBalance,
      cost,
      telegram_id,
    })

    if (currentBalance < cost) {
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        description: 'Insufficient funds',
        currentBalance,
        cost,
        telegram_id,
      })
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    logger.info({
      message: 'üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs',
      description: 'Generating audio via ElevenLabs',
      text: text.substring(0, 50) + '...',
      voice_id,
    })

    const audioBuffer = await generateAudioBuffer(text, voice_id)

    logger.info({
      message: 'üì¶ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –ø–æ–ª—É—á–µ–Ω',
      description: 'Audio buffer received',
      bufferType: typeof audioBuffer,
      hasData: !!audioBuffer,
      isBuffer: Buffer.isBuffer(audioBuffer),
      bufferLength: audioBuffer?.length,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = currentBalance - cost
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance: newBalance })
      .eq('telegram_id', telegram_id)

    if (updateError) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞',
        description: 'Error updating balance',
        error: updateError.message,
        telegram_id,
      })
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞')
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    const { error: paymentError } = await supabase.from('payments').insert({
      telegram_id,
      amount: cost,
      type: 'text-to-speech',
      status: 'completed',
    })

    if (paymentError) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ',
        description: 'Error creating payment record',
        error: paymentError.message,
        telegram_id,
      })
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    logger.info({
      message: 'üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ',
      description: 'Preparing to send audio',
      telegram_id,
      audioBufferSize: audioBuffer?.length,
    })

    const { bot } = getBotByName(bot_name)
    if (!bot) {
      logger.error({
        message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Bot instance not found',
        bot_name,
      })
      throw new Error('–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    try {
      logger.info({
        message: 'üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Telegram',
        description: 'Sending audio to Telegram',
        telegram_id,
      })

      await (bot as Telegraf<any>).telegram.sendAudio(
        telegram_id,
        { source: audioBuffer },
        {
          caption: is_ru
            ? `üí´ –í–∞—à —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Ä–µ—á—å!\n\n–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${newBalance} ‚≠êÔ∏è`
            : `üí´ Your text has been successfully converted to speech!\n\nRemaining balance: ${newBalance} ‚≠êÔ∏è`,
        }
      )

      logger.info({
        message: '‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        description: 'Audio successfully sent',
        telegram_id,
      })
    } catch (sendError) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ',
        description: 'Error sending audio',
        error:
          sendError instanceof Error ? sendError.message : String(sendError),
        telegram_id,
        audioBufferInfo: {
          type: typeof audioBuffer,
          isBuffer: Buffer.isBuffer(audioBuffer),
          length: audioBuffer?.length,
          hasData: !!audioBuffer,
        },
      })
      throw sendError
    }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
      description: 'Error in speech generation process',
      error: error instanceof Error ? error.message : String(error),
      params: {
        textLength: text.length,
        voice_id,
        telegram_id,
        is_ru,
        bot_name,
      },
    })
    throw error
  }
}

// Inngest —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const textToSpeechFunction = inngest.createFunction(
  {
    name: 'text-to-speech-generation',
    id: 'text-to-speech',
    concurrency: { limit: 5 },
    retries: 2,
  },
  { event: 'text-to-speech.requested' },
  async ({ event }: any) => {
    await generateSpeech(event.data)
    return { success: true }
  }
)
