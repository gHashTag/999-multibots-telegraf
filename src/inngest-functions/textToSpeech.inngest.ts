import { inngest } from '@/core/inngest/clients'
import { getBotByName } from '@/core/bot'
import { ModeEnum, calculateModeCost } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import elevenlabs from '@/core/elevenlabs'
import { createWriteStream } from 'fs'
import path from 'path'
import os from 'os'
import fs from 'fs'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å
interface TextToSpeechParams {
  text: string
  voice_id: string
  telegram_id: string
  is_ru: boolean
  bot: Telegraf<MyContext>
  bot_name: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
const generateSpeech = async ({
  text,
  voice_id,
  telegram_id,
  is_ru,
  bot,
  bot_name,
}: TextToSpeechParams) => {
  logger.info({
    message: 'üéôÔ∏è –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
    description: 'Starting speech generation',
    telegram_id,
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', telegram_id)
    .single()

  if (userError || !user) {
    logger.error({
      message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      description: 'User not found in database',
      telegram_id,
      error: userError,
    })
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' : '‚ùå Error: user not found'
    )
    throw new Error(`User with ID ${telegram_id} does not exist.`)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const cost = calculateModeCost({ mode: ModeEnum.TextToSpeech }).stars

  if (user.balance < cost) {
    logger.warn({
      message: '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
      description: 'Insufficient funds for text-to-speech',
      telegram_id,
      balance: user.balance,
      cost,
    })
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${cost}‚≠ê, —É –≤–∞—Å: ${user.balance}‚≠ê`
        : `‚ùå Insufficient stars. Required: ${cost}‚≠ê, you have: ${user.balance}‚≠ê`
    )
    throw new Error('Insufficient funds')
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...' : '‚è≥ Generating audio...'
    )

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs SDK
    logger.info({
      message: 'üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞',
      description: 'Generating audio stream',
      telegram_id,
    })

    const audioStream = await elevenlabs.generate({
      voice: voice_id,
      model_id: 'eleven_turbo_v2_5',
      text,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const audioUrl = path.join(os.tmpdir(), `audio_${Date.now()}.mp3`)
    const writeStream = createWriteStream(audioUrl)

    await new Promise<void>((resolve, reject) => {
      audioStream.pipe(writeStream)

      writeStream.on('finish', () => {
        resolve()
      })

      writeStream.on('error', error => {
        reject(error)
      })
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    await inngest.send({
      name: 'payment/process',
      data: {
        amount: -cost,
        telegram_id,
        type: 'text-to-speech',
        description: 'Payment for text to speech generation',
        bot_name,
      },
    })

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.telegram.sendVoice(telegram_id, { source: audioUrl })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await bot.telegram.sendMessage(
        telegram_id,
        is_ru
          ? `‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${cost}‚≠ê`
          : `‚úÖ Audio generated! Spent ${cost}‚≠ê`
      )

      logger.info({
        message: '‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
        description: 'Audio successfully generated',
        telegram_id,
      })
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlink(audioUrl, unlinkError => {
        if (unlinkError) {
          logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
            description: 'Error deleting temporary file',
            telegram_id,
            error: unlinkError.message,
          })
        } else {
          logger.info({
            message: 'üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω',
            description: 'Temporary file deleted',
            telegram_id,
            audioUrl,
          })
        }
      })
    }

    return { success: true }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ',
      description: 'Error generating audio',
      telegram_id,
      error,
    })

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ'
        : '‚ùå An error occurred while generating audio'
    )

    throw error
  }
}

// –°–æ–∑–¥–∞–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏—é
export const textToSpeech = inngest.createFunction(
  { id: 'text-to-speech' },
  { event: 'text-to-speech.requested' },
  async ({ event, step }) => {
    const { text, voice_id, telegram_id, is_ru, bot_name } = event.data

    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ text-to-speech',
      description: 'Starting text-to-speech function',
      data: event.data,
    })

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const botData = await step.run('get-bot', () => {
      logger.info({
        message: 'ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞',
        description: 'Getting bot instance',
        bot_name,
        telegram_id,
      })
      return getBotByName(bot_name)
    })

    logger.info({
      message: '‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–µ–Ω',
      description: 'Bot instance retrieved',
      bot_name,
      has_bot: !!botData,
      has_bot_instance: !!(botData as any).bot,
      telegram_id,
    })

    const bot = (botData as any).bot

    if (!bot) {
      logger.error({
        message: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'Bot instance not found',
        bot_name,
        telegram_id,
      })
      throw new Error(`Bot ${bot_name} not found`)
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
    return step.run('generate-speech', () => {
      logger.info({
        message: 'üéØ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏',
        description: 'Starting speech generation',
        telegram_id,
        text_length: text.length,
      })

      return generateSpeech({
        text,
        voice_id,
        telegram_id,
        is_ru,
        bot,
        bot_name,
      })
    })
  }
)
