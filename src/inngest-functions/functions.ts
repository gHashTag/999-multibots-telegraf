import { inngest } from '@/core/inngest/clients'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ "test/hello.world"
export const helloWorldFunction = inngest.createFunction(
  { id: 'hello-world-handler' },
  { event: 'test/hello.world' },
  async ({ event, step }) => {
    console.log('üéâ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ hello.world:', event)
    await step.sleep('–ø–æ–¥–æ–∂–¥–µ–º-—Å–µ–∫—É–Ω–¥—É', '1s')

    return {
      success: true,
      message: `–ü—Ä–∏–≤–µ—Ç! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏: ${JSON.stringify(
        event.data
      )}`,
      processed_at: new Date().toISOString(),
    }
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
export const broadcastFunction = inngest.createFunction(
  { id: 'broadcast-handler' },
  { event: 'broadcast.start' },
  async ({ event, step }) => {
    try {
      const { imageUrl, textRu, options } = event.data
      const { 
        bot_name, 
        test_mode, 
        test_telegram_id, 
        sender_telegram_id,
        contentType,
        postLink,
        videoFileId,
        textEn
      } = options || {}
      
      logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Inngest:', {
        description: 'Starting broadcast processing with Inngest',
        bot_name,
        test_mode: !!test_mode,
        contentType: contentType || 'photo',
      })

      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await step.run('fetch-users', async () => {
        logger.info('üìä –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
          description: 'Fetching users for broadcast',
          bot_name,
          test_mode: !!test_mode
        })
        
        let users = []
        
        if (test_mode) {
          const testId = test_telegram_id || sender_telegram_id || '144022504'
          users = bot_name
            ? [{ telegram_id: testId, bot_name, language_code: 'ru' }]
            : await supabase
                .from('users')
                .select('telegram_id, bot_name, language_code')
                .eq('telegram_id', testId)
                .then(({ data }) => data || [])
          
          logger.info(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª—É—á–µ–Ω ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`, {
            description: 'Test mode: users fetched',
            count: users.length
          })
        } else if (bot_name) {
          const { data, error } = await supabase
            .from('users')
            .select('telegram_id, bot_name, language_code')
            .eq('bot_name', bot_name)
          
          if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`)
          }
          
          users = data || []
          logger.info(`üë• –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞ ${bot_name}`, {
            description: 'Users fetched for specific bot',
            count: users.length,
            bot_name
          })
        } else {
          throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω bot_name –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
        }
        
        if (!users.length) {
          throw new Error('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        }
        
        return users
      })
      
      // –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–∏—è–º–∏
      const batchSize = 50 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑
      const users = usersResult
      const totalUsers = users.length
      
      let successCount = 0
      let errorCount = 0
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const batches = []
      for (let i = 0; i < totalUsers; i += batchSize) {
        batches.push(users.slice(i, i + batchSize))
      }
      
      logger.info(`üì¶ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ ${batches.length} –≥—Ä—É–ø–ø –ø–æ ${batchSize} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, {
        description: 'Broadcast split into batches',
        batches: batches.length,
        batchSize,
        totalUsers
      })
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
        const batchUsers = batches[batchIndex]
        
        const batchResults = await step.run(`process-batch-${batchIndex}`, async () => {
          logger.info(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã ${batchIndex + 1}/${batches.length}`, {
            description: 'Processing batch',
            batchIndex: batchIndex + 1,
            totalBatches: batches.length,
            usersInBatch: batchUsers.length
          })
          
          const results = []
          
          for (const user of batchUsers) {
            if (!user.telegram_id || !user.bot_name) continue
            
            try {
              const botResult = getBotByName(user.bot_name)
              
              if (!botResult || !botResult.bot) {
                errorCount++
                results.push({
                  success: false,
                  telegram_id: user.telegram_id,
                  error: `–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${user.bot_name}`
                })
                continue
              }
              
              const { bot } = botResult
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              if (contentType === 'post_link' && postLink) {
                const buttonText =
                  user.language_code === 'en'
                    ? 'üîó Go to post'
                    : 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É'
                const messageText =
                  user.language_code === 'en' ? textEn || textRu : textRu

                await bot.telegram.sendMessage(
                  user.telegram_id.toString(),
                  messageText,
                  {
                    parse_mode: 'HTML',
                    link_preview_options: { is_disabled: false },
                    reply_markup: {
                      inline_keyboard: [
                        [
                          {
                            text: buttonText,
                            url: postLink,
                          },
                        ],
                      ],
                    },
                  }
                )
              } else if (contentType === 'video' && videoFileId) {
                const messageText =
                  user.language_code === 'en' ? textEn || textRu : textRu

                await bot.telegram.sendVideo(
                  user.telegram_id.toString(),
                  videoFileId,
                  {
                    caption: messageText,
                    parse_mode: 'Markdown',
                  }
                )
              } else if (imageUrl) {
                const messageText =
                  user.language_code === 'en' ? textEn || textRu : textRu

                await bot.telegram.sendPhoto(
                  user.telegram_id.toString(),
                  imageUrl,
                  {
                    caption: messageText,
                    parse_mode: 'Markdown',
                  }
                )
              } else {
                throw new Error(`–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è contentType=${contentType}`)
              }
              
              successCount++
              results.push({
                success: true,
                telegram_id: user.telegram_id,
              })
            } catch (error) {
              errorCount++
              
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç Telegram API
              if (error.response) {
                const errorCode = error.response.error_code
                if (errorCode === 403 || errorCode === 400) {
                  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –∏–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                  logger.error(
                    `‚ùå –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ ${errorCode}`,
                    {
                      description: `Removing user due to error ${errorCode}`,
                      error: error.response.description,
                      telegram_id: user.telegram_id
                    }
                  )
                  
                  try {
                    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    await supabase
                      .from('users')
                      .delete()
                      .eq('telegram_id', user.telegram_id)
                  } catch (dbError) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã:', {
                      telegram_id: user.telegram_id,
                      error: dbError.message
                    })
                  }
                }
              }
              
              results.push({
                success: false,
                telegram_id: user.telegram_id,
                error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              })
            }
          }
          
          return results
        })
        
        logger.info(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ${batchIndex + 1}/${batches.length}`, {
          description: 'Batch processed',
          batchIndex: batchIndex + 1,
          totalBatches: batches.length,
          successInBatch: batchResults.filter(r => r.success).length,
          errorsInBatch: batchResults.filter(r => !r.success).length
        })
      }
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      const summary = {
        totalUsers,
        successCount,
        errorCount,
        bot_name,
        test_mode: !!test_mode,
        contentType: contentType || 'photo',
        completedAt: new Date().toISOString()
      }
      
      logger.info('üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        description: 'Broadcast completed',
        ...summary
      })
      
      return summary
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Inngest:', {
        description: 'Error in Inngest broadcast function',
        error: error.message,
        stack: error.stack
      })
      
      throw error
    }
  }
)

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
export const functions = [
  helloWorldFunction,
  broadcastFunction,
  // –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
]
