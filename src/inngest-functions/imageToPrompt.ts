import { inngest } from '@/inngest-functions/clients'
import { getBotByName } from '@/core/bot'
import { logger } from '@/utils/logger'
import axios from 'axios'
import { TransactionType } from '@/interfaces/payments.interface'
import { errorMessage, errorMessageAdmin } from '@/helpers'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/interfaces/modes'
import { getUserBalance } from '@/core/supabase'

if (!process.env.ELESTIO_URL) {
  throw new Error('ELESTIO_URL is not set')
}

export const imageToPromptFunction = inngest.createFunction(
  {
    id: 'image-to-prompt-generation',
    name: 'image-to-prompt',
    retries: 3,
  },
  { event: 'image/to-prompt.generate' },
  async ({ event, step }) => {
    try {
      const { image, telegram_id, username, is_ru, bot_name, cost_per_image } =
        event.data

      logger.info('üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        description: 'Starting image analysis',
        telegram_id,
        username,
        is_ru,
        bot_name,
      })

      // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const { bot } = getBotByName(bot_name)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const balanceCheck = await step.run('process-payment', async () => {
        logger.info('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞', {
          description: 'Processing payment',
          telegram_id,
          cost_per_image,
          bot_name,
        })

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        const payment_operation_id = `image-to-prompt-${telegram_id}-${Date.now()}-${uuidv4()}`

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
        await inngest.send({
          id: payment_operation_id,
          name: 'payment/process',
          data: {
            telegram_id,
            amount: cost_per_image,
            is_ru,
            bot_name,
            type: TransactionType.MONEY_EXPENSE,
            description: 'Payment for image to prompt conversion',
            operation_id: payment_operation_id,
            service_type: ModeEnum.ImageToPrompt,
            metadata: {
              service_type: ModeEnum.ImageToPrompt,
              image_url: image,
            },
          },
        })

        logger.info('üí∏ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', {
          description: 'Payment sent for processing',
          telegram_id,
          payment_operation_id,
          amount: cost_per_image,
        })

        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
        await new Promise(resolve => setTimeout(resolve, 500))

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const newBalance = await getUserBalance(telegram_id, bot_name)

        return {
          success: true,
          paymentAmount: cost_per_image,
          newBalance: Number(newBalance) || 0,
        }
      })

      if (!balanceCheck.success) {
        throw new Error('Not enough stars')
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await step.run('send-start-message', async () => {
        if (!bot) {
          throw new Error('Bot instance not found')
        }
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞...' : '‚è≥ Generating prompt...'
        )
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —á–µ—Ä–µ–∑ Inngest
      const initResponse = await step.run('init-api-request', async () => {
        logger.info('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
          description: 'Sending request for image analysis',
          telegram_id,
          image_url: image,
        })

        try {
          const response = await axios.post(
            'https://fancyfeast-joy-caption-alpha-two.hf.space/call/stream_chat',
            {
              data: [
                { path: image },
                'Descriptive',
                'long',
                [
                  'Describe the image in detail, including colors, style, mood, and composition.',
                ],
                '',
                '',
              ],
            },
            {
              headers: {
                'Content-Type': 'application/json',
              },
              maxContentLength: Infinity,
              maxBodyLength: Infinity,
            }
          )

          logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API', {
            description: 'Received response from API',
            telegram_id,
            event_id: response.data?.event_id || response.data,
          })

          return response
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API', {
            description: 'Error sending request to API',
            telegram_id,
            error: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
          })
          throw error
        }
      })

      const eventId = initResponse.data?.event_id || initResponse.data
      if (!eventId) {
        logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç–≤–µ—Ç–µ', {
          description: 'No event ID in response',
          telegram_id,
          response_data: initResponse.data,
        })
        throw new Error('No event ID in response')
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const resultResponse = await step.run('get-result', async () => {
        logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', {
          description: 'Waiting for analysis result',
          telegram_id,
          event_id: eventId,
        })

        try {
          const response = await axios.get(
            `https://fancyfeast-joy-caption-alpha-two.hf.space/call/stream_chat/${eventId}`,
            {
              maxContentLength: Infinity,
              maxBodyLength: Infinity,
            }
          )

          logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞', {
            description: 'Received analysis result',
            telegram_id,
            event_id: eventId,
            has_data: !!response.data,
          })

          return response
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', {
            description: 'Error getting analysis result',
            telegram_id,
            event_id: eventId,
            error: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
          })
          throw error
        }
      })

      if (!resultResponse.data) {
        logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ', {
          description: 'No data in response',
          telegram_id,
          event_id: eventId,
        })
        throw new Error('Image to prompt: No data in response')
      }

      const responseText = resultResponse.data as string
      const lines = responseText.split('\n')

      logger.info('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', {
        description: 'Processing analysis result',
        telegram_id,
        lines_count: lines.length,
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          try {
            const data = JSON.parse(line.slice(6))
            if (Array.isArray(data) && data.length > 1) {
              const caption = data[1]

              logger.info('‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç', {
                description: 'Found valid prompt',
                telegram_id,
                caption_length: caption.length,
              })

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              await step.run('send-result', async () => {
                try {
                  if (!bot) {
                    throw new Error('Bot instance not found')
                  }
                  await bot.telegram.sendMessage(
                    telegram_id,
                    '```\n' + caption + '\n```',
                    {
                      parse_mode: 'MarkdownV2',
                    }
                  )
                  logger.info('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
                    description: 'Result sent to user',
                    telegram_id,
                  })
                } catch (error) {
                  logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', {
                    description: 'Error sending result to user',
                    telegram_id,
                    error:
                      error instanceof Error ? error.message : 'Unknown error',
                  })
                  throw error
                }
              })

              return { success: true, caption }
            }
          } catch (e) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON', {
              description: 'Error parsing JSON from line',
              telegram_id,
              line,
              error: e instanceof Error ? e.message : 'Unknown error',
            })
          }
        }
      }

      logger.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –æ—Ç–≤–µ—Ç–µ', {
        description: 'No valid prompt found in response',
        telegram_id,
        response_text: responseText,
      })
      throw new Error('No valid caption found in response')
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        description: 'Error during image analysis',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (event.data.telegram_id) {
        await errorMessage(
          error as Error,
          event.data.telegram_id,
          event.data.is_ru
        )
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await errorMessageAdmin(error as Error)

      throw error
    }
  }
)
