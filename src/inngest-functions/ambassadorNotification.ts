import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces/telegram-bot.interface'

/**
 * –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ –ø–ª–∞—Ç–µ–∂–µ
 */
interface AmbassadorPaymentNotificationEvent {
  data: {
    ambassador_id: string
    telegram_id: string
    payment_id: number
    payment_amount: number
    payment_stars: number
    payment_type: string
    payment_status: string
    bot_name: string
    commission_amount: number
    commission_rate: number
    user_telegram_id: string
    timestamp: string
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤
 */
export const ambassadorPaymentNotificationHandler = inngest.createFunction(
  { id: 'ambassador-payment-notification-handler' },
  { event: 'ambassador/payment.notification' },
  async ({ event, step }) => {
    const data = event.data as AmbassadorPaymentNotificationEvent['data']

    logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞', {
      description: 'Starting ambassador payment notification processing',
      ambassadorId: data.ambassador_id,
      telegramId: data.telegram_id,
      paymentId: data.payment_id,
    })

    try {
      // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞)
      const botName = 'ambassador_system'
      const botResult = await step.run(
        'get-ambassador-system-bot',
        async () => {
          return await getBotByName(botName)
        }
      )

      if (!botResult.bot) {
        throw new Error(
          `–°–∏—Å—Ç–µ–º–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${botName}. –û—à–∏–±–∫–∞: ${botResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø–ª–∞—Ç–µ–∂–µ
      const message = await step.run(
        'prepare-notification-message',
        async () => {
          // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã
          const currencySymbol = '‚≠ê' // –ó–≤–µ–∑–¥—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞)
          const formattedAmount = data.payment_amount.toFixed(2)
          const formattedCommission = data.commission_amount.toFixed(2)

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          let messageText = `üí∞ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ*\n\n`
          messageText += `–í –≤–∞—à–µ–º –±–æ—Ç–µ _${data.bot_name}_ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞:\n\n`

          // –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
          messageText += `*ID –ø–ª–∞—Ç–µ–∂–∞:* \`#${data.payment_id}\`\n`
          messageText += `*–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:* \`${data.payment_type}\`\n`
          messageText += `*–°—Ç–∞—Ç—É—Å:* \`${data.payment_status}\`\n`
          messageText += `*–°—É–º–º–∞:* \`${formattedAmount} ${currencySymbol}\`\n`

          // –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (data.commission_amount > 0) {
            messageText += `\n*–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è (${data.commission_rate}%):* \`${formattedCommission} ${currencySymbol}\`\n`
            messageText += `–ö–æ–º–∏—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å! üéâ\n`
          }

          // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          const operationDate = new Date(data.timestamp)
          messageText += `\n*–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:* \`${operationDate.toLocaleString('ru-RU')}\`\n`

          return messageText
        }
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É
      await step.run('send-notification-to-ambassador', async () => {
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const bot = botResult.bot as Telegraf<MyContext>

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤
          // –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
          await (bot as any).telegram.sendMessage(data.telegram_id, message, {
            parse_mode: 'Markdown',
          })

          logger.info(
            '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É',
            {
              description:
                'Payment notification successfully sent to ambassador',
              ambassadorId: data.ambassador_id,
              telegramId: data.telegram_id,
              paymentId: data.payment_id,
            }
          )
        } catch (sendError: any) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞', {
            description: 'Error sending message via Telegram bot',
            error: sendError.message,
            telegramId: data.telegram_id,
            botName,
          })
          throw sendError
        }
      })

      return {
        success: true,
        ambassador_id: data.ambassador_id,
        telegram_id: data.telegram_id,
        payment_id: data.payment_id,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      }
    } catch (error: any) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É –æ –ø–ª–∞—Ç–µ–∂–µ', {
        description: 'Error sending payment notification to ambassador',
        ambassadorId: data.ambassador_id,
        telegramId: data.telegram_id,
        paymentId: data.payment_id,
        error: error.message,
        stack: error.stack,
      })

      return {
        success: false,
        ambassador_id: data.ambassador_id,
        telegram_id: data.telegram_id,
        payment_id: data.payment_id,
        error: error.message,
      }
    }
  }
)
