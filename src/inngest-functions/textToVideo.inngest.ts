import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'
import { v4 as uuidv4 } from 'uuid'
import { processVideoGeneration } from '@/core/replicate'
import { downloadFile } from '@/helpers/downloadFile'
import { errorMessageAdmin } from '@/helpers'
import { mkdir, writeFile } from 'fs/promises'
import path from 'path'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  saveVideoUrlToSupabase,
} from '@/core/supabase'
import { checkUserBalance } from '@/utils/checkUserBalance'

interface TextToVideoEvent {
  data: {
    prompt: string
    videoModel: string
    telegram_id: string
    username: string
    is_ru: boolean
    bot_name: string
  }
}

interface VideoGenerationResult {
  videoUrl: string
}

export const textToVideoFunction = inngest.createFunction(
  {
    id: 'text-to-video-function',
    name: 'text-to-video-function',
    retries: 3,
  },
  { event: 'text-to-video/generate' },
  async ({ event, step }) => {
    let validatedParams: TextToVideoEvent['data'] | null = null
    let modelConfig = null

    try {
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      validatedParams = await step.run('validate-input', async () => {
        const { prompt, videoModel, telegram_id, username, is_ru, bot_name } =
          event.data

        logger.info('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Validating input data',
          telegram_id,
          videoModel,
        })

        if (!prompt) {
          throw new Error('Prompt is required')
        }

        if (!videoModel) {
          throw new Error('Video model is required')
        }

        if (!telegram_id) {
          throw new Error('Telegram ID is required')
        }

        if (!username) {
          throw new Error('Username is required')
        }

        if (!bot_name) {
          throw new Error('Bot name is required')
        }

        return {
          prompt,
          videoModel,
          telegram_id,
          username,
          is_ru,
          bot_name,
        }
      })

      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      const userCheck = await step.run('check-user', async () => {
        const userExists = await getUserByTelegramId(
          validatedParams.telegram_id
        )
        if (!userExists) {
          throw new Error(
            `User with ID ${validatedParams.telegram_id} does not exist.`
          )
        }

        const level = userExists.level
        if (level === 9) {
          await updateUserLevelPlusOne(validatedParams.telegram_id, level)
        }

        return {
          user: userExists,
          aspect_ratio: userExists.aspect_ratio,
        }
      })

      // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
      modelConfig = VIDEO_MODELS_CONFIG[validatedParams.videoModel]

      if (!modelConfig) {
        logger.error('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', {
          description: 'Model configuration not found',
          videoModel: validatedParams.videoModel,
          availableModels: Object.keys(VIDEO_MODELS_CONFIG),
        })
        throw new Error('Model configuration not found')
      }

      logger.info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞:', {
        description: 'Model configuration retrieved',
        model: modelConfig.title,
        basePrice: modelConfig.basePrice,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceCheck = await checkUserBalance({
        telegram_id: validatedParams.telegram_id,
        bot_name: validatedParams.bot_name,
        required_amount: modelConfig.basePrice * 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∑–≤–µ–∑–¥—ã
        is_ru: validatedParams.is_ru,
        operation_type: ModeEnum.TextToVideo,
      })

      if (!balanceCheck.hasBalance) {
        throw new Error('Insufficient balance')
      }

      // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
      const paymentResult = await step.run('process-payment', async () => {
        if (!modelConfig) {
          throw new Error('Model configuration not found')
        }

        logger.info('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≤–∏–¥–µ–æ', {
          description: 'Processing payment for video',
          telegram_id: validatedParams.telegram_id,
          model: validatedParams.videoModel,
          cost: modelConfig.basePrice,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ payment/process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await inngest.send({
          id: `payment-${
            validatedParams.telegram_id
          }-${Date.now()}-${uuidv4()}`,
          name: 'payment/process',
          data: {
            telegram_id: validatedParams.telegram_id,
            mode: ModeEnum.TextToVideo,
            is_ru: validatedParams.is_ru,
            bot_name: validatedParams.bot_name,
            description: `Payment for video generation`,
            paymentAmount: modelConfig.basePrice,
            type: 'outcome',
            metadata: {
              service_type: ModeEnum.TextToVideo,
              prompt: validatedParams.prompt,
              model: validatedParams.videoModel,
            },
          },
        })

        return { success: true }
      })

      // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await step.run('send-start-notification', async () => {
        const { bot } = getBotByName(validatedParams.bot_name)
        await bot.telegram.sendMessage(
          validatedParams.telegram_id,
          validatedParams.is_ru
            ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...'
            : '‚è≥ Generating video...',
          {
            reply_markup: {
              remove_keyboard: true,
            },
          }
        )
      })

      // –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
      const videoResult = await step.run('generate-video', async () => {
        logger.info('üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ', {
          description: 'Generating video',
          model: validatedParams.videoModel,
          telegram_id: validatedParams.telegram_id,
        })

        const output = await processVideoGeneration(
          validatedParams.videoModel,
          userCheck.aspect_ratio,
          validatedParams.prompt
        )

        logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', {
          description: 'Video successfully generated',
          model: validatedParams.videoModel,
          output_type: typeof output,
        })

        if (typeof output !== 'string') {
          logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:', {
            description: 'Unexpected output format',
            output: JSON.stringify(output, null, 2),
          })
          throw new Error(`Unexpected output format from API: ${typeof output}`)
        }

        return { videoUrl: output } as VideoGenerationResult
      })

      // –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
      const savedVideo = await step.run('save-video', async () => {
        const videoLocalPath = path.join(
          process.cwd(),
          'uploads',
          validatedParams.telegram_id,
          'text-to-video',
          `${new Date().toISOString()}.mp4`
        )

        await mkdir(path.dirname(videoLocalPath), { recursive: true })

        const videoBuffer = await downloadFile(videoResult.videoUrl)
        await writeFile(videoLocalPath, new Uint8Array(videoBuffer))

        await saveVideoUrlToSupabase(
          validatedParams.telegram_id,
          videoResult.videoUrl,
          videoLocalPath,
          validatedParams.videoModel
        )

        return { videoLocalPath }
      })

      // –®–∞–≥ 8: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-video', async () => {
        const { bot } = getBotByName(validatedParams.bot_name)
        await bot.telegram.sendVideo(validatedParams.telegram_id, {
          source: savedVideo.videoLocalPath,
        })

        await bot.telegram.sendMessage(
          validatedParams.telegram_id,
          validatedParams.is_ru
            ? 'üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ?'
            : 'üé¨ Your video has been generated!\n\nGenerate more?',
          {
            reply_markup: {
              keyboard: [
                [
                  {
                    text: validatedParams.is_ru
                      ? 'üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?'
                      : 'üé• Generate new video?',
                  },
                ],
                [
                  {
                    text: validatedParams.is_ru
                      ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                      : 'üè† Main menu',
                  },
                ],
              ],
              resize_keyboard: true,
            },
          }
        )
      })

      logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        description: 'Video successfully generated and sent',
        telegram_id: validatedParams.telegram_id,
        model: validatedParams.videoModel,
      })

      return {
        success: true,
        videoUrl: videoResult.videoUrl,
        localPath: savedVideo.videoLocalPath,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:', {
        description: 'Error generating video',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        params: validatedParams,
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (validatedParams && modelConfig) {
        try {
          logger.info('üí∞ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤', {
            description: 'Starting refund process',
            telegram_id: validatedParams.telegram_id,
            amount: modelConfig.basePrice,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
          await inngest.send({
            id: `refund-${
              validatedParams.telegram_id
            }-${Date.now()}-${uuidv4()}`,
            name: 'payment/process',
            data: {
              telegram_id: validatedParams.telegram_id,
              mode: ModeEnum.TextToVideo,
              is_ru: validatedParams.is_ru,
              bot_name: validatedParams.bot_name,
              description: `Refund for failed video generation`,
              paymentAmount: modelConfig.basePrice,
              type: 'income', // –í–æ–∑–≤—Ä–∞—Ç –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              metadata: {
                service_type: ModeEnum.TextToVideo,
                prompt: validatedParams.prompt,
                model: validatedParams.videoModel,
                error: error instanceof Error ? error.message : String(error),
              },
            },
          })

          logger.info('‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω', {
            description: 'Refund initiated',
            telegram_id: validatedParams.telegram_id,
            amount: modelConfig.basePrice * 100,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          await inngest.send({
            id: `failed-video-${
              validatedParams.telegram_id
            }-${Date.now()}-${uuidv4()}`,
            name: 'video/generation.failed',
            data: {
              telegram_id: validatedParams.telegram_id,
              model: validatedParams.videoModel,
              error: error instanceof Error ? error.message : String(error),
              prompt: validatedParams.prompt,
            },
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const { bot } = getBotByName(validatedParams.bot_name)
          await bot.telegram.sendMessage(
            validatedParams.telegram_id,
            validatedParams.is_ru
              ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
              : '‚ùå An error occurred while generating video. The funds have been returned to your balance. Please try again.'
          )

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
          await errorMessageAdmin(error as Error)
        } catch (refundError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤:', {
            description: 'Error processing refund',
            error:
              refundError instanceof Error
                ? refundError.message
                : 'Unknown error',
            telegram_id: validatedParams.telegram_id,
          })
        }
      }

      throw error
    }
  }
)
