import { TelegramId } from '@/interfaces/telegram.interface'
import { inngest } from '@/inngest-functions/clients'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { errorMessage, errorMessageAdmin } from '@/helpers'
import { ModeEnum, calculateModeCost } from '@/price/helpers/modelsCost'
import { sendBalanceMessage } from '@/price/helpers'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'
import { v4 as uuidv4 } from 'uuid'
import axios from 'axios'
import { TransactionType } from '@/interfaces/payments.interface'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
interface TextToVideoEvent {
  data: {
    prompt: string // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    telegram_id: TelegramId
    is_ru: boolean
    bot_name: string
    model_id?: string // ID –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    aspect_ratio?: string // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '16:9')
    duration?: number // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    _test?: {
      insufficient_balance?: boolean
      api_error?: boolean
    }
    username?: string
  }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 */
type VideoResult =
  | { success: true; videoUrl: string; previewUrl?: string }
  | { success: false; error: string }

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export const textToVideoFunction = inngest.createFunction(
  {
    name: 'text-to-video-generation',
    id: 'text-to-video',
    concurrency: { limit: 5 },
    retries: 2,
  },
  { event: 'text-to-video.requested' },
  async ({ event, step }: any) => {
    let validatedParams: TextToVideoEvent['data'] | null = null
    let operationId: string | null = null
    let videoUrl: string | null = null
    let previewUrl: string | null = null

    try {
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      validatedParams = (await step.run('validate-input', () => {
        if (
          !event.data ||
          !event.data.prompt ||
          !event.data.telegram_id ||
          event.data.is_ru === undefined ||
          !event.data.bot_name
        ) {
          throw new Error('Missing required fields')
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
        const modelId = event.data.model_id || 'kling-v1.6-pro'
        const modelConfig = VIDEO_MODELS_CONFIG[modelId]
        if (!modelConfig || !modelConfig.inputType.includes('text')) {
          throw new Error(`Model ${modelId} does not support text input`)
        }

        const validData: TextToVideoEvent['data'] = {
          prompt: event.data.prompt,
          telegram_id: event.data.telegram_id,
          is_ru: event.data.is_ru,
          bot_name: event.data.bot_name,
          model_id: modelId,
          aspect_ratio: event.data.aspect_ratio || '16:9',
          duration: event.data.duration || 6,
        }

        if (event.data._test) {
          validData._test = event.data._test
        }

        if (event.data.username) {
          validData.username = event.data.username
        }

        return validData
      })) as TextToVideoEvent['data']

      if (!validatedParams) {
        throw new Error('Validation failed - missing required parameters')
      }

      const params = validatedParams

      // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await step.run('get-user-info', async () => {
        const userResult = await getUserByTelegramIdString(params.telegram_id)
        if (!userResult) throw new Error('User not found')

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –µ–≥–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        if (userResult.level === 9) {
          await updateUserLevelPlusOne(userResult.telegram_id, userResult.level)
        }

        return userResult
      })

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
      operationId = await step.run('generate-operation-id', () => {
        return uuidv4()
      })

      // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await step.run('send-generating-notification', async () => {
        const botResult = getBotByName(params.bot_name)
        if (!botResult?.bot) {
          throw new Error(`Bot ${params.bot_name} not found`)
        }
        const { bot } = botResult

        await bot.telegram.sendMessage(
          params.telegram_id,
          params.is_ru
            ? '‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞...'
            : '‚è≥ Starting the text-to-video generation process...'
        )

        return { sent: true }
      })

      // –®–∞–≥ 4: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const costCalculation = await step.run('calculate-cost', async () => {
        // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const selectedModel = VIDEO_MODELS_CONFIG[params.model_id]
        if (!selectedModel) {
          throw new Error(`Model ${params.model_id} not found in configuration`)
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        const cost = calculateModeCost({
          mode: ModeEnum.TextToVideo,
          numImages: 1,
        })

        console.log('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
          description: 'Operation cost',
          cost,
          model: selectedModel.id,
          basePrice: selectedModel.basePrice,
        })

        return {
          cost,
          model: selectedModel,
          operationId,
        }
      })

      // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await step.run('check-balance', async () => {
        // –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if (params._test?.insufficient_balance) {
          throw new Error('Insufficient balance (test)')
        }

        // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (user.balance < costCalculation.cost.stars) {
          const botResult = getBotByName(params.bot_name)
          if (!botResult?.bot) {
            throw new Error(`Bot ${params.bot_name} not found`)
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
          await sendBalanceMessage(
            params.telegram_id,
            user.balance,
            costCalculation.cost.stars,
            params.is_ru,
            botResult.bot.telegram
          )

          throw new Error('Insufficient balance')
        }

        return { sufficient: true }
      })

      // –®–∞–≥ 6: –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await step.run('charge-user', async () => {
        await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id: params.telegram_id,
            amount: costCalculation.cost.stars,
            type: 'money_expense',
            description: params.is_ru
              ? '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞'
              : 'Text to video generation',
            bot_name: params.bot_name,
            service_type: ModeEnum.TextToVideo,
            operation_id: operationId,
          },
        })

        return { charged: true }
      })

      // –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
      const generationResult = await step.run('generate-video', async () => {
        // –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ—à–∏–±–∫–∏ API
        if (params._test?.api_error) {
          throw new Error('API error (test)')
        }

        try {
          // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
          const apiData = {
            prompt: params.prompt,
            model: params.model_id,
            aspect_ratio: params.aspect_ratio,
            duration: params.duration,
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
          const response = await axios.post(
            `${process.env.VIDEO_API_URL}/generate`,
            apiData,
            {
              headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.VIDEO_API_KEY}`,
              },
            }
          )

          if (!response.data || !response.data.videoUrl) {
            throw new Error('Invalid API response')
          }

          videoUrl = response.data.videoUrl
          if (response.data.previewUrl) {
            previewUrl = response.data.previewUrl
          }

          return {
            success: true,
            videoUrl,
            previewUrl,
          } as VideoResult
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:', error)
          throw error
        }
      })

      // –®–∞–≥ 8: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-result', async () => {
        const botResult = getBotByName(params.bot_name)
        if (!botResult?.bot) {
          throw new Error(`Bot ${params.bot_name} not found`)
        }
        const { bot } = botResult

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (previewUrl) {
          await bot.telegram.sendPhoto(params.telegram_id, previewUrl, {
            caption: params.is_ru
              ? 'üé¨ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ'
              : 'üé¨ Preview of generated video',
          })
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        if (videoUrl) {
          await bot.telegram.sendVideo(params.telegram_id, videoUrl, {
            caption: params.is_ru
              ? '‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!'
              : '‚ú® Your video is ready!',
          })
        }

        return { sent: true }
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        success: true,
        videoUrl,
        previewUrl,
        operationId,
        telegram_id: params.telegram_id,
      }
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      console.error('‚ùå Error in text-to-video generation:', error)
      const errorMsg = error instanceof Error ? error.message : String(error)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        const botResult = getBotByName(validatedParams?.bot_name || '')
        if (botResult?.bot && validatedParams) {
          await errorMessage(
            validatedParams.telegram_id,
            validatedParams.is_ru,
            errorMsg
          )

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
          await errorMessageAdmin(
            validatedParams.telegram_id,
            errorMsg,
            operationId
          )
        }
      } catch (notifyError) {
        console.error('‚ùå Error sending error notification:', notifyError)
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      return {
        success: false,
        error: errorMsg,
        operationId,
        telegram_id: validatedParams?.telegram_id,
      }
    }
  }
)
