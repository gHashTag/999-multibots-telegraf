import { inngest } from '@/core/inngest/clients'
import { BalanceOperationResult } from '@/interfaces'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { createPayment } from '@/core/supabase/setPayments'
import { supabase } from '@/core/supabase'

import { TelegramId } from '@/interfaces/telegram.interface'

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedPayments = new Map<string, BalanceOperationResult>()

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
 */
const safeSendMessage = async (
  bot: any, // –û—Å—Ç–∞–≤–ª—è–µ–º any —Ç.–∫. —Ä–∞–∑–Ω—ã–µ –±–æ—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  telegram_id: TelegramId,
  message: string
): Promise<boolean> => {
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
    if (bot.telegram && typeof bot.telegram.sendMessage === 'function') {
      await bot.telegram.sendMessage(telegram_id, message)
    } else if (typeof bot.sendMessage === 'function') {
      await bot.sendMessage(telegram_id, message)
    } else {
      throw new Error('No valid send method found on bot')
    }
    return true
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
    return false
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å —à–∞–≥–∞–º–∏
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: `payment-processor`,
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        amount,
        is_ru = false,
        bot_name,
        description,
        operation_id,
        bot,
        metadata = {},
        type = 'money_expense',
        currency = 'STARS',
      } = event.data

      // –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
      const initResult = await step.run('init-operation', async () => {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        const opId =
          operation_id || `${telegram_id}-${amount}-${new Date().getTime()}-${uuidv4()}`

        logger.info('üöÄ –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Step 1: Operation initialization',
          telegram_id,
          amount,
          operation_id: opId,
          bot_name,
          payment_type: type,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (processedPayments.has(opId)) {
          const cachedResult = processedPayments.get(opId)
          logger.info('üîÑ –ù–∞–π–¥–µ–Ω –∫–µ—à –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
            description: 'Found cached operation, skipping processing',
            telegram_id,
            operation_id: opId,
            cached_result: cachedResult,
          })
          return { opId, cachedResult, shouldContinue: false }
        }

        return { opId, shouldContinue: true }
      })

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (
        !initResult.shouldContinue &&
        'cachedResult' in initResult &&
        initResult.cachedResult
      ) {
        logger.info('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
          description: 'Returning cached result',
          telegram_id,
          operation_id: initResult.opId,
        })
        return initResult.cachedResult
      }

      // –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await step.run('validate-input', async () => {
        logger.info('üßê –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Step 2: Input data validation',
          telegram_id,
          amount_type: typeof amount,
          amount_value: amount,
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
            description: 'Missing telegram_id',
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'telegram_id is required',
            modePrice: amount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        if (amount === undefined || amount === null || isNaN(Number(amount))) {
          logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Invalid payment amount',
            amount,
            amount_type: typeof amount,
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Payment amount is invalid',
            modePrice: amount || 0,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        logger.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', {
          description: 'Input data is valid',
          telegram_id,
          amount,
        })

        return { isValid: true }
      })

      if (
        !validationResult.isValid &&
        'errorResult' in validationResult &&
        validationResult.errorResult
      ) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
          description: 'Validation failed',
          telegram_id,
          operation_id: initResult.opId,
        })
        return validationResult.errorResult
      }

      // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResult = await step.run('check-balance', async () => {
        logger.info('üí≥ –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Step 3: Getting user balance',
          telegram_id,
        })

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await getUserBalance(telegram_id, bot_name)

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Retrieved user balance',
          telegram_id,
          currentBalance,
          currentBalance_type: typeof currentBalance,
          isNull: currentBalance === null,
          isUndefined: currentBalance === undefined,
          isNaN: isNaN(Number(currentBalance)),
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
        if (
          currentBalance === undefined ||
          currentBalance === null ||
          isNaN(Number(currentBalance))
        ) {
          logger.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
            description: 'Invalid balance received',
            currentBalance,
            telegram_id,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          const errorMessage = is_ru
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            : 'An error occurred while checking your balance. Please try again later or contact support.'

          if (bot) {
            await safeSendMessage(bot, telegram_id, errorMessage)
          }

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Invalid balance',
            modePrice: amount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { hasValidBalance: false, errorResult, currentBalance: 0 }
        }

        logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
          description: 'Balance retrieved successfully',
          telegram_id,
          currentBalance,
        })

        return { hasValidBalance: true, currentBalance }
      })

      if (
        !balanceResult.hasValidBalance &&
        'errorResult' in balanceResult &&
        balanceResult.errorResult
      ) {
        logger.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'User balance issue',
          telegram_id,
          operation_id: initResult.opId,
        })
        return balanceResult.errorResult
      }

      // –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
      const paymentRecord = await step.run('create-payment', async () => {
        try {
          logger.info('üí≥ –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
            description: 'Step 4: Creating payment record',
            telegram_id,
            amount,
            type,
            operation_id: initResult.opId,
          })

          const payment = await createPayment({
            telegram_id,
            amount,
            stars: Math.abs(amount),
            currency: currency || 'STARS',
            description: type,
            metadata: {},
            payment_method: 'balance',
            bot_name,
            inv_id: operation_id,
            status: 'PENDING',
          })

          if (!payment || !payment.payment_id) {
            throw new Error('Payment creation failed')
          }

          logger.info('‚úÖ –ó–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —Å–æ–∑–¥–∞–Ω–∞:', {
            description: 'Payment record created',
            payment_id: payment.payment_id,
            telegram_id,
            amount,
            type,
          })

          return payment
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Error creating payment',
            error: error instanceof Error ? error.message : 'Unknown error',
            telegram_id,
            amount,
            type,
          })
          return {
            success: false,
            error_message: is_ru
              ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
              : 'Error creating payment',
          }
        }
      })

      if (!paymentRecord || !('payment_id' in paymentRecord)) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', {
          description: 'Error creating payment',
          telegram_id,
          amount,
          type,
        })
        return {
          success: false,
          current_balance: balanceResult.currentBalance,
          error_message: is_ru
            ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
            : 'Error creating payment',
        }
      }

      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (paymentRecord.payment_id) {
        // –®–ê–ì 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updateResult = await step.run('update-balance', async () => {
          logger.info('üí∞ –®–ê–ì 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Step 5: Updating balance',
            telegram_id,
            amount,
            type,
          })

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
          const currentBalance = await getUserBalance(telegram_id, bot_name)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
          if (
            type === 'money_expense' &&
            currentBalance !== null &&
            currentBalance < Math.abs(amount)
          ) {
            const errorMessage = is_ru
              ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${Math.abs(
                  amount
                )}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance}`
              : `‚ùå Insufficient funds. Required: ${Math.abs(
                  amount
                )}, available: ${currentBalance}`

            logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
              description: 'Insufficient funds',
              telegram_id,
              required: Math.abs(amount),
              available: currentBalance,
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ FAILED
            await supabase
              .from('payments_v2')
              .update({ status: 'FAILED' })
              .eq('payment_id', paymentRecord.payment_id)

            const errorResult: BalanceOperationResult = {
              newBalance: currentBalance || 0,
              success: false,
              error: errorMessage,
              modePrice: Math.abs(amount),
            }
            processedPayments.set(initResult.opId, errorResult)
            return errorResult
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          const newBalance = await updateUserBalance({
            telegram_id,
            amount,
            type,
            operation_description: description,
            metadata,
            bot_name,
            payment_method: 'balance',
          })

          if (!newBalance.success || newBalance.newBalance === null) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
              description: 'Error updating balance',
              telegram_id,
              amount,
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ FAILED
            await supabase
              .from('payments_v2')
              .update({ status: 'FAILED' })
              .eq('payment_id', paymentRecord.payment_id)

            const errorResult: BalanceOperationResult = {
              newBalance: currentBalance || 0,
              success: false,
              error: is_ru
                ? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
                : 'Error updating balance',
              modePrice: Math.abs(amount),
            }
            processedPayments.set(initResult.opId, errorResult)
            return errorResult
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ COMPLETED
          await supabase
            .from('payments_v2')
            .update({ status: 'COMPLETED' })
            .eq('payment_id', paymentRecord.payment_id)

          logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
            description: 'Balance updated successfully',
            telegram_id,
            newBalance: newBalance.newBalance,
            amount,
          })

          const successResult: BalanceOperationResult = {
            newBalance: newBalance.newBalance,
            success: true,
            error: undefined,
            modePrice: Math.abs(amount),
          }
          processedPayments.set(initResult.opId, successResult)
          return successResult
        })

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (
          !updateResult.success &&
          'error' in updateResult &&
          updateResult.error
        ) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Error in balance update process',
            telegram_id,
            operation_id: initResult.opId,
          })
          return updateResult
        }

        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
        await step.run('cleanup-cache', async () => {
          if (processedPayments.size > 100) {
            logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', {
              description: 'Cleaning up old operations cache',
              cache_size_before: processedPayments.size,
            })

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∫–ª—é—á–∞)
            const keys = Array.from(processedPayments.keys())
            const keysToRemove = keys
              .sort((a, b) => {
                const timeA = Number(a.split('-')[1]) || 0
                const timeB = Number(b.split('-')[1]) || 0
                return timeA - timeB
              })
              .slice(0, 50) // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 50 –∑–∞–ø–∏—Å–µ–π

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            keysToRemove.forEach(key => {
              processedPayments.delete(key)
            })

            logger.info('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω', {
              description: 'Cache cleaned up',
              removed_count: keysToRemove.length,
              cache_size_after: processedPayments.size,
            })
          }
        })

        logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', {
          description: 'Balance operation successfully completed',
          telegram_id,
          operation_id: initResult.opId,
          newBalance: updateResult.newBalance,
        })

        return updateResult
      }
    } catch (error) {
      logger.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'General error in payment processing',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        event_data: event.data,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
      await inngest.send({
        id: `payment-process-failed-${Date.now()}-${uuidv4()}`,
        name: 'payment/process.failed',
        data: {
          ...event.data,
          error: error instanceof Error ? error.message : 'Unknown error',
        },
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      return {
        newBalance: 0,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        modePrice: Number(event.data.amount) || 0,
      }
    }
  }
)
