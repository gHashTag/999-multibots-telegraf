import { inngest } from '@/core/inngest/clients'
import { BalanceOperationResult, PaymentService } from '@/interfaces'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { logger } from '@/utils/logger'

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedPayments = new Map<string, BalanceOperationResult>()

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
 */
async function safeSendMessage(
  bot: any,
  telegram_id: number,
  message: string
): Promise<boolean> {
  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.debug('ü§ñ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞:', {
      description: 'Bot object structure',
      hasBot: !!bot,
      hasContext: !!bot?.context,
      hasTelegram: !!bot?.telegram,
      telegramType: typeof bot?.telegram,
      hasOptions: !!bot?.options,
      hasSendMessage: typeof bot?.sendMessage === 'function',
      hasTelegramSendMessage: typeof bot?.telegram?.sendMessage === 'function',
    })

    if (!bot) {
      logger.warn('‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        description: 'Bot not found for sending message',
        telegram_id,
      })
      return false
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
    if (typeof bot.telegram?.sendMessage === 'function') {
      await bot.telegram.sendMessage(telegram_id, message)
      return true
    }

    if (typeof bot.sendMessage === 'function') {
      await bot.sendMessage(telegram_id, message)
      return true
    }

    logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      description: 'No method found for sending message',
      telegram_id,
      botType: typeof bot,
    })
    return false
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id,
    })
    return false
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å —à–∞–≥–∞–º–∏
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: `payment-processor`,
    idempotency:
      'event.data.telegram_id + "-" + event.data.paymentAmount + "-" + event.data.operation_id',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        paymentAmount,
        is_ru = false,
        bot_name,
        description,
        operation_id,
        bot,
        metadata = {},
        type = 'outcome', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é outcome, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
      } = event.data

      // –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
      const initResult = await step.run('init-operation', async () => {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        const opId =
          operation_id ||
          `${telegram_id}-${paymentAmount}-${new Date().getTime()}`

        logger.info('üöÄ –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Step 1: Operation initialization',
          telegram_id,
          paymentAmount,
          operation_id: opId,
          bot_name,
          payment_type: type,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (processedPayments.has(opId)) {
          const cachedResult = processedPayments.get(opId)
          logger.info('üîÑ –ù–∞–π–¥–µ–Ω –∫–µ—à –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
            description: 'Found cached operation, skipping processing',
            telegram_id,
            operation_id: opId,
            cached_result: cachedResult,
          })
          return { opId, cachedResult, shouldContinue: false }
        }

        return { opId, shouldContinue: true }
      })

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (
        !initResult.shouldContinue &&
        'cachedResult' in initResult &&
        initResult.cachedResult
      ) {
        logger.info('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
          description: 'Returning cached result',
          telegram_id,
          operation_id: initResult.opId,
        })
        return initResult.cachedResult
      }

      // –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await step.run('validate-input', async () => {
        logger.info('üßê –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Step 2: Input data validation',
          telegram_id,
          payment_amount_type: typeof paymentAmount,
          payment_amount_value: paymentAmount,
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
            description: 'Missing telegram_id',
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'telegram_id is required',
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        if (
          paymentAmount === undefined ||
          paymentAmount === null ||
          isNaN(Number(paymentAmount))
        ) {
          logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Invalid payment amount',
            paymentAmount,
            payment_amount_type: typeof paymentAmount,
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Payment amount is invalid',
            modePrice: paymentAmount || 0,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        logger.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', {
          description: 'Input data is valid',
          telegram_id,
          paymentAmount,
        })

        return { isValid: true }
      })

      if (
        !validationResult.isValid &&
        'errorResult' in validationResult &&
        validationResult.errorResult
      ) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
          description: 'Validation failed',
          telegram_id,
          operation_id: initResult.opId,
        })
        return validationResult.errorResult
      }

      // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResult = await step.run('check-balance', async () => {
        logger.info('üí≥ –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Step 3: Getting user balance',
          telegram_id,
        })

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await getUserBalance(telegram_id, bot_name)

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Retrieved user balance',
          telegram_id,
          currentBalance,
          currentBalance_type: typeof currentBalance,
          isNull: currentBalance === null,
          isUndefined: currentBalance === undefined,
          isNaN: isNaN(Number(currentBalance)),
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
        if (
          currentBalance === undefined ||
          currentBalance === null ||
          isNaN(Number(currentBalance))
        ) {
          logger.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
            description: 'Invalid balance received',
            currentBalance,
            telegram_id,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          const errorMessage = is_ru
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            : 'An error occurred while checking your balance. Please try again later or contact support.'

          if (bot) {
            await safeSendMessage(bot, telegram_id, errorMessage)
          }

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Invalid balance',
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { hasValidBalance: false, errorResult, currentBalance: 0 }
        }

        logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
          description: 'Balance retrieved successfully',
          telegram_id,
          currentBalance,
        })

        return { hasValidBalance: true, currentBalance }
      })

      if (
        !balanceResult.hasValidBalance &&
        'errorResult' in balanceResult &&
        balanceResult.errorResult
      ) {
        logger.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'User balance issue',
          telegram_id,
          operation_id: initResult.opId,
        })
        return balanceResult.errorResult
      }

      // –®–ê–ì 4: –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–∞–Ω–∏–µ (outcome), –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
      let fundsResult: {
        hasSufficientFunds: boolean
        currentBalance?: number
        paymentAmountNumber?: number
        errorResult?: {
          newBalance: number
          success: boolean
          error: string
          modePrice: number
        }
      } = { hasSufficientFunds: true }

      if (type === 'outcome') {
        fundsResult = await step.run('check-funds', async () => {
          logger.info('üíµ –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤', {
            description: 'Step 4: Checking sufficient funds',
            telegram_id,
            paymentAmount: Number(paymentAmount),
            currentBalance: balanceResult.currentBalance,
          })

          const paymentAmountNumber = Number(paymentAmount)
          const currentBalance = balanceResult.currentBalance

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
          if (currentBalance < paymentAmountNumber) {
            logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:', {
              description: 'Insufficient funds',
              telegram_id,
              currentBalance,
              requiredAmount: paymentAmountNumber,
              difference: paymentAmountNumber - currentBalance,
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
            const errorMessage = is_ru
              ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${paymentAmountNumber.toFixed(
                  2
                )} ‚≠êÔ∏è, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`
              : `‚ùå Insufficient funds. Required: ${paymentAmountNumber.toFixed(
                  2
                )} ‚≠êÔ∏è, your balance: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`

            if (bot) {
              await safeSendMessage(bot, telegram_id, errorMessage)
            }

            const errorResult = {
              newBalance: currentBalance,
              success: false,
              error: 'Insufficient funds',
              modePrice: paymentAmountNumber,
            }
            processedPayments.set(initResult.opId, errorResult)
            return { hasSufficientFunds: false, errorResult }
          }

          logger.info('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', {
            description: 'Sufficient funds available',
            telegram_id,
            currentBalance,
            paymentAmount: paymentAmountNumber,
            remainingBalance: (currentBalance - paymentAmountNumber).toFixed(2),
          })

          return {
            hasSufficientFunds: true,
            currentBalance,
            paymentAmountNumber,
          }
        })

        if (
          !fundsResult.hasSufficientFunds &&
          'errorResult' in fundsResult &&
          fundsResult.errorResult
        ) {
          logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
            description: 'Insufficient funds for operation',
            telegram_id,
            operation_id: initResult.opId,
          })
          return fundsResult.errorResult
        }
      }

      // –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏)
      const balanceData = await step.run('calculate-balance', async () => {
        logger.info('üßÆ –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Step 5: Calculating new balance',
          telegram_id,
          currentBalance: balanceResult.currentBalance,
          paymentAmount: Number(paymentAmount),
          operationType: type,
        })

        const paymentAmountNumber = Number(paymentAmount)
        const currentBalance = balanceResult.currentBalance

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        let newBalance
        if (type === 'income') {
          newBalance = currentBalance + paymentAmountNumber
        } else {
          newBalance = currentBalance - paymentAmountNumber
        }

        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        newBalance = parseFloat(newBalance.toFixed(2))

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        if (newBalance < 0) {
          logger.warn('‚ö†Ô∏è –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ 0', {
            description: 'Calculated balance is negative, adjusting to 0',
            telegram_id,
            initialBalance: currentBalance,
            calculatedBalance: newBalance,
            correctedBalance: 0,
          })
          newBalance = 0
        }

        return {
          newBalance,
          currentBalance,
          paymentAmountNumber,
          operation_type: type,
        }
      })

      // –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updateResult = await step.run('update-balance', async () => {
        logger.info('üíæ –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î', {
          description: 'Step 6: Updating balance in database',
          telegram_id,
          currentBalance: balanceData.currentBalance,
          newBalance: balanceData.newBalance,
          paymentAmount: balanceData.paymentAmountNumber,
          operation_type: balanceData.operation_type,
        })

        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          let serviceType = 'System'

          // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
          if (description) {
            const descLower = description.toLowerCase()
            if (
              descLower.includes('image') ||
              descLower.includes('photo') ||
              descLower.includes('–∫–∞—Ä—Ç–∏–Ω')
            ) {
              serviceType = 'NeuroPhoto'
            } else if (
              descLower.includes('speech') ||
              descLower.includes('–≥–æ–ª–æ—Å')
            ) {
              serviceType = 'Text to speech'
            } else if (
              descLower.includes('training') ||
              descLower.includes('–æ–±—É—á–µ–Ω–∏')
            ) {
              serviceType = 'Training'
            } else if (descLower.includes('refund')) {
              serviceType = 'Refund'
            }
          }

          // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          if (
            serviceType === 'System' &&
            metadata &&
            typeof metadata === 'object' &&
            'service_type' in metadata
          ) {
            serviceType = metadata.service_type as PaymentService
          }

          logger.info('üõéÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞', {
            description: 'Service type determined',
            telegram_id,
            serviceType,
            originalDescription: description,
          })

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          const combinedMetadata = {
            ...metadata,
            operation_id: initResult.opId,
            service_type: serviceType,
          }

          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
          const result = await updateUserBalance({
            telegram_id,
            amount: balanceData.paymentAmountNumber,
            type: balanceData.operation_type,
            operation_description:
              description ||
              `${balanceData.operation_type} operation via payment/process`,
            metadata: combinedMetadata,
            bot_name,
          })

          logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Balance update result',
            telegram_id,
            success: result.success,
            newBalance: result.newBalance,
            operation_id: initResult.opId,
          })

          if (!result.success) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
              description: 'Balance update failed',
              telegram_id,
              error: 'Failed to update balance',
            })

            const errorResult = {
              newBalance: balanceData.currentBalance,
              success: false,
              error: 'Failed to update balance',
              modePrice: balanceData.paymentAmountNumber,
            }
            processedPayments.set(initResult.opId, errorResult)
            return { updateSuccess: false, errorResult }
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
          const shouldNotifyUser = !description?.includes('internal') && bot

          if (shouldNotifyUser) {
            const successMessage = is_ru
              ? `‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n${
                  balanceData.operation_type === 'income'
                    ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
                    : '–°–ø–∏—Å–∞–Ω–∏–µ'
                }: ${balanceData.paymentAmountNumber.toFixed(
                  2
                )} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${result.newBalance} ‚≠êÔ∏è`
              : `‚úÖ Operation completed successfully!\n${
                  balanceData.operation_type === 'income' ? 'Added' : 'Charged'
                }: ${balanceData.paymentAmountNumber.toFixed(
                  2
                )} ‚≠êÔ∏è\nYour balance: ${result.newBalance} ‚≠êÔ∏è`

            try {
              await safeSendMessage(bot, telegram_id, successMessage)
            } catch (notifyError) {
              logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
                description: 'Failed to send notification',
                telegram_id,
                error:
                  notifyError instanceof Error
                    ? notifyError.message
                    : 'Unknown error',
              })
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
          const successResult = {
            newBalance: result.newBalance,
            success: true,
            modePrice: balanceData.paymentAmountNumber,
          }
          processedPayments.set(initResult.opId, successResult)

          return {
            updateSuccess: true,
            result: successResult,
            finalBalance: result.newBalance,
          }
        } catch (updateError) {
          logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Exception during balance update',
            telegram_id,
            error:
              updateError instanceof Error
                ? updateError.message
                : 'Unknown error',
            stack: updateError instanceof Error ? updateError.stack : undefined,
          })

          const errorResult = {
            newBalance: balanceData.currentBalance,
            success: false,
            error:
              updateError instanceof Error
                ? updateError.message
                : 'Unknown error',
            modePrice: balanceData.paymentAmountNumber,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { updateSuccess: false, errorResult }
        }
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (
        !updateResult.updateSuccess &&
        'errorResult' in updateResult &&
        updateResult.errorResult
      ) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Error in balance update process',
          telegram_id,
          operation_id: initResult.opId,
        })
        return updateResult.errorResult
      }

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
      await step.run('cleanup-cache', async () => {
        if (processedPayments.size > 100) {
          logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', {
            description: 'Cleaning up old operations cache',
            cache_size_before: processedPayments.size,
          })

          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∫–ª—é—á–∞)
          const keys = Array.from(processedPayments.keys())
          const keysToRemove = keys
            .sort((a, b) => {
              const timeA = Number(a.split('-')[1]) || 0
              const timeB = Number(b.split('-')[1]) || 0
              return timeA - timeB
            })
            .slice(0, 50) // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 50 –∑–∞–ø–∏—Å–µ–π

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
          keysToRemove.forEach(key => {
            processedPayments.delete(key)
          })

          logger.info('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω', {
            description: 'Cache cleaned up',
            removed_count: keysToRemove.length,
            cache_size_after: processedPayments.size,
          })
        }
      })

      logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', {
        description: 'Balance operation successfully completed',
        telegram_id,
        operation_id: initResult.opId,
        newBalance:
          'finalBalance' in updateResult ? updateResult.finalBalance : 0,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result –≤ –æ–±—ä–µ–∫—Ç–µ updateResult
      if ('result' in updateResult && updateResult.result) {
        return updateResult.result
      }

      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ result –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ–±—ä–µ–∫—Ç
      return {
        newBalance:
          'finalBalance' in updateResult ? updateResult.finalBalance : 0,
        success: true,
        modePrice: Number(paymentAmount) || 0,
      }
    } catch (error) {
      logger.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'General error in payment processing',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        event_data: event.data,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
      await inngest.send({
        name: 'payment/process.failed',
        data: {
          ...event.data,
          error: error instanceof Error ? error.message : 'Unknown error',
        },
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      return {
        newBalance: 0,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        modePrice: Number(event.data.paymentAmount) || 0,
      }
    }
  }
)
