import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import {
  getUserBalance,
  invalidateBalanceCache,
} from '@/core/supabase/getUserBalance'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'
import { notifyAmbassadorAboutPayment } from '@/services/ambassadorPaymentNotifier'
import { SubscriptionType } from '@/interfaces/subscription.interface'

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export interface PaymentProcessParams {
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) */
  telegram_id: string

  /** –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–í–°–ï–ì–î–ê –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) */
  amount: number

  /** –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ TransactionType */
  type: TransactionType | string

  /** –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */
  description: string

  /** –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é */
  bot_name: string

  /** –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ ModeEnum */
  service_type: ModeEnum

  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  stars?: number

  /** ID –∏–Ω–≤–æ–π—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  inv_id?: string

  /** –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  error_code?: string

  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  metadata?: Record<string, any>

  /** –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ SubscriptionType */
  subscription?: SubscriptionType
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
 */
function normalizeTransactionType(type: TransactionType | string): string {
  return type.toLowerCase()
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export interface PaymentProcessEvent {
  name: 'payment/process'
  data: PaymentProcessParams
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export interface PaymentProcessResult {
  success: boolean
  payment?: {
    payment_id: number
    telegram_id: string
    amount: number
    stars: number
    type: string
    status: string
  }
  balanceChange?: {
    before: number
    after: number
    difference: number
  }
  operation_id?: string
  error?: string
  telegram_id?: string
  amount?: number
  type?: string
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–ª–∞—Ç–µ–∂–µ
 *
 * @param payment –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
 * @param currentBalance –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param newBalance –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function sendPaymentNotification(
  payment: any,
  currentBalance: number,
  newBalance: number
): Promise<void> {
  logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
    description: 'Sending notification to user',
    telegram_id: normalizeTelegramId(payment.telegram_id),
    amount: payment.amount,
    paymentId: payment.id,
  })

  await sendTransactionNotificationTest({
    telegram_id: Number(normalizeTelegramId(payment.telegram_id)),
    operationId: payment.operation_id || uuidv4(),
    amount: payment.amount,
    currentBalance,
    newBalance,
    description: payment.description,
    isRu: true,
    bot_name: payment.bot_name,
  })
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Robokassa
 * @param errorCode –ö–æ–¥ –æ—à–∏–±–∫–∏
 * @returns –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
 */
function handleRobokassaError(errorCode: string): string {
  const errorMessages: Record<string, string> = {
    '31': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞',
    '33': '–í—Ä–µ–º—è –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ',
    '40': '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–∞ —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞',
    '41': '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
    '51': '–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫',
    '52': '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞',
    '53': '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
  }

  return errorMessages[errorCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: 'payment-processor',
    name: 'Payment Processor',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    const {
      telegram_id,
      amount,
      type,
      description,
      bot_name,
      service_type,
      stars,
      inv_id,
      error_code,
      metadata,
      subscription,
    } = event.data as PaymentProcessParams

    if (amount <= 0) {
      throw new Error(`Invalid payment amount: ${amount}`)
    }

    const normalizedType = normalizeTransactionType(type)

    logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting payment processing',
      telegram_id: normalizeTelegramId(telegram_id),
      amount,
      type: normalizedType,
      bot_name,
      service_type,
    })

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await step.run('get-balance', async () => {
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Getting current balance',
          telegram_id: normalizeTelegramId(telegram_id),
        })
        return getUserBalance(normalizeTelegramId(telegram_id))
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (normalizedType === TransactionType.MONEY_EXPENSE) {
        logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', {
          description: 'Checking balance for expense',
          telegram_id: normalizeTelegramId(telegram_id),
          currentBalance,
          amount,
        })

        if (currentBalance < amount) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
          )
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –æ—Ç Robokassa
      if (error_code) {
        const errorMessage = handleRobokassaError(error_code)
        logger.error('‚ùå –û—à–∏–±–∫–∞ Robokassa:', {
          description: 'Robokassa error',
          error_code: error_code,
          error_message: errorMessage,
          inv_id: inv_id,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (inv_id) {
          await supabase
            .from('payments_v2')
            .update({
              status: 'FAILED',
              metadata: {
                ...metadata,
                error_code: error_code,
                error_message: errorMessage,
              },
            })
            .eq('inv_id', inv_id)
        }

        throw new Error(errorMessage)
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      const payment = await step.run('Create successful payment', async () => {
        logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
          description: 'Creating payment record',
          telegram_id: normalizeTelegramId(telegram_id),
          amount,
          type: normalizedType,
        })

        try {
          return await createSuccessfulPayment({
            telegram_id,
            amount,
            type: normalizedType,
            description,
            bot_name,
            service_type,
            stars,
            inv_id: inv_id || '',
            metadata,
            subscription,
          })
        } catch (error) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
          if (
            error &&
            typeof error === 'object' &&
            'code' in error &&
            error.code === '23505'
          ) {
            logger.info(
              'üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂',
              {
                description:
                  'Duplicate payment detected, retrieving existing payment',
                telegram_id: normalizeTelegramId(telegram_id),
                inv_id: inv_id,
              }
            )

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            const { data: existingPayment } = await supabase
              .from('payments_v2')
              .select('*')
              .eq('inv_id', inv_id)
              .single()

            if (!existingPayment) {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂')
            }

            logger.info('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂', {
              description: 'Returning existing payment',
              payment_id: existingPayment.id,
              telegram_id: normalizeTelegramId(telegram_id),
              inv_id: inv_id,
            })

            return existingPayment
          }
          throw error
        }
      })

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const newBalance = await step.run('get-new-balance', async () => {
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info('üîÑ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Invalidating balance cache',
          telegram_id: normalizeTelegramId(telegram_id),
        })
        invalidateBalanceCache(normalizeTelegramId(telegram_id))

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        return getUserBalance(normalizeTelegramId(telegram_id))
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
      await step.run('send-notification', async () => {
        await sendPaymentNotification(payment, currentBalance, newBalance)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–≤–µ—Ä—à–µ–Ω –≤ –µ–≥–æ –±–æ—Ç–µ
      await step.run('send-ambassador-notification', async () => {
        try {
          if (payment.bot_name) {
            const hasAmbassador = await notifyAmbassadorAboutPayment(payment)

            if (hasAmbassador) {
              logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
                description: 'Ambassador notification sent successfully',
                paymentId: payment.id,
                botName: payment.bot_name,
              })
            }
          }
        } catch (error: any) {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É', {
            description: 'Error sending notification to ambassador',
            error: error.message,
            stack: error.stack,
            paymentId: payment.id,
            botName: payment.bot_name || 'unknown',
          })
        }
      })

      return {
        success: true,
        payment: {
          payment_id: payment.id,
          telegram_id: normalizeTelegramId(telegram_id),
          amount,
          stars: stars || amount,
          type: normalizedType,
          status: 'COMPLETED',
        },
        balanceChange: {
          before: currentBalance,
          after: newBalance,
          difference: newBalance - currentBalance,
        },
        operation_id: inv_id,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: normalizeTelegramId(telegram_id),
        amount,
        type: normalizedType,
      })

      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        telegram_id: normalizeTelegramId(telegram_id),
        amount,
        type: normalizedType,
      }
    }
  }
)

/**
 * –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
 */
export type PaymentSubscription =
  | 'NEUROPHOTO'
  | 'NEUROBASE'
  | 'NEUROBLOGGER'
  | 'NEUROTESTER'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
 */
export function isValidPaymentSubscription(
  subscription: SubscriptionType | undefined
): subscription is SubscriptionType {
  if (!subscription) return false
  return (
    subscription === SubscriptionType.NEUROPHOTO ||
    subscription === SubscriptionType.NEUROBASE ||
    subscription === SubscriptionType.NEUROBLOGGER ||
    subscription === SubscriptionType.NEUROTESTER
  )
}

/**
 * –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
 */
export enum PaymentStatus {
  PENDING = 'PENDING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  REFUNDED = 'REFUNDED',
  CANCELLED = 'CANCELLED',
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
 */
export interface BalanceOperationResult {
  newBalance: number
  success: boolean
  modePrice: number
  error?: string
}

/**
 * –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
 */
export type PaymentMethod =
  | 'Telegram'
  | 'Robokassa'
  | 'System'
  | 'Unknown'
  | 'Manual'

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
 */
export type PaymentService = ModeEnum | PaymentMethod

/**
 * –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 */
export interface BasePayment {
  payment_id: number
  telegram_id: string
  payment_date: Date
  amount: number
  description: string
  metadata: Record<string, any>
  stars: number
  currency: string
  subscription: string
  inv_id: string
  email?: string
  invoice_url?: string
  status: PaymentStatus
  type: TransactionType
  service_type: ModeEnum
  operation_id?: string
  bot_name: string
  language?: string
  payment_method: PaymentMethod
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 */
export interface CreatePaymentDTO {
  telegram_id: string | number
  amount: number
  stars: number
  currency: string
  description: string
  metadata?: Record<string, any>
  payment_method: PaymentMethod
  bot_name: string
  inv_id?: string
  status: PaymentStatus
  email?: string
  subscription?: PaymentSubscription
  language?: string
  invoice_url?: string
  type: TransactionType
  service_type: ModeEnum
}

/**
 * –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞, –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–ª—è
 */
export type Payment = BasePayment

/**
 * –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export const TRANSACTION_DESCRIPTIONS: Record<TransactionType, string> = {
  [TransactionType.MONEY_INCOME]: 'üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
  [TransactionType.MONEY_EXPENSE]: 'üí∏ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
  [TransactionType.SUBSCRIPTION_PAYMENT]: '‚≠êÔ∏è –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
  [TransactionType.SUBSCRIPTION_PURCHASE]: '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
  [TransactionType.SUBSCRIPTION_RENEWAL]: 'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
  [TransactionType.REFUND]: '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
  [TransactionType.BONUS]: 'üéÅ –ë–æ–Ω—É—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ',
  [TransactionType.REFERRAL]: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ',
  [TransactionType.TRANSFER]: 'üí´ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
  [TransactionType.SYSTEM]: '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
}

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export const DETAILED_TRANSACTION_DESCRIPTIONS: Record<
  string,
  Record<string, string>
> = {
  [TransactionType.MONEY_INCOME]: {
    [ModeEnum.NeuroPhoto]: 'üñºÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    [ModeEnum.TextToSpeech]: 'üó£Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞',
    [ModeEnum.ImageToVideo]: 'üé¨ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ',
    [ModeEnum.TextToImage]:
      'üñºÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    [ModeEnum.DigitalAvatarBody]: 'üé≠ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
    [ModeEnum.DigitalAvatarBodyV2]:
      'üé≠ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ V2',
    [ModeEnum.ChatWithAvatar]: 'üí¨ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
    [ModeEnum.LipSync]: 'üëÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—É–±',
    [ModeEnum.Voice]: 'üó£Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
    [ModeEnum.TextToVideo]:
      'üé¨ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    [ModeEnum.ImageToPrompt]: 'üîç –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    default: 'üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
  },
  [TransactionType.MONEY_EXPENSE]: {
    [ModeEnum.NeuroPhoto]: 'üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    [ModeEnum.TextToSpeech]: 'üó£Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å',
    [ModeEnum.ImageToVideo]: 'üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ',
    [ModeEnum.TextToImage]: 'üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    [ModeEnum.DigitalAvatarBody]: 'üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞',
    [ModeEnum.DigitalAvatarBodyV2]: 'üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ V2',
    [ModeEnum.ChatWithAvatar]: 'üí¨ –ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
    [ModeEnum.LipSync]: 'üëÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±',
    [ModeEnum.Voice]: 'üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä',
    [ModeEnum.TextToVideo]: 'üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    [ModeEnum.ImageToPrompt]: 'üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    default: 'üí∏ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
  },
  subscription_purchase: {
    neurophoto: '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroPhoto',
    neurobase: '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroBase',
    neuroblogger: '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroBlogger',
    neurotester: 'üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
    default: '‚≠êÔ∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
  },
  subscription_renewal: {
    neurophoto: 'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroPhoto',
    neurobase: 'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroBase',
    neuroblogger: 'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ NeuroBlogger',
    neurotester: 'üß™ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
    default: 'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
  },
  [TransactionType.REFUND]: {
    default: '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
  },
  [TransactionType.BONUS]: {
    default: 'üéÅ –ë–æ–Ω—É—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ',
  },
  [TransactionType.REFERRAL]: {
    default: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ',
  },
  [TransactionType.SYSTEM]: {
    migration: 'üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    default: '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
  },
} as const

/**
 * –ö–ª—é—á–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export const TRANSACTION_KEYS = {
  MONEY_INCOME: TransactionType.MONEY_INCOME,
  MONEY_EXPENSE: TransactionType.MONEY_EXPENSE,
  SUBSCRIPTION_PURCHASE: 'subscription_purchase',
  SUBSCRIPTION_RENEWAL: 'subscription_renewal',
  REFUND: TransactionType.REFUND,
  BONUS: TransactionType.BONUS,
  REFERRAL: TransactionType.REFERRAL,
  SYSTEM: TransactionType.SYSTEM,
} as const

/**
 * –ö–ª—é—á–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export const SERVICE_KEYS: Record<string, ModeEnum> = {
  NEURO_PHOTO: ModeEnum.NeuroPhoto,
  TEXT_TO_SPEECH: ModeEnum.TextToSpeech,
  IMAGE_TO_VIDEO: ModeEnum.ImageToVideo,
  TEXT_TO_IMAGE: ModeEnum.TextToImage,
  DIGITAL_AVATAR_BODY: ModeEnum.DigitalAvatarBody,
  DIGITAL_AVATAR_BODY_V2: ModeEnum.DigitalAvatarBodyV2,
  CHAT_WITH_AVATAR: ModeEnum.ChatWithAvatar,
  LIP_SYNC: ModeEnum.LipSync,
  VOICE: ModeEnum.Voice,
} as const

/**
 * –ö–ª—é—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
 */
export const SUBSCRIPTION_KEYS = {
  NEUROPHOTO: 'neurophoto',
  NEUROBASE: 'neurobase',
  NEUROBLOGGER: 'neuroblogger',
  NEUROTESTER: 'neurotester',
} as const

/**
 * –ö–ª—é—á–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 */
export const PAYMENT_METHOD_KEYS: Record<string, PaymentMethod> = {
  TELEGRAM: 'Telegram',
  ROBOKASSA: 'Robokassa',
  SYSTEM: 'System',
  UNKNOWN: 'Unknown',
  MANUAL: 'Manual',
} as const

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export const COMMAND_TO_SERVICE_MAP: Partial<Record<ModeEnum, ModeEnum>> = {
  [ModeEnum.NeuroPhoto]: ModeEnum.NeuroPhoto,
  [ModeEnum.NeuroPhotoV2]: ModeEnum.NeuroPhotoV2,
  [ModeEnum.TextToSpeech]: ModeEnum.TextToSpeech,
  [ModeEnum.ImageToVideo]: ModeEnum.ImageToVideo,
  [ModeEnum.TextToVideo]: ModeEnum.TextToVideo,
  [ModeEnum.TextToImage]: ModeEnum.TextToImage,
  [ModeEnum.ImageToPrompt]: ModeEnum.ImageToPrompt,
  [ModeEnum.DigitalAvatarBody]: ModeEnum.DigitalAvatarBody,
  [ModeEnum.DigitalAvatarBodyV2]: ModeEnum.DigitalAvatarBodyV2,
  [ModeEnum.ChatWithAvatar]: ModeEnum.ChatWithAvatar,
  [ModeEnum.LipSync]: ModeEnum.LipSync,
  [ModeEnum.Voice]: ModeEnum.Voice,
} as const

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export const COMMAND_TO_TRANSACTION_TYPE: Partial<
  Record<ModeEnum, TransactionType>
> = {
  [ModeEnum.NeuroPhoto]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.NeuroPhotoV2]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.TextToSpeech]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.ImageToVideo]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.TextToVideo]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.TextToImage]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.ImageToPrompt]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.DigitalAvatarBody]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.DigitalAvatarBodyV2]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.ChatWithAvatar]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.LipSync]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.Voice]: TransactionType.MONEY_EXPENSE,
  [ModeEnum.Subscribe]: TransactionType.SUBSCRIPTION_PURCHASE,
  [ModeEnum.TopUpBalance]: TransactionType.MONEY_INCOME,
} as const

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ
 */
export function getTransactionInfoByCommand(command: ModeEnum): {
  transactionType: TransactionType
  service: ModeEnum
  description: string
} {
  const transactionType =
    COMMAND_TO_TRANSACTION_TYPE[command] || TransactionType.SYSTEM
  const service = COMMAND_TO_SERVICE_MAP[command]

  if (!service) {
    return {
      transactionType,
      service: ModeEnum.NeuroPhoto, // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      description: DETAILED_TRANSACTION_DESCRIPTIONS[transactionType].default,
    }
  }

  return {
    transactionType,
    service,
    description:
      DETAILED_TRANSACTION_DESCRIPTIONS[transactionType][service] ||
      DETAILED_TRANSACTION_DESCRIPTIONS[transactionType].default,
  }
}
