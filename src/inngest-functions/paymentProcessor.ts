import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { generateInvId } from '@/utils/generateInvId'
import { getBotByName } from '@/core/bot'
import { getUserByTelegramId } from '@/core/supabase/getUserByTelegramId'
import { sendTransactionNotification } from '@/helpers/sendTransactionNotification'

// –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
const processedPayments = new Map<string, { time: number }>()

/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const paymentProcessor = inngest.createFunction(
  { id: 'payment-processor', name: 'Process Payment' },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        amount,
        type,
        description,
        bot_name,
        metadata = {},
        operation_id: provided_operation_id,
      } = event.data

      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      const operationId = await step.run('check-duplicates', async () => {
        const id = provided_operation_id || generateInvId(telegram_id, amount)
        const key = `${telegram_id}:${amount}:${type}:${description}`
        const existingPayment = processedPayments.get(key)

        if (existingPayment && Date.now() - existingPayment.time < 5000) {
          throw new Error('–î—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞')
        }

        processedPayments.set(key, { time: Date.now() })
        return id
      })

      // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ SQL —Ñ—É–Ω–∫—Ü–∏—é process_payment
      const paymentResult = await step.run('process-payment', async () => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const safeMetadata = JSON.parse(
          JSON.stringify(metadata, (_, value) =>
            typeof value === 'bigint' ? value.toString() : value
          )
        )

        const { data, error } = await supabase.rpc('process_payment', {
          p_telegram_id: telegram_id.toString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
          p_amount: amount,
          p_type: type,
          p_description: description,
          p_bot_name: bot_name,
          p_operation_id: operationId,
          p_metadata: safeMetadata,
        })

        if (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Error processing payment',
            error: error.message,
            telegram_id: telegram_id.toString(),
            amount,
            type,
          })
          throw error
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞ –¥–ª—è JavaScript
        return {
          ...data,
          old_balance: Number(data.old_balance),
          new_balance: Number(data.new_balance),
          amount: Number(data.amount),
        }
      })

      // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-notification', async () => {
        logger.info('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          description: 'Sending transaction details',
          type,
          telegram_id,
        })

        const { bot } = getBotByName(bot_name)
        if (!bot) {
          throw new Error('Bot not found')
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        const userData = await getUserByTelegramId(telegram_id)
        const isRu = userData?.language_code === 'ru'

        await sendTransactionNotification({
          telegram_id,
          operationId,
          amount,
          currentBalance: paymentResult.old_balance,
          newBalance: paymentResult.new_balance,
          description,
          isRu,
          bot: bot.telegram,
        })

        return {
          telegram_id,
          amount,
          type,
          description,
          operationId,
          oldBalance: paymentResult.old_balance,
          newBalance: paymentResult.new_balance,
        }
      })

      return {
        success: true,
        payment_id: paymentResult.payment_id,
        old_balance: paymentResult.old_balance,
        new_balance: paymentResult.new_balance,
        amount: paymentResult.amount,
        operation_id: paymentResult.operation_id,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ paymentProcessor:', {
        description: 'Error in payment processor',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }
)
