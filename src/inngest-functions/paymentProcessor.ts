import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'

import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import {
  getUserBalance,
  invalidateBalanceCache,
} from '@/core/supabase/getUserBalance'
import { v4 as uuidv4 } from 'uuid'
import {
  PaymentProcessParams,
  TransactionType,
} from '@/interfaces/payments.interface'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { normalizeTransactionType } from '@/interfaces/payments.interface'

import { notifyAmbassadorAboutPayment } from '@/services/ambassadorPaymentNotifier'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export interface PaymentProcessEvent {
  name: 'payment/process'
  data: PaymentProcessParams
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
 */
export interface PaymentProcessResult {
  success: boolean
  payment?: {
    payment_id: number
    telegram_id: string
    amount: number
    stars: number
    type: string
    status: string
  }
  balanceChange?: {
    before: number
    after: number
    difference: number
  }
  operation_id?: string
  error?: string
  telegram_id?: string
  amount?: number
  type?: string
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–ª–∞—Ç–µ–∂–µ
 *
 * @param payment –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
 * @param currentBalance –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param newBalance –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function sendPaymentNotification(
  payment: any,
  currentBalance: number,
  newBalance: number
): Promise<void> {
  logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
    description: 'Sending notification to user',
    telegram_id: payment.telegram_id,
    amount: payment.amount,
    paymentId: payment.id,
  })

  await sendTransactionNotificationTest({
    telegram_id: Number(payment.telegram_id),
    operationId: payment.operation_id || uuidv4(),
    amount: payment.amount,
    currentBalance,
    newBalance,
    description: payment.description,
    isRu: true,
    bot_name: payment.bot_name,
  })
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: 'payment-processor',
    name: 'Payment Processor',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }: { event: { data: any }; step: any }) => {
    const validatedParams = event.data as PaymentProcessParams

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    if (validatedParams.type) {
      validatedParams.type = normalizeTransactionType(
        validatedParams.type as TransactionType
      )
    }

    if (!validatedParams) {
      throw new Error('üö´ –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
    }

    const {
      telegram_id,
      amount,
      type,
      description,
      bot_name,
      service_type,
      stars,
    } = validatedParams

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ID, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    const operationId = validatedParams.inv_id || uuidv4()

    logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting payment processing',
      telegram_id,
      amount,
      type,
      bot_name,
      service_type,
    })

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
      if (amount <= 0) {
        throw new Error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${amount}. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.`
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stars –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (stars !== undefined && stars <= 0) {
        throw new Error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ${stars}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.`
        )
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await step.run('get-balance', async () => {
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Getting current balance',
          telegram_id,
        })
        return getUserBalance(telegram_id)
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (type === TransactionType.MONEY_EXPENSE) {
        logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', {
          description: 'Checking balance for expense',
          telegram_id,
          currentBalance,
          amount,
        })

        if (currentBalance < amount) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
          )
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      const payment = await step.run('create-payment', async () => {
        logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
          description: 'Creating payment record',
          telegram_id,
          amount,
          type,
        })

        return createSuccessfulPayment({
          telegram_id,
          amount,
          stars: stars || amount,
          type,
          description,
          bot_name,
          service_type,
          payment_method: 'balance',
          status: 'COMPLETED',
          inv_id: operationId,
          metadata: validatedParams.metadata,
        })
      })

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const newBalance = await step.run('get-new-balance', async () => {
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info('üîÑ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Invalidating balance cache',
          telegram_id,
        })
        invalidateBalanceCache(telegram_id)

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        return getUserBalance(telegram_id)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)

      await step.run('send-notification', async () => {
        await sendPaymentNotification(payment, currentBalance, newBalance)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–≤–µ—Ä—à–µ–Ω –≤ –µ–≥–æ –±–æ—Ç–µ
      await step.run('send-ambassador-notification', async () => {
        try {
          if (payment.bot_name) {
            const hasAmbassador = await notifyAmbassadorAboutPayment(payment)

            if (hasAmbassador) {
              logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
                description: 'Ambassador notification sent successfully',
                paymentId: payment.id,
                botName: payment.bot_name,
              })
            }
          }
        } catch (error: any) {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—É', {
            description: 'Error sending notification to ambassador',
            error: error.message,
            stack: error.stack,
            paymentId: payment.id,
            botName: payment.bot_name || 'unknown',
          })
        }
      })

      return {
        success: true,
        payment: {
          payment_id: payment.id,
          telegram_id,
          amount,
          stars: stars || amount,
          type,
          status: 'COMPLETED',
        },
        balanceChange: {
          before: currentBalance,
          after: newBalance,
          difference: newBalance - currentBalance,
        },
        operation_id: operationId,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : String(error),
        telegram_id,
        amount,
        type,
      })

      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        telegram_id,
        amount,
        type,
      }
    }
  }
)
