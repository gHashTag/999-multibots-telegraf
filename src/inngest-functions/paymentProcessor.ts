import { inngest } from '@/core/inngest/clients'
import { BalanceOperationResult } from '@/interfaces'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { logger } from '@/utils/logger'

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedPayments = new Map<string, BalanceOperationResult>();

// –î–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
interface InitOperationResult {
  opId: string;
  cachedResult?: BalanceOperationResult;
  shouldContinue: boolean;
}

interface ValidationResult {
  isValid: boolean;
  errorResult?: BalanceOperationResult;
}

interface BalanceCheckResult {
  success: boolean;
  currentBalance?: number;
  errorResult?: BalanceOperationResult;
}

interface FundsCheckResult {
  sufficient: boolean;
  errorResult?: BalanceOperationResult;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
 */
async function safeSendMessage(bot: any, telegram_id: number, message: string): Promise<boolean> {
  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.debug('ü§ñ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞:', {
      description: 'Bot object structure',
      hasBot: !!bot,
      hasContext: !!bot?.context,
      hasTelegram: !!bot?.telegram,
      telegramType: typeof bot?.telegram,
      hasOptions: !!bot?.options,
      hasSendMessage: typeof bot?.sendMessage === 'function',
      hasTelegramSendMessage: typeof bot?.telegram?.sendMessage === 'function'
    });

    if (!bot) {
      logger.warn('‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
        description: 'Bot not found for sending message',
        telegram_id
      });
      return false;
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
    if (typeof bot.telegram?.sendMessage === 'function') {
      await bot.telegram.sendMessage(telegram_id, message);
      return true;
    } 
    
    if (typeof bot.sendMessage === 'function') {
      await bot.sendMessage(telegram_id, message);
      return true;
    }

    logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      description: 'No method found for sending message',
      telegram_id,
      botType: typeof bot
    });
    return false;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id
    });
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å —à–∞–≥–∞–º–∏
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: `payment-processor`,
    idempotency: 'event.data.telegram_id + "-" + event.data.paymentAmount + "-" + event.data.operation_id',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        paymentAmount,
        is_ru = false,
        bot_name,
        description,
        operation_id,
        bot,
        metadata
      } = event.data;

      // –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
      const initResult = await step.run('init-operation', async () => {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        const opId = operation_id || `${telegram_id}-${paymentAmount}-${new Date().getTime()}`;
        
        logger.info('üöÄ –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Step 1: Operation initialization',
          telegram_id,
          paymentAmount,
          operation_id: opId,
          bot_name
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (processedPayments.has(opId)) {
          const cachedResult = processedPayments.get(opId);
          logger.info('üîÑ –ù–∞–π–¥–µ–Ω –∫–µ—à –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
            description: 'Found cached operation, skipping processing',
            telegram_id,
            operation_id: opId,
            cached_result: cachedResult
          });
          return { opId, cachedResult, shouldContinue: false };
        }
        
        return { opId, shouldContinue: true };
      });

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (!initResult.shouldContinue && 'cachedResult' in initResult && initResult.cachedResult) {
        logger.info('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
          description: 'Returning cached result',
          telegram_id,
          operation_id: initResult.opId
        });
        return initResult.cachedResult;
      }

      // –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await step.run('validate-input', async () => {
        logger.info('üßê –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Step 2: Input data validation',
          telegram_id,
          payment_amount_type: typeof paymentAmount,
          payment_amount_value: paymentAmount
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
            description: 'Missing telegram_id',
            telegram_id
          });
          
          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'telegram_id is required',
            modePrice: paymentAmount,
          };
          processedPayments.set(initResult.opId, errorResult);
          return { isValid: false, errorResult };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        if (paymentAmount === undefined || paymentAmount === null || isNaN(Number(paymentAmount))) {
          logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Invalid payment amount',
            paymentAmount,
            payment_amount_type: typeof paymentAmount,
            telegram_id
          });
          
          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Payment amount is invalid',
            modePrice: paymentAmount || 0,
          };
          processedPayments.set(initResult.opId, errorResult);
          return { isValid: false, errorResult };
        }
        
        logger.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', {
          description: 'Input data is valid',
          telegram_id,
          paymentAmount
        });
        
        return { isValid: true };
      });

      if (!validationResult.isValid && 'errorResult' in validationResult && validationResult.errorResult) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
          description: 'Validation failed',
          telegram_id,
          operation_id: initResult.opId
        });
        return validationResult.errorResult;
      }

      // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResult = await step.run('check-balance', async () => {
        logger.info('üí≥ –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Step 3: Getting user balance',
          telegram_id
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await getUserBalance(telegram_id);
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Retrieved user balance',
          telegram_id,
          currentBalance,
          currentBalance_type: typeof currentBalance,
          isNull: currentBalance === null,
          isUndefined: currentBalance === undefined,
          isNaN: isNaN(Number(currentBalance))
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
        if (currentBalance === undefined || currentBalance === null || isNaN(Number(currentBalance))) {
          logger.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
            description: 'Invalid balance received',
            currentBalance,
            telegram_id
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          const errorMessage = is_ru
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            : 'An error occurred while checking your balance. Please try again later or contact support.';
          
          if (bot) {
            await safeSendMessage(bot, telegram_id, errorMessage);
          }
          
          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Invalid balance',
            modePrice: paymentAmount,
          };
          processedPayments.set(initResult.opId, errorResult);
          return { success: false, errorResult };
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        const safeCurrentBalance = Number(currentBalance);
        
        logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω:', {
          description: 'Balance successfully retrieved and converted',
          telegram_id,
          originalBalance: currentBalance,
          safeCurrentBalance,
          safeCurrentBalance_type: typeof safeCurrentBalance
        });
        
        return { success: true, currentBalance: safeCurrentBalance };
      });

      if (!balanceResult.success && 'errorResult' in balanceResult && balanceResult.errorResult) {
        logger.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
          description: 'Balance check failed',
          telegram_id,
          operation_id: initResult.opId
        });
        return balanceResult.errorResult;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ currentBalance
      const currentBalance = balanceResult.success && 'currentBalance' in balanceResult ? 
        balanceResult.currentBalance : 0;

      // –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      const fundsResult = await step.run('check-funds', async () => {
        logger.info('üßÆ –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤', {
          description: 'Step 4: Checking sufficient funds',
          telegram_id,
          currentBalance: currentBalance,
          requiredAmount: paymentAmount
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (currentBalance < Number(paymentAmount)) {
          const message = is_ru
            ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /buy.'
            : 'Insufficient funds. Top up your balance by calling the /buy command.';
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (bot) {
            await safeSendMessage(bot, telegram_id, message);
          }
          
          logger.info('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', {
            description: 'Insufficient funds',
            telegram_id,
            currentBalance: currentBalance,
            requiredAmount: paymentAmount
          });
          
          const errorResult = {
            newBalance: currentBalance,
            success: false,
            error: message,
            modePrice: paymentAmount,
          };
          processedPayments.set(initResult.opId, errorResult);
          return { sufficient: false, errorResult };
        }
        
        logger.info('‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Sufficient funds for operation',
          telegram_id,
          currentBalance: currentBalance,
          requiredAmount: paymentAmount,
          remaining: currentBalance - Number(paymentAmount)
        });
        
        return { sufficient: true };
      });

      if (!fundsResult.sufficient && 'errorResult' in fundsResult && fundsResult.errorResult) {
        logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', {
          description: 'Insufficient funds',
          telegram_id,
          operation_id: initResult.opId
        });
        return fundsResult.errorResult;
      }

      // –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const balanceData = await step.run('calculate-balance', async () => {
        logger.info('üßÆ –®–ê–ì 5: –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Step 5: Calculating new balance',
          telegram_id,
          currentBalance: currentBalance,
          paymentAmount
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        const paymentAmountNumber = Number(paymentAmount);
        const newBalance = parseFloat((currentBalance - paymentAmountNumber).toFixed(2));
        
        logger.info('‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:', {
          description: 'New balance calculated',
          telegram_id,
          currentBalance: currentBalance,
          paymentAmount: paymentAmountNumber,
          newBalance,
          newBalance_type: typeof newBalance
        });
        
        return { newBalance, paymentAmountNumber };
      });

      // –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updateResult = await step.run('update-balance', async () => {
        logger.info('üíæ –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î', {
          description: 'Step 6: Updating balance in database',
          telegram_id,
          currentBalance: currentBalance,
          newBalance: balanceData.newBalance,
          paymentAmount: balanceData.paymentAmountNumber
        });
        
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          let serviceType = 'System';
          
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
          if (description) {
            const descLower = description.toLowerCase();
            if (descLower.includes('image') || descLower.includes('photo') || descLower.includes('–∫–∞—Ä—Ç–∏–Ω')) {
              serviceType = 'NeuroPhoto';
            } else if (descLower.includes('video')) {
              serviceType = 'Image to video';
            } else if (descLower.includes('voice') || descLower.includes('speech') || descLower.includes('–≥–æ–ª–æ—Å')) {
              serviceType = 'Text to speech';
            } else if (descLower.includes('train') || descLower.includes('–º–æ–¥–µ–ª')) {
              serviceType = 'Training';
            } else if (descLower.includes('refund') || descLower.includes('–≤–æ–∑–≤—Ä–∞—Ç')) {
              serviceType = 'Refund';
            }
          }
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (metadata?.service_type) {
            serviceType = metadata.service_type;
          }
          
          // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          logger.info('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º updateUserBalance:', {
            description: 'Parameters before calling updateUserBalance',
            telegram_id,
            telegram_id_type: typeof telegram_id,
            telegram_id_as_string: String(telegram_id),
            newBalance: balanceData.newBalance,
            newBalance_type: typeof balanceData.newBalance,
            paymentAmount: balanceData.paymentAmountNumber,
            paymentAmount_type: typeof balanceData.paymentAmountNumber,
            operation_type: 'outcome',
            payment_description: description || 'Payment for service',
            payment_bot_name: bot_name || 'system',
            service_type: serviceType
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
          const updateResult = await updateUserBalance(
            String(telegram_id),
            balanceData.newBalance,
            balanceData.paymentAmountNumber,
            'outcome',
            description || 'Payment for service',
            {
              bot_name: bot_name || 'system',
              language: is_ru ? 'ru' : 'en',
              payment_method: serviceType
            }
          );
          
          logger.info('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Balance update result',
            updateResult,
            telegram_id
          });

          if (!updateResult) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ë–î:', {
              description: 'Failed to update balance in DB',
              telegram_id,
              currentBalance: currentBalance,
              newBalance: balanceData.newBalance
            });
            
            const errorResult = {
              newBalance: currentBalance,
              success: false,
              error: 'Database error while updating balance',
              modePrice: balanceData.paymentAmountNumber,
              prevBalance: currentBalance,
            };
            processedPayments.set(initResult.opId, errorResult);
            return { success: false, result: errorResult };
          }

          logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
            description: 'Balance successfully updated',
            telegram_id,
            oldBalance: currentBalance,
            newBalance: balanceData.newBalance,
            difference: balanceData.paymentAmountNumber
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          const successResult = {
            newBalance: balanceData.newBalance,
            success: true,
            modePrice: balanceData.paymentAmountNumber,
            prevBalance: currentBalance,
          };
          processedPayments.set(initResult.opId, successResult);
          
          return { success: true, result: successResult };
        } catch (dbError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î:', {
            description: 'Error updating balance in DB',
            error: dbError instanceof Error ? dbError.message : 'Unknown error',
            stack: dbError instanceof Error ? dbError.stack : undefined,
            telegram_id,
            currentBalance: currentBalance,
            newBalance: balanceData.newBalance
          });
          
          const errorResult = {
            newBalance: currentBalance,
            success: false,
            error: 'Database error while updating balance',
            modePrice: balanceData.paymentAmountNumber,
          };
          processedPayments.set(initResult.opId, errorResult);
          return { success: false, result: errorResult };
        }
      });

      // –®–ê–ì 7: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await step.run('cleanup-cache', async () => {
        logger.info('üßπ –®–ê–ì 7: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ', {
          description: 'Step 7: Cleanup cache if needed',
          cacheSize: processedPayments.size
        });
        
        // –ö–µ—à –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if (processedPayments.size > 1000) {
          const keysToDelete = Array.from(processedPayments.keys()).slice(0, 200);
          logger.info('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞:', {
            description: 'Deleting old records from cache',
            numberOfRecordsToDelete: keysToDelete.length
          });
          
          keysToDelete.forEach(key => processedPayments.delete(key));
          
          logger.info('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω:', {
            description: 'Cache cleaned',
            newCacheSize: processedPayments.size
          });
        } else {
          logger.info('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', {
            description: 'Cache cleanup not required',
            cacheSize: processedPayments.size
          });
        }
      });

      logger.info('üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Payment processing completed',
        telegram_id,
        operation_id: initResult.opId,
        success: updateResult.success
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return updateResult.result;
    } catch (error) {
      logger.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ processPayment:', {
        description: 'Unexpected error in processPayment function',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await inngest.send({
        name: 'payment/process.failed',
        data: {
          ...event.data,
          error: error instanceof Error ? error.message : 'Unknown error',
        },
      });
      
      throw error;
    }
  }
); 