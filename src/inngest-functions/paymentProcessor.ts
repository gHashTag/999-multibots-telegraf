import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'

import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import {
  getUserBalance,
  invalidateBalanceCache,
} from '@/core/supabase/getUserBalance'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { normalizeTransactionType } from '@/interfaces/payments.interface'
import { isDev } from '@/config'

export interface PaymentProcessEvent {
  data: {
    telegram_id: string
    amount: number // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    stars?: number // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    type: string
    description: string
    bot_name: string
    inv_id?: string
    metadata?: any
    service_type: ModeEnum // –ò—Å–ø–æ–ª—å–∑—É–µ–º ModeEnum –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
  }
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: 'payment-processor',
    name: 'Payment Processor',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    const validatedParams = event.data

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    if (validatedParams.type) {
      validatedParams.type = normalizeTransactionType(validatedParams.type)
    }

    if (!validatedParams) {
      throw new Error('üö´ –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
    }

    const {
      telegram_id,
      amount,
      type,
      description,
      bot_name,
      service_type,
      stars,
    } = validatedParams

    logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting payment processing',
      telegram_id,
      amount,
      type,
      bot_name,
      service_type,
    })

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
      if (amount <= 0) {
        throw new Error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${amount}. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.`
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stars –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (stars !== undefined && stars <= 0) {
        throw new Error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ${stars}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.`
        )
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const currentBalance = await step.run('get-balance', async () => {
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Getting current balance',
          telegram_id,
        })
        return getUserBalance(telegram_id)
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (type === TransactionType.MONEY_EXPENSE) {
        logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', {
          description: 'Checking balance for expense',
          telegram_id,
          currentBalance,
          amount,
        })

        if (currentBalance < amount) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
          )
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      const payment = await step.run('create-payment', async () => {
        logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
          description: 'Creating payment record',
          telegram_id,
          amount,
          type,
        })

        return createSuccessfulPayment({
          telegram_id,
          amount,
          stars: stars || amount,
          type,
          description,
          bot_name,
          service_type,
          payment_method: 'balance',
          status: 'COMPLETED',
          inv_id: validatedParams.inv_id,
          metadata: validatedParams.metadata,
        })
      })

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const newBalance = await step.run('get-new-balance', async () => {
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info('üîÑ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Invalidating balance cache',
          telegram_id,
        })
        invalidateBalanceCache(telegram_id)

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        return getUserBalance(telegram_id)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
      if (!isDev) {
        await step.run('send-notification', async () => {
          const operationId = uuidv4()
          logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            description: 'Sending notification',
            telegram_id,
            amount,
            operationId,
          })

          return sendTransactionNotificationTest({
            telegram_id: Number(telegram_id),
            operationId,
            amount,
            currentBalance,
            newBalance,
            description,
            isRu: true,
            bot_name,
          })
        })
      } else {
        logger.info('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ', {
          description: 'Notification skipped in dev environment',
          telegram_id,
          amount,
          currentBalance,
          newBalance,
        })
      }

      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        description: 'Payment processed successfully',
        telegram_id,
        amount,
        type,
        currentBalance,
        newBalance,
      })

      return {
        success: true,
        payment,
        balanceChange: {
          before: currentBalance,
          after: newBalance,
          difference: newBalance - currentBalance,
        },
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error processing payment',
        telegram_id,
        amount,
        type,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })
      throw error
    }
  }
)
