import { inngest } from '@/core/inngest/clients'
import { BalanceOperationResult } from '@/interfaces'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { supabase } from '@/core/supabase'
import { TelegramId } from '@/interfaces/telegram.interface'
import { Telegraf, Context } from 'telegraf'

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const processedPayments = new Map<string, BalanceOperationResult>()

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
 */
const safeSendMessage = async (
  bot: any, // –û—Å—Ç–∞–≤–ª—è–µ–º any —Ç.–∫. —Ä–∞–∑–Ω—ã–µ –±–æ—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  telegram_id: TelegramId,
  message: string
): Promise<boolean> => {
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
    if (bot.telegram && typeof bot.telegram.sendMessage === 'function') {
      await bot.telegram.sendMessage(telegram_id, message)
    } else if (typeof bot.sendMessage === 'function') {
      await bot.sendMessage(telegram_id, message)
    } else {
      throw new Error('No valid send method found on bot')
    }
    return true
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      description: 'Error sending message',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
    return false
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å —à–∞–≥–∞–º–∏
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: `payment-processor`,
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        amount: paymentAmount,
        is_ru = false,
        bot_name,
        description,
        operation_id,
        bot,
        metadata = {},
        type = 'outcome',
        payment_type = 'regular',
        currency = 'STARS',
        money_amount,
      } = event.data

      // –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
      const initResult = await step.run('init-operation', async () => {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        const opId =
          operation_id ||
          `${telegram_id}-${paymentAmount}-${new Date().getTime()}`

        logger.info('üöÄ –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', {
          description: 'Step 1: Operation initialization',
          telegram_id,
          paymentAmount,
          operation_id: opId,
          bot_name,
          payment_type: type,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if (processedPayments.has(opId)) {
          const cachedResult = processedPayments.get(opId)
          logger.info('üîÑ –ù–∞–π–¥–µ–Ω –∫–µ—à –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É:', {
            description: 'Found cached operation, skipping processing',
            telegram_id,
            operation_id: opId,
            cached_result: cachedResult,
          })
          return { opId, cachedResult, shouldContinue: false }
        }

        return { opId, shouldContinue: true }
      })

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (
        !initResult.shouldContinue &&
        'cachedResult' in initResult &&
        initResult.cachedResult
      ) {
        logger.info('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
          description: 'Returning cached result',
          telegram_id,
          operation_id: initResult.opId,
        })
        return initResult.cachedResult
      }

      // –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await step.run('validate-input', async () => {
        logger.info('üßê –®–ê–ì 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
          description: 'Step 2: Input data validation',
          telegram_id,
          payment_amount_type: typeof paymentAmount,
          payment_amount_value: paymentAmount,
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
        if (!telegram_id) {
          logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
            description: 'Missing telegram_id',
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'telegram_id is required',
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
        if (
          paymentAmount === undefined ||
          paymentAmount === null ||
          isNaN(Number(paymentAmount))
        ) {
          logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
            description: 'Invalid payment amount',
            paymentAmount,
            payment_amount_type: typeof paymentAmount,
            telegram_id,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Payment amount is invalid',
            modePrice: paymentAmount || 0,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { isValid: false, errorResult }
        }

        logger.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', {
          description: 'Input data is valid',
          telegram_id,
          paymentAmount,
        })

        return { isValid: true }
      })

      if (
        !validationResult.isValid &&
        'errorResult' in validationResult &&
        validationResult.errorResult
      ) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', {
          description: 'Validation failed',
          telegram_id,
          operation_id: initResult.opId,
        })
        return validationResult.errorResult
      }

      // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResult = await step.run('check-balance', async () => {
        logger.info('üí≥ –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Step 3: Getting user balance',
          telegram_id,
        })

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await getUserBalance(telegram_id, bot_name)

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        logger.info('üí∞ –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Retrieved user balance',
          telegram_id,
          currentBalance,
          currentBalance_type: typeof currentBalance,
          isNull: currentBalance === null,
          isUndefined: currentBalance === undefined,
          isNaN: isNaN(Number(currentBalance)),
        })

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
        if (
          currentBalance === undefined ||
          currentBalance === null ||
          isNaN(Number(currentBalance))
        ) {
          logger.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
            description: 'Invalid balance received',
            currentBalance,
            telegram_id,
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          const errorMessage = is_ru
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            : 'An error occurred while checking your balance. Please try again later or contact support.'

          if (bot) {
            await safeSendMessage(bot, telegram_id, errorMessage)
          }

          const errorResult = {
            newBalance: 0,
            success: false,
            error: 'Invalid balance',
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { hasValidBalance: false, errorResult, currentBalance: 0 }
        }

        logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
          description: 'Balance retrieved successfully',
          telegram_id,
          currentBalance,
        })

        return { hasValidBalance: true, currentBalance }
      })

      if (
        !balanceResult.hasValidBalance &&
        'errorResult' in balanceResult &&
        balanceResult.errorResult
      ) {
        logger.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'User balance issue',
          telegram_id,
          operation_id: initResult.opId,
        })
        return balanceResult.errorResult
      }

      // –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      const updateResult = await step.run('update-balance', async () => {
        logger.info('üíæ –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î', {
          description: 'Step 4: Updating balance in database',
          telegram_id,
          paymentAmount,
          operation_type: type,
        })

        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          let serviceType = metadata?.service_type || 'System'

          // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
          if (!metadata?.service_type && description) {
            const descLower = description.toLowerCase()

            if (descLower.includes('refund')) {
              serviceType = 'Refund'
            } else if (
              descLower.includes('migration') ||
              descLower.includes('bonus')
            ) {
              serviceType = 'System'
            } else {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–æ–¥—ã
              const modeValues = Object.values(ModeEnum)
              for (const mode of modeValues) {
                if (descLower.includes(mode.replace(/_/g, ' '))) {
                  serviceType = mode
                  break
                }
              }
            }
          }

          logger.info('üõéÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞', {
            description: 'Service type determined',
            telegram_id,
            serviceType,
            originalDescription: description,
          })

          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
          const result = await updateUserBalance({
            telegram_id,
            amount: paymentAmount,
            type,
            operation_description:
              description || `${type} operation via payment/process`,
            metadata: {
              ...metadata,
              operation_id: initResult.opId,
              service_type: serviceType,
              payment_type,
              currency,
              money_amount,
            },
            bot_name,
            payment_method: serviceType,
          })

          logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Balance update result',
            telegram_id,
            success: result.success,
            newBalance: result.newBalance,
            operation_id: initResult.opId,
          })

          if (!result.success) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
              description: 'Balance update failed',
              telegram_id,
              error: 'Failed to update balance',
            })

            const errorResult = {
              newBalance: result.newBalance || 0,
              success: false,
              error: 'Failed to update balance',
              modePrice: paymentAmount,
            }
            processedPayments.set(initResult.opId, errorResult)
            return { updateSuccess: false, errorResult }
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
          const shouldNotifyUser = !description?.includes('internal') && bot

          if (shouldNotifyUser) {
            const successMessage = is_ru
              ? `‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n${
                  type === 'income' ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–°–ø–∏—Å–∞–Ω–∏–µ'
                }: ${Math.abs(paymentAmount).toFixed(2)} ‚≠êÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${
                  result.newBalance
                } ‚≠êÔ∏è`
              : `‚úÖ Operation completed successfully!\n${
                  type === 'income' ? 'Added' : 'Charged'
                }: ${Math.abs(paymentAmount).toFixed(2)} ‚≠êÔ∏è\nYour balance: ${
                  result.newBalance
                } ‚≠êÔ∏è`

            try {
              await safeSendMessage(bot, telegram_id, successMessage)
            } catch (notifyError) {
              logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
                description: 'Failed to send notification',
                telegram_id,
                error:
                  notifyError instanceof Error
                    ? notifyError.message
                    : 'Unknown error',
              })
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
          const successResult = {
            newBalance: result.newBalance || 0,
            success: true,
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, successResult)

          return {
            updateSuccess: true,
            result: successResult,
            finalBalance: result.newBalance,
          }
        } catch (updateError) {
          logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Exception during balance update',
            telegram_id,
            error:
              updateError instanceof Error
                ? updateError.message
                : 'Unknown error',
            stack: updateError instanceof Error ? updateError.stack : undefined,
          })

          const errorResult = {
            newBalance: 0,
            success: false,
            error:
              updateError instanceof Error
                ? updateError.message
                : 'Unknown error',
            modePrice: paymentAmount,
          }
          processedPayments.set(initResult.opId, errorResult)
          return { updateSuccess: false, errorResult }
        }
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (
        !updateResult.updateSuccess &&
        'errorResult' in updateResult &&
        updateResult.errorResult
      ) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
          description: 'Error in balance update process',
          telegram_id,
          operation_id: initResult.opId,
        })
        return updateResult.errorResult
      }

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
      await step.run('cleanup-cache', async () => {
        if (processedPayments.size > 100) {
          logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', {
            description: 'Cleaning up old operations cache',
            cache_size_before: processedPayments.size,
          })

          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∫–ª—é—á–∞)
          const keys = Array.from(processedPayments.keys())
          const keysToRemove = keys
            .sort((a, b) => {
              const timeA = Number(a.split('-')[1]) || 0
              const timeB = Number(b.split('-')[1]) || 0
              return timeA - timeB
            })
            .slice(0, 50) // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 50 –∑–∞–ø–∏—Å–µ–π

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
          keysToRemove.forEach(key => {
            processedPayments.delete(key)
          })

          logger.info('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω', {
            description: 'Cache cleaned up',
            removed_count: keysToRemove.length,
            cache_size_after: processedPayments.size,
          })
        }
      })

      logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', {
        description: 'Balance operation successfully completed',
        telegram_id,
        operation_id: initResult.opId,
        newBalance:
          'finalBalance' in updateResult ? updateResult.finalBalance : 0,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result –≤ –æ–±—ä–µ–∫—Ç–µ updateResult
      if ('result' in updateResult && updateResult.result) {
        return updateResult.result
      }

      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ result –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ–±—ä–µ–∫—Ç
      return {
        newBalance:
          'finalBalance' in updateResult ? updateResult.finalBalance : 0,
        success: true,
        modePrice: Number(paymentAmount) || 0,
      }
    } catch (error) {
      logger.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'General error in payment processing',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        event_data: event.data,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
      await inngest.send({
        id: `payment-process-failed-${Date.now()}-${uuidv4()}`,
        name: 'payment/process.failed',
        data: {
          ...event.data,
          error: error instanceof Error ? error.message : 'Unknown error',
        },
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      return {
        newBalance: 0,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        modePrice: Number(event.data.paymentAmount) || 0,
      }
    }
  }
)
