import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'

import { sendTransactionNotification } from '@/helpers/sendTransactionNotification'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { v4 as uuidv4 } from 'uuid'
import { TransactionType } from '@/interfaces/payments.interface'
import { TelegramId } from '@/interfaces/telegram.interface'
import { getUserByTelegramId } from '@/core/supabase/getUserByTelegramId'
import { getPaymentByInvId } from '@/core/supabase/getPaymentByInvId'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { supabase } from '@/core/supabase'

export interface PaymentProcessEvent {
  data: {
    telegram_id: string
    amount: number // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    stars?: number // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    type: string
    description: string
    bot_name: string
    inv_id?: string
    metadata?: any
  }
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: 'payment-processor',
    name: 'Payment Processor',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event, step }) => {
    try {
      const {
        telegram_id,
        amount,
        type,
        description,
        bot_name,
        inv_id,
        metadata,
      } = event.data
      const stars = event.data.stars ?? amount

      logger.info('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Processing payment',
        telegram_id,
        amount,
        stars,
        type,
        bot_name,
        inv_id: inv_id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const userExists = await step.run('check-user-exists', async () => {
        const user = await getUserByTelegramId(telegram_id, bot_name)
        if (!user) {
          logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω:', {
            description: 'User not found, will be created',
            telegram_id,
            bot_name,
          })
        } else {
          logger.info('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
            description: 'User found',
            telegram_id,
            user_id: user.id,
            bot_name,
          })
        }
        return !!user
      })

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentBalance = await step.run('get-user-balance', async () => {
        const balance = await getUserBalance(telegram_id, bot_name)

        logger.info('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Current user balance',
          telegram_id,
          currentBalance: balance,
          bot_name,
        })

        return balance
      })

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏
      if (type === 'money_expense' && currentBalance < Math.abs(amount)) {
        logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:', {
          description: 'Insufficient funds for deduction',
          telegram_id,
          currentBalance,
          requestedAmount: amount,
          bot_name,
        })

        throw new Error('Insufficient funds')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
      if (inv_id) {
        const existingPayment = await step.run(
          'check-existing-payment',
          async () => {
            return await getPaymentByInvId(inv_id)
          }
        )

        if (existingPayment) {
          logger.info('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
            description: 'Payment already processed',
            payment_id: existingPayment.payment_id,
            inv_id: inv_id,
          })
          return { success: false, error: 'Payment already exists' }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–≤—Å–µ–≥–¥–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
      const payment = await step.run('create-payment', async () => {
        return await createSuccessfulPayment({
          telegram_id: telegram_id,
          amount: Math.abs(amount), // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          stars: Math.abs(stars), // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          type, // money_income –∏–ª–∏ money_expense –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ
          description,
          bot_name,
          inv_id,
          metadata,
          payment_method: 'balance',
          status: 'COMPLETED',
        })
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–µ–π—á–∞—Å —ç—Ç–æ—Ç —à–∞–≥ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      // –û–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const balanceUpdate = await step.run('update-user-balance', async () => {
        try {
          logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Getting updated balance',
            telegram_id,
            payment_id: payment.payment_id,
            amount,
            type,
            bot_name,
          })

          // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
          const { data: newBalance, error: balanceError } = await supabase.rpc(
            'get_user_balance',
            {
              user_telegram_id: String(telegram_id),
            }
          )

          if (balanceError) {
            throw balanceError
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await supabase
            .from('users')
            .update({
              last_payment_date: new Date().toISOString(),
              updated_at: new Date().toISOString(),
            })
            .eq('telegram_id', String(telegram_id))

          return {
            success: true,
            oldBalance: currentBalance,
            newBalance,
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
            description: 'Error updating balance',
            error: error instanceof Error ? error.message : String(error),
            telegram_id,
            type,
            bot_name,
            user_id: userExists ? 'exists' : 'new',
            current_db_balance: currentBalance,
            attempted_amount_change: amount,
          })
          throw error
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await step.run('send-notification', async () => {
        try {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
          const operationId = inv_id || uuidv4()

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          await sendTransactionNotification({
            telegram_id: Number(telegram_id),
            operationId,
            amount,
            currentBalance: Number(currentBalance) || 0,
            newBalance: Number(balanceUpdate.newBalance) || 0,
            description: description || '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
            isRu: true,
            bot_name,
          })

          logger.info('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
            description: 'Transaction notification sent',
            telegram_id,
            operation_id: operationId,
            amount,
            old_balance: currentBalance,
            new_balance: balanceUpdate.newBalance,
            bot_name,
          })

          return { success: true, operationId }
        } catch (error) {
          logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
            description: 'Error sending notification',
            error: error instanceof Error ? error.message : String(error),
            telegram_id,
            amount,
            type,
            bot_name,
          })

          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          return { success: false, error: String(error) }
        }
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
      return {
        success: true,
        telegram_id,
        amount,
        type,
        payment_id: payment.payment_id,
        old_balance: balanceUpdate.oldBalance,
        new_balance: balanceUpdate.newBalance,
        operation_id: inv_id,
        bot_name,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : String(error),
        error_stack: error instanceof Error ? error.stack : undefined,
        telegram_id: event.data.telegram_id,
        amount: event.data.amount,
        type: event.data.type,
        bot_name: event.data.bot_name,
      })
      throw error
    }
  }
)
