import { inngest } from './clients'
import { logger } from '@/utils/logger'
import { createSuccessfulPayment } from '@/core/supabase/createSuccessfulPayment'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { sendTransactionNotificationTest } from '@/helpers/sendTransactionNotification'
import { v4 as uuidv4 } from 'uuid'
import { ModeEnum } from '@/price/helpers/modelsCost'

export type TransactionType =
  | 'money_expense'
  | 'money_income'
  | 'subscription_purchase'
  | 'subscription_renewal'
  | 'refund'
  | 'bonus'
  | 'referral'
  | 'system'

export interface PaymentProcessEvent {
  data: {
    telegram_id: string
    amount: number // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    stars?: number // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    type: TransactionType
    description: string
    bot_name: string
    inv_id?: string
    metadata?: any
    service_type: ModeEnum // –ò—Å–ø–æ–ª—å–∑—É–µ–º ModeEnum –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
  }
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Inngest
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: 'payment-processor',
    name: 'Payment Processor',
    retries: 3,
  },
  { event: 'payment/process' },
  async ({
    event,
    step,
  }: {
    event: { data: PaymentProcessEvent['data'] }
    step: any
  }) => {
    const { telegram_id, amount, type, description, bot_name, service_type } =
      event.data

    logger.info('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', {
      description: 'Starting payment processing',
      telegram_id,
      amount,
      type,
      bot_name,
      service_type,
    })

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (type === 'money_expense') {
        const currentBalance = await step.run('check-balance', async () => {
          logger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞', {
            description: 'Checking balance',
            telegram_id,
          })
          return getUserBalance(telegram_id)
        })

        logger.info('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å', {
          description: 'Current balance',
          telegram_id,
          balance: currentBalance,
          required_amount: amount,
        })

        if (currentBalance < amount) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`
          )
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      const payment = await step.run('create-payment', async () => {
        logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ', {
          description: 'Creating payment record',
          telegram_id,
          amount,
          type,
        })
        return createSuccessfulPayment({
          telegram_id,
          amount,
          stars: amount,
          type,
          description,
          bot_name,
          service_type,
          payment_method: 'balance',
          status: 'COMPLETED',
        })
      })

      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', {
        description: 'Payment created',
        payment_id: payment.payment_id,
        telegram_id,
        amount,
        type,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await step.run('send-notification', async () => {
        const operationId = uuidv4()
        logger.info('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
          description: 'Sending notification',
          telegram_id,
          amount,
          operationId,
        })
        return sendTransactionNotificationTest({
          telegram_id: Number(telegram_id),
          operationId,
          amount,
          currentBalance: 0,
          newBalance: 0,
          description,
          isRu: true,
          bot_name,
        })
      })

      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        description: 'Payment processed successfully',
        telegram_id,
        amount,
        type,
      })

      return { success: true, payment }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', {
        description: 'Error processing payment',
        telegram_id,
        amount,
        type,
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })
      throw error
    }
  }
)
