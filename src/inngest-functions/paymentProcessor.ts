import { inngest } from '@/inngest-functions/clients'
import { logger } from '@/utils/logger'
import { supabase } from '@/core/supabase'
import { sendTransactionNotification } from '@/helpers/sendTransactionNotification'
import { getUserBalance, updateUserBalance } from '@/core/supabase'
import { v4 as uuidv4 } from 'uuid'
/**
 * –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å —à–∞–≥–∞–º–∏
 */
export const paymentProcessor = inngest.createFunction(
  {
    id: `payment-processor`,
    retries: 3,
  },
  { event: 'payment/process' },
  async ({ event }) => {
    const {
      telegram_id,
      amount,
      type,
      description,
      bot_name,
      inv_id,
      service_type,
    } = event.data

    logger.info('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
      description: 'Processing payment',
      telegram_id,
      amount,
      type,
      service_type,
    })

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const currentBalance = await getUserBalance(telegram_id, bot_name)

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      const { data: payment, error: paymentError } = await supabase
        .from('payments_v2')
        .upsert([
          {
            inv_id: inv_id || `${telegram_id}-${Date.now()}`,
            telegram_id,
            amount,
            stars: amount,
            type,
            description,
            bot_name,
            status: 'COMPLETED',
            payment_method: 'balance',
            currency: 'STARS',
            metadata: service_type ? { service_type } : undefined,
          },
        ])
        .select('*')
        .single()

      if (paymentError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', {
          description: 'Error creating payment record',
          error: paymentError.message,
          error_details: paymentError,
          telegram_id,
          type,
        })
        throw new Error('Payment creation failed')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ add_stars_to_balance
      const {
        success,
        newBalance,
        error: balanceError,
      } = await updateUserBalance({
        telegram_id,
        amount,
        type: type as 'money_income' | 'money_expense',
        operation_description: description,
        bot_name,
        payment_method: 'balance',
        metadata: { payment_id: payment?.payment_id },
        service_type: service_type || 'default',
      })

      if (!success || balanceError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Error updating balance',
          error: balanceError,
          telegram_id,
          type,
        })
        throw new Error('Balance update failed')
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const operationId = uuidv4()
      await sendTransactionNotification({
        telegram_id: Number(telegram_id),
        operationId,
        amount,
        currentBalance: Number(currentBalance) || 0,
        newBalance: Number(newBalance) || 0,
        description: description || '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        isRu: true,
        bot_name,
      })

      logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
        description: 'Payment processed successfully',
        payment_id: payment?.payment_id,
        telegram_id,
        amount,
        type,
        currentBalance,
        newBalance,
      })

      return payment
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', {
        description: 'Error processing payment',
        error: error instanceof Error ? error.message : 'Unknown error',
        telegram_id,
        amount,
        type,
      })
      throw error
    }
  }
)
