import { Inngest } from 'inngest'
import { INNGEST_EVENT_KEY, INNGEST_SIGNING_KEY } from '@/config'
import { createHttpClient } from '@/utils/httpClient'
import { logger } from '@/utils/logger'

// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logger.info('üîÑ Initializing Inngest client...', {
  environment: process.env.NODE_ENV,
  docker: process.env.DOCKER_ENVIRONMENT === 'true',
  timestamp: new Date().toISOString(),
})

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
logger.info('üîë Checking Inngest keys:', {
  event_key_present: !!INNGEST_EVENT_KEY,
  signing_key_present: !!INNGEST_SIGNING_KEY,
})

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getBaseUrl = () => {
  if (process.env.NODE_ENV === 'production') {
    return process.env.INNGEST_URL || 'https://api.inngest.com'
  }

  // –î–ª—è Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL
  if (process.env.DOCKER_ENVIRONMENT === 'true') {
    return (
      process.env.INNGEST_BASE_DOCKER_URL || 'http://host.docker.internal:8288'
    )
  }

  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  return process.env.INNGEST_BASE_URL || 'http://localhost:8288'
}

// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
const httpClient = createHttpClient({
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –°–æ–∑–¥–∞–µ–º fetch –∞–¥–∞–ø—Ç–µ—Ä
const fetchAdapter = async (
  input: RequestInfo | URL,
  init?: RequestInit
): Promise<Response> => {
  const url = typeof input === 'string' ? input : input.toString()
  const response = await httpClient.request(url, {
    method: init?.method || 'GET',
    headers: init?.headers as Record<string, string>,
    body: init?.body,
  })

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Blob
  const blobData =
    typeof response.data === 'string'
      ? response.data
      : JSON.stringify(response.data)

  return {
    ok: response.ok,
    status: response.status,
    statusText: response.statusText,
    headers: new Headers(response.headers),
    json: async () => response.data,
    text: async () => blobData,
    blob: async () => new Blob([blobData]),
    arrayBuffer: async () => new TextEncoder().encode(blobData).buffer,
  } as Response
}

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Inngest
const inngestConfig = {
  id: 'neuro-blogger-2.0',
  eventKey: INNGEST_EVENT_KEY || 'development-key',
  signingKey: INNGEST_SIGNING_KEY,
  baseUrl: getBaseUrl(),
  fetch: fetchAdapter,
}

// –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ sensitive –¥–∞–Ω–Ω—ã—Ö)
logger.info('‚öôÔ∏è Inngest configuration:', {
  id: inngestConfig.id,
  baseUrl: inngestConfig.baseUrl,
  environment: process.env.NODE_ENV,
  is_docker: process.env.DOCKER_ENVIRONMENT === 'true',
  has_event_key: !!inngestConfig.eventKey,
  has_signing_key: !!inngestConfig.signingKey,
  timestamp: new Date().toISOString(),
})

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
export const inngest = new Inngest(inngestConfig)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
logger.info('‚úÖ Inngest client created:', !!inngest)
logger.info(
  '‚öôÔ∏è Inngest config:',
  JSON.stringify({
    id: inngestConfig.id,
    eventKey: inngestConfig.eventKey ? '***' : undefined,
    signingKey: inngestConfig.signingKey ? '***' : undefined,
    baseUrl: inngestConfig.baseUrl,
    customFetch: true,
  })
)

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
export const functions = []

// –í–ê–ñ–ù–û: –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// –§—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ serve.ts
