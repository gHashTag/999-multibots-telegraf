import { Inngest } from 'inngest'
import { INNGEST_EVENT_KEY } from '@/config'
import fetch, { Response } from 'node-fetch'
import type { RequestInit } from 'node-fetch'
import { logger } from '@/utils/logger'
// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('üîÑ Initializing Inngest client...')
console.log('üîë INNGEST_EVENT_KEY available:', !!INNGEST_EVENT_KEY)
console.log('üîß NODE_ENV:', process.env.NODE_ENV)

if (INNGEST_EVENT_KEY) {
  console.log(
    'üîë INNGEST_EVENT_KEY first 10 chars:',
    INNGEST_EVENT_KEY.substring(0, 10) + '...'
  )
}

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Inngest - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–ª–∞ —Ç—Ä–∏ –¥–Ω—è –Ω–∞–∑–∞–¥
const inngestConfig: any = {
  id: 'neuro-blogger-2.0',
  eventKey: INNGEST_EVENT_KEY || 'development-key',
}

// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö URL
if (process.env.NODE_ENV === 'development') {
  // baseUrl - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π)
  inngestConfig.baseUrl = 'http://localhost:2999/api/inngest'
  //
  // eventKey –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!inngestConfig.eventKey) {
    inngestConfig.eventKey = 'dev-key'
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Inngest CLI Dev Server
  inngestConfig.fetch = async (url: string, init: RequestInit) => {
    try {
      // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ Inngest
      const requestId = new Date().getTime().toString()
      logger.info('üîÑ Inngest –∑–∞–ø—Ä–æ—Å', {
        description: 'Inngest request',
        request_id: requestId,
        url,
        method: init.method,
        headers: JSON.stringify(init.headers),
        body_size: init.body
          ? typeof init.body === 'string'
            ? init.body.length
            : 'not-string'
          : 0,
        timestamp: new Date().toISOString(),
      })

      // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è (—Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /e/),
      // —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Inngest Dev Server
      if (url.includes('/e/')) {
        // –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Inngest, Dev Server —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8288
        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π: /e/[key]
        // https://www.inngest.com/docs/dev-server
        const devKey = inngestConfig.eventKey || 'dev-key'

        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã –∑–∞–ø—É—Å–∫–∞
        // process.env.DOCKER_ENVIRONMENT –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ docker-compose.yml
        const isDockerEnvironment = process.env.DOCKER_ENVIRONMENT === 'true'
        const baseUrl = isDockerEnvironment
          ? process.env.INNGEST_BASE_DOCKER_URL ||
            'http://host.docker.internal:8288'
          : process.env.INNGEST_BASE_URL || 'http://localhost:8288'

        const devServerUrl = `${baseUrl}/e/${devKey}`

        logger.info('üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è Inngest', {
          description: 'Using Inngest URL',
          is_docker: isDockerEnvironment,
          base_url: baseUrl,
          dev_server_url: devServerUrl,
          timestamp: new Date().toISOString(),
        })

        const requestBody = init.body
          ? typeof init.body === 'string'
            ? JSON.parse(init.body)
            : '(–Ω–µ —Å—Ç—Ä–æ–∫–∞)'
          : '(–ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ)'

        logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Inngest', {
          description: 'Sending event to Inngest',
          request_id: requestId,
          originalUrl: url,
          redirectUrl: devServerUrl,
          method: init.method,
          eventName: requestBody.name || 'unknown',
          eventId: requestBody.id || 'no-id',
          requestBody: JSON.stringify(requestBody).substring(0, 200),
          timestamp: new Date().toISOString(),
        })

        try {
          logger.info('üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞', {
            description: 'Executing request',
            request_id: requestId,
            url: devServerUrl,
            timestamp: new Date().toISOString(),
          })

          const response = await fetch(devServerUrl, init)

          const responseStatus = response.status
          const responseText = await response.text()

          logger.info('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Inngest Dev Server –ø–æ–ª—É—á–µ–Ω', {
            description: 'Response received from Inngest Dev Server',
            request_id: requestId,
            url: devServerUrl,
            status: responseStatus,
            responseBody:
              responseText.substring(0, 200) +
              (responseText.length > 200 ? '...' : ''),
            timestamp: new Date().toISOString(),
          })

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Response –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É–∂–µ –±—ã–ª "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
          return new Response(responseText, {
            status: responseStatus,
            headers: response.headers,
          })
        } catch (err) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest Dev Server', {
            description: 'Error sending event to Inngest Dev Server',
            request_id: requestId,
            url: devServerUrl,
            error: err instanceof Error ? err.message : 'Unknown error',
            stack: err instanceof Error ? err.stack : undefined,
            timestamp: new Date().toISOString(),
          })

          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL - –≤–¥—Ä—É–≥ –ø–æ—Ä—Ç –¥—Ä—É–≥–æ–π
          try {
            logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL', {
              description: 'Trying alternative URL',
              request_id: requestId,
              url: `http://localhost:2999/api/inngest/e`,
              timestamp: new Date().toISOString(),
            })

            const altResponse = await fetch(
              `http://localhost:2999/api/inngest/e`,
              init
            )
            const altResponseText = await altResponse.text()

            logger.info('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL –ø–æ–ª—É—á–µ–Ω', {
              description: 'Response received from alternative URL',
              request_id: requestId,
              status: altResponse.status,
              responseBody:
                altResponseText.substring(0, 200) +
                (altResponseText.length > 200 ? '...' : ''),
              timestamp: new Date().toISOString(),
            })

            return new Response(altResponseText, {
              status: altResponse.status,
              headers: altResponse.headers,
            })
          } catch (altErr) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL', {
              description: 'Error sending to alternative URL',
              request_id: requestId,
              error: altErr instanceof Error ? altErr.message : 'Unknown error',
              timestamp: new Date().toISOString(),
            })
          }

          throw err
        }
      }

      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL
      logger.info('üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å Inngest', {
        description: 'Standard Inngest request',
        url,
        method: init.method,
        timestamp: new Date().toISOString(),
      })

      const response = await fetch(url, init)

      logger.info('‚úì –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', {
        description: 'Standard response received',
        status: response.status,
        timestamp: new Date().toISOString(),
      })

      return response
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ Inngest', {
        description: 'Error sending Inngest request',
        possibleUrls: [
          'http://localhost:2999/api/inngest/event',
          'http://localhost:2999/api/inngest/e',
        ],
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
      })

      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      throw error
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –Ω—É–∂–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const inngest = new Inngest(inngestConfig)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
console.log('‚úÖ Inngest client created:', !!inngest)
console.log(
  '‚öôÔ∏è Inngest config:',
  JSON.stringify({
    id: inngestConfig.id,
    eventKey: inngestConfig.eventKey ? '***' : undefined,
    baseUrl: inngestConfig.baseUrl,
    customFetch: !!inngestConfig.fetch,
  })
)

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
export const functions = []

// –í–ê–ñ–ù–û: –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// –§—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ serve.ts
