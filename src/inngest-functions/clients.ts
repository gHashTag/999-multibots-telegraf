import { Inngest } from 'inngest'
import { INNGEST_EVENT_KEY, INNGEST_URL } from '@/config'
import axios from 'axios'
import { logger } from '@/utils/logger'

logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Inngest –∫–ª–∏–µ–Ω—Ç–∞:', {
  description: 'Initializing Inngest client',
  hasEventKey: !!INNGEST_EVENT_KEY,
  hasUrl: !!INNGEST_URL,
  nodeEnv: process.env.NODE_ENV,
})

const createInngestClient = () => {
  const config = {
    id: process.env.NODE_ENV === 'test' ? 'test-client' : 'neuro-blogger',
    eventKey: INNGEST_EVENT_KEY || 'development-key',
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
    baseUrl:
      process.env.NODE_ENV === 'development'
        ? 'http://localhost:8288'
        : INNGEST_URL || 'https://api.inngest.com',
    fetch: async (input: RequestInfo | URL, init?: RequestInit) => {
      try {
        const url = typeof input === 'string' ? input : input.toString()

        // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–µ URL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∏ production URL
        const allowedUrls = ['http://localhost:8288', 'https://api.inngest.com']
        const isAllowedUrl = allowedUrls.some(allowed =>
          url.startsWith(allowed)
        )

        if (!isAllowedUrl) {
          logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º—É URL:', {
            description: 'Attempt to access unauthorized URL',
            url: url.split('?')[0],
          })
          throw new Error('Invalid Inngest API URL')
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Inngest:', {
          description: 'Sending request to Inngest',
          method: init?.method || 'GET',
          url: url.split('?')[0],
          hasBody: !!init?.body,
        })

        const response = await axios({
          method: init?.method || 'GET',
          url,
          data: init?.body,
          headers: {
            ...(init?.headers as any),
            'x-inngest-event-key': INNGEST_EVENT_KEY,
          },
          timeout: 30000,
        })

        logger.info('‚úÖ Inngest –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', {
          description: 'Inngest request successful',
          status: response.status,
          method: init?.method || 'GET',
          url: url.split('?')[0],
        })

        return {
          ok: response.status >= 200 && response.status < 300,
          status: response.status,
          json: async () => response.data,
        } as Response
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ Inngest fetch:', {
          description: 'Inngest fetch error',
          error: error instanceof Error ? error.message : String(error),
          url:
            typeof input === 'string'
              ? input.split('?')[0]
              : input.toString().split('?')[0],
        })
        throw error
      }
    },
  }
  return new Inngest(config)
}

export const inngest: Inngest = createInngestClient()

logger.info('‚úÖ Inngest –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', {
  description: 'Inngest client created',
  isInitialized: !!inngest,
  baseUrl:
    process.env.NODE_ENV === 'development'
      ? 'http://localhost:8288'
      : INNGEST_URL || 'https://api.inngest.com',
})

export const functions = []

// –í–ê–ñ–ù–û: –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// –§—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ serve.ts
