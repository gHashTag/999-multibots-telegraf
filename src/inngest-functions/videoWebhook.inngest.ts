import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { saveVideoToPath } from '@/utils/saveVideoToPath'
import { supabase } from '@/core/supabase'

export const videoWebhookFunction = inngest.createFunction(
  {
    id: 'video-webhook-handler',
    name: 'video/webhook',
    retries: 3,
  },
  { event: 'video/webhook' },
  async ({ event, step }) => {
    const { bot_name, telegram_id, output, status, error } = event.data

    logger.info('üé• –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –≤–∏–¥–µ–æ:', {
      description: 'Video webhook received',
      bot_name,
      telegram_id,
      status,
    })

    if (status === 'failed') {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:', {
        description: 'Video generation failed',
        error,
      })
      return { status: 'failed', error }
    }

    if (status !== 'success') {
      logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', {
        description: 'Invalid status',
        status,
      })
      return { status: 'failed', error: `Invalid status: ${status}` }
    }

    const { bot, error: botError } = getBotByName(bot_name)
    if (botError || !bot) {
      throw new Error(`Bot ${bot_name} not found: ${botError}`)
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
      const videoPath = await step.run('save-video', () =>
        saveVideoToPath(output, `/tmp/video_${telegram_id}_${Date.now()}.mp4`)
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-video', async () => {
        await bot.telegram.sendVideo(telegram_id, videoPath, {
          caption: 'üé• –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!',
        })
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
      await step.run('save-to-db', async () => {
        const { data, error: dbError } = await supabase
          .from('assets')
          .insert({
            type: 'video',
            trigger_word: 'video',
            telegram_id,
            public_url: output,
            text: event.data.prompt,
            model: event.data.videoModel,
          })
          .select()
          .single()

        if (dbError) {
          throw new Error(`Failed to save to database: ${dbError.message}`)
        }

        return data
      })

      return { status: 'success' }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', {
        description: 'Error processing video',
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }
)
