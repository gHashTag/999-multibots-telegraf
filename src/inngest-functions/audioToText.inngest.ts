/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è AUDIO_TRANSCRIPTION_EVENT –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è AUDIO_PROCESSING_COMPLETED_EVENT
 */

import { inngest } from './clients';
import * as os from 'os';
import * as path from 'path';
import * as fs from 'fs';
import { 
  AUDIO_PROCESSING_COMPLETED_EVENT, 
  AUDIO_TRANSCRIPTION_EVENT, 
  CHUNK_SIZE,
  MAX_SINGLE_AUDIO_DURATION,
  TranscriptionModels
} from '../scenes/audioToTextScene/constants';
import { 
  AudioProcessingCompletedEvent, 
  AudioProcessingEvent, 
  TranscriptionResult, 
  TranscriptionSettings 
} from '../scenes/audioToTextScene/types';
import { 
  downloadFile, 
  getUserById, 
  updateUserBalance 
} from '../core/supabase';
import { 
  extractAudioFromVideo, 
  getMediaDuration, 
  splitAudioIntoChunks, 
  cleanupTempFiles 
} from '../services/ffmpeg-service';
import { 
  transcribeAudio, 
  transcribeLongAudio 
} from '../services/openai-service';
import { getBotByName } from '../helpers/bot-helpers';
import { validateAndCalculateAudioTranscriptionPrice } from '../price/helpers';

// –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
interface AudioToTextEvent {
  name: string;
  data: {
    userId: number;
    fileId: string;
    bot_name: string;
    settings: TranscriptionSettings;
    chunks?: Array<{
      start: number;
      end: number;
    }>;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
export const audioToTextFunction = inngest.createFunction(
  { id: 'audio-to-text-processing' },
  { event: AUDIO_TRANSCRIPTION_EVENT },
  async ({ event, step }: { event: AudioToTextEvent, step: any }) => {
    console.log('üéôÔ∏è –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:', {
      description: 'Starting audio processing',
      event_id: event.name,
      user_id: event.data.userId
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const params = event.data;
    if (!params.userId || !params.fileId || !params.bot_name) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:', {
        description: 'Insufficient data for audio processing',
        params
      });
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const user = await step.run('check-user', () => 
      getUserById(params.userId, params.bot_name)
    );

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found',
        user_id: params.userId
      });
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    const botResult = getBotByName(params.bot_name);
    if (!botResult?.bot) {
      console.error('‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'Bot not found',
        bot_name: params.bot_name
      });
      throw new Error(`–ë–æ—Ç ${params.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    const { bot } = botResult;

    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const fileUrl = await step.run('get-file', async () => {
        try {
          const fileLink = await bot.telegram.getFileLink(params.fileId);
          return fileLink.toString();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª:', error);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª');
        }
      });

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const tempDir = os.tmpdir();
      const tempFilePath = path.join(tempDir, `audio_${Date.now()}_${Math.random().toString(36).substring(7)}.mp3`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
      await step.run('download-file', async () => {
        try {
          await downloadFile(fileUrl, tempFilePath);
          console.log('‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω:', tempFilePath);
          
          if (!fs.existsSync(tempFilePath)) {
            throw new Error('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω');
          }
          
          return tempFilePath;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
      let audioPath = tempFilePath;
      const isVideo = params.settings?.model ? false : false; // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      const filesToCleanup = [tempFilePath];

      // –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
      if (isVideo) {
        audioPath = await step.run('extract-audio', async () => {
          try {
            const extractedAudioPath = await extractAudioFromVideo(tempFilePath);
            filesToCleanup.push(extractedAudioPath);
            return extractedAudioPath;
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ');
          }
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
      const duration = await step.run('get-duration', async () => {
        try {
          return await getMediaDuration(audioPath);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ:', error);
          return 300; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        }
      });

      // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const priceResult = await step.run('calculate-price', async () => {
        try {
          return await validateAndCalculateAudioTranscriptionPrice(
            user.id,
            duration,
            params.bot_name,
            params.settings?.model || TranscriptionModels.WHISPER_MEDIUM
          );
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (user.balance < priceResult.amount) {
        await bot.telegram.sendMessage(
          user.id,
          `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${priceResult.amount} –∫—Ä–µ–¥–∏—Ç–æ–≤, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${user.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.`
        );
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await step.run('deduct-balance', async () => {
        try {
          await updateUserBalance(user.id, -priceResult.amount, params.bot_name);
          await bot.telegram.sendMessage(
            user.id, 
            `üí∏ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${priceResult.amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ.`
          );
          return true;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:', error);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é');
        }
      });

      // –ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      let transcriptionResult: TranscriptionResult;
      
      if (duration <= MAX_SINGLE_AUDIO_DURATION) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞—É–¥–∏–æ
        transcriptionResult = await step.run('transcribe-audio', async () => {
          try {
            await bot.telegram.sendMessage(user.id, 'üéß –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ...');
            
            const result = await transcribeAudio(
              audioPath,
              params.settings?.language,
              params.settings?.model || TranscriptionModels.WHISPER_MEDIUM
            );
            
            return {
              text: result,
              taskId: `audio_${Date.now()}_${Math.random().toString(36).substring(7)}`,
              language: params.settings?.language || 'auto'
            };
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ');
          }
        });
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        transcriptionResult = await step.run('transcribe-long-audio', async () => {
          try {
            await bot.telegram.sendMessage(
              user.id, 
              `üéß –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (${Math.round(duration / 60)} –º–∏–Ω—É—Ç)...`
            );
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏
            const audioParts = await splitAudioIntoChunks(audioPath, CHUNK_SIZE);
            filesToCleanup.push(...audioParts);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å—Ç–µ–π
            await bot.telegram.sendMessage(
              user.id, 
              `üìä –ê—É–¥–∏–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ ${audioParts.length} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`
            );
            
            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            const result = await transcribeLongAudio(
              audioParts,
              params.settings?.language,
              params.settings?.model || TranscriptionModels.WHISPER_MEDIUM,
              (partIndex, total) => {
                bot.telegram.sendMessage(
                  user.id, 
                  `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Å—Ç—å ${partIndex + 1} –∏–∑ ${total}...`
                );
              }
            );
            
            return {
              text: result,
              taskId: `audio_long_${Date.now()}_${Math.random().toString(36).substring(7)}`,
              language: params.settings?.language || 'auto'
            };
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ');
          }
        });
      }

      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      await step.run('cleanup-files', async () => {
        try {
          await cleanupTempFiles(filesToCleanup);
          return true;
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
          return false;
        }
      });

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await step.run('create-completion-event', async () => {
        const completionEvent: AudioProcessingCompletedEvent = {
          userId: user.id,
          fileId: params.fileId,
          taskId: transcriptionResult.taskId,
          result: transcriptionResult
        };
        
        await inngest.send({
          name: AUDIO_PROCESSING_COMPLETED_EVENT,
          data: completionEvent
        });
        
        return true;
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-result', async () => {
        try {
          await bot.telegram.sendMessage(
            user.id, 
            '‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
          );

          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
          const resultText = `üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:*\n\n${transcriptionResult.text}`;
          
          // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
          if (resultText.length <= 4000) {
            await bot.telegram.sendMessage(user.id, resultText, { parse_mode: 'Markdown' });
          } else {
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            const chunks = [];
            let text = resultText;
            while (text.length > 0) {
              chunks.push(text.substring(0, 4000));
              text = text.substring(4000);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for (let i = 0; i < chunks.length; i++) {
              await bot.telegram.sendMessage(
                user.id, 
                `${i === 0 ? 'üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:*\n\n' : ''}${chunks[i]}${i === chunks.length - 1 ? '' : '\n(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...)'}`,
                { parse_mode: 'Markdown' }
              );
            }
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
          await bot.telegram.sendMessage(
            user.id,
            'üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'TXT', callback_data: `export_txt:${transcriptionResult.taskId}` },
                    { text: 'DOCX', callback_data: `export_docx:${transcriptionResult.taskId}` }
                  ],
                  [
                    { text: 'PDF', callback_data: `export_pdf:${transcriptionResult.taskId}` },
                    { text: 'JSON', callback_data: `export_json:${transcriptionResult.taskId}` }
                  ]
                ]
              }
            }
          );
          
          return true;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
          
          try {
            await bot.telegram.sendMessage(
              user.id, 
              '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.'
            );
          } catch (sendError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
          }
          
          return false;
        }
      });

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        description: 'Audio processing completed successfully',
        user_id: user.id,
        duration,
        transcription_length: transcriptionResult.text.length
      });

      return {
        success: true,
        userId: user.id,
        fileId: params.fileId,
        taskId: transcriptionResult.taskId
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
      
      try {
        await bot.telegram.sendMessage(
          params.userId, 
          `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: ${(error as Error).message}`
        );
      } catch (sendError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
      
      throw error;
    }
  }
); 