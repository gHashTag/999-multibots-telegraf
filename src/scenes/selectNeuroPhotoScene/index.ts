import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers/language'
import { logger } from '@/utils/logger'
import { handleHelpCancel } from '@/handlers'
import { ModeEnum } from './price/types/modes'
//
export const selectNeuroPhotoScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.SelectNeuroPhoto,
  // async ctx => {
  //   const isRu = isRussian(ctx)
  //   logger.info({
  //     message: 'üé® –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
  //     description: 'Entering neuro photo version selection scene',
  //     telegram_id: ctx.from?.id,
  //   })

  //   const message = isRu
  //     ? 'üì∏ –ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n\n' +
  //       '1. –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux\n' +
  //       '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ –æ–±—É—á–∞–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ Flux\n' +
  //       '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n' +
  //       '‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á\n' +
  //       '‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤\n\n' +
  //       '2. –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux Pro\n' +
  //       '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ –æ–±—É—á–∞–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ Flux Pro\n' +
  //       '‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n' +
  //       '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω\n' +
  //       '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è\n' +
  //       '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n' +
  //       '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –≤–∞—à–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–µ–ª–∞'
  //     : 'üì∏ Which Neuro Photo version do you want to use?\n\n' +
  //       '1. Neuro Photo Flux\n' +
  //       '‚Ä¢ Use if you trained Digital Body Flux\n' +
  //       '‚Ä¢ Fast processing\n' +
  //       '‚Ä¢ Suitable for standard tasks\n' +
  //       '‚Ä¢ Optimized for portraits\n\n' +
  //       '2. Neuro Photo Flux Pro\n' +
  //       '‚Ä¢ Use if you trained Digital Body Flux Pro\n' +
  //       '‚Ä¢ High detail quality\n' +
  //       '‚Ä¢ Support for complex scenes\n' +
  //       '‚Ä¢ Advanced style settings\n' +
  //       '‚Ä¢ Recommended for professional use\n\n' +
  //       '‚ÑπÔ∏è Choose the version that matches your Digital Body version'

  //   await ctx.reply(
  //     message,
  //     Markup.keyboard([
  //       isRu
  //         ? ['–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux', '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux Pro']
  //         : ['Neuro Photo Flux', 'Neuro Photo Flux Pro'],
  //     ])
  //       .oneTime()
  //       .resize()
  //   )

  //   return ctx.wizard.next()
  // },
  async ctx => {
    const isRu = isRussian(ctx)
    // const message = ctx.message

    // logger.info({
    //   message: 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
    //   description: 'Processing neuro photo version selection',
    //   telegram_id: ctx.from?.id,
    // })

    // if (!message || !('text' in message)) {
    //   logger.warn({
    //     message: '‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞',
    //     description: 'Received message without text',
    //     telegram_id: ctx.from?.id,
    //   })
    //   await ctx.reply(
    //     isRu
    //       ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏'
    //       : 'Please select a version using the buttons'
    //   )
    //   return ctx.wizard.back()
    // }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const text = 'flux' //message.text.toLowerCase()

    if (text.includes('flux pro') || text.includes('pro')) {
      logger.info({
        message: '‚ú® –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è Flux Pro',
        description: 'Selected Flux Pro version',
        telegram_id: ctx.from?.id,
      })
      ctx.session.mode = ModeEnum.NeuroPhotoV2
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      return
    } else if (text.includes('flux')) {
      logger.info({
        message: '‚ú® –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è Flux',
        description: 'Selected Flux version',
        telegram_id: ctx.from?.id,
      })
      ctx.session.mode = ModeEnum.NeuroPhoto
      await ctx.scene.enter(ModeEnum.CheckBalanceScene)
      return
    }

    logger.warn({
      message: '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏',
      description: 'Invalid version selection',
      telegram_id: ctx.from?.id,
      text: text,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é (–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux –∏–ª–∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ Flux Pro)'
        : '‚ùå Please select a version (Neuro Photo Flux or Neuro Photo Flux Pro)'
    )
    return ctx.wizard.back()
  }
)
