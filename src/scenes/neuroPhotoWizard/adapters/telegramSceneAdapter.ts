import type { MyContext } from '@/interfaces'
import { createHelpCancelKeyboard } from '@/menu'

/**
 * Adapter for Telegram interactions in the NeuroPhotoWizard module.
 * Handles user notifications for various steps in the wizard flow.
 * This adapter is injected as a dependency to ensure isolation.
 */

/**
 * Send welcome message to the user at the start of the NeuroPhoto conversation.
 * @param ctx Telegram context for sending messages.
 * @param isRussian Whether the user speaks Russian.
 */
export async function sendWelcomeMessage(
  ctx: MyContext,
  isRussian: boolean
): Promise<void> {
  await ctx.reply(
    isRussian
      ? `üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ H–µ–π—Ä–æ—Ñ–æ—Ç–æ</b>

–û–ø–∏—à–∏—Ç–µ <b>–ù–ê –ê–ù–ì–õ–ò–ô–°–ö–û–ú –Ø–ó–´–ö–ï</b>, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:
- portrait of a girl in anime style
- man in a space suit
- fantastic landscape with dragons

<i>–ù–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏. –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫!</i>`
      : `üé® <b>Creating Neural Photo</b>

Describe what you want to depict. For example:
- anime-style portrait of a girl
- cat in a space suit
- fantastic landscape with dragons

<i>The neural network will create an image based on your request using your personal model.</i>`,
    {
      parse_mode: 'HTML',
      reply_markup: createHelpCancelKeyboard(isRussian).reply_markup,
    }
  )
}

/**
 * Notify user when they don't have an available model.
 * @param ctx Telegram context for sending messages.
 * @param isRussian Whether the user speaks Russian.
 */
export async function notifyNoModelAvailable(
  ctx: MyContext,
  isRussian: boolean
): Promise<void> {
  await ctx.reply(
    isRussian
      ? `‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ.
–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`
      : `‚ö†Ô∏è You don't have an available model for neural photos.
Create your model or use other bot functions.`,
    { parse_mode: 'HTML' }
  )
}

/**
 * Send error message to the user when something goes wrong.
 * @param ctx Telegram context for sending messages.
 * @param isRussian Whether the user speaks Russian.
 */
export async function sendErrorMessage(
  ctx: MyContext,
  isRussian: boolean
): Promise<void> {
  await ctx.reply(
    isRussian
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`
      : `‚ùå An error occurred. Please try again later.`
  )
}

/**
 * Send prompt confirmation message to the user.
 * @param ctx Telegram context for sending messages.
 * @param prompt The prompt text to confirm.
 * @param isRussian Whether the user speaks Russian.
 */
export async function sendPromptConfirmation(
  ctx: MyContext,
  prompt: string,
  isRussian: boolean
): Promise<void> {
  await ctx.reply(
    isRussian
      ? `‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: <b>${prompt}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`
      : `‚úÖ Your request is accepted: <b>${prompt}</b>

Select the number of images to generate:`,
    { parse_mode: 'HTML' }
  )
}
