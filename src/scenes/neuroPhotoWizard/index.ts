import { MyContext } from '@/interfaces'
import { ModelUrl } from '@/interfaces'
import { createHelpCancelKeyboard } from '@/menu'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { getLatestUserModel, getUserData } from '@/core/supabase'
import { levels } from '@/menu'
import { handleMenu } from '@/handlers'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import { WizardScene } from 'telegraf/scenes'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'

const neuroPhotoConversationStep = async (ctx: MyContext) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –í–´–ó–û–í neuroPhotoConversationStep: Step=${
      ctx.session.__scenes?.cursor || 0
    }, ID=${telegramId}`
  )
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: prompt=${
      ctx.session.prompt || '–Ω–µ—Ç'
    }, initialized=${ctx.session.neuroPhotoInitialized || false}`
  )

  // –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏
    if (
      !ctx.session.userModel ||
      !ctx.session.userModel.model_url ||
      !ctx.session.userModel.trigger_word
    ) {
      console.log(
        `üßô‚Äç‚ôÇÔ∏è [STEP0] –í —Å–µ—Å—Å–∏–∏ –ù–ï–¢ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π`
      )
      logger.info({
        message: '‚ö†Ô∏è [NeuroPhoto] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏',
        telegramId,
        sessionData: JSON.stringify(ctx.session),
      })

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–æ–¥–µ–ª–∏, —Å–æ–æ–±—â–∞–µ–º –µ–º—É –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
      const isRussian = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRussian
          ? `‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`
          : `‚ö†Ô∏è You don't have an available model for neural photos.\nCreate your model or use other bot functions.`,
        { parse_mode: 'HTML' }
      )
      return await ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    // console.log(
    //   `üßô‚Äç‚ôÇÔ∏è [STEP0] –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏: ${ctx.session.userModel.model_url}, –¢—Ä–∏–≥–≥–µ—Ä: ${ctx.session.userModel.trigger_word}`
    // )
    // logger.info({
    //   message: '‚úÖ [NeuroPhoto] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
    //   telegramId,
    //   modelUrl: ctx.session.userModel.model_url,
    //   triggerWord: ctx.session.userModel.trigger_word,
    //   isInitialized: ctx.session.neuroPhotoInitialized === true,
    // })

    // –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º –≤—Ö–æ–¥–µ
    if (!ctx.session.neuroPhotoInitialized) {
      ctx.session.neuroPhotoInitialized = true
      console.log('üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã! neuroPhotoInitialized = true')
      logger.info({
        message: '‚úÖ [NeuroPhoto] –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã, –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–º–ø—Ç–∞.',
        telegramId,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
      const isRussian = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRussian
          ? `üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ H–µ–π—Ä–æ—Ñ–æ—Ç–æ</b>\n\n–û–ø–∏—à–∏—Ç–µ <b>–ù–ê –ê–ù–ì–õ–ò–ô–°–ö–û–ú –Ø–ó–´–ö–ï</b>, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n- portrait of a girl in anime style\n- man in a space suit\n- fantastic landscape with dragons\n\n<i>–ù–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏. –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫!</i>`
          : `üé® <b>Creating Neural Photo</b>\n\nDescribe what you want to depict. For example:\n- anime-style portrait of a girl\n- cat in a space suit\n- fantastic landscape with dragons\n\n<i>The neural network will create an image based on your request using your personal model.</i>`,
        {
          parse_mode: 'HTML',
          reply_markup: createHelpCancelKeyboard(isRussian).reply_markup,
        }
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ (—à–∞–≥ 0), –æ–∂–∏–¥–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
      return // –í–∞–∂–Ω–æ! –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    }

    // –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–Ω–∞—á–∏—Ç –º—ã –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if (ctx.message && 'text' in ctx.message) {
      const messageText = ctx.message.text
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ levels[ModeEnum.NeuroPhoto].title_ru –∏ title_en —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
      if (
        messageText === levels[ModeEnum.NeuroPhoto]?.title_ru ||
        messageText === levels[ModeEnum.NeuroPhoto]?.title_en
      ) {
        console.log(
          'üßô‚Äç‚ôÇÔ∏è [neuroPhotoConversationStep] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        )
        logger.info({
          message:
            '‚è≥ [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∫–∞–∫ —Ç–µ–∫—Å—Ç, –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞',
          telegramId,
          text: messageText,
        })
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—å–±—É –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ –æ—à–∏–±–∫–µ
        const isRussian = ctx.from?.language_code === 'ru'
        await ctx.reply(
          isRussian
            ? `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.`
            : `Please enter a description for your neuro-photo in English.`,
          { reply_markup: createHelpCancelKeyboard(isRussian).reply_markup }
        )
        return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
      }

      // –≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      console.log(
        `üßô‚Äç‚ôÇÔ∏è [neuroPhotoConversationStep] –ü–æ–ª—É—á–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: ${messageText}`
      )
      logger.info({
        message: 'üìù [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        telegramId,
        text: messageText,
      })

      ctx.session.prompt = messageText
      console.log(
        `üßô‚Äç‚ôÇÔ∏è [neuroPhotoConversationStep] –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–º–ø—Ç: ${ctx.session.prompt}`
      )
      logger.info({
        message: 'üíæ [NeuroPhoto] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        prompt: ctx.session.prompt,
      })

      // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É, –∞ –Ω–µ —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞)
      // —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏ –≤–æ—à–µ–ª —Å–Ω–æ–≤–∞.
      // –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ –≤–∏–∑–∞—Ä–¥–∞, —Ç–æ prompt —É–∂–µ –µ—Å—Ç—å.
      // –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–µ.
      // ctx.session.neuroPhotoInitialized = false; // –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, –Ω–∞–¥–æ –ø—Ä–æ–¥—É–º–∞—Ç—å

      ctx.wizard.next()
      return await neuroPhotoPromptStep(ctx)
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç ctx.message), –∫–æ–≥–¥–∞ –º—ã –æ–∂–∏–¥–∞–ª–∏ –ø—Ä–æ–º–ø—Ç
      console.log(
        'üßô‚Äç‚ôÇÔ∏è [neuroPhotoConversationStep] –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
      )
      logger.warn({
        message:
          '‚ö†Ô∏è [NeuroPhoto] –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        telegramId,
        update: ctx.update ? JSON.stringify(ctx.update) : 'undefined',
      })
      const isRussian = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRussian
          ? `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ.`
          : `Please enter a text description for your neuro-photo.`,
        { reply_markup: createHelpCancelKeyboard(isRussian).reply_markup }
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    }
  } catch (error: any) {
    console.error(`üßô‚Äç‚ôÇÔ∏è [neuroPhotoConversationStep] –û—à–∏–±–∫–∞: ${error.message}`)
    logger.error({
      message: '‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞',
      telegramId,
      error: error.message,
      stack: error.stack,
    })

    const isRussian = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRussian
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`
        : `‚ùå An error occurred. Please try again later.`
    )
    return await ctx.scene.leave()
  }
}

const neuroPhotoPromptStep = async (ctx: MyContext) => {
  console.log('üßô‚Äç‚ôÇÔ∏è –ù–ê–ß–ê–õ–û: neuroPhotoPromptStep')
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –í–´–ó–û–í neuroPhotoPromptStep: Step=${
      ctx.session.__scenes?.cursor || 0
    }, ID=${telegramId}`
  )
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: prompt=${
      ctx.session.prompt || '–Ω–µ—Ç'
    }, initialized=${ctx.session.neuroPhotoInitialized || false}`
  )
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoPromptStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'prompt',
    sessionData: JSON.stringify(ctx.session || {}),
    currentWizardStep: ctx.session.__scenes?.cursor || 0,
  })

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    let promptText = ''

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º - –±–µ—Ä–µ–º –µ–≥–æ
    if (ctx.message && 'text' in ctx.message) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é "üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ"
      if (
        ctx.message.text === levels[ModeEnum.NeuroPhoto]?.title_ru ||
        ctx.message.text === levels[ModeEnum.NeuroPhoto]?.title_en
      ) {
        logger.warn({
          message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –ø—Ä–æ–º–ø—Ç–∞',
          telegramId,
          text: ctx.message.text,
        })

        await ctx.reply(
          isRu
            ? '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
            : '‚ö†Ô∏è Please enter a text prompt for image generation.'
        )

        return // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      } else {
        promptText = ctx.message.text
        console.log('üßô‚Äç‚ôÇÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', promptText)
      }
    }
    // –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–µ—Å—Å–∏–∏ (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é)
    else if (ctx.session.prompt && ctx.session.prompt !== 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ') {
      promptText = ctx.session.prompt
      console.log('üßô‚Äç‚ôÇÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–µ—Å—Å–∏–∏:', promptText)
    }
    // –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ –∏–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
    else {
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        result: 'empty_message',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå No prompt text received. Please enter a description for image generation.'
      )

      return // –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π –ª–∏ –ø—Ä–æ–º–ø—Ç
    if (promptText.trim() === '') {
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        result: 'empty_prompt',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.'
          : '‚ùå Prompt cannot be empty. Please describe the image you want to generate.'
      )

      return // –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }

    logger.info({
      message: 'üìã [NeuroPhoto] –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
      telegramId,
      promptLength: promptText.length,
      promptPreview:
        promptText.substring(0, 50) + (promptText.length > 50 ? '...' : ''),
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      logger.info({
        message: 'üõë [NeuroPhoto] –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        telegramId,
        action: 'leaving_scene',
      })
      return ctx.scene.leave()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (
      !ctx.session.userModel ||
      !ctx.session.userModel.model_url ||
      !ctx.session.userModel.trigger_word
    ) {
      logger.error({
        message: '‚ùå [NeuroPhoto] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏',
        telegramId,
        userModel: ctx.session.userModel ? 'exists_but_incomplete' : 'missing',
        modelUrl: ctx.session.userModel?.model_url || 'missing',
        triggerWord: ctx.session.userModel?.trigger_word || 'missing',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : '‚ùå An error occurred: model data not found. Please return to the main menu and try again.'
      )

      return ctx.scene.leave()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.prompt = promptText
    const model_url = ctx.session.userModel.model_url as ModelUrl
    const trigger_word = ctx.session.userModel.trigger_word as string

    logger.info({
      message: 'üíæ [NeuroPhoto] –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
      telegramId,
      prompt: promptText,
      hasModelUrl: !!model_url,
      hasTriggerWord: !!trigger_word,
    })

    const userId = ctx.from?.id
    if (!userId) {
      logger.error({
        message: '‚ùå [NeuroPhoto] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
        telegramId: 'unknown',
        result: 'missing_user_id',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : '‚ùå An error occurred: could not determine user ID.'
      )

      return ctx.scene.leave()
    }

    // --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ ---
    const userData = await getUserData(userId.toString())
    let genderPromptPart = 'person' // Default
    if (userData?.gender === 'female') {
      genderPromptPart = 'female'
    } else if (userData?.gender === 'male') {
      genderPromptPart = 'male'
    }
    logger.info({
      message: 'üë§ [NeuroPhoto] Gender determined for prompt',
      telegramId: userId.toString(),
      gender: userData?.gender || 'not_set',
      genderPromptPart,
    })

    const realisticPromptPart =
      'Cinematic Lighting, ethereal light, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details High quality, gorgeous, glamorous, 8k, super detail, gorgeous light and shadow, detailed decoration, detailed lines'

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å trigger_word –∏ –ø–æ–ª–æ–º
    const fullPrompt = `Fashionable ${trigger_word} ${genderPromptPart}, ${promptText}, ${realisticPromptPart}`
    logger.info({
      message: 'üé® [NeuroPhoto] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      telegramId,
      fullPrompt,
      userId: userId.toString(),
    })

    console.log('üßô‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º:', fullPrompt)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const processingMessage = await ctx.reply(
      isRu
        ? '‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...'
        : '‚è≥ Starting image generation. This may take some time...'
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const progressInterval = setInterval(async () => {
      try {
        await ctx.telegram.editMessageText(
          ctx.chat?.id,
          processingMessage.message_id,
          undefined,
          isRu
            ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
            : '‚è≥ Image generation in progress... Please wait.'
        )
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      }
    }, 10000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

      let explicitAspectRatio: string | null = null
      if (ctx.session.selectedSize && ctx.session.isSizeFresh === true) {
        explicitAspectRatio = ctx.session.selectedSize
        ctx.session.isSizeFresh = false // "–ì–∞—Å–∏–º" —Ñ–ª–∞–≥
        logger.info(
          `üßô‚Äç‚ôÇÔ∏è [NeuroPhoto] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–π aspectRatio –∏–∑ —Å–µ—Å—Å–∏–∏: ${explicitAspectRatio}`
        )
      }

      const generationResult = await generateNeuroImage(
        fullPrompt,
        model_url,
        1,
        userId.toString(),
        ctx,
        ctx.botInfo?.username,
        explicitAspectRatio // <--- –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
      )

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      clearInterval(progressInterval)
      if (!ctx.chat?.id) {
        console.error('‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ chat ID –Ω–µ—Ç, –Ω—É–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–π—Ç–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–≤–µ—Ä—à–∏–≤ —Å—Ü–µ–Ω—É.
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º return, –Ω–æ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–∫–∞–∑–∞, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
        return ctx.scene.leave() // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
      }
      if (!processingMessage.message_id) {
        console.error('‚ùå Processing message ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ö–æ–¥–∏–º
        return ctx.scene.leave() // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
      }
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      try {
        await ctx.telegram.deleteMessage(
          ctx.chat?.id,
          processingMessage.message_id
        )
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
      if (generationResult && generationResult.success) {
        logger.info({
          message:
            '‚úÖ [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (prompt step) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
          telegramId,
          nextStep: 'neuroPhotoButtonStep',
          result: 'success',
          urls: generationResult.urls, // –õ–æ–≥–∏—Ä—É–µ–º URL, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        })
        console.log('üßô‚Äç‚ôÇÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (prompt step) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        ctx.wizard.next() // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        return
      } else {
        // –û—à–∏–±–∫–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ generateNeuroImage/generateNeuroPhotoDirect
        logger.warn({
          message:
            '‚ö†Ô∏è [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (prompt step) –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ success:true. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã.',
          telegramId,
          result: JSON.stringify(generationResult),
        })
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É –ø—Ä–∏ –æ—à–∏–±–∫–µ!
        return ctx.scene.leave()
      }
    } catch (generateError) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearInterval(progressInterval)
      if (ctx.chat?.id && processingMessage?.message_id) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try {
          await ctx.telegram.deleteMessage(
            ctx.chat?.id,
            processingMessage.message_id
          )
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }
      }

      logger.error({
        message: '‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (prompt step)',
        telegramId,
        error:
          generateError instanceof Error
            ? generateError.message
            : String(generateError),
        stack: generateError instanceof Error ? generateError.stack : undefined,
      })

      console.error('üßô‚Äç‚ôÇÔ∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (prompt step):', generateError)

      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ generateNeuroPhotoDirect/generateNeuroImage
      // –µ—Å–ª–∏ —ç—Ç–æ —à—Ç–∞—Ç–Ω—ã–π { success: false }. –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–¥–µ—Å—å, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
      // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª–æ –ª–∏ –æ–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
      // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –º—ã –≤ catch, —Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
      // (–∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ, –ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è).
      // –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ generateNeuroImage –í–û–û–ë–©–ï –ù–ï –í–´–ó–í–ê–õ–°–Ø –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –î–û –Ω–µ–≥–æ (–Ω–∞–ø—Ä. –≤ fullPrompt), —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ.
      // –õ–æ–≥–∏–∫–∞ generateNeuroPhotoDirect —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å,
      // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç—Ç—É–¥–∞. –ù–æ –µ—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã - —Ç–æ –Ω—É–∂–Ω–æ.
      // –†–µ—à–µ–Ω–æ: generateNeuroImage —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–≤–µ–∑–¥.
      // –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É.

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!
      return ctx.scene.leave()
    }
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    logger.error({
      message: '‚ùå [NeuroPhoto] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ neuroPhotoPromptStep',
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    console.error('üßô‚Äç‚ôÇÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : '‚ùå An unexpected error occurred. Please return to the main menu and try again.'
    )

    return ctx.scene.leave()
  }
}

const neuroPhotoButtonStep = async (ctx: MyContext) => {
  console.log('CASE 3: neuroPhotoButtonStep')
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –í–´–ó–û–í neuroPhotoButtonStep: Step=${
      ctx.session.__scenes?.cursor || 0
    }, ID=${telegramId}`
  )
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: prompt=${
      ctx.session.prompt || '–Ω–µ—Ç'
    }, initialized=${ctx.session.neuroPhotoInitialized || false}`
  )
  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoButtonStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'button',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  if (ctx.message && 'text' in ctx.message) {
    const text = ctx.message.text
    logger.info({
      message: `üîò [NeuroPhoto] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: "${text}"`,
      telegramId,
      buttonText: text,
    })

    console.log(`CASE: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${text}`)
    const isRu = ctx.from?.language_code === 'ru'

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä"
    if (text === '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' || text === '‚¨ÜÔ∏è Improve prompt') {
      console.log('CASE: –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        nextScene: 'improvePromptWizard',
      })
      await ctx.scene.enter('improvePromptWizard', {
        prompt: ctx.session.prompt,
      })
      return
    }

    if (text === 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' || text === 'üìê Change size') {
      console.log('CASE: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞',
        telegramId,
        nextScene: 'sizeWizard',
      })
      await ctx.scene.enter('sizeWizard')
      return
    }

    if (text === levels[104].title_ru || text === levels[104].title_en) {
      console.log('CASE: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
      logger.info({
        message: 'üè† [NeuroPhoto] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        telegramId,
        buttonText: text,
      })
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
      // –ù–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ levels[104] - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω–∞.
      // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ª—É—á—à–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å —è–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ i18n –∫–ª—é—á–æ–º.
      // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —á–∏—Å–ª–∞–º–∏
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —Ñ–æ—Ä–º–∞—Ç "1Ô∏è‚É£ ...", "2Ô∏è‚É£ ..." –∏ —Ç.–¥.
    // –ì—É—Ä—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥—Ä—É–≥–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ –∏—Ö.
    let numImagesToGenerate = 0
    if (text.startsWith('1Ô∏è‚É£')) {
      numImagesToGenerate = 1
    } else if (text.startsWith('2Ô∏è‚É£')) {
      numImagesToGenerate = 2
    } else if (text.startsWith('3Ô∏è‚É£')) {
      numImagesToGenerate = 3
    } else if (text.startsWith('4Ô∏è‚É£')) {
      numImagesToGenerate = 4
    }
    // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç" (–µ—Å–ª–∏ —Ç–∞–∫–∞—è –±—É–¥–µ—Ç)
    // else if (text === "–î—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç") { // –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫

    const prompt = ctx.session.prompt
    const userId = ctx.from?.id

    const generate = async (num: number) => {
      logger.info({
        message: `üñºÔ∏è [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
        telegramId,
        numberOfImages: num,
        prompt: prompt,
      })

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const processingMessage = await ctx.reply(
          isRu
            ? `‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...`
            : `‚è≥ Starting generation of ${num} images. This may take some time...`
        )
        if (!ctx.chat?.id) {
          console.error(
            '‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ neuroPhotoButtonStep -> generate'
          )
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }
        if (!ctx.session.userModel.model_url) {
          console.error(
            '‚ùå Model URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ neuroPhotoButtonStep -> generate'
          )
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }
        if (!userId) {
          console.error(
            '‚ùå User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ neuroPhotoButtonStep -> generate'
          )
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }

        if (!ctx.botInfo?.username) {
          console.error(
            '‚ùå Bot username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ neuroPhotoButtonStep -> generate'
          )
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }
        if (!prompt) {
          console.error(
            '‚ùå Prompt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ neuroPhotoButtonStep -> generate'
          )
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
        const generationResult = await generateNeuroImage(
          prompt,
          ctx.session.userModel.model_url,
          num,
          userId.toString(),
          ctx,
          ctx.botInfo?.username
        )

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try {
          if (ctx.chat?.id && processingMessage?.message_id) {
            // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
            await ctx.telegram.deleteMessage(
              ctx.chat?.id,
              processingMessage.message_id
            )
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
        if (generationResult && generationResult.success) {
          logger.info({
            message: `‚úÖ [NeuroPhoto] –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (button step)`,
            telegramId,
            result: 'success',
            urls: generationResult.urls, // –õ–æ–≥–∏—Ä—É–µ–º URL
          })
          return { error: false } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—Ö–∞
        } else {
          logger.warn({
            message: `‚ö†Ô∏è [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (button step) –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ success:true. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã.`,
            telegramId,
            result: JSON.stringify(generationResult),
          })
          return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
        }
      } catch (error) {
        logger.error({
          message: `‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (button step)`,
          telegramId,
          error: error instanceof Error ? error.message : String(error),
        })
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ generateNeuroPhotoDirect/generateNeuroImage
        // –∏–ª–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ catch neuroPhotoButtonStep.
        return { error: true, sceneLeave: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
      }
    }

    if (numImagesToGenerate > 0) {
      // –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–∞ numImagesToGenerate
      logger.info({
        message: `üî¢ [NeuroPhoto] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${numImagesToGenerate}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º numImagesToGenerate
        telegramId,
        numImages: numImagesToGenerate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º numImagesToGenerate
      })
      const result = await generate(numImagesToGenerate) // –ò—Å–ø–æ–ª—å–∑—É–µ–º numImagesToGenerate
      if (result && result.sceneLeave) {
        return ctx.scene.leave()
      }
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–µ–π –≤—ã—Ö–æ–¥–∞)
      // –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ return, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —è–≤–Ω—ã–π re-reply
      return
    } else {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ (–£–ª—É—á—à–∏—Ç—å, –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, 1-4 –∫–∞—Ä—Ç–∏–Ω–∫–∏)
      logger.warn({
        // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ warn
        message: '‚ö†Ô∏è [NeuroPhoto] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —à–∞–≥–µ –∫–Ω–æ–ø–æ–∫', // –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ
        telegramId,
        buttonText: text,
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–º–æ—â–∏/–æ—Ç–º–µ–Ω—ã
      handleMenu(ctx)
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    }
  } else {
    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —Ñ–æ—Ç–æ)
    logger.warn({
      message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –Ω–∞ —à–∞–≥–µ –∫–Ω–æ–ø–æ–∫',
      telegramId,
    })
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.'
        : 'Please use the buttons to select an action.',
      createHelpCancelKeyboard(isRu)
    )
    return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
  }
}

export const neuroPhotoWizard = new WizardScene<MyContext>(
  ModeEnum.NeuroPhoto,
  neuroPhotoConversationStep,
  neuroPhotoPromptStep,
  neuroPhotoButtonStep
)

// –£–õ–£–ß–®–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô

// Middleware –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–≥–∏—Ä—É–µ—Ç
neuroPhotoWizard.use(async (ctx, next) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  const step = ctx.session.__scenes?.cursor || 0
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] MIDDLEWARE –í–´–ó–í–ê–ù: Step=${step}, ID=${telegramId}`)
  console.log(`üßô‚Äç‚ôÇÔ∏è [MIDDLEWARE] –®–∞–≥: ${step}, TelegramID: ${telegramId}`)

  // –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:`,
    JSON.stringify(ctx.session, null, 2)
  )

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º
  if (ctx.message && 'text' in ctx.message) {
    console.log(`üßô‚Äç‚ôÇÔ∏è [MIDDLEWARE] –¢–µ–∫—Å—Ç: ${ctx.message.text}`)
    logger.info({
      message: 'üì© [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      telegramId,
      messageText: ctx.message.text,
      step,
    })

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    const isCommand = ctx.message.text.startsWith('/')
    const isMenuButton = ctx.message.text === 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ'
    const isSceneButton =
      ctx.message.text === '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' ||
      ctx.message.text === '‚¨ÜÔ∏è Improve prompt' ||
      ctx.message.text === 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' ||
      ctx.message.text === 'üìê Change size' ||
      ctx.message.text === levels[104].title_ru ||
      ctx.message.text === levels[104].title_en ||
      /^[1-4]/.test(ctx.message.text)

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (0), —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–æ–¥–µ–ª—å, –∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ -
    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
    if (
      step === 0 &&
      ctx.session.userModel?.model_url &&
      !isCommand &&
      !isMenuButton &&
      !isSceneButton
    ) {
      console.log(
        `üßô‚Äç‚ôÇÔ∏è [MIDDLEWARE] –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ —à–∞–≥–µ 0: ${ctx.message.text}`
      )
      logger.info({
        message: 'üéØ [NeuroPhoto] –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ —à–∞–≥–µ 0',
        telegramId,
        prompt: ctx.message.text,
        action: 'intercepting_prompt_step_0',
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.prompt = ctx.message.text

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      ctx.session.neuroPhotoInitialized = true

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ (—à–∞–≥ 1) - –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º next –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      console.log('üßô‚Äç‚ôÇÔ∏è [MIDDLEWARE] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 1 —á–µ—Ä–µ–∑ next()')
      ctx.wizard.next() // –ò—Å–ø–æ–ª—å–∑—É–µ–º next() –≤–º–µ—Å—Ç–æ selectStep –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      return await neuroPhotoPromptStep(ctx)
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    return next()
  }

  return next()
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
neuroPhotoWizard.enter(async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] ENTER –í–´–ó–í–ê–ù: ID=${telegramId}`)
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: prompt=${
      ctx.session.prompt || '–Ω–µ—Ç'
    }, initialized=${ctx.session.neuroPhotoInitialized || false}`
  )
  console.log('üßô‚Äç‚ôÇÔ∏è [ENTER] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É neuroPhotoWizard')
  logger.info({
    message: 'üö™ [NeuroPhoto] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É',
    telegramId,
    action: 'enter_scene',
    scene: ModeEnum.NeuroPhoto,
    previousSessionState: JSON.stringify({
      prompt: ctx.session.prompt,
      initialized: ctx.session.neuroPhotoInitialized,
      step: ctx.session.__scenes?.cursor,
    }),
  })

  // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ 0 –≤ —Å—Ü–µ–Ω–µ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
  ctx.wizard.selectStep(0)

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
  ctx.session.neuroPhotoInitialized = false
  ctx.session.prompt = undefined

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ü–µ–Ω—ã
  try {
    if (!ctx.from?.id) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    const userId = ctx.from.id
    console.log(`üßô‚Äç‚ôÇÔ∏è [ENTER] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userModel = await getLatestUserModel(Number(userId), 'replicate')
    console.log(
      `üßô‚Äç‚ôÇÔ∏è [ENTER] –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`,
      JSON.stringify(userModel, null, 2)
    )

    if (!userModel) {
      console.log(
        `üßô‚Äç‚ôÇÔ∏è [ENTER] –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`
      )
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        telegramId,
      })

      const isRussian = ctx.from.language_code === 'ru'
      await ctx.reply(
        isRussian
          ? `‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`
          : `‚ö†Ô∏è You don't have an available model for neural photos.\nCreate your model or use other bot functions.`,
        { parse_mode: 'HTML' }
      )
      return await ctx.scene.leave()
    }

    console.log(`üßô‚Äç‚ôÇÔ∏è [ENTER] –ú–æ–¥–µ–ª—å –∏–∑ –ë–î:`, JSON.stringify(userModel, null, 2))

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ - –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    ctx.session.userModel = userModel as any

    console.log(
      `üßô‚Äç‚ôÇÔ∏è [ENTER] –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏. URL: ${userModel.model_url}, –¢—Ä–∏–≥–≥–µ—Ä: ${userModel.trigger_word}`
    )
    logger.info({
      message: '‚úÖ [NeuroPhoto] –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î',
      telegramId,
      modelData: JSON.stringify(userModel),
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω—ã
    return await neuroPhotoConversationStep(ctx)
  } catch (error) {
    console.error(`üßô‚Äç‚ôÇÔ∏è [ENTER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:`, error)
    logger.error({
      message: '‚ùå [NeuroPhoto] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏',
      telegramId,
      error: error instanceof Error ? error.message : String(error),
    })

    const isRussian = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRussian
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
        : `‚ùå An error occurred while loading your model. Please try again later.`
    )

    return await ctx.scene.leave()
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
neuroPhotoWizard.on('text', async (ctx, next) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  const step = ctx.session.__scenes?.cursor || 0
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] TEXT HANDLER –í–´–ó–í–ê–ù: Step=${step}, ID=${telegramId}, Text="${ctx.message.text}"`
  )
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [TEXT] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —à–∞–≥–µ ${step}: "${ctx.message.text}"`
  )
  logger.info({
    message: 'üìÑ [NeuroPhoto] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
    telegramId,
    text: ctx.message.text,
    step,
    hasUserModel: !!ctx.session.userModel?.model_url,
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
  const isMenuButton = ctx.message.text === 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ'
  const isCommand = ctx.message.text.startsWith('/')
  const isSceneButton =
    ctx.message.text === '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' ||
    ctx.message.text === '‚¨ÜÔ∏è Improve prompt' ||
    ctx.message.text === 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' ||
    ctx.message.text === 'üìê Change size' ||
    ctx.message.text === levels[104].title_ru ||
    ctx.message.text === levels[104].title_en ||
    /^[1-4]/.test(ctx.message.text)

  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
  if (isMenuButton || isCommand || isSceneButton) {
    console.log('üßô‚Äç‚ôÇÔ∏è [TEXT] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ')
    return next()
  }

  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã
  if (step === 0) {
    // –ù–∞ —à–∞–≥–µ 0, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–æ–¥–µ–ª—å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
    if (ctx.session.userModel?.model_url) {
      console.log('üßô‚Äç‚ôÇÔ∏è [TEXT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –Ω–∞ —à–∞–≥–µ 0')
      logger.info({
        message: 'üìù [NeuroPhoto] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ —à–∞–≥–µ 0',
        telegramId,
        prompt: ctx.message.text,
      })

      ctx.session.prompt = ctx.message.text
      ctx.session.neuroPhotoInitialized = true

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ next() –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      ctx.wizard.next()
      return await neuroPhotoPromptStep(ctx)
    }
  } else if (step === 1) {
    // –ù–∞ —à–∞–≥–µ 1 - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    console.log('üßô‚Äç‚ôÇÔ∏è [TEXT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ —à–∞–≥–µ 1')
    ctx.session.prompt = ctx.message.text
    return await neuroPhotoPromptStep(ctx)
  }

  // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
  return next()
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
neuroPhotoWizard.leave(async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] LEAVE –í–´–ó–í–ê–ù: ID=${telegramId}`)

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω leave
  const stackTrace = new Error().stack
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] –í–ê–ñ–ù–û! –¢–†–ê–°–°–ò–†–û–í–ö–ê –°–¢–ï–ö–ê LEAVE:`, stackTrace)
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] –°—Ü–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è: ${ctx.session.__scenes?.current}`)
  console.log(
    `üßô‚Äç‚ôÇÔ∏è [DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:`,
    JSON.stringify(ctx.session, null, 2)
  )

  logger.info({
    message: 'üëã [NeuroPhoto] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã',
    telegramId,
    finalSessionState: JSON.stringify({
      prompt: ctx.session.prompt,
      initialized: ctx.session.neuroPhotoInitialized,
      step: ctx.session.__scenes?.cursor,
    }),
    stackTrace: stackTrace,
    currentScene: ctx.session.__scenes?.current,
  })

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  ctx.session.neuroPhotoInitialized = false
  ctx.session.prompt = undefined

  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ`)
  return
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
neuroPhotoWizard.command('cancel', async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  console.log(`üßô‚Äç‚ôÇÔ∏è [DEBUG] COMMAND CANCEL –í–´–ó–í–ê–ù: ID=${telegramId}`)
  logger.info({
    message: 'üö´ [NeuroPhoto] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–º–µ–Ω—ã',
    telegramId,
  })

  const isRu = ctx.from?.language_code === 'ru'
  await ctx.reply(isRu ? '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.' : '‚ùå Operation canceled.')

  return await ctx.scene.leave()
})
