import { Scenes } from 'telegraf'
import { MyContext } from '@/types'
import { inngest } from '@/inngest-functions/clients'
import { v4 as uuidv4 } from 'uuid'
import { getUserByTelegramIdString } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/types/modes'

const MAX_RETRIES = 3
const INITIAL_RETRY_DELAY = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞

async function sleep(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

async function sendEventWithRetry(eventData: any, telegramId: number) {
  let lastError
  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ Inngest:', {
        attempt,
        description: 'Attempting to send event to Inngest',
        telegram_id: telegramId,
        mode: ModeEnum.TextToSpeech,
      })

      await inngest.send({
        id: `tts-${telegramId}-${Date.now()}-${uuidv4().substring(0, 8)}`,
        name: 'text-to-speech.requested',
        data: eventData,
      })

      logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest:', {
        attempt,
        description: 'Event successfully sent to Inngest',
        telegram_id: telegramId,
        mode: ModeEnum.TextToSpeech,
      })

      return true
    } catch (error) {
      lastError = error
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Inngest:', {
        attempt,
        description: 'Error sending event to Inngest',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        telegram_id: telegramId,
        mode: ModeEnum.TextToSpeech,
      })

      if (attempt < MAX_RETRIES) {
        const delay = INITIAL_RETRY_DELAY * Math.pow(2, attempt - 1)
        logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π:', {
          delay_ms: delay,
          next_attempt: attempt + 1,
          telegram_id: telegramId,
          mode: ModeEnum.TextToSpeech,
        })
        await sleep(delay)
      }
    }
  }

  throw lastError
}

export const textToSpeechWizard = new Scenes.WizardScene<MyContext>(
  'text_to_speech',
  async ctx => {
    const message = ctx.message
    if (!message || !('text' in message)) {
      await ctx.reply(
        (ctx.session.is_ru ?? false)
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å'
          : 'Please send text to convert to speech'
      )
      return
    }

    const telegramId = ctx.from?.id
    const isRu = ctx.session.is_ru ?? false

    if (!telegramId) {
      logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id:', {
        description: 'Missing telegram_id in context',
        message,
        mode: ModeEnum.TextToSpeech,
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : 'Error: could not identify user'
      )
      ctx.scene.leave()
      return
    }

    try {
      const user = await getUserByTelegramIdString(telegramId.toString())
      if (!user) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          description: 'User not found',
          telegram_id: telegramId,
          mode: ModeEnum.TextToSpeech,
        })
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            : 'Error: user not found'
        )
        ctx.scene.leave()
        return
      }

      const voice_id = user.voice_id_elevenlabs
      if (!voice_id) {
        logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç voice_id:', {
          description: 'Missing voice_id for user',
          telegram_id: telegramId,
          mode: ModeEnum.TextToSpeech,
        })
        await ctx.reply(
          isRu
            ? '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            : 'Please create a voice avatar first by sending a voice message'
        )
        ctx.scene.leave()
        return
      }

      logger.info('üéôÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏:', {
        description: 'Sending text-to-speech request',
        telegram_id: telegramId,
        text_length: message.text.length,
        voice_id,
        mode: ModeEnum.TextToSpeech,
      })

      const eventData = {
        text: message.text,
        voice_id,
        telegram_id: telegramId,
        is_ru: isRu,
        bot_name: ctx.botInfo?.username,
        mode: ModeEnum.TextToSpeech,
      }

      await sendEventWithRetry(eventData, telegramId)

      await ctx.reply(
        isRu
          ? '‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏...'
          : '‚è≥ Starting speech generation...'
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ TextToSpeech:', {
        description: 'Error in TextToSpeech scene',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        telegram_id: telegramId,
        mode: ModeEnum.TextToSpeech,
      })

      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'Error occurred during speech generation. Please try again later.'
      )
    }

    ctx.scene.leave()
    return
  }
)

export default textToSpeechWizard
