import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'
import { getAvailableModels } from '../../commands/selectModelCommand/getAvailableModels'
import { sendGenericErrorMessage } from '@/menu'
import { isRussian } from '@/helpers/language'
import { getUserByTelegramIdString, setModel } from '@/core/supabase'
import { handleHelpCancel } from '@/handlers'
import { updateUserLevelPlusOne } from '@/core/supabase'
import { ModeEnum } from '@/price/types/modes'
import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { inngest } from '@/inngest-functions/clients'
import { TransactionType } from '@/interfaces/payments.interface'
import { v4 as uuidv4 } from 'uuid'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
interface PaidModelConfig {
  name: string
  price: number
  isPremium: boolean
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ –∏ —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç
const PAID_MODELS: PaidModelConfig[] = [
  { name: 'GPT-4', price: 10, isPremium: true },
  { name: 'Claude-3', price: 15, isPremium: true },
  { name: 'Gemini Pro', price: 8, isPremium: true },
  // –î—Ä—É–≥–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞
]

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø–ª–∞—Ç–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */
function getPaidModelConfig(modelName: string): PaidModelConfig | null {
  return PAID_MODELS.find(model => model.name === modelName) || null
}

export const selectAiTextModel = new Scenes.WizardScene<MyContext>(
  ModeEnum.SelectAiTextModel,
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'

    try {
      const models = await getAvailableModels()
      logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:', {
        description: 'Available models fetched',
        models,
      })

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, –ø–æ 3 –≤ —Ä—è–¥
      const buttons: string[][] = []
      for (let i = 0; i < models.length; i += 3) {
        const row: string[] = []
        if (models[i]) {
          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
          const model1Config = getPaidModelConfig(models[i])
          row.push(model1Config?.isPremium ? `${models[i]} ‚≠ê` : models[i])
        }
        if (models[i + 1]) {
          const model2Config = getPaidModelConfig(models[i + 1])
          row.push(
            model2Config?.isPremium ? `${models[i + 1]} ‚≠ê` : models[i + 1]
          )
        }
        if (models[i + 2]) {
          const model3Config = getPaidModelConfig(models[i + 2])
          row.push(
            model3Config?.isPremium ? `${models[i + 2]} ‚≠ê` : models[i + 2]
          )
        }
        buttons.push(row)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ" –≤ –∫–æ–Ω—Ü–µ
      const cancelHelpButtons = [
        isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command',
        isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
      ]
      buttons.push(cancelHelpButtons)

      const keyboard = Markup.keyboard(buttons).resize().oneTime()

      // –û–±—ä—è—Å–Ω—è–µ–º —á—Ç–æ –∑–≤–µ–∑–¥–æ—á–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å
      const modelSelectionText = isRu
        ? 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:\n\n‚≠ê - –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏'
        : 'üß† Select AI Model:\n\n‚≠ê - paid models'

      await ctx.reply(modelSelectionText, keyboard)

      return ctx.wizard.next()
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:', {
        description: 'Error creating model selection menu',
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π'
          : '‚ùå Error fetching models list'
      )
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –º–∞—Ä–∫–µ—Ä–∞ –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    const selectedModel = message.text.replace(' ‚≠ê', '')
    const models = await getAvailableModels()

    if (!models.includes(selectedModel)) {
      await ctx.reply(isRu ? '‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå Model not found')
      return ctx.scene.leave()
    }

    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      return ctx.scene.leave()
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await getUserByTelegramIdString(telegramId)
      if (!user) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          description: 'User not found',
          telegramId,
        })
        await ctx.reply(
          isRu
            ? '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            : '‚ùå Error: User not found'
        )
        return ctx.scene.leave()
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø–ª–∞—Ç–Ω–æ–π
      const modelConfig = getPaidModelConfig(selectedModel)

      if (modelConfig && modelConfig.isPremium) {
        logger.info('üí∞ –í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å:', {
          description: 'Paid model selected',
          model: selectedModel,
          price: modelConfig.price,
        })

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentBalance = await getUserBalance(telegramId)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (currentBalance < modelConfig.price) {
          logger.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏:', {
            description: 'Insufficient funds for paid model',
            model: selectedModel,
            price: modelConfig.price,
            currentBalance,
          })

          await ctx.reply(
            isRu
              ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ${selectedModel}.\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${modelConfig.price} –∑–≤–µ–∑–¥\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} –∑–≤–µ–∑–¥`
              : `‚ùå Insufficient funds to select model ${selectedModel}.\nRequired: ${modelConfig.price} stars\nYour balance: ${currentBalance} stars`
          )
          return ctx.scene.leave()
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmMessage = isRu
          ? `‚ö†Ô∏è –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ${selectedModel} —Å—Ç–æ–∏—Ç ${modelConfig.price} –∑–≤–µ–∑–¥.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} –∑–≤–µ–∑–¥.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä?`
          : `‚ö†Ô∏è Selecting model ${selectedModel} costs ${modelConfig.price} stars.\nYour current balance: ${currentBalance} stars.\n\nConfirm selection?`

        await ctx.reply(
          confirmMessage,
          Markup.keyboard([
            [isRu ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : 'Confirm'],
            [isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'],
          ])
            .oneTime()
            .resize()
        )

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        ctx.session.selectedModel = selectedModel

        return ctx.wizard.next()
      }

      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
      await setModel(telegramId, selectedModel)
      logger.info('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', {
        description: 'Model successfully set',
        telegramId,
        model: selectedModel,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (user.level === 5) {
        await updateUserLevelPlusOne(telegramId, user.level)
        logger.info('‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', {
          description: 'User level updated',
          telegramId,
          newLevel: user.level + 1,
        })
      }

      await ctx.reply(
        isRu
          ? `‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${selectedModel}`
          : `‚úÖ Model successfully changed to ${selectedModel}`,
        {
          reply_markup: {
            remove_keyboard: true,
          },
        }
      )

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
      return ctx.scene.enter(ModeEnum.ChatWithAvatar)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏:', {
        description: 'Error setting model',
        error: error instanceof Error ? error.message : String(error),
        telegramId,
        model: selectedModel,
      })
      await ctx.reply(
        isRu ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏' : '‚ùå Error setting model'
      )
      return ctx.scene.leave()
    }
  },
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const response = message.text
    const telegramId = ctx.from?.id.toString()
    const selectedModel = ctx.session.selectedModel

    if (!telegramId || !selectedModel) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–æ–¥–µ–ª–∏'
          : '‚ùå Error: Failed to get user data or model'
      )
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    if (response === (isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')) {
      await ctx.reply(
        isRu ? '‚ùå –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω' : '‚ùå Model selection cancelled',
        { reply_markup: { remove_keyboard: true } }
      )
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä
    if (response === (isRu ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : 'Confirm')) {
      try {
        const modelConfig = getPaidModelConfig(selectedModel)

        if (!modelConfig) {
          await ctx.reply(
            isRu
              ? '‚ùå –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–Ω–æ–π'
              : '‚ùå Error: Model not found or is not paid'
          )
          return ctx.scene.leave()
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏
        const operationId = `model-select-${Date.now()}-${uuidv4()}`

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        await inngest.send({
          name: 'payment/process',
          data: {
            telegram_id: telegramId,
            amount: modelConfig.price,
            stars: modelConfig.price,
            type: TransactionType.MONEY_EXPENSE,
            description: isRu
              ? `üéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ${selectedModel}`
              : `üéØ Model selection ${selectedModel}`,
            bot_name: ctx.botInfo?.username || 'unknown_bot',
            service_type: ModeEnum.SelectAiTextModel,
            metadata: {
              model_name: selectedModel,
              operation_id: operationId,
            },
          },
        })

        logger.info('üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:', {
          description: 'Payment event sent for model selection',
          telegramId,
          model: selectedModel,
          price: modelConfig.price,
          operationId,
        })

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        await setModel(telegramId, selectedModel)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤
        await ctx.reply(
          isRu
            ? `‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${selectedModel}\nüí∏ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${modelConfig.price} –∑–≤–µ–∑–¥`
            : `‚úÖ Model successfully changed to ${selectedModel}\nüí∏ ${modelConfig.price} stars have been deducted from your balance`,
          { reply_markup: { remove_keyboard: true } }
        )

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
        return ctx.scene.enter(ModeEnum.ChatWithAvatar)
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–æ–¥–µ–ª—å:', {
          description: 'Error processing payment for model',
          error: error instanceof Error ? error.message : String(error),
          telegramId,
          model: selectedModel,
        })

        await ctx.reply(
          isRu
            ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏'
            : '‚ùå Error processing payment for model selection',
          { reply_markup: { remove_keyboard: true } }
        )
        return ctx.scene.leave()
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await ctx.reply(
      isRu
        ? '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"'
        : '‚ùå Unknown response. Please choose "Confirm" or "Cancel"'
    )
    return
  }
)

export default selectAiTextModel
