import { Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { isRussian } from '../../helpers/language'
import { handleTextMessage } from '../../handlers/handleTextMessage'
import { handleHelpCancel } from '@/handlers'
import {
  getUserByTelegramIdString,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { levels } from '@/menu'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { inngest } from '@/inngest-functions/clients'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'
import { v4 as uuidv4 } from 'uuid'
import { ZepClient } from '@/core/zep'

const createHelpCancelKeyboard = (isRu: boolean) => {
  return {
    keyboard: [
      [{ text: isRu ? levels[6].title_ru : levels[6].title_en }],
      [{ text: isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel' }],
      [{ text: isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command' }],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  }
}

export const chatWithAvatarWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ChatWithAvatar,
  async ctx => {
    logger.info('üöÄ –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
      description: 'Starting chat with avatar',
      telegramId: ctx.from?.id
    })
    const isRu = isRussian(ctx)

    try {
      await ctx.reply(
        isRu
          ? '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí≠ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üéôÔ∏è, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ'
          : 'Write me a message üí≠ or send a voice message üéôÔ∏è, and I will answer you',
        {
          reply_markup: createHelpCancelKeyboard(isRu),
        }
      )
      logger.info('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
        description: 'Welcome message sent',
        telegramId: ctx.from?.id
      })
      return ctx.wizard.next()
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        description: 'Error sending welcome message',
        error: error instanceof Error ? error.message : String(error),
        telegramId: ctx.from?.id
      })
      throw error
    }
  },
  async ctx => {
    logger.info('üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
      description: 'Message received in avatar chat',
      telegramId: ctx.from?.id,
      messageType: ctx.message ? Object.keys(ctx.message)[0] : 'unknown'
    })
    
    if (!ctx.message) {
      logger.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        description: 'Empty message received',
        telegramId: ctx.from?.id
      })
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      logger.info('üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —á–∞—Ç:', {
        description: 'User cancelled chat',
        telegramId: ctx.from?.id
      })
      return ctx.scene.leave()
    }

    const isRu = isRussian(ctx)
    const telegramId = ctx.from?.id.toString()

    if (!telegramId) {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Failed to get user ID'
      })
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      return ctx.scene.leave()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getUserByTelegramIdString(telegramId)
    if (!user) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found',
        telegramId
      })
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
          : '‚ùå Error: User not found'
      )
      return ctx.scene.leave()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º —Å–ø—Ä–∞–≤–∫–∏
    if ('text' in ctx.message && ctx.message.text === (isRu ? levels[6].title_ru : levels[6].title_en)) {
      logger.info('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É:', {
        description: 'User requested help',
        telegramId
      })
      await ctx.scene.enter(ModeEnum.SelectModelWizard)
      return
    }
    const text = ctx.message.text
    const zepClient = ZepClient.getInstance()
    const sessionId = `${ctx.from.id}_${ctx.botInfo?.username}`
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await zepClient.addMessage(sessionId, 'user', text)
  
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    const memory = await zepClient.getMemory(sessionId)
    const chatHistory = memory?.messages || []
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    const context = chatHistory.map(msg => ({
      role: msg.role,
      content: msg.content
    }))
  
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    const response = await handleTextMessage(ctx, text, context)
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await zepClient.addMessage(sessionId, 'assistant', response)
  
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if ('text' in ctx.message) {
        logger.info('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          description: 'Processing text message',
          telegramId
        })
        await ctx.telegram.sendChatAction(Number(telegramId), 'typing')
        await handleTextMessage(ctx)
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      else if ('voice' in ctx.message) {
        logger.info('üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          description: 'Processing voice message',
          telegramId
        })
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const file = await ctx.telegram.getFileLink(ctx.message.voice.file_id)
        if (!file.href) {
          throw new Error('File path not found')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await ctx.reply(
          isRu
            ? 'üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
            : 'üéôÔ∏è Processing your voice message...'
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await inngest.send({
          id: `voice-to-text-${telegramId}-${Date.now()}-${uuidv4().substring(0, 8)}`,
          name: 'voice-to-text.requested',
          data: {
            fileUrl: file.href,
            telegram_id: telegramId,
            is_ru: isRu,
            bot_name: ctx.botInfo?.username,
            username: ctx.from?.username,
          },
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await inngest.send({
          id: `payment-${telegramId}-${Date.now()}-${ModeEnum.VoiceToText}-${uuidv4()}`,
          name: 'payment/process',
          data: {
            telegram_id: telegramId,
            amount: calculateModeCost({ mode: ModeEnum.VoiceToText }).stars,
            type: 'money_expense',
            description: 'Payment for voice to text conversion',
            bot_name: ctx.botInfo?.username,
            service_type: ModeEnum.VoiceToText,
          },
        })
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      else {
        logger.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          description: 'Unsupported message type',
          telegramId,
          messageType: Object.keys(ctx.message)[0]
        })
        await ctx.reply(
          isRu
            ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            : '‚ùå Please send a text or voice message'
        )
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (user.level === 4) {
        logger.info('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          description: 'Updating user level',
          telegramId,
          currentLevel: user.level
        })
        
        try {
          await updateUserLevelPlusOne(telegramId, user.level)
          logger.info('‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', {
            description: 'User level updated',
            telegramId,
            newLevel: user.level + 1
          })
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            description: 'Error updating user level',
            error: error instanceof Error ? error.message : String(error),
            telegramId
          })
        }
      }

      return
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:', {
        description: 'Error in avatar chat',
        error: error instanceof Error ? error.message : String(error),
        telegramId
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred while processing your message. Please try again later.'
      )
      return ctx.scene.leave()
    }
  }
)

export default chatWithAvatarWizard
