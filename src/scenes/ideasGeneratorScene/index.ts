import { Scenes, Markup } from 'telegraf';
import { MyContext } from '@/interfaces';
import { isRussian } from '@/helpers';
import { handleHelpCancel } from '@/handlers';
import { inngest } from '@/inngest-functions/clients';
import { logger } from '@/utils/logger';

const SCENE_ID = 'ideasGeneratorScene';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM —á–µ—Ä–µ–∑ Inngest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π
 */
export const ideasGeneratorScene = new Scenes.WizardScene<MyContext>(
  SCENE_ID,
  async (ctx) => {
    const isRu = isRussian(ctx);
    
    try {
      await ctx.reply(
        isRu
          ? '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω—ã –∏–¥–µ–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∏–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö")'
          : 'Ideas Generator: enter a topic you need ideas for (for example, "ideas for an article about technology")',
        Markup.keyboard([
          [isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'],
        ]).resize()
      );
      
      logger.info('User entered ideas generator scene', {
        user_id: ctx.from?.id,
        username: ctx.from?.username
      });
      
      return ctx.wizard.next();
    } catch (error) {
      logger.error('Error in ideas generator scene (step 1):', error);
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred while starting the ideas generator. Please try again later.'
      );
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    const isRu = isRussian(ctx);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∏–ª–∏ –ø–æ–º–æ—â—å
    const isCancel = await handleHelpCancel(ctx);
    if (isCancel) {
      return ctx.scene.leave();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!ctx.message || !('text' in ctx.message) || !ctx.message.text) {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π.'
          : 'Please enter a text prompt for idea generation.'
      );
      return;
    }

    const prompt = ctx.message.text;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      await ctx.reply(
        isRu
          ? 'üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.'
          : 'üß† Generating ideas based on your request... This may take up to 30 seconds.'
      );
      
      logger.info('Generating ideas for user request', {
        user_id: ctx.from?.id,
        username: ctx.from?.username,
        prompt: prompt
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π —á–µ—Ä–µ–∑ Inngest
      await inngest.send({
        name: 'generate.ideas.requested',
        data: {
          userId: ctx.from?.id,
          prompt: prompt,
          language: isRu ? 'ru' : 'en',
          chatId: ctx.chat?.id,
          messageId: ctx.message.message_id
        }
      });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–¥–µ–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–∑ Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // –ó–¥–µ—Å—å –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
      return ctx.scene.leave();
    } catch (error) {
      logger.error('Error in ideas generator scene (step 2):', error);
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'An error occurred while generating ideas. Please try again later.'
      );
      return ctx.scene.leave();
    }
  }
);

export default ideasGeneratorScene; 