import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  createUser,
  getReferalsCountAndUserData,
  supabase,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { isRussian } from '@/helpers/language'
import { getUserPhotoUrl } from '@/middlewares/getUserPhotoUrl'
import { UserType } from '@/interfaces/supabase.interface'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const currentBotName = ctx.botInfo.username
    const {
      username: currentUsername,
      first_name: currentFirstName,
      last_name: currentLastName,
      language_code: currentLanguageCode,
      id: tg_id_num,
      is_bot: currentIsBot,
    } = ctx.from!
    const finalUsernameForDisplay =
      currentUsername || currentFirstName || telegramId
    const subscribeChannelId = process.env.SUBSCRIBE_CHANNEL_ID

    let userToProceed: UserType | null = null
    let actionMessage = '–û–ë–†–ê–ë–û–¢–ê–ù' // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É

    logger.info(
      `[StartScene v2] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è telegram_id: ${telegramId}. Username: ${currentUsername}`
    )

    // --- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ì–£–†–£: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ALTER TABLE public.users ALTER COLUMN telegram_id TYPE TEXT; ---

    try {
      // === –®–ê–ì 1: –ü–æ–∏—Å–∫ –ø–æ username (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
      if (currentUsername) {
        const { data: userByUsername, error: findByUsernameError } =
          await supabase
            .from('users')
            .select<string, UserType>('*')
            .eq('username', currentUsername)
            .maybeSingle()

        if (findByUsernameError) {
          logger.error(
            `[StartScene v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ username ${currentUsername}`,
            { error: findByUsernameError }
          )
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id
        } else if (userByUsername) {
          logger.info(
            `[StartScene v2] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ username: ${currentUsername}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ telegram_id.`
          )
          actionMessage = '–û–ë–ù–û–í–õ–ï–ù (–Ω–∞–π–¥–µ–Ω –ø–æ username)'
          const updatesForExisting: Partial<UserType> = {
            telegram_id: telegramId !== 'unknown' ? BigInt(telegramId) : null, // –û–±–Ω–æ–≤–ª—è–µ–º/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id!
            first_name: currentFirstName || userByUsername.first_name || '',
            last_name: currentLastName || userByUsername.last_name || '',
            language_code:
              currentLanguageCode || userByUsername.language_code || 'en',
            photo_url:
              (await getUserPhotoUrl(ctx, tg_id_num)) ||
              userByUsername.photo_url,
          }
          const { data: updatedUser, error: updateError } = await supabase
            .from('users')
            .update(updatesForExisting)
            .eq('user_id', userByUsername.user_id) // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ user_id
            .select()
            .single()

          if (updateError) {
            logger.error(
              `[StartScene v2] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userByUsername.user_id} (–Ω–∞–π–¥–µ–Ω –ø–æ username)`,
              { error: updateError }
            )
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id –Ω–∏–∂–µ
          } else {
            userToProceed = updatedUser
          }
        }
      }

      // === –®–ê–ì 2: –ü–æ–∏—Å–∫ –ø–æ telegram_id (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ username –∏–ª–∏ username –Ω–µ—Ç) ===
      if (!userToProceed) {
        const { data: userByTelegramId, error: findByTelegramIdError } =
          await supabase
            .from('users')
            .select<string, UserType>('*')
            .eq('telegram_id', telegramId)
            .maybeSingle()

        if (
          findByTelegramIdError &&
          findByTelegramIdError.code !== 'PGRST116'
        ) {
          logger.error(
            `[StartScene v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ telegram_id ${telegramId}`,
            { error: findByTelegramIdError }
          )
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å
        } else if (userByTelegramId) {
          logger.info(
            `[StartScene v2] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ telegram_id: ${telegramId}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.`
          )
          actionMessage = '–û–ë–ù–û–í–õ–ï–ù (–Ω–∞–π–¥–µ–Ω –ø–æ telegram_id)'
          const updatesForExisting: Partial<UserType> = {
            username: currentUsername || userByTelegramId.username, // –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è
            first_name: currentFirstName || userByTelegramId.first_name || '',
            last_name: currentLastName || userByTelegramId.last_name || '',
            language_code:
              currentLanguageCode || userByTelegramId.language_code || 'en',
            photo_url:
              (await getUserPhotoUrl(ctx, tg_id_num)) ||
              userByTelegramId.photo_url,
          }
          const { data: updatedUser, error: updateError } = await supabase
            .from('users')
            .update(updatesForExisting)
            .eq('telegram_id', telegramId) // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ telegram_id
            .select()
            .single()

          if (updateError) {
            logger.error(
              `[StartScene v2] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} (–Ω–∞–π–¥–µ–Ω –ø–æ telegram_id)`,
              { error: updateError }
            )
            // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–∏–∂–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
          } else {
            userToProceed = updatedUser
          }
        }
      }

      // === –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ username, –Ω–∏ –ø–æ telegram_id) ===
      if (!userToProceed) {
        logger.info(
          `[StartScene v2] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ username, –Ω–∏ –ø–æ telegram_id (${telegramId}). –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.`
        )
        actionMessage = '–°–û–ó–î–ê–ù'
        const userPhotoUrl = await getUserPhotoUrl(ctx, tg_id_num)
        const userDataToCreate: Omit<
          UserType,
          'id' | 'user_id' | 'created_at' | 'updated_at' | 'level'
        > & { inviter?: string | null } = {
          username: currentUsername || currentFirstName || telegramId,
          telegram_id: telegramId !== 'unknown' ? BigInt(telegramId) : null,
          first_name: currentFirstName || '',
          last_name: currentLastName || '',
          is_bot: currentIsBot || false,
          language_code: currentLanguageCode || 'en',
          photo_url: userPhotoUrl,
          chat_id: BigInt(ctx.chat?.id || 0),
          mode: 'clean',
          model: 'gpt-4-turbo',
          count: 0,
          aspect_ratio: '9:16',
          balance: 0,
          vip: false,
          is_leela_start: false,
        }

        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞...
        const invite_code_session = ctx.session.inviteCode
        if (invite_code_session) {
          try {
            const { userData: refUserData } = await getReferalsCountAndUserData(
              invite_code_session.toString()
            )
            if (refUserData && refUserData.user_id) {
              userDataToCreate.inviter = refUserData.user_id
              logger.info(
                `[StartScene v2] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø—Ä–∏—à–µ–ª –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç user_id: ${refUserData.user_id}`
              )
              await ctx.telegram
                .sendMessage(
                  invite_code_session,
                  isRussian(ctx)
                    ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userDataToCreate.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.`
                    : `üîó New user @${userDataToCreate.username} registered via your link.`
                )
                .catch(err =>
                  logger.warn(
                    `[StartScene v2] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${invite_code_session}`,
                    { error: err }
                  )
                )
            } else {
              logger.warn(
                `[StartScene v2] –†–µ—Ñ–µ—Ä–µ—Ä —Å –∫–æ–¥–æ–º ${invite_code_session} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç user_id.`
              )
            }
          } catch (refError) {
            logger.error(
              `[StartScene v2] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ${invite_code_session}`,
              { error: refError }
            )
          }
        }

        const { data: createdUser, error: createError } = await supabase
          .from('users')
          .insert(userDataToCreate as UserType)
          .select()
          .single()

        if (createError) {
          // –ï—Å–ª–∏ –¥–∞–∂–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
          logger.error(
            `[StartScene v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
            { error: createError }
          )
          // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userToProceed, —á—Ç–æ–±—ã –Ω–∏–∂–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        } else {
          userToProceed = createdUser
        }
      }

      // === –®–ê–ì 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ===
      if (userToProceed) {
        logger.info(
          `[StartScene v2] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: telegram_id: ${telegramId}, user_id (UUID): ${userToProceed.user_id}, –î–µ–π—Å—Ç–≤–∏–µ: ${actionMessage}`
        )
        // –ù–µ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –Ω–∏–∂–µ
        // await ctx.reply(...)

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (subscribeChannelId) {
          try {
            const targetChatId =
              typeof subscribeChannelId === 'string' &&
              !subscribeChannelId.startsWith('-')
                ? `@${subscribeChannelId}`
                : subscribeChannelId
            // @ts-ignore userToProceed —Ç–æ—á–Ω–æ –Ω–µ null –∑–¥–µ—Å—å
            const finalUsernameNotify =
              userToProceed.username || userToProceed.first_name || telegramId
            // @ts-ignore userToProceed —Ç–æ—á–Ω–æ –Ω–µ null –∑–¥–µ—Å—å
            const refMessage = userToProceed.inviter
              ? `–ø–æ —Ä–µ—Ñ. –æ—Ç user_id: ${userToProceed.inviter}`
              : ''
            await ctx.telegram.sendMessage(
              targetChatId,
              `[${currentBotName}] ‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsernameNotify} (ID: ${telegramId}) ${actionMessage} ${refMessage}`
            )
          } catch (pulseErr) {
            logger.warn(
              `[StartScene v2] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${telegramId}`,
              { error: pulseErr }
            )
          }
        }
      } else {
        // –ï—Å–ª–∏ userToProceed –≤—Å–µ –µ—â–µ null, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–∏–º–∞—è –æ—à–∏–±–∫–∞
        logger.error(
          `[StartScene v2] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.`
        )
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.'
            : 'An internal error occurred while processing your profile. Please try /start later.'
        )
        return ctx.scene.leave()
      }
    } catch (globalError) {
      logger.error(
        `[StartScene v2] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è telegram_id: ${telegramId}`,
        { error: globalError }
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.'
          : 'A critical error occurred. Please try /start again.'
      )
      return ctx.scene.leave()
    }
    // --- –ö–û–ù–ï–¶: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

    // --- –ù–ê–ß–ê–õ–û: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É) ---
    const { translation, url } = await getTranslation({
      key: 'start',
      ctx,
      bot_name: currentBotName,
    })

    if (url && url.trim() !== '') {
      logger.info({
        message:
          'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
        telegramId,
        function: 'startScene',
        url,
        step: 'sending_welcome_image',
      })

      await ctx.replyWithPhoto(url, {
        caption:
          translation.length > 1024
            ? translation.substring(0, 1021) + '...'
            : translation,
      })
    } else {
      logger.info({
        message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        telegramId,
        function: 'startScene',
        step: 'sending_welcome_text',
      })

      await ctx.reply(translation, {
        parse_mode: 'Markdown',
      })
    }

    const tutorialUrl = BOT_URLS[currentBotName]
    let replyKeyboard

    if (tutorialUrl) {
      logger.info({
        message: `üé¨ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${currentBotName}`,
        telegramId,
        function: 'startScene',
        tutorialUrl,
        step: 'sending_tutorial',
      })

      const tutorialText = isRu
        ? `üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](${tutorialUrl}), –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å (–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞), —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å prompt –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏—Å—å.`
        : `üé¨ Watch this [tutorial video](${tutorialUrl}) on how to create neurophotos in this bot.\n\nIn this video, you will learn how to train your model (Digital avatar body), create photos, and get a prompt from any photo that inspires you.`

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π`,
        telegramId,
        function: 'startScene',
        step: 'sending_tutorial_text_with_keyboard',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(tutorialText, {
        parse_mode: 'Markdown',
        reply_markup: replyKeyboard.reply_markup,
      })
    } else {
      logger.info({
        message: `‚ÑπÔ∏è [StartScene] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${currentBotName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        telegramId,
        function: 'startScene',
        step: 'tutorial_url_not_found',
      })

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è`,
        telegramId,
        function: 'startScene',
        step: 'sending_basic_menu',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
        reply_markup: replyKeyboard.reply_markup,
      })
    }

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å—Ç–∞—Ä—Ç–∞`,
      telegramId,
      function: 'startScene',
      step: 'scene_leave',
    })

    return ctx.scene.leave()
  }
)
