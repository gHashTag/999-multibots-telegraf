import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  getUserDetailsSubscription,
  createUser,
  getReferalsCountAndUserData,
  getUserData,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { isRussian } from '@/helpers/language'
import { startMenu } from '@/menu'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const currentBotName = ctx.botInfo.username
    const finalUsername =
      ctx.from?.username || ctx.from?.first_name || telegramId
    const telegram_id = ctx.from?.id
    const subscribeChannelId = process.env.SUBSCRIBE_CHANNEL_ID

    try {
      const userDetails = await getUserDetailsSubscription(telegramId)

      if (!userDetails.isExist) {
        // --- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
        const {
          username,
          id: tg_id,
          first_name,
          last_name,
          is_bot,
          language_code,
        } = ctx.from!
        const final_username_create = username || first_name || tg_id.toString()
        const photo_url = getPhotoUrl(ctx, 1)

        let refCount = 0
        let referrerData: { user_id?: string; username?: string } = {}
        const invite_code = ctx.session.inviteCode

        try {
          if (invite_code) {
            // –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            const { count, userData: refUserData } =
              await getReferalsCountAndUserData(invite_code.toString())
            refCount = count
            referrerData = refUserData || {}
            ctx.session.inviter = referrerData.user_id
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            try {
              await ctx.telegram.sendMessage(
                invite_code,
                isRussian(ctx)
                  ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\nüÜî –£—Ä–æ–≤–µ–Ω—å: ${refCount}`
                  : `üîó New user @${final_username_create} registered via your link.\nüÜî Level: ${refCount}`
              )
            } catch (err) {
              /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
            }
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Å —Ä–µ—Ñ–æ–º)
            if (subscribeChannelId) {
              try {
                const targetChatId =
                  typeof subscribeChannelId === 'string' &&
                  !subscribeChannelId.startsWith('-')
                    ? `@${subscribeChannelId}`
                    : subscribeChannelId
                await ctx.telegram.sendMessage(
                  targetChatId,
                  `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id}) –ø–æ —Ä–µ—Ñ. –æ—Ç @${referrerData.username}`
                )
              } catch (pulseErr) {
                /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
              }
            } else {
              /* –ª–æ–≥ warn */
            }
          } else {
            // –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const { count } = await getReferalsCountAndUserData(
              tg_id.toString()
            )
            refCount = count
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–±–µ–∑ —Ä–µ—Ñ–∞)
            if (subscribeChannelId) {
              try {
                const targetChatId =
                  typeof subscribeChannelId === 'string' &&
                  !subscribeChannelId.startsWith('-')
                    ? `@${subscribeChannelId}`
                    : subscribeChannelId
                await ctx.telegram.sendMessage(
                  targetChatId,
                  `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id})`
                )
              } catch (pulseErr) {
                /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
              }
            } else {
              /* –ª–æ–≥ warn */
            }
          }
        } catch (error) {
          /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userDataToCreate = {
          username: final_username_create,
          telegram_id: tg_id.toString(),
          first_name: first_name || null,
          last_name: last_name || null,
          is_bot: is_bot || false,
          language_code: language_code || 'en',
          photo_url,
          chat_id: ctx.chat?.id || null,
          mode: 'clean',
          model: 'gpt-4-turbo',
          count: 0,
          aspect_ratio: '9:16',
          balance: 0,
          inviter: ctx.session.inviter || null,
          bot_name: currentBotName,
        }
        try {
          const [wasCreated] = await createUser(userDataToCreate, ctx)
          if (wasCreated) {
            await ctx.reply(
              isRussian(ctx)
                ? '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
                : '‚úÖ Avatar created successfully! Welcome!'
            )
          }
        } catch (error) {
          /* –ª–æ–≥ –æ—à–∏–±–∫–∏ + reply + return */
        }
      } else {
        // --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        if (subscribeChannelId) {
          try {
            const targetChatId =
              typeof subscribeChannelId === 'string' &&
              !subscribeChannelId.startsWith('-')
                ? `@${subscribeChannelId}`
                : subscribeChannelId
            await ctx.telegram.sendMessage(
              targetChatId,
              `[${currentBotName}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} (ID: ${telegram_id}) –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start).`
            )
          } catch (notifyError) {
            /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
          }
        } else {
          /* –ª–æ–≥ warn */
        }
      }
    } catch (error) {
      /* –ª–æ–≥ –æ—à–∏–±–∫–∏ + reply + return */
    }
    // --- –ö–û–ù–ï–¶: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

    // --- –ù–ê–ß–ê–õ–û: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---
    const { translation, url } = await getTranslation({
      key: 'start',
      ctx,
      bot_name: currentBotName,
    })
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    if (url && url.trim() !== '') {
      logger.info({
        message:
          'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
        telegramId,
        function: 'startScene',
        url,
        step: 'sending_welcome_image',
      })

      await ctx.replyWithPhoto(url, {
        caption: translation,
      })
    } else {
      logger.info({
        message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        telegramId,
        function: 'startScene',
        step: 'sending_welcome_text',
      })

      await ctx.reply(translation, {
        parse_mode: 'Markdown',
      })
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê)
    const tutorialUrl = BOT_URLS[currentBotName]
    let replyKeyboard

    if (tutorialUrl) {
      logger.info({
        message: `üé¨ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${currentBotName}`,
        telegramId,
        function: 'startScene',
        tutorialUrl,
        step: 'sending_tutorial',
      })

      const tutorialText = isRu
        ? `üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](${tutorialUrl}), –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å (–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞), —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å prompt –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏—Å—å.`
        : `üé¨ Watch this [tutorial video](${tutorialUrl}) on how to create neurophotos in this bot.\n\nIn this video, you will learn how to train your model (Digital avatar body), create photos, and get a prompt from any photo that inspires you.`

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π`,
        telegramId,
        function: 'startScene',
        step: 'sending_tutorial_text_with_keyboard',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(tutorialText, {
        parse_mode: 'Markdown',
        reply_markup: replyKeyboard.reply_markup,
      })
    } else {
      logger.info({
        message: `‚ÑπÔ∏è [StartScene] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${currentBotName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        telegramId,
        function: 'startScene',
        step: 'tutorial_url_not_found',
      })

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è`,
        telegramId,
        function: 'startScene',
        step: 'sending_basic_menu',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
        reply_markup: replyKeyboard.reply_markup,
      })
    }
    // --- –ö–û–ù–ï–¶: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å—Ç–∞—Ä—Ç–∞`,
      telegramId,
      function: 'startScene',
      step: 'scene_leave',
    })

    return ctx.scene.leave()
  }
)
