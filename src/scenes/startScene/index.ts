import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  getUserDetailsSubscription,
  createUser,
  getReferalsCountAndUserData,
  getUserData,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { isRussian } from '@/helpers/language'
import { startMenu } from '@/menu'
import { getUserPhotoUrl } from '@/middlewares/getUserPhotoUrl'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const currentBotName = ctx.botInfo.username
    const finalUsername =
      ctx.from?.username || ctx.from?.first_name || telegramId
    const telegram_id = ctx.from?.id
    const subscribeChannelId = process.env.SUBSCRIBE_CHANNEL_ID

    try {
      const userDetails = await getUserDetailsSubscription(telegramId)

      if (!userDetails.isExist) {
        // --- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
        const {
          username,
          id: tg_id,
          first_name,
          last_name,
          is_bot,
          language_code,
        } = ctx.from!
        const final_username_create = username || first_name || tg_id.toString()
        const photo_url = getPhotoUrl(ctx, 1)

        let refCount = 0
        let referrerData: { user_id?: string; username?: string } = {}
        const invite_code = ctx.session.inviteCode

        try {
          if (invite_code) {
            // –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            const { count, userData: refUserData } =
              await getReferalsCountAndUserData(invite_code.toString())
            refCount = count
            referrerData = refUserData || {}
            ctx.session.inviter = referrerData.user_id
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            try {
              await ctx.telegram.sendMessage(
                invite_code,
                isRussian(ctx)
                  ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\nüÜî –£—Ä–æ–≤–µ–Ω—å: ${refCount}`
                  : `üîó New user @${final_username_create} registered via your link.\nüÜî Level: ${refCount}`
              )
            } catch (err) {
              /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
            }
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Å —Ä–µ—Ñ–æ–º)
            if (subscribeChannelId) {
              try {
                const targetChatId =
                  typeof subscribeChannelId === 'string' &&
                  !subscribeChannelId.startsWith('-')
                    ? `@${subscribeChannelId}`
                    : subscribeChannelId
                await ctx.telegram.sendMessage(
                  targetChatId,
                  `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id}) –ø–æ —Ä–µ—Ñ. –æ—Ç @${referrerData.username}`
                )
              } catch (pulseErr) {
                /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
              }
            } else {
              /* –ª–æ–≥ warn */
            }
          } else {
            // –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const { count } = await getReferalsCountAndUserData(
              tg_id.toString()
            )
            refCount = count
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–±–µ–∑ —Ä–µ—Ñ–∞)
            if (subscribeChannelId) {
              try {
                const targetChatId =
                  typeof subscribeChannelId === 'string' &&
                  !subscribeChannelId.startsWith('-')
                    ? `@${subscribeChannelId}`
                    : subscribeChannelId
                await ctx.telegram.sendMessage(
                  targetChatId,
                  `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id})`
                )
              } catch (pulseErr) {
                /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
              }
            } else {
              /* –ª–æ–≥ warn */
            }
          }
        } catch (error) {
          /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const photoUrlResolved = await photo_url
        const userPhotoUrl = await getUserPhotoUrl(ctx, ctx.from?.id || 0)
        const userDataToCreate = {
          username: final_username_create,
          telegram_id: tg_id.toString(),
          first_name: first_name || null,
          last_name: last_name || null,
          is_bot: is_bot || false,
          language_code: language_code || 'en',
          photo_url: userPhotoUrl || photoUrlResolved,
          chat_id: ctx.chat?.id || null,
          mode: 'clean',
          model: 'gpt-4-turbo',
          count: 0,
          aspect_ratio: '9:16',
          balance: 0,
          inviter: ctx.session.inviter || null,
          bot_name: currentBotName,
        }
        try {
          const [wasCreated] = await createUser(userDataToCreate)
          if (wasCreated) {
            await ctx.reply(
              isRussian(ctx)
                ? '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
                : '‚úÖ Avatar created successfully! Welcome!'
            )
          }
        } catch (error) {
          /* –ª–æ–≥ –æ—à–∏–±–∫–∏ + reply + return */
        }
      } else {
        // --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        if (subscribeChannelId) {
          try {
            const targetChatId =
              typeof subscribeChannelId === 'string' &&
              !subscribeChannelId.startsWith('-')
                ? `@${subscribeChannelId}`
                : subscribeChannelId
            await ctx.telegram.sendMessage(
              targetChatId,
              `[${currentBotName}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} (ID: ${telegram_id}) –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start).`
            )
          } catch (notifyError) {
            /* –ª–æ–≥ –æ—à–∏–±–∫–∏ */
          }
        } else {
          /* –ª–æ–≥ warn */
        }
      }
    } catch (error) {
      /* –ª–æ–≥ –æ—à–∏–±–∫–∏ + reply + return */
    }
    // --- –ö–û–ù–ï–¶: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

    // --- –ù–ê–ß–ê–õ–û: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
    const { translation, url } = await getTranslation({
      key: 'start',
      ctx,
      bot_name: currentBotName,
    })

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const isValidImageUrl = (url: string | null): boolean => {
      if (!url || url.trim() === '') return false
      if (url.includes('t.me/c/') || url.startsWith('https://t.me/c/'))
        return false
      return true
    }

    if (isValidImageUrl(url)) {
      logger.info({
        message:
          'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
        telegramId,
        function: 'startScene',
        url,
        step: 'sending_welcome_image',
      })
      await ctx.replyWithPhoto(url, {
        caption:
          translation.length > 1024
            ? translation.substring(0, 1021) + '...'
            : translation,
      })
    } else {
      logger.info({
        message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        telegramId,
        function: 'startScene',
        step: 'sending_welcome_text',
      })
      await ctx.reply(translation, {
        parse_mode: 'Markdown',
      })
    }
    // --- –ö–û–ù–ï–¶: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---

    // --- –ù–ê–ß–ê–õ–û: –õ–∏–¥-–º–∞–≥–Ω–∏—Ç / –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è / –ú–µ–Ω—é ---
    const groupJoinOrVideoUrl = BOT_URLS[currentBotName]

    if (groupJoinOrVideoUrl) {
      logger.info({
        message: `üß≤ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –¥–ª—è ${currentBotName}`,
        telegramId,
        function: 'startScene',
        url: groupJoinOrVideoUrl,
        step: 'sending_lead_magnet',
      })

      const leadMagnetTextRu = `–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ? üìÄ
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∂–∏–≤—É—é –≥—Ä—É–ø–ø—É - –∏ —Ç–µ–±–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø!

–ù–æ –∏ —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë - –≤ —ç—Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ —Ç—ã —Å–º–æ–∂–µ—à—å:

üü° –æ—Å–≤–æ–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏ –Ω–µ–π—Ä–æ–±–æ—Ç–∞ –±–µ–∑ –±–æ–ª–∏ –∏ —Ç–∞–Ω—Ü–µ–≤ —Å –±—É–±–Ω–æ–º
üü° –ø–æ–ª—É—á–∞—Ç—å —É—Ä–æ–∫–∏, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ä–∞–∑–±–æ—Ä—ã
üü° –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (–¥–∞, –ª–∏—á–Ω–æ –æ—Ç –º–µ–Ω—è)
üü° –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—É—Ç –¥—Ä—É–≥–∏–µ
üü° –±—ã—Ç—å —á–∞—Å—Ç—å—é —Ç—ë–ø–ª–æ–≥–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ–π—Ä–æ-–∫–æ–º—å—é–Ω–∏—Ç–∏

–ö–æ–≥–¥–∞ —Ç—ã –ø–æ—Å–º–æ—Ç—Ä–∏—à—å –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ç—ã –ø–æ–π–º—ë—à—å:
—ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.
–î–∞–ª—å—à–µ - –±–æ–ª—å—à–µ: –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∏–¥–µ–∏, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç.
–ò –≤—Å—ë —ç—Ç–æ - —É–∂–µ –≤–Ω—É—Ç—Ä–∏.

–í –æ–±—â–µ–º, –µ—Å–ª–∏ —Ç—ã –Ω–µ —Ñ–∞–Ω–∞—Ç –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ö–æ—á–µ—à—å —á—É—Ç—å –±–æ–ª—å—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫—Ä–∞—Å–æ—Ç—ã –∏ –ø–æ–ª—å–∑—ã - –∂–º–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ –Ω—ã—Ä—è–π —Å –Ω–∞–º–∏.

‚∏ª

–ê –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–æ—Ä–º –∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –≤ —Å–æ–ª–æ-–ø–ª–∞–≤–∞–Ω–∏–µ, –±–µ–∑ –≤–∏–¥–µ–æ, –≥—Ä—É–ø–ø—ã –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ -
–Ω–∞–∂–∏–º–∞–π "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.
–¢—ã —Å–≤–æ–±–æ–¥–µ–Ω, –Ω–µ–π—Ä–æ-–æ–¥–∏–Ω–æ—á–∫–∞!`

      const leadMagnetTextEn = `Want to get a tutorial video? üìÄ
Subscribe to our live group for access!

Plus, in the group you can:
üü° Master the neurobot's features easily
üü° Get lessons, tips, and inspiring case studies
üü° Ask questions and get answers
üü° Share your work and see others grow
üü° Be part of a warm, creative neuro-community

If you want support, beauty, and benefits - click "Subscribe & Dive In".
Or, if you prefer to go solo, click "Proceed to Subscription".`

      const leadMagnetMessage = isRu ? leadMagnetTextRu : leadMagnetTextEn

      const inlineKeyboard = Markup.inlineKeyboard([
        Markup.button.url(
          isRu ? 'üåä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω—ã—Ä—è–π —Å –Ω–∞–º–∏' : 'üåä Subscribe & Dive In',
          groupJoinOrVideoUrl
        ),
        Markup.button.callback(
          isRu ? 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' : 'üí≥ Proceed to Subscription',
          'go_to_subscription_scene'
        ),
      ])

      await ctx.reply(leadMagnetMessage, {
        parse_mode: 'Markdown',
        reply_markup: inlineKeyboard.reply_markup,
      })
    } else {
      // –°–ª—É—á–∞–π, –µ—Å–ª–∏ URL –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞/–≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
      logger.info({
        message: `‚ÑπÔ∏è [StartScene] URL –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞/—Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è ${currentBotName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é`,
        telegramId,
        function: 'startScene',
        step: 'lead_magnet_or_tutorial_url_not_found_showing_basic_menu',
      })

      const replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en), // –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ levels
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en), // –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏
      ]).resize()

      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
        reply_markup: replyKeyboard.reply_markup,
      })
    }
    // --- –ö–û–ù–ï–¶: –õ–∏–¥-–º–∞–≥–Ω–∏—Ç / –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è / –ú–µ–Ω—é ---

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω—ã —Å—Ç–∞—Ä—Ç–∞`,
      telegramId,
      function: 'startScene',
      step: 'main_handler_step_leave',
    })
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ–π, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ action –º–æ–≥–ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å,
    // –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —á–µ—Ä–µ–∑ action.
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç URL, –æ–Ω —É–π–¥–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ.
    // –ï—Å–ª–∏ –Ω–∞–∂–º–µ—Ç callback-–∫–Ω–æ–ø–∫—É, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π action.
    return ctx.wizard.next() // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —É –Ω–∞—Å –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    // –í–º–µ—Å—Ç–æ next() –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Å—Ü–µ–Ω–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ.
    // –ò–ª–∏ ctx.scene.leave() –µ—Å–ª–∏ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è - —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–∏–µ —Å—Ü–µ–Ω—ã –∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    // –î–ª—è inline –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –≤ –¥—Ä—É–≥–∏–µ —Å—Ü–µ–Ω—ã, ctx.scene.leave() –∑–¥–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ.
    // –û–¥–Ω–∞–∫–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ .action() —ç—Ç–æ–π –∂–µ —Å—Ü–µ–Ω—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞.
    // –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ —É–±–µ—Ä–µ–º —è–≤–Ω—ã–π ctx.scene.leave() –æ—Ç—Å—é–¥–∞, —Ç.–∫. –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ action.
  }
)

startScene.action('go_to_subscription_scene', async ctx => {
  const isRu = ctx.from?.language_code === 'ru'
  try {
    await ctx.answerCbQuery()
    logger.info({
      message: `üí≥ [StartScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É". –ü–µ—Ä–µ—Ö–æ–¥ –≤ SubscriptionScene.`,
      telegramId: ctx.from?.id?.toString() || 'unknown',
      function: 'startScene.action.go_to_subscription_scene',
    })
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    // await ctx.reply(isRu ? '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏...' : 'Proceeding to subscription options...')
    return ctx.scene.enter(ModeEnum.SubscriptionScene)
  } catch (error) {
    logger.error('Error in go_to_subscription_scene action:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred. Please try again later.'
    )
    return ctx.scene.leave() // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  }
})
