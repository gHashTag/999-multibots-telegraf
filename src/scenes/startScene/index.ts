import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  getUserDetailsSubscription,
  createUser,
  getReferalsCountAndUserData,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { isRussian } from '@/helpers/language'
import { getUserPhotoUrl } from '@/middlewares/getUserPhotoUrl'
import { defaultSession } from '@/store'
import { handleMenu } from '@/handlers/handleMenu'

interface StartSceneState {
  initialDisplayDone?: boolean
}

// –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ startScene –¥–æ–ª–∂–Ω–∞ "–æ—Ç–ø—É—Å–∫–∞—Ç—å"
const GLOBAL_COMMANDS_TO_RELEASE = [
  '/menu',
  '/price',
  '/start', // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–µ—Ç /start, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
  '/support',
  '/get100',
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const currentBotName = ctx.botInfo.username

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å
    if (
      (ctx.wizard.state as StartSceneState).initialDisplayDone &&
      ctx.message &&
      'text' in ctx.message
    ) {
      const text = ctx.message.text
      if (GLOBAL_COMMANDS_TO_RELEASE.includes(text)) {
        logger.info({
          message: `[StartScene] Active, received global command "${text}". Handling directly.`,
          telegramId,
          function: 'startScene',
          command: text,
        })
        delete (ctx.wizard.state as StartSceneState).initialDisplayDone // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        switch (text) {
          case '/menu': {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
            const { getUserDetailsSubscription } = await import(
              '@/core/supabase'
            )
            const { simulateSubscriptionForDev } = await import(
              '@/scenes/menuScene/helpers/simulateSubscription'
            )
            const { isDev } = await import('@/config')

            const userDetails = await getUserDetailsSubscription(telegramId)
            const effectiveSubscription = simulateSubscriptionForDev(
              userDetails?.subscriptionType || null,
              isDev
            )

            logger.info('[StartScene] /menu: Checking subscription', {
              telegramId,
              originalSubscription: userDetails?.subscriptionType,
              effectiveSubscription,
              isDev,
            })

            await ctx.scene.leave()

            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–∏–º—É–ª—è—Ü–∏—é), –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ subscriptionScene
            if (!effectiveSubscription || effectiveSubscription === 'STARS') {
              logger.info(
                '[StartScene] /menu: No subscription, redirecting to subscription scene',
                {
                  telegramId,
                  effectiveSubscription,
                }
              )
              ctx.session.mode = ModeEnum.SubscriptionScene
              return ctx.scene.enter(ModeEnum.SubscriptionScene)
            }

            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –≤—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
            ctx.session.mode = ModeEnum.MainMenu
            return ctx.scene.enter(ModeEnum.MainMenu)
          }
          case '/price': {
            // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ü–µ–Ω
            const { checkSubscriptionGuard } = await import(
              '@/helpers/subscriptionGuard'
            )
            const hasSubscription = await checkSubscriptionGuard(ctx, '/price')
            if (!hasSubscription) {
              return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
            }

            await ctx.scene.leave()
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º priceCommand –Ω–∞–ø—Ä—è–º—É—é
            const { priceCommand } = await import('@/commands/priceCommand')
            return priceCommand(ctx)
          }
          case '/start': {
            ctx.session = { ...defaultSession }
            await ctx.scene.leave()
            return ctx.scene.enter(ModeEnum.CreateUserScene)
          }
          case '/support': {
            await ctx.scene.leave()
            const { handleTechSupport } = await import(
              '@/commands/handleTechSupport'
            )
            return handleTechSupport(ctx)
          }
          case '/get100': {
            // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –±–æ–Ω—É—Å–∞
            const { checkSubscriptionGuard } = await import(
              '@/helpers/subscriptionGuard'
            )
            const hasSubscription = await checkSubscriptionGuard(ctx, '/get100')
            if (!hasSubscription) {
              return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ subscriptionScene
            }

            await ctx.scene.leave()
            const { get100Command } = await import('@/commands/get100Command')
            return get100Command(ctx)
          }
          default: {
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
            await ctx.scene.leave()
            return
          }
        }
      }
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–¶–ï–ù–´ (–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–Ω–æ–ø–∫–∏) ---
    const finalUsername =
      ctx.from?.username || ctx.from?.first_name || telegramId
    const telegram_id = ctx.from?.id
    const subscribeChannelId = process.env.SUBSCRIBE_CHANNEL_ID

    // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É (–∫–æ–≥–¥–∞ initialDisplayDone –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    // –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å.
    if (!(ctx.wizard.state as StartSceneState).initialDisplayDone) {
      try {
        const userDetails = await getUserDetailsSubscription(telegramId)

        if (!userDetails.isExist) {
          // --- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
          const {
            username,
            id: tg_id,
            first_name,
            last_name,
            is_bot,
            language_code,
          } = ctx.from!
          const final_username_create =
            username || first_name || tg_id.toString()
          const photo_url = getPhotoUrl(ctx, 1)

          let refCount = 0
          let referrerData: { user_id?: string; username?: string } = {}
          const invite_code = ctx.session.inviteCode

          try {
            if (invite_code) {
              // –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
              const { count, userData: refUserData } =
                await getReferalsCountAndUserData(invite_code.toString())
              refCount = count
              referrerData = refUserData || {}
              ctx.session.inviter = referrerData.user_id
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
              try {
                await ctx.telegram.sendMessage(
                  invite_code,
                  isRussian(ctx)
                    ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\nüÜî –£—Ä–æ–≤–µ–Ω—å: ${refCount}`
                    : `üîó New user @${final_username_create} registered via your link.\nüÜî Level: ${refCount}`
                )
              } catch (err) {
                logger.warn(
                  `[StartScene] Could not notify referrer ${invite_code} about new user ${final_username_create}`,
                  err
                )
              }
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Å —Ä–µ—Ñ–æ–º)
              if (subscribeChannelId) {
                try {
                  const targetChatId =
                    typeof subscribeChannelId === 'string' &&
                    !subscribeChannelId.startsWith('-')
                      ? `@${subscribeChannelId}`
                      : subscribeChannelId
                  await ctx.telegram.sendMessage(
                    targetChatId,
                    `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id}) –ø–æ —Ä–µ—Ñ. –æ—Ç @${referrerData.username}`
                  )
                } catch (pulseErr) {
                  logger.warn(
                    `[StartScene] Could not notify admin channel ${subscribeChannelId} about new referred user`,
                    pulseErr
                  )
                }
              } else {
                logger.warn(
                  '[StartScene] SUBSCRIBE_CHANNEL_ID is not set, admin will not be notified about new referred user.'
                )
              }
            } else {
              // –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
              const { count } = await getReferalsCountAndUserData(
                tg_id.toString()
              )
              refCount = count
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–±–µ–∑ —Ä–µ—Ñ–∞)
              if (subscribeChannelId) {
                try {
                  const targetChatId =
                    typeof subscribeChannelId === 'string' &&
                    !subscribeChannelId.startsWith('-')
                      ? `@${subscribeChannelId}`
                      : subscribeChannelId
                  await ctx.telegram.sendMessage(
                    targetChatId,
                    `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${final_username_create} (ID: ${tg_id})`
                  )
                } catch (pulseErr) {
                  logger.warn(
                    `[StartScene] Could not notify admin channel ${subscribeChannelId} about new user`,
                    pulseErr
                  )
                }
              } else {
                logger.warn(
                  '[StartScene] SUBSCRIBE_CHANNEL_ID is not set, admin will not be notified about new user.'
                )
              }
            }
          } catch (error) {
            logger.error(
              '[StartScene] Error processing referral logic for new user:',
              error
            )
          }

          // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const photoUrlResolved = await photo_url
          const userPhotoUrl = await getUserPhotoUrl(ctx, ctx.from?.id || 0)
          const userDataToCreate = {
            username: final_username_create,
            telegram_id: tg_id.toString(),
            first_name: first_name || null,
            last_name: last_name || null,
            is_bot: is_bot || false,
            language_code: language_code || 'en',
            photo_url: userPhotoUrl || photoUrlResolved,
            chat_id: ctx.chat?.id || null,
            mode: 'clean',
            model: 'gpt-4-turbo',
            count: 0,
            aspect_ratio: '9:16',
            balance: 0,
            inviter: ctx.session.inviter || null,
            bot_name: currentBotName,
          }
          try {
            const [wasCreated] = await createUser(userDataToCreate)
            if (wasCreated) {
              await ctx.reply(
                isRussian(ctx)
                  ? '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
                  : '‚úÖ Avatar created successfully! Welcome!'
              )
            }
          } catch (error) {
            logger.error('[StartScene] Error creating user:', {
              error,
              telegramId,
            })
            await ctx.reply(
              isRussian(ctx)
                ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.'
                : 'Error creating your profile.'
            )
            return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
          }
        } else {
          // --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
          if (subscribeChannelId) {
            try {
              const targetChatId =
                typeof subscribeChannelId === 'string' &&
                !subscribeChannelId.startsWith('-')
                  ? `@${subscribeChannelId}`
                  : subscribeChannelId
              await ctx.telegram.sendMessage(
                targetChatId,
                `[${currentBotName}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} (ID: ${telegram_id}) –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start).`
              )
            } catch (notifyError) {
              logger.warn(
                `[StartScene] Could not notify admin channel ${subscribeChannelId} about user restart`,
                notifyError
              )
            }
          } else {
            logger.warn(
              '[StartScene] SUBSCRIBE_CHANNEL_ID is not set, admin will not be notified about user restart.'
            )
          }
        }
      } catch (error) {
        logger.error('[StartScene] Error in user processing logic:', {
          error,
          telegramId,
        })
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.'
            : 'Error processing your profile.'
        )
        return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
      }

      const { translation, url } = await getTranslation({
        key: 'start',
        ctx,
        bot_name: currentBotName,
      })

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const isValidImageUrl = (imgUrl: string | null): boolean => {
        if (!imgUrl || imgUrl.trim() === '') return false
        if (imgUrl.includes('t.me/c/') || imgUrl.startsWith('https://t.me/c/'))
          return false
        return true
      }

      if (isValidImageUrl(url)) {
        logger.info({
          message:
            'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
          telegramId,
          function: 'startScene',
          url,
          step: 'sending_welcome_image',
        })
        await ctx.replyWithPhoto(url, {
          caption:
            translation.length > 1024
              ? translation.substring(0, 1021) + '...'
              : translation,
        })
      } else {
        logger.info({
          message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
          telegramId,
          function: 'startScene',
          step: 'sending_welcome_text',
        })
        await ctx.reply(translation, {
          parse_mode: 'HTML',
        })
      }

      const groupJoinOrVideoUrl = BOT_URLS[currentBotName]

      if (groupJoinOrVideoUrl) {
        logger.info({
          message: `üß≤ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –¥–ª—è ${currentBotName}`,
          telegramId,
          function: 'startScene',
          url: groupJoinOrVideoUrl,
          step: 'sending_lead_magnet',
        })

        const leadMagnetTextRu = `–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ? üìÄ
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª - –∏ —Ç–µ–±–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø!

–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –∏ —è –±—É–¥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –Ω–µ–π—Ä–æ –±–æ—Ç–∞  

–ñ–º–∏ "–û–±—É—á–µ–Ω–∏–µ" –∏ –Ω—ã—Ä—è–π —Å –Ω–∞–º–∏.
`

        const leadMagnetTextEn = `Want to get a training video? üìÄ
Subscribe to the channel - and you will have access!

This channel will publish news and I will talk about updates to the neuro bot

Click "Training" and dive with us.
`

        await ctx.replyWithHTML(
          isRu ? leadMagnetTextRu : leadMagnetTextEn,
          Markup.inlineKeyboard([
            [
              Markup.button.url(
                isRu ? 'üéì –û–±—É—á–µ–Ω–∏–µ' : 'üéì Training',
                groupJoinOrVideoUrl
              ),
            ],
            [
              Markup.button.callback(
                isRu ? 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' : 'üí≥ Subscribe',
                'go_to_subscription_scene'
              ),
            ],
          ])
        )
      } else {
        // –°–ª—É—á–∞–π, –µ—Å–ª–∏ URL –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞/–≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        logger.info({
          message: `‚ÑπÔ∏è [StartScene] URL –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞/—Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è ${currentBotName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é`,
          telegramId,
          function: 'startScene',
          step: 'lead_magnet_or_tutorial_url_not_found_showing_basic_menu',
        })

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º replyKeyboard, –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è isRu
        const replyKeyboard = Markup.keyboard([
          Markup.button.text(
            isRu ? levels[105].title_ru : levels[105].title_en
          ), // –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ levels
          Markup.button.text(
            isRu ? levels[103].title_ru : levels[103].title_en
          ), // –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        ]).resize()

        await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
          reply_markup: replyKeyboard.reply_markup,
        })
      }

      ;(ctx.wizard.state as StartSceneState).initialDisplayDone = true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    } // –ö–æ–Ω–µ—Ü if (!(ctx.wizard.state as StartSceneState).initialDisplayDone)

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ WizardScene. –°—Ü–µ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–ª—è action-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.`,
      telegramId,
      function: 'startScene',
      initialDisplayDone: (ctx.wizard.state as StartSceneState)
        .initialDisplayDone,
    })

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return ctx.wizard.next()
  },
  // –í—Ç–æ—Ä–æ–π —à–∞–≥ WizardScene –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = isRussian(ctx)

    if ('message' in ctx.update && 'text' in ctx.update.message) {
      const text = ctx.update.message.text
      logger.info(`[StartScene Step 2] Received text: ${text}`, {
        telegramId,
        text,
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
      if (text === levels[105].title_ru || text === levels[105].title_en) {
        logger.info({
          message: `üí´ [StartScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É". –ü–µ—Ä–µ—Ö–æ–¥ –≤ SubscriptionScene.`,
          telegramId,
          function: 'startScene.step2.subscription_button',
        })
        delete (ctx.wizard.state as StartSceneState).initialDisplayDone
        return ctx.scene.enter(ModeEnum.SubscriptionScene)
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
      if (text === levels[103].title_ru || text === levels[103].title_en) {
        logger.info({
          message: `üí¨ [StartScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞".`,
          telegramId,
          function: 'startScene.step2.support_button',
        })
        await ctx.scene.leave()
        const { handleTechSupport } = await import(
          '@/commands/handleTechSupport'
        )
        return handleTechSupport(ctx)
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º handleMenu
      logger.info({
        message: `üìù [StartScene] Forwarding text to handleMenu: ${text}`,
        telegramId,
        text,
      })
      await handleMenu(ctx)
      return
    }

    // –ï—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥
    return ctx.wizard.back()
  }
)

startScene.action('go_to_subscription_scene', async ctx => {
  const isRu = ctx.from?.language_code === 'ru'
  try {
    await ctx.answerCbQuery()
    logger.info({
      message: `üí≥ [StartScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É". –ü–µ—Ä–µ—Ö–æ–¥ –≤ SubscriptionScene.`,
      telegramId: ctx.from?.id?.toString() || 'unknown',
      function: 'startScene.action.go_to_subscription_scene',
    })
    delete (ctx.wizard.state as StartSceneState).initialDisplayDone // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    return ctx.scene.enter(ModeEnum.SubscriptionScene)
  } catch (error) {
    logger.error('Error in go_to_subscription_scene action:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred. Please try again later.'
    )
    delete (ctx.wizard.state as StartSceneState).initialDisplayDone // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return ctx.scene.leave() // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  }
})
