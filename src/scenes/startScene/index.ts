import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  checkPaymentStatus,
  getReferalsCountAndUserData,
  getTranslation,
} from '@/core/supabase'
import { mainMenuButton } from '@/menu/mainMenu'
import { BOT_URLS } from '@/core/bot'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import { SubscriptionType } from '@/interfaces/subscription.interface'

async function sendTutorialMessage(ctx: MyContext, isRu: boolean) {
  const botName = ctx.botInfo.username
  let postUrl = ''
  console.log('postUrl', postUrl)
  if (Object.keys(BOT_URLS).includes(botName)) {
    postUrl = BOT_URLS[botName as keyof typeof BOT_URLS]
  } else {
    postUrl = BOT_URLS.neuro_blogger_bot
  }

  console.log('üìπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é... [Sending tutorial video]')

  await ctx.reply(
    isRu
      ? 'üé• –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —É–∑–Ω–∞–π, –∫–∞–∫:\n- –°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –∑–∞ 4 —à–∞–≥–∞\n- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞\n- –°—Ç–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤!'
      : 'üé• Watch tutorial and learn how to:\n- Create a digital twin in 4 steps\n- Generate a neural photo from text\n- Become a digital artist without skills!',
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: isRu
                ? 'üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é'
                : 'üé¨ Watch tutorial',
              url: postUrl,
            },
          ],
        ],
      },
      parse_mode: 'Markdown',
    }
  )
}

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    logger.info('‚û°Ô∏è [StartScene Step 1] Entered scene', {
      userId: ctx.from?.id,
    })
    try {
      const isRu = ctx.from?.language_code === 'ru'
      const { translation } = await getTranslation('start', ctx)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ —Ñ–æ—Ç–æ
      await ctx.reply(
        translation ||
          (isRu
            ? 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!'
            : "ü§ñ Hello! I am your assistant with neural network technologies. Let's get started!"),
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.keyboard([
            [
              Markup.button.text(
                isRu ? mainMenuButton.title_ru : mainMenuButton.title_en
              ),
            ],
          ])
            .resize()
            .oneTime().reply_markup,
        }
      )

      logger.info('‚û°Ô∏è [StartScene Step 1] Sending tutorial message...')
      await sendTutorialMessage(ctx, isRu)

      logger.info('‚û°Ô∏è [StartScene Step 1] Moving to next step...')
      ctx.wizard.next()
    } catch (error) {
      logger.error('üí• [StartScene Step 1] Error:', {
        message: '‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ —Å—Ç–∞—Ä—Ç–∞',
        description: 'Error in start scene',
        error: error instanceof Error ? error.message : String(error),
      })

      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
      const isRu = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRu
          ? 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–π—Ä–æ—Å–∏—Å—Ç–µ–º—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
          : 'ü§ñ Hello! Welcome to the neural system. Press the button below to continue.',
        {
          reply_markup: Markup.keyboard([
            [
              Markup.button.text(
                isRu ? mainMenuButton.title_ru : mainMenuButton.title_en
              ),
            ],
          ])
            .resize()
            .oneTime().reply_markup,
        }
      )
      logger.info('‚û°Ô∏è [StartScene Step 1] Moving to next step after error...')
      ctx.wizard.next()
    }
  },
  async (ctx: MyContext) => {
    logger.info('‚û°Ô∏è [StartScene Step 2] Entered step', { userId: ctx.from?.id })
    const isRu = ctx.from?.language_code === 'ru'
    const telegram_id = ctx.from?.id?.toString() || ''
    logger.info('‚û°Ô∏è [StartScene Step 2] Calling getReferalsCountAndUserData...')
    const { userData, isExist } = await getReferalsCountAndUserData(telegram_id)
    logger.info(
      '‚û°Ô∏è [StartScene Step 2] Result from getReferalsCountAndUserData',
      { isExist, subscription: userData?.subscription }
    )
    console.log('isExist', isExist)
    if (!isExist) {
      logger.info(
        '‚û°Ô∏è [StartScene Step 2] User does not exist. Intending to enter CreateUserScene...'
      )
      await ctx.scene.enter(ModeEnum.CreateUserScene)
      return
    }
    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      logger.error('üí• [StartScene Step 2] Telegram ID not found')
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      logger.info('‚û°Ô∏è [StartScene Step 2] Leaving scene due to missing ID...')
      return ctx.scene.leave()
    }
    if (!userData?.subscription) {
      logger.info(
        '‚û°Ô∏è [StartScene Step 2] User has no subscription. Intending to enter SubscriptionScene...'
      )
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
      return
    }
    if (userData.subscription === SubscriptionType.STARS) {
      logger.info(
        '‚û°Ô∏è [StartScene Step 2] User has STARS subscription. Intending to enter SubscriptionScene...'
      )
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
      return
    }
    logger.info('‚û°Ô∏è [StartScene Step 2] Checking payment status...')
    const hasFullAccess = await checkPaymentStatus(ctx, userData.subscription)
    logger.info('‚û°Ô∏è [StartScene Step 2] Payment status check result', {
      hasFullAccess,
    })
    if (hasFullAccess) {
      logger.info(
        '‚û°Ô∏è [StartScene Step 2] User has full access. Intending to enter MainMenu...'
      )
      await ctx.scene.enter(ModeEnum.MainMenu)
    } else {
      logger.info(
        '‚û°Ô∏è [StartScene Step 2] User does not have full access. Intending to enter SubscriptionScene...'
      )
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
    }
  }
)
