import { CreateUserData, MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  getUserDetails,
  createUser,
  supabase,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'

const SUBSCRIBE_CHANNEL_ID = '@neuro_blogger_pulse'

const isRussian = (ctx: MyContext): boolean => ctx.from?.language_code === 'ru'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString()
    const botName = ctx.botInfo.username
    if (!telegramId) {
      logger.error({
        message: '‚ùå [StartScene] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId',
        function: 'startScene',
      })
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      return ctx.scene.leave()
    }

    const initialUsername = ctx.from?.username
    const firstName = ctx.from?.first_name
    const lastName = ctx.from?.last_name
    const langCode = ctx.from?.language_code
    const isBot = ctx.from?.is_bot
    const finalUsername = initialUsername || firstName || telegramId

    logger.info({
      message: 'üöÄ [StartScene] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º',
      telegramId,
      function: 'startScene',
      username: initialUsername,
      language: langCode,
      sessionData: JSON.stringify(ctx.session || {}),
    })

    try {
      logger.info({
        message: 'üë§ [StartScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        telegramId,
        function: 'startScene',
        step: 'checking_user_existence',
      })
      const userDetails = await getUserDetails(telegramId)
      const isNewUser = !userDetails.isExist

      logger.info({
        message: `üö© [StartScene] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${
          isNewUser ? '–ù–û–í–´–ô' : '–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô'
        }`,
        telegramId,
        isNewUser,
        function: 'startScene',
        step: 'user_status_determined',
      })

      if (!isNewUser) {
        logger.info({
          message: '‚úÖ [StartScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          telegramId,
          function: 'startScene',
          userDetails,
          step: 'user_exists',
        })

        const updateData: Partial<CreateUserData> = {
          username: finalUsername,
          first_name: firstName || null,
          last_name: lastName || null,
          language_code: langCode || 'en',
          bot_name: botName,
        }
        try {
          await createUser(updateData as CreateUserData, ctx)
          logger.info({
            message:
              'üîÑ [StartScene] –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            telegramId,
            function: 'startScene',
            step: 'user_data_updated',
          })
        } catch (updateError) {
          logger.error({
            message:
              '‚ùå [StartScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            telegramId,
            error:
              updateError instanceof Error
                ? updateError.message
                : String(updateError),
            function: 'startScene',
            step: 'user_data_update_error',
          })
        }

        const isRu = isRussian(ctx)

        logger.info({
          message:
            'üì° [StartScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)',
          telegramId,
          function: 'startScene',
          bot_name: botName,
          step: 'fetching_translation_existing',
        })
        const { translation, url } = await getTranslation({
          key: 'start',
          ctx,
          bot_name: botName,
        })

        logger.info({
          message: '‚úÖ [StartScene] –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω',
          telegramId,
          function: 'startScene',
          translationReceived: !!translation,
          imageUrlReceived: !!url,
          step: 'translation_received',
        })

        if (url && url.trim() !== '') {
          logger.info({
            message:
              'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
            telegramId,
            function: 'startScene',
            url,
            step: 'sending_welcome_image',
          })

          await ctx.replyWithPhoto(url, {
            caption: translation,
            parse_mode: 'Markdown',
          })
        } else {
          logger.info({
            message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
            telegramId,
            function: 'startScene',
            step: 'sending_welcome_text',
          })

          await ctx.reply(translation, {
            parse_mode: 'Markdown',
          })
        }

        const tutorialUrl = BOT_URLS[botName]
        let replyKeyboard

        if (tutorialUrl) {
          logger.info({
            message: `üé¨ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName}`,
            telegramId,
            function: 'startScene',
            tutorialUrl,
            step: 'sending_tutorial',
          })

          const tutorialText = isRu
            ? `üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](${tutorialUrl}), –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å (–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞), —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å prompt –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏—Å—å.`
            : `üé¨ Watch this [tutorial video](${tutorialUrl}) on how to create neurophotos in this bot.\n\nIn this video, you will learn how to train your model (Digital avatar body), create photos, and get a prompt from any photo that inspires you.`

          replyKeyboard = Markup.keyboard([
            Markup.button.text(
              isRu ? levels[105].title_ru : levels[105].title_en
            ),
            Markup.button.text(
              isRu ? levels[103].title_ru : levels[103].title_en
            ),
          ]).resize()

          logger.info({
            message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π`,
            telegramId,
            function: 'startScene',
            step: 'sending_tutorial_text_with_keyboard',
            buttons: [
              isRu ? levels[105].title_ru : levels[105].title_en,
              isRu ? levels[103].title_ru : levels[103].title_en,
            ],
          })

          await ctx.reply(tutorialText, {
            parse_mode: 'Markdown',
            reply_markup: replyKeyboard.reply_markup,
          })
        } else {
          logger.info({
            message: `‚ÑπÔ∏è [StartScene] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
            telegramId,
            function: 'startScene',
            step: 'tutorial_url_not_found',
          })

          replyKeyboard = Markup.keyboard([
            Markup.button.text(
              isRu ? levels[105].title_ru : levels[105].title_en
            ),
            Markup.button.text(
              isRu ? levels[103].title_ru : levels[103].title_en
            ),
          ]).resize()

          logger.info({
            message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è`,
            telegramId,
            function: 'startScene',
            step: 'sending_basic_menu',
            buttons: [
              isRu ? levels[105].title_ru : levels[105].title_en,
              isRu ? levels[103].title_ru : levels[103].title_en,
            ],
          })

          await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
            reply_markup: replyKeyboard.reply_markup,
          })
        }

        logger.info({
          message:
            'üö™ [StartScene] –í—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          telegramId,
          function: 'startScene',
          step: 'enter_main_menu',
        })
        return ctx.scene.enter(ModeEnum.MainMenu)
      } else {
        logger.info({
          message: '‚ú® [StartScene] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –°–æ–∑–¥–∞–Ω–∏–µ...',
          telegramId,
          function: 'startScene',
          step: 'new_user_detected',
        })

        let inviterId: string | null = null
        let inviterUsername: string | null = null
        let startPayload: string | null = null
        if (ctx.message && 'text' in ctx.message) {
          startPayload = ctx.message.text.split(' ')[1] ?? null
        }
        if (startPayload) {
          inviterId = startPayload
          logger.info({
            message: 'üë• [StartScene] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ (start payload)',
            telegramId,
            inviterId,
            step: 'invite_code_found',
          })
          try {
            const { data: inviterData, error: inviterError } = await supabase
              .from('users')
              .select('username')
              .eq('id', inviterId)
              .single()
            if (inviterError) throw inviterError
            if (inviterData) inviterUsername = inviterData.username
          } catch (error) {
            logger.error({
              message:
                '‚ùå [StartScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ',
              telegramId,
              inviterId,
              error: error instanceof Error ? error.message : String(error),
              step: 'get_inviter_username_error',
            })
          }
        }

        const photo_url = await getPhotoUrl(ctx, 1)
        const createData: CreateUserData = {
          username: finalUsername,
          telegram_id: telegramId,
          first_name: firstName || null,
          last_name: lastName || null,
          is_bot: isBot || false,
          language_code: langCode || 'en',
          photo_url,
          chat_id: ctx.chat?.id || null,
          mode: 'clean',
          model: 'gpt-4-turbo',
          count: 0,
          aspect_ratio: '9:16',
          inviter: inviterId,
          bot_name: botName,
        }

        try {
          const newUser = await createUser(createData, ctx)
          if (!newUser) {
            throw new Error(
              '–§—É–Ω–∫—Ü–∏—è createUser –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è'
            )
          }
          logger.info({
            message: '‚úÖ [StartScene] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            telegramId,
            function: 'startScene',
            userId: newUser.id,
            step: 'new_user_created',
          })

          try {
            let notificationMessage = `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: @${finalUsername}`
            if (inviterId) {
              notificationMessage += `\n–ü–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ –æ—Ç: ${
                inviterUsername ? `@${inviterUsername}` : `ID ${inviterId}`
              }`
            }
            await ctx.telegram.sendMessage(
              SUBSCRIBE_CHANNEL_ID,
              notificationMessage
            )
            logger.info({
              message:
                'üì¢ [StartScene] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª',
              telegramId,
              channel: SUBSCRIBE_CHANNEL_ID,
              step: 'admin_notification_sent',
            })
          } catch (notifyError) {
            if (
              notifyError instanceof Error &&
              'code' in notifyError &&
              notifyError.code === 403
            ) {
              logger.warn({
                message:
                  '‚ö†Ô∏è [StartScene] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)',
                telegramId,
                channel: SUBSCRIBE_CHANNEL_ID,
                botName: ctx.botInfo.username,
                error: notifyError.message,
                step: 'admin_notification_failed_403',
              })
            } else {
              logger.error({
                message:
                  '‚ùå [StartScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤',
                telegramId,
                error:
                  notifyError instanceof Error
                    ? notifyError.message
                    : String(notifyError),
                step: 'admin_notification_error',
              })
            }
          }

          if (inviterId) {
            try {
              const inviteReply = isRussian(ctx)
                ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`
                : `üîó New user @${finalUsername} registered using your link!`
              await ctx.telegram.sendMessage(inviterId, inviteReply)
              logger.info({
                message: '‚úâÔ∏è [StartScene] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                telegramId,
                inviterId,
                step: 'inviter_notification_sent',
              })
            } catch (inviterNotifyError) {
              if (
                inviterNotifyError instanceof Error &&
                'code' in inviterNotifyError &&
                inviterNotifyError.code === 403
              ) {
                logger.warn({
                  message:
                    '‚ö†Ô∏è [StartScene] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–º)',
                  telegramId,
                  inviterId,
                  botName: ctx.botInfo.username,
                  error: inviterNotifyError.message,
                  step: 'inviter_notification_failed_403',
                })
              } else {
                logger.error({
                  message:
                    '‚ùå [StartScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É',
                  telegramId,
                  inviterId,
                  error:
                    inviterNotifyError instanceof Error
                      ? inviterNotifyError.message
                      : String(inviterNotifyError),
                  step: 'inviter_notification_error',
                })
              }
            }
          }

          await ctx.reply(
            isRussian(ctx)
              ? '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!'
              : '‚úÖ You have successfully registered!'
          )

          logger.info({
            message:
              'üö™ [StartScene] –í—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            telegramId,
            function: 'startScene',
            step: 'enter_main_menu_new',
          })
          return ctx.scene.enter(ModeEnum.MainMenu)
        } catch (creationError) {
          logger.error({
            message:
              '‚ùå [StartScene] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            telegramId,
            error:
              creationError instanceof Error
                ? creationError.message
                : String(creationError),
            function: 'startScene',
            step: 'new_user_creation_critical_error',
          })
          await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          )
          return ctx.scene.leave()
        }
      }
    } catch (error) {
      logger.error({
        message: '‚ùå [StartScene] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        telegramId,
        function: 'startScene',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      })
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.'
      )
      return ctx.scene.leave()
    }
  }
)
