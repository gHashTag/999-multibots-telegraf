import { Scenes, Markup } from 'telegraf'

import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { broadcastService, BroadcastResult } from '@/services/broadcast.service'

// –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
export enum BroadcastContentType {
  PHOTO = 'photo',
  VIDEO = 'video',
  TEXT = 'text',
  POST_LINK = 'post_link',
}

// –≠—Ç–∞–ø—ã –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
enum TextInputStep {
  RUSSIAN = 'russian',
  ENGLISH = 'english',
  COMPLETED = 'completed',
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
function createCancelKeyboard(isRu: boolean) {
  return Markup.keyboard([[isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel']]).resize()
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function createContentTypeKeyboard(isRu: boolean) {
  return Markup.keyboard([
    [isRu ? 'üì∑ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º' : 'üì∑ Photo with text'],
    [isRu ? 'üé• –í–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º' : 'üé• Video with text'],
    [isRu ? 'üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç' : 'üìù Text only'],
    [isRu ? 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç' : 'üîó Post link'],
    [isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel'],
  ]).resize()
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
function createConfirmKeyboard(isRu: boolean) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        isRu ? '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å' : '‚úÖ Send',
        'broadcast_confirm'
      ),
      Markup.button.callback(
        isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel',
        'broadcast_cancel'
      ),
    ],
  ])
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫ –ø–æ—Å—Ç—É
function createAddTextKeyboard(isRu: boolean) {
  return Markup.keyboard([
    [isRu ? '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç' : '‚úÖ Yes, add text'],
    [isRu ? '‚ùå –ù–µ—Ç, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞' : '‚ùå No, without text'],
    [isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel'],
  ]).resize()
}

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
function isCancelMessage(text: string, isRu: boolean): boolean {
  const cancelText = isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel'
  return text === cancelText
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ—Ç, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
function isNoTextMessage(text: string, isRu: boolean): boolean {
  const noText = isRu ? '‚ùå –ù–µ—Ç, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞' : '‚ùå No, without text'
  return text === noText
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
function isYesTextMessage(text: string, isRu: boolean): boolean {
  const yesText = isRu ? '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç' : '‚úÖ Yes, add text'
  return text === yesText
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
function getContentTypeFromMessage(
  text: string,
  isRu: boolean
): BroadcastContentType | null {
  if (text === (isRu ? 'üì∑ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º' : 'üì∑ Photo with text')) {
    return BroadcastContentType.PHOTO
  } else if (text === (isRu ? 'üé• –í–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º' : 'üé• Video with text')) {
    return BroadcastContentType.VIDEO
  } else if (text === (isRu ? 'üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç' : 'üìù Text only')) {
    return BroadcastContentType.TEXT
  } else if (text === (isRu ? 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç' : 'üîó Post link')) {
    return BroadcastContentType.POST_LINK
  }
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendTextBroadcast(
  ctx: MyContext,
  text: string,
  ownerTelegramId?: string
): Promise<BroadcastResult> {
  const botToken = process.env.BOT_TOKEN || ''
  return broadcastService.sendBroadcastWithImage(
    botToken,
    text,
    '',
    ownerTelegramId
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
async function sendImageBroadcast(
  ctx: MyContext,
  text: string,
  imageUrl: string,
  ownerTelegramId?: string
): Promise<BroadcastResult> {
  const botToken = process.env.BOT_TOKEN || ''
  return broadcastService.sendBroadcastWithImage(
    botToken,
    text,
    imageUrl,
    ownerTelegramId
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≤–∏–¥–µ–æ
async function sendVideoBroadcast(
  ctx: MyContext,
  text: string,
  videoUrl: string,
  ownerTelegramId?: string
): Promise<BroadcastResult> {
  const botToken = process.env.BOT_TOKEN || ''
  return broadcastService.sendBroadcastWithVideo(
    botToken,
    text,
    videoUrl,
    ownerTelegramId
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç
async function sendPostLinkBroadcast(
  ctx: MyContext,
  text: string,
  postLink: string,
  ownerTelegramId?: string
): Promise<BroadcastResult> {
  const botToken = process.env.BOT_TOKEN || ''
  return broadcastService.sendBroadcastWithImage(
    botToken,
    text,
    '',
    ownerTelegramId
  )
}

export const broadcastWizard = new Scenes.WizardScene<MyContext>(
  'broadcast_wizard',

  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async ctx => {
    logger.info('CASE 0: broadcast_wizard - –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', {
      description: 'Broadcast wizard started - content type selection',
      userId: ctx.from?.id,
    })

    const isRu = ctx.from?.language_code === 'ru'

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    if (ctx.from) {
      ctx.scene.session.ownerTelegramId = ctx.from.id.toString()
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    ctx.scene.session.textInputStep = TextInputStep.RUSSIAN
    ctx.scene.session.textRu = ''
    ctx.scene.session.textEn = ''

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await ctx.reply(
      isRu
        ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üì®'
        : 'Choose content type for broadcast üì®',
      { reply_markup: createContentTypeKeyboard(isRu).reply_markup }
    )

    ctx.wizard.next()
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá'
          : 'Please select content type using buttons below üëá'
      )
      return
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É
    if (isCancelMessage(ctx.message.text, isRu)) {
      await ctx.reply(
        isRu ? '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå' : 'Broadcast cancelled ‚ùå',
        { reply_markup: Markup.removeKeyboard().reply_markup }
      )
      return ctx.scene.leave()
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = getContentTypeFromMessage(ctx.message.text, isRu)
    if (!contentType) {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üëá'
          : 'Please use the buttons to select content type üëá'
      )
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    ctx.scene.session.contentType = contentType

    logger.info('–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
      description: 'Content type selected',
      contentType: contentType,
      userId: ctx.from?.id,
    })

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    switch (contentType) {
      case BroadcastContentType.PHOTO:
        await ctx.reply(
          isRu
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üñºÔ∏è'
            : 'Please send an image for broadcast üñºÔ∏è',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break

      case BroadcastContentType.VIDEO:
        await ctx.reply(
          isRu
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üé¨\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Please send a video for broadcast üé¨\nMaximum size: 50MB',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break

      case BroadcastContentType.TEXT:
        await ctx.reply(
          isRu
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ ÔøΩÔøΩüá∫'
            : 'Please enter text in RUSSIAN üá∑üá∫',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break

      case BroadcastContentType.POST_LINK:
        await ctx.reply(
          isRu
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram üîó\n–§–æ—Ä–º–∞—Ç: https://t.me/channel_name/message_id'
            : 'Please send a link to Telegram post üîó\nFormat: https://t.me/channel_name/message_id',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break
    }

    ctx.wizard.next()
  },

  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const contentType = ctx.scene.session.contentType

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if (
      ctx.message &&
      'text' in ctx.message &&
      isCancelMessage(ctx.message.text, isRu)
    ) {
      await ctx.reply(
        isRu ? '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå' : 'Broadcast cancelled ‚ùå',
        { reply_markup: Markup.removeKeyboard().reply_markup }
      )
      return ctx.scene.leave()
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    switch (contentType) {
      case BroadcastContentType.PHOTO:
        if (!ctx.message || !('photo' in ctx.message)) {
          await ctx.reply(
            isRu
              ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñºÔ∏è'
              : 'Please send an image üñºÔ∏è'
          )
          return
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º fileId —Ñ–æ—Ç–æ
        ctx.scene.session.photoFileId =
          ctx.message.photo[ctx.message.photo.length - 1].file_id
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        await ctx.reply(
          isRu
            ? '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ üá∑üá∫'
            : 'Now enter text in RUSSIAN üá∑üá∫',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break

      case BroadcastContentType.VIDEO:
        if (!ctx.message || !('video' in ctx.message)) {
          await ctx.reply(
            isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ üé¨' : 'Please send a video üé¨'
          )
          return
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º fileId –≤–∏–¥–µ–æ
        ctx.scene.session.videoFileId = ctx.message.video.file_id
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        await ctx.reply(
          isRu
            ? '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ üá∑üá∫'
            : 'Now enter text in RUSSIAN üá∑üá∫',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        break

      case BroadcastContentType.TEXT:
        if (!ctx.message || !('text' in ctx.message)) {
          await ctx.reply(
            isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù' : 'Please enter text üìù'
          )
          return
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        ctx.scene.session.textRu = ctx.message.text
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        await ctx.reply(
          isRu
            ? '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú —è–∑—ã–∫–µ üá¨üáß'
            : 'Now enter text in ENGLISH üá¨üáß',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        ctx.scene.session.textInputStep = TextInputStep.ENGLISH
        return

      case BroadcastContentType.POST_LINK:
        if (!ctx.message || !('text' in ctx.message)) {
          await ctx.reply(
            isRu
              ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç üîó'
              : 'Please send a post link üîó'
          )
          return
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
        ctx.scene.session.postLink = ctx.message.text
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        await ctx.reply(
          isRu
            ? '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å—Ç—É?'
            : 'Do you want to add text to the post?',
          { reply_markup: createAddTextKeyboard(isRu).reply_markup }
        )
        break
    }

    ctx.wizard.next()
  },

  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const contentType = ctx.scene.session.contentType

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if (
      ctx.message &&
      'text' in ctx.message &&
      isCancelMessage(ctx.message.text, isRu)
    ) {
      await ctx.reply(
        isRu ? '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå' : 'Broadcast cancelled ‚ùå',
        { reply_markup: Markup.removeKeyboard().reply_markup }
      )
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç
    if (
      contentType === BroadcastContentType.POST_LINK &&
      ctx.message &&
      'text' in ctx.message &&
      isNoTextMessage(ctx.message.text, isRu)
    ) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      await showConfirmation(ctx)
      return
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
    if (
      contentType === BroadcastContentType.POST_LINK &&
      ctx.message &&
      'text' in ctx.message &&
      isYesTextMessage(ctx.message.text, isRu)
    ) {
      await ctx.reply(
        isRu ? '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ üá∑üá∫' : 'Enter text in RUSSIAN üá∑üá∫',
        { reply_markup: createCancelKeyboard(isRu).reply_markup }
      )
      ctx.scene.session.textInputStep = TextInputStep.RUSSIAN
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply(
        isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù' : 'Please enter text üìù'
      )
      return
    }

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    switch (ctx.scene.session.textInputStep) {
      case TextInputStep.RUSSIAN:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        ctx.scene.session.textRu = ctx.message.text
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        await ctx.reply(
          isRu
            ? '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú —è–∑—ã–∫–µ üá¨üáß'
            : 'Now enter text in ENGLISH üá¨üáß',
          { reply_markup: createCancelKeyboard(isRu).reply_markup }
        )
        ctx.scene.session.textInputStep = TextInputStep.ENGLISH
        return

      case TextInputStep.ENGLISH:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        ctx.scene.session.textEn = ctx.message.text
        ctx.scene.session.textInputStep = TextInputStep.COMPLETED
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await showConfirmation(ctx)
        break
    }
  },

  // –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
  async ctx => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback queries
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return
    }

    const isRu = ctx.from?.language_code === 'ru'
    const action = ctx.callbackQuery.data

    if (action === 'broadcast_cancel') {
      await ctx.reply(
        isRu ? '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå' : 'Broadcast cancelled ‚ùå',
        { reply_markup: Markup.removeKeyboard().reply_markup }
      )
      return ctx.scene.leave()
    }

    if (action === 'broadcast_confirm') {
      const botName = ctx.botInfo?.username || ''
      const ownerTelegramId = ctx.scene.session.ownerTelegramId || ''
      const textRu = ctx.scene.session.textRu || ''

      if (!botName) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –±–æ—Ç–∞ ‚ùå'
            : 'Error: could not determine bot name ‚ùå',
          { reply_markup: Markup.removeKeyboard().reply_markup }
        )
        return ctx.scene.leave()
      }

      try {
        let result: BroadcastResult
        switch (ctx.scene.session.contentType) {
          case BroadcastContentType.PHOTO:
            result = await sendImageBroadcast(
              ctx,
              textRu,
              ctx.scene.session.photoFileId || '',
              ownerTelegramId
            )
            break

          case BroadcastContentType.VIDEO:
            result = await sendVideoBroadcast(
              ctx,
              textRu,
              ctx.scene.session.videoFileId || '',
              ownerTelegramId
            )
            break

          case BroadcastContentType.TEXT:
            result = await sendTextBroadcast(ctx, textRu, ownerTelegramId)
            break

          case BroadcastContentType.POST_LINK:
            result = await sendPostLinkBroadcast(
              ctx,
              textRu,
              ctx.scene.session.postLink || '',
              ownerTelegramId
            )
            break

          default:
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
        }

        if (result.success) {
          await ctx.reply(
            isRu
              ? `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: ${result.successCount}\n–û—à–∏–±–æ–∫: ${result.errorCount}`
              : `‚úÖ Broadcast sent successfully!\nSuccess: ${result.successCount}\nErrors: ${result.errorCount}`,
            { reply_markup: Markup.removeKeyboard().reply_markup }
          )
        } else {
          await ctx.reply(
            isRu
              ? `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${
                  result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                }`
              : `‚ùå Error sending broadcast: ${
                  result.reason || 'Unknown error'
                }`,
            { reply_markup: Markup.removeKeyboard().reply_markup }
          )
        }
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Error sending broadcast',
          error: (error as Error).message || 'Unknown error',
          userId: ctx.from?.id,
        })

        await ctx.reply(
          isRu
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${
                (error as Error).message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              }`
            : `‚ùå An error occurred while sending broadcast: ${
                (error as Error).message || 'unknown error'
              }`,
          { reply_markup: Markup.removeKeyboard().reply_markup }
        )
      }

      return ctx.scene.leave()
    }
  }
)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function showConfirmation(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'
  const contentType = ctx.scene.session.contentType
  const textRu = ctx.scene.session.textRu || ''
  const textEn = ctx.scene.session.textEn || ''

  let previewMessage = isRu
    ? 'üì¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
    : 'üì¢ Broadcast preview:\n\n'

  previewMessage += isRu ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç:\n' : 'üá∑üá∫ Russian text:\n'
  previewMessage += textRu + '\n\n'

  previewMessage += isRu ? 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç:\n' : 'üá¨üáß English text:\n'
  previewMessage += textEn + '\n\n'

  if (contentType === BroadcastContentType.POST_LINK) {
    previewMessage += isRu
      ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: ${ctx.scene.session.postLink}`
      : `üîó Post link: ${ctx.scene.session.postLink}`
  }

  await ctx.reply(previewMessage, {
    reply_markup: createConfirmKeyboard(isRu).reply_markup,
  })

  ctx.wizard.next()
}

export default broadcastWizard
