import { Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { generateLipSync } from '../../services/generateLipSync'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'
import { PaymentType } from '@/interfaces/payments.interface'
import { BASE_COSTS } from '@/scenes/checkBalanceScene'
import { ModeEnum } from '@/interfaces/modes'

const MAX_FILE_SIZE = 50 * 1024 * 1024 // 50 MB

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å LipSync
const LIPSYNC_COST_VALUE = BASE_COSTS[ModeEnum.LipSync] || 84.38 // 84.38‚≠ê
const LIPSYNC_COST =
  typeof LIPSYNC_COST_VALUE === 'function'
    ? LIPSYNC_COST_VALUE(1)
    : LIPSYNC_COST_VALUE

export const lipSyncWizard = new Scenes.WizardScene<MyContext>(
  'lip_sync',
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ URL –≤–∏–¥–µ–æ' : 'Send a video or video URL',
      {
        reply_markup: { remove_keyboard: true },
      }
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message
    let videoUrl: string | undefined

    if (message && 'video' in message) {
      const videoFile = await ctx.telegram.getFile(message.video.file_id)
      if (videoFile?.file_size && videoFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: video is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      videoUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${videoFile.file_path}`
    } else if (message && 'text' in message) {
      videoUrl = message.text
    }

    if (!videoUrl) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : 'Error: video not provided'
      )
      return ctx.scene.leave()
    }

    ctx.session.videoUrl = videoUrl
    await ctx.reply(
      isRu
        ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ URL –∞—É–¥–∏–æ'
        : 'Send an audio, voice message, or audio URL'
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message

    let audioUrl: string | undefined
    if (message && 'audio' in message) {
      if (!message.audio.file_id) {
        console.error('‚ùå Audio file ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }
      const audioFile = await ctx.telegram.getFile(message.audio.file_id)
      if (audioFile?.file_size && audioFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: audio is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      audioUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${audioFile.file_path}`
    } else if (message && 'voice' in message) {
      const voiceFile = await ctx.telegram.getFile(message.voice.file_id)
      if (voiceFile?.file_size && voiceFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: voice message is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      audioUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${voiceFile.file_path}`
    } else if (message && 'text' in message) {
      audioUrl = message.text
    }

    if (!audioUrl) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : 'Error: audio not provided'
      )
      return ctx.scene.leave()
    }

    ctx.session.audioUrl = audioUrl

    if (!ctx.from?.id) {
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
          : 'Error: User ID not provided'
      )
      return ctx.scene.leave()
    }

    // –ù–û–í–û–ï: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
    const telegramId = ctx.from.id.toString()
    const currentBalance = await getUserBalance(telegramId)

    if (currentBalance === null) {
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'Error getting balance. Try again later.'
      )
      return ctx.scene.leave()
    }

    if (currentBalance < LIPSYNC_COST) {
      await ctx.reply(
        isRu
          ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${LIPSYNC_COST}‚≠ê, —É –≤–∞—Å: ${currentBalance}‚≠ê`
          : `Insufficient funds. Required: ${LIPSYNC_COST}‚≠ê, you have: ${currentBalance}‚≠ê`
      )
      return ctx.scene.leave()
    }

    // –ù–û–í–û–ï: –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í
    const paymentSuccess = await updateUserBalance(
      telegramId,
      LIPSYNC_COST,
      PaymentType.MONEY_OUTCOME,
      'LipSync video generation',
      {
        bot_name: ctx.botInfo?.username || 'unknown_bot',
        service_type: 'lip_sync',
        model_name: 'lipsync-1.9.0-beta',
        language: isRu ? 'ru' : 'en',
      }
    )

    if (!paymentSuccess) {
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : 'Error charging payment. Try again later.'
      )
      return ctx.scene.leave()
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∞–Ω–∏–∏
    const newBalance = currentBalance - LIPSYNC_COST
    await ctx.reply(
      isRu
        ? `üí∞ –°–ø–∏—Å–∞–Ω–æ ${LIPSYNC_COST}‚≠ê. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚≠ê`
        : `üí∞ Charged ${LIPSYNC_COST}‚≠ê. New balance: ${newBalance}‚≠ê`
    )

    if (!ctx.session.videoUrl || !ctx.session.audioUrl) {
      console.error('‚ùå Video URL –∏–ª–∏ Audio URL –Ω–µ –Ω–∞–π–¥–µ–Ω')
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await updateUserBalance(
        telegramId,
        LIPSYNC_COST,
        PaymentType.MONEY_INCOME,
        'LipSync refund - missing URLs',
        {
          bot_name: ctx.botInfo?.username || 'unknown_bot',
        }
      )
      return ctx.scene.leave()
    }

    try {
      await generateLipSync(
        ctx.session.videoUrl,
        ctx.session.audioUrl,
        telegramId,
        ctx.botInfo?.username || 'unknown_bot'
      )

      await ctx.reply(
        isRu
          ? `üé• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`
          : `üé• Video sent for processing. Wait for the result`
      )
    } catch (error) {
      console.error('Error in generateLipSync:', error)

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await updateUserBalance(
        telegramId,
        LIPSYNC_COST,
        PaymentType.MONEY_INCOME,
        'LipSync refund - generation error',
        {
          bot_name: ctx.botInfo?.username || 'unknown_bot',
        }
      )

      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.'
          : 'An error occurred while processing the video. Funds refunded.'
      )
    }
    return ctx.scene.leave()
  }
)

export default lipSyncWizard
