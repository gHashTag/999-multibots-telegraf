import { Markup, Scenes } from 'telegraf'
import { MyContext, ModeEnum } from '../../interfaces'
import { getStepSelectionMenu } from '../../menu/getStepSelectionMenu'
import { isRussian } from '@/helpers/language'
import { handleTrainingCost } from '@/price/helpers'
import { generateCostMessage, stepOptions } from '@/price/priceCalculator'

export const digitalAvatarBodyWizard = new Scenes.WizardScene<MyContext>(
  'digital_avatar_body',
  async ctx => {
    const isRu = isRussian(ctx)
    const costMessage = generateCostMessage(stepOptions.v1, isRu, 'v1')
    await ctx.reply(costMessage, getStepSelectionMenu(isRu))
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    console.log('Entering step 2 of the wizard')
    if (ctx.message && 'text' in ctx.message) {
      const messageText = ctx.message.text
      console.log(
        '[digitalAvatarBodyWizard] Received text message:',
        messageText
      )

      // --- –í–û–ó–í–†–ê–©–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
      if (messageText.startsWith(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')) {
        console.log(
          'Leaving digitalAvatarBodyWizard to main menu via text command (using startsWith)'
        )
        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return ctx.scene.enter(ModeEnum.MainMenu)
      }
      // --- –ö–û–ù–ï–¶ –í–û–ó–í–†–ê–¢–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---

      // --- –í–û–ó–í–†–ê–©–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ö–ù–û–ü–ö–ò –°–ü–†–ê–í–ö–ò ---
      if (
        messageText.startsWith(
          isRu ? '‚ùì –°–ø—Ä–∞–≤–∫–∞' : '‚ùì Help' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        )
      ) {
        console.log(
          'Handling help inline from digitalAvatarBodyWizard via text command'
        )
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã —Å–ø—Ä–∞–≤–∫–∞ –∑–Ω–∞–ª–∞, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
        ctx.session.mode = ModeEnum.DigitalAvatarBody // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å–ø—Ä–∞–≤–∫–∏
        return ctx.scene.enter(ModeEnum.Help)
      }
      // --- –ö–û–ù–ï–¶ –í–û–ó–í–†–ê–¢–ê –°–ü–†–ê–í–ö–ò ---

      // --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —à–∞–≥–æ–≤ ---
      const stepsMatch = messageText.match(/\d+/)
      console.log('stepsMatch', stepsMatch)

      if (stepsMatch) {
        const steps = parseInt(stepsMatch[0])
        ctx.session.steps = steps
        console.log('Parsed steps:', steps)
        const { leaveScene, trainingCostInStars, currentBalance } =
          await handleTrainingCost(ctx, steps, isRu)

        if (leaveScene) {
          return ctx.scene.leave() // handleTrainingCost –º–æ–∂–µ—Ç —Å–∞–º –≤—ã–π—Ç–∏ –∏–∑ —Å—Ü–µ–Ω—ã
        } else {
          const message = isRu
            ? `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${steps} —à–∞–≥–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${trainingCostInStars}‚≠êÔ∏è –∑–≤–µ–∑–¥\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚≠êÔ∏è`
            : `‚úÖ You selected ${steps} steps costing ${trainingCostInStars}‚≠êÔ∏è stars\n\nYour balance: ${currentBalance} ‚≠êÔ∏è`

          await ctx.reply(message, Markup.removeKeyboard()) // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —à–∞–≥–æ–≤
          return ctx.scene.enter('trainFluxModelWizard')
        }
      } else {
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —à–∞–≥–∏ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply(
          isRu
            ? 'üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.'
            : 'üî¢ Please select the number of steps using the buttons.'
        )
        return // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–π –∂–µ —Å—Ü–µ–Ω–µ
      }
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.error('Received non-text update in step 2')
      await ctx.reply(isRu ? '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.' : 'Invalid input.')
      return
    }
  }
)
