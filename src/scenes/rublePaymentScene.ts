import { Markup, Scenes } from 'telegraf'
import { MyContext, SessionData, SelectedPayment } from '@/interfaces'
import { isRussian } from '@/helpers'
import { handleSelectRubAmount } from '@/handlers'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, ROBOKASSA_PASSWORD_1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

import {
  PaymentStatus,
  Currency,
  PaymentType,
} from '@/interfaces/payments.interface'

export const rublePaymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.RublePaymentScene
)

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ò–õ–ò —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
rublePaymentScene.enter(async ctx => {
  const sceneState = ctx.scene.state as { paymentInfo?: SelectedPayment }
  const paymentInfo = sceneState?.paymentInfo
  const isRu = isRussian(ctx)
  const userId = ctx.from?.id

  logger.info('### rublePaymentScene ENTERED ###', {
    scene: ModeEnum.RublePaymentScene,
    step: 'enter',
    telegram_id: userId,
    sceneState: ctx.scene.state,
  })

  if (!userId) {
    logger.error(
      `‚ùå [${ModeEnum.RublePaymentScene}] User ID is missing on enter!`,
      {
        sceneState: ctx.scene.state,
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.'
        : 'An error occurred: could not identify your account.'
    )
    return ctx.scene.leave()
  }

  if (paymentInfo) {
    const amountRub = paymentInfo.amount
    const subscriptionType = paymentInfo.subscription
    const stars = paymentInfo.stars

    if (!amountRub || !subscriptionType || !stars) {
      logger.error(
        `‚ùå [${ModeEnum.RublePaymentScene}] Invalid paymentInfo in scene state for subscription`,
        {
          telegram_id: userId,
          paymentInfo: paymentInfo,
        }
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏.'
          : 'An error occurred while processing subscription data.'
      )
      return ctx.scene.leave()
    }

    logger.info(
      `[${ModeEnum.RublePaymentScene}] Entered for SUBSCRIPTION payment: ${subscriptionType}`,
      {
        telegram_id: userId,
        amount: amountRub,
        stars: stars,
        subscription: subscriptionType,
      }
    )

    const invId = Math.floor(Math.random() * 1000000)
    const description = isRu
      ? `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionType}`
      : `Subscription payment for ${subscriptionType}`

    try {
      logger.info(
        `[${ModeEnum.RublePaymentScene}] Generating Robokassa URL for SUBSCRIPTION ${subscriptionType} (${amountRub} RUB)`,
        {
          telegram_id: userId,
          amount: amountRub,
          subscription: subscriptionType,
          invId: invId,
        }
      )

      const invoiceURL = await getInvoiceId(
        MERCHANT_LOGIN,
        amountRub,
        invId,
        description,
        ROBOKASSA_PASSWORD_1
      )

      const { bot_name } = getBotNameByToken(ctx.telegram.token)

      await setPayments({
        telegram_id: userId.toString(),
        OutSum: amountRub.toString(),
        InvId: invId.toString(),
        currency: Currency.RUB,
        stars: stars,
        status: PaymentStatus.PENDING,
        payment_method: 'Robokassa',
        type: PaymentType.MONEY_INCOME,
        subscription_type: subscriptionType,
        bot_name,
        language: ctx.from?.language_code ?? 'en',
      })

      logger.info(
        `[${ModeEnum.RublePaymentScene}] PENDING SUBSCRIPTION payment saved for InvId: ${invId}, Sub: ${subscriptionType}`,
        {
          telegram_id: userId,
          invId: invId,
        }
      )

      const inlineKeyboard = [
        [
          {
            text: isRu
              ? `–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ${amountRub} ‚ÇΩ`
              : `Pay subscription ${amountRub} RUB`,
            url: invoiceURL,
          },
        ],
      ]

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É "1 —Ä—É–±–ª—å" –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
      // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –ù–ï –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —É–∂–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ—Å—Ç
      const { ADMIN_IDS_ARRAY } = await import('@/config')
      if (
        userId &&
        ADMIN_IDS_ARRAY.includes(userId) &&
        !ctx.session.isAdminTest
      ) {
        inlineKeyboard.push([
          {
            text: isRu
              ? 'üß™ 1 ‚ÇΩ (–ê–¥–º–∏–Ω-—Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏)'
              : 'üß™ 1 RUB (Admin Test Subscription)',
            callback_data: `test_subscription_1rub:${subscriptionType}:${stars}`,
          },
        ])
      }

      await ctx.reply(
        isRu
          ? `‚úÖ <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionType} —Å–æ–∑–¥–∞–Ω</b>\n–°—É–º–º–∞: ${amountRub} ‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Robokassa.`
          : `‚úÖ <b>Invoice created for subscription ${subscriptionType}</b>\nAmount: ${amountRub} RUB\n\nClick the button below to proceed with payment via Robokassa.`,
        {
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
          parse_mode: 'HTML',
        }
      )
      logger.info(
        `[${ModeEnum.RublePaymentScene}] Robokassa SUBSCRIPTION invoice message sent to user ${userId}`
      )
    } catch (error: any) {
      logger.error(
        `‚ùå [${ModeEnum.RublePaymentScene}] Error generating Robokassa URL for SUBSCRIPTION:`,
        {
          error: error.message,
          stack: error.stack,
          telegram_id: userId,
          paymentInfo: paymentInfo,
        }
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏.'
          : 'An error occurred while creating the subscription invoice.'
      )
      return ctx.scene.leave()
    }
  } else {
    logger.info(`[${ModeEnum.RublePaymentScene}] Entered for BALANCE top-up`, {
      telegram_id: userId,
    })
    await handleSelectRubAmount({ ctx, isRu })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã (–¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)
rublePaymentScene.action(/top_up_rub_(\d+)/, async ctx => {
  const sceneState = ctx.scene.state as { paymentInfo?: SelectedPayment }
  const paymentInfo = sceneState?.paymentInfo
  if (paymentInfo) {
    logger.warn(
      `[${ModeEnum.RublePaymentScene}] Action top_up_rub called, but scene state has paymentInfo (subscription payment). Ignoring callback.`,
      {
        telegram_id: ctx.from?.id,
        callback_data: ctx.match ? ctx.match[0] : 'N/A',
        sceneState: ctx.scene.state,
      }
    )
    await ctx.answerCbQuery()
    return
  }

  const isRu = isRussian(ctx)
  try {
    await ctx.answerCbQuery()
    const amountRub = parseInt(ctx.match[1], 10)
    logger.info(
      `[${ModeEnum.RublePaymentScene}] Processing callback top_up_rub: ${amountRub} ‚ÇΩ`,
      {
        telegram_id: ctx.from?.id,
        amount: amountRub,
      }
    )

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "1 —Ä—É–±–ª—å"
    let selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ—Å—Ç –Ω–∞ 1 —Ä—É–±–ª—å, —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    if (!selectedOption && amountRub === 1) {
      const userId = ctx.from?.id
      const { ADMIN_IDS_ARRAY } = await import('@/config')

      if (userId && ADMIN_IDS_ARRAY.includes(userId)) {
        logger.info(
          `[${ModeEnum.RublePaymentScene}] Admin test payment: 1 RUB`,
          {
            telegram_id: userId,
            isAdmin: true,
          }
        )
        selectedOption = { amountRub: 1, stars: 1 } // –ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ—Å—Ç: 1 —Ä—É–±–ª—å = 1 –∑–≤–µ–∑–¥–∞
      }
    }

    if (!selectedOption) {
      logger.error(
        `‚ùå [${ModeEnum.RublePaymentScene}] Invalid top-up option selected: ${amountRub} RUB`,
        {
          telegram_id: ctx.from?.id,
          amount: amountRub,
        }
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
          : 'An error occurred: invalid top-up amount.'
      )
      return ctx.scene.leave()
    }

    const stars = selectedOption.stars
    const userId = ctx.from?.id
    if (!userId) {
      logger.error(`‚ùå [${ModeEnum.RublePaymentScene}] User ID is missing!`, {
        callback_data: ctx.match[0],
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.'
          : 'An error occurred: could not identify your account.'
      )
      return ctx.scene.leave()
    }

    const invId = Math.floor(Math.random() * 1000000)
    const description = isRu
      ? `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥${amountRub === 1 ? ' (–ê–¥–º–∏–Ω-—Ç–µ—Å—Ç)' : ''}`
      : `Balance top-up for ${stars} stars${amountRub === 1 ? ' (Admin Test)' : ''}`

    logger.info(
      `[${ModeEnum.RublePaymentScene}] Generating Robokassa URL for ${amountRub} RUB (${stars} stars)${amountRub === 1 ? ' [ADMIN TEST]' : ''}`,
      {
        telegram_id: userId,
        amount: amountRub,
        stars: stars,
        invId: invId,
        isAdminTest: amountRub === 1,
      }
    )

    const invoiceURL = await getInvoiceId(
      MERCHANT_LOGIN,
      amountRub,
      invId,
      description,
      ROBOKASSA_PASSWORD_1
    )

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    await setPayments({
      telegram_id: userId.toString(),
      OutSum: amountRub.toString(),
      InvId: invId.toString(),
      currency: Currency.RUB,
      stars: stars,
      status: PaymentStatus.PENDING,
      payment_method: 'Robokassa',
      type: PaymentType.MONEY_INCOME,
      subscription_type: null,
      bot_name,
      language: ctx.from?.language_code ?? 'en',
    })

    logger.info(
      `[${ModeEnum.RublePaymentScene}] PENDING BALANCE top-up payment saved for InvId: ${invId}${amountRub === 1 ? ' [ADMIN TEST]' : ''}`,
      {
        telegram_id: userId,
        invId: invId,
        isAdminTest: amountRub === 1,
      }
    )

    const inlineKeyboard = [
      [
        {
          text: isRu
            ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amountRub} ‚ÇΩ${amountRub === 1 ? ' (–¢–µ—Å—Ç)' : ''}`
            : `Pay ${amountRub} RUB${amountRub === 1 ? ' (Test)' : ''}`,
          url: invoiceURL,
        },
      ],
    ]

    await ctx.reply(
      isRu
        ? `‚úÖ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω${amountRub === 1 ? ' (–ê–¥–º–∏–Ω-—Ç–µ—Å—Ç)' : ''}</b>\n–°—É–º–º–∞: ${amountRub} ‚ÇΩ (${stars} ‚≠êÔ∏è)\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Robokassa.`
        : `‚úÖ <b>Invoice created${amountRub === 1 ? ' (Admin Test)' : ''}</b>\nAmount: ${amountRub} RUB (${stars} ‚≠êÔ∏è)\n\nClick the button below to proceed with payment via Robokassa.`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
        parse_mode: 'HTML',
      }
    )
    logger.info(
      `[${ModeEnum.RublePaymentScene}] Robokassa invoice message sent to user ${userId}${amountRub === 1 ? ' [ADMIN TEST]' : ''}`
    )
  } catch (error: any) {
    logger.error(
      `‚ùå [${ModeEnum.RublePaymentScene}] Error processing callback top_up_rub:`,
      {
        error: error.message,
        stack: error.stack,
        telegram_id: ctx.from?.id,
        callback_data: ctx.match ? ctx.match[0] : 'N/A',
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Robokassa.'
        : 'An error occurred while creating the Robokassa invoice.'
    )
    return ctx.scene.leave()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "1 —Ä—É–±–ª—å" –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
rublePaymentScene.action(/test_subscription_1rub:(.+):(\d+)/, async ctx => {
  const isRu = isRussian(ctx)
  const userId = ctx.from?.id

  if (!userId) {
    await ctx.answerCbQuery()
    return
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
  const { ADMIN_IDS_ARRAY } = await import('@/config')
  if (!ADMIN_IDS_ARRAY.includes(userId)) {
    await ctx.answerCbQuery(
      isRu
        ? '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'
        : 'You do not have permission for this action'
    )
    return
  }

  try {
    await ctx.answerCbQuery()

    const subscriptionType = ctx.match[1]
    const originalStars = parseInt(ctx.match[2], 10)
    const testAmount = 1 // 1 —Ä—É–±–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
    const testStars = 1 // 1 –∑–≤–µ–∑–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

    logger.info(
      `[${ModeEnum.RublePaymentScene}] Admin test subscription payment: 1 RUB for ${subscriptionType}`,
      {
        telegram_id: userId,
        subscription: subscriptionType,
        originalStars: originalStars,
        testAmount: testAmount,
        testStars: testStars,
        isAdmin: true,
      }
    )

    const invId = Math.floor(Math.random() * 1000000)
    const description = isRu
      ? `–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionType} (–ê–¥–º–∏–Ω)`
      : `Test subscription ${subscriptionType} (Admin)`

    const invoiceURL = await getInvoiceId(
      MERCHANT_LOGIN,
      testAmount,
      invId,
      description,
      ROBOKASSA_PASSWORD_1
    )

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    await setPayments({
      telegram_id: userId.toString(),
      OutSum: testAmount.toString(),
      InvId: invId.toString(),
      currency: Currency.RUB,
      stars: testStars,
      status: PaymentStatus.PENDING,
      payment_method: 'Robokassa',
      type: PaymentType.MONEY_INCOME,
      subscription_type: subscriptionType,
      bot_name,
      language: ctx.from?.language_code ?? 'en',
      metadata: {
        admin_test: true,
        original_amount: originalStars,
        test_amount: testAmount,
      },
    })

    logger.info(
      `[${ModeEnum.RublePaymentScene}] PENDING ADMIN TEST SUBSCRIPTION payment saved for InvId: ${invId}, Sub: ${subscriptionType}`,
      {
        telegram_id: userId,
        invId: invId,
        isAdminTest: true,
      }
    )

    const inlineKeyboard = [
      [
        {
          text: isRu
            ? `–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç ${testAmount} ‚ÇΩ (${subscriptionType})`
            : `Pay test ${testAmount} RUB (${subscriptionType})`,
          url: invoiceURL,
        },
      ],
    ]

    await ctx.reply(
      isRu
        ? `‚úÖ <b>–ê–¥–º–∏–Ω-—Ç–µ—Å—Ç: –°—á–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É ${subscriptionType} —Å–æ–∑–¥–∞–Ω</b>\n–¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞: ${testAmount} ‚ÇΩ (–≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω—ã—Ö ${Math.floor(originalStars * 2.3)} ‚ÇΩ)\n\nüß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.`
        : `‚úÖ <b>Admin Test: Invoice for subscription ${subscriptionType} created</b>\nTest amount: ${testAmount} RUB (instead of usual ${Math.floor(originalStars * 2.3)} RUB)\n\nüß™ This is a test payment for system verification.\n\nClick the button below to proceed with payment.`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
        parse_mode: 'HTML',
      }
    )

    logger.info(
      `[${ModeEnum.RublePaymentScene}] Admin test subscription invoice message sent to user ${userId}`
    )
  } catch (error: any) {
    logger.error(
      `‚ùå [${ModeEnum.RublePaymentScene}] Error in admin test subscription:`,
      {
        error: error.message,
        telegram_id: userId,
        subscription: ctx.match[1],
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.'
        : 'An error occurred while creating the test invoice.'
    )
  }
})

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
rublePaymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(
    `[${ModeEnum.RublePaymentScene}] Leaving scene via Main Menu button`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  await ctx.scene.enter(ModeEnum.MainMenu)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
rublePaymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.RublePaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore
    message_text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
      : 'Please select a top-up amount or return to the main menu.'
  )
})
