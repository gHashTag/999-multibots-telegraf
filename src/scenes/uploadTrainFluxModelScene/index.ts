import { Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { createImagesZip } from '../../helpers/images/createImagesZip'
import { ensureSupabaseAuth } from '../../core/supabase'
import { createModelTraining } from '@/services/createModelTraining'
import { isRussian } from '@/helpers/language'

export const uploadTrainFluxModelScene = new Scenes.BaseScene<MyContext>(
  'uploadTrainFluxModelScene'
)

uploadTrainFluxModelScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  console.log('Scene: ZIP')
  try {
    await ctx.reply(isRu ? '‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...' : '‚è≥ Creating archive...')
    console.log('üéØ Starting ZIP creation process')
    const zipPath = await createImagesZip(ctx.session.images)
    console.log('ZIP created at:', zipPath)

    await ensureSupabaseAuth()

    await ctx.reply(isRu ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤...' : '‚è≥ Uploading archive...')
    const triggerWord = `${ctx.session.username?.toLocaleUpperCase()}`
    if (!triggerWord) {
      await ctx.reply(
        isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π trigger word' : '‚ùå Invalid trigger word'
      )
      return ctx.scene.leave()
    }

    await ctx.reply(
      isRu
        ? '‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...'
        : '‚úÖ Archive uploaded successfully! Starting model training...'
    )

    await ctx.reply(
      isRu
        ? `‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n\n–í–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–¥–µ–ª "–ú–æ–¥–µ–ª–∏" –≤ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ.`
        : `‚è≥ Starting model training...\n\nYour model will be trained in 1-2 hours. Once completed, you can check its performance using the "Models" section in Neurophoto.`
    )

    if (!ctx.session.targetUserId) {
      await ctx.reply(
        isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π targetUserId' : '‚ùå Invalid targetUserId'
      )
      return ctx.scene.leave()
    }

    if (!ctx.session.modelName) {
      await ctx.reply(
        isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π modelName' : '‚ùå Invalid modelName'
      )
      return ctx.scene.leave()
    }

    if (!ctx.session.steps) {
      await ctx.reply(isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π steps' : '‚ùå Invalid steps')
      return ctx.scene.leave()
    }

    if (!ctx.botInfo?.username) {
      await ctx.reply(isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π botName' : '‚ùå Invalid botName')
      return ctx.scene.leave()
    }
    if (!ctx.session.steps) {
      await ctx.reply(isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π steps' : '‚ùå Invalid steps')
      return ctx.scene.leave()
    }

    await createModelTraining(
      {
        filePath: zipPath,
        triggerWord,
        modelName: ctx.session.modelName,
        telegram_id: ctx.session.targetUserId.toString(),
        is_ru: isRu,
        steps: Number(ctx.session.steps),
        botName: ctx.botInfo?.username,
      },
      ctx
    )

    // await deleteFile(zipPath)
  } catch (error) {
    console.error('Error in uploadTrainFluxModelScene:', error)
    //await sendGenericErrorMessage(ctx, isRu, error)
  } finally {
    await ctx.scene.leave()
  }
})

export default uploadTrainFluxModelScene
