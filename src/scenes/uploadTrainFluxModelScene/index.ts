import { Scenes } from 'telegraf'
import { MyContext } from '@/types'
import { createImagesZip } from '../../helpers/images/createImagesZip'
import { ensureSupabaseAuth } from '../../core/supabase'
import { createModelTraining } from '@/services/createModelTraining'
import { isRussian } from '@/helpers/language'
import { logger } from '@/utils/logger'
import { sendGenericErrorMessage } from '@/menu'

export const uploadTrainFluxModelScene = new Scenes.BaseScene<MyContext>(
  'uploadTrainFluxModelScene'
)

uploadTrainFluxModelScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  logger.info('üéØ –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏', {
    description: 'Entering upload model scene',
    telegram_id: ctx.from?.id,
  })

  try {
    await ctx.reply(isRu ? '‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...' : '‚è≥ Creating archive...')
    logger.info('üéØ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞', {
      description: 'Starting ZIP creation',
      telegram_id: ctx.from?.id,
    })

    const zipPath = await createImagesZip(ctx.session.images)
    logger.info('‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω', {
      description: 'ZIP archive created',
      telegram_id: ctx.from?.id,
      path: zipPath,
    })

    await ensureSupabaseAuth()

    await ctx.reply(isRu ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤...' : '‚è≥ Uploading archive...')

    const triggerWord = `${ctx.session.username.toLocaleUpperCase()}`
    if (!triggerWord) {
      logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π trigger word', {
        description: 'Invalid trigger word',
        telegram_id: ctx.from?.id,
      })
      await ctx.reply(
        isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π trigger word' : '‚ùå Invalid trigger word'
      )
      return ctx.scene.leave()
    }

    await ctx.reply(
      isRu
        ? '‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...'
        : '‚úÖ Archive uploaded successfully! Starting model training...'
    )

    await ctx.reply(
      isRu
        ? `‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n\n–í–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–¥–µ–ª "–ú–æ–¥–µ–ª–∏" –≤ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ.`
        : `‚è≥ Starting model training...\n\nYour model will be trained in 1-2 hours. Once completed, you can check its performance using the "Models" section in Neurophoto.`
    )

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏', {
      description: 'Starting model training',
      telegram_id: ctx.from?.id,
      trigger_word: triggerWord,
      model_name: ctx.session.modelName,
      steps: ctx.session.steps,
    })

    await createModelTraining(
      {
        filePath: zipPath,
        triggerWord,
        modelName: ctx.session.modelName,
        steps: ctx.session.steps,
        telegram_id: ctx.session.targetUserId.toString(),
        is_ru: isRu,
        botName: ctx.botInfo?.username,
      },
      ctx
    )

    logger.info('‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
      description: 'Model training started successfully',
      telegram_id: ctx.from?.id,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ uploadTrainFluxModelScene:', {
      description: 'Error in upload model scene',
      telegram_id: ctx.from?.id,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    await sendGenericErrorMessage(ctx, isRu, error as Error)
  } finally {
    logger.info('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏', {
      description: 'Finishing upload model scene',
      telegram_id: ctx.from?.id,
    })
    await ctx.scene.leave()
  }
})

export default uploadTrainFluxModelScene
