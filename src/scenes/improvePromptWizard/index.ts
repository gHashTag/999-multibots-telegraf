import { Scenes, Markup } from 'telegraf'
import { upgradePrompt } from '@/core/openai/upgradePrompt'
import { MyContext } from '@/interfaces'
import { generateTextToImageDirect } from '@/services/generateTextToImageDirect'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { generateTextToVideo } from '@/modules/videoGenerator/generateTextToVideo'
import { sendPromptImprovementMessage } from '@/menu/sendPromptImprovementMessage'
import { sendPromptImprovementFailureMessage } from '@/menu/sendPromptImprovementFailureMessage'
import { sendGenericErrorMessage } from '@/menu'
import { ModeEnum } from '@/interfaces/modes'
import { getUserProfileAndSettings } from '@/db/userSettings'
import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase'
const MAX_ATTEMPTS = 10

export const improvePromptWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ImprovePromptWizard,
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    console.log(ctx.session, 'ctx.session')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ state
    if (
      !ctx.session.prompt &&
      ctx.scene.state &&
      'prompt' in ctx.scene.state &&
      typeof ctx.scene.state.prompt === 'string'
    ) {
      console.log('improvePromptWizard: –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ ctx.scene.state')
      ctx.session.prompt = ctx.scene.state.prompt
    } else if (ctx.session.prompt) {
      console.log('improvePromptWizard: –ü—Ä–æ–º–ø—Ç —É–∂–µ –µ—Å—Ç—å –≤ ctx.session')
    } else {
      console.log(
        'improvePromptWizard: –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ session, –Ω–∏ –≤ state'
      )
    }

    const prompt = ctx.session.prompt

    console.log(prompt, 'prompt')

    if (!ctx.from) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 'User identification error'
      )
      return ctx.scene.leave()
    }

    ctx.session.attempts = 0 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

    await sendPromptImprovementMessage(ctx, isRu)

    if (!prompt) {
      await sendPromptImprovementFailureMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const improvedPrompt = await upgradePrompt(prompt)
    if (!improvedPrompt) {
      await sendPromptImprovementFailureMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    ctx.session.prompt = improvedPrompt

    await ctx.reply(
      isRu
        ? '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```\n' + improvedPrompt + '\n```'
        : 'Improved prompt:\n```\n' + improvedPrompt + '\n```',
      {
        reply_markup: Markup.keyboard([
          [
            Markup.button.text(
              isRu ? '‚úÖ –î–∞. C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?' : '‚úÖ Yes. Generate?'
            ),
          ],
          [
            Markup.button.text(
              isRu ? 'üîÑ –ï—â–µ —Ä–∞–∑ —É–ª—É—á—à–∏—Ç—å' : 'üîÑ Improve again'
            ),
          ],
          [Markup.button.text(isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel')],
        ]).resize().reply_markup,
        parse_mode: 'MarkdownV2',
      }
    )

    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message

    if (message && 'text' in message) {
      const text = message.text
      console.log(text, 'text')

      if (!ctx.from?.id) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            : 'User identification error'
        )
        return ctx.scene.leave()
      }

      if (!ctx.session.prompt) {
        await sendPromptImprovementFailureMessage(ctx, isRu)
        return ctx.scene.leave()
      }
      if (!ctx.session.mode) {
        await sendPromptImprovementFailureMessage(ctx, isRu)
        return ctx.scene.leave()
      }
      switch (text) {
        case isRu ? '‚úÖ –î–∞. C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?' : '‚úÖ Yes. Generate?': {
          const mode = ctx.session.mode
          if (!mode)
            throw new Error(
              isRu ? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º' : 'Could not identify mode'
            )

          if (!ctx.from.id)
            throw new Error(
              isRu
                ? 'improvePromptWizard: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegram_id'
                : 'improvePromptWizard: Could not identify telegram_id'
            )
          if (!ctx.from.username)
            throw new Error(
              isRu
                ? 'improvePromptWizard: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å username'
                : 'improvePromptWizard: Could not identify username'
            )
          if (!isRu)
            throw new Error(
              isRu
                ? 'improvePromptWizard: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å isRu'
                : 'improvePromptWizard: Could not identify isRu'
            )

          const { profile, settings } = await getUserProfileAndSettings(
            ctx.from.id
          )
          if (!profile || !settings) {
            logger.error(
              '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ improvePromptWizard',
              { telegramId: ctx.from.id }
            )
            await ctx.reply(
              isRu
                ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
                : 'Error: Could not retrieve user data.'
            )
            return ctx.scene.leave()
          }

          console.log(mode, 'mode')
          try {
            switch (mode) {
              case ModeEnum.NeuroPhoto:
                await generateNeuroImage(
                  ctx.session.prompt,
                  ctx.session.userModel.model_url,
                  1,
                  ctx.from.id.toString(),
                  ctx,
                  ctx.botInfo?.username
                )
                break
              case 'text_to_video':
                if (!ctx.session.videoModel)
                  throw new Error(
                    isRu
                      ? 'improvePromptWizard: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ –º–æ–¥–µ–ª—å'
                      : 'improvePromptWizard: Could not identify video model'
                  )

                console.log(ctx.session.videoModel, 'ctx.session.videoModel')
                if (!ctx.session.videoModel)
                  throw new Error(
                    isRu
                      ? 'improvePromptWizard: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ –º–æ–¥–µ–ª—å'
                      : 'improvePromptWizard: Could not identify video model'
                  )
                await generateTextToVideo(
                  ctx.session.prompt,
                  ctx.from.id.toString(),
                  ctx.from.username || 'unknown',
                  isRu,
                  ctx.botInfo?.username || 'unknown_bot',
                  ctx.session.videoModel
                )

                break
              case 'text_to_image': {
                if (!ctx.session.selectedImageModel) {
                  logger.error(
                    '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –≤ improvePromptWizard',
                    { telegramId: ctx.from.id }
                  )
                  await ctx.reply(
                    isRu
                      ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
                      : 'Error: Could not determine the selected image model.'
                  )
                  return ctx.scene.leave()
                }
                await generateTextToImageDirect(
                  ctx.session.prompt,
                  ctx.session.selectedImageModel,
                  1,
                  ctx.from.id.toString(),
                  ctx.from.username || 'unknown',
                  isRu,
                  ctx
                )

                const currentBalance = await getUserBalance(
                  ctx.from.id.toString()
                )

                await ctx.reply(
                  isRu
                    ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£.\n\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`
                    : `Your images have been generated!\n\nGenerate more?\n\nYour new balance: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`,
                  {
                    reply_markup: {
                      keyboard: [
                        [
                          { text: '1Ô∏è‚É£' },
                          { text: '2Ô∏è‚É£' },
                          { text: '3Ô∏è‚É£' },
                          { text: '4Ô∏è‚É£' },
                        ],
                        [
                          {
                            text: isRu
                              ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç'
                              : '‚¨ÜÔ∏è Improve prompt',
                          },
                          {
                            text: isRu
                              ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä'
                              : 'üìê Change size',
                          },
                        ],
                        [{ text: isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
                      ],
                      resize_keyboard: true,
                    },
                  }
                )
                break
              }
              default:
                throw new Error(
                  isRu
                    ? 'improvePromptWizard: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º'
                    : 'improvePromptWizard: Unknown mode'
                )
            }
          } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞', {
              error,
              telegramId: ctx.from.id,
            })
            await sendGenericErrorMessage(ctx, isRu)
            return ctx.scene.leave()
          }
          return ctx.scene.leave()
        }

        case isRu ? 'üîÑ –ï—â–µ —Ä–∞–∑ —É–ª—É—á—à–∏—Ç—å' : 'üîÑ Improve again': {
          ctx.session.attempts = (ctx.session.attempts || 0) + 1

          if (ctx.session.attempts >= MAX_ATTEMPTS) {
            await ctx.reply(
              isRu
                ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞.'
                : 'Maximum number of prompt improvement attempts reached.'
            )
            return ctx.scene.leave()
          }

          await ctx.reply(
            isRu
              ? '‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...'
              : '‚è≥ Re-improving prompt...'
          )
          if (!ctx.session.prompt) {
            await sendPromptImprovementFailureMessage(ctx, isRu)
            return ctx.scene.leave()
          }
          const improvedPrompt = await upgradePrompt(ctx.session.prompt)
          if (!improvedPrompt) {
            await sendPromptImprovementFailureMessage(ctx, isRu)
            return ctx.scene.leave()
          }

          ctx.session.prompt = improvedPrompt

          await ctx.reply(
            isRu
              ? '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```\n' + improvedPrompt + '\n```'
              : 'Improved prompt:\n```\n' + improvedPrompt + '\n```',
            {
              reply_markup: Markup.keyboard([
                [
                  Markup.button.text(
                    isRu ? '‚úÖ –î–∞. C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?' : '‚úÖ Yes. Generate?'
                  ),
                ],
                [
                  Markup.button.text(
                    isRu ? 'üîÑ –ï—â–µ —Ä–∞–∑ —É–ª—É—á—à–∏—Ç—å' : 'üîÑ Improve again'
                  ),
                ],
                [Markup.button.text(isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel')],
              ]).resize().reply_markup,
              parse_mode: 'MarkdownV2',
            }
          )
          break
        }

        case isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel': {
          await ctx.reply(isRu ? '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' : 'Operation cancelled')
          return ctx.scene.leave()
        }

        default: {
          await sendGenericErrorMessage(ctx, isRu)
          return ctx.scene.leave()
        }
      }
    }
  }
)

export default improvePromptWizard
