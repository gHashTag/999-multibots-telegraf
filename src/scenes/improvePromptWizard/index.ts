import { Scenes, Markup, Telegraf } from 'telegraf'
import { upgradePrompt } from '@/core/openai/upgradePrompt'
import { MyContext } from '@/interfaces'
import { generateTextToImage } from '@/services/generateTextToImage'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { sendPromptImprovementMessage } from '@/menu/sendPromptImprovementMessage'
import { sendPromptImprovementFailureMessage } from '@/menu/sendPromptImprovementFailureMessage'
import { sendGenericErrorMessage } from '@/menu'
import { ModeEnum } from '@/interfaces/modes'
import { getUserProfileAndSettings } from '@/db/userSettings'
import { logger } from '@/utils/logger'
import { handleHelpCancel } from '@/handlers'
import { isRussian } from '@/helpers'
import { imageModelPrices } from '@/price/models'
import { validateAndCalculateImageModelPrice } from '@/price/helpers'
import { bots } from '@/bot'
const MAX_ATTEMPTS = 10

export const improvePromptWizard = new Scenes.WizardScene<MyContext>(
  'improvePromptWizard',
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    console.log(ctx.session, 'ctx.session')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ state
    if (
      !ctx.session.prompt &&
      ctx.scene.state &&
      'prompt' in ctx.scene.state &&
      typeof ctx.scene.state.prompt === 'string'
    ) {
      console.log('improvePromptWizard: –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ ctx.scene.state')
      ctx.session.prompt = ctx.scene.state.prompt
    } else if (ctx.session.prompt) {
      console.log('improvePromptWizard: –ü—Ä–æ–º–ø—Ç —É–∂–µ –µ—Å—Ç—å –≤ ctx.session')
    } else {
      console.log(
        'improvePromptWizard: –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ session, –Ω–∏ –≤ state'
      )
    }

    const prompt = ctx.session.prompt

    console.log(prompt, 'prompt')

    if (!ctx.from) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 'User identification error'
      )
      return ctx.scene.leave()
    }

    ctx.session.attempts = 0 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

    await sendPromptImprovementMessage(ctx, isRu)

    if (!prompt) {
      await sendPromptImprovementFailureMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const improvedPrompt = await upgradePrompt(prompt)
    if (!improvedPrompt) {
      await sendPromptImprovementFailureMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    ctx.session.prompt = improvedPrompt

    await ctx.reply(
      isRu
        ? '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```\n' + improvedPrompt + '\n```'
        : 'Improved prompt:\n```\n' + improvedPrompt + '\n```',
      {
        reply_markup: Markup.keyboard([
          [
            Markup.button.text(
              isRu ? '‚úÖ –î–∞. C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?' : '‚úÖ Yes. Generate?'
            ),
          ],
          [
            Markup.button.text(
              isRu ? 'üîÑ –ï—â–µ —Ä–∞–∑ —É–ª—É—á—à–∏—Ç—å' : 'üîÑ Improve again'
            ),
          ],
          [Markup.button.text(isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel')],
        ]).resize().reply_markup,
        parse_mode: 'MarkdownV2',
      }
    )

    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const improvedPrompt = message.text

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!ctx.session.selectedModel) {
      logger.error(
        '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –≤ improvePromptWizard',
        {
          telegramId: ctx.from.id,
        }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.'
          : 'Error: Could not determine the selected model.'
      )
      return ctx.scene.leave()
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
    const currentBotName = ctx.botInfo?.username
    const currentBotInstance = bots.find(
      b => b.context.botName === currentBotName
    )

    if (!currentBotInstance) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Å—Ç–∞–Ω—Å Telegraf –¥–ª—è –±–æ—Ç–∞ –≤ improvePromptWizard',
        {
          botName: currentBotName,
          telegramId: ctx.from.id,
        }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.'
          : 'Error: Could not initialize the bot.'
      )
      return ctx.scene.leave()
    }

    try {
      await ctx.reply(
        isRu
          ? `‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º...`
          : `‚è≥ Generating image with improved prompt...`
      )

      // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
      await generateTextToImage(
        improvedPrompt,
        ctx.session.selectedModel,
        1,
        ctx.from.id.toString(),
        isRu,
        ctx,
        currentBotInstance // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
      )
      // –†–µ–∑—É–ª—å—Ç–∞—Ç (GenerationResult[]) –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, —Ç.–∫. generateTextToImage —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ improvePromptWizard:', {
        error,
      })
      await sendGenericErrorMessage(ctx, isRu)
    }

    return ctx.scene.leave()
  }
)

export default improvePromptWizard
