import { Scenes, Markup } from 'telegraf'
import type { MyContext } from '@/interfaces'
import type { SessionPayment } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'
import { handleSelectRubAmount } from '@/handlers'
import { isRussian } from '@/helpers'
import { logger } from '@/utils/logger'
import {
  generateRobokassaUrl,
  getInvoiceId,
} from '@/scenes/getRuBillWizard/helper'
import { setPayments } from '@/core/supabase'
import { PaymentType } from '@/interfaces/payments.interface'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { cancelMenu } from '@/menu/cancelMenu'

// Manually define subscription details here for now
// TODO: Move this to a proper config file or fetch from DB
// Commenting out as enum values are incorrect
// const subscriptionDetails = {
//   [SubscriptionType.STANDARD_MONTH]: { name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç –ú–µ—Å—è—Ü', stars: 10, durationDays: 30, amount_rub: 100 },
//   [SubscriptionType.STANDARD_YEAR]: { name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç –ì–æ–¥', stars: 100, durationDays: 365, amount_rub: 1000 },
//   [SubscriptionType.VIP_MONTH]: { name: 'VIP –ú–µ—Å—è—Ü', stars: 20, durationDays: 30, amount_rub: 200 },
//   [SubscriptionType.VIP_YEAR]: { name: 'VIP –ì–æ–¥', stars: 200, durationDays: 365, amount_rub: 2000 },
// } as const;

export const rublePaymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.RublePaymentScene
)

rublePaymentScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  logger.info(`Entering ${ModeEnum.RublePaymentScene}`, {
    telegram_id: ctx.from?.id,
    session_selectedPayment: ctx.session.selectedPayment,
  })

  try {
    // --- Temporarily commenting out subscription logic ---
    /*
    const { selectedPayment } = ctx.session

    if (
      selectedPayment &&
      selectedPayment.amount &&
      selectedPayment.subscription &&
      selectedPayment.subscription !== 'stars' && // Assuming 'stars' is not a valid SubscriptionType enum
      subscriptionDetails[selectedPayment.subscription] // This check needs valid enum keys
    ) {
      logger.info(`Branch: Subscription Purchase`, {
        telegram_id: ctx.from?.id,
        selectedPaymentData: selectedPayment,
      })

      const amount = selectedPayment.amount
      const subKey = selectedPayment.subscription
      const subDetails = subscriptionDetails[subKey]
      const subName = subDetails ? subDetails.name : '–ü–æ–¥–ø–∏—Å–∫–∞' // Get subscription name

      logger.info(
        `Showing subscription payment button for ${subName} (${amount} RUB)`,
        {
          telegram_id: ctx.from?.id,
          subscriptionKey: subKey,
        }
      )

      const message = isRu
        ? `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É "${subName}".\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} ‚ÇΩ.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.`
        : `You have selected the "${subName}" subscription.\nAmount to pay: ${amount} RUB.\n\nPress the button below to proceed to payment.`

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(
            isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} ‚ÇΩ` : `Pay ${amount} RUB`,
            `pay_subscription:${amount}:${subKey}` // Pass amount and subscription key
          ),
        ],
        [
          Markup.button.callback(
            isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main Menu',
            'main_menu'
          ),
        ],
      ])

      await ctx.reply(message, keyboard)
    } else {
      logger.info(`Branch: Balance Top-up (Defaulting)`, {
        telegram_id: ctx.from?.id,
        reason: selectedPayment ? 'Invalid selectedPayment data for subscription' : 'No selectedPayment',
        selectedPaymentData: selectedPayment,
      })
      // Always show balance top-up for now
      await handleSelectRubAmount({ ctx, isRu })
    }
    */
    // --- END Temporarily commenting out subscription logic ---

    // Always show balance top-up options for now
    logger.info(`Branch: Balance Top-up (Defaulting)`, {
      telegram_id: ctx.from?.id,
      reason: 'Subscription logic temporarily disabled',
    })
    await handleSelectRubAmount({ ctx, isRu })
  } catch (error: any) {
    logger.error(`Error inside ${ModeEnum.RublePaymentScene}`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while entering the payment section. Try again later.'
    )
    await ctx.scene.leave()
  }
})

// --- Temporarily commenting out subscription payment action handler ---
/*
rublePaymentScene.action(/pay_subscription:(\d+):(.+)/, async ctx => {
  const isRu = isRussian(ctx)
  const amount = parseInt(ctx.match[1], 10)
  const subscriptionKey = ctx.match[2] as SubscriptionType // Cast to enum type
  const telegramId = ctx.from?.id

  if (!telegramId) {
    logger.error('Cannot process payment without telegram_id', {
      match: ctx.match,
    })
    await ctx.answerCbQuery(
      isRu
        ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.'
        : 'Error: Could not determine your ID.'
    )
    return
  }

  if (isNaN(amount) || amount <= 0) {
    logger.error('Invalid amount for subscription payment', {
      amount,
      match: ctx.match,
    })
    await ctx.answerCbQuery(
      isRu ? '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.' : 'Error: Invalid amount.'
    )
    return
  }

  // Check if subscriptionKey is a valid enum member
  if (!Object.values(SubscriptionType).includes(subscriptionKey)) {
     logger.error('Invalid subscription key received', { subscriptionKey, match: ctx.match });
     await ctx.answerCbQuery(isRu ? '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.' : 'Error: Invalid subscription type.');
     return;
  }

  // Use the manually defined details (ensure it exists and has correct keys)
  const subDetails = subscriptionDetails[subscriptionKey];
  if (!subDetails) {
    logger.error('Subscription details not found for key', { subscriptionKey });
    await ctx.answerCbQuery(isRu ? '–û—à–∏–±–∫–∞: –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' : 'Error: Subscription details not found.');
    return;
  }

  logger.info(`Processing subscription payment via Robokassa`, {
    telegram_id: telegramId,
    amount,
    subscriptionKey,
  })

  try {
    const invoiceId = getInvoiceId() // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—á–µ—Ç–∞
    const paymentUrl = generateRobokassaUrl(
      amount,
      invoiceId,
      isRu
        ? `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subDetails.name}`
        : `Subscription payment ${subDetails.name}`,
      String(telegramId), // –ü–µ—Ä–µ–¥–∞–µ–º telegramId –∫–∞–∫ string
      { shp_SubscriptionKey: subscriptionKey } // –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
    await setPayments({
      telegram_id: String(telegramId), // Use string
      OutSum: String(amount), // Use string
      InvId: String(invoiceId), // Use string
      currency: 'RUB',
      stars: subDetails.stars, // Add stars based on subscription
      status: 'pending', // –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      payment_method: 'Robokassa', // Explicitly set method
      bot_name: ctx.botInfo?.username || 'UnknownBot', // Get bot name
      language: isRu ? 'ru' : 'en', // Add language
      subscription: subscriptionKey, // Save subscription type
      description: isRu ? `–ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ${subDetails.name}` : `Subscription payment attempt ${subDetails.name}`,
      // metadata: { subscriptionKey }, // Redundant, already in subscription column
    })

    // const messageText = createPaymentLinkMessage(amount, isRu, 'RUB') // Function not found
    const messageText = isRu
      ? `‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n–°—É–º–º–∞: ${amount} ‚ÇΩ\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–æ–¥–ø–∏—Å–∫–∞ ${subDetails.name}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.`
      : `‚úÖ Invoice created!\nAmount: ${amount} RUB\nPurpose: Subscription ${subDetails.name}\n\nPress the button below to proceed to payment.`
    const keyboard = Markup.inlineKeyboard([
      Markup.button.url(
        isRu ? 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ' : 'üîó Proceed to Payment',
        paymentUrl
      ),
      Markup.button.callback(
        isRu ? 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' : 'üîÑ Check Payment',
        `check_payment:${invoiceId}`
      ), // TODO: Implement check_payment handler
      Markup.button.callback(
        isRu ? '‚Ü©Ô∏è –ù–∞–∑–∞–¥' : '‚Ü©Ô∏è Back',
        'back_to_payment_options'
      ), // Or 'main_menu' if preferred
    ])

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ —ç—Ç–æ callback_query)
    if (ctx.callbackQuery?.message) {
      await ctx
        .deleteMessage(ctx.callbackQuery.message.message_id)
        .catch(e =>
          logger.warn('Failed to delete previous message', { error: e })
        )
    }
    await ctx.reply(messageText, keyboard)
    await ctx.answerCbQuery() // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
  } catch (error: any) {
    logger.error('Error processing Robokassa subscription payment', {
      error: error.message,
      stack: error.stack,
      telegram_id: telegramId,
      amount,
      subscriptionKey,
    })
    await ctx.answerCbQuery(
      isRu ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.' : 'Error creating invoice.'
    )
    await ctx.reply(
      isRu
        ? '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'Failed to create payment link. Try again later.'
    )
  }
})
*/
// --- END Temporarily commenting out subscription payment action handler ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
rublePaymentScene.action('main_menu', async ctx => {
  const isRu = isRussian(ctx)
  logger.info(`User requested main menu from ${ModeEnum.RublePaymentScene}`, {
    telegram_id: ctx.from?.id,
  })
  await ctx.answerCbQuery()
  await ctx.scene.leave()
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
  // await ctx.telegram.sendMessage(ctx.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', MainMenuKeyboard(isRu));
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
rublePaymentScene.action('back_to_payment_options', async ctx => {
  const isRu = isRussian(ctx)
  await ctx.answerCbQuery()
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
  if (ctx.callbackQuery?.message) {
    await ctx
      .deleteMessage(ctx.callbackQuery.message.message_id)
      .catch(e =>
        logger.warn('Failed to delete payment link message', { error: e })
      )
  }
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
  await ctx.scene.reenter()
})

// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã (action) –∏–∑ handleSelectRubAmount
// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ handleSelectRubAmount

rublePaymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.RublePaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore
    message_text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.'
      : 'Please select an amount to top up or go back.'
  )
})
