import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'

import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { PaymentType } from '@/interfaces/payments.interface'

/**
 * –°—Ç–∞—Ä–∞—è —Å—Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 * –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ó–≤–µ–∑–¥—ã –∏–ª–∏ –†—É–±–ª–∏).
 */
export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  console.log(`[PaymentScene LOG] === ENTER Scene === (User: ${ctx.from?.id})`)
  logger.info('### paymentScene ENTERED ###', {
    scene: ModeEnum.PaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
    session_subscription: ctx.session.subscription, // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å–µ—Å—Å–∏–∏
  })
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' : 'Select payment method:'

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–≤–µ–∑–¥–∞–º
    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'), // –ò–∑–º–µ–Ω–∏–ª —ç–º–æ–¥–∑–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      ],
      [
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    ]).resize()

    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
      // reply_markup: { remove_keyboard: true },
    })
  } catch (error: any) {
    logger.error(`‚ùå [${ModeEnum.PaymentScene}] Error in enter:`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
        : 'An error occurred. Please try entering again via the menu.'
    )
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    await ctx.scene.leave()
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –ó–≤–µ–∑–¥–∞–º–∏
paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log(
    `[PaymentScene LOG] --- HEARS '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' --- (User: ${ctx.from?.id})`
  )
  const intentType = ctx.session.selectedPayment?.type
  const paymentInfo = ctx.session.selectedPayment

  if (
    (intentType === PaymentType.MONEY_INCOME ||
      intentType === PaymentType.REFUND) &&
    paymentInfo
  ) {
    logger.info(
      `[${ModeEnum.PaymentScene}] Entering Star scene for SUBSCRIPTION: ${paymentInfo.subscription}`,
      {
        telegram_id: ctx.from?.id,
        paymentInfo,
      }
    )
    // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å—Ç–µ–π—Ç —Å—Ü–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.StarPaymentScene, { paymentInfo })
  } else {
    logger.info(`[${ModeEnum.PaymentScene}] Entering Star scene for TOP-UP`, {
      telegram_id: ctx.from?.id,
    })
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ starPaymentScene.enter
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ starPaymentScene –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –±–µ–∑ state
    await ctx.scene.enter(ModeEnum.StarPaymentScene)
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏
paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ Rubles'], async ctx => {
  const intentType = ctx.session.selectedPayment?.type
  const paymentInfo = ctx.session.selectedPayment

  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Rubles. Checking session: type=${intentType}, paymentInfo exists=${!!paymentInfo}`,
    {
      telegram_id: ctx.from?.id,
      session_selectedPayment: ctx.session.selectedPayment,
    }
  )

  if (
    (intentType === PaymentType.MONEY_INCOME ||
      intentType === PaymentType.REFUND) &&
    paymentInfo
  ) {
    logger.info(
      `[${ModeEnum.PaymentScene}] Entering Ruble scene for SUBSCRIPTION: ${paymentInfo.subscription}`,
      {
        telegram_id: ctx.from?.id,
        paymentInfo,
      }
    )
    // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å—Ç–µ–π—Ç —Å—Ü–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.RublePaymentScene, { paymentInfo })
  } else {
    logger.info(`[${ModeEnum.PaymentScene}] Entering Ruble scene for TOP-UP`, {
      telegram_id: ctx.from?.id,
    })
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º
    await ctx.scene.enter(ModeEnum.RublePaymentScene)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
paymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.PaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore - –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ TextMessage
    text: ctx.message?.text,
  })
  // –í–ê–ñ–ù–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, —Ç.–∫. –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
  // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–Ω–∞—á–∏—Ç —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.'
      : 'Please use the buttons to make a selection.'
  )
  // –£–î–ê–õ–Ø–ï–ú –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  /*
    {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –≤ enter
      reply_markup: Markup.keyboard([
        // ... –∫–Ω–æ–ø–∫–∏ ...
        [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')],
      ]).resize().reply_markup,
    }
  */
})
