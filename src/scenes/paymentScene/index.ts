import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import {
  handleSelectStars,
  handleBuySubscription,
  handleBuy,
  handleSelectRubAmount,
} from '@/handlers'
import { starAmounts } from '@/price/helpers/starAmounts'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, PASSWORD1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'

export const paymentScene = new Scenes.BaseScene<MyContext>('paymentScene')

paymentScene.enter(async ctx => {
  console.log(
    '[PaymentScene] Entered scene. Session subscription:',
    ctx.session.subscription
  )
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?'

    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
        Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
      ],
    ]).resize()

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
    })
  } catch (error) {
    console.error('Error in paymentScene.enter:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'An error occurred. Please try again.'
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ó–í–ï–ó–î–ê–ú–ò (Telegram Stars)
paymentScene.action(/top_up_\d+/, async ctx => {
  try {
    console.log('[PaymentScene] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback top_up (Stars) –≤ —Å—Ü–µ–Ω–µ')
    const data = ctx.match[0]
    console.log('[PaymentScene] Callback data:', data)
    const isRu = isRussian(ctx)

    try {
      await ctx.answerCbQuery()
    } catch (e) {
      console.error('[PaymentScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e)
    }

    await handleBuy({ ctx, data, isRu })
    console.log(
      '[PaymentScene] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback top_up (Stars) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    )
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ Telegram Stars –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Å—Ü–µ–Ω—ã
    await ctx.scene.leave()
  } catch (error) {
    console.error(
      '[PaymentScene] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback top_up (Stars):',
      error
    )
    const isRu = isRussian(ctx)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while processing star purchase. Please try again later.'
    )
    await ctx.scene.leave()
  }
})

// –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –†–£–ë–õ–Ø–ú–ò (Robokassa)
paymentScene.action(/top_up_rub_(\d+)/, async ctx => {
  const isRu = isRussian(ctx)
  try {
    const amountRub = parseInt(ctx.match[1], 10)
    console.log(`[PaymentScene] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback top_up_rub: ${amountRub} ‚ÇΩ`)

    try {
      await ctx.answerCbQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    } catch (e) {
      console.error('[PaymentScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback rub:', e)
    }

    // –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥
    const selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)
    if (!selectedOption) {
      console.error(
        `[PaymentScene] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è ${amountRub} —Ä—É–±`
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
          : 'An error occurred: invalid top-up amount.'
      )
      return ctx.scene.leave()
    }

    const stars = selectedOption.stars
    const userId = ctx.from?.id
    const invId = Math.floor(Math.random() * 1000000) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å—á–µ—Ç–∞
    const description = isRu
      ? `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥`
      : `Balance top-up for ${stars} stars`

    console.log(
      `[PaymentScene] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Robokassa URL –¥–ª—è ${amountRub} —Ä—É–± (${stars} –∑–≤–µ–∑–¥)`
    )
    const invoiceURL = await getInvoiceId(
      MERCHANT_LOGIN,
      amountRub,
      invId,
      description,
      PASSWORD1
    )

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
    await setPayments({
      telegram_id: userId.toString(),
      OutSum: amountRub.toString(),
      InvId: invId.toString(),
      currency: 'RUB', // –í–∞–ª—é—Ç–∞ - –†—É–±–ª–∏
      stars: stars, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
      status: 'PENDING',
      payment_method: 'Robokassa',
      subscription: 'stars', // –¢–∏–ø - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥
      bot_name,
      language: ctx.from?.language_code,
    })

    console.log('[PaymentScene] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É Robokassa –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      isRu
        ? `üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ${amountRub} ‚ÇΩ —á–µ—Ä–µ–∑ Robokassa –∏ –ø–æ–ª—É—á–∏—Ç—å ${stars} ‚≠êÔ∏è.`
        : `üëá Click the button below to proceed with the payment of ${amountRub} RUB via Robokassa and receive ${stars} ‚≠êÔ∏è.`,
      Markup.inlineKeyboard([
        Markup.button.url(
          isRu ? '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ' : 'Proceed to Payment',
          invoiceURL
        ),
      ])
    )

    console.log(
      '[PaymentScene] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback top_up_rub —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã'
    )
    await ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
  } catch (error) {
    console.error('[PaymentScene] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback top_up_rub:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while creating the payment invoice. Please try again later.'
    )
    await ctx.scene.leave()
  }
})

paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log('[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏ triggered')
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  console.log(
    '[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏. Session subscription:',
    subscription
  )
  try {
    if (subscription) {
      if (['neurobase', 'neuroblogger', 'neurophoto'].includes(subscription)) {
        await handleBuySubscription({ ctx, isRu })
        await ctx.scene.leave()
        return
      } else if (subscription === 'stars') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–≤–µ–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
        await handleSelectStars({ ctx, isRu, starAmounts })
        // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, –∂–¥–µ–º callback top_up_X
        return
      }
    } else {
      // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–≤–µ–∑–¥ –¥–ª—è Telegram Stars
      await handleSelectStars({ ctx, isRu, starAmounts })
      // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
      return
    }
    console.warn(
      '[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏. Unknown state for subscription:',
      subscription
    )
    await ctx.scene.leave()
    return
  } catch (error) {
    console.error("[PaymentScene] Error in Hears '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏':", error)
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏.'
        : 'Error processing star payment.'
    )
    await ctx.scene.leave()
    return
  }
})

paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ In rubles'], async ctx => {
  console.log('[PaymentScene] Hears: üí≥ –†—É–±–ª—è–º–∏ triggered')
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  console.log(
    '[PaymentScene] Hears: üí≥ –†—É–±–ª—è–º–∏. Session subscription:',
    subscription
  )
  try {
    if (
      [
        'neurobase',
        'neurophoto',
        'neuromeeting',
        'neuromentor',
        'neuroblogger',
      ].includes(subscription)
    ) {
      // –ü–æ–∫—É–ø–∫–∞ –ü–û–î–ü–ò–°–ö–ò —Ä—É–±–ª—è–º–∏ - –∏–¥–µ–º –≤ emailWizard
      console.log(`[PaymentScene] Entering getEmailWizard for ${subscription}`)
      return ctx.scene.enter('getEmailWizard')
    } else if (subscription === 'stars') {
      // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–ê–õ–ê–ù–°–ê —Ä—É–±–ª—è–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã
      console.log(
        '[PaymentScene] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É–±–ª—è–º–∏'
      )
      await handleSelectRubAmount({ ctx, isRu })
      // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, –∂–¥–µ–º callback top_up_rub_X
      return
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      console.warn(
        '[PaymentScene] Hears: üí≥ –†—É–±–ª—è–º–∏. Unknown or missing subscription:',
        subscription
      )
      await ctx.reply(
        isRu
          ? '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.'
          : 'Please select a subscription or star package first.'
      )
      await ctx.scene.leave()
      return
    }
  } catch (error) {
    console.error("[PaymentScene] Error in Hears 'üí≥ –†—É–±–ª—è–º–∏':", error)
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏.'
        : 'Error processing ruble payment.'
    )
    await ctx.scene.leave()
    return
  }
})

paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  console.log('[PaymentScene] Hears: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é triggered')
  await ctx.scene.enter('menuScene')
  return
})
