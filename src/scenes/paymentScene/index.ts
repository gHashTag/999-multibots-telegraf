import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import { handleSelectStars } from '@/handlers/handleSelectStars'
import { handleBuySubscription } from '@/handlers/handleBuySubscription'
import { ModeEnum } from '@/interfaces/modes'
import { createPendingPayment } from '@/core/supabase/createPendingPayment'
import { MERCHANT_LOGIN } from '@/config'
import { generateShortInvId } from '@/utils/generateShortInvId'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { paymentOptions } from '@/price/priceCalculator'
import { TransactionType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { SUBSCRIPTION_CONFIG } from '@/config/subscription.config'

const merchantLogin = MERCHANT_LOGIN
const password1 = process.env.ROBOKASSA_PASSWORD1 || ''

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!merchantLogin) {
  throw new Error('MERCHANT_LOGIN is not defined in environment variables')
}

export const paymentScene = new Scenes.BaseScene<MyContext>('paymentScene')

paymentScene.enter(async (ctx: MyContext) => {
  const isRu = isRussian(ctx)
  try {
    logger.info('üé≠ Entering payment scene', {
      telegram_id: ctx.from?.id,
      selectedPayment: ctx.session.selectedPayment,
      mode: ctx.session.selectedPayment?.type,
      current_scene: ctx.scene?.current?.id,
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await ctx.reply(
      isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?',
      Markup.keyboard([
        [
          Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
          {
            text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
            web_app: {
              url: `https://telegram.org/blog/telegram-stars/${isRu ? 'ru' : 'en'}?ln=a`,
            },
          },
        ],
        [
          Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
          Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
        ],
      ]).resize()
    )

    logger.info('‚úÖ Payment options displayed', {
      telegram_id: ctx.from?.id,
      subscription: ctx.session.subscription,
    })
  } catch (error) {
    logger.error('‚ùå Error in payment scene:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id: ctx.from?.id,
      selectedPayment: ctx.session.selectedPayment,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        : '‚ùå An error occurred. Please try again later or contact support.'
    )

    await ctx.scene.leave()
  }
})

paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription

  try {
    logger.info('‚≠êÔ∏è Processing stars payment', {
      telegram_id: ctx.from?.id,
      subscription,
      current_scene: ctx.scene?.current?.id,
    })

    if (subscription) {
      if (
        subscription === SubscriptionType.NEUROBASE ||
        subscription === SubscriptionType.NEUROPHOTO ||
        subscription === SubscriptionType.NEUROBLOGGER
      ) {
        await handleBuySubscription(ctx, subscription)
        await ctx.scene.leave()
      } else {
        await handleSelectStars({ ctx, isRu, paymentOptions })
        await ctx.scene.leave()
      }
    } else {
      await handleSelectStars({ ctx, isRu, paymentOptions })
      await ctx.scene.leave()
    }

    logger.info('‚úÖ Stars payment processed successfully', {
      telegram_id: ctx.from?.id,
      subscription,
    })
  } catch (error) {
    logger.error('‚ùå Error processing stars payment:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id: ctx.from?.id,
      subscription,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå Error processing stars payment. Please try again later.'
    )
  }
})

paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ In rubles'], async ctx => {
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription

  if (!ctx.from) {
    throw new Error('User not found')
  }

  if (!ctx.botInfo?.username) {
    throw new Error('Bot username is not defined')
  }

  try {
    logger.info('üí≥ Processing ruble payment', {
      telegram_id: ctx.from.id,
      subscription,
      current_scene: ctx.scene?.current?.id,
    })

    if (subscription && subscription !== SubscriptionType.NEUROTESTER) {
      const subscriptionInfo = SUBSCRIPTION_CONFIG[subscription]
      const price = isRu ? subscriptionInfo.price_ru : subscriptionInfo.price_en
      const stars = subscriptionInfo.stars
      const title = isRu ? subscriptionInfo.title_ru : subscriptionInfo.title_en

      const invId = generateShortInvId()
      const description = `Subscription ${title}`

      const paymentUrl = await getInvoiceId(
        merchantLogin,
        price,
        invId,
        description,
        password1
      )

      await createPendingPayment({
        telegram_id: ctx.from.id.toString(),
        amount: price,
        stars,
        type: TransactionType.SUBSCRIPTION_PURCHASE,
        description,
        bot_name: ctx.botInfo.username,
        service_type: ModeEnum.Subscribe,
        inv_id: invId.toString(),
        invoice_url: paymentUrl,
        metadata: {
          subscription_type: subscription,
          payment_method: 'Robokassa',
        },
      })

      await ctx.reply(
        isRu
          ? `üí´ –ü–æ–¥–ø–∏—Å–∫–∞ ${title}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} RUB\n‚≠êÔ∏è –ë–æ–Ω—É—Å: ${stars} –∑–≤–µ–∑–¥`
          : `üí´ Subscription ${title}\nüí∞ Price: ${price} RUB\n‚≠êÔ∏è Bonus: ${stars} stars`,
        Markup.inlineKeyboard([
          [Markup.button.url(isRu ? 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' : 'üí≥ Pay', paymentUrl)],
        ])
      )

      logger.info('‚úÖ Ruble payment processed successfully', {
        telegram_id: ctx.from.id,
        subscription,
        price,
        stars,
      })
    } else {
      await handleSelectStars({ ctx, isRu, paymentOptions })
    }
  } catch (error) {
    logger.error('‚ùå Error in ruble payment processing:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      telegram_id: ctx.from?.id,
      subscription,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        : '‚ùå An error occurred while creating the payment. Please try again later or contact support.'
    )
  }
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
paymentScene.action(/pay_rub_(\d+)_(\d+)/, async ctx => {
  if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
    return
  }

  const isRu = isRussian(ctx)

  if (!ctx.from || !ctx.botInfo?.username) {
    await ctx.answerCbQuery('Error: User or bot data missing')
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –∑–≤–µ–∑–¥—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const match = ctx.callbackQuery.data.match(/pay_rub_(\d+)_(\d+)/)
    if (!match) {
      await ctx.answerCbQuery('Invalid data')
      return
    }

    const amount = parseInt(match[1])
    const stars = parseInt(match[2])

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const userId = ctx.from.id
    const invId = generateShortInvId()
    const description = isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' : 'Balance replenishment'
    const numericInvId = Number(invId)

    if (!merchantLogin || !password1) {
      throw new Error('merchantLogin or password1 is not defined')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
    const paymentUrl = await getInvoiceId(
      merchantLogin,
      amount,
      numericInvId,
      description,
      password1
    )

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
    await createPendingPayment({
      telegram_id: userId.toString(),
      amount,
      stars,
      inv_id: numericInvId.toString(),
      description,
      bot_name: ctx.botInfo.username,
      language: ctx.from.language_code || 'ru',
      invoice_url: paymentUrl,
      service_type: ModeEnum.TopUpBalance,
      type: TransactionType.MONEY_INCOME,
      metadata: {
        payment_method: 'Robokassa',
        subscription: 'stars',
      },
    })

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã
    await ctx.deleteMessage()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      isRu
        ? `<b>üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} —Ä (${stars}‚≠ê)</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
        : `<b>üíµ Balance top-up for ${amount} RUB (${stars}‚≠ê)</b>\nClick the button below to proceed with payment. After successful payment, stars will be automatically credited to your balance.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä` : `Pay ${amount} RUB`,
                url: paymentUrl,
              },
            ],
          ],
        },
        parse_mode: 'HTML',
      }
    )

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    await ctx.scene.leave()
  } catch (error) {
    console.error('Error in creating top-up payment:', error)
    await ctx.answerCbQuery(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error creating payment. Please try again.'
    )
  }
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
paymentScene.action('back_to_payment', async ctx => {
  const isRu = isRussian(ctx)

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã
  await ctx.deleteMessage()

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  const message = isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?'

  const keyboard = Markup.keyboard([
    [
      Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
      {
        text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
        web_app: {
          url: `https://telegram.org/blog/telegram-stars/${
            isRu ? 'ru' : 'en'
          }?ln=a`,
        },
      },
    ],
    [
      Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
      Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
    ],
  ]).resize()

  await ctx.reply(message, {
    reply_markup: keyboard.reply_markup,
  })
})

paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ctx.match)
  await ctx.scene.enter('menuScene')
})
