import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { handleSelectStars } from '@/handlers/handleSelectStars'
import { starAmounts } from '@/price/helpers/starAmounts'
import { handleBuySubscription } from '@/handlers/handleBuySubscription'
import { ModeEnum } from '@/interfaces/modes'
import { createPendingPayment } from '@/core/supabase/createPendingPayment'
import md5 from 'md5'
import { MERCHANT_LOGIN, TEST_PASSWORD1, isDev } from '@/config'
import { generateShortInvId } from '@/scenes/getRuBillWizard/helper'
import { paymentOptions } from '@/price/priceCalculator'
import { TransactionType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { getSubscriptionInfo } from '@/utils/getSubscriptionInfo'
import { SubscriptionType } from '@/interfaces/payments.interface'

const merchantLogin = MERCHANT_LOGIN
const password1 = process.env.ROBOKASSA_PASSWORD1 || ''
const testPassword1 = TEST_PASSWORD1

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ Robokassa
const useTestMode = isDev

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!merchantLogin) {
  throw new Error('MERCHANT_LOGIN is not defined in environment variables')
}

function generateRobokassaUrl(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string,
  isTest: boolean = useTestMode
): string {
  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const actualPassword = isTest && testPassword1 ? testPassword1 : password1

  console.log('üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è Robokassa', {
    description: 'Generating Robokassa URL',
    merchantLogin,
    outSum,
    invId,
    isTestMode: isTest,
    usingTestPassword: isTest && testPassword1 ? true : false,
    mode: isTest ? '–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú',
  })

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ invId - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
  if (!Number.isInteger(invId) || invId > 2147483647) {
    console.error('‚ùå –û—à–∏–±–∫–∞: InvId –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω', {
      description: 'Error: InvId is incorrect, will be converted',
      originalInvId: invId,
    })
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    invId = Math.floor(invId % 1000000)
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
  if (outSum <= 0) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π', {
      description: 'Error: Sum must be positive',
      originalSum: outSum,
    })
    outSum = Math.abs(outSum) || 1 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 1 –µ—Å–ª–∏ 0
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º description
  if (!description || description.trim() === '') {
    console.warn(
      '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      {
        description: 'Warning: Description is empty, using default',
      }
    )
    description = '–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥'
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const signatureString = `${merchantLogin}:${outSum}:${invId}:${actualPassword}`
  console.log('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
    description: 'Signature string',
    signatureString,
  })

  const signatureValue = md5(signatureString).toUpperCase()

  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL Robokassa
  const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx'

  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const params = new URLSearchParams()

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  params.append('MerchantLogin', merchantLogin)
  params.append('OutSum', outSum.toString())
  params.append('InvId', invId.toString())
  params.append('Description', description)
  params.append('SignatureValue', signatureValue)

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  if (isTest) {
    params.append('IsTest', '1')
  }

  const url = `${baseUrl}?${params.toString()}`

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–π URL
  try {
    const parsedUrl = new URL(url)
    const requiredParams = [
      'MerchantLogin',
      'OutSum',
      'InvId',
      'Description',
      'SignatureValue',
    ]
    const missingParams = []

    for (const param of requiredParams) {
      if (!parsedUrl.searchParams.has(param)) {
        missingParams.push(param)
      }
    }

    if (missingParams.length > 0) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –í URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', {
        description: 'Error: URL is missing required parameters',
        missingParams,
      })
      throw new Error(
        `URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${missingParams.join(', ')}`
      )
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL:', {
      description: 'Error checking URL',
      error,
    })
    throw error
  }

  console.log('‚úÖ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è Robokassa:', {
    message: 'URL generated for Robokassa',
    testMode: isTest,
    paymentUrl: url,
  })

  return url
}

async function generateRobokassaInvoiceId(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): Promise<string> {
  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }
  console.log('üöÄ –ó–∞–ø—É—Å–∫ generateRobokassaInvoiceId', {
    description: 'Starting generateRobokassaInvoiceId',
    merchantLogin,
    outSum,
    invId,
    useTestMode,
  })
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const actualPassword =
      useTestMode && testPassword1 ? testPassword1 : password1

    console.log('üîë –í—ã–±—Ä–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è Robokassa', {
      description: 'Selected password for Robokassa',
      isTestMode: useTestMode,
      usingTestPassword: useTestMode && testPassword1 ? true : false,
    })

    const response = generateRobokassaUrl(
      merchantLogin,
      outSum,
      invId,
      description,
      actualPassword,
      useTestMode // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    )

    return response
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ generateRobokassaInvoiceId:', {
      description: 'Error in generateRobokassaInvoiceId',
      error,
    })
    throw error
  }
}

export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  try {
    logger.info('üöÄ Entering PaymentScene', {
      userId: ctx.from?.id,
      selectedPayment: ctx.session.selectedPayment,
      mode: ctx.session.selectedPayment?.type,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
    if (
      ctx.session.selectedPayment?.type ===
      TransactionType.SUBSCRIPTION_PURCHASE
    ) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionType = ctx.session.subscription as SubscriptionType
      if (!subscriptionType) {
        await ctx.reply('Subscription type not found')
        return
      }

      const subscriptionInfo = getSubscriptionInfo(subscriptionType)
      if (!subscriptionInfo) {
        await ctx.reply('Invalid subscription type')
        return
      }

      const invoiceId = await generateRobokassaInvoiceId(
        merchantLogin,
        subscriptionInfo.price,
        generateShortInvId(ctx.from?.id || 0, subscriptionInfo.stars),
        `Subscription ${subscriptionType}`,
        password1
      )
      const invoiceUrl = `${process.env.PAYMENT_URL}/${invoiceId}`

      await createPendingPayment({
        telegram_id: ctx.from?.id?.toString() || '',
        amount: subscriptionInfo.price,
        stars: subscriptionInfo.stars,
        inv_id: invoiceId,
        description: `Subscription ${subscriptionType}`,
        bot_name: ctx.botInfo.username || 'NeuroBlogger',
        invoice_url: invoiceUrl,
        service_type: ModeEnum.Subscribe,
        type: TransactionType.SUBSCRIPTION_PURCHASE,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
      await ctx.reply(
        isRu
          ? `üí´ –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionInfo.name}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${subscriptionInfo.price} RUB\n‚≠êÔ∏è –ë–æ–Ω—É—Å: ${subscriptionInfo.stars} –∑–≤–µ–∑–¥`
          : `üí´ Subscription ${subscriptionInfo.name}\nüí∞ Price: ${subscriptionInfo.price} RUB\n‚≠êÔ∏è Bonus: ${subscriptionInfo.stars} stars`,
        Markup.inlineKeyboard([
          [Markup.button.url(isRu ? 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' : 'üí≥ Pay', invoiceUrl)],
        ])
      )
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      const amount = ctx.session.selectedPayment?.amount || 0
      const stars = ctx.session.selectedPayment?.stars || 0

      if (!amount || !stars) {
        throw new Error('Invalid payment amount or stars')
      }

      const invId = await generateShortInvId(ctx.from?.id || 0, stars)
      const description = isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' : 'Balance top-up'

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
      const paymentUrl = await generateRobokassaInvoiceId(
        merchantLogin || '',
        amount,
        invId,
        description,
        password1
      )

      await createPendingPayment({
        telegram_id: ctx.from?.id?.toString() || '',
        amount,
        stars,
        type: TransactionType.MONEY_INCOME,
        description,
        bot_name: 'NeuroBlogger',
        service_type: ModeEnum.TopUpBalance,
        inv_id: invId.toString(),
        invoice_url: paymentUrl,
        metadata: {
          payment_method: 'Robokassa',
          subscription: 'stars',
        },
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
      await ctx.reply(
        isRu
          ? `üí∞ –°—É–º–º–∞: ${amount} RUB\n‚≠êÔ∏è –ë–æ–Ω—É—Å: ${stars} –∑–≤–µ–∑–¥`
          : `üí∞ Amount: ${amount} RUB\n‚≠êÔ∏è Bonus: ${stars} stars`,
        Markup.inlineKeyboard([
          [Markup.button.url(isRu ? 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' : 'üí≥ Pay', paymentUrl)],
        ])
      )
    }
  } catch (error) {
    logger.error('‚ùå Error in PaymentScene:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.from?.id,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred while creating the payment. Please try again later.'
    )
  }
})

paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log('CASE 1: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', ctx.match)
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  console.log('CASE 1: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏: subscription', subscription)
  if (subscription) {
    if (subscription === 'neurobase') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'neuromeeting') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'neuroblogger') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'neurotester') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'neurophoto') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'neuromentor') {
      await handleBuySubscription(ctx)
      await ctx.scene.leave()
    } else if (subscription === 'stars') {
      await handleSelectStars({ ctx, isRu, starAmounts })
      await ctx.scene.leave()
    }
  } else {
    await handleSelectStars({ ctx, isRu, starAmounts })
    await ctx.scene.leave()
  }
})

paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ In rubles'], async ctx => {
  console.log('CASE: üí≥ –†—É–±–ª—è–º–∏', ctx.match)
  const isRu = isRussian(ctx)

  if (!ctx.from) {
    throw new Error('User not found')
  }

  if (!ctx.botInfo?.username) {
    throw new Error('Bot username is not defined')
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–µ—Å—Å–∏–∏
  const subscription = ctx.session.subscription

  // –†–∞–∑–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
  // –°–ª—É—á–∞–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
  if (subscription && subscription !== 'stars') {
    try {
      const subscriptionInfo = getSubscriptionInfo(subscription)
      if (!subscriptionInfo) {
        await ctx.reply(
          isRu
            ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞.'
            : 'Unknown subscription type. Please select a subscription again.'
        )
        await ctx.scene.enter(ModeEnum.SubscriptionScene)
        return
      }

      const userId = ctx.from.id
      const invId = await generateShortInvId(
        ctx.from?.id || 0,
        subscriptionInfo.stars
      )
      const description = isRu
        ? `–ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionInfo.name}`
        : `Subscription ${subscriptionInfo.name}`
      const numericInvId = Number(invId)

      if (!merchantLogin || !password1) {
        throw new Error('merchantLogin or password1 is not defined')
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
      const invoiceURL = await generateRobokassaInvoiceId(
        merchantLogin,
        subscriptionInfo.price,
        numericInvId,
        description,
        password1
      )

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
      await createPendingPayment({
        telegram_id: userId.toString(),
        amount: subscriptionInfo.price,
        stars: subscriptionInfo.stars,
        inv_id: numericInvId.toString(),
        description,
        bot_name: ctx.botInfo.username,
        language: ctx.from.language_code || 'ru',
        invoice_url: invoiceURL,
        service_type: ModeEnum.Subscribe,
        type: TransactionType.SUBSCRIPTION_PURCHASE,
        metadata: {
          payment_method: 'Robokassa',
          subscription,
        },
      })

      await ctx.reply(
        isRu
          ? `<b>üíµ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionInfo.name} (${subscriptionInfo.price} —Ä)</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
          : `<b>üíµ Payment for subscription ${subscriptionInfo.name} (${subscriptionInfo.price} RUB)</b>\nClick the button below to proceed with payment. After successful payment, stars will be automatically credited to your balance.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: isRu
                    ? `–û–ø–ª–∞—Ç–∏—Ç—å ${subscriptionInfo.price} —Ä`
                    : `Pay ${subscriptionInfo.price} RUB`,
                  url: invoiceURL,
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        }
      )
    } catch (error) {
      console.error('Error in creating subscription payment:', error)
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : 'Error creating subscription invoice. Please try again.'
      )
    }
  }
  // –°–ª—É—á–∞–π 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å
  else {
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const options = paymentOptions.map(option => {
      const starsNum = parseInt(option.stars)
      return [
        {
          text: isRu
            ? `${option.amount}‚ÇΩ ‚Üí ${option.stars}‚≠ê`
            : `${option.amount}‚ÇΩ ‚Üí ${option.stars}‚≠ê`,
          callback_data: `pay_rub_${option.amount}_${starsNum}`,
        },
      ]
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    options.push([
      {
        text: isRu ? 'üîô –ù–∞–∑–∞–¥' : 'üîô Back',
        callback_data: 'back_to_payment',
      },
    ])

    await ctx.reply(
      isRu
        ? 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:'
        : 'üí∞ Choose the amount to top up in rubles:',
      {
        reply_markup: {
          inline_keyboard: options,
        },
      }
    )

    // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å—É–º–º—ã
    return
  }

  await ctx.scene.leave()
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
paymentScene.action(/pay_rub_(\d+)_(\d+)/, async ctx => {
  if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
    return
  }

  const isRu = isRussian(ctx)

  if (!ctx.from || !ctx.botInfo?.username) {
    await ctx.answerCbQuery('Error: User or bot data missing')
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –∑–≤–µ–∑–¥—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const match = ctx.callbackQuery.data.match(/pay_rub_(\d+)_(\d+)/)
    if (!match) {
      await ctx.answerCbQuery('Invalid data')
      return
    }

    const amount = parseInt(match[1])
    const stars = parseInt(match[2])

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const userId = ctx.from.id
    const invId = await generateShortInvId(ctx.from?.id || 0, stars)
    const description = isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' : 'Balance replenishment'
    const numericInvId = Number(invId)

    if (!merchantLogin || !password1) {
      throw new Error('merchantLogin or password1 is not defined')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
    const invoiceURL = await generateRobokassaInvoiceId(
      merchantLogin,
      amount,
      numericInvId,
      description,
      password1
    )

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
    await createPendingPayment({
      telegram_id: userId.toString(),
      amount,
      stars,
      inv_id: numericInvId.toString(),
      description,
      bot_name: ctx.botInfo.username,
      language: ctx.from.language_code || 'ru',
      invoice_url: invoiceURL,
      service_type: ModeEnum.TopUpBalance,
      type: TransactionType.MONEY_INCOME,
      metadata: {
        payment_method: 'Robokassa',
        subscription: 'stars',
      },
    })

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã
    await ctx.deleteMessage()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      isRu
        ? `<b>üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} —Ä (${stars}‚≠ê)</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
        : `<b>üíµ Balance top-up for ${amount} RUB (${stars}‚≠ê)</b>\nClick the button below to proceed with payment. After successful payment, stars will be automatically credited to your balance.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä` : `Pay ${amount} RUB`,
                url: invoiceURL,
              },
            ],
          ],
        },
        parse_mode: 'HTML',
      }
    )

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    await ctx.scene.leave()
  } catch (error) {
    console.error('Error in creating top-up payment:', error)
    await ctx.answerCbQuery(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error creating payment. Please try again.'
    )
  }
})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
paymentScene.action('back_to_payment', async ctx => {
  const isRu = isRussian(ctx)

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã
  await ctx.deleteMessage()

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  const message = isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?'

  const keyboard = Markup.keyboard([
    [
      Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
      {
        text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
        web_app: {
          url: `https://telegram.org/blog/telegram-stars/${
            isRu ? 'ru' : 'en'
          }?ln=a`,
        },
      },
    ],
    [
      Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
      Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
    ],
  ]).resize()

  await ctx.reply(message, {
    reply_markup: keyboard.reply_markup,
  })
})

paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ctx.match)
  await ctx.scene.enter('menuScene')
})
