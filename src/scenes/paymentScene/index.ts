import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { handleSelectStars } from '@/handlers/handleSelectStars'
import { starAmounts } from '@/price/helpers/starAmounts'
import { handleBuySubscription } from '@/handlers/handleBuySubscription'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { createPendingPayment } from '@/core/supabase/createPendingPayment'
import md5 from 'md5'
import { MERCHANT_LOGIN, PASSWORD1, TEST_PASSWORD1 } from '@/config'

const merchantLogin = MERCHANT_LOGIN
const password1 = PASSWORD1
const testPassword1 = TEST_PASSWORD1

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ Robokassa
const useTestMode = false

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Robokassa
 * –°–æ–∑–¥–∞–µ—Ç ID –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞, –Ω–æ —Å –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω–æ–π
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param amount –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
 * @returns –ö–æ—Ä–æ—Ç–∫–∏–π ID –∑–∞–∫–∞–∑–∞ (–¥–æ 9 —Ü–∏—Ñ—Ä)
 */
function generateShortInvId(userId: string | number, amount: number): number {
  try {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä timestamp
    const timestamp = Date.now() % 100000
    // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999
    const random = Math.floor(Math.random() * 9000) + 1000
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return parseInt(`${timestamp}${random}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ inv_id', {
      description: 'Error generating short inv_id',
      error,
      userId,
      amount,
    })
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 1 –º–∏–ª–ª–∏–æ–Ω–∞
    return Math.floor(Math.random() * 1000000) + 1
  }
}

function generateRobokassaUrl(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string,
  isTest: boolean = useTestMode
): string {
  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const actualPassword = isTest && testPassword1 ? testPassword1 : password1

  console.log('üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è Robokassa', {
    description: 'Generating Robokassa URL',
    merchantLogin,
    outSum,
    invId,
    isTestMode: isTest,
    usingTestPassword: isTest && testPassword1 ? true : false,
    mode: isTest ? '–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú',
  })

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ invId - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
  if (!Number.isInteger(invId) || invId > 2147483647) {
    console.error('‚ùå –û—à–∏–±–∫–∞: InvId –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω', {
      description: 'Error: InvId is incorrect, will be converted',
      originalInvId: invId,
    })
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    invId = Math.floor(invId % 1000000)
  }

  const signatureString = `${merchantLogin}:${outSum}:${invId}:${actualPassword}`
  console.log('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
    description: 'Signature string',
    signatureString,
  })

  const signatureValue = md5(signatureString).toUpperCase()

  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL Robokassa
  const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx'

  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ - –í–ê–ñ–ù–û: –±–µ–∑ ResultUrl2
  const params = new URLSearchParams({
    MerchantLogin: merchantLogin,
    OutSum: outSum.toString(),
    InvId: invId.toString(),
    Description: description,
    SignatureValue: signatureValue,
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  if (isTest) {
    params.append('IsTest', '1')
  }

  const url = `${baseUrl}?${params.toString()}`
  console.log('‚úÖ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è Robokassa:', {
    message: 'URL generated for Robokassa',
    testMode: isTest,
    paymentUrl: url,
  })

  return url
}

async function getInvoiceId(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): Promise<string> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ getInvoiceId', {
    description: 'Starting getInvoiceId',
    merchantLogin,
    outSum,
    invId,
    useTestMode,
  })
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const actualPassword =
      useTestMode && testPassword1 ? testPassword1 : password1

    console.log('üîë –í—ã–±—Ä–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è Robokassa', {
      description: 'Selected password for Robokassa',
      isTestMode: useTestMode,
      usingTestPassword: useTestMode && testPassword1 ? true : false,
    })

    const response = generateRobokassaUrl(
      merchantLogin,
      outSum,
      invId,
      description,
      actualPassword,
      useTestMode // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    )

    return response
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getInvoiceId:', {
      description: 'Error in getInvoiceId',
      error,
    })
    throw error
  }
}

export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  try {
    console.log('PaymentScene Enter:', {
      subscription: ctx.session.subscription,
      selectedPayment: ctx.session.selectedPayment,
    })

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ selectedPayment, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (
      ctx.session.selectedPayment?.amount &&
      ctx.session.selectedPayment?.stars
    ) {
      const { amount, stars, subscription } = ctx.session.selectedPayment

      if (!ctx.from) {
        throw new Error('User not found')
      }

      if (!ctx.botInfo?.username) {
        throw new Error('Bot username is not defined')
      }

      if (!merchantLogin || !password1) {
        throw new Error('merchantLogin or password1 is not defined')
      }

      const userId = ctx.from.id
      const invId = generateShortInvId(userId, amount)
      const description = isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' : 'Balance replenishment'
      const numericInvId = Number(invId)

      // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
      const invoiceURL = await getInvoiceId(
        merchantLogin,
        amount,
        numericInvId,
        description,
        password1
      )

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
      await createPendingPayment({
        telegram_id: userId.toString(),
        amount,
        stars,
        inv_id: numericInvId.toString(),
        description,
        bot_name: ctx.botInfo.username,
        language: ctx.from.language_code || 'ru',
        invoice_url: invoiceURL,
        metadata: {
          payment_method: 'Robokassa',
          subscription,
        },
      })

      await ctx.reply(
        isRu
          ? `<b>üíµ –û–ø–ª–∞—Ç–∞ ${amount} —Ä</b>
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
          : `<b>üíµ Payment ${amount} RUB</b>
Click the button below to proceed with payment. After successful payment, stars will be automatically credited to your balance.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä` : `Pay ${amount} RUB`,
                  url: invoiceURL,
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        }
      )
      return ctx.scene.leave()
    }

    const message = isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?'

    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
        Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
      ],
    ]).resize()

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
    })
  } catch (error) {
    console.error('Error in paymentScene.enter:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'An error occurred. Please try again.'
    )
  }
})

paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log('CASE 1: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', ctx.match)
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  console.log('CASE 1: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏: subscription', subscription)
  if (subscription) {
    if (subscription === 'neurobase') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'neuromeeting') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'neuroblogger') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'neurotester') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'neurophoto') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'neuromentor') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'stars') {
      await handleSelectStars({ ctx, isRu, starAmounts })
      await ctx.scene.leave()
    }
  } else {
    await handleSelectStars({ ctx, isRu, starAmounts })
    await ctx.scene.leave()
  }
})

paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ In rubles'], async ctx => {
  console.log('CASE: üí≥ –†—É–±–ª—è–º–∏', ctx.match)
  const isRu = isRussian(ctx)

  if (!ctx.from) {
    throw new Error('User not found')
  }

  if (!ctx.botInfo?.username) {
    throw new Error('Bot username is not defined')
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const subscription = ctx.session.subscription
  let amount = 0
  let stars = 0

  if (subscription === 'neurobase') {
    amount = 2999
    stars = 1303
  } else if (subscription === 'neurophoto') {
    amount = 1110
    stars = 476
  } else if (subscription === 'neuroblogger') {
    amount = 75000
    stars = 32608
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.'
        : 'Please select a subscription plan first.'
    )
    await ctx.scene.enter('menuScene')
    return
  }

  try {
    const userId = ctx.from.id
    const invId = generateShortInvId(userId, amount)
    const description = isRu ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' : 'Balance replenishment'
    const numericInvId = Number(invId)

    if (!merchantLogin || !password1) {
      throw new Error('merchantLogin or password1 is not defined')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
    const invoiceURL = await getInvoiceId(
      merchantLogin,
      amount,
      numericInvId,
      description,
      password1
    )

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
    await createPendingPayment({
      telegram_id: userId.toString(),
      amount,
      stars,
      inv_id: numericInvId.toString(),
      description,
      bot_name: ctx.botInfo.username,
      language: ctx.from.language_code || 'ru',
      invoice_url: invoiceURL,
      metadata: {
        payment_method: 'Robokassa',
        subscription,
      },
    })

    await ctx.reply(
      isRu
        ? `<b>üíµ –û–ø–ª–∞—Ç–∞ ${amount} —Ä</b>
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
        : `<b>üíµ Payment ${amount} RUB</b>
Click the button below to proceed with payment. After successful payment, stars will be automatically credited to your balance.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä` : `Pay ${amount} RUB`,
                url: invoiceURL,
              },
            ],
          ],
        },
        parse_mode: 'HTML',
      }
    )
  } catch (error) {
    console.error('Error in creating payment:', error)
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error creating invoice. Please try again.'
    )
  }

  await ctx.scene.leave()
})

paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ctx.match)
  await ctx.scene.enter('menuScene')
})
