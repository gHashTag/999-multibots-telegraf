import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'

import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { PaymentType } from '@/interfaces/payments.interface'
import { shouldShowRubles } from '@/core/bot/shouldShowRubles'

/**
 * –°—Ç–∞—Ä–∞—è —Å—Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 * –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ó–≤–µ–∑–¥—ã –∏–ª–∏ –†—É–±–ª–∏).
 */
export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  logger.info(`[${ModeEnum.PaymentScene}] Entering scene.`, {
    telegram_id: ctx.from?.id,
    botInfo: ctx.botInfo, // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    session_subscription: ctx.session.subscription,
  })
  const isRu = isRussian(ctx)
  const showRublesButton = shouldShowRubles(ctx) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä

  try {
    const message = isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' : 'Select payment method:'

    const buttons = [
      [Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars')], // –ö–Ω–æ–ø–∫–∞ –ó–≤–µ–∑–¥–∞–º–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    ]

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –†—É–±–ª—è–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–µ–ª–ø–µ—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç
    if (showRublesButton) {
      buttons[0].push(Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'))
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–°–ø—Ä–∞–≤–∫–∞, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    buttons.push([
      Markup.button.webApp(
        isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
        `https://telegram.org/blog/telegram-stars/${isRu ? 'ru' : 'en'}?ln=a`
      ),
    ])
    buttons.push([
      Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
    ])

    const keyboard = Markup.keyboard(buttons).resize()

    await ctx.reply(message, { reply_markup: keyboard.reply_markup })
  } catch (error: any) {
    logger.error(`‚ùå [${ModeEnum.PaymentScene}] Error in enter:`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(isRu ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : 'An error occurred.')
    await ctx.scene.leave()
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –ó–≤–µ–∑–¥–∞–º–∏
paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Stars. Entering StarPaymentScene.`,
    { telegram_id: ctx.from?.id }
  )
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ)
  const intentType = ctx.session.selectedPayment?.type
  const paymentInfo = ctx.session.selectedPayment
  if (intentType === PaymentType.MONEY_INCOME && paymentInfo) {
    await ctx.scene.enter(ModeEnum.StarPaymentScene, { paymentInfo })
  } else {
    await ctx.scene.enter(ModeEnum.StarPaymentScene)
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–†—É–±–ª—è–º–∏" - –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù
// paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ Rubles'], async ctx => { ... });

// –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(`[${ModeEnum.PaymentScene}] Leaving scene via Main Menu button`, {
    telegram_id: ctx.from?.id,
  })
  await ctx.scene.enter(ModeEnum.MainMenu)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
paymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.PaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    text: (ctx.message as any)?.text,
  })

  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
  const replyText = isRu
    ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
    : 'Please select ‚≠êÔ∏è Stars or return to the üè† Main menu.'

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å–æ –ó–≤–µ–∑–¥–∞–º–∏ –∏ –ú–µ–Ω—é
  const buttons = [
    [Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars')],
    [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')],
  ]
  const keyboard = Markup.keyboard(buttons).resize()

  await ctx.reply(replyText, { reply_markup: keyboard.reply_markup })
})

export default paymentScene
