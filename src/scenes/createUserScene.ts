import { logger } from '@/utils/logger'
import { MyTextMessageContext } from '@/interfaces'
import { Scenes } from 'telegraf'
import { createUser, getReferalsCountAndUserData } from '@/core/supabase'

import { getPhotoUrl } from '@/handlers/getPhotoUrl'

import { isRussian } from '@/helpers/language'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import {
  extractInviteCodeFromContext,
  extractPromoFromContext,
} from '@/helpers/contextUtils'
import { processPromoLink } from '@/helpers/promoHelper'

const SUBSCRIBE_CHANNEL_ID = '@neuro_blogger_pulse'

const createUserStep = async (ctx: MyTextMessageContext) => {
  console.log('CASE:createUserStep', ctx.from)

  const {
    username,
    id: telegram_id,
    first_name,
    last_name,
    is_bot,
    language_code,
  } = ctx.from

  const finalUsername = username || first_name || telegram_id.toString()
  const photo_url = getPhotoUrl(ctx, 1)

  // Extract invite code using the helper function
  const inviteCode = extractInviteCodeFromContext(ctx)
  ctx.session.inviteCode = inviteCode

  // Extract promo information using the helper function
  const promoInfo = extractPromoFromContext(ctx)

  // Log promo detection
  if (promoInfo?.isPromo) {
    logger.info('üéÅ [CreateUserScene] Promo link detected', {
      telegram_id: telegram_id.toString(),
      promoParameter: promoInfo.parameter,
      function: 'createUserStep',
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—É /start
  const botNameMatch = ctx.message.text.match(
    /https:\/\/t\.me\/([a-zA-Z0-9_]+)\?start=(\d+)/
  )
  console.log('botNameMatch', botNameMatch)
  let botName = ''
  let startNumber = ''
  console.log('botName', botName)
  console.log('startNumber', startNumber)

  if (botNameMatch) {
    botName = botNameMatch[1]
    startNumber = botNameMatch[2]
  } else if (ctx.message.text.startsWith('/start')) {
    console.log(
      'CASE: üîÑ –ö–æ–º–∞–Ω–¥–∞ /start. botInfo.username:',
      ctx.botInfo.username
    )
    console.log('ctx.message.text', ctx.message.text)
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ —Å—Å—ã–ª–∫–∏
    botName = ctx.botInfo.username
    const parts = ctx.message.text.split(' ')
    console.log('parts', parts)
    startNumber = parts.length > 1 ? parts[1] : ''
  }

  // Use extracted invite code if available, otherwise use legacy extraction
  // Only set referral code if it's not a promo link AND it's a numeric code
  if (!ctx.session.inviteCode && startNumber && !promoInfo?.isPromo) {
    // Check if startNumber is numeric (referral code) and not "promo"
    if (/^\d+$/.test(startNumber)) {
      ctx.session.inviteCode = startNumber
    }
  }

  const userPhotoUrl = await getPhotoUrl(ctx, ctx.from?.id || 0)
  const botPhotoUrl = await photo_url
  const userData = {
    username: finalUsername,
    telegram_id: telegram_id.toString(),
    first_name: first_name || null,
    last_name: last_name || null,
    is_bot: is_bot || false,
    language_code: language_code || 'en',
    photo_url: userPhotoUrl || botPhotoUrl,
    chat_id: ctx.chat?.id || null,
    mode: 'clean',
    model: 'gpt-4-turbo',
    count: 0,
    aspect_ratio: '9:16',
    inviter: ctx.session.inviter || null,
    bot_name: botName,
  }

  const [wasCreated] = await createUser(userData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
  if (wasCreated) {
    // –ï—Å–ª–∏ –¥–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    await ctx.reply(
      isRussian(ctx)
        ? '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        : '‚úÖ Avatar created successfully! Welcome!'
    )

    // Handle promo logic (new users only)
    if (promoInfo?.isPromo) {
      try {
        const promoResult = await processPromoLink(
          telegram_id.toString(),
          promoInfo.parameter || 'neurovideo_promo',
          ctx.botInfo.username
        )

        if (promoResult) {
          const isRu = isRussian(ctx)
          const message = isRu
            ? 'üéÅ –ü—Ä–æ–º–æ-–±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–µ–∑–¥—ã!'
            : 'üéÅ Promo bonus received! You got free stars!'

          await ctx.reply(message)

          // Notify admin channel about promo usage
          try {
            await ctx.telegram.sendMessage(
              SUBSCRIBE_CHANNEL_ID,
              `üéÅ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–º–æ-–±–æ–Ω—É—Å! –ü–∞—Ä–∞–º–µ—Ç—Ä: ${promoInfo.parameter || 'default'}`
            )
          } catch (notifyError) {
            logger.warn(
              '‚ö†Ô∏è [CreateUserScene] Failed to notify admin channel about promo usage',
              {
                telegram_id: telegram_id.toString(),
                error:
                  notifyError instanceof Error
                    ? notifyError.message
                    : String(notifyError),
              }
            )
          }
        } else {
          const isRu = isRussian(ctx)
          const message = isRu
            ? '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ-–±–æ–Ω—É—Å!'
            : '‚ùå You have already received this promo bonus!'

          await ctx.reply(message)
        }
      } catch (promoError) {
        logger.error('‚ùå [CreateUserScene] Error processing promo link', {
          telegram_id: telegram_id.toString(),
          promoParameter: promoInfo.parameter,
          error:
            promoError instanceof Error
              ? promoError.message
              : String(promoError),
        })

        await ctx.reply(
          isRussian(ctx)
            ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ-—Å—Å—ã–ª–∫–∏.'
            : '‚ùå An error occurred while processing the promo link.'
        )
      }
    }

    // Handle referral logic (existing code)
    if (ctx.session.inviteCode) {
      console.log('CASE: ctx.session.inviteCode', ctx.session.inviteCode)
      const { count, userData } = await getReferalsCountAndUserData(
        ctx.session.inviteCode.toString()
      )

      ctx.session.inviter = userData.user_id

      if (ctx.session.inviteCode) {
        try {
          await ctx.telegram.sendMessage(
            ctx.session.inviteCode,
            isRussian(ctx)
              ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`
              : `üîó New user @${finalUsername} registered using your link!`
          )
          logger.info({
            message:
              '‚úâÔ∏è [CreateUserScene] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            telegramId: telegram_id.toString(),
            inviterId: ctx.session.inviteCode,
            step: 'inviter_notification_sent',
          })
        } catch (inviterNotifyError) {
          if (
            inviterNotifyError instanceof Error &&
            'code' in inviterNotifyError &&
            inviterNotifyError.code === 403
          ) {
            logger.warn({
              message:
                '‚ö†Ô∏è [CreateUserScene] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–º)',
              telegramId: telegram_id.toString(),
              inviterId: ctx.session.inviteCode,
              botName: ctx.botInfo.username,
              error: inviterNotifyError.message,
              step: 'inviter_notification_failed_403',
            })
          } else {
            logger.error({
              message:
                '‚ùå [CreateUserScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É',
              telegramId: telegram_id.toString(),
              inviterId: ctx.session.inviteCode,
              error:
                inviterNotifyError instanceof Error
                  ? inviterNotifyError.message
                  : String(inviterNotifyError),
              step: 'inviter_notification_error',
            })
          }
        }

        await ctx.telegram.sendMessage(
          SUBSCRIBE_CHANNEL_ID,
          `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è. –ü–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ –æ—Ç: @${userData.username}`
        )
        logger.info({
          message:
            'üì¢ [CreateUserScene] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª',
          telegramId: telegram_id.toString(),
          channel: SUBSCRIBE_CHANNEL_ID,
          inviterUsername: userData.username,
          step: 'admin_notification_sent_referral',
        })
      }
    } else {
      console.log('CASE: ctx.session.inviteCode not exists')

      try {
        const notificationMessage = promoInfo?.isPromo
          ? `üéÅ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ: @${finalUsername} (—á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ-—Å—Å—ã–ª–∫—É)`
          : `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ: @${finalUsername}`

        await ctx.telegram.sendMessage(
          SUBSCRIBE_CHANNEL_ID,
          notificationMessage
        )
        logger.info({
          message:
            'üì¢ [CreateUserScene] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª',
          telegramId: telegram_id.toString(),
          channel: SUBSCRIBE_CHANNEL_ID,
          step: 'admin_notification_sent_no_referral',
          isPromo: promoInfo?.isPromo || false,
        })
      } catch (notifyError) {
        if (
          notifyError instanceof Error &&
          'code' in notifyError &&
          notifyError.code === 403
        ) {
          logger.warn({
            message:
              '‚ö†Ô∏è [CreateUserScene] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤ (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞) (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)',
            telegramId: telegram_id.toString(),
            channel: SUBSCRIBE_CHANNEL_ID,
            botName: ctx.botInfo.username,
            error: notifyError.message,
            step: 'admin_notification_no_referral_failed_403',
          })
        } else {
          logger.error({
            message:
              '‚ùå [CreateUserScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤ (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞)',
            telegramId: telegram_id.toString(),
            channel: SUBSCRIBE_CHANNEL_ID,
            error:
              notifyError instanceof Error
                ? notifyError.message
                : String(notifyError),
            step: 'admin_notification_no_referral_error',
          })
        }
      }
    }
  } else {
    // User already exists - check if they're accessing via promo link
    if (promoInfo?.isPromo) {
      try {
        const promoResult = await processPromoLink(
          telegram_id.toString(),
          promoInfo.parameter || 'neurovideo_promo',
          ctx.botInfo.username
        )

        if (promoResult) {
          const isRu = isRussian(ctx)
          const message = isRu
            ? 'üéÅ –ü—Ä–æ–º–æ-–±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–µ–∑–¥—ã!'
            : 'üéÅ Promo bonus received! You got free stars!'

          await ctx.reply(message)
        } else {
          const isRu = isRussian(ctx)
          const message = isRu
            ? '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ-–±–æ–Ω—É—Å!'
            : '‚ùå You have already received this promo bonus!'

          await ctx.reply(message)
        }
      } catch (promoError) {
        logger.error(
          '‚ùå [CreateUserScene] Error processing promo link for existing user',
          {
            telegram_id: telegram_id.toString(),
            promoParameter: promoInfo.parameter,
            error:
              promoError instanceof Error
                ? promoError.message
                : String(promoError),
          }
        )

        await ctx.reply(
          isRussian(ctx)
            ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ-—Å—Å—ã–ª–∫–∏.'
            : '‚ùå An error occurred while processing the promo link.'
        )
      }
    }
  }

  return ctx.scene.enter(ModeEnum.StartScene)
}

export const createUserScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.CreateUserScene,
  createUserStep
)
