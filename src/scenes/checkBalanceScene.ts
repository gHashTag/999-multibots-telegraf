import { Scenes, Telegraf, Markup } from 'telegraf'
import { WizardContext, WizardScene } from 'telegraf/scenes'
import { MyContext } from '@/interfaces'

import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import {
  ModeEnum,
  CostCalculationParams,
  CostCalculationResult,
} from '@/interfaces/modes'
import { starCost, SYSTEM_CONFIG } from '@/price/constants'
import { logger } from '@/utils/logger'
import {
  getUserDetails,
  UserDetailsResult,
} from '@/core/supabase/getUserDetails'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'
import { getTranslation } from '@/core/supabase/getTranslation'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export interface UserStatus {
  stars: number // –ë–∞–ª–∞–Ω—Å
  level: number
  subscriptionType: SubscriptionType | null // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (null –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
  isSubscriptionActive: boolean // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  isExist: boolean // –ù–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}

export function calculateCostInStars(costInDollars: number): number {
  return costInDollars / starCost
}

export type CostCalculationParamsInternal = CostCalculationParams

type BaseCosts = {
  [key in ModeEnum | 'neuro_photo_2']?: number
}

export const BASE_COSTS: BaseCosts = {
  [ModeEnum.NeuroPhoto]: 0.08,
  [ModeEnum.NeuroPhotoV2]: 0.14,
  [ModeEnum.NeuroAudio]: 0.12,
  [ModeEnum.ImageToPrompt]: 0.03,
  [ModeEnum.Avatar]: 0,
  [ModeEnum.ChatWithAvatar]: 0,
  [ModeEnum.SelectModel]: 0,
  [ModeEnum.SelectAiTextModel]: 0,
  [ModeEnum.Voice]: 0.9,
  [ModeEnum.TextToSpeech]: 0.12,
  [ModeEnum.ImageToVideo]: 0,
  [ModeEnum.TextToVideo]: 0,
  [ModeEnum.TextToImage]: 0.08,
  [ModeEnum.LipSync]: 0.9,
  [ModeEnum.VoiceToText]: 0.08,
  [ModeEnum.DigitalAvatarBody]: 0.5,
  [ModeEnum.DigitalAvatarBodyV2]: 0.7,
}

export type CostValue = number | ((steps: number) => number)
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞

export function calculateModeCost(
  params: CostCalculationParams
): CostCalculationResult {
  const { mode, steps, numImages = 1 } = params

  try {
    let stars = 0

    let normalizedMode = mode
    if (mode === 'neuro_photo_2') {
      normalizedMode = ModeEnum.NeuroPhotoV2
      logger.info({
        message: 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–∏–∞—Å —Ä–µ–∂–∏–º–∞',
        description: 'Mode alias used',
        originalMode: mode,
        normalizedMode,
      })
    }

    const baseCostInDollars = BASE_COSTS[normalizedMode as keyof BaseCosts]

    if (baseCostInDollars === undefined) {
      logger.error({
        message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º',
        description: 'Unknown mode in cost calculation',
        mode,
        normalizedMode,
      })
      stars = 0
    } else {
      // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å —à–∞–≥–∞–º–∏
      if (
        (normalizedMode === ModeEnum.DigitalAvatarBody ||
          normalizedMode === ModeEnum.DigitalAvatarBodyV2) &&
        steps
      ) {
        // –ü—Ä–∏–º–µ—Ä: —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∞–≥–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É)
        // –î–æ–ø—É—Å—Ç–∏–º, –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞ 1 —à–∞–≥
        stars = (baseCostInDollars / starCost) * steps * numImages
      } else {
        stars = (baseCostInDollars / starCost) * numImages
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    if (mode === ModeEnum.VoiceToText) {
      stars = 5
    }

    stars = parseFloat(stars.toFixed(2))
    const dollars = parseFloat((stars * starCost).toFixed(2))
    const rubles = parseFloat((dollars * SYSTEM_CONFIG.interestRate).toFixed(2))

    return { stars, dollars, rubles }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Error during cost calculation',
      error: error instanceof Error ? error.message : 'Unknown error',
      mode,
      steps,
      numImages,
    })
    throw error
  }
}

export const modeCosts: Record<string, number | ((param?: any) => number)> = {
  [ModeEnum.DigitalAvatarBody]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBody, steps }).stars,
  [ModeEnum.DigitalAvatarBodyV2]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBodyV2, steps }).stars,
  [ModeEnum.NeuroPhoto]: calculateModeCost({ mode: ModeEnum.NeuroPhoto }).stars,
  [ModeEnum.NeuroPhotoV2]: calculateModeCost({ mode: ModeEnum.NeuroPhotoV2 })
    .stars,
  [ModeEnum.NeuroAudio]: calculateModeCost({ mode: ModeEnum.NeuroAudio }).stars,
  neuro_photo_2: calculateModeCost({ mode: 'neuro_photo_2' }).stars,
  [ModeEnum.ImageToPrompt]: calculateModeCost({ mode: ModeEnum.ImageToPrompt })
    .stars,
  [ModeEnum.Avatar]: calculateModeCost({ mode: ModeEnum.Avatar }).stars,
  [ModeEnum.ChatWithAvatar]: calculateModeCost({
    mode: ModeEnum.ChatWithAvatar,
  }).stars,
  [ModeEnum.SelectModel]: calculateModeCost({ mode: ModeEnum.SelectModel })
    .stars,
  [ModeEnum.SelectAiTextModel]: calculateModeCost({
    mode: ModeEnum.SelectAiTextModel,
  }).stars,
  [ModeEnum.Voice]: calculateModeCost({ mode: ModeEnum.Voice }).stars,
  [ModeEnum.TextToSpeech]: calculateModeCost({ mode: ModeEnum.TextToSpeech })
    .stars,
  [ModeEnum.ImageToVideo]: calculateModeCost({ mode: ModeEnum.ImageToVideo })
    .stars,
  [ModeEnum.TextToVideo]: calculateModeCost({ mode: ModeEnum.TextToVideo })
    .stars,
  [ModeEnum.TextToImage]: calculateModeCost({ mode: ModeEnum.TextToImage })
    .stars,
  [ModeEnum.LipSync]: calculateModeCost({ mode: ModeEnum.LipSync }).stars,
  [ModeEnum.VoiceToText]: calculateModeCost({ mode: ModeEnum.VoiceToText })
    .stars,
}
// –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
export const minCost = Math.min(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const maxCost = Math.max(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é getCostValue
function getCostValue(cost: number | ((param?: any) => number)): number {
  return typeof cost === 'function' ? cost() : cost
}

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–ª–∞—Ç–Ω—É—é —Å—Ü–µ–Ω—É.
 */
export const checkBalanceScene = new WizardScene<MyContext>(
  ModeEnum.CheckBalanceScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const mode = (ctx.wizard.state as any)?.mode as ModeEnum

    if (!mode) {
      logger.warn({
        message: '[CheckBalanceScene] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∂–∏–º (mode) –≤ state. –í—ã—Ö–æ–¥.',
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'check_mode_state',
      })
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTranslation –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      const { translation: errorMsg } = await getTranslation({
        key: 'errors.missingMode',
        ctx,
        bot_name: ctx.botInfo.username,
      })
      await ctx.reply(errorMsg || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Ä–µ–∂–∏–º –Ω–µ —É–∫–∞–∑–∞–Ω.')
      return ctx.scene.leave()
    }

    logger.info({
      message: `[CheckBalanceScene] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'entry',
      mode,
      state: ctx.wizard.state,
    })

    try {
      // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
      logger.info({
        message: `[CheckBalanceScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'fetching_user_data',
      })

      const userDetails: UserDetailsResult = await getUserDetails(telegramId)

      logger.info({
        message: `[CheckBalanceScene] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'user_data_fetched',
        userExists: userDetails.isExist,
        subscriptionActive: userDetails.isSubscriptionActive,
        subscriptionType: userDetails.subscriptionType,
        stars: userDetails.stars,
      })

      // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
      if (!userDetails.isExist) {
        logger.warn({
          message: '[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –í—ã—Ö–æ–¥.',
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'check_user_existence',
        })
        return ctx.scene.enter(ModeEnum.StartScene)
      }

      // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
      if (!userDetails.isSubscriptionActive) {
        logger.warn({
          message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –í—ã—Ö–æ–¥.`,
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'check_subscription',
          subscriptionType: userDetails.subscriptionType,
        })
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTranslation –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        const { translation: subMsg } = await getTranslation({
          key: 'scenes.checkBalance.subscriptionInactive', // –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞
          ctx,
          bot_name: ctx.botInfo.username,
        })
        await ctx.reply(subMsg || '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.')
        return ctx.scene.enter(ModeEnum.StartScene)
      } else {
        logger.info({
          message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞`,
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'check_subscription',
          subscriptionType: userDetails.subscriptionType,
        })
      }

      // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
      const currentBalance = userDetails.stars
      const cost = modeCosts[mode] || 0
      const costValue = getCostValue(cost)

      logger.info({
        message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'balance_check',
        mode,
        cost: costValue,
        balance: currentBalance,
        hasEnoughBalance: currentBalance >= costValue,
      })

      // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
      if (costValue > 0) {
        logger.info({
          message: `[CheckBalanceScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ`,
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'send_balance_message',
          balance: currentBalance,
          cost: costValue,
          isRu,
        })
        await sendBalanceMessage(
          ctx, // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
          currentBalance,
          costValue,
          isRu,
          ctx.botInfo.username
        )
      }

      // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
      if (currentBalance < costValue) {
        logger.warn({
          message: `[CheckBalanceScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í—ã—Ö–æ–¥.`,
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'insufficient_balance',
          balance: currentBalance,
          cost: costValue,
        })
        await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
        logger.info({
          message: `[CheckBalanceScene] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤`,
          telegramId,
          function: 'checkBalanceScene.enter',
          step: 'leaving_after_insufficient',
        })
        return ctx.scene.leave()
      }

      // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
      logger.info({
        message: `[CheckBalanceScene] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'access_granted',
        mode,
        cost: costValue,
        balance: currentBalance,
        result: 'access_granted',
      })

      // --- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–•–û–î–ê –í –¶–ï–õ–ï–í–£–Æ –°–¶–ï–ù–£ ---
      await enterTargetScene(ctx, async () => {}, mode, costValue) // –í—ã–∑—ã–≤–∞–µ–º enterTargetScene
    } catch (error) {
      logger.error({
        message: '[CheckBalanceScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞',
        telegramId,
        function: 'checkBalanceScene.enter',
        error: error,
        stack: (error as Error).stack,
      })
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTranslation –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      const { translation: genericErrorMsg } = await getTranslation({
        key: 'errors.generic', // –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞
        ctx,
        bot_name: ctx.botInfo.username,
      })
      await ctx.reply(genericErrorMsg || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')
      return ctx.scene.leave()
    }
  }
)

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ middleware –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –æ–ø–ª–∞—Ç—ã.
 *
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param next –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è middleware (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã/—Å—Ü–µ–Ω—ã)
 * @param mode –†–µ–∂–∏–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ
 * @param cost –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö
 */
export const enterTargetScene = async (
  ctx: MyContext,
  next: () => Promise<void>, // next —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  mode: ModeEnum,
  cost: number
) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  const isRu = ctx.from?.language_code === 'ru'
  const username = ctx.from?.username
  const botUsername = ctx.botInfo.username

  logger.info({
    message: `[EnterTargetScene] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É: ${mode}`,
    telegramId,
    username,
    mode,
    cost,
    function: 'enterTargetScene',
  })

  try {
    const userDetails: UserDetailsResult = await getUserDetails(telegramId)

    if (!userDetails.isExist) {
      logger.warn({
        message: '[EnterTargetScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.',
        telegramId,
        function: 'enterTargetScene',
      })
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      return ctx.scene.enter(ModeEnum.StartScene)
    }

    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: '[EnterTargetScene] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.',
        telegramId,
        subscriptionType: userDetails.subscriptionType,
        function: 'enterTargetScene',
      })
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTranslation –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
      const { translation: subMsg } = await getTranslation({
        key: 'scenes.checkBalance.subscriptionInactive', // –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞
        ctx,
        bot_name: botUsername,
      })
      await ctx.reply(subMsg || '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.')
      return ctx.scene.enter(ModeEnum.StartScene)
    }

    const currentBalance = userDetails.stars

    if (currentBalance < cost) {
      logger.warn({
        message: '[EnterTargetScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.',
        telegramId,
        currentBalance,
        cost,
        mode,
        function: 'enterTargetScene',
      })
      await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
      return ctx.scene.leave()
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å > 0
    if (cost > 0) {
      logger.info({
        message: `[EnterTargetScene] –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è ${cost} –∑–≤–µ–∑–¥`,
        telegramId,
        username,
        currentBalance,
        cost,
        targetScene: mode,
        function: 'enterTargetScene',
      })

      const updatedBalance = await updateUserBalance(telegramId, -cost)

      if (updatedBalance === null) {
        logger.error({
          message:
            '[EnterTargetScene] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.',
          telegramId,
          username,
          cost,
          targetScene: mode,
          function: 'enterTargetScene',
        })

        const { translation: errorMsg } = await getTranslation({
          key: 'errors.balanceUpdateFailed',
          ctx,
          bot_name: botUsername,
        })
        await ctx.reply(
          errorMsg || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.'
        )
        return ctx.scene.leave()
      }

      logger.info({
        message: `[EnterTargetScene] –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã`,
        telegramId,
        username,
        balanceBefore: currentBalance,
        balanceAfter: updatedBalance,
        cost,
        targetScene: mode,
        function: 'enterTargetScene',
      })
    }

    logger.info({
      message: `[EnterTargetScene] –í—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É ${mode}`,
      telegramId,
      username,
      mode,
      cost,
      function: 'enterTargetScene',
    })

    await ctx.scene.enter(mode, {
      ...(ctx.scene.state || {}),
      cost,
    })
  } catch (error) {
    logger.error({
      message: '[EnterTargetScene] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É',
      telegramId,
      username,
      mode,
      error: error,
      stack: (error as Error).stack,
      function: 'enterTargetScene',
    })
    const { translation: genericErrorMsg } = await getTranslation({
      key: 'errors.generic',
      ctx,
      bot_name: botUsername,
    })
    await ctx.reply(genericErrorMsg || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')
    await ctx.scene.leave()
  }
}
