import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { getUserBalance } from '@/core/supabase'
import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
  calculateModeCost,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/price/helpers/modelsCost'

export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  'check_balance_scene'
)

checkBalanceScene.enter(async ctx => {
  logger.info('üíµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞', {
    description: 'Entering balance check scene',
    telegram_id: ctx.from?.id,
    mode: ctx.session.mode,
    selected_model: ctx.session.selected_model,
    current_scene: ctx.scene.current?.id,
    full_session_state: {
      mode: ctx.session?.mode,
      selectedModel: ctx.session?.selected_model,
      targetScene: ctx.session?.targetScene,
      memory: ctx.session?.memory,
      email: ctx.session?.email,
      prompt: ctx.session?.prompt,
      selectedSize: ctx.session?.selectedSize,
      userModel: ctx.session?.userModel,
      numImages: ctx.session?.numImages,
      attempts: ctx.session?.attempts,
      videoModel: ctx.session?.videoModel,
      imageUrl: ctx.session?.imageUrl,
      videoUrl: ctx.session?.videoUrl,
      audioUrl: ctx.session?.audioUrl,
      amount: ctx.session?.amount,
      subscription: ctx.session?.subscription,
    },
  })

  const isRu = ctx.from?.language_code === 'ru'
  const { telegramId } = getUserInfo(ctx)
  const currentBalance = await getUserBalance(telegramId, ctx.botInfo.username)
  const mode = ctx.session.mode as ModeEnum

  logger.info('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞:', {
    description: 'State before balance check',
    telegram_id: ctx.from?.id,
    mode: mode,
    selected_model: ctx.session.selected_model,
    current_balance: currentBalance,
    session_trace: {
      previous_mode: ctx.session?.mode,
      previous_model: ctx.session?.selected_model,
      previous_scene: ctx.scene?.current?.id,
      target_scene: ctx.session?.targetScene,
    },
  })

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const normalizedMode = mode

  logger.info('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏', {
    description: 'Calculating operation cost',
    telegram_id: ctx.from?.id,
    mode: mode,
    normalized_mode: normalizedMode,
    action: 'calculate_cost',
  })

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const costResult = calculateModeCost({ mode })
  const cost = costResult.stars

  logger.info('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏', {
    description: 'Cost calculation result',
    telegram_id: ctx.from?.id,
    mode: mode,
    cost: cost,
    current_balance: currentBalance,
    action: 'cost_calculated',
  })

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏ –Ω–µ —Ä–∞–≤–Ω–∞ 0
  if (cost !== 0 && !isNaN(cost)) {
    if (!ctx.from?.id) {
      logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'User ID not found',
        telegram_id: ctx.from?.id,
        action: 'user_id_missing',
      })
      throw new Error('User ID not found')
    }

    logger.info('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ', {
      description: 'Sending balance message',
      telegram_id: ctx.from?.id,
      current_balance: currentBalance,
      cost: cost,
      action: 'send_balance_message',
    })

    await sendBalanceMessage(
      ctx.from.id.toString(),
      currentBalance,
      cost,
      isRu,
      ctx.telegram
    )
  }

  if (currentBalance < cost) {
    logger.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', {
      description: 'Insufficient funds',
      telegram_id: ctx.from?.id,
      current_balance: currentBalance,
      cost: cost,
      session_state: {
        mode: ctx.session?.mode,
        selectedModel: ctx.session?.selected_model,
        targetScene: ctx.session?.targetScene,
      },
    })

    await sendInsufficientStarsMessage(ctx, currentBalance, cost)

    logger.info('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –æ–ø–ª–∞—Ç—ã', {
      description: 'Switching to payment scene',
      telegram_id: ctx.from?.id,
      action: 'enter_payment_scene',
    })

    return ctx.scene.enter('payment_scene')
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  logger.info('üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã', {
    description: 'Determining next scene',
    telegram_id: ctx.from?.id,
    current_mode: mode,
    session_state: {
      mode: ctx.session?.mode,
      selectedModel: ctx.session?.selected_model,
      targetScene: ctx.session?.targetScene,
    },
  })

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  switch (mode) {
    case ModeEnum.SelectModel:
      logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        description: 'Balance check completed',
        telegram_id: ctx.from?.id,
        previous_mode: mode,
        selected_model: ctx.session.selected_model,
        action: 'balance_check_completed',
      })
      return ctx.scene.leave()
    case ModeEnum.DigitalAvatarBody:
      logger.info('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ digital_avatar_body', {
        description: 'Switching to digital_avatar_body scene',
        telegram_id: ctx.from?.id,
        previous_mode: mode,
        selected_model: ctx.session.selected_model,
        action: 'enter_digital_avatar_body',
      })
      return ctx.scene.enter('digital_avatar_body')
    case ModeEnum.DigitalAvatarBodyV2:
      logger.info('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ digital_avatar_body_v2', {
        description: 'Switching to digital_avatar_body_v2 scene',
        telegram_id: ctx.from?.id,
        previous_mode: mode,
        selected_model: ctx.session.selected_model,
        action: 'enter_digital_avatar_body_v2',
      })
      return ctx.scene.enter('digital_avatar_body_v2')
    case ModeEnum.ImageToPrompt:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ image_to_prompt_wizard',
        description: 'Switching to image_to_prompt_wizard scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('image_to_prompt_wizard')
    case ModeEnum.ImprovePrompt:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ improve_prompt_wizard',
        description: 'Switching to improve_prompt_wizard scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('improve_prompt_wizard')
    case ModeEnum.TextToImage:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ text_to_image',
        description: 'Switching to text_to_image scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('text_to_image')
    case ModeEnum.NeuroPhoto:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ neuro_photo',
        description: 'Switching to neuro_photo scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('neuro_photo')
    case ModeEnum.NeuroPhotoV2:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ neuroPhotoWizardV2',
        description: 'Switching to neuroPhotoWizardV2 scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('neuro_photo_v2')
    case ModeEnum.AvatarBrainWizard:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ avatarBrainWizard',
        description: 'Switching to avatarBrainWizard scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter(ModeEnum.AvatarBrainWizard)
    case ModeEnum.ChatWithAvatar:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ chat_with_avatar',
        description: 'Switching to chat_with_avatar scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter(ModeEnum.ChatWithAvatar)
    case ModeEnum.Voice:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ voice',
        description: 'Switching to voice scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('voice')
    case ModeEnum.TextToSpeech:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ TextToSpeech',
        description: 'Switching to TextToSpeech scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter(ModeEnum.TextToSpeech)
    case ModeEnum.ImageToVideo:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ image_to_video',
        description: 'Switching to image_to_video scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('image_to_video')
    case ModeEnum.TextToVideo:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ text_to_video',
        description: 'Switching to text_to_video scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('text_to_video')
    case ModeEnum.LipSync:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ lip_sync',
        description: 'Switching to lip_sync scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('lip_sync')
    case ModeEnum.SelectModelWizard:
      logger.info({
        message: 'üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ select_model_wizard',
        description: 'Switching to select_model_wizard scene',
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.enter('select_model_wizard')
    default:
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º',
        description: 'Unknown mode in balance check scene',
        mode,
        normalizedMode,
        telegram_id: ctx.from?.id,
      })
      return ctx.scene.leave()
  }
})

export default checkBalanceScene
