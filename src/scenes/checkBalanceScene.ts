import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'

import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import {
  ModeEnum,
  CostCalculationParams,
  CostCalculationResult,
} from '@/interfaces/modes'
import { starCost, SYSTEM_CONFIG } from '@/price/constants'
import { logger } from '@/utils/logger'
import { getUserDetailsSubscription } from '@/core/supabase'
import { SubscriptionType } from '@/interfaces/subscription.interface'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export interface UserStatus {
  stars: number // –ë–∞–ª–∞–Ω—Å
  level: number
  subscriptionType: SubscriptionType | null // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (null –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
  isSubscriptionActive: boolean // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  isExist: boolean // –ù–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}

interface ConversionRates {
  costPerStarInDollars: number
  costPerStepInStars: number
  rublesToDollarsRate: number
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
export const conversionRates: ConversionRates = {
  costPerStepInStars: 0.25,
  costPerStarInDollars: 0.016,
  rublesToDollarsRate: 100,
}

export const conversionRatesV2: ConversionRates = {
  costPerStepInStars: 2.1,
  costPerStarInDollars: 0.016,
  rublesToDollarsRate: 100,
}

export function calculateCostInStars(
  steps: number,
  rates: { costPerStepInStars: number }
): number {
  const totalCostInStars = steps * rates.costPerStepInStars
  return parseFloat(totalCostInStars.toFixed(2))
}

export function calculateCostInDollars(
  steps: number,
  rates: { costPerStepInStars: number; costPerStarInDollars: number }
): number {
  const totalCostInDollars =
    steps * rates.costPerStepInStars * rates.costPerStarInDollars
  return parseFloat(totalCostInDollars.toFixed(2))
}

export function calculateCostInRubles(
  steps: number,
  rates: {
    costPerStepInStars: number
    costPerStarInDollars: number
    rublesToDollarsRate: number
  }
): number {
  const totalCostInRubles =
    steps *
    rates.costPerStepInStars *
    rates.costPerStarInDollars *
    rates.rublesToDollarsRate
  return parseFloat(totalCostInRubles.toFixed(2))
}

export const stepOptions = {
  v1: [1000, 1500, 2000, 2500, 3000, 3500, 4000],
  v2: [100, 200, 300, 400, 500, 600, 700, 800, 1000],
}

export const costDetails = {
  v1: stepOptions.v1.map(steps => calculateCost(steps, 'v1')),
  v2: stepOptions.v2.map(steps => calculateCost(steps, 'v2')),
}

export interface CostDetails {
  steps: number
  stars: number
  rubles: number
  dollars: number
}

export function calculateCost(
  steps: number,
  version: 'v1' | 'v2' = 'v1'
): CostDetails {
  const rates = version === 'v1' ? conversionRates : conversionRatesV2
  const baseCost = steps * rates.costPerStepInStars

  return {
    steps,
    stars: baseCost,
    dollars: baseCost * rates.costPerStarInDollars,
    rubles: baseCost * rates.costPerStarInDollars * rates.rublesToDollarsRate,
  }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö –∏–∑ –±–∞–∑–æ–≤–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
function calculateFinalStarCostFromDollars(baseDollarCost: number): number {
  //// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ interestRate - —ç—Ç–æ –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2 –¥–ª—è 20%)
  // –ï—Å–ª–∏ interestRate - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20), —Ç–æ —Ñ–æ—Ä–º—É–ª–∞ –±—É–¥–µ—Ç (baseDollarCost / starCost) * (1 + SYSTEM_CONFIG.interestRate / 100)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Ä—É–±–ª–µ–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ interestRate
  const finalCost = (baseDollarCost / starCost) * SYSTEM_CONFIG.interestRate
  return parseFloat(finalCost.toFixed(2))
}

export const BASE_COSTS: Partial<Record<ModeEnum, CostValue>> = {
  [ModeEnum.DigitalAvatarBody]: 0,
  [ModeEnum.DigitalAvatarBodyV2]: 0,
  [ModeEnum.NeuroPhoto]: calculateFinalStarCostFromDollars(0.08), //
  [ModeEnum.NeuroPhotoV2]: calculateFinalStarCostFromDollars(0.14),
  [ModeEnum.NeuroAudio]: calculateFinalStarCostFromDollars(0.12),
  [ModeEnum.ImageToPrompt]: calculateFinalStarCostFromDollars(0.03),
  [ModeEnum.Avatar]: 0,
  [ModeEnum.ChatWithAvatar]: 0,
  [ModeEnum.SelectModel]: 0,
  [ModeEnum.SelectAiTextModel]: 0,
  [ModeEnum.Voice]: calculateFinalStarCostFromDollars(0.9),
  [ModeEnum.TextToSpeech]: calculateFinalStarCostFromDollars(0.12),
  [ModeEnum.ImageToVideo]: 0,
  [ModeEnum.TextToVideo]: 0,
  [ModeEnum.TextToImage]: 0,
  [ModeEnum.LipSync]: calculateFinalStarCostFromDollars(0.9),
  [ModeEnum.VoiceToText]: calculateFinalStarCostFromDollars(0.08),
}

export type CostValue = number | ((steps: number) => number)
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞

export function calculateModeCost(
  params: CostCalculationParams
): CostCalculationResult {
  const { mode, steps = 0, numImages = 1 } = params

  try {
    let stars = 0

    let normalizedMode = mode
    if (mode === ModeEnum.NeuroPhotoV2) {
      normalizedMode = ModeEnum.NeuroPhotoV2
      logger.info({
        message: 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–∏–∞—Å —Ä–µ–∂–∏–º–∞',
        description: 'Mode alias used',
        originalMode: mode,
        normalizedMode,
      })
    }

    const costValue = BASE_COSTS[normalizedMode as keyof typeof BASE_COSTS]

    if (costValue === undefined) {
      logger.error({
        message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
        description: 'Unknown mode or cost not defined in BASE_COSTS',
        mode,
        normalizedMode,
      })
      stars = 0
    } else {
      let numericCostValue: number
      if (typeof costValue === 'function') {
        if (steps === undefined || steps === null) {
          logger.error({
            message:
              '‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            description: 'Steps parameter is missing for function-based cost',
            mode,
            normalizedMode,
          })
          numericCostValue = 0
        } else {
          numericCostValue = costValue(steps)
        }
      } else {
        numericCostValue = costValue
      }

      if (
        (normalizedMode === ModeEnum.DigitalAvatarBody ||
          normalizedMode === ModeEnum.DigitalAvatarBodyV2) &&
        steps
      ) {
        stars = numericCostValue * numImages
      } else {
        stars = numericCostValue * numImages
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    if (mode === ModeEnum.VoiceToText) {
      stars = 5
    }

    stars = parseFloat(stars.toFixed(2))
    const dollars = parseFloat((stars * starCost).toFixed(2))
    const rubles = parseFloat((dollars * SYSTEM_CONFIG.interestRate).toFixed(2))

    return { stars, dollars, rubles }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Error during cost calculation',
      error: error instanceof Error ? error.message : 'Unknown error',
      mode,
      steps,
      numImages,
    })
    throw error
  }
}

export const modeCosts: Record<string, number | ((param?: any) => number)> = {
  [ModeEnum.DigitalAvatarBody]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBody, steps }).stars,
  [ModeEnum.DigitalAvatarBodyV2]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBodyV2, steps }).stars,
  [ModeEnum.NeuroPhoto]: calculateModeCost({ mode: ModeEnum.NeuroPhoto }).stars,
  [ModeEnum.NeuroPhotoV2]: calculateModeCost({ mode: ModeEnum.NeuroPhotoV2 })
    .stars,
  [ModeEnum.NeuroAudio]: calculateModeCost({ mode: ModeEnum.NeuroAudio }).stars,
  neuro_photo_2: calculateModeCost({ mode: ModeEnum.NeuroPhotoV2 }).stars,
  [ModeEnum.ImageToPrompt]: calculateModeCost({ mode: ModeEnum.ImageToPrompt })
    .stars,
  [ModeEnum.Avatar]: calculateModeCost({ mode: ModeEnum.Avatar }).stars,
  [ModeEnum.ChatWithAvatar]: calculateModeCost({
    mode: ModeEnum.ChatWithAvatar,
  }).stars,
  [ModeEnum.SelectModel]: calculateModeCost({ mode: ModeEnum.SelectModel })
    .stars,
  [ModeEnum.SelectAiTextModel]: calculateModeCost({
    mode: ModeEnum.SelectAiTextModel,
  }).stars,
  [ModeEnum.Voice]: calculateModeCost({ mode: ModeEnum.Voice }).stars,
  [ModeEnum.TextToSpeech]: calculateModeCost({ mode: ModeEnum.TextToSpeech })
    .stars,
  [ModeEnum.ImageToVideo]: calculateModeCost({ mode: ModeEnum.ImageToVideo })
    .stars,
  [ModeEnum.TextToVideo]: calculateModeCost({ mode: ModeEnum.TextToVideo })
    .stars,
  [ModeEnum.TextToImage]: calculateModeCost({ mode: ModeEnum.TextToImage })
    .stars,
  [ModeEnum.LipSync]: calculateModeCost({ mode: ModeEnum.LipSync }).stars,
  [ModeEnum.VoiceToText]: calculateModeCost({ mode: ModeEnum.VoiceToText })
    .stars,
}
// –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
export const minCost = Math.min(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const maxCost = Math.max(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.CheckBalanceScene
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function getCostValue(cost: number | ((param?: any) => number)): number {
  return typeof cost === 'function' ? cost() : cost
}

// ==================================================================
// ================== –í–ê–ñ–ù–´–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô! –û–ü–ò–°–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ô –õ–û–ì–ò–ö–ò! ===
// ==================================================================
// –°—Ü–µ–Ω–∞ `checkBalanceScene` - –®–õ–Æ–ó –î–û–°–¢–£–ü–ê –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
// –û–Ω–∞ –í–´–ó–´–í–ê–ï–¢–°–Ø –ü–ï–†–ï–î –õ–Æ–ë–û–ô —Ñ—É–Ω–∫—Ü–∏–µ–π, —Ç—Ä–µ–±—É—é—â–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
// –ê–¥–º–∏–Ω—ã –ù–ï –ò–ú–ï–Æ–¢ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ –æ–±—â–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö.
//
// –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –í–ù–£–¢–†–ò –°–¶–ï–ù–´ (–í–µ—Ä—Å–∏—è "–ü–æ–¥–ø–∏—Å–∫–∞ –ò –ë–∞–ª–∞–Ω—Å –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"):
// –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (`telegramId`) –∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (`mode`).
// –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –í—ã–∑–≤–∞—Ç—å `getUserDetailsSubscription(telegramId)`.
// –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (`!userDetails.isExist`) -> –°–æ–æ–±—â–µ–Ω–∏–µ, –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–û–î–ü–ò–°–ö–ò: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ (`!userDetails.isSubscriptionActive`) -> –õ–æ–≥ (–í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ–∫—É—â–∏–π –ª–æ–≥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!), –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// --- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ï–°–õ–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–¢–¨ –ê–ö–¢–ò–í–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê ---
// –®–ê–ì 5: –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ò –ë–ê–õ–ê–ù–°–ê: –ü–æ–ª—É—á–∏—Ç—å `currentBalance` –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å `costValue` –¥–ª—è `mode`.
// –®–ê–ì 6: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `costValue > 0`, –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å (`sendBalanceMessage`). (–í–ù–ò–ú–ê–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ).
// –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `–±–∞–ª–∞–Ω—Å < costValue` -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥ (`sendInsufficientStarsMessage`), –í–´–•–û–î –∏–∑ —Å—Ü–µ–Ω—ã (`ctx.scene.leave()`).
// –®–ê–ì 8: –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù –ò –ü–ï–†–ï–•–û–î: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ò –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –ò –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å -> –õ–æ–≥ —É—Å–ø–µ—Ö–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (`enterTargetScene`).
// –®–ê–ì 9: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–∞—Ö 2-8 –≤–µ–¥–µ—Ç –∫ –≤—ã—Ö–æ–¥—É –∏–∑ —Å—Ü–µ–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (`ctx.scene.leave()`).
//
// –í–´–í–û–î: –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –Ω–∞–ª–∏—á–∏—è –ê–ö–¢–ò–í–ù–û–ô –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –î–û–°–¢–ê–¢–û–ß–ù–û–ì–û –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
// ==================================================================
// ==================================================================

checkBalanceScene.enter(async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [CheckBalanceScene] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
    telegramId,
    function: 'checkBalanceScene.enter',
    sessionMode: ctx.session?.mode,
    sessionData: JSON.stringify(ctx.session || {}),
  })

  console.log('üíµ CASE: checkBalanceScene')
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–µ–∂–∏–º
  const { telegramId: userId } = getUserInfo(ctx)
  const mode = ctx.session.mode as ModeEnum
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: `[CheckBalanceScene] –ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ–∂–∏–º: ${mode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`,
    telegramId: userId,
    mode,
    language: isRu ? 'ru' : 'other',
    function: 'checkBalanceScene.enter',
    step: 'identifying_user_and_mode',
  })

  try {
    // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    logger.info({
      message: `[CheckBalanceScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'fetching_user_data',
    })

    const userDetails = await getUserDetailsSubscription(telegramId)

    logger.info({
      message: `[CheckBalanceScene] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'user_data_fetched',
      userExists: userDetails.isExist,
      subscriptionActive: userDetails.isSubscriptionActive,
      subscriptionType: userDetails.subscriptionType,
      stars: userDetails.stars,
    })

    // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
    if (!userDetails.isExist) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'user_not_found',
        result: 'redirect_to_start',
      })
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.'
          : '‚ùå Could not find your profile. Please restart the bot with /start.'
      )
      return ctx.scene.enter(ModeEnum.StartScene) // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ù–ï –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_failed',
        subscriptionType: userDetails.subscriptionType,
        mode,
        result: 'redirect_to_start',
      })
      return ctx.scene.enter(ModeEnum.StartScene)
    } else {
      logger.info({
        message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}. –¢–∏–ø: ${userDetails.subscriptionType}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_passed',
        subscriptionType: userDetails.subscriptionType,
        mode,
      })
    }

    // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
    const currentBalance = userDetails.stars
    const cost = modeCosts[mode] || 0
    const costValue = getCostValue(cost)

    logger.info({
      message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'balance_check',
      mode,
      cost: costValue,
      balance: currentBalance,
      hasEnoughBalance: currentBalance >= costValue,
    })

    // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
    if (costValue > 0) {
      logger.info({
        message: `[CheckBalanceScene] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'displaying_balance_info',
        mode,
        cost: costValue,
        balance: currentBalance,
      })

      console.log(ctx.botInfo)

      // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ userDetails
      await sendBalanceMessage(
        ctx,
        currentBalance,
        costValue,
        isRu,
        ctx.botInfo.username
      )
    }

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
    if (currentBalance < costValue) {
      logger.warn({
        message: `[CheckBalanceScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'insufficient_balance',
        mode,
        cost: costValue,
        balance: currentBalance,
        deficit: costValue - currentBalance,
        result: 'access_denied',
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥
      await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      logger.info({
        message: `[CheckBalanceScene] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'scene_leave',
        reason: 'insufficient_balance',
      })
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
    logger.info({
      message: `[CheckBalanceScene] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'all_checks_passed',
      mode,
      cost: costValue,
      balance: currentBalance,
      result: 'access_granted',
    })

    // --- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–•–û–î–ê –í –¶–ï–õ–ï–í–£–Æ –°–¶–ï–ù–£ ---
    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é next, —Ä–µ–∂–∏–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å
    // @ts-ignore // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞, —Ç.–∫. —Ç–∏–ø—ã –ø–æ —Ñ–∞–∫—Ç—É —Å–æ–≤–ø–∞–¥–∞—é—Ç
    await enterTargetScene(ctx, async () => {}, mode, costValue) // <--- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
  } catch (error) {
    console.error('[DEBUG CheckBalanceScene Enter] Error caught:', error) // –î–æ–±–∞–≤–ª–µ–Ω–æ
    logger.error({
      message: `[CheckBalanceScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞`,
      telegramId,
      function: 'checkBalanceScene.enter',
      mode: ctx.session?.mode,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return ctx.scene.leave()
  }
})

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ middleware –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –æ–ø–ª–∞—Ç—ã.
 *
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param next –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è middleware (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã/—Å—Ü–µ–Ω—ã)
 * @param mode –†–µ–∂–∏–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ
 * @param cost –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö
 */
// –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –≤–µ—Ä—Å–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
export const enterTargetScene = async (
  ctx: MyContext,
  next: () => Promise<void>, // –î–æ–±–∞–≤–ª—è–µ–º `next`
  mode: ModeEnum, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ModeEnum
  cost: number
) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  logger.info({
    message: `[EnterTargetSceneWrapper] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º ${mode}`,
    telegramId,
    mode,
    cost,
    function: 'enterTargetSceneWrapper', // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
  })

  try {
    const userDetails = await getUserDetailsSubscription(telegramId)

    if (!userDetails.isExist) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î',
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.'
      )
      // –í middleware –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ctx.scene.leave(),
      // –∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç next() –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
      return
    }

    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ checkBalanceScene
      // –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏
      return
    }

    const currentBalance = userDetails.stars

    if (currentBalance < cost) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥',
        telegramId,
        mode,
        currentBalance,
        cost,
        function: 'enterTargetSceneWrapper',
      })
      const isRu = ctx.from?.language_code === 'ru'
      await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
      return
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å > 0
    if (cost > 0) {
      logger.info({
        message: `[EnterTargetSceneWrapper] –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ–∂–∏–º ${mode}`,
        telegramId,
        mode,
        cost,
        balanceBefore: currentBalance,
        function: 'enterTargetSceneWrapper',
      })
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      // await logTransaction(...)
      // const updatedBalance = await updateUserBalance(...)
      const updatedBalance = currentBalance - cost // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      logger.info({
        message: `[EnterTargetSceneWrapper] ‚úÖ –ó–≤–µ–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã (—Å–∏–º—É–ª—è—Ü–∏—è), –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω`,
        telegramId,
        mode,
        balanceAfter: updatedBalance,
        function: 'enterTargetSceneWrapper',
      })
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ ctx.session, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —Ö—Ä–∞–Ω–∏—Ç—Å—è
      // ctx.session.user.stars = updatedBalance; // –ü—Ä–∏–º–µ—Ä
    } else {
      logger.info({
        message: `[EnterTargetSceneWrapper] –†–µ–∂–∏–º ${mode} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∑–≤–µ–∑–¥—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è`,
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
    }

    logger.info({
      message: `[EnterTargetSceneWrapper] ‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É`,
      telegramId,
      mode,
      function: 'enterTargetSceneWrapper',
    })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã/–≤—Ö–æ–¥—É –≤ —Å—Ü–µ–Ω—É)
    // await next() // –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ middleware –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    // --- –ò–õ–ò ---

    // –ï—Å–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –î–û–õ–ñ–ù–ê –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å—Ü–µ–Ω—É, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
    logger.info({
      message: `[EnterTargetSceneWrapper] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É ${mode}`,
      telegramId,
      mode,
      function: 'enterTargetSceneWrapper',
    })
    // –ù–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç.–∫. ctx.scene.enter –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    await ctx.scene.enter(mode, {
      ...(ctx.scene.state || {}),
      cost, // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç —Å—Ü–µ–Ω—ã
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å—Ü–µ–Ω—ã
    })
  } catch (error) {
    logger.error({
      message: `[EnterTargetSceneWrapper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º ${mode}`,
      telegramId,
      mode,
      error: error instanceof Error ? error.message : 'Unknown error',
      function: 'enterTargetSceneWrapper',
    })
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.'
    )
    // –í middleware –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ctx.scene.leave()
    // –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å next() –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É,
    // —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  }
}
