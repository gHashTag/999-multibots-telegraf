import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'

import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import {
  getUserDetailsSubscription,
  invalidateBalanceCache,
  updateUserBalance,
  getUserBalance,
} from '@/core/supabase'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { PaymentType } from '@/interfaces/payments.interface'
import {
  calculateFinalStarPrice,
  type CalculationParams,
  type CostCalculationResult,
} from '@/price/calculator'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export interface UserStatus {
  stars: number // –ë–∞–ª–∞–Ω—Å
  level: number
  subscriptionType: SubscriptionType | null // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (null –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
  isSubscriptionActive: boolean // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  isExist: boolean // –ù–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function checkUser(ctx: MyContext): Promise<UserStatus | null> {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [CheckBalanceScene] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
    telegramId,
    function: 'checkBalanceScene.enter',
    sessionMode: ctx.session?.mode,
    sessionData: JSON.stringify(ctx.session || {}),
  })

  console.log('üíµ CASE: checkBalanceScene')
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–µ–∂–∏–º
  const { telegramId: userId } = getUserInfo(ctx)
  const mode = ctx.session.mode as ModeEnum
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: `[CheckBalanceScene] –ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ–∂–∏–º: ${mode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`,
    telegramId: userId,
    mode,
    language: isRu ? 'ru' : 'other',
    function: 'checkBalanceScene.enter',
    step: 'identifying_user_and_mode',
  })

  try {
    // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    logger.info({
      message: `[CheckBalanceScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'fetching_user_data',
    })

    // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const userDetails = await getUserDetailsSubscription(ctx.from.id.toString())

    logger.info({
      message: `[CheckBalanceScene] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'user_data_fetched',
      userExists: userDetails.isExist,
      subscriptionActive: userDetails.isSubscriptionActive,
      subscriptionType: userDetails.subscriptionType,
      stars: userDetails.stars,
    })

    // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
    if (!userDetails.isExist) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'user_not_found',
        result: 'redirect_to_start',
      })
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.'
          : '‚ùå Could not find your profile. Please restart the bot with /start.'
      )
      return null
    }

    // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ù–ï –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_failed',
        subscriptionType: userDetails.subscriptionType,
        mode,
        result: 'redirect_to_start',
      })
      return null
    } else {
      logger.info({
        message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}. –¢–∏–ø: ${userDetails.subscriptionType}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_passed',
        subscriptionType: userDetails.subscriptionType,
        mode,
      })
    }

    // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
    const currentBalance = userDetails.stars

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    // TODO: –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (modelId, steps) –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const costParams: CalculationParams = {}
    const costResult: CostCalculationResult | null = calculateFinalStarPrice(
      mode,
      costParams
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (costResult === null) {
      logger.error(
        '[CheckBalanceScene] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞',
        { telegramId, mode, costParams }
      )
      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : '‚ùå An error occurred while calculating the cost. Please try again later.'
      )
      return null
    }

    const requiredStars = costResult.stars // –ü–æ–ª—É—á–∞–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    logger.info({
      message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'balance_check',
      mode,
      cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      balance: currentBalance,
      hasEnoughBalance: currentBalance >= requiredStars, // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    })

    // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
    if (requiredStars > 0) {
      logger.info({
        message: `[CheckBalanceScene] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'displaying_balance_info',
        mode,
        cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        balance: currentBalance,
      })

      // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ userDetails
      await sendBalanceMessage(
        ctx,
        currentBalance,
        requiredStars, // –ü–µ—Ä–µ–¥–∞–µ–º –∑–≤–µ–∑–¥—ã
        isRu,
        ctx.botInfo.username
      )
    }

    // –®–∞–≥ 7: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê
    if (currentBalance < requiredStars) {
      logger.warn({
        message: `[CheckBalanceScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'insufficient_balance',
        mode,
        cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        balance: currentBalance,
        deficit: requiredStars - currentBalance, // –í—ã—á–∏—Ç–∞–µ–º –∑–≤–µ–∑–¥—ã
        result: 'access_denied',
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥
      await sendInsufficientStarsMessage(ctx, userDetails.stars, isRu)
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      logger.info({
        message: `[CheckBalanceScene] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'scene_leave',
        reason: 'insufficient_balance',
      })
      return null
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
    logger.info({
      message: `[CheckBalanceScene] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'all_checks_passed',
      mode,
      cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      balance: currentBalance,
      result: 'access_granted',
    })

    return {
      stars: currentBalance,
      level: 0, // Assuming level is not provided in the userDetails
      subscriptionType: userDetails.subscriptionType,
      isSubscriptionActive: userDetails.isSubscriptionActive,
      isExist: userDetails.isExist,
    }
  } catch (error) {
    console.error('[DEBUG CheckBalanceScene Enter] Error caught:', error) // –î–æ–±–∞–≤–ª–µ–Ω–æ
    logger.error({
      message: `[CheckBalanceScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞`,
      telegramId,
      function: 'checkBalanceScene.enter',
      mode: ctx.session?.mode,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function updateUserBalanceLocal(
  ctx: MyContext,
  amount: number,
  type: PaymentType,
  serviceType?: ModeEnum
): Promise<boolean> {
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  try {
    const success = await updateUserBalance(
      telegramId,
      amount,
      type,
      `–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ä–µ–∂–∏–º ${serviceType}`,
      { service_type: serviceType, bot_name: ctx.botInfo.username }
    )

    if (success) {
      invalidateBalanceCache(telegramId) // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
      const newBalance = await getUserBalance(telegramId) // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      logger.info({
        message: `[EnterTargetSceneWrapper] ‚úÖ –ó–≤–µ–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω`,
        telegramId,
        mode: serviceType,
        cost: amount,
        balanceAfter: newBalance,
        function: 'enterTargetSceneWrapper',
      })
      return true
    } else {
      logger.error({
        message: `[EnterTargetSceneWrapper] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã`,
        telegramId,
        mode: serviceType,
        cost: amount,
        function: 'enterTargetSceneWrapper',
      })
      return false
    }
  } catch (error) {
    logger.error({
      message: `[EnterTargetSceneWrapper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤`,
      telegramId,
      mode: serviceType,
      cost: amount,
      function: 'enterTargetSceneWrapper',
      error: error instanceof Error ? error.message : String(error),
    })
    return false
  }
}

//Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
export const checkBalanceMiddleware = async (
  ctx: MyContext,
  next: () => Promise<void>
) => {
  const user = await checkUser(ctx)
  if (!user) {
    logger.error('checkBalanceMiddleware: User not found', {
      telegram_id: ctx.from?.id,
    })
    return ctx.scene.enter(ModeEnum.MainMenu)
  }

  // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ currentCostParams
  const costResult = calculateFinalStarPrice(ctx.session.mode as ModeEnum, {})

  if (costResult === null) {
    logger.error('checkBalanceMiddleware: Failed to calculate cost', {
      telegram_id: ctx.from?.id,
      mode: ctx.session.mode,
      costParams: {}, // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    })
    await ctx.reply(
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
    return ctx.scene.enter(ModeEnum.MainMenu)
  }

  const requiredStars = costResult.stars

  if (!user.isSubscriptionActive && user.stars < requiredStars) {
    await sendInsufficientStarsMessage(
      ctx,
      user.stars,
      ctx.from?.language_code === 'ru'
    )
    return ctx.scene.enter(ModeEnum.MainMenu)
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ü–µ–Ω–µ
  if (ctx.session) {
    ctx.session.currentCost = requiredStars
    ctx.session.currentMode = ctx.session.mode
  } else {
    logger.warn('checkBalanceMiddleware: ctx.session is undefined', {
      telegram_id: ctx.from?.id,
    })
    // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
  }

  await next() // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–±—ã—á–Ω–æ –≤—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É)
}

//–°—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.CheckBalanceScene
)

checkBalanceScene.enter(async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [CheckBalanceScene] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
    telegramId,
    function: 'checkBalanceScene.enter',
    sessionMode: ctx.session?.mode,
    sessionData: JSON.stringify(ctx.session || {}),
  })

  console.log('üíµ CASE: checkBalanceScene')
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–µ–∂–∏–º
  const { telegramId: userId } = getUserInfo(ctx)
  const mode = ctx.session.mode as ModeEnum
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: `[CheckBalanceScene] –ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ–∂–∏–º: ${mode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`,
    telegramId: userId,
    mode,
    language: isRu ? 'ru' : 'other',
    function: 'checkBalanceScene.enter',
    step: 'identifying_user_and_mode',
  })

  try {
    // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    logger.info({
      message: `[CheckBalanceScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'fetching_user_data',
    })

    // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const userDetails = await getUserDetailsSubscription(ctx.from.id.toString())

    logger.info({
      message: `[CheckBalanceScene] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'user_data_fetched',
      userExists: userDetails.isExist,
      subscriptionActive: userDetails.isSubscriptionActive,
      subscriptionType: userDetails.subscriptionType,
      stars: userDetails.stars,
    })

    // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
    if (!userDetails.isExist) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'user_not_found',
        result: 'redirect_to_start',
      })
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.'
          : '‚ùå Could not find your profile. Please restart the bot with /start.'
      )
      return ctx.scene.enter(ModeEnum.StartScene) // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ù–ï –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_failed',
        subscriptionType: userDetails.subscriptionType,
        mode,
        result: 'redirect_to_start',
      })
      return ctx.scene.enter(ModeEnum.StartScene)
    } else {
      logger.info({
        message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}. –¢–∏–ø: ${userDetails.subscriptionType}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_passed',
        subscriptionType: userDetails.subscriptionType,
        mode,
      })
    }

    // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
    const currentBalance = userDetails.stars

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    // TODO: –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (modelId, steps) –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const costParams: CalculationParams = {}
    const costResult: CostCalculationResult | null = calculateFinalStarPrice(
      mode,
      costParams
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (costResult === null) {
      logger.error(
        '[CheckBalanceScene] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞',
        { telegramId, mode, costParams }
      )
      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : '‚ùå An error occurred while calculating the cost. Please try again later.'
      )
      return ctx.scene.leave()
    }

    const requiredStars = costResult.stars // –ü–æ–ª—É—á–∞–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    logger.info({
      message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'balance_check',
      mode,
      cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      balance: currentBalance,
      hasEnoughBalance: currentBalance >= requiredStars, // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    })

    // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
    if (requiredStars > 0) {
      logger.info({
        message: `[CheckBalanceScene] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'displaying_balance_info',
        mode,
        cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        balance: currentBalance,
      })

      // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ userDetails
      await sendBalanceMessage(
        ctx,
        currentBalance,
        requiredStars, // –ü–µ—Ä–µ–¥–∞–µ–º –∑–≤–µ–∑–¥—ã
        isRu,
        ctx.botInfo.username
      )
    }

    // –®–∞–≥ 7: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê
    if (currentBalance < requiredStars) {
      logger.warn({
        message: `[CheckBalanceScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'insufficient_balance',
        mode,
        cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        balance: currentBalance,
        deficit: requiredStars - currentBalance, // –í—ã—á–∏—Ç–∞–µ–º –∑–≤–µ–∑–¥—ã
        result: 'access_denied',
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥
      await sendInsufficientStarsMessage(ctx, userDetails.stars, isRu)
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      logger.info({
        message: `[CheckBalanceScene] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'scene_leave',
        reason: 'insufficient_balance',
      })
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
    logger.info({
      message: `[CheckBalanceScene] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'all_checks_passed',
      mode,
      cost: requiredStars, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      balance: currentBalance,
      result: 'access_granted',
    })

    // --- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–•–û–î–ê –í –¶–ï–õ–ï–í–£–Æ –°–¶–ï–ù–£ ---
    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é next, —Ä–µ–∂–∏–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å
    // @ts-ignore // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞, —Ç.–∫. —Ç–∏–ø—ã –ø–æ —Ñ–∞–∫—Ç—É —Å–æ–≤–ø–∞–¥–∞—é—Ç
    await enterTargetScene(ctx, async () => {}, mode, requiredStars) // <--- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
  } catch (error) {
    console.error('[DEBUG CheckBalanceScene Enter] Error caught:', error) // –î–æ–±–∞–≤–ª–µ–Ω–æ
    logger.error({
      message: `[CheckBalanceScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞`,
      telegramId,
      function: 'checkBalanceScene.enter',
      mode: ctx.session?.mode,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return ctx.scene.leave()
  }
})

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ middleware –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –æ–ø–ª–∞—Ç—ã.
 *
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param next –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è middleware (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã/—Å—Ü–µ–Ω—ã)
 * @param mode –†–µ–∂–∏–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ
 * @param cost –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö
 */
// –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –≤–µ—Ä—Å–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
export const enterTargetScene = async (
  ctx: MyContext,
  next: () => Promise<void>, // –î–æ–±–∞–≤–ª—è–µ–º `next`
  mode: ModeEnum, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ModeEnum
  cost: number
) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  logger.info({
    message: `[EnterTargetSceneWrapper] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º ${mode}`,
    telegramId,
    mode,
    cost,
    function: 'enterTargetSceneWrapper', // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
  })

  try {
    const userDetails = await getUserDetailsSubscription(telegramId)

    if (!userDetails.isExist) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î',
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.'
      )
      // –í middleware –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ctx.scene.leave(),
      // –∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç next() –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
      return
    }

    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ checkBalanceScene
      // –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏
      return
    }

    const currentBalance = userDetails.stars

    if (currentBalance < cost) {
      logger.warn({
        message: '[EnterTargetSceneWrapper] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥',
        telegramId,
        mode,
        currentBalance,
        cost,
        function: 'enterTargetSceneWrapper',
      })
      const isRu = ctx.from?.language_code === 'ru'
      await sendInsufficientStarsMessage(ctx, userDetails.stars, isRu)
      return
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å > 0
    if (cost > 0) {
      logger.info({
        message: `[EnterTargetSceneWrapper] –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ–∂–∏–º ${mode}`,
        telegramId,
        mode,
        cost,
        balanceBefore: currentBalance,
        function: 'enterTargetSceneWrapper',
      })
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      // await logTransaction(...)
      // const updatedBalance = await updateUserBalance(...)
      // const updatedBalance = currentBalance - cost // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –£–î–ê–õ–ï–ù–û

      // –í—ã–∑—ã–≤–∞–µ–º updateUserBalance –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const success = await updateUserBalance(
        telegramId,
        -cost, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        PaymentType.MONEY_OUTCOME, // –¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è
        `–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ä–µ–∂–∏–º ${mode}`, // –û–ø–∏—Å–∞–Ω–∏–µ
        { service_type: mode, bot_name: ctx.botInfo.username } // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      )

      if (success) {
        invalidateBalanceCache(telegramId) // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
        const newBalance = await getUserBalance(telegramId) // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        logger.info({
          message: `[EnterTargetSceneWrapper] ‚úÖ –ó–≤–µ–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω`,
          telegramId,
          mode,
          cost,
          balanceAfter: newBalance,
          function: 'enterTargetSceneWrapper',
        })
      } else {
        logger.error({
          message: `[EnterTargetSceneWrapper] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã`,
          telegramId,
          mode,
          cost,
          function: 'enterTargetSceneWrapper',
        })
        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply(
          ctx.from?.language_code === 'ru'
            ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            : '‚ùå An error occurred while deducting funds. Please try again.'
        )
        return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç.–∫. —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }
    } else {
      logger.info({
        message: `[EnterTargetSceneWrapper] –†–µ–∂–∏–º ${mode} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∑–≤–µ–∑–¥—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è`,
        telegramId,
        mode,
        function: 'enterTargetSceneWrapper',
      })
    }

    logger.info({
      message: `[EnterTargetSceneWrapper] ‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É`,
      telegramId,
      mode,
      function: 'enterTargetSceneWrapper',
    })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã/–≤—Ö–æ–¥—É –≤ —Å—Ü–µ–Ω—É)
    // await next() // –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ middleware –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    // --- –ò–õ–ò ---

    // –ï—Å–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –î–û–õ–ñ–ù–ê –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å—Ü–µ–Ω—É, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
    logger.info({
      message: `[EnterTargetSceneWrapper] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É ${mode}`,
      telegramId,
      mode,
      function: 'enterTargetSceneWrapper',
    })
    // –ù–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç.–∫. ctx.scene.enter –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    await ctx.scene.enter(mode, {
      ...(ctx.scene.state || {}),
      cost, // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç —Å—Ü–µ–Ω—ã
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å—Ü–µ–Ω—ã
    })
  } catch (error) {
    logger.error({
      message: `[EnterTargetSceneWrapper] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º ${mode}`,
      telegramId,
      mode,
      error: error instanceof Error ? error.message : 'Unknown error',
      function: 'enterTargetSceneWrapper',
    })
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.'
    )
    // –í middleware –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ctx.scene.leave()
    // –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å next() –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É,
    // —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  }
}

// ==================================================================
// ========= –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ò –í–•–û–î–ê –í –°–¶–ï–ù–£ ================
// ==================================================================
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –≤—Ö–æ–¥–∞

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ middleware –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.
 *
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param next –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è middleware
 * @param mode –†–µ–∂–∏–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å
 * @param costParams –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, steps)
 */
export const checkBalanceAndEnterScene = async (
  ctx: MyContext,
  next: () => Promise<void>,
  mode: ModeEnum,
  costParams?: CalculationParams // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º {} –Ω–∏–∂–µ
) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  const isRu = ctx.from?.language_code === 'ru'

  try {
    const user = await checkUser(ctx)
    if (!user) {
      logger.error('checkBalanceAndEnterScene: User not found', {
        telegram_id: ctx.from?.id,
      })
      return // –ò–ª–∏ ctx.reply(...)
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ costParams
    const costResult = calculateFinalStarPrice(mode, {}) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

    if (costResult === null) {
      logger.error('checkBalanceAndEnterScene: Failed to calculate cost', {
        telegram_id: ctx.from?.id,
        mode,
        costParams: {}, // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      })
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )
      return ctx.scene.enter(ModeEnum.MainMenu) // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    }

    const requiredStars = costResult.stars

    if (!user.isSubscriptionActive && user.stars < requiredStars) {
      await sendInsufficientStarsMessage(ctx, user.stars, isRu)
      return ctx.scene.enter(ModeEnum.MainMenu) // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ü–µ–Ω–µ
    if (ctx.session) {
      ctx.session.currentCost = requiredStars
      ctx.session.currentMode = mode
    } else {
      logger.warn('checkBalanceAndEnterScene: ctx.session is undefined', {
        telegram_id: ctx.from?.id,
      })
      // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    }

    await next() // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–±—ã—á–Ω–æ –≤—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É)
  } catch (error) {
    logger.error('Error in checkBalanceAndEnterScene:', error)
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    )
    // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try {
      await ctx.scene.enter(ModeEnum.MainMenu)
    } catch (sceneError) {
      logger.error(
        'Failed to enter MainMenu scene after balance check error',
        sceneError
      )
    }
  }
}

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ü–µ–Ω—ã
checkBalanceScene.id = ModeEnum.CheckBalanceScene // Corrected scene ID
