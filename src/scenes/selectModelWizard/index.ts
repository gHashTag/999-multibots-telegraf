import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'
import { getAvailableModels } from '../../commands/selectModelCommand/getAvailableModels'
import { sendGenericErrorMessage } from '@/menu'
import { isRussian } from '@/helpers/language'
import { getUserByTelegramIdString, setModel } from '@/core/supabase'
import { handleHelpCancel } from '@/handlers'
import { updateUserLevelPlusOne } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'
//
export const selectModelWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.SelectModelWizard,
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'

    try {
      const models = await getAvailableModels()
      console.log('models', models)

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, –ø–æ 3 –≤ —Ä—è–¥
      const buttons: string[][] = []
      for (let i = 0; i < models.length; i += 3) {
        const row: string[] = []
        if (models[i]) {
          row.push(models[i])
        }
        if (models[i + 1]) {
          row.push(models[i + 1])
        }
        if (models[i + 2]) {
          row.push(models[i + 2])
        }
        buttons.push(row)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ" –≤ –∫–æ–Ω—Ü–µ
      const cancelHelpButtons = [
        isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command',
        isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
      ]
      buttons.push(cancelHelpButtons)

      const keyboard = Markup.keyboard(buttons).resize().oneTime()

      await ctx.reply(
        isRu ? 'üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:' : 'üß† Select AI Model:',
        keyboard
      )

      return ctx.wizard.next()
    } catch (error) {
      console.error('Error creating model selection menu:', error)
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π'
          : '‚ùå Error fetching models list'
      )
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    console.log('CASE: select_model', isCancel)
    if (isCancel) {
      console.log('CASE: select_model', isCancel)
      return ctx.scene.leave()
    } else {
      const model = message.text
      console.log('CASE: select_model', model)
      const models = await getAvailableModels()
      if (!models.includes(model)) {
        await ctx.reply(isRu ? '‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå Model not found')
        return ctx.scene.leave()
      }

      const telegramId = ctx.from?.id.toString()
      if (!telegramId) {
        await ctx.reply(
          isRu
            ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            : '‚ùå Error: User ID not found'
        )
        return ctx.scene.leave()
      }

      await setModel(telegramId, model)

      await ctx.reply(
        isRu
          ? `‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${model}`
          : `‚úÖ Model successfully changed to ${model}`,
        {
          reply_markup: {
            remove_keyboard: true,
          },
        }
      )

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.selectedModel = model

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º DigitalAvatarBody
      ctx.session.mode = ModeEnum.DigitalAvatarBody

      logger.info('‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞', {
        description: 'Model selected, transitioning to balance check',
        telegram_id: telegramId,
        selected_model: model,
        new_mode: ctx.session.mode
      })

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞
      return ctx.scene.enter('check_balance')
    }
  }
)

export default selectModelWizard
