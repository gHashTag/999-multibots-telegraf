import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { getUserBalance, supabase } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import {
  getServiceEmoji,
  getServiceDisplayTitle,
  UserService,
} from '@/utils/serviceMapping'
import { generateUserExcelReport } from '@/utils/excelReportGenerator'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserSpendingDetails(userId: string) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: payments, error } = await supabase
    .from('payments_v2')
    .select('*')
    .eq('telegram_id', userId)
    .eq('status', 'COMPLETED')
    .order('payment_date', { ascending: false })

  if (error || !payments) {
    return null
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const incomes = payments.filter(p => p.type === 'MONEY_INCOME')
  const outcomes = payments.filter(p => p.type === 'MONEY_OUTCOME')

  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏ –±–æ–Ω—É—Å—ã
  const realIncomes = incomes.filter(p => p.category === 'REAL')
  const bonusIncomes = incomes.filter(p => p.category === 'BONUS')

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
  const rublesIncomes = realIncomes.filter(
    p =>
      p.currency === 'RUB' &&
      (p.payment_method === 'Robokassa' || p.payment_method === 'Manual') &&
      p.status === 'COMPLETED'
  )
  const starsIncomes = realIncomes.filter(
    p =>
      (p.currency === 'XTR' || p.currency === 'STARS') &&
      p.payment_method === 'Telegram' &&
      p.status === 'COMPLETED'
  )

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
  const totalRealIncomeStars = realIncomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const totalBonusStars = bonusIncomes.reduce(
    (sum, p) => sum + (p.stars || 0),
    0
  )
  const totalOutcomeStars = outcomes.reduce((sum, p) => sum + (p.stars || 0), 0)

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
  const rublesStars = rublesIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)
  const rublesAmount = rublesIncomes.reduce(
    (sum, p) => sum + (p.amount || 0),
    0
  )
  const telegramStars = starsIncomes.reduce((sum, p) => sum + (p.stars || 0), 0)

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º - –í–°–ï —Å–µ—Ä–≤–∏—Å—ã
  const serviceStats = new Map<string, { count: number; stars: number }>()
  outcomes.forEach(payment => {
    const service = payment.service_type || 'unknown'
    const current = serviceStats.get(service) || { count: 0, stars: 0 }
    current.count += 1
    current.stars += payment.stars || 0
    serviceStats.set(service, current)
  })

  // –í–°–ï —Å–µ—Ä–≤–∏—Å—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–∞—Ç–∞–º
  const allServices = Array.from(serviceStats.entries()).sort(
    ([, a], [, b]) => b.stars - a.stars
  )

  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ)
  const recentOutcomes = outcomes.slice(0, 5)

  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ)
  const recentTopUps = realIncomes.slice(0, 3)

  return {
    totalRealIncomeStars,
    totalBonusStars,
    totalOutcomeStars,
    currentBalance: totalRealIncomeStars + totalBonusStars - totalOutcomeStars,
    allServices,
    recentOutcomes,
    recentTopUps,
    totalTransactions: payments.length,
    hasBonuses: totalBonusStars > 0,
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    rublesStars,
    rublesAmount,
    telegramStars,
    hasRublesPayments: rublesIncomes.length > 0,
    hasTelegramPayments: starsIncomes.length > 0,
    rublesIncomes,
    starsIncomes,
  }
}

export const balanceScene = new Scenes.WizardScene<MyContext>(
  'balanceScene',
  async (ctx: MyContext) => {
    try {
      console.log('CASE: balanceScene')
      const isRu = ctx.from?.language_code === 'ru'
      const userId = ctx.from?.id.toString() || ''

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
      const balance = await getUserBalance(userId)
      const spendingDetails = await getUserSpendingDetails(userId)

      if (!spendingDetails) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–∞–ª–∞–Ω—Å
        await ctx.reply(
          isRu
            ? `üí∞‚ú® <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${balance} ‚≠êÔ∏è`
            : `üí∞‚ú® <b>Your balance:</b> ${balance} ‚≠êÔ∏è`,
          { parse_mode: 'HTML' }
        )
      } else {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = isRu
          ? `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n`
          : `üí∞ <b>Your balance and statistics</b>\n\n`

        // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
        const formattedBalance = Math.floor(balance * 100) / 100
        message += isRu
          ? `üíé <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formattedBalance} ‚≠ê\n\n`
          : `üíé <b>Current balance:</b> ${formattedBalance} ‚≠ê\n\n`

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalSpent =
          Math.floor(spendingDetails.totalOutcomeStars * 100) / 100
        const totalTopUps =
          Math.floor(spendingDetails.totalRealIncomeStars * 100) / 100

        message += isRu
          ? `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`
          : `üìä <b>Overall statistics:</b>\n`

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if (
          spendingDetails.hasRublesPayments ||
          spendingDetails.hasTelegramPayments
        ) {
          message += isRu
            ? `   üìà <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n`
            : `   üìà <b>Top-ups:</b>\n`

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É–±–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ä—É–±–ª—è—Ö
          if (spendingDetails.hasRublesPayments) {
            const rublesStars =
              Math.floor(spendingDetails.rublesStars * 100) / 100
            const rublesAmount =
              Math.floor(spendingDetails.rublesAmount * 100) / 100
            message += isRu
              ? `      üí≥ –ß–µ—Ä–µ–∑ Robokassa: ${rublesStars} ‚≠ê (${rublesAmount} —Ä—É–±.)\n`
              : `      üí≥ Via Robokassa: ${rublesStars} ‚≠ê (${rublesAmount} RUB)\n`
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Telegram Stars —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏
          if (spendingDetails.hasTelegramPayments) {
            const telegramStars =
              Math.floor(spendingDetails.telegramStars * 100) / 100
            message += isRu
              ? `      ‚≠ê –ß–µ—Ä–µ–∑ Telegram Stars: ${telegramStars} ‚≠ê\n`
              : `      ‚≠ê Via Telegram Stars: ${telegramStars} ‚≠ê\n`
          }

          message += isRu
            ? `   üìà <b>–ò—Ç–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> ${totalTopUps} ‚≠ê\n`
            : `   üìà <b>Total top-ups:</b> ${totalTopUps} ‚≠ê\n`
        } else {
          message += isRu
            ? `   üìà –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${totalTopUps} ‚≠ê\n`
            : `   üìà Total top-ups: ${totalTopUps} ‚≠ê\n`
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (spendingDetails.hasBonuses) {
          const totalBonuses =
            Math.floor(spendingDetails.totalBonusStars * 100) / 100
          message += isRu
            ? `   üéÅ –ë–æ–Ω—É—Å—ã –ø–æ–ª—É—á–µ–Ω–æ: ${totalBonuses} ‚≠ê\n`
            : `   üéÅ Bonuses received: ${totalBonuses} ‚≠ê\n`
        }

        message += isRu
          ? `   üìâ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent} ‚≠ê\n`
          : `   üìâ Total spent: ${totalSpent} ‚≠ê\n`

        message += isRu
          ? `   üî¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${spendingDetails.totalTransactions}\n\n`
          : `   üî¢ Total transactions: ${spendingDetails.totalTransactions}\n\n`

        // –í–°–ï —Å–µ—Ä–≤–∏—Å—ã –ø–æ —Ç—Ä–∞—Ç–∞–º
        if (spendingDetails.allServices.length > 0) {
          message += isRu
            ? `üõ†Ô∏è <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:</b>\n`
            : `üõ†Ô∏è <b>Services breakdown:</b>\n`

          spendingDetails.allServices.forEach(([service, stats], index) => {
            const percentage =
              spendingDetails.totalOutcomeStars > 0
                ? Math.floor(
                    (stats.stars / spendingDetails.totalOutcomeStars) * 1000
                  ) / 10
                : 0

            const serviceStars = Math.floor(stats.stars * 100) / 100

            // –≠–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
            const serviceEmoji = getServiceEmoji(service)
            const serviceTitle = getServiceDisplayTitle(service as UserService)

            message += `   ${index + 1}. ${serviceEmoji} ${serviceTitle}:\n`
            message += `      üí∞ ${serviceStars}‚≠ê (${percentage}%)\n`
            message += `      üî¢ ${stats.count} ${isRu ? '–æ–ø–µ—Ä–∞—Ü–∏–π' : 'operations'}\n\n`
          })
        }

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å–ø–æ—Å–æ–±–∞–º
        if (spendingDetails.recentTopUps.length > 0) {
          message += isRu
            ? `üìà <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n`
            : `üìà <b>Recent top-ups:</b>\n`

          spendingDetails.recentTopUps.forEach((payment, index) => {
            const date = new Date(payment.payment_date).toLocaleDateString(
              'ru-RU'
            )
            const stars = Math.floor((payment.stars || 0) * 100) / 100
            const amount = Math.floor((payment.amount || 0) * 100) / 100

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –∏–∫–æ–Ω–∫—É
            let paymentIcon = 'üìà'
            let paymentMethod = ''

            if (
              payment.currency === 'RUB' &&
              (payment.payment_method === 'Robokassa' ||
                payment.payment_method === 'Manual')
            ) {
              paymentIcon = 'üí≥'
              paymentMethod = isRu ? ' (Robokassa)' : ' (Robokassa)'
            } else if (
              (payment.currency === 'XTR' || payment.currency === 'STARS') &&
              payment.payment_method === 'Telegram'
            ) {
              paymentIcon = '‚≠ê'
              paymentMethod = isRu ? ' (Telegram Stars)' : ' (Telegram Stars)'
            }

            message += `   ${index + 1}. ${paymentIcon} ${date}: ${stars}‚≠ê`
            if (payment.currency === 'RUB' && amount > 0) {
              message += ` (${amount} —Ä—É–±.)`
            }
            message += paymentMethod
            message += `\n`
          })
          message += '\n'
        }

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã
        if (spendingDetails.recentOutcomes.length > 0) {
          message += isRu
            ? `üìâ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:</b>\n`
            : `üìâ <b>Recent expenses:</b>\n`

          spendingDetails.recentOutcomes.forEach((payment, index) => {
            const date = new Date(payment.payment_date).toLocaleDateString(
              'ru-RU'
            )
            const stars = Math.floor((payment.stars || 0) * 100) / 100
            const serviceEmoji = getServiceEmoji(
              payment.service_type || 'unknown'
            )
            const serviceTitle = getServiceDisplayTitle(
              (payment.service_type || 'unknown') as UserService
            )

            message += `   ${index + 1}. üìâ ${date}: ${stars}‚≠ê - ${serviceEmoji} ${serviceTitle}\n`
          })
        }

        await ctx.reply(message, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìä –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç Excel',
                  callback_data: 'download_excel_report',
                },
              ],
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
                  callback_data: 'back_to_menu',
                },
              ],
            ],
          },
        })
      }

      // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } catch (error) {
      console.error('Error in balanceScene:', error)
      const isRu = ctx.from?.language_code === 'ru'
      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ'
          : '‚ùå Error occurred while getting balance information'
      )
      await ctx.scene.enter(ModeEnum.MainMenu)
    }
  }
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞
balanceScene.action('download_excel_report', async (ctx: MyContext) => {
  try {
    const isRu = ctx.from?.language_code === 'ru'
    const userId = ctx.from?.id.toString() || ''

    await ctx.answerCbQuery(
      isRu ? 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...' : 'üìä Generating report...'
    )

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await ctx.editMessageText(
      isRu
        ? 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π Excel-–æ—Ç—á–µ—Ç...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'
        : 'üìä Generating detailed Excel report...\n‚è≥ This may take a few seconds',
      { parse_mode: 'HTML' }
    )

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
    const excelBuffer = await generateUserExcelReport(userId)

    // –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const { data: userInfo } = await supabase
      .from('users')
      .select('username')
      .eq('telegram_id', userId)
      .single()

    const filename = `financial_report_${userInfo?.username || userId}_${new Date().toISOString().split('T')[0]}.xlsx`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await ctx.replyWithDocument(
      {
        source: excelBuffer,
        filename: filename,
      },
      {
        caption: isRu
          ? `üìä <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n` +
            `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n` +
            `üìã –í–∫–ª—é—á–∞–µ—Ç: –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º, –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é\n\n` +
            `üí° <i>–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ Google Sheets –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>`
          : `üìä <b>Your personal financial report</b>\n\n` +
            `üìÖ Date: ${new Date().toLocaleDateString('en-US')}\n` +
            `üìã Includes: all transactions, service analytics, detailed history\n\n` +
            `üí° <i>Open the file in Excel or Google Sheets for best viewing</i>`,
        parse_mode: 'HTML',
      }
    )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.editMessageText(
      isRu
        ? '‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
        : '‚úÖ Report successfully generated and sent!',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: isRu ? 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' : 'üîô Back to menu',
                callback_data: 'back_to_menu',
              },
            ],
          ],
        },
      }
    )
  } catch (error) {
    console.error('Error generating Excel report:', error)
    const isRu = ctx.from?.language_code === 'ru'

    await ctx.editMessageText(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå Error occurred while generating report. Please try again later.',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: isRu ? 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' : 'üîô Back to menu',
                callback_data: 'back_to_menu',
              },
            ],
          ],
        },
      }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
balanceScene.action('back_to_menu', async (ctx: MyContext) => {
  await ctx.answerCbQuery()
  await ctx.scene.enter(ModeEnum.MainMenu)
})

// –§—É–Ω–∫—Ü–∏—è getServiceEmoji —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ @/utils/serviceMapping
