import { MyContext } from '@/interfaces'
import { Scenes } from 'telegraf'
import { getUserBalance, supabase } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'

export const balanceScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.BalanceScene,
  async (ctx: MyContext) => {
    const userId = ctx.from?.id || 0
    const normalizedId = normalizeTelegramId(userId)
    const isRu = ctx.from?.language_code === 'ru'

    try {
      logger.info('üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ:', {
        description: 'Getting balance information',
        userId: normalizedId,
        bot: ctx.botInfo.username,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const balance = await getUserBalance(normalizedId, ctx.botInfo.username)

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
      const { data: payments, error: paymentsError } = await supabase
        .from('payments_v2')
        .select('amount, type, payment_method, status, description')
        .eq('telegram_id', normalizedId)
        .eq('bot_name', ctx.botInfo.username)

      if (paymentsError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', {
          description: 'Error getting payments',
          error: paymentsError,
          userId: normalizedId,
        })
        throw paymentsError
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        total_added: 0,
        total_spent: 0,
        services: {} as Record<string, number>,
      }

      // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π
      if (payments) {
        payments.forEach(payment => {
          if (payment.status === 'COMPLETED') {
            const amount = Number(payment.amount)

            // –î–æ—Ö–æ–¥
            if (
              payment.type === 'money_income' ||
              payment.type === 'money_income' ||
              payment.description?.toLowerCase().includes('refund')
            ) {
              stats.total_added += amount
            }
            // –†–∞—Å—Ö–æ–¥
            else if (
              payment.type === 'money_expense' ||
              payment.type === 'money_expense'
            ) {
              stats.total_spent += amount

              // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
              const service = payment.payment_method
              if (service) {
                stats.services[service] =
                  (stats.services[service] || 0) + amount
              }
            }
          }
        })
      }

      // –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã
      const bonusStars = Math.max(
        0,
        balance - (stats.total_added - stats.total_spent)
      )

      let message = isRu
        ? `üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:</b>\n\n`
        : `üí∞ <b>Balance Information:</b>\n\n`

      message += isRu
        ? `‚ú® –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} ‚≠êÔ∏è\n` +
          (bonusStars > 0
            ? `üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã: ${bonusStars.toFixed(2)} ‚≠êÔ∏è\n`
            : '')
        : `‚ú® Current balance: ${balance.toFixed(2)} ‚≠êÔ∏è\n` +
          (bonusStars > 0
            ? `üéÅ Bonus stars: ${bonusStars.toFixed(2)} ‚≠êÔ∏è\n`
            : '')

      message += isRu
        ? `\nüí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n` +
          `‚ûï –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: ${stats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `‚ûñ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.total_spent.toFixed(2)} ‚≠êÔ∏è\n`
        : `\nüí≥ <b>Payment History:</b>\n` +
          `‚ûï Total added: ${stats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `‚ûñ Total spent: ${stats.total_spent.toFixed(2)} ‚≠êÔ∏è\n`

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
      if (stats.total_spent > 0) {
        message += isRu
          ? `\nü§ñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n`
          : `\nü§ñ <b>Services Usage:</b>\n`

        Object.entries(stats.services)
          .sort(([, a], [, b]) => b - a) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
          .forEach(([service, amount]) => {
            if (amount > 0) {
              const serviceEmoji = getServiceEmoji(service)
              const serviceName = getServiceName(service, isRu)
              message += `${serviceEmoji} ${serviceName}: ${amount.toFixed(
                2
              )} ‚≠êÔ∏è\n`
            }
          })
      }

      logger.info('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:', {
        description: 'Balance information prepared',
        userId: normalizedId,
        balance,
        total_added: stats.total_added,
        total_spent: stats.total_spent,
      })

      await ctx.reply(message, { parse_mode: 'HTML' })
      await ctx.scene.enter('menuScene')
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error in balance scene',
        error: error instanceof Error ? error.message : String(error),
        userId: ctx.from?.id,
      })

      const errorMessage = isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå Error getting balance information. Please try again later.'

      await ctx.reply(errorMessage)
      await ctx.scene.enter('menuScene')
    }
  }
)

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å–µ—Ä–≤–∏—Å–∞
function getServiceEmoji(service: string): string {
  const emojis: Record<string, string> = {
    [ModeEnum.NeuroPhoto]: 'üì∏',
    [ModeEnum.NeuroPhotoV2]: 'üì∏',
    [ModeEnum.TextToImage]: 'üé®',
    [ModeEnum.TextToSpeech]: 'üîä',
    [ModeEnum.Voice]: 'üó£',
    [ModeEnum.ImageToVideo]: 'üé¨',
    [ModeEnum.TextToVideo]: 'üìΩ',
    [ModeEnum.LipSync]: 'üëÑ',
    [ModeEnum.ChatWithAvatar]: 'üí≠',
    [ModeEnum.DigitalAvatarBody]: 'ü§ñ',
    [ModeEnum.DigitalAvatarBodyV2]: 'ü§ñ',
    [ModeEnum.Avatar]: 'üë§',
    [ModeEnum.ImageToPrompt]: 'üîç',
    [ModeEnum.SelectModel]: 'üìã',
    [ModeEnum.SelectModelWizard]: 'üßô‚Äç‚ôÇÔ∏è',
  }
  return emojis[service] || '‚≠êÔ∏è'
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
function getServiceName(service: string, isRu: boolean): string {
  const names: Record<string, [string, string]> = {
    [ModeEnum.NeuroPhoto]: ['–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ', 'Neuro Photo'],
    [ModeEnum.NeuroPhotoV2]: ['–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ V2', 'Neuro Photo V2'],
    [ModeEnum.TextToImage]: ['–¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'Text to Image'],
    [ModeEnum.TextToSpeech]: ['–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å', 'Text to Speech'],
    [ModeEnum.Voice]: ['–ì–æ–ª–æ—Å', 'Voice'],
    [ModeEnum.ImageToVideo]: ['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ', 'Image to Video'],
    [ModeEnum.TextToVideo]: ['–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ', 'Text to Video'],
    [ModeEnum.LipSync]: ['–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±', 'Lip Sync'],
    [ModeEnum.ChatWithAvatar]: ['–ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º', 'Chat with Avatar'],
    [ModeEnum.DigitalAvatarBody]: ['–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä', 'Digital Avatar'],
    [ModeEnum.DigitalAvatarBodyV2]: ['–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä V2', 'Digital Avatar V2'],
    [ModeEnum.Avatar]: ['–ê–≤–∞—Ç–∞—Ä', 'Avatar'],
    [ModeEnum.ImageToPrompt]: ['–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'Image Analysis'],
    [ModeEnum.SelectModel]: ['–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏', 'Model Selection'],
    [ModeEnum.SelectModelWizard]: [
      '–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏',
      'Model Selection Wizard',
    ],
  }
  return names[service]
    ? isRu
      ? names[service][0]
      : names[service][1]
    : service
}
