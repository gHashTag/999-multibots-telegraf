import { MyContext } from '@/types'
import { Scenes } from 'telegraf'
import { getUserBalanceStats } from '@/core/supabase'
import { ModeEnum } from '@/types/modes'
import { logger } from '@/utils/logger'
import { normalizeTelegramId } from '@/types/telegram.interface'
import { isDev } from '@/config'
import { convertRublesToStars } from '@/price/helpers'

import { isRubPayment } from '@/price/helpers/costHelpers'

import moment from 'moment'

export const balanceScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.BalanceScene,
  async (ctx: MyContext) => {
    const userId = isDev ? '2086031075' : ctx.from?.id || 0 // –í –∫–æ–¥–µ –±—ã–ª –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω ID, –¥–ª—è –¥–µ–±–∞–≥–∞. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º ctx.from?.id
    const normalizedId = normalizeTelegramId(userId)
    const isRu = ctx.from?.language_code === 'ru'

    try {
      logger.info('üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ:', {
        description: 'Getting balance information',
        userId: normalizedId,
        bot: ctx.botInfo.username,
      })

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const stats = await getUserBalanceStats(
        normalizedId,
        ctx.botInfo.username
      )

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞:', {
        balance: stats.stars,
        total_added: stats.total_added,
        total_spent: stats.total_spent,
        bonus_stars: stats.bonus_stars,
        added_stars: stats.added_stars,
        added_rub: stats.added_rub,
        services: stats.services,
        payment_methods: stats.payment_methods,
        payments_count: stats.payments?.length || 0,
        bot: ctx.botInfo.username,
      })

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã –∏ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const rubIncome =
        stats.payments
          ?.filter(p => p.currency === 'RUB' && p.type === 'money_income')
          .reduce((sum, p) => sum + Number(p.stars || 0), 0) || 0

      const starsIncome =
        stats.payments
          ?.filter(p => p.currency === 'STARS' && p.type === 'money_income')
          .reduce((sum, p) => sum + Number(p.stars || 0), 0) || 0

      const systemIncome =
        stats.payments
          ?.filter(p => p.type === 'system')
          .reduce((sum, p) => sum + Number(p.stars || 0), 0) || 0

      console.log('üîé –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
        rubIncome,
        starsIncome,
        systemIncome,
        total: rubIncome + starsIncome + systemIncome,
        expected_total: stats.total_added,
        allPaymentsCount: stats.payments?.length || 0,
      })

      // –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (stats.payments && stats.payments.length > 0) {
        console.log(
          'üí∞ –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π:',
          stats.payments.slice(0, 5).map(p => ({
            type: p.type,
            amount: p.amount,
            stars: p.stars,
            currency: p.currency,
            description: p.description?.substring(0, 30),
          }))
        )
      }

      // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let message = isRu
        ? `üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:</b>\n\n`
        : `üí∞ <b>Balance Information:</b>\n\n`

      message += isRu
        ? `‚ú® –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          (stats.bonus_stars > 0
            ? `üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã: ${stats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n`
            : '')
        : `‚ú® Current balance: ${stats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          (stats.bonus_stars > 0
            ? `üéÅ Bonus stars: ${stats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n`
            : '')

      message += isRu
        ? `\nüí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n` +
          `‚ûï –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: ${stats.total_added.toFixed(2)} ‚≠êÔ∏è\n`
        : `\nüí≥ <b>Payment History:</b>\n` +
          `‚ûï Total added: ${stats.total_added.toFixed(2)} ‚≠êÔ∏è\n`

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–∏–ø–∞–º
      const positivePayments =
        stats.payments?.filter(payment => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
          return (
            (payment?.status === 'COMPLETED' ||
              payment?.status === undefined) &&
            ['money_income', 'system'].includes(payment.type || '')
          )
        }) || []

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é isRubPayment –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É–±–ª—ë–≤—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
      const rubPayments = positivePayments
        .filter(payment => isRubPayment(payment) && Number(payment.amount) > 0)
        .sort(
          (a, b) =>
            new Date(b.payment_date || 0).getTime() -
            new Date(a.payment_date || 0).getTime()
        )
        .slice(0, 3)

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –∑–≤–µ–∑–¥—ã
      const starsPayments = positivePayments
        .filter(
          payment =>
            payment.currency === 'STARS' &&
            payment.type === 'money_income' &&
            Number(payment.amount) > 0
        )
        .sort(
          (a, b) =>
            new Date(b.payment_date || 0).getTime() -
            new Date(a.payment_date || 0).getTime()
        )
        .slice(0, 3)

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥ –∑–∞ —Ä—É–±–ª–∏
      if (rubPayments.length > 0) {
        message += isRu
          ? `\nüíµ <b>–ö—É–ø–ª–µ–Ω–æ –∑–∞ —Ä—É–±–ª–∏:</b>\n`
          : `\nüíµ <b>Purchased with rubles:</b>\n`

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–ª–∞—Ç–µ–∂–∞
        rubPayments.forEach(payment => {
          const date = payment.payment_date
            ? moment(payment.payment_date).format('DD.MM.YYYY')
            : '‚Äî'
          const amount = payment.amount || 0
          const stars = payment.stars || 0
          message += isRu
            ? `‚Ä¢ ${date}: ${amount} ‚ÇΩ = ${stars} ‚≠êÔ∏è\n`
            : `‚Ä¢ ${date}: ${amount} ‚ÇΩ = ${stars} ‚≠êÔ∏è\n`
        })

        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π –±–æ–ª—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
        if (rubPayments.length > 3) {
          message += isRu
            ? `‚Ä¢ ... –∏ –µ—â—ë ${rubPayments.length - 3} –ø–ª–∞—Ç–µ–∂–µ–π\n`
            : `‚Ä¢ ... and ${rubPayments.length - 3} more payments\n`
        }

        // –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        const exampleRub = 1000
        const exampleStars = convertRublesToStars(exampleRub)
        message += isRu
          ? `‚ÑπÔ∏è <i>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${exampleRub} ‚ÇΩ = ${exampleStars} ‚≠êÔ∏è</i>\n`
          : `‚ÑπÔ∏è <i>Current rate: ${exampleRub} ‚ÇΩ = ${exampleStars} ‚≠êÔ∏è</i>\n`
      } else {
        message += isRu
          ? `\nüíµ <b>–ö—É–ø–ª–µ–Ω–æ –∑–∞ —Ä—É–±–ª–∏:</b>\n‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ\n`
          : `\nüíµ <b>Purchased with rubles:</b>\n‚Ä¢ No purchases\n`
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∑–∞ –∑–≤–µ–∑–¥—ã
      message += isRu
        ? `\n‚≠êÔ∏è <b>–ö—É–ø–ª–µ–Ω–æ –∑–∞ –∑–≤–µ–∑–¥—ã:</b>\n`
        : `\n‚≠êÔ∏è <b>Purchased with stars:</b>\n`

      if (starsPayments.length > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–ª–∞—Ç–µ–∂–∞
        starsPayments.forEach(payment => {
          const date = payment.payment_date
            ? moment(payment.payment_date).format('DD.MM.YYYY')
            : '‚Äî'
          const stars = payment.stars || 0
          message += isRu
            ? `‚Ä¢ ${date}: ${stars} ‚≠êÔ∏è\n`
            : `‚Ä¢ ${date}: ${stars} ‚≠êÔ∏è\n`
        })

        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π –±–æ–ª—å—à–µ 3, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
        if (starsPayments.length > 3) {
          message += isRu
            ? `‚Ä¢ ... –∏ –µ—â—ë ${starsPayments.length - 3} –ø–ª–∞—Ç–µ–∂–µ–π\n`
            : `‚Ä¢ ... and ${starsPayments.length - 3} more payments\n`
        }
      } else {
        message += isRu ? `‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ\n` : `‚Ä¢ No purchases\n`
      }

      // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
      message += isRu
        ? `\n<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:</b>\n`
        : `\n<b>Incoming details:</b>\n`

      if (rubIncome > 0) {
        message += isRu
          ? `‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –æ–ø–ª–∞—Ç—É</b>: ${rubIncome.toFixed(2)} ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Added through payment</b>: ${rubIncome.toFixed(2)} ‚≠êÔ∏è\n`
      } else {
        message += isRu
          ? `‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –æ–ø–ª–∞—Ç—É</b>: 0.00 ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Added through payment</b>: 0.00 ‚≠êÔ∏è\n`
      }

      if (starsIncome > 0) {
        message += isRu
          ? `‚Ä¢ <b>–ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥</b>: ${starsIncome.toFixed(2)} ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Direct stars top-up</b>: ${starsIncome.toFixed(2)} ‚≠êÔ∏è\n`
      } else {
        message += isRu
          ? `‚Ä¢ <b>–ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥</b>: 0.00 ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Direct stars top-up</b>: 0.00 ‚≠êÔ∏è\n`
      }

      if (systemIncome > 0) {
        message += isRu
          ? `‚Ä¢ <b>–ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è</b>: ${systemIncome.toFixed(2)} ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Bonus credits</b>: ${systemIncome.toFixed(2)} ‚≠êÔ∏è\n`
      } else {
        message += isRu
          ? `‚Ä¢ <b>–ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è</b>: 0.00 ‚≠êÔ∏è\n`
          : `‚Ä¢ <b>Bonus credits</b>: 0.00 ‚≠êÔ∏è\n`
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
      message += isRu
        ? `‚ûñ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.total_spent.toFixed(2)} ‚≠êÔ∏è\n`
        : `‚ûñ Total spent: ${stats.total_spent.toFixed(2)} ‚≠êÔ∏è\n`

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
      if (stats.total_spent > 0 && Object.keys(stats.services).length > 0) {
        message += isRu
          ? `\nü§ñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n`
          : `\nü§ñ <b>Services Usage:</b>\n`

        Object.entries(stats.services)
          .sort(([, a], [, b]) => b - a) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
          .forEach(([service, amount]) => {
            if (amount > 0) {
              const serviceEmoji = getServiceEmoji(service)
              const serviceName = getServiceName(service, isRu)
              message += `${serviceEmoji} ${serviceName}: ${amount.toFixed(
                2
              )} ‚≠êÔ∏è\n`
            }
          })
      } else {
        message += isRu
          ? `\nü§ñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n`
          : `\nü§ñ <b>Services Usage:</b>\n‚Ä¢ No services used yet\n`
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      message += isRu
        ? `\nü§ñ <b>–ß–∞—Ç-–±–æ—Ç:</b> ${ctx.botInfo.username}`
        : `\nü§ñ <b>Chatbot:</b> ${ctx.botInfo.username}`

      logger.info('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:', {
        description: 'Balance information prepared',
        userId: normalizedId,
        balance: stats.stars,
        total_added: stats.total_added,
        total_spent: stats.total_spent,
        services_count: Object.keys(stats.services).length,
      })

      await ctx.reply(message, { parse_mode: 'HTML' })
      await ctx.scene.enter(ModeEnum.MenuScene)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error in balance scene',
        error: error instanceof Error ? error.message : String(error),
        userId: ctx.from?.id,
      })

      const errorMessage = isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå Error getting balance information. Please try again later.'

      await ctx.reply(errorMessage)
      await ctx.scene.enter(ModeEnum.MenuScene)
    }
  }
)

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å–µ—Ä–≤–∏—Å–∞
function getServiceEmoji(service: string): string {
  switch (service) {
    case ModeEnum.NeuroPhoto:
    case 'neuro_photo':
      return 'üì∏'
    case ModeEnum.NeuroPhotoV2:
      return 'üì∏'
    case ModeEnum.TextToImage:
    case 'text_to_image':
      return 'üé®'
    case ModeEnum.TextToSpeech:
      return 'üîä'
    case ModeEnum.Voice:
    case 'voice':
      return 'üó£'
    case ModeEnum.ImageToVideo:
    case 'image_to_video':
      return 'üé¨'
    case ModeEnum.TextToVideo:
    case 'text_to_video':
      return 'üìΩ'
    case ModeEnum.LipSync:
    case 'lip_sync':
      return 'üëÑ'
    case ModeEnum.ChatWithAvatar:
    case 'chat_with_avatar':
      return 'üí≠'
    case ModeEnum.DigitalAvatarBody:
    case 'digital_avatar':
      return 'ü§ñ'
    case ModeEnum.DigitalAvatarBodyV2:
    case 'digital_avatar_v2':
      return 'ü§ñ'
    case ModeEnum.Avatar:
    case 'avatar':
      return 'üë§'
    case ModeEnum.ImageToPrompt:
      return 'üîç'
    case ModeEnum.SelectModel:
    case 'select_model':
      return 'üìã'
    case ModeEnum.SelectModelWizard:
      return 'üßô‚Äç‚ôÇÔ∏è'
    case 'system':
      return '‚öôÔ∏è'
    default:
      return '‚≠êÔ∏è'
  }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
function getServiceName(service: string, isRu: boolean): string {
  switch (service) {
    case ModeEnum.NeuroPhoto:
    case 'neuro_photo':
      return isRu ? '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ' : 'Neuro Photo'
    case ModeEnum.NeuroPhotoV2:
      return isRu ? '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ V2' : 'Neuro Photo V2'
    case ModeEnum.TextToImage:
    case 'text_to_image':
      return isRu ? '–¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'Text to Image'
    case ModeEnum.TextToSpeech:
      return isRu ? '–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å' : 'Text to Speech'
    case ModeEnum.Voice:
    case 'voice':
      return isRu ? '–ì–æ–ª–æ—Å' : 'Voice'
    case ModeEnum.ImageToVideo:
    case 'image_to_video':
      return isRu ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ' : 'Image to Video'
    case ModeEnum.TextToVideo:
    case 'text_to_video':
      return isRu ? '–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ' : 'Text to Video'
    case ModeEnum.LipSync:
    case 'lip_sync':
      return isRu ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±' : 'Lip Sync'
    case ModeEnum.ChatWithAvatar:
    case 'chat_with_avatar':
      return isRu ? '–ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º' : 'Chat with Avatar'
    case ModeEnum.DigitalAvatarBody:
    case 'digital_avatar':
      return isRu ? '–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä' : 'Digital Avatar'
    case ModeEnum.DigitalAvatarBodyV2:
    case 'digital_avatar_v2':
      return isRu ? '–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä V2' : 'Digital Avatar V2'
    case ModeEnum.Avatar:
    case 'avatar':
      return isRu ? '–ê–≤–∞—Ç–∞—Ä' : 'Avatar'
    case ModeEnum.ImageToPrompt:
      return isRu ? '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : 'Image Analysis'
    case ModeEnum.SelectModel:
    case 'select_model':
      return isRu ? '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏' : 'Model Selection'
    case ModeEnum.SelectModelWizard:
      return isRu ? '–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏' : 'Model Selection Wizard'
    case 'system':
      return isRu ? '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' : 'System Operations'
    default:
      return service
  }
}
