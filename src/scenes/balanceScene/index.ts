import { MyContext } from '@/interfaces'
import { Scenes } from 'telegraf'
import { getUserBalance, supabase } from '@/core/supabase'
import { ModeEnum } from '@/price/helpers/modelsCost'

export const balanceScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.BalanceScene,
  async (ctx: MyContext) => {
    try {
      console.log('üéØ CASE: balanceScene - Getting user balance info', {
        description: 'Getting detailed balance information',
        userId: ctx.from?.id,
      })

      const isRu = ctx.from?.language_code === 'ru'
      const userId = ctx.from?.id || 0

      // Get current balance
      const balance = await getUserBalance(userId, ctx.botInfo.username)

      // Get payment statistics using direct query
      const { data: payments } = await supabase
        .from('payments_v2')
        .select('amount, type, payment_method, status')
        .eq('telegram_id', userId)

      // Initialize statistics
      const stats = {
        total_added: 0,
        total_spent: 0,
        services: {} as Record<string, number>,
      }

      // Calculate statistics from payments
      if (payments) {
        payments.forEach(payment => {
          // Only count COMPLETED payments
          if (payment.status === 'COMPLETED') {
            if (payment.type === 'income') {
              stats.total_added += Number(payment.amount)
            } else if (payment.type === 'outcome') {
              stats.total_spent += Number(payment.amount)

              // Group by payment method for services usage
              const service = payment.payment_method
              if (service) {
                stats.services[service] =
                  (stats.services[service] || 0) + Number(payment.amount)
              }
            }
          }
        })
      }

      // Calculate bonus stars
      const bonusStars = Math.max(
        0,
        balance - (stats.total_added - stats.total_spent)
      )

      let message = isRu
        ? `üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:</b>\n\n`
        : `üí∞ <b>Balance Information:</b>\n\n`

      message += isRu
        ? `‚ú® –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} ‚≠êÔ∏è\n` +
          (bonusStars > 0 ? `üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã: ${bonusStars} ‚≠êÔ∏è\n` : '')
        : `‚ú® Current balance: ${balance} ‚≠êÔ∏è\n` +
          (bonusStars > 0 ? `üéÅ Bonus stars: ${bonusStars} ‚≠êÔ∏è\n` : '')

      message += isRu
        ? `\nüí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n` +
          `‚ûï –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: ${stats.total_added} ‚≠êÔ∏è\n` +
          `‚ûñ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.total_spent} ‚≠êÔ∏è\n`
        : `\nüí≥ <b>Payment History:</b>\n` +
          `‚ûï Total added: ${stats.total_added} ‚≠êÔ∏è\n` +
          `‚ûñ Total spent: ${stats.total_spent} ‚≠êÔ∏è\n`

      // Add service usage statistics if there are any expenses
      if (stats.total_spent > 0) {
        message += isRu
          ? `\nü§ñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n`
          : `\nü§ñ <b>Services Usage:</b>\n`

        // Add only services that were used
        Object.entries(stats.services).forEach(([service, amount]) => {
          if (amount > 0) {
            const serviceEmoji = getServiceEmoji(service)
            const serviceName = getServiceName(service, isRu)
            message += isRu
              ? `${serviceEmoji} ${serviceName}: ${amount} ‚≠êÔ∏è\n`
              : `${serviceEmoji} ${serviceName}: ${amount} ‚≠êÔ∏è\n`
          }
        })
      }

      await ctx.reply(message, { parse_mode: 'HTML' })
      await ctx.scene.enter('menuScene')
    } catch (error) {
      console.error('‚ùå Error sending balance:', error)
      throw error
    }
  }
)

// Helper function to get emoji for service
function getServiceEmoji(service: string): string {
  const emojis: Record<string, string> = {
    [ModeEnum.NeuroPhoto]: 'üì∏',
    [ModeEnum.NeuroPhotoV2]: 'üì∏',
    [ModeEnum.TextToImage]: 'üé®',
    [ModeEnum.TextToSpeech]: 'üîä',
    [ModeEnum.Voice]: 'üó£',
    [ModeEnum.ImageToVideo]: 'üé¨',
    [ModeEnum.TextToVideo]: 'üìΩ',
    [ModeEnum.LipSync]: 'üëÑ',
    [ModeEnum.ChatWithAvatar]: 'üí≠',
    [ModeEnum.DigitalAvatarBody]: 'ü§ñ',
    [ModeEnum.DigitalAvatarBodyV2]: 'ü§ñ',
    [ModeEnum.Avatar]: 'üë§',
    [ModeEnum.ImageToPrompt]: 'üîç',
    [ModeEnum.SelectModel]: 'üìã',
    [ModeEnum.SelectModelWizard]: 'üßô‚Äç‚ôÇÔ∏è',
  }
  return emojis[service] || '‚≠êÔ∏è'
}

// Helper function to get service name
function getServiceName(service: string, isRu: boolean): string {
  const names: Record<string, [string, string]> = {
    [ModeEnum.NeuroPhoto]: ['–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ', 'Neuro Photo'],
    [ModeEnum.NeuroPhotoV2]: ['–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ V2', 'Neuro Photo V2'],
    [ModeEnum.TextToImage]: ['–¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'Text to Image'],
    [ModeEnum.TextToSpeech]: ['–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å', 'Text to Speech'],
    [ModeEnum.Voice]: ['–ì–æ–ª–æ—Å', 'Voice'],
    [ModeEnum.ImageToVideo]: ['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ', 'Image to Video'],
    [ModeEnum.TextToVideo]: ['–¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ', 'Text to Video'],
    [ModeEnum.LipSync]: ['–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±', 'Lip Sync'],
    [ModeEnum.ChatWithAvatar]: ['–ß–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º', 'Chat with Avatar'],
    [ModeEnum.DigitalAvatarBody]: ['–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä', 'Digital Avatar'],
    [ModeEnum.DigitalAvatarBodyV2]: ['–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä V2', 'Digital Avatar V2'],
    [ModeEnum.Avatar]: ['–ê–≤–∞—Ç–∞—Ä', 'Avatar'],
    [ModeEnum.ImageToPrompt]: ['–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'Image Analysis'],
    [ModeEnum.SelectModel]: ['–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏', 'Model Selection'],
    [ModeEnum.SelectModelWizard]: [
      '–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏',
      'Model Selection Wizard',
    ],
  }
  return names[service]
    ? isRu
      ? names[service][0]
      : names[service][1]
    : service
}
