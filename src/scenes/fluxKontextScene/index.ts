import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import { FLUX_KONTEXT_MODELS } from '@/price/models'
import { isRussian } from '@/helpers'
import { Markup } from 'telegraf'
import { handleFluxKontextCommand } from '@/commands/fluxKontextCommand'
import { levels } from '@/menu/mainMenu'
import { getUserBalance } from '@/core/supabase'
import { sendBalanceMessage } from '@/price/helpers'
import { ModeEnum } from '@/interfaces'

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
export const fluxKontextScene = new Scenes.BaseScene<MyContext>(
  'flux_kontext_scene'
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–µ–ª–µ–π —Å —Ü–µ–Ω–∞–º–∏
const showFluxKontextModels = async (ctx: MyContext) => {
  const isRu = isRussian(ctx)

  if (!ctx.from?.id) {
    await ctx.reply(
      isRu ? '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '‚ùå Error getting user ID'
    )
    await ctx.scene.leave()
    return
  }

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userBalance = await getUserBalance(ctx.from.id.toString())

  const proModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-pro']
  const maxModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-max']

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (ctx.botInfo?.username) {
    await sendBalanceMessage(
      ctx,
      userBalance,
      Math.min(proModel.costPerImage, maxModel.costPerImage), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      isRu,
      ctx.botInfo.username
    )
  }

  const title = isRu
    ? 'üé® *FLUX Kontext* - AI –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    : 'üé® *FLUX Kontext* - AI Image Editing'

  const description = isRu
    ? `‚ú® *–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã  
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á—ë—Å–∫—É –∏ –æ–¥–µ–∂–¥—É
‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*`
    : `‚ú® *What you can do:*
‚Ä¢ Change image style
‚Ä¢ Add/remove elements
‚Ä¢ Change hairstyle and clothing  
‚Ä¢ Replace background
‚Ä¢ Edit text in images
‚Ä¢ Artistic stylization

üí∞ *Pricing:*`

  const proInfo = isRu
    ? `üíº **${proModel.shortName}** - ${proModel.costPerImage} ‚≠ê
${proModel.description_ru}`
    : `üíº **${proModel.shortName}** - ${proModel.costPerImage} ‚≠ê
${proModel.description_en}`

  const maxInfo = isRu
    ? `üöÄ **${maxModel.shortName}** - ${maxModel.costPerImage} ‚≠ê
${maxModel.description_ru}`
    : `üöÄ **${maxModel.shortName}** - ${maxModel.costPerImage} ‚≠ê
${maxModel.description_en}`

  const balanceInfo = isRu
    ? `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* ${userBalance} ‚≠ê`
    : `üí∞ *Your balance:* ${userBalance} ‚≠ê`

  const footer = isRu
    ? 'üëá –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞:'
    : 'üëá Choose a model to start:'

  const message = `${title}\n\n${description}\n\n${proInfo}\n\n${maxInfo}\n\n${balanceInfo}\n\n${footer}`

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥ —Ö–æ—Ç—è –±—ã –Ω–∞ —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
  const minPrice = Math.min(proModel.costPerImage, maxModel.costPerImage)
  const canAffordPro = userBalance >= proModel.costPerImage
  const canAffordMax = userBalance >= maxModel.costPerImage

  const keyboard = []

  if (canAffordPro) {
    keyboard.push([
      Markup.button.callback(
        isRu
          ? `üíº FLUX Kontext Pro (${proModel.costPerImage} ‚≠ê)`
          : `üíº FLUX Kontext Pro (${proModel.costPerImage} ‚≠ê)`,
        'flux_kontext_pro'
      ),
    ])
  }

  if (canAffordMax) {
    keyboard.push([
      Markup.button.callback(
        isRu
          ? `üöÄ FLUX Kontext Max (${maxModel.costPerImage} ‚≠ê)`
          : `üöÄ FLUX Kontext Max (${maxModel.costPerImage} ‚≠ê)`,
        'flux_kontext_max'
      ),
    ])
  }

  keyboard.push([
    Markup.button.callback(
      isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel',
      'flux_kontext_cancel'
    ),
  ])

  if (keyboard.length === 1) {
    // –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    await ctx.reply(
      isRu
        ? `‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FLUX Kontext –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${minPrice} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance} ‚≠ê`
        : `‚ùå *Insufficient funds*\n\nFLUX Kontext requires at least ${minPrice} ‚≠ê\nYour balance: ${userBalance} ‚≠ê`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      }
    )
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
    })
  }
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
fluxKontextScene.enter(async ctx => {
  logger.info('FLUX Kontext Scene: Entering scene', {
    telegramId: ctx.from?.id,
  })

  await showFluxKontextModels(ctx)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Pro
fluxKontextScene.action('flux_kontext_pro', async ctx => {
  try {
    await ctx.answerCbQuery()

    if (!ctx.from?.id) {
      await ctx.reply('‚ùå Error getting user ID')
      await ctx.scene.leave()
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    const userBalance = await getUserBalance(ctx.from.id.toString())
    const proModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-pro']

    if (userBalance < proModel.costPerImage) {
      const isRu = isRussian(ctx)
      await ctx.reply(
        isRu
          ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è FLUX Kontext Pro\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${proModel.costPerImage} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance} ‚≠ê`
          : `‚ùå Insufficient funds for FLUX Kontext Pro\nRequired: ${proModel.costPerImage} ‚≠ê\nYour balance: ${userBalance} ‚≠ê`
      )
      await ctx.scene.leave()
      return
    }

    await ctx.scene.leave()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (ctx.session) {
      ctx.session.kontextSelectedModel = 'pro'
    }

    await handleFluxKontextCommand(ctx)
  } catch (error) {
    logger.error('Error handling FLUX Kontext Pro selection', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Max
fluxKontextScene.action('flux_kontext_max', async ctx => {
  try {
    await ctx.answerCbQuery()

    if (!ctx.from?.id) {
      await ctx.reply('‚ùå Error getting user ID')
      await ctx.scene.leave()
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    const userBalance = await getUserBalance(ctx.from.id.toString())
    const maxModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-max']

    if (userBalance < maxModel.costPerImage) {
      const isRu = isRussian(ctx)
      await ctx.reply(
        isRu
          ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è FLUX Kontext Max\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${maxModel.costPerImage} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance} ‚≠ê`
          : `‚ùå Insufficient funds for FLUX Kontext Max\nRequired: ${maxModel.costPerImage} ‚≠ê\nYour balance: ${userBalance} ‚≠ê`
      )
      await ctx.scene.leave()
      return
    }

    await ctx.scene.leave()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (ctx.session) {
      ctx.session.kontextSelectedModel = 'max'
    }

    await handleFluxKontextCommand(ctx)
  } catch (error) {
    logger.error('Error handling FLUX Kontext Max selection', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
fluxKontextScene.action('flux_kontext_cancel', async ctx => {
  try {
    await ctx.answerCbQuery()
    const isRu = isRussian(ctx)

    await ctx.reply(
      isRu ? '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.' : '‚ùå Action cancelled.',
      Markup.keyboard([
        [
          Markup.button.text(
            isRu ? levels[104].title_ru : levels[104].title_en
          ),
        ],
      ]).resize()
    )

    await ctx.scene.leave()
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    await ctx.scene.enter(ModeEnum.MainMenu)
  } catch (error) {
    logger.error('Error handling FLUX Kontext cancel', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

export default fluxKontextScene
