import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'
import { FLUX_KONTEXT_MODELS } from '../../price/models/FLUX_KONTEXT_MODELS'
import { isRussian } from '../../helpers/language'
import { getUserBalance } from '../../core/supabase'
import { logger } from '../../utils/logger'
import { handleFluxKontextCommand } from '@/commands/fluxKontextCommand'
import { levels } from '@/menu/mainMenu'
import { sendBalanceMessage } from '@/price/helpers'
import { ModeEnum } from '@/interfaces'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ FLUX Kontext
const FLUX_MODES = {
  single: {
    title_ru: 'üñºÔ∏è –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    title_en: 'üñºÔ∏è Single Image Edit',
    description_ru: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    description_en: 'Edit a single image',
    images_required: 1,
  },
  multi: {
    title_ru: 'üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    title_en: 'üîó Multi-Image Combine',
    description_ru: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ',
    description_en: 'Combine two images into one',
    images_required: 2,
  },
  portrait_series: {
    title_ru: 'üë§ –°–µ—Ä–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤',
    title_en: 'üë§ Portrait Series',
    description_ru: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    description_en: 'Generate a series of portraits from one image',
    images_required: 1,
  },
  haircut: {
    title_ru: 'üíá –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∏–∂–∫—É',
    title_en: 'üíá Change Haircut',
    description_ru: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –∏ —Ü–≤–µ—Ç –≤–æ–ª–æ—Å',
    description_en: 'Change hairstyle and hair color',
    images_required: 1,
  },
  landmarks: {
    title_ru: 'üèõÔ∏è –ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –º–µ—Å—Ç–∞',
    title_en: 'üèõÔ∏è Iconic Locations',
    description_ru: '–ü–æ–º–µ—Å—Ç–∏—Ç—å —Å–µ–±—è –Ω–∞ —Ñ–æ–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
    description_en: 'Put yourself in front of famous landmarks',
    images_required: 1,
  },
  headshot: {
    title_ru: 'üì∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç',
    title_en: 'üì∏ Professional Headshot',
    description_ru: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    description_en: 'Generate a professional headshot from any image',
    images_required: 1,
  },
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
export const fluxKontextScene = new Scenes.BaseScene<MyContext>(
  'flux_kontext_scene'
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
const createModeSelectionKeyboard = (isRu: boolean) => {
  const keyboard = []

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º—ã –ø–æ 2 –≤ —Ä—è–¥
  const modes = Object.entries(FLUX_MODES)
  for (let i = 0; i < modes.length; i += 2) {
    const row = []
    const [modeKey1, mode1] = modes[i]
    row.push(
      Markup.button.callback(
        isRu ? mode1.title_ru : mode1.title_en,
        `flux_mode_${modeKey1}`
      )
    )

    if (i + 1 < modes.length) {
      const [modeKey2, mode2] = modes[i + 1]
      row.push(
        Markup.button.callback(
          isRu ? mode2.title_ru : mode2.title_en,
          `flux_mode_${modeKey2}`
        )
      )
    }

    keyboard.push(row)
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
  keyboard.push([
    Markup.button.callback(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel', 'flux_kontext_cancel'),
  ])

  return Markup.inlineKeyboard(keyboard)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
const createModelSelectionKeyboard = (isRu: boolean) => {
  const proModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-pro']
  const maxModel = FLUX_KONTEXT_MODELS['black-forest-labs/flux-kontext-max']

  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        `üíº Pro (${proModel.costPerImage}‚≠ê)`,
        'flux_model_pro'
      ),
    ],
    [
      Markup.button.callback(
        `üöÄ Max (${maxModel.costPerImage}‚≠ê)`,
        'flux_model_max'
      ),
    ],
    [Markup.button.callback(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel', 'flux_kontext_cancel')],
  ])
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
fluxKontextScene.enter(async ctx => {
  try {
    const isRu = isRussian(ctx)

    if (!ctx.from?.id) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error getting user ID'
      )
      await ctx.scene.leave()
      return
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (ctx.session) {
      ctx.session.fluxKontextMode = undefined
      ctx.session.fluxKontextImageA = undefined
      ctx.session.fluxKontextImageB = undefined
      ctx.session.awaitingFluxKontextImageA = false
      ctx.session.awaitingFluxKontextImageB = false
      ctx.session.fluxKontextStep = 'mode_select'
      ctx.session.kontextModelType = undefined
    }

    const title = isRu
      ? 'üé® *FLUX Kontext* - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
      : 'üé® *FLUX Kontext* - Advanced AI Image Editing'

    const description = isRu
      ? `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

üñºÔ∏è *–û–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ* - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
üîó *–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π* - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ
üë§ *–°–µ—Ä–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤* - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
üíá *–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∏–∂–∫—É* - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏ –∏ —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å
üèõÔ∏è *–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –º–µ—Å—Ç–∞* - –ø–æ–º–µ—â–µ–Ω–∏–µ —Å–µ–±—è –Ω–∞ —Ñ–æ–Ω–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
üì∏ *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç* - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞

üí° *–î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ*`
      : `Choose editing mode:

üñºÔ∏è *Single Image Edit* - classic editing of one image
üîó *Multi-Image Combine* - combine two images into one
üë§ *Portrait Series* - generate a series of portraits from one image
üíá *Change Haircut* - change hairstyle and hair color  
üèõÔ∏è *Iconic Locations* - put yourself in front of famous landmarks
üì∏ *Professional Headshot* - generate a professional headshot

üí° *For best results, write prompts in English*`

    await ctx.reply(title + '\n\n' + description, {
      parse_mode: 'Markdown',
      reply_markup: createModeSelectionKeyboard(isRu).reply_markup,
    })
  } catch (error) {
    logger.error('Error in FLUX Kontext scene enter', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
    await ctx.scene.leave()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
Object.keys(FLUX_MODES).forEach(modeKey => {
  fluxKontextScene.action(`flux_mode_${modeKey}`, async ctx => {
    try {
      await ctx.answerCbQuery()
      const isRu = isRussian(ctx)

      if (ctx.session) {
        ctx.session.fluxKontextMode = modeKey as any
        ctx.session.fluxKontextStep = 'image_a'
      }

      const mode = FLUX_MODES[modeKey as keyof typeof FLUX_MODES]
      const modeTitle = isRu ? mode.title_ru : mode.title_en
      const modeDescription = isRu ? mode.description_ru : mode.description_en

      await ctx.editMessageText(
        isRu
          ? `‚úÖ *–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º:* ${modeTitle}\n\n${modeDescription}\n\nüì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ${mode.images_required === 1 ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}:`
          : `‚úÖ *Selected mode:* ${modeTitle}\n\n${modeDescription}\n\nüì∑ Send ${mode.images_required === 1 ? 'an image' : 'the first image'}:`,
        {
          parse_mode: 'Markdown',
          reply_markup: createModelSelectionKeyboard(isRu).reply_markup,
        }
      )

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (ctx.session) {
        ctx.session.awaitingFluxKontextImageA = true
      }
    } catch (error) {
      logger.error('Error handling FLUX Kontext mode selection', {
        error: error instanceof Error ? error.message : 'Unknown error',
        telegramId: ctx.from?.id,
        mode: modeKey,
      })
    }
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
fluxKontextScene.action('flux_model_pro', async ctx => {
  try {
    await ctx.answerCbQuery()
    if (ctx.session) {
      ctx.session.kontextModelType = 'pro'
      logger.info('FLUX Kontext Pro model selected - session updated', {
        telegramId: ctx.from?.id,
        modelType: ctx.session.kontextModelType,
        mode: ctx.session.fluxKontextMode,
        hasImageA: !!ctx.session.fluxKontextImageA,
        sessionExists: !!ctx.session,
      })
    }
    await handleModelSelection(ctx, 'pro')
  } catch (error) {
    logger.error('Error selecting FLUX Kontext Pro', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

fluxKontextScene.action('flux_model_max', async ctx => {
  try {
    await ctx.answerCbQuery()
    if (ctx.session) {
      ctx.session.kontextModelType = 'max'
      logger.info('FLUX Kontext Max model selected - session updated', {
        telegramId: ctx.from?.id,
        modelType: ctx.session.kontextModelType,
        mode: ctx.session.fluxKontextMode,
        hasImageA: !!ctx.session.fluxKontextImageA,
        sessionExists: !!ctx.session,
      })
    }
    await handleModelSelection(ctx, 'max')
  } catch (error) {
    logger.error('Error selecting FLUX Kontext Max', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
const handleModelSelection = async (
  ctx: MyContext,
  modelType: 'pro' | 'max'
) => {
  const isRu = isRussian(ctx)
  const model =
    FLUX_KONTEXT_MODELS[`black-forest-labs/flux-kontext-${modelType}`]

  await ctx.editMessageText(
    isRu
      ? `‚úÖ *–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:* FLUX Kontext ${modelType.toUpperCase()} (${model.costPerImage}‚≠ê)\n\nüì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:`
      : `‚úÖ *Selected model:* FLUX Kontext ${modelType.toUpperCase()} (${model.costPerImage}‚≠ê)\n\nüì∑ Now send an image:`,
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [
          Markup.button.callback(
            isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
            'flux_kontext_cancel'
          ),
        ],
      ]).reply_markup,
    }
  )
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
fluxKontextScene.on('photo', async ctx => {
  try {
    const isRu = isRussian(ctx)

    if (
      !ctx.session?.awaitingFluxKontextImageA &&
      !ctx.session?.awaitingFluxKontextImageB
    ) {
      await ctx.reply(
        isRu
          ? '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
          : '‚ùå Please select an editing mode first.'
      )
      return
    }

    const photo = ctx.message.photo?.pop()
    if (!photo) {
      await ctx.reply(
        isRu ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' : '‚ùå Failed to get image.'
      )
      return
    }

    const fileLink = await ctx.telegram.getFileLink(photo.file_id)

    if (ctx.session?.awaitingFluxKontextImageA) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (ctx.session) {
        ctx.session.fluxKontextImageA = fileLink.href
        ctx.session.awaitingFluxKontextImageA = false
      }

      const mode =
        FLUX_MODES[ctx.session?.fluxKontextMode as keyof typeof FLUX_MODES]

      if (mode?.images_required === 2) {
        // –ù—É–∂–Ω–æ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (ctx.session) {
          ctx.session.awaitingFluxKontextImageB = true
          ctx.session.fluxKontextStep = 'image_b'
        }

        await ctx.reply(
          isRu
            ? '‚úÖ –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\nüì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'
            : '‚úÖ First image received!\n\nüì∑ Now send the second image:',
          {
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
                  'flux_kontext_cancel'
                ),
              ],
            ]).reply_markup,
          }
        )
      } else {
        // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–º–ø—Ç—É
        await requestPrompt(ctx)
      }
    } else if (ctx.session?.awaitingFluxKontextImageB) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (ctx.session) {
        ctx.session.fluxKontextImageB = fileLink.href
        ctx.session.awaitingFluxKontextImageB = false
      }

      await ctx.reply(
        isRu ? '‚úÖ –í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!' : '‚úÖ Second image received!'
      )

      await requestPrompt(ctx)
    }
  } catch (error) {
    logger.error('Error handling FLUX Kontext image', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞
const requestPrompt = async (ctx: MyContext) => {
  const isRu = isRussian(ctx)
  const mode =
    FLUX_MODES[ctx.session?.fluxKontextMode as keyof typeof FLUX_MODES]

  if (ctx.session) {
    ctx.session.fluxKontextStep = 'prompt'
    ctx.session.awaitingFluxKontextPrompt = true
  }

  let promptExamples = ''

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
  switch (ctx.session?.fluxKontextMode) {
    case 'multi':
      promptExamples = isRu
        ? `\n\nüí° *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:*\n‚Ä¢ "combine these two people in one photo"\n‚Ä¢ "merge the backgrounds seamlessly"\n‚Ä¢ "blend the lighting from both images"`
        : `\n\nüí° *Examples for combining:*\n‚Ä¢ "combine these two people in one photo"\n‚Ä¢ "merge the backgrounds seamlessly"\n‚Ä¢ "blend the lighting from both images"`
      break
    case 'portrait_series':
      promptExamples = isRu
        ? `\n\nüí° *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Å–µ—Ä–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:*\n‚Ä¢ "create 4 different professional portraits"\n‚Ä¢ "show different emotions and expressions"\n‚Ä¢ "various lighting setups"`
        : `\n\nüí° *Examples for portrait series:*\n‚Ä¢ "create 4 different professional portraits"\n‚Ä¢ "show different emotions and expressions"\n‚Ä¢ "various lighting setups"`
      break
    case 'haircut':
      promptExamples = isRu
        ? `\n\nüí° *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏:*\n‚Ä¢ "give her a bob haircut"\n‚Ä¢ "change hair color to blonde"\n‚Ä¢ "modern short hairstyle"`
        : `\n\nüí° *Examples for haircut:*\n‚Ä¢ "give her a bob haircut"\n‚Ä¢ "change hair color to blonde"\n‚Ä¢ "modern short hairstyle"`
      break
    case 'landmarks':
      promptExamples = isRu
        ? `\n\nüí° *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:*\n‚Ä¢ "put in front of Eiffel Tower"\n‚Ä¢ "Times Square background"\n‚Ä¢ "standing at the Great Wall of China"`
        : `\n\nüí° *Examples for landmarks:*\n‚Ä¢ "put in front of Eiffel Tower"\n‚Ä¢ "Times Square background"\n‚Ä¢ "standing at the Great Wall of China"`
      break
    case 'headshot':
      promptExamples = isRu
        ? `\n\nüí° *–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞:*\n‚Ä¢ "professional business headshot"\n‚Ä¢ "corporate portrait with neutral background"\n‚Ä¢ "LinkedIn profile photo style"`
        : `\n\nüí° *Examples for professional headshot:*\n‚Ä¢ "professional business headshot"\n‚Ä¢ "corporate portrait with neutral background"\n‚Ä¢ "LinkedIn profile photo style"`
      break
    default:
      promptExamples = isRu
        ? `\n\nüí° *–û–±—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ "add sunglasses"\n‚Ä¢ "change background to beach"\n‚Ä¢ "make it vintage style"`
        : `\n\nüí° *General examples:*\n‚Ä¢ "add sunglasses"\n‚Ä¢ "change background to beach"\n‚Ä¢ "make it vintage style"`
  }

  await ctx.reply(
    isRu
      ? `üìù *–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ${mode ? ` –≤ —Ä–µ–∂–∏–º–µ "${isRu ? mode.title_ru : mode.title_en}"` : ''}.${promptExamples}\n\nüåê *–î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ*`
      : `üìù *Describe changes:*\n\nNow describe what you want to change or how to process the image${mode ? ` in "${isRu ? mode.title_ru : mode.title_en}" mode` : ''}.${promptExamples}\n\nüåê *For best results, write in English*`,
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [
          Markup.button.callback(
            isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
            'flux_kontext_cancel'
          ),
        ],
      ]).reply_markup,
    }
  )
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–º–ø—Ç–æ–≤)
fluxKontextScene.on('text', async ctx => {
  try {
    const isRu = isRussian(ctx)

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
    logger.info('FLUX Kontext text handler - session state', {
      telegramId: ctx.from?.id,
      awaitingPrompt: ctx.session?.awaitingFluxKontextPrompt,
      mode: ctx.session?.fluxKontextMode,
      hasImageA: !!ctx.session?.fluxKontextImageA,
      hasImageB: !!ctx.session?.fluxKontextImageB,
      modelType: ctx.session?.kontextModelType,
      step: ctx.session?.fluxKontextStep,
      sessionExists: !!ctx.session,
      sessionKeys: ctx.session ? Object.keys(ctx.session) : [],
    })

    if (!ctx.session?.awaitingFluxKontextPrompt) {
      await ctx.reply(
        isRu
          ? '‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
          : '‚ùå Please send an image first.'
      )
      return
    }

    const prompt = ctx.message.text

    if (!prompt) {
      await ctx.reply(isRu ? '‚ùå –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç.' : '‚ùå Empty prompt.')
      return
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if (ctx.session) {
      ctx.session.awaitingFluxKontextPrompt = false
      ctx.session.fluxKontextStep = 'processing'
    }

    await ctx.reply(
      isRu
        ? '‚úÖ –ü—Ä–æ–º–ø—Ç –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'
        : '‚úÖ Prompt received! Starting image processing...',
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    )

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await processFluxKontextRequest(ctx, prompt)
  } catch (error) {
    logger.error('Error handling FLUX Kontext prompt', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–µ–ø–µ—Ä—å —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π)
const processFluxKontextRequest = async (ctx: MyContext, prompt: string) => {
  const isRu = isRussian(ctx)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
  const {
    fluxKontextMode,
    fluxKontextImageA,
    fluxKontextImageB,
    kontextModelType,
  } = ctx.session || {}

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (
    !fluxKontextMode ||
    !fluxKontextImageA ||
    !kontextModelType ||
    !ctx.from?.id
  ) {
    logger.error('Missing required data for FLUX Kontext processing', {
      telegramId: ctx.from?.id,
      mode: fluxKontextMode,
      hasImageA: !!fluxKontextImageA,
      hasImageB: !!fluxKontextImageB,
      modelType: kontextModelType,
      sessionExists: !!ctx.session,
      sessionKeys: ctx.session ? Object.keys(ctx.session) : [],
      fullSession: ctx.session,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.'
        : '‚ùå Error: insufficient data for processing.'
    )
    return
  }

  logger.info('Processing FLUX Kontext request', {
    telegramId: ctx.from?.id,
    mode: fluxKontextMode,
    modelType: kontextModelType,
    hasImageA: !!fluxKontextImageA,
    hasImageB: !!fluxKontextImageB,
    prompt: prompt.substring(0, 100) + '...',
  })

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å
    const { generateAdvancedFluxKontext } = await import(
      '../../services/generateFluxKontext'
    )

    const result = await generateAdvancedFluxKontext({
      prompt,
      mode: fluxKontextMode,
      imageA: fluxKontextImageA,
      imageB: fluxKontextImageB,
      modelType: kontextModelType,
      telegram_id: ctx.from.id.toString(),
      username: ctx.from.username || 'unknown',
      is_ru: isRu,
      ctx,
    })

    logger.info('FLUX Kontext processing completed successfully', {
      telegramId: ctx.from.id,
      promptId: result.prompt_id,
    })

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (ctx.session) {
      ctx.session.fluxKontextMode = undefined
      ctx.session.fluxKontextImageA = undefined
      ctx.session.fluxKontextImageB = undefined
      ctx.session.fluxKontextStep = undefined
      ctx.session.kontextModelType = undefined
    }
  } catch (error) {
    logger.error('Error in FLUX Kontext processing', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })

    // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (ctx.session) {
      ctx.session.fluxKontextMode = undefined
      ctx.session.fluxKontextImageA = undefined
      ctx.session.fluxKontextImageB = undefined
      ctx.session.fluxKontextStep = undefined
      ctx.session.kontextModelType = undefined
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
fluxKontextScene.action('flux_more_editing', async ctx => {
  try {
    await ctx.answerCbQuery()

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
    if (ctx.session) {
      ctx.session.fluxKontextMode = undefined
      ctx.session.fluxKontextImageA = undefined
      ctx.session.fluxKontextImageB = undefined
      ctx.session.awaitingFluxKontextImageA = false
      ctx.session.awaitingFluxKontextImageB = false
      ctx.session.awaitingFluxKontextPrompt = false
      ctx.session.fluxKontextStep = 'mode_select'
      ctx.session.kontextModelType = undefined
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É
    await ctx.scene.reenter()
  } catch (error) {
    logger.error('Error handling more editing', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
fluxKontextScene.action('flux_kontext_cancel', async ctx => {
  try {
    await ctx.answerCbQuery()
    const isRu = isRussian(ctx)

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
        : '‚ùå Process cancelled. Returning to main menu.',
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    )

    await ctx.scene.leave()
    await ctx.scene.enter('main_menu')
  } catch (error) {
    logger.error('Error handling FLUX Kontext cancel', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
    })
  }
})
