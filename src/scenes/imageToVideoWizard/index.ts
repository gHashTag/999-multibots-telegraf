import { Scenes, Markup } from 'telegraf'
import { generateImageToVideo } from '@/services/generateImageToVideo'
import { MyContext } from '@/interfaces'
import {
  cancelMenu,
  createHelpCancelKeyboard,
  sendGenerationCancelledMessage,
  sendGenericErrorMessage,
  videoModelKeyboard,
} from '@/menu'
import { isRussian } from '@/helpers/language'
import { ModeEnum } from '@/interfaces/modes'
import { getBotToken, handleHelpCancel } from '@/handlers'
import { VIDEO_MODELS_CONFIG } from '@/pricing/config/VIDEO_MODELS_CONFIG'
import { logger } from '@/utils/logger'
import { calculateFinalStarPrice } from '@/pricing/calculator'
import { getUserBalance } from '@/core/supabase/balance/getUserBalance'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥–∞
type VideoModelKey = keyof typeof VIDEO_MODELS_CONFIG

export const imageToVideoWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ImageToVideo,
  async ctx => {
    const isRu = isRussian(ctx)
    const keyboardMarkup = videoModelKeyboard(isRu)
    await ctx.reply(
      isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:' : 'Choose generation model:',
      {
        reply_markup: keyboardMarkup.reply_markup,
      }
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
    // –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback_query
    const message = ctx.message as { text?: string }
    const selectedButtonText = message?.text // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏

    if (!selectedButtonText) {
      // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.'
          : 'Please select a model by pressing one of the buttons below.'
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
    }

    // –ò—â–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ (–¶–µ–Ω–∞ ‚≠ê)")
    let foundModelKey: VideoModelKey | null = null

    for (const [key, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      const priceResult = calculateFinalStarPrice(ModeEnum.ImageToVideo, {
        modelId: key as VideoModelKey,
      })
      const finalPriceInStars = priceResult ? priceResult.stars : '??' // –û–±—Ä–∞–±–æ—Ç–∫–∞ null
      const expectedButtonText = `${config.title} (${finalPriceInStars} ‚≠ê)`
      if (expectedButtonText === selectedButtonText) {
        foundModelKey = key as VideoModelKey
        break
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ü–æ–º–æ—â—å –∏ –û—Ç–º–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ (–ø–æ —Ç–µ–∫—Å—Ç—É)
    if (selectedButtonText === (isRu ? '–ü–æ–º–æ—â—å' : 'Help')) {
      await ctx.reply(
        isRu
          ? '–§—É–Ω–∫—Ü–∏—è –ü–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
          : 'Help function is under development.'
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    }

    if (selectedButtonText === (isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
      await sendGenerationCancelledMessage(ctx, selectedButtonText)
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –∫–ª—é—á –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    if (!foundModelKey) {
      logger.warn('Could not map button text to model key:', {
        selectedButtonText,
      })
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –í–ù–ò–ó–£.'
          : 'Please select a model using the provided buttons BELOW.'
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    }

    // --- –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º calculateFinalPrice ---
    if (!ctx.from) {
      logger.error('imageToVideoWizard: Could not identify user')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const telegram_id = ctx.from.id.toString()
    const bot_name = ctx.botInfo.username

    // 1. –í—ã—á–∏—Å–ª—è–µ–º –§–ò–ù–ê–õ–¨–ù–£–Æ –°–¢–û–ò–ú–û–°–¢–¨ –≤ –∑–≤–µ–∑–¥–∞—Ö —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const costResult = calculateFinalStarPrice(ModeEnum.ImageToVideo, {
      modelId: foundModelKey,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null –¥–ª—è costResult
    if (!costResult) {
      logger.error('Could not calculate price for video model key:', {
        foundModelKey,
      })
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.wizard.selectStep(ctx.wizard.cursor) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
    }

    const finalPriceInStars = costResult.stars // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await getUserBalance(telegram_id, bot_name)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ (–∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É)
    if (currentBalance < finalPriceInStars) {
      logger.info(
        `Insufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs (final): ${finalPriceInStars}`
      )
      await ctx.reply(
        isRu
          ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${finalPriceInStars} ‚òÖ). –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚òÖ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`
          : `üòï Insufficient stars for generation (${finalPriceInStars} ‚òÖ). Your balance: ${currentBalance} ‚òÖ. Please select another model or top up your balance.`,
        {
          reply_markup: videoModelKeyboard(isRu).reply_markup,
        }
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
    }

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω:
    logger.info(
      `Sufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs (final): ${finalPriceInStars}. Proceeding to image request.`
    )
    ctx.session.videoModel = foundModelKey
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–ù–ê–õ–¨–ù–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö
    ctx.session.paymentAmount = finalPriceInStars
    console.log('ctx.session.videoModel (config key):', ctx.session.videoModel)
    console.log(
      'ctx.session.paymentAmount (final stars):',
      ctx.session.paymentAmount
    )

    const selectedModelTitle =
      VIDEO_MODELS_CONFIG[foundModelKey]?.title || foundModelKey

    // –°–æ–æ–±—â–∞–µ–º –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ —É–±–∏—Ä–∞–µ–º ReplyKeyboard
    await ctx.reply(
      isRu
        ? `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModelTitle}.`
        : `You have chosen the model: ${selectedModelTitle}.`,
      Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await ctx.reply(
      isRu
        ? '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ'
        : 'Now send an image for video generation',
      {
        reply_markup: createHelpCancelKeyboard(isRu).reply_markup,
      }
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const message = ctx.message
    const isRu = isRussian(ctx)
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    } else {
      if (message && 'photo' in message) {
        const photo = message.photo[message.photo.length - 1]
        const file = await ctx.telegram.getFile(photo.file_id)
        const filePath = file.file_path

        if (!filePath) {
          await ctx.reply(
            isRu ? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'Failed to get image'
          )
          return ctx.scene.leave()
        }

        const botToken = getBotToken(ctx)
        ctx.session.imageUrl = `https://api.telegram.org/file/bot${botToken}/${filePath}`
        await ctx.reply(
          isRu
            ? '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ'
            : 'Great! Now describe the desired movement in the video',
          {
            reply_markup: cancelMenu(isRu).reply_markup,
          }
        )
        return ctx.wizard.next()
      }
      await ctx.reply(
        isRu ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' : 'Please send an image.',
        {
          reply_markup: createHelpCancelKeyboard(isRu).reply_markup,
        }
      )
      return
    }
  },
  async ctx => {
    const message = ctx.message
    const isRu = isRussian(ctx)

    if (message && 'text' in message) {
      const isCancel = await handleHelpCancel(ctx)
      if (isCancel) {
        return ctx.scene.leave()
      } else {
        const prompt = message.text
        const configKey = ctx.session.videoModel as VideoModelKey
        const imageUrl = ctx.session.imageUrl

        if (!prompt) {
          await ctx.reply(
            isRu
              ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.'
              : 'Movement description is required.'
          )
          return
        }
        if (!configKey || !(configKey in VIDEO_MODELS_CONFIG)) {
          logger.error('Invalid configKey in session', { configKey })
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ (–º–æ–¥–µ–ª—å). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
              : 'Session error (model). Please start over.'
          )
          return ctx.scene.leave()
        }
        if (!imageUrl) {
          logger.error('Missing imageUrl in session', { configKey })
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ (URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
              : 'Session error (image URL). Please start over.'
          )
          return ctx.scene.leave()
        }
        if (!ctx.from?.username) {
          logger.error('Missing username in context')
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
              : 'User error. Please start over.'
          )
          return ctx.scene.leave()
        }

        try {
          logger.info('Calling generateImageToVideo with:', {
            imageUrl,
            prompt,
            configKey,
            telegram_id: ctx.from.id,
            username: ctx.from.username,
            isRu,
          })

          await generateImageToVideo(
            imageUrl,
            prompt,
            configKey,
            ctx.from.id.toString(),
            ctx.from.username,
            isRu,
            ctx.botInfo?.username
          )
          ctx.session.prompt = prompt
          ctx.session.mode = ModeEnum.ImageToVideo

          const modelTitle = VIDEO_MODELS_CONFIG[configKey]?.title || configKey
          await ctx.reply(
            isRu
              ? `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ (${modelTitle}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`
              : `‚úÖ Video generation request (${modelTitle}) sent! Please wait for the result.`
          )
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ generateImageToVideo:', {
            error,
            configKey,
            telegram_id: ctx.from.id,
          })
          await ctx.reply(
            isRu
              ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
              : '‚ùå An error occurred starting video generation. Please try again later or contact support.'
          )
        }
        return ctx.scene.leave()
      }
    }
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.'
        : 'Please send a text description of the movement.',
      Markup.removeKeyboard()
    )
    return
  }
)

export default imageToVideoWizard
