import { Scenes, Markup } from 'telegraf'
import { MyContext, VideoModel } from '@/types'
import {
  sendBalanceMessage,
  validateAndCalculateVideoModelPrice,
} from '@/price/helpers'
import { isRussian } from '@/helpers/language'
import { sendGenericErrorMessage, videoModelKeyboard } from '@/menu'
import { getUserBalance } from '@/core/supabase'
import { ModeEnum } from '@/types/modes'
import { handleHelpCancel } from '@/handlers'
import { inngest } from '@/inngest-functions/clients'
import { VIDEO_MODELS_CONFIG } from '@/menu/videoModelMenu'

export const imageToVideoWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ImageToVideo,
  async ctx => {
    const isRu = isRussian(ctx)
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
      await ctx.reply(
        isRu
          ? 'üé• –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:'
          : 'üé• Choose video generation model:',
        {
          reply_markup: videoModelKeyboard(isRu, 'image').reply_markup,
        }
      )
      ctx.wizard.next()
      return
    } catch (error: unknown) {
      console.error('‚ùå Error in image_to_video:', error)
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      await ctx.reply(
        isRu
          ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`
          : `‚ùå An error occurred: ${errorMessage}`
      )
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message as { text?: string }
    if (!message.text)
      throw new Error(
        isRu
          ? 'image_to_video: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å'
          : 'image_to_video: Could not identify model'
      )

    if (message && 'text' in message) {
      if (!ctx.from)
        throw new Error(
          isRu
            ? 'image_to_video: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            : 'image_to_video: Could not identify user'
        )
      const videoModel = message.text?.toLowerCase()
      console.log('üé¨ Selected video model:', videoModel)

      const currentBalance = await getUserBalance(
        ctx.from.id.toString(),
        ctx.botInfo.username
      )
      console.log('üí∞ Current balance:', currentBalance)
      if (currentBalance === null) {
        await ctx.reply(
          isRu ? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å' : 'Could not identify balance'
        )
        return ctx.scene.leave()
      }
      const isCancel = await handleHelpCancel(ctx)
      if (isCancel) {
        return ctx.scene.leave()
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const result = await validateAndCalculateVideoModelPrice(
          videoModel,
          currentBalance,
          isRu,
          ctx,
          'image'
        )
        if (!result) {
          return ctx.scene.leave()
        }
        const { amount, modelId } = result
        console.log('üíµ Generation cost:', amount)
        console.log('üÜî Model ID:', modelId)
        if (amount === null) {
          return ctx.scene.leave()
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoModel –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.videoModel = modelId as VideoModel

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        await sendBalanceMessage(
          ctx.from.id.toString(),
          currentBalance,
          amount,
          isRu,
          ctx.telegram
        )

        await ctx.reply(
          isRu
            ? 'üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ'
            : 'üñºÔ∏è Please send an image for video generation',
          Markup.removeKeyboard()
        )
        ctx.session.amount = amount
        return ctx.wizard.next()
      }
    } else {
      console.log('‚ùå image_to_video: else branch - invalid message')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!message || !('photo' in message)) {
      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ'
          : '‚ùå Please send an image for video generation'
      )
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const photos = message.photo
    if (!photos || photos.length === 0) {
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
          : '‚ùå Failed to get the image'
      )
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const fileId = photos[photos.length - 1].file_id
    const file = await ctx.telegram.getFile(fileId)
    const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`

    ctx.session.imageUrl = imageUrl

    await ctx.reply(
      isRu
        ? '‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ'
        : '‚úçÔ∏è Now send a text description for video generation'
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (message && 'text' in message) {
      const prompt = message.text
      console.log('üìù Prompt:', prompt)

      if (!prompt)
        throw new Error(
          isRu ? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç' : 'Could not identify text'
        )

      const videoModel = ctx.session.videoModel
      const imageUrl = ctx.session.imageUrl
      console.log('üé• Using video model:', videoModel)
      console.log('üñºÔ∏è Using image URL:', imageUrl)

      if (prompt && videoModel && imageUrl && ctx.from && ctx.from.username) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
        const modelConfig = VIDEO_MODELS_CONFIG[videoModel]
        const imageKey = modelConfig?.imageKey || 'image'

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Inngest
        await inngest.send({
          name: 'text-to-video.requested',
          data: {
            prompt,
            telegram_id: ctx.from.id.toString(),
            is_ru: isRu,
            bot_name: ctx.botInfo?.username || '',
            model_id: videoModel,
            username: ctx.from.username,
            [imageKey]: imageUrl,
          },
        })

        console.log('‚ö°Ô∏è Sent text-to-video.requested event:', {
          description: 'Image to video generation requested',
          prompt,
          model: videoModel,
          telegram_id: ctx.from.id,
          [imageKey]: imageUrl,
        })

        await ctx.reply(
          isRu
            ? 'üé¨ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –Ø –ø—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.'
            : 'üé¨ Video generation request sent! I will send you the result as soon as it is ready.'
        )

        ctx.session.prompt = prompt
      }

      await ctx.scene.leave()
    } else {
      await sendGenericErrorMessage(ctx, isRu)
      await ctx.scene.leave()
    }
  }
)

export default imageToVideoWizard
