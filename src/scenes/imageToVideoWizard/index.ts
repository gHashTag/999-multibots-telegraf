import { Composer, Scenes, Markup } from 'telegraf'
import { TelegramConnector } from '../../modules/videoGenerator/adapters/telegramConnector'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers/language'
import { ModeEnum } from '@/interfaces/modes'
import { handleHelpCancel } from '@/handlers'
import { videoModelKeyboard, createHelpCancelKeyboard } from '@/menu'
import { logger } from '@/utils/logger'
import { determineVideoMode } from '../../modules/videoGenerator/helpers/determineVideoMode'
import { VIDEO_MODELS } from '../../modules/videoGenerator/config/videoModels'

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
const askModelStep = new Composer<MyContext>()
askModelStep.on('message', async ctx => {
  const isRu = isRussian(ctx)
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ—Ä—Ñ–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
  if (ctx.session.current_action === 'morphing') {
    logger.info('[I2V Wizard] Morphing mode entered directly', {
      telegramId: ctx.from?.id,
    })
    ctx.session.is_morphing = true
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
    const text = isRu
      ? 'üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞.'
      : 'üñºÔ∏è Please send the first image for morphing.'
    await ctx.replyWithHTML(text)
    return ctx.wizard.next()
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    const keyboardMarkup = Markup.inlineKeyboard(
      Object.entries(VIDEO_MODELS).map(([key, model]) => [
        Markup.button.callback(
          `${model.name} (${model.price} –∫—Ä–µ–¥–∏—Ç–æ–≤)`,
          `model:${key}`
        ),
      ])
    )
    const text = isRu
      ? 'ü§î –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:'
      : 'ü§î Choose a model for video generation:'
    await ctx.reply(text, {
      reply_markup: keyboardMarkup.reply_markup,
    })
    return ctx.wizard.next()
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤ –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω –≤ –º–æ–¥—É–ª—å
// –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–¥—É–ª—é
const handleNextStep = new Composer<MyContext>()
handleNextStep.on('message', async ctx => {
  const isRu = isRussian(ctx)
  const isCancel = await handleHelpCancel(ctx)
  if (isCancel) {
    return ctx.scene.leave()
  }
  // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥–µ—Ç –≤ –º–æ–¥—É–ª–µ videoGenerator —á–µ—Ä–µ–∑ TelegramConnector
  // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
  const connector = new TelegramConnector(ctx.telegram, ctx.from?.id || 0, isRu)

  // –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
  try {
    await connector.startVideoGeneration(
      String(ctx.from?.id),
      ctx.from?.username || 'unknown',
      ctx.botInfo?.username || 'bot',
      ctx.session.videoModel || 'stable-video-diffusion',
      ctx.session.imageUrl || null,
      ctx.session.prompt || null,
      ctx.session.is_morphing || false,
      ctx.session.imageAUrl || null,
      ctx.session.imageBUrl || null,
      {} // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –º–æ–¥—É–ª–µ
    )
  } catch (error) {
    logger.error('[I2V Wizard] Error starting video generation via connector', {
      error,
    })
    const errorText = isRu
      ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.'
      : '‚ùå Error starting video generation.'
    await ctx.reply(errorText)
  }
  return ctx.scene.leave()
})

const handlePhotoMessage = async (ctx: MyContext) => {
  const mode = determineVideoMode(ctx)
  console.log(`[handlePhotoMessage] mode: ${mode}`)
  // ... existing code ...
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
export const imageToVideoWizard = new Scenes.WizardScene<MyContext>(
  ModeEnum.ImageToVideo,
  askModelStep,
  handleNextStep
)

imageToVideoWizard.help(handleHelpCancel)
imageToVideoWizard.command('cancel', handleHelpCancel)

logger.info(
  '‚ö°Ô∏è ImageToVideo Wizard Scene initialized with minimal logic using TelegramConnector'
)
