import type { MyContext } from '@/interfaces'
import { Scenes } from 'telegraf'
import { getUserByTelegramIdString } from '@/core/supabase'
import { verifySubscription } from '@/middlewares/verifySubscription'
import { isDev } from '@/helpers'
import { ModeEnum } from '@/interfaces/modes';
import { logger } from '@/utils/logger'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { getSubScribeChannel } from '@/handlers/getSubScribeChannel'
import { ADMIN_IDS_ARRAY } from '@/config'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const checkUserExists = async (ctx: MyContext) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üîç [SubscriptionCheck] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    telegramId,
    function: 'checkUserExists',
  })

  if (!ctx.from?.id) {
    logger.info({
      message: '‚ùå [SubscriptionCheck] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ',
      telegramId: 'unknown',
      function: 'checkUserExists',
      result: 'failed',
    })
    return null
  }

  const user = await getUserByTelegramIdString(ctx.from.id.toString())
  if (!user) {
    logger.info({
      message: '‚ùå [SubscriptionCheck] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      telegramId,
      function: 'checkUserExists',
      result: 'not_found',
    })
    return null
  }

  logger.info({
    message: '‚úÖ [SubscriptionCheck] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
    telegramId,
    function: 'checkUserExists',
    result: 'found',
    subscriptionType: user.subscription,
    language: user.language_code,
  })
  return user
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
const checkChannelSubscription = async (
  ctx: MyContext,
  languageCode: string
) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üîç [SubscriptionCheck] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª',
    telegramId,
    function: 'checkChannelSubscription',
    language: languageCode,
  })

  if (isDev) {
    logger.info({
      message:
        'üîß [SubscriptionCheck] –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª',
      telegramId,
      function: 'checkChannelSubscription',
      result: 'dev_skip',
    })
    return true
  }

  const channelId = await getSubScribeChannel(ctx)
  if (!channelId) {
    logger.error({
      message: '‚ùå [SubscriptionCheck] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
      telegramId,
      function: 'checkChannelSubscription',
      result: 'failed',
    })
    await ctx.reply(
      languageCode === 'ru'
        ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏'
        : '‚ùå Failed to get subscribe channel ID'
    )
    return false
  }

  logger.info({
    message: 'üîç [SubscriptionCheck] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞',
    telegramId,
    function: 'checkChannelSubscription',
    channelId,
    step: 'verifying',
  })

  const isSubscribed = await verifySubscription(ctx, languageCode, channelId)

  logger.info({
    message: `üìä [SubscriptionCheck] –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: ${
      isSubscribed ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
    }`,
    telegramId,
    function: 'checkChannelSubscription',
    channelId,
    isSubscribed,
    result: isSubscribed ? 'active' : 'inactive',
  })
  return isSubscribed
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã
const getNextScene = (currentMode: ModeEnum | undefined): ModeEnum => {
  if (currentMode === ModeEnum.MainMenu || !currentMode) {
    return ModeEnum.MainMenu
  }
  return currentMode
}

const subscriptionCheckStep = async (ctx: MyContext) => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [SubscriptionCheck] –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏',
    telegramId,
    function: 'subscriptionCheckStep',
    currentMode: ctx.session?.mode || 'undefined',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–ø—Ä–æ–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
  if (ADMIN_IDS_ARRAY.includes(ctx.from?.id ?? 0)) {
    logger.info({
      message:
        '[SubscriptionCheck] [Admin Bypass] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫',
      telegramId,
      function: 'subscriptionCheckStep',
      isAdmin: true,
      result: 'admin_bypass',
    })
    return ctx.scene.enter(ModeEnum.MainMenu) // –°—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await checkUserExists(ctx)
  if (!user) {
    logger.info({
      message:
        '‚û°Ô∏è [SubscriptionCheck] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      telegramId,
      function: 'subscriptionCheckStep',
      result: 'redirect_to_create_user',
      nextScene: ModeEnum.CreateUserScene,
    })
    return ctx.scene.enter(ModeEnum.CreateUserScene)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  if (user.subscription !== SubscriptionType.STARS) {
    logger.info({
      message:
        'üí´ [SubscriptionCheck] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ STARS, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª',
      telegramId,
      function: 'subscriptionCheckStep',
      userSubscription: user.subscription,
      step: 'checking_channel',
    })

    const isSubscribed = await checkChannelSubscription(ctx, user.language_code)

    if (!isSubscribed) {
      logger.info({
        message:
          '‚ùå [SubscriptionCheck] –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞',
        telegramId,
        function: 'subscriptionCheckStep',
        result: 'channel_subscription_required',
      })
      // –ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ checkChannelSubscription
      // —É–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ SubscriptionScene –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
      return // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω
    } else {
      logger.info({
        message: '‚úÖ [SubscriptionCheck] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        telegramId,
        function: 'subscriptionCheckStep',
        result: 'channel_subscription_verified',
      })
    }
  } else {
    logger.info({
      message:
        '‚≠ê [SubscriptionCheck] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ STARS, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞',
      telegramId,
      function: 'subscriptionCheckStep',
      userSubscription: user.subscription,
      result: 'stars_subscription_active',
    })
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ
  const nextScene = getNextScene(ctx.session.mode)
  logger.info({
    message: `‚û°Ô∏è [SubscriptionCheck] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ: ${nextScene}`,
    telegramId,
    function: 'subscriptionCheckStep',
    currentMode: ctx.session.mode,
    nextScene,
    result: 'navigation_success',
  })
  return ctx.scene.enter(nextScene)
}

export const subscriptionCheckScene = new Scenes.WizardScene(
  ModeEnum.SubscriptionCheckScene,
  subscriptionCheckStep
)
