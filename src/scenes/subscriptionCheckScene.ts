import { MyContext } from '@/interfaces'
import { WizardScene } from 'telegraf/scenes'
import { getUserByTelegramIdString, getSubScribeChannel } from '@/core/supabase'
import { verifySubscription } from '@/middlewares/verifySubscription'
import { isDev } from '@/helpers'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import { SubscriptionType } from '@/types/subscription'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const checkUserExists = async (ctx: MyContext) => {
  if (!ctx.from?.id) {
    logger.info('üîç User ID not found in context')
    return null
  }

  const user = await getUserByTelegramIdString(ctx.from.id.toString())
  if (!user) {
    logger.info('üîç User not found in database')
    return null
  }

  return user
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
const checkChannelSubscription = async (
  ctx: MyContext,
  languageCode: string
) => {
  if (isDev) {
    logger.info('üîß Development mode - skipping channel subscription check')
    return true
  }

  const channelId = await getSubScribeChannel(ctx)
  if (!channelId) {
    logger.error('‚ùå Failed to get subscribe channel ID')
    await ctx.reply(
      languageCode === 'ru'
        ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏'
        : '‚ùå Failed to get subscribe channel ID'
    )
    return false
  }

  const isSubscribed = await verifySubscription(ctx, languageCode, channelId)
  logger.info(
    `üìä Channel subscription status: ${isSubscribed ? 'Active' : 'Inactive'}`
  )
  return isSubscribed
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã
const getNextScene = (currentMode: ModeEnum | undefined): ModeEnum => {
  if (currentMode === ModeEnum.MainMenu || !currentMode) {
    return ModeEnum.MainMenu
  }
  if (currentMode === ModeEnum.Subscribe) {
    return ModeEnum.SubscriptionScene
  }
  return currentMode
}

const subscriptionCheckStep = async (ctx: MyContext) => {
  logger.info('üéØ Starting subscription check process')

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await checkUserExists(ctx)
  if (!user) {
    logger.info('‚û°Ô∏è Redirecting to user creation scene')
    return ctx.scene.enter(ModeEnum.CreateUserScene)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  if (user.subscription !== SubscriptionType.STARS) {
    logger.info('üí´ User does not have STARS subscription')
    const isSubscribed = await checkChannelSubscription(ctx, user.language_code)
    if (!isSubscribed) {
      logger.info('‚ùå Channel subscription check failed')
      return ctx.scene.leave()
    }
  } else {
    logger.info('‚≠ê User has STARS subscription')
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ
  const nextScene = getNextScene(ctx.session.mode)
  logger.info(`‚û°Ô∏è Navigating to scene: ${nextScene}`)
  return ctx.scene.enter(nextScene)
}

export const subscriptionCheckScene = new WizardScene(
  ModeEnum.SubscriptionCheckScene,
  subscriptionCheckStep
)
