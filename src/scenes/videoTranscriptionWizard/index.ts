import { Scenes, Markup } from 'telegraf'
import { MyContext } from '@/interfaces/telegram-bot.interface'
import { ModeEnum } from '@/interfaces/modes'
import { isRussian } from '@/helpers/language'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { createHelpCancelKeyboard } from '@/menu'
import { sendGenericErrorMessage } from '@/menu'
import { logger } from '@/utils/logger'
import {
  transcribeVideo,
  transcribeVideoFromUrl,
  cleanupVideoFile,
} from '@/services/videoTranscription'
import { levels } from '@/menu/mainMenu'
import path from 'path'
import fs from 'fs'

export const videoTranscriptionWizard = new Scenes.WizardScene<MyContext>(
  'video_transcription',
  async ctx => {
    const isRu = isRussian(ctx)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–ø—Ä–∞–≤–∫–∏
    ctx.session.mode = ModeEnum.VideoTranscription

    await ctx.reply(
      isRu
        ? 'üì∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (Reels) –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç\n\nüí° –í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel, TikTok, YouTube Shorts'
        : 'üì∫ Send a video (Reels) for transcription to text\n\nüí° You can:\n‚Ä¢ Upload a video file\n‚Ä¢ Send a link to Instagram Reel, TikTok, YouTube Shorts',
      createHelpCancelKeyboard(isRu)
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã/–ø–æ–º–æ—â–∏
    if (await handleHelpCancel(ctx)) {
      return ctx.scene.leave()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞
    const isVideoFile = message && 'video' in message
    const isTextWithUrl =
      message &&
      'text' in message &&
      message.text &&
      (message.text.includes('instagram.com') ||
        message.text.includes('tiktok.com') ||
        message.text.includes('youtube.com') ||
        message.text.includes('youtu.be'))

    if (!isVideoFile && !isTextWithUrl) {
      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (Instagram, TikTok, YouTube)'
          : '‚ùå Please send a video file or video link (Instagram, TikTok, YouTube)'
      )
      return // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
    }

    let videoUrl: string
    let isFromUrl = false

    if (isVideoFile) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
      const MAX_FILE_SIZE = 50 * 1024 * 1024 // 50MB
      const videoFile = await ctx.telegram.getFile(message.video.file_id)

      if (videoFile?.file_size && videoFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : '‚ùå Video is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }

      videoUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${videoFile.file_path}`
    } else if (isTextWithUrl) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
      videoUrl = message.text.trim()
      isFromUrl = true
    } else {
      // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ
      throw new Error('Invalid input type')
    }

    if (!ctx.from?.id || !ctx.botInfo?.username) {
      logger.error('[VideoTranscription] Critical user or bot info missing', {
        from: ctx.from,
        botInfo: ctx.botInfo,
      })
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await ctx.reply(
        isRu
          ? '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.'
          : '‚è≥ Processing video and extracting text... This may take some time.',
        Markup.removeKeyboard()
      )

      logger.info('[VideoTranscription] Starting transcription', {
        telegramId: ctx.from.id,
        isFromUrl,
        videoUrl: isFromUrl ? videoUrl : 'telegram_file',
        videoFileId: isVideoFile ? message.video.file_id : undefined,
        videoSize: isVideoFile
          ? (await ctx.telegram.getFile(message.video.file_id)).file_size
          : undefined,
      })

      const transcriptionResult = isFromUrl
        ? await transcribeVideoFromUrl({
            videoUrl,
            telegramId: ctx.from.id.toString(),
            username: ctx.from.username || 'unknown_user',
            isRu,
            botName: ctx.botInfo.username,
          })
        : await transcribeVideo({
            videoUrl,
            telegramId: ctx.from.id.toString(),
            username: ctx.from.username || 'unknown_user',
            isRu,
            botName: ctx.botInfo.username,
          })

      if (!transcriptionResult.success || !transcriptionResult.text) {
        throw new Error(
          transcriptionResult.error || 'Failed to transcribe video'
        )
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const caption = isRu
        ? `üì∫ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìù –¢–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ:\n\n${transcriptionResult.text}`
        : `üì∫ Transcription completed!\n\nüìù Text from video:\n\n${transcriptionResult.text}`

      if (isFromUrl) {
        // –î–ª—è URL –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const shortCaption = isRu
          ? `üì∫ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª: ${videoUrl}`
          : `üì∫ Transcription completed!\n\nüîó Original: ${videoUrl}`

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –ø—É—Ç—å –µ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ)
        if (
          transcriptionResult.videoPath &&
          fs.existsSync(transcriptionResult.videoPath)
        ) {
          try {
            await ctx.replyWithVideo(
              { source: transcriptionResult.videoPath },
              {
                caption:
                  shortCaption.length > 1024
                    ? shortCaption.substring(0, 1021) + '...'
                    : shortCaption,
              }
            )

            // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            cleanupVideoFile(transcriptionResult.videoPath)
          } catch (videoError) {
            logger.error('[VideoTranscription] Error sending video', {
              telegramId: ctx.from.id,
              error: videoError.message,
            })
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await ctx.reply(shortCaption)
            // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª
            cleanupVideoFile(transcriptionResult.videoPath)
          }
        } else {
          // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
          await ctx.reply(shortCaption)
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await ctx.reply(
          isRu
            ? `üìù *–¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n\`\`\`\n${transcriptionResult.text}\n\`\`\``
            : `üìù *Text for copying:*\n\n\`\`\`\n${transcriptionResult.text}\n\`\`\``,
          { parse_mode: 'Markdown' }
        )
      } else {
        // –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const shortCaption = isRu
          ? `üì∫ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`
          : `üì∫ Transcription completed!`

        await ctx.replyWithVideo(videoUrl, {
          caption: shortCaption,
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await ctx.reply(
          isRu
            ? `üìù *–¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n\`\`\`\n${transcriptionResult.text}\n\`\`\``
            : `üìù *Text for copying:*\n\n\`\`\`\n${transcriptionResult.text}\n\`\`\``,
          { parse_mode: 'Markdown' }
        )
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
      const keyboard = Markup.keyboard([
        [Markup.button.text(isRu ? 'üì∫ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ' : 'üì∫ Another video')],
        [
          Markup.button.text(
            isRu ? levels[104].title_ru : levels[104].title_en
          ),
        ], // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      ]).resize()

      await ctx.reply(
        isRu
          ? '‚úÖ –ì–æ—Ç–æ–≤–æ! –•–æ—Ç–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ?'
          : '‚úÖ Done! Would you like to transcribe another video?',
        keyboard
      )

      logger.info('[VideoTranscription] Transcription completed successfully', {
        telegramId: ctx.from.id,
        textLength: transcriptionResult.text.length,
      })
    } catch (error) {
      logger.error('[VideoTranscription] Error during transcription', {
        telegramId: ctx.from.id,
        error: error.message,
        stack: error.stack,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : '‚ùå An error occurred while transcribing the video. Please try again later.'
      )
    }

    return ctx.scene.leave()
  }
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ"
videoTranscriptionWizard.hears(
  ['üì∫ –ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ', 'üì∫ Another video'],
  async ctx => {
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    return ctx.scene.reenter()
  }
)

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ HELP –∏ CANCEL –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö wizard'–∞—Ö
videoTranscriptionWizard.help(handleHelpCancel)
videoTranscriptionWizard.command('cancel', handleHelpCancel)
