import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import {
  getInvoiceId,
  merchantLogin,
  password1,
  description,
  generateShortInvId,
  useTestMode,
} from '@/scenes/getRuBillWizard/helper'
import { updateUserSubscription } from '@/core/supabase'
import { WizardScene } from 'telegraf/scenes'
import { getBotNameByToken } from '@/core'
import { TransactionType } from '@/interfaces/payments.interface'
import { logger } from '@/utils/logger'
import { inngest } from '@/inngest-functions/clients'
import { ModeEnum } from '@/interfaces/modes'
import { type LocalSubscription } from '@/types/subscription'
import { getRuBillMessage } from '@/utils/getRuBillMessage'

const generateInvoiceStep = async (ctx: MyContext) => {
  logger.info('üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞', {
    description: 'Starting invoice generation',
  })

  const isRu = isRussian(ctx)
  const selectedPayment = ctx.session.selectedPayment

  if (!selectedPayment) {
    logger.error('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
      description: 'Payment method not selected',
    })
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
        : 'Please select a payment method first'
    )
    return ctx.scene.leave()
  }

  const email = ctx.session.email
  logger.info('üìß Email –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏:', {
    description: 'Email from session',
    email,
  })

  const stars = selectedPayment.amount
  const subscription = selectedPayment.subscription as
    | LocalSubscription
    | undefined

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
  if (subscription && !['neurophoto', 'neurobase'].includes(subscription)) {
    logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', {
      description: 'Invalid subscription type',
      subscription,
    })
    await ctx.reply(
      isRu
        ? '–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Invalid subscription type selected. Please try again.'
    )
    return ctx.scene.leave()
  }

  try {
    const userId = ctx.from?.id
    if (!userId) {
      throw new Error('User ID not found')
    }

    logger.info('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'User ID',
      userId,
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π InvId –¥–ª—è Robokassa
    const numericInvId = await generateShortInvId(userId, stars)
    const invId = numericInvId.toString()

    logger.info('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID —Å—á–µ—Ç–∞:', {
      description: 'Generated invoice ID',
      invId,
      numericInvId,
    })
    if (!merchantLogin || !password1) {
      throw new Error('merchantLogin or password1 is not defined')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID - –í–°–ï–ì–î–ê –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const invoiceURL = await getInvoiceId(
      merchantLogin,
      stars,
      numericInvId,
      description,
      password1,
      useTestMode
    )

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL-–∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω
    const finalInvoiceURL = invoiceURL.includes('test.robokassa.ru')
      ? invoiceURL
      : invoiceURL.replace(
          'https://auth.robokassa.ru/Merchant/Index.aspx',
          'https://test.robokassa.ru/Index.aspx'
        )

    if (finalInvoiceURL !== invoiceURL) {
      logger.warn('‚ö†Ô∏è URL –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:', {
        description: 'URL was corrected for test mode in getRuBillWizard',
        originalUrl: invoiceURL,
        correctedUrl: finalInvoiceURL,
      })
    }

    logger.info('üîó URL —Å—á–µ—Ç–∞:', {
      description: 'Invoice URL',
      invoiceURL: finalInvoiceURL,
      isTestMode: useTestMode,
      domainUsed: finalInvoiceURL.includes('test.robokassa.ru')
        ? 'test.robokassa.ru'
        : 'auth.robokassa.ru',
    })

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ RuBillWizard:', {
      description: 'Processing payment in RuBillWizard',
      telegram_id: userId,
      amount: stars,
      inv_id: invId,
    })

    await inngest.send({
      name: 'payment/process',
      data: {
        telegram_id: String(userId),
        amount: Number(stars),
        type: TransactionType.MONEY_INCOME,
        description: subscription
          ? `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription}`
          : `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥`,
        bot_name,
        inv_id: invId,
        stars: Number(stars),
        payment_method: 'Robokassa',
        subscription: subscription,
        currency: 'RUB',
        invoice_url: finalInvoiceURL,
        service_type: subscription ? ModeEnum.Subscribe : ModeEnum.TopUpBalance,
        status: 'PENDING',
      },
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    const { messageText, inlineKeyboard } = getRuBillMessage({
      stars,
      subscription,
      isRu,
      invoiceURL: finalInvoiceURL,
    })

    await ctx.reply(messageText, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
      parse_mode: 'HTML',
    })
    logger.info('‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Payment message sent to user',
    })

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (subscription) {
      await updateUserSubscription(userId.toString(), subscription)
      logger.info('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
        description: 'User subscription updated',
        subscription,
      })
    }

    ctx.session.selectedPayment = {
      amount: selectedPayment.amount,
      stars: Number(selectedPayment.stars),
      subscription: selectedPayment.subscription as LocalSubscription,
      type: TransactionType.SUBSCRIPTION_PURCHASE,
    }

    return ctx.scene.leave()
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', {
      description: 'Error creating invoice',
      error: error instanceof Error ? error.message : String(error),
    })
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error creating invoice. Please try again.'
    )
    ctx.scene.leave()
    return
  }
}

export const getRuBillWizard = new WizardScene(
  'getRuBillWizard',
  generateInvoiceStep
)
