import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import {
  getInvoiceId,
  merchantLogin,
  password1,
  description,
  subscriptionTitles,
} from './helper'
import {
  setPayments,
  updateUserSubscription,
  getUserBalance,
} from '@/core/supabase'
import { WizardScene } from 'telegraf/scenes'
import { getBotNameByToken } from '@/core'

import { logger } from '@/utils/logger'
import { generateInvId } from '@/utils/generateInvId'
import { Subscription } from '@/interfaces/supabase.interface'
import { ModeEnum } from '@/interfaces/modes.interface'

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
export type LocalSubscription = Extract<
  Subscription,
  'neurophoto' | 'neurobase' | 'neuroblogger'
>

const generateInvoiceStep = async (ctx: MyContext) => {
  logger.info('üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞', {
    description: 'Starting invoice generation',
  })

  const isRu = isRussian(ctx)
  const selectedPayment = ctx.session.selectedPayment

  if (!selectedPayment) {
    logger.error('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
      description: 'Payment method not selected',
    })
    return
  }

  const email = ctx.session.email
  logger.info('üìß Email –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏:', {
    description: 'Email from session',
    email,
  })

  const stars = selectedPayment.amount
  const subscription = selectedPayment.subscription as
    | LocalSubscription
    | undefined

  try {
    const userId = ctx.from?.id
    if (!userId) {
      throw new Error('User ID not found')
    }

    logger.info('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'User ID',
      userId,
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π InvId
    const invId = generateInvId(userId, stars)
    const numericInvId = parseInt(invId.split('-')[0]) // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID

    logger.info('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID —Å—á–µ—Ç–∞:', {
      description: 'Generated invoice ID',
      invId,
      numericInvId,
    })
    if (!merchantLogin || !password1) {
      throw new Error('merchantLogin or password1 is not defined')
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
    const invoiceURL = await getInvoiceId(
      merchantLogin,
      stars,
      numericInvId,
      description,
      password1
    )
    logger.info('üîó URL —Å—á–µ—Ç–∞:', {
      description: 'Invoice URL',
      invoiceURL,
    })

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
    await setPayments({
      telegram_id: userId.toString(),
      OutSum: stars.toString(),
      InvId: invId,
      inv_id: invId,
      currency: 'RUB',
      stars: Number(selectedPayment.stars),
      status: 'PENDING',
      email: email || undefined,
      payment_method: 'Telegram',
      subscription: subscription,
      bot_name,
      description: subscription
        ? `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription}`
        : `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥`,
      metadata: {
        payment_method: 'Telegram',
        subscription: subscription || undefined,
        stars: Number(selectedPayment.stars),
      },
      language: ctx.from?.language_code || 'ru',
      invoice_url: invoiceURL,
      type: 'money_expense',
      service_type: ModeEnum.NeuroPhoto,
    })
    logger.info('üíæ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING', {
      description: 'Payment saved with PENDING status',
    })

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balance = await getUserBalance(userId.toString(), bot_name)
    logger.info('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      description: 'Current user balance',
      balance,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    const titles = subscriptionTitles(isRu)
    const subscriptionTitle = subscription ? titles[subscription] : ''

    const inlineKeyboard = [
      [
        {
          text: isRu
            ? `–ö—É–ø–∏—Ç—å ${subscriptionTitle} –∑–∞ ${stars} —Ä.`
            : `Buy ${subscriptionTitle} for ${stars} RUB.`,
          url: invoiceURL,
        },
      ],
    ]

    await ctx.reply(
      isRu
        ? `<b>ü§ë –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionTitle}</b>
          \n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @neuro_sage`
        : `<b>ü§ë Subscription ${subscriptionTitle}</b>
          \nIn case of payment issues, please contact us @neuro_sage`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
        parse_mode: 'HTML',
      }
    )
    logger.info('‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Payment message sent to user',
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –±–∞–ª–∞–Ω—Å–µ
    await ctx.reply(
      isRu
        ? `‚≠êÔ∏è –¶–µ–Ω–∞: ${stars} –∑–≤–µ–∑–¥\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance} –∑–≤–µ–∑–¥`
        : `‚≠êÔ∏è Price: ${stars} stars\nüí∞ Balance: ${balance} stars`
    )
    logger.info('üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –∏ –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', {
      description: 'Price and balance information sent',
      stars,
      balance,
    })

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (subscription) {
      await updateUserSubscription(userId.toString(), subscription)
      logger.info('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
        description: 'User subscription updated',
      })
    }

    return ctx.scene.leave()
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', {
      description: 'Error creating invoice',
      error: error instanceof Error ? error.message : String(error),
    })
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error creating invoice. Please try again.'
    )
  }
}

export const getRuBillWizard = new WizardScene(
  'getRuBillWizard',
  generateInvoiceStep
)
