import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import {
  getInvoiceId,
  merchantLogin,
  password1,
  description,
  subscriptionTitles,
} from './helper'
import { setPayments } from '../../core/supabase'
import { WizardScene } from 'telegraf/scenes'
import { getBotNameByToken } from '@/core'

export async function generateInvoiceStep(ctx: MyContext) {
  console.log('CASE: generateInvoiceStep')
  const isRu = isRussian(ctx)
  const selectedPayment = ctx.session.selectedPayment

  if (selectedPayment) {
    const email = ctx.session.email
    console.log('Email from session:', email)

    const subscription = selectedPayment.subscription
    let amount: number
    let stars: number
    if (subscription === 'neurophoto') {
      amount = 1110 // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ù–µ–π—Ä–æ–§–æ—Ç–æ
      stars = 476
    } else if (subscription === 'neurobase') {
      amount = 2999 // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ù–µ–π—Ä–æ–ë–∞–∑–∞
      stars = 1303
    }

    try {
      const userId = ctx.from?.id
      console.log('User ID:', userId)

      const invId = Math.floor(Math.random() * 1000000)
      console.log('Generated invoice ID:', invId)

      // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
      const invoiceURL = await getInvoiceId(
        merchantLogin,
        amount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
        invId,
        description,
        password1
      )
      console.log('Invoice URL:', invoiceURL)
      const { bot_name } = getBotNameByToken(ctx.telegram.token)

      try {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
        await setPayments({
          telegram_id: userId.toString(),
          OutSum: amount.toString(),
          InvId: invId.toString(),
          currency: 'RUB',
          stars,
          status: 'PENDING',
          payment_method: 'Telegram',
          subscription: subscription,
          bot_name,
          language: ctx.from?.language_code,
        })
        console.log('Payment saved with status PENDING')
      } catch (error) {
        console.error('Error in setting payments:', error)
        await ctx.reply(
          isRu
            ? `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ${error}`
            : `Error in creating payment. Please try again. ${error}`
        )
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
      const inlineKeyboard = [
        [
          {
            text: isRu
              ? `–û–ø–ª–∞—Ç–∏—Ç—å ${
                  subscriptionTitles(isRu)[subscription]
                } –∑–∞ ${amount} —Ä.`
              : `Pay for ${
                  subscriptionTitles(isRu)[subscription]
                } for ${amount} RUB.`,
            url: invoiceURL,
          },
        ],
      ]

      await ctx.reply(
        isRu
          ? `<b>üíµ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${
              subscriptionTitles(isRu)[subscription]
            }</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.

–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @neuro_sage`
          : `<b>üíµ Invoice created for subscription ${
              subscriptionTitles(isRu)[subscription]
            }</b>
Click the button below to proceed with payment.

In case of payment issues, please contact us @neuro_sage`,
        {
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
          parse_mode: 'HTML',
        }
      )
      console.log('Payment message sent to user with URL button')

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
      return ctx.scene.leave()
    } catch (error) {
      console.error('Error in creating invoice:', error)
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : 'Error creating invoice. Please try again.'
      )
    }
  }
}

export const getRuBillWizard = new WizardScene(
  'getRuBillWizard',
  generateInvoiceStep
)
