import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import {
  getInvoiceId,
  merchantLogin,
  password1,
  description,
  subscriptionTitles,
} from './helper'
import { setPayments, updateUserSubscription } from '../../core/supabase'
import { WizardScene } from 'telegraf/scenes'
import { getBotNameByToken } from '@/core'
import { v4 as uuidv4 } from 'uuid'
const generateInvoiceStep = async (ctx: MyContext) => {
  console.log('üöÄ Starting generateInvoiceStep')
  const isRu = isRussian(ctx)
  const selectedPayment = ctx.session.selectedPayment

  if (selectedPayment) {
    const email = ctx.session.email
    console.log('üìß Email from session:', email)

    const stars = selectedPayment.amount
    const subscription = selectedPayment.subscription

    try {
      const userId = ctx.from?.id
      console.log('üë§ User ID:', userId)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π InvId
      const invId = uuidv4()
      console.log('üî¢ Generated invoice ID:', invId)

      // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
      const invoiceURL = await getInvoiceId(
        merchantLogin,
        stars,
        Number(invId),
        description,
        password1
      )
      console.log('üîó Invoice URL:', invoiceURL)

      const { bot_name } = getBotNameByToken(ctx.telegram.token)

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
      await setPayments({
        telegram_id: userId.toString(),
        OutSum: stars.toString(),
        InvId: invId.toString(),
        currency: 'STARS',
        stars: Number(selectedPayment.stars),
        status: 'PENDING',
        email: email,
        payment_method: 'Telegram',
        subscription: subscription,
        bot_name,
        language: ctx.from?.language_code,
      })
      console.log('üíæ Payment saved with status PENDING')

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
      const inlineKeyboard = [
        [
          {
            text: isRu
              ? `–ö—É–ø–∏—Ç—å ${
                  subscriptionTitles(isRu)[subscription]
                } –∑–∞ ${stars} —Ä.`
              : `Buy ${
                  subscriptionTitles(isRu)[subscription]
                } for ${stars} RUB.`,
            url: invoiceURL,
          },
        ],
      ]

      await ctx.reply(
        isRu
          ? `<b>ü§ë –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionTitles(isRu)[subscription]}</b>
            \n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @neuro_sage`
          : `<b>ü§ë Subscription ${subscriptionTitles(isRu)[subscription]}</b>
            \nIn case of payment issues, please contact us @neuro_sage`,
        {
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
          parse_mode: 'HTML',
        }
      )
      console.log('‚úâÔ∏è Payment message sent to user')

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await updateUserSubscription(userId.toString(), subscription)
      console.log('‚úÖ User subscription updated')

      return ctx.scene.leave()
    } catch (error) {
      console.error('‚ùå Error in creating invoice:', error)
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : 'Error creating invoice. Please try again.'
      )
    }
  }
}

export const getRuBillWizard = new WizardScene(
  'getRuBillWizard',
  generateInvoiceStep
)
