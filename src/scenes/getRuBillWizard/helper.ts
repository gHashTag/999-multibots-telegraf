import {
  MERCHANT_LOGIN,
  PASSWORD1,
  RESULT_URL2,
  TEST_PASSWORD1,
} from '@/config'

import md5 from 'md5'
import {
  subscriptionConfigs,
  type LocalSubscription,
} from '@/types/subscription'

export const merchantLogin = MERCHANT_LOGIN
export const password1 = PASSWORD1
export const testPassword1 = TEST_PASSWORD1
export const resultUrl2 = RESULT_URL2 || ''
export const description = '–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥'

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ Robokassa
export const useTestMode = false

export function subscriptionTitles(
  type: LocalSubscription,
  isRu: boolean
): string {
  if (type === 'stars') {
    return isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥—ã' : '‚≠êÔ∏è Stars'
  }

  const config = subscriptionConfigs[type]
  return isRu ? config.titleRu : config.titleEn
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Robokassa
 * –°–æ–∑–¥–∞–µ—Ç ID –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞, –Ω–æ —Å –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω–æ–π
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param amount –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
 * @returns –ö–æ—Ä–æ—Ç–∫–∏–π ID –∑–∞–∫–∞–∑–∞ (–¥–æ 9 —Ü–∏—Ñ—Ä)
 */
export function generateShortInvId(
  userId: string | number,
  amount: number
): number {
  try {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä timestamp
    const timestamp = Date.now() % 100000
    // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999
    const random = Math.floor(Math.random() * 9000) + 1000
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return parseInt(`${timestamp}${random}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ inv_id', {
      description: 'Error generating short inv_id',
      error,
      userId,
      amount,
    })
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 1 –º–∏–ª–ª–∏–æ–Ω–∞
    return Math.floor(Math.random() * 1000000) + 1
  }
}

export const generateSignature = (
  merchantLogin: string,
  outSum: number,
  invId: number,
  password1: string,
  isTest: boolean = useTestMode
): string => {
  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const actualPassword = isTest && testPassword1 ? testPassword1 : password1

  console.log('üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Robokassa', {
    description: 'Generating Robokassa signature',
    merchantLogin,
    outSum,
    invId,
    isTestMode: isTest,
    usingTestPassword: isTest && testPassword1 ? true : false,
  })

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –±–µ–∑ resultUrl2
  const signatureString = `${merchantLogin}:${outSum}:${invId}:${actualPassword}`
  console.log('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
    description: 'Signature string',
    signatureString,
  })

  const signature = md5(signatureString).toUpperCase()
  console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', {
    description: 'Generated signature',
    signature,
  })

  return signature
}

export const getInvoiceId = async (
  merchantLogin: string,
  outSum: number,
  invId: number,
  paymentDescription: string,
  password1: string,
  isTest: boolean = useTestMode
): Promise<string> => {
  console.log('üöÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
    description: 'Generating invoice with parameters',
    merchantLogin,
    outSum,
    invId,
    paymentDescription,
    isTestMode: isTest,
  })

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ invId - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
  if (!Number.isInteger(invId) || invId > 2147483647) {
    console.error('‚ùå –û—à–∏–±–∫–∞: InvId –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω', {
      description: 'Error: InvId is incorrect, will be converted',
      originalInvId: invId,
    })
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    invId = Math.floor(invId % 1000000)
  }

  const signatureValue = generateSignature(
    merchantLogin,
    outSum,
    invId,
    password1,
    isTest
  )

  // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL Robokassa
  const baseUrl = isTest
    ? 'https://test.robokassa.ru/Index.aspx'
    : 'https://auth.robokassa.ru/Merchant/Index.aspx'

  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ - –í–ê–ñ–ù–û: –±–µ–∑ ResultUrl2
  const params = new URLSearchParams({
    MerchantLogin: merchantLogin,
    OutSum: outSum.toString(),
    InvId: invId.toString(),
    Description: paymentDescription,
    SignatureValue: signatureValue,
  })

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  if (isTest) {
    params.append('IsTest', '1')
  }

  const url = `${baseUrl}?${params.toString()}`
  console.log('‚úÖ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è Robokassa:', {
    message: 'Generated URL for Robokassa',
    testMode: isTest,
    paymentUrl: url,
  })

  return url
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —á–µ–∫–∞
 */
export const testGenerateInvoiceUrl = async (
  amount: number
): Promise<string> => {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL —á–µ–∫–∞:', {
    description: 'Generating test invoice URL',
    amount,
  })

  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }

  const invId = Math.floor(Math.random() * 1000000) + 1

  return getInvoiceId(
    merchantLogin,
    amount,
    invId,
    description,
    password1,
    useTestMode
  )
}
