import {
  MERCHANT_LOGIN,
  PASSWORD1,
  RESULT_URL2,
  TEST_PASSWORD1,
  isDev,
} from '@/config'

import md5 from 'md5'
import {
  subscriptionConfigs,
  type LocalSubscription,
} from '@/types/subscription'
import { logger } from '@/utils/logger'

export const merchantLogin = MERCHANT_LOGIN
export const password1 = PASSWORD1
export const testPassword1 = TEST_PASSWORD1
export const resultUrl2 = RESULT_URL2 || ''
export const description = '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ Robokassa
export const useTestMode = isDev

export function subscriptionTitles(
  type: LocalSubscription,
  isRu: boolean
): string {
  const config = subscriptionConfigs[type]
  if (!config) {
    return isRu ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' : 'Unknown subscription'
  }
  return isRu ? config.titleRu : config.titleEn
}

/**
 * Generates a short invoice ID based on user ID and stars
 * @param userId User's Telegram ID
 * @param stars Number of stars
 * @returns Short invoice ID
 */
export const generateShortInvId = (userId: number, stars: number): number => {
  const timestamp = Date.now()
  const shortId = parseInt(`${userId}${stars}${timestamp % 1000}`)
  return shortId
}

/**
 * Generates a Robokassa invoice URL
 * @param merchantLogin Merchant login
 * @param amount Payment amount
 * @param invId Invoice ID
 * @param description Payment description
 * @param password1 Merchant password 1
 * @param isTest Whether to use test mode
 * @returns Payment URL
 */
export const getInvoiceId = async (
  merchantLogin: string,
  amount: number,
  invId: number,
  description: string,
  password1: string,
  isTest: boolean = useTestMode
): Promise<string> => {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ getInvoiceId', {
      description: 'Starting getInvoiceId',
      merchantLogin,
      outSum: amount,
      invId,
      useTestMode: isTest,
    })

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    const actualPassword = isTest && testPassword1 ? testPassword1 : password1

    logger.info('üîë –í—ã–±—Ä–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è Robokassa', {
      description: 'Selected password for Robokassa',
      isTestMode: isTest,
      usingTestPassword: isTest && testPassword1 ? true : false,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
    logger.info('üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è Robokassa', {
      description: 'Generating Robokassa URL',
      merchantLogin,
      outSum: amount,
      invId,
      isTestMode: isTest,
      usingTestPassword: isTest && testPassword1 ? true : false,
      mode: isTest ? '–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú' : '–ë–û–ï–í–û–ô –†–ï–ñ–ò–ú',
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const signatureString = `${merchantLogin}:${amount}:${invId}:${actualPassword}`
    logger.info('üìù –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
      description: 'Signature string',
      signatureString,
    })

    const signature = md5(signatureString).toUpperCase()

    // !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û !!! - –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ test.robokassa.ru
    const baseUrl = 'https://auth.robokassa.ru/Merchant/Index.aspx'
    const testUrl = 'https://test.robokassa.ru/Index.aspx'

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams({
      MerchantLogin: merchantLogin,
      OutSum: amount.toString(),
      InvId: invId.toString(),
      Description: description,
      SignatureValue: signature,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if (isTest) {
      params.append('IsTest', '1')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let paymentUrl = isTest
      ? `${testUrl}?${params.toString()}`
      : `${baseUrl}?${params.toString()}`

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–û–í–ï–†–Ø–ï–ú –ò –ó–ê–ú–ï–ù–Ø–ï–ú –î–û–ú–ï–ù –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï
    if (isTest && paymentUrl.includes('auth.robokassa.ru')) {
      logger.error('‚ö†Ô∏è –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ', {
        description: 'Incorrect domain in test mode',
        paymentUrl,
        isTestMode: isTest,
      })

      // –ñ–µ—Å—Ç–∫–æ –∑–∞–º–µ–Ω—è–µ–º URL –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–º–µ–Ω
      paymentUrl = paymentUrl.replace(
        'https://auth.robokassa.ru/Merchant/Index.aspx',
        'https://test.robokassa.ru/Index.aspx'
      )

      logger.info('üîß URL –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:', {
        description: 'URL forcibly corrected',
        correctUrl: paymentUrl,
      })
    }

    logger.info('‚úÖ URL —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è Robokassa:', {
      message: 'URL generated for Robokassa',
      testMode: isTest,
      paymentUrl,
      domain: isTest ? 'test.robokassa.ru' : 'auth.robokassa.ru',
    })

    return paymentUrl
  } catch (error) {
    logger.error('‚ùå Error generating Robokassa invoice:', {
      description: 'Error generating payment URL',
      error: error instanceof Error ? error.message : 'Unknown error',
      invId,
    })
    throw error
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —á–µ–∫–∞
 */
export const testGenerateInvoiceUrl = async (
  amount: number
): Promise<string> => {
  logger.info('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL —á–µ–∫–∞:', {
    description: 'Generating test invoice URL',
    amount,
    isTestMode: true,
  })

  if (!merchantLogin || !password1) {
    throw new Error('merchantLogin or password1 is not defined')
  }

  const invId = Math.floor(Math.random() * 1000000) + 1

  logger.info('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ID –∏–Ω–≤–æ–π—Å–∞:', {
    description: 'Generated test invoice ID',
    invId,
    isTestMode: true,
  })

  // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä isTest=true
  return getInvoiceId(
    merchantLogin,
    amount,
    invId,
    description,
    password1,
    true
  )
}
