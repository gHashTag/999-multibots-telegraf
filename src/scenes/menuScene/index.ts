import type { Mode, MyContext, Subscription } from '../../interfaces'
import { sendGenericErrorMessage } from '@/menu'
import { levels, mainMenu } from '../../menu/mainMenu'
import { getReferalsCountAndUserData } from '@/core/supabase'
import { isDev, isRussian } from '@/helpers'
import { sendReplyWithKeyboard } from './sendReplyWithKeyboard'
import { getText } from './getText'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { Scenes } from 'telegraf'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { ModeEnum } from '@/interfaces/modes'
import { checkFullAccess } from '@/handlers/checkFullAccess'
import { getTranslation } from '@/core'
import { handleMenu } from '@/handlers/handleMenu'
import { logger } from '@/utils'
import { getUserDetailsSubscription } from '@/core/supabase/getUserDetailsSubscription'
import { handleRestartVideoGeneration } from '@/handlers/handleVideoRestart'
import { handleTechSupport } from '@/commands/handleTechSupport'

// --- Export the step function for testing ---
export const menuCommandStep = async (ctx: MyContext) => {
  console.log('CASE üì≤: menuCommand')
  const isRu = isRussian(ctx)
  try {
    const telegram_id = ctx.from?.id?.toString() || ''

    // Fetch only the subscription type
    // NOTE: Assuming getReferalsCountAndUserData can return only subscription or using a different function if needed.
    // For now, we still destructure level/count but won't use them.
    const userDetails = await getUserDetailsSubscription(telegram_id)

    const newSubscription = userDetails.subscriptionType

    // if (isDev) {
    //   console.log('DEV MODE: Simulating SUBSCRIPTION TYPE only')
    //   // --- !!! –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ò–º–∏—Ç–∞—Ü–∏—è –¢–û–õ–¨–ö–û –¢–ò–ü–ê –ü–û–î–ü–ò–°–ö–ò !!! ---
    //   newSubscription = SubscriptionType.NEUROBASE // –ó–ê–ú–ï–ù–ò –ù–ê –ù–£–ñ–ù–´–ô –¢–ò–ü –î–õ–Ø –¢–ï–°–¢–ê
    //   // -------------------------------------------------------------
    //   console.log(`DEV SIMULATION: Sub=${newSubscription}`)
    // } else {
    //   console.log(`Fetched User Data: Sub=${newSubscription}`)
    // }

    // Pass only necessary data to mainMenu (assuming it adapts or uses defaults for level/count)
    const keyboard = await mainMenu({
      isRu,
      subscription: userDetails.subscriptionType, // Pass only subscription
      ctx,
    })

    let message = ''
    let photo_url: string | null = null
    let translationKey = '' // Initialize key

    // --- Determine translation key based ONLY on Subscription Type ---
    if (
      newSubscription === SubscriptionType.NEUROBASE ||
      newSubscription === SubscriptionType.NEUROTESTER
    ) {
      translationKey = 'menu' // Use 'menu' key for full access users
      logger.info(
        `[menuCommandStep] Subscription: ${newSubscription}. Using translation key: '${translationKey}'`
      )
    } else {
      // Includes NEUROPHOTO and users without active subscription
      translationKey = 'digitalAvatar' // Use 'digitalAvatar' for limited access / prompt to subscribe
      logger.info(
        `[menuCommandStep] Subscription: ${newSubscription} or None. Using translation key: '${translationKey}'`
      )
    }

    // --- Get Translation using the determined key ---
    logger.info(
      `[menuCommandStep] Getting translation for key: ${translationKey}, Bot: ${ctx.botInfo?.username}`
    )
    const { translation, url } = await getTranslation({
      key: translationKey,
      ctx,
      bot_name: ctx.botInfo?.username,
    })

    // --- Set message and photo using translation results or fallbacks ---
    if (translation) {
      message = translation
      photo_url = url || null
    } else {
      // Construct the desired fallback message directly, remove unnecessary escapes
      message = isRu
        ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá'
        : 'üè† Main Menu\nSelect the section üëá'
      logger.warn(
        `[menuCommandStep] Translation not found for key '${translationKey}'. Using constructed fallback text.`
      )
      photo_url = null // No photo for fallback
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: translation —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if (
      translation &&
      typeof translation === 'string' &&
      translation.trim() !== ''
    ) {
      logger.info(
        `[menuCommandStep] Sending DB message: "${message.substring(0, 50)}...", Photo URL: ${photo_url}`
      )
    } else {
      logger.info(
        `[menuCommandStep] Sending FALLBACK message: "${(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá' : 'üè† Main Menu\\nSelect the section üëá').substring(0, 50)}...", Photo URL: null`
      )
    }

    if (photo_url) {
      await sendReplyWithKeyboard(ctx, message, [], keyboard, photo_url)
    } else {
      // Send fallback without parse_mode, or send translation (also without parse_mode FOR MENU KEY)
      if (translation && translationKey !== 'menu') {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ò —ç—Ç–æ –ù–ï –∫–ª—é—á 'menu'
        await ctx.reply(message, {
          parse_mode: 'MarkdownV2', // –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π
          reply_markup: keyboard.reply_markup,
        })
      } else {
        // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (fallback –ò–õ–ò –∫–ª—é—á 'menu' –∏–∑ –±–∞–∑—ã)
        let messageToSend = message // –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback –∏–ª–∏ –∏–∑ –±–∞–∑—ã)
        if (translationKey === 'menu' && typeof messageToSend === 'string') {
          // –ó–ê–ú–ï–ù–Ø–ï–ú '\\n' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å '\n' –¢–û–õ–¨–ö–û –¥–ª—è –∫–ª—é—á–∞ 'menu'
          messageToSend = messageToSend.replace(/\\n/g, '\n')
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ parse_mode)
        await ctx.reply(messageToSend, {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          // –ù–ï–¢ parse_mode –∑–¥–µ—Å—å
          reply_markup: keyboard.reply_markup,
        })
      }
    }

    // Ensure the wizard progresses to handle button clicks
    ctx.wizard.next()
  } catch (error) {
    console.error('Error in menu command:', error)
    await sendGenericErrorMessage(ctx, isRu, error as Error)
    ctx.scene.leave()
    throw error
  }
}

/**
 * !!! –í–ù–ò–ú–ê–ù–ò–ï !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê !!! –í–ù–ò–ú–ê–ù–ò–ï !!!
 *
 * –ù–ò–ö–û–ì–î–ê –ù–ï –î–û–ë–ê–í–õ–Ø–ô–¢–ï –ë–ï–ó–£–°–õ–û–í–ù–´–ô ctx.scene.leave() –í –ö–û–ù–¶–ï –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò!!!
 *
 * –¢–∞–∫–æ–π –≤—ã–∑–æ–≤ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º—É –≤—ã—Ö–æ–¥—É –∏–∑ –ª—é–±–æ–π —Å—Ü–µ–Ω—ã, –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
 * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –î–ê–ñ–ï –ï–°–õ–ò –ü–ï–†–ï–•–û–î –¢–û–õ–¨–ö–û –ß–¢–û –ü–†–û–ò–ó–û–®–Å–õ!
 *
 * –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ —Å–µ—Ä—å—ë–∑–Ω—ã–π –±–∞–≥, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–∏–ª –≤ —Å—Ü–µ–Ω—É –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * –∏ —Å—Ä–∞–∑—É –∏–∑ –Ω–µ—ë –≤—ã—Ö–æ–¥–∏–ª - –º–µ–Ω—é –æ—Ç–∫—Ä—ã–≤–∞–ª–æ—Å—å, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å.
 *
 * –ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –≤—ã–∑–æ–≤ ctx.scene.leave() –∑–¥–µ—Å—å —É–º–µ—Å—Ç–µ–Ω –¢–û–õ–¨–ö–û –≤ –±–ª–æ–∫–µ else,
 * –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
 */
// --- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é menuNextStep –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
export const menuNextStep = async (ctx: MyContext) => {
  logger.info('CASE 1: menuScene.next')
  if ('callback_query' in ctx.update && 'data' in ctx.update.callback_query) {
    const text = ctx.update.callback_query.data
    logger.info(`[menuNextStep] Callback Query Data: ${text}`)
    // Handle callback query buttons as before
    if (text === 'unlock_features') {
      logger.info('[menuNextStep] Handling callback: unlock_features')
      await ctx.scene.enter('subscriptionScene')
    } else {
      // Assuming other callbacks might be handled by handleMenu if they represent scene entries
      logger.info(`[menuNextStep] Forwarding callback to handleMenu: ${text}`)
      await handleMenu(ctx)
    }
  } else if ('message' in ctx.update && 'text' in ctx.update.message) {
    const text = ctx.update.message.text
    const isRu = isRussian(ctx)
    logger.info(`[menuNextStep] Text Message Received: ${text}`)

    // --- –ù–ê–ß–ê–õ–û: –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ù–û–ü–û–ö –ü–ï–†–ï–î handleMenu ---
    if (text === (isRu ? levels[104].title_ru : levels[104].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' button. Re-entering menuScene.`
      )
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É (menuScene) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      return ctx.scene.reenter()
    } else if (text === (isRu ? levels[106].title_ru : levels[106].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–°–ø—Ä–∞–≤–∫–∞' button. Entering helpScene.`
      )
      ctx.session.mode = ModeEnum.MainMenu // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏
      return ctx.scene.enter(ModeEnum.Help)
    } else if (text === (isRu ? levels[103].title_ru : levels[103].title_en)) {
      logger.info(`[menuNextStep] Handling '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' button.`)
      return handleTechSupport(ctx) // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    } else if (text === (isRu ? levels[102].title_ru : levels[102].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' button. Entering inviteScene.`
      )
      ctx.session.mode = ModeEnum.Invite
      return ctx.scene.enter(ModeEnum.Invite)
    } else if (text === (isRu ? levels[101].title_ru : levels[101].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–ë–∞–ª–∞–Ω—Å' button. Entering balanceScene.`
      )
      ctx.session.mode = ModeEnum.Balance
      return ctx.scene.enter(ModeEnum.Balance)
    } else if (text === (isRu ? levels[100].title_ru : levels[100].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' button. Entering paymentScene.`
      )
      ctx.session.mode = ModeEnum.PaymentScene
      ctx.session.subscription = SubscriptionType.STARS // –ú–∞—Ä–∫–µ—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      return ctx.scene.enter(ModeEnum.PaymentScene)
    } else if (text === (isRu ? levels[105].title_ru : levels[105].title_en)) {
      logger.info(
        `[menuNextStep] Handling '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' button. Entering subscriptionScene.`
      )
      ctx.session.mode = ModeEnum.SubscriptionScene
      return ctx.scene.enter(ModeEnum.SubscriptionScene)
    }
    // --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –ö–ù–û–ü–û–ö ---

    // *** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?" (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å) ***
    if (
      text === 'üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?' ||
      text === 'üé• Generate new video?'
    ) {
      logger.info(
        `[menuNextStep] Detected 'Generate new video' button. Calling handleRestartVideoGeneration...`
      )
      await handleRestartVideoGeneration(ctx)
      return
    }

    // Prevent loop if /menu is sent again
    if (text === '/menu') {
      logger.warn(
        '[menuNextStep] Received /menu command while already in menu scene. Ignoring to prevent loop.'
      )
      return
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –ø–µ—Ä–µ–¥–∞–µ–º –≤ handleMenu –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
    logger.info(`[menuNextStep] Forwarding text to handleMenu: ${text}`)
    await handleMenu(ctx)
  } else {
    // Handle other update types or leave if unhandled
    logger.warn(
      '[menuNextStep] Unhandled update type or message format. Leaving scene.',
      ctx.update
    )
    // It might be better *not* to leave automatically here unless necessary.
    // Consider if specific error handling is needed.
    // ctx.scene.leave(); // Removed for safety, only leave if truly unhandled/error.
  }
}

export const menuScene = new Scenes.WizardScene(
  ModeEnum.MainMenu,
  menuCommandStep,
  menuNextStep
)
