import { Scenes } from 'telegraf'
import { MyContext, Subscription } from '@/interfaces'
import { logger } from '@/utils/logger'
import { handleMenu } from '@/handlers'
import { mainMenu } from '@/menu/mainMenu'
import { isRussian, isDev } from '@/helpers'
import { getReferalsCountAndUserData } from '@/core/supabase/getReferalsCountAndUserData'

export const menuScene = new Scenes.BaseScene<MyContext>('menu_scene')

menuScene.enter(async (ctx: MyContext) => {
  logger.info('üéØ –í—Ö–æ–¥ –≤ –º–µ–Ω—é', {
    description: 'Entering menu scene',
    telegram_id: ctx.from?.id,
    current_mode: ctx.session?.mode,
    action: 'enter_menu',
  })

  const isRu = isRussian(ctx)
  const telegram_id = ctx.from?.id?.toString() || ''

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let newCount = 0
    let newSubscription: Subscription = 'stars'
    let newLevel = 0

    if (isDev) {
      newSubscription = 'neurobase'
    } else {
      const { count, subscription, level } =
        await getReferalsCountAndUserData(telegram_id)
      newCount = count
      newSubscription = subscription || 'stars'
      newLevel = level
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = await mainMenu({
      isRu,
      inviteCount: newCount,
      subscription: newSubscription,
      ctx,
      level: newLevel,
      additionalButtons: [],
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await ctx.reply(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main Menu', keyboard)

    logger.info('‚úÖ –ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      description: 'Menu sent successfully',
      telegram_id: ctx.from?.id,
      subscription: newSubscription,
      level: newLevel,
      action: 'menu_sent',
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é', {
      description: 'Error creating menu',
      telegram_id: ctx.from?.id,
      error: error instanceof Error ? error.message : 'Unknown error',
      action: 'menu_error',
    })
    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred. Please try again later.'
    )
  }
})

menuScene.on('text', async (ctx: MyContext) => {
  if (!ctx.message || !('text' in ctx.message)) {
    logger.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
      description: 'Non-text message received',
      telegram_id: ctx.from?.id,
      action: 'skip_non_text',
    })
    return
  }

  const text = ctx.message.text
  logger.info('üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é', {
    description: 'Received text in menu',
    telegram_id: ctx.from?.id,
    message_text: text,
    current_mode: ctx.session?.mode,
    action: 'menu_message',
  })

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ handleMenu
  await handleMenu(ctx)
})
