import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'

import { isValidImage } from '../../helpers/images'
import { isRussian } from '@/helpers/language'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { getBotToken } from '@/handlers'

// Define gender options
const GENDER_MALE = 'male'
const GENDER_FEMALE = 'female'

export const trainFluxModelWizard = new Scenes.WizardScene<MyContext>(
  'trainFluxModelWizard',

  // Step 1: Ask for Gender
  async ctx => {
    const isRu = isRussian(ctx)
    await ctx.reply(
      isRu
        ? 'üë§ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:'
        : 'üë§ Specify the gender of your avatar:',
      Markup.inlineKeyboard([
        Markup.button.callback(
          isRu ? '–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è' : 'Male ‚ôÇÔ∏è',
          `set_gender:${GENDER_MALE}`
        ),
        Markup.button.callback(
          isRu ? '–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è' : 'Female ‚ôÄÔ∏è',
          `set_gender:${GENDER_FEMALE}`
        ),
      ])
    )
    return ctx.wizard.next()
  },

  // Step 2: Handle Gender Selection & Ask for Images
  async ctx => {
    const isRu = isRussian(ctx)
    let gender: string | null = null

    // Check if it's a callback query for gender
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      const data = ctx.callbackQuery.data
      if (data.startsWith('set_gender:')) {
        gender = data.split(':')[1]
        await ctx.answerCbQuery() // Acknowledge the button press
      } else {
        // Unexpected callback data
        await ctx.answerCbQuery(
          isRu ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' : 'Unknown action'
        )
        console.warn('[trainFluxModelWizard] Unexpected callback data:', data)
        // Ask again?
        await ctx.reply(
          isRu
            ? '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.'
            : '‚ö†Ô∏è Please use the buttons to select the gender.'
        )
        return
      }
    } else {
      // If it's not a callback query, maybe the user sent text? Ignore or handle.
      await ctx.reply(
        isRu
          ? '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.'
          : '‚ö†Ô∏è Please use the buttons above to select the gender.'
      )
      return
    }

    if (!gender || (gender !== GENDER_MALE && gender !== GENDER_FEMALE)) {
      await ctx.reply(
        isRu ? '‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.' : '‚ùå Error selecting gender.'
      )
      return ctx.scene.leave() // Or ask again
    }

    // Store gender in session
    ctx.session.gender = gender
    console.log(`[trainFluxModelWizard] Gender set to: ${gender}`)

    // --- Now, the original logic of the first step (asking for images) ---
    console.log('CASE 2 ctx.session.steps', ctx.session.steps)
    // const message = ctx.message as any; // We don't have ctx.message here yet
    // console.log('CASE: trainFluxModelWizard', message);

    // We need user ID and username here. Let's assume they are already in the session
    // or we need to get them differently if this wizard is entered directly.
    // For now, let's assume they come from the previous wizard (`digitalAvatarBodyWizardV2`)
    // or were set before entering this wizard.
    const targetUserId = ctx.session.targetUserId // Assuming set before
    const username = ctx.session.username // Assuming set before

    // TODO: We might need to fetch targetUserId and username here if not already in session,
    // depending on how this wizard is entered.
    if (!targetUserId || !username) {
      console.error(
        '[trainFluxModelWizard] Missing targetUserId or username in session at step 2.'
      )
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : '‚ùå Session error. User data not found.'
      )
      return ctx.scene.leave()
    }

    ctx.session.images = []
    ctx.session.modelName = `${username.toLowerCase()}`
    // ctx.session.targetUserId = parseInt(targetUserId); // Already set?
    // ctx.session.username = username; // Already set?
    ctx.session.triggerWord = `${username.toLowerCase()}`

    // <<<--- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø ---<<<
    const replyMessage = isRu
      ? `‚úÖ –ü–æ–ª ${gender === GENDER_MALE ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'} –≤—ã–±—Ä–∞–Ω.\n\nüì∏ –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–º–∏–Ω–∏–º—É–º 10). –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.\n\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n   - üì∑ <b>–ß–µ—Ç–∫–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏ –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.\n\n   - üîÑ <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–∫—É—Ä—Å–æ–≤:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤.\n\n   - üòä <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ª–∏—Ü:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–∏—Ü.\n
   - üí° <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è.\n
   - üèûÔ∏è <b>–§–æ–Ω –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:</b> –§–æ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º.\n
   - üëó <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞—Ö.\n
   - üéØ <b>–õ–∏—Ü–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
   - üö´ <b>–ú–∏–Ω–∏–º—É–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–∏–ª—å–Ω–æ–π –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π.\n
   - ‚è≥ <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã.\n\n`
      : `‚úÖ Gender ${gender === GENDER_MALE ? 'Male' : 'Female'} selected.\n\nüì∏ Now, please send images for model training (minimum 10 images). Send /done when finished.\n\nYou will need at least 10 photos that meet the following criteria:\n\n   - üì∑ <b>Clear and high-quality image:</b> Photos should be clear and of high quality.\n
   - üîÑ <b>Variety of angles:</b> Use photos taken from different angles.\n
   - üòä <b>Variety of facial expressions:</b> Include photos with different facial expressions.\n
   - üí° <b>Variety of lighting conditions:</b> Use photos taken under different lighting conditions.\n
   - üèûÔ∏è <b>Background and environment:</b> The background in the photos should be neutral.\n
   - üëó <b>Variety of clothing styles:</b> Include photos in different outfits.\n`
    // >>>---------------------------------------------->>>

    await ctx.reply(replyMessage, {
      ...Markup.keyboard([
        [Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')],
      ]).resize(),
      parse_mode: 'HTML', // Make sure HTML parsing is intended
    })

    console.log('Proceeding to image upload step')
    return ctx.wizard.next() // Move to the image collection step
  },

  // Step 3: Handle Image Collection (Original Step 2)
  async ctx => {
    console.log('Scene: IMAGES')
    const isRu = isRussian(ctx)
    const message = ctx.message
    console.log('message', message)
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    if (message && 'text' in message && message.text === '/done') {
      console.log('Received /done command')
      if (!ctx.session.images || ctx.session.images.length < 10) {
        // Check if images array exists
        await ctx.reply(
          isRu
            ? `üì∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–µ–π—á–∞—Å: ${ctx.session.images?.length || 0}`
            : `üì∏ Minimum 10 images required. Current: ${ctx.session.images?.length || 0}`
        )
        return
      }
      console.log('Proceeding to upload scene')
      // Pass necessary data including gender to the next scene if needed
      // ctx.scene.enter('uploadTrainFluxModelScene', { gender: ctx.session.gender }); // Example if state is passed
      return ctx.scene.enter('uploadTrainFluxModelScene')
    }

    if (message && 'photo' in message) {
      // Initialize images array if it doesn't exist
      if (!ctx.session.images) {
        ctx.session.images = []
      }
      // ... (rest of the image handling logic: getFile, fetch, validate, check size, push to session) ...
      const photo = message.photo[message.photo.length - 1]
      const file = await ctx.telegram.getFile(photo.file_id)

      if (!file.file_path) {
        await ctx.reply(
          isRu ? '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞' : '‚ùå Error getting file'
        )
        return
      }
      const botToken = getBotToken(ctx)
      const response = await fetch(
        `https://api.telegram.org/file/bot${botToken}/${file.file_path}`
      )
      const buffer = Buffer.from(await response.arrayBuffer())
      const isValid = await isValidImage(buffer)

      if (!isValid) {
        await ctx.reply(
          isRu
            ? '‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.'
            : '‚ùå File is not a valid image.'
        )
        return
      }
      const MAX_IMAGE_SIZE = 10 * 1024 * 1024 // 10 MB
      if (buffer.length > MAX_IMAGE_SIZE) {
        await ctx.reply(
          isRu
            ? '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (max 10MB).'
            : '‚ùå Image too large (max 10MB).'
        )
        return
      }

      ctx.session.images.push({
        buffer: Buffer.from(buffer),
        filename: `a_photo_of_${ctx.session.username}x${ctx.session.images.length + 1}.jpg`,
      })

      await ctx.reply(
        isRu
          ? `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${ctx.session.images.length} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ /done.`
          : `‚úÖ Image ${ctx.session.images.length} added. Send more or /done.`
      )
      console.log(`Image ${ctx.session.images.length} added`)
    } else {
      // Handle cases where it's neither /done nor a photo
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ /done.'
          : 'Please send a photo or /done.'
      )
    }
    // Stay on the same step to collect more images
    return
  }
)

export default trainFluxModelWizard
