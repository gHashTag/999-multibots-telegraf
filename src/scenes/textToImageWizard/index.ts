import { Scenes, Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { IMAGES_MODELS, ModelInfo } from '@/price/models/IMAGES_MODELS' // Import new config and type
import { handleHelpCancel } from '@/handlers'
import { sendGenericErrorMessage } from '@/menu'
import { generateTextToImage } from '@/modules/generateTextToImage'
import { getUserBalance, getAspectRatio } from '@/core/supabase'
import { isRussian } from '@/helpers'
import {
  sendBalanceMessage,
  validateAndCalculateImageModelPrice,
} from '@/price/helpers'
import { logger } from '@/utils/logger'
import { bots } from '@/bot'
import { supabase } from '@/core/supabase' // –ò–º–ø–æ—Ä—Ç supabase
import { replicate } from '@/core/replicate' // –ò–º–ø–æ—Ä—Ç replicate
import fs from 'fs' // –ò–º–ø–æ—Ä—Ç fs
import path from 'path' // –ò–º–ø–æ—Ä—Ç path
import { processServiceBalanceOperation as processBalance } from '@/price/helpers' // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É processImageApiResponse
// FIXME: –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å processImageApiResponse
const processImageApiResponse = async (output: any): Promise<string> => {
  console.warn('Dummy processImageApiResponse used')
  return Array.isArray(output) ? output[0] : String(output)
}
import { savePromptDirect as saveImagePrompt } from '@/core/supabase' // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏ alias
import { saveFileLocally as saveImageLocally } from '@/helpers/saveFileLocally' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–∂–Ω—ã–π alias
import {
  sendServiceErrorToUser,
  sendServiceErrorToAdmin,
} from '@/helpers/error' // –ò–º–ø–æ—Ä—Ç error handlers
import { calculateFinalStarPrice } from '@/price/calculator' // –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ü–µ–Ω
import { ModeEnum } from '@/interfaces/modes' // –ò–º–ø–æ—Ä—Ç ModeEnum

import { createHelpCancelKeyboard } from '@/menu'
import { getUserProfileAndSettings } from '@/db/userSettings'

export const textToImageWizard = new Scenes.WizardScene<MyContext>(
  'text_to_image',
  async ctx => {
    const isRu = isRussian(ctx)
    console.log('CASE: text_to_image STEP 1', ctx.from?.id)

    if (!ctx.from?.id) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const filteredModels = Object.values(IMAGES_MODELS).filter(
      (
        model: ModelInfo // Add type ModelInfo
      ) =>
        !model.inputType.includes('dev') &&
        (model.inputType.includes('text') ||
          (model.inputType.includes('text') &&
            model.inputType.includes('image')))
    )
    console.log('filteredModels', filteredModels)
    const modelButtons = filteredModels.map(
      (
        model: ModelInfo // Add type ModelInfo
      ) => Markup.button.text(model.shortName)
    )
    const keyboardButtons = []
    for (let i = 0; i < modelButtons.length; i += 2) {
      keyboardButtons.push(modelButtons.slice(i, i + 2))
    }

    keyboardButtons.push(
      [
        Markup.button.text(
          isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command'
        ),
        Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'),
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')]
    )

    const keyboard = Markup.keyboard(keyboardButtons).resize().oneTime()

    await ctx.reply(
      isRu
        ? 'üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:'
        : 'üé® Choose a model for generation:',
      {
        reply_markup: keyboard.reply_markup,
      }
    )
    ctx.wizard.next()
    return
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message
    console.log('CASE: text_to_image STEP 2', message)

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const modelShortName = message.text
    const selectedModelEntry = Object.entries(IMAGES_MODELS).find(
      ([, modelInfo]: [string, ModelInfo]) =>
        modelInfo.shortName === modelShortName // Add type ModelInfo
    )
    if (!selectedModelEntry) {
      console.error('Model not found:', modelShortName)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const [fullModelId, selectedModelInfo] = selectedModelEntry
    ctx.session.selectedModel = fullModelId

    if (!selectedModelInfo) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const availableModels = Object.keys(IMAGES_MODELS) // Changed imageModelPrices to IMAGES_MODELS
    const userBalance = await getUserBalance(ctx.from.id.toString())
    const price = await validateAndCalculateImageModelPrice(
      fullModelId,
      availableModels,
      userBalance,
      isRu,
      ctx
    )
    console.log('price', price)

    if (price === null) {
      return ctx.scene.leave()
    }

    try {
      await ctx.reply(isRu ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' : 'Generating image...')

      if (!ctx.botInfo?.username) {
        console.error('‚ùå Bot username –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      await sendBalanceMessage(
        ctx,
        userBalance,
        price,
        isRu,
        ctx.botInfo.username
      )

      await ctx.replyWithPhoto(selectedModelInfo.previewImage, {
        caption: isRu
          ? `<b>–ú–æ–¥–µ–ª—å: ${selectedModelInfo.shortName}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${selectedModelInfo.description_ru}`
          : `<b>Model: ${selectedModelInfo.shortName}</b>\n\n<b>Description:</b> ${selectedModelInfo.description_en}`,
        parse_mode: 'HTML',
      })

      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : 'Please enter text to generate an image.',
        createHelpCancelKeyboard(isRu)
      )

      return ctx.wizard.next()
    } catch (error) {
      console.error('Error generating image:', error)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const prompt = message.text

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
    const { profile, settings } = await getUserProfileAndSettings(ctx.from.id)
    if (!profile || !settings) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ textToImageWizard',
        { telegramId: ctx.from.id }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : 'Error: Could not retrieve user data.'
      )
      return ctx.scene.leave()
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º
    if (ctx.session.selectedModel) {
      settings.imageModel = ctx.session.selectedModel
    } else {
      logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –≤ textToImageWizard', {
        telegramId: ctx.from.id,
      })
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.'
          : 'Error: Could not determine the selected model.'
      )
      return ctx.scene.leave()
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
    const currentBotName = ctx.botInfo?.username
    const currentBotInstance = bots.find(
      b => b.context.botName === currentBotName
    )

    if (!currentBotInstance) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Å—Ç–∞–Ω—Å Telegraf –¥–ª—è –±–æ—Ç–∞ –≤ textToImageWizard',
        {
          botName: currentBotName,
          telegramId: ctx.from.id,
        }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.'
          : 'Error: Could not initialize the bot.'
      )
      return ctx.scene.leave()
    }

    try {
      // --- –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è processBalance --- START
      const tempProcessBalanceAdapter = async (
        ctxAdapter: MyContext,
        modelAdapter: string,
        isRuAdapter: boolean
      ): Promise<{
        success: boolean
        newBalance?: number
        paymentAmount: number
        error?: string
      }> => {
        const costResult = calculateFinalStarPrice(ModeEnum.TextToImage, {
          modelId: modelAdapter,
        })
        if (!costResult) {
          logger.error('Could not calculate price in processBalanceAdapter', {
            modelAdapter,
          })
          return {
            success: false,
            paymentAmount: 0,
            error: 'Could not calculate price',
          }
        }
        const paymentAmount = costResult.stars

        const balanceResult = await processBalance({
          telegram_id: ctxAdapter.from.id.toString(),
          paymentAmount: paymentAmount,
          is_ru: isRuAdapter,
          bot: currentBotInstance, // currentBotInstance –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏
          bot_name: ctxAdapter.botInfo.username,
          description: `Text to Image generation (${modelAdapter})`,
          service_type: ModeEnum.TextToImage, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum
        })
        return { ...balanceResult, paymentAmount }
      }
      // --- –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è processBalance --- END

      // --- –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è saveImagePrompt --- START
      const tempSaveImagePromptAdapter = async (
        promptAdapter: string,
        modelKeyAdapter: string,
        imageLocalUrlAdapter: string,
        telegramIdAdapter: number
      ): Promise<number> => {
        const promptId = await saveImagePrompt(
          promptAdapter,
          modelKeyAdapter,
          ModeEnum.TextToImage,
          imageLocalUrlAdapter,
          telegramIdAdapter.toString(),
          'completed'
        )
        return promptId ?? -1
      }
      // --- –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è saveImagePrompt --- END

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
      const requestData = {
        prompt,
        model_type: ctx.session.selectedModel,
        num_images: 1,
        telegram_id: ctx.from.id.toString(),
        username: ctx.from.username || 'UnknownUser',
        is_ru: isRu,
      }

      // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const dependencies = {
        logger,
        supabase,
        replicate,
        telegram: currentBotInstance.telegram,
        fsCreateReadStream: fs.createReadStream,
        pathBasename: path.basename,
        processBalance: tempProcessBalanceAdapter, // –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        processImageApiResponse: processImageApiResponse, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        saveImagePrompt: tempSaveImagePromptAdapter, // –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        saveImageLocally: saveImageLocally, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞
        getAspectRatio: getAspectRatio, // FIXME: –£—Ç–æ—á–Ω–∏—Ç—å –Ω—É–∂–Ω–æ—Å—Ç—å
        sendErrorToUser: sendServiceErrorToUser,
        sendErrorToAdmin: sendServiceErrorToAdmin,
        imageModelsConfig: IMAGES_MODELS,
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
      const results = await generateTextToImage(requestData, dependencies)

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (results.length === 0) {
        logger.warn(
          'generateTextToImage –≤ textToImageWizard –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏)',
          {
            telegramId: ctx.from.id,
            prompt,
            model: ctx.session.selectedModel,
          }
        )
      }
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ/–±–∞–ª–∞–Ω—Å–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ generateTextToImage
    } catch (wizardError) {
      // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å *–¥–æ* –∏–ª–∏ *–ø–æ—Å–ª–µ* –≤—ã–∑–æ–≤–∞ generateTextToImage
      // –û—à–∏–±–∫–∏ *–≤–Ω—É—Ç—Ä–∏* generateTextToImage –ª–æ–≤—è—Ç—Å—è –∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —Ç–∞–º –∂–µ.
      logger.error('–û—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ textToImageWizard:', {
        error: wizardError,
        telegramId: ctx.from?.id,
      })
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      try {
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            : 'An unexpected error occurred. Please try again.'
        )
      } catch (replyError) {
        logger.error(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ textToImageWizard',
          { replyError }
        )
      }
    }

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    return ctx.scene.leave()
  }
)
