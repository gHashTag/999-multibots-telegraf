import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'
import { imageModelPrices } from '@/price/models'
import { handleHelpCancel } from '@/handlers'
import { sendGenericErrorMessage } from '@/menu'
import { generateTextToImageDirect } from '@/services/generateTextToImageDirect'
import { getUserBalance } from '@/core/supabase'
import { isRussian } from '@/helpers/language'
import {
  sendBalanceMessage,
  validateAndCalculateImageModelPrice,
} from '@/price/helpers'
import { logger } from '@/utils/logger'

import { createHelpCancelKeyboard } from '@/menu'
import { getUserProfileAndSettings } from '@/db/userSettings'
import { handleMenu } from '@/handlers/handleMenu'
import { improvePromptWizard } from '../improvePromptWizard'
import { sizeWizard } from '../sizeWizard'

export const textToImageWizard = new Scenes.WizardScene<MyContext>(
  'text_to_image',
  async ctx => {
    const isRu = isRussian(ctx)
    console.log('CASE: text_to_image STEP 1', ctx.from?.id)

    if (!ctx.from?.id) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const filteredModels = Object.values(imageModelPrices).filter(
      model =>
        !model.inputType.includes('dev') &&
        (model.inputType.includes('text') ||
          (model.inputType.includes('text') &&
            model.inputType.includes('image')))
    )
    console.log('filteredModels', filteredModels)
    const modelButtons = filteredModels.map(model =>
      Markup.button.text(model.shortName)
    )

    const keyboardButtons = []
    for (let i = 0; i < modelButtons.length; i += 2) {
      keyboardButtons.push(modelButtons.slice(i, i + 2))
    }

    keyboardButtons.push(
      [
        Markup.button.text(
          isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command'
        ),
        Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'),
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')]
    )

    const keyboard = Markup.keyboard(keyboardButtons).resize().oneTime()

    await ctx.reply(
      isRu
        ? 'üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:'
        : 'üé® Choose a model for generation:',
      {
        reply_markup: keyboard.reply_markup,
      }
    )
    ctx.wizard.next()
    return
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message
    console.log('CASE: text_to_image STEP 2', message)

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const modelShortName = message.text
    const selectedModelEntry = Object.entries(imageModelPrices).find(
      ([, modelInfo]) => modelInfo.shortName === modelShortName
    )

    if (!selectedModelEntry) {
      console.error('Model not found:', modelShortName)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const [fullModelId, selectedModelInfo] = selectedModelEntry
    ctx.session.selectedImageModel = fullModelId

    if (!selectedModelInfo) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const availableModels = Object.keys(imageModelPrices)
    const userBalance = await getUserBalance(ctx.from.id.toString())
    const price = await validateAndCalculateImageModelPrice(
      fullModelId,
      availableModels,
      userBalance,
      isRu,
      ctx
    )
    console.log('price', price)

    if (price === null) {
      return ctx.scene.leave()
    }

    try {
      await ctx.reply(isRu ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' : 'Generating image...')

      if (!ctx.botInfo?.username) {
        console.error('‚ùå Bot username –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      await sendBalanceMessage(
        ctx,
        userBalance,
        price,
        isRu,
        ctx.botInfo.username
      )

      await ctx.replyWithPhoto(selectedModelInfo.previewImage, {
        caption: isRu
          ? `<b>–ú–æ–¥–µ–ª—å: ${selectedModelInfo.shortName}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${selectedModelInfo.description_ru}`
          : `<b>Model: ${selectedModelInfo.shortName}</b>\n\n<b>Description:</b> ${selectedModelInfo.description_en}`,
        parse_mode: 'HTML',
      })

      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : 'Please enter text to generate an image.',
        createHelpCancelKeyboard(isRu)
      )

      return ctx.wizard.next()
    } catch (error) {
      console.error('Error generating image:', error)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const prompt = message.text

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
    const { profile, settings } = await getUserProfileAndSettings(ctx.from.id)
    if (!profile || !settings) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ textToImageWizard',
        { telegramId: ctx.from.id }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : 'Error: Could not retrieve user data.'
      )
      return ctx.scene.leave()
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º
    if (ctx.session.selectedImageModel) {
      settings.imageModel = ctx.session.selectedImageModel
    } else {
      logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –≤ textToImageWizard', {
        telegramId: ctx.from.id,
      })
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.'
          : 'Error: Could not determine the selected model.'
      )
      return ctx.scene.leave()
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É generateTextToImageDirect
      // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å num_images (–ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ 1)
      const generationResult = await generateTextToImageDirect(
        prompt,
        ctx.session.selectedImageModel,
        1, // num_images
        ctx.from.id.toString(),
        ctx.from.username ?? 'unknown',
        isRu,
        ctx
      )

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ü–û–°–õ–ï –æ–ø–µ—Ä–∞—Ü–∏–∏
      const currentBalance = await getUserBalance(ctx.from.id.toString())

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
      ctx.session.prompt = prompt

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç generateTextToImageDirect),
      // –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É.
      return ctx.scene.leave() // –ü–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ textToImageWizard:', {
        error,
        telegramId: ctx.from.id,
      })
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }
  },
  // –≠–¢–û–¢ –®–ê–ì, –°–ö–û–†–ï–ï –í–°–ï–ì–û, –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ï–ù –ò–õ–ò –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–£–°–¢–´–ú,
  // –¢–ê–ö –ö–ê–ö –ü–†–ï–î–´–î–£–©–ò–ô –®–ê–ì –ó–ê–í–ï–†–®–ê–ï–¢–°–Ø ctx.scene.leave()
  // –ò–õ–ò –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–•–û–î–ò–¢ –ö HEARS HANDLERS
  async ctx => {
    // –£–î–ê–õ–Ø–ï–ú –°–¢–†–û–ö–£ –° "TODO" –û–¢–°–Æ–î–ê –ò–õ–ò –í–ï–°–¨ –≠–¢–û–¢ –®–ê–ì, –ï–°–õ–ò –û–ù –ù–ï –ù–£–ñ–ï–ù
    // logger.info(
    //   `textToImageWizard step 4: User ${ctx.from?.id} ` +
    //     ` ${ctx.message && 'text' in ctx.message ? ctx.message.text : 'no text'}`
    // )
    // const message = ctx.message
    // if (message && 'text' in message) {
    //   const text = message.text
    //   const numImages = parseInt(text[0])
    //   if (!isNaN(numImages) && numImages >= 1 && numImages <= 4) {
    //     // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å numImages
    //     // await ctx.reply(
    //     //   `–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${numImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... (TODO)`
    //     // )
    //     // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å generateTextToImageDirect –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É,
    //     // –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–∞–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ.
    //     // –û–¥–Ω–∞–∫–æ, —ç—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ hearsHandlers, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç —à–∞–≥ –∏–∑–±—ã—Ç–æ—á–µ–Ω.
    //   } else if (text === (isRussian(ctx) ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt')) {
    //     return ctx.scene.enter(improvePromptWizard.id)
    //   } else if (text === (isRussian(ctx) ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size')) {
    //     // TODO: –ü–µ—Ä–µ–¥–∞—Ç—å ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ—É –≤ sizeWizard, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    //     return ctx.scene.enter(sizeWizard.id)
    //   } else if (text === (isRussian(ctx) ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')) {
    //     await handleMenu(ctx, true) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    //     return ctx.scene.leave()
    //   }
    // }
    // –≠—Ç–æ—Ç —à–∞–≥, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è ctx.scene.leave()
    // –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ hearsHandlers.
    // –û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
    logger.warn(
      `Reached an unexpected step in textToImageWizard for user ${ctx.from?.id}. Leaving scene.`
    )
    return ctx.scene.leave()
  }
)
