import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../../interfaces'
import { imageModelPrices } from '@/price/models'
import { handleHelpCancel } from '@/handlers'
import { sendGenericErrorMessage } from '@/menu'
import { generateTextToImageDirect } from '@/services/generateTextToImageDirect'
import { getUserBalance } from '@/core/supabase'
import { isRussian } from '@/helpers/language'
import {
  sendBalanceMessage,
  validateAndCalculateImageModelPrice,
} from '@/price/helpers'
import { logger } from '@/utils/logger'

import { createHelpCancelKeyboard } from '@/menu'
import { getUserProfileAndSettings } from '@/db/userSettings'
import { handleMenu } from '@/handlers/handleMenu'
import { improvePromptWizard } from '../improvePromptWizard'
import { sizeWizard } from '../sizeWizard'

export const textToImageWizard = new Scenes.WizardScene<MyContext>(
  'text_to_image',
  async ctx => {
    const isRu = isRussian(ctx)
    console.log('CASE: text_to_image STEP 1', ctx.from?.id)

    if (!ctx.from?.id) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const filteredModels = Object.values(imageModelPrices).filter(
      model =>
        !model.inputType.includes('dev') &&
        (model.inputType.includes('text') ||
          (model.inputType.includes('text') &&
            model.inputType.includes('image')))
    )
    console.log('filteredModels', filteredModels)
    const modelButtons = filteredModels.map(model =>
      Markup.button.text(model.shortName)
    )

    const keyboardButtons = []
    for (let i = 0; i < modelButtons.length; i += 2) {
      keyboardButtons.push(modelButtons.slice(i, i + 2))
    }

    keyboardButtons.push(
      [
        Markup.button.text(
          isRu ? '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ' : 'Help for the command'
        ),
        Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'),
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')]
    )

    const keyboard = Markup.keyboard(keyboardButtons).resize().oneTime()

    await ctx.reply(
      isRu
        ? 'üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:'
        : 'üé® Choose a model for generation:',
      {
        reply_markup: keyboard.reply_markup,
      }
    )
    ctx.wizard.next()
    return
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message
    console.log('CASE: text_to_image STEP 2', message)

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const modelShortName = message.text
    const selectedModelEntry = Object.entries(imageModelPrices).find(
      ([, modelInfo]) => modelInfo.shortName === modelShortName
    )

    if (!selectedModelEntry) {
      console.error('Model not found:', modelShortName)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const [fullModelId, selectedModelInfo] = selectedModelEntry
    ctx.session.selectedImageModel = fullModelId

    if (!selectedModelInfo) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const availableModels = Object.keys(imageModelPrices)
    const userBalance = await getUserBalance(ctx.from.id.toString())
    const price = await validateAndCalculateImageModelPrice(
      fullModelId,
      availableModels,
      userBalance,
      isRu,
      ctx
    )
    console.log('price', price)

    if (price === null) {
      return ctx.scene.leave()
    }

    try {
      await ctx.reply(isRu ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' : 'Generating image...')

      if (!ctx.botInfo?.username) {
        console.error('‚ùå Bot username –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      await sendBalanceMessage(
        ctx,
        userBalance,
        price,
        isRu,
        ctx.botInfo.username
      )

      await ctx.replyWithPhoto(selectedModelInfo.previewImage, {
        caption: isRu
          ? `<b>–ú–æ–¥–µ–ª—å: ${selectedModelInfo.shortName}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${selectedModelInfo.description_ru}`
          : `<b>Model: ${selectedModelInfo.shortName}</b>\n\n<b>Description:</b> ${selectedModelInfo.description_en}`,
        parse_mode: 'HTML',
      })

      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : 'Please enter text to generate an image.',
        createHelpCancelKeyboard(isRu)
      )

      return ctx.wizard.next()
    } catch (error) {
      console.error('Error generating image:', error)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    if (!ctx.from?.id) {
      console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    const prompt = message.text

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
    const { profile, settings } = await getUserProfileAndSettings(ctx.from.id)
    if (!profile || !settings) {
      logger.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ textToImageWizard',
        { telegramId: ctx.from.id }
      )
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : 'Error: Could not retrieve user data.'
      )
      return ctx.scene.leave()
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º
    if (ctx.session.selectedImageModel) {
      settings.imageModel = ctx.session.selectedImageModel
    } else {
      logger.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –≤ textToImageWizard', {
        telegramId: ctx.from.id,
      })
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.'
          : 'Error: Could not determine the selected model.'
      )
      return ctx.scene.leave()
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É generateTextToImageDirect
      // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å num_images (–ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ 1)
      const generationResult = await generateTextToImageDirect(
        prompt,
        ctx.session.selectedImageModel,
        1, // num_images
        ctx.from.id.toString(),
        ctx.from.username ?? 'unknown',
        isRu,
        ctx
      )

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ü–û–°–õ–ï –æ–ø–µ—Ä–∞—Ü–∏–∏
      const currentBalance = await getUserBalance(ctx.from.id.toString())

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
      ctx.session.prompt = prompt

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∑–¥–µ—Å—å
      await ctx.reply(
        isRu
          ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£.\n\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`
          : `Your images have been generated!\n\nGenerate more?\n\nYour new balance: ${currentBalance.toFixed(2)} ‚≠êÔ∏è`,
        {
          reply_markup: {
            keyboard: [
              [{ text: '1Ô∏è‚É£' }, { text: '2Ô∏è‚É£' }, { text: '3Ô∏è‚É£' }, { text: '4Ô∏è‚É£' }],
              [
                { text: isRu ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                { text: isRu ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
              ],
              [{ text: isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
            ],
            resize_keyboard: true,
            // one_time_keyboard: false, // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          },
        }
      )

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
      return ctx.wizard.next()
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ generateTextToImageDirect', { error })
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    }
  },
  // –ù–û–í–´–ô –ß–ï–¢–í–ï–†–¢–´–ô –®–ê–ì
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (!message || !('text' in message)) {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–ª–∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.'
          : 'Please select an action using the buttons.'
      )
      // –ù–µ –≤—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
      return
    }

    const text = message.text

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    switch (text) {
      case '1Ô∏è‚É£':
      case '2Ô∏è‚É£':
      case '3Ô∏è‚É£':
      case '4Ô∏è‚É£': {
        const numImages = parseInt(text.replace('Ô∏è‚É£', ''))
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å numImages
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        await ctx.reply(
          `–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${numImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... (TODO)`
        )
        logger.info('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', {
          numImages,
          telegramId: ctx.from?.id,
        })
        return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (–∏–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
      }

      case isRu ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt': {
        if (ctx.session.prompt) {
          logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –≤ improvePromptWizard', {
            telegramId: ctx.from?.id,
          })
          return ctx.scene.enter(improvePromptWizard.id)
        } else {
          await ctx.reply(
            isRu
              ? '–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.'
              : 'Previous prompt not found for improvement.'
          )
          return ctx.scene.leave()
        }
      }

      case isRu ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size': {
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –≤ sizeWizard', { telegramId: ctx.from?.id })
        // TODO: –ü–µ—Ä–µ–¥–∞—Ç—å ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ—É –≤ sizeWizard, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return ctx.scene.enter(sizeWizard.id)
      }

      case isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu': {
        logger.info('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { telegramId: ctx.from?.id })
        await handleMenu(ctx) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return ctx.scene.leave()
      }

      default:
        await ctx.reply(
          isRu
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.'
            : 'Please select an action using the buttons.'
        )
        // –ù–µ –≤—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        return
    }
  }
)
