/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω—ã Audio-to-Text
 */

import { Markup } from 'telegraf';
import { Message, CallbackQuery } from 'telegraf/types';
import { 
  CALLBACKS, 
  ExportFormats, 
  MAX_FILE_SIZE, 
  MAX_SINGLE_AUDIO_DURATION, 
  SUPPORTED_AUDIO_FORMATS, 
  SUPPORTED_VIDEO_FORMATS, 
  TranscriptionLanguages, 
  TranscriptionModels 
} from './constants';
import { AudioToTextContext, TranscriptionSettings } from './types';
import { getMediaDuration, extractAudioFromVideo, splitAudioIntoChunks, cleanupTempFiles } from '@/services/ffmpeg-service';
import { transcribeAudioBasic, transcribeLongAudioBasic } from '@/services/openai-service';
import { validateAndCalculateAudioTranscriptionPrice } from '@/price/helpers';
import { getUserBalance, updateUserBalance } from '@/core/supabase';
import { inngest } from '@/inngest-functions/clients';
import { MyContext } from '@/interfaces';
import { TransactionType } from '@/interfaces/payments.interface';
/**
 * –®–∞–≥ 1: –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ —Å—Ü–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª
 */
export async function entryHandler(ctx: MyContext) {
  try {
    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    const isRu = ctx.session.language === 'ru';
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.audioToText = {
      audioFileId: '',
      audioFileUrl: '',
      transcription: ''
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(
      isRu
        ? 'üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç'
        : 'üéôÔ∏è Please upload an audio file or video for transcription',
      Markup.keyboard([
        [isRu ? '‚ùì –ü–æ–º–æ—â—å' : '‚ùì Help'],
        [isRu ? 'üîô –ù–∞–∑–∞–¥' : 'üîô Back']
      ])
      .resize()
      .oneTime()
    );
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    return ctx.wizard.next();
  } catch (error) {
    console.error('Error in Audio-to-Text entry handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return ctx.scene.leave();
  }
}

/**
 * –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
 */
export async function fileProcessingHandler(ctx: MyContext) {
  try {
    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    const isRu = ctx.session.language === 'ru';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if (ctx.message && 'text' in ctx.message) {
      const text = ctx.message.text;
      
      if (text === 'üîô –ù–∞–∑–∞–¥' || text === 'üîô Back' || text === '/cancel' || text === '/start') {
        await ctx.reply(
          isRu ? '‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' : '‚úÖ Action cancelled',
          Markup.removeKeyboard()
        );
        return ctx.scene.leave();
      } else if (text === '‚ùì –ü–æ–º–æ—â—å' || text === '‚ùì Help') {
        await ctx.reply(
          isRu
            ? 'üìã –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, OGG, M4A) –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é.'
            : 'üìã You can upload an audio file (MP3, WAV, OGG, M4A) or video for transcription. The bot will process the file and provide you with a transcript.'
        );
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    let fileId: string | undefined;
    let fileType: string | undefined;
    let duration: number | undefined;
    let fileName: string | undefined;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if (ctx.message) {
      if ('voice' in ctx.message && ctx.message.voice) {
        // –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        fileId = ctx.message.voice.file_id;
        fileType = 'voice';
        duration = ctx.message.voice.duration;
        fileName = 'voice_message.ogg';
      } else if ('audio' in ctx.message && ctx.message.audio) {
        // –ê—É–¥–∏–æ—Ñ–∞–π–ª
        fileId = ctx.message.audio.file_id;
        fileType = 'audio';
        duration = ctx.message.audio.duration;
        fileName = ctx.message.audio.file_name || 'audio.mp3';
      } else if ('video' in ctx.message && ctx.message.video) {
        // –í–∏–¥–µ–æ—Ñ–∞–π–ª
        fileId = ctx.message.video.file_id;
        fileType = 'video';
        duration = ctx.message.video.duration;
        fileName = ctx.message.video.file_name || 'video.mp4';
      } else if ('document' in ctx.message && ctx.message.document) {
        // –î–æ–∫—É–º–µ–Ω—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
        fileId = ctx.message.document.file_id;
        fileType = ctx.message.document.mime_type || 'unknown';
        fileName = ctx.message.document.file_name || 'document';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MIME-—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if (![...SUPPORTED_AUDIO_FORMATS, ...SUPPORTED_VIDEO_FORMATS].includes(fileType)) {
          await ctx.reply(
            isRu
              ? '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ (MP3, WAV, OGG, M4A) –∏–ª–∏ –≤–∏–¥–µ–æ.'
              : '‚ùå Unsupported file format. Please upload audio (MP3, WAV, OGG, M4A) or video.'
          );
          return;
        }
      } else {
        // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.reply(
          isRu
            ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.'
            : '‚ùå Please upload an audio file or video for transcription.'
        );
        return;
      }
    } else {
      // –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.'
          : '‚ùå Please upload an audio file or video for transcription.'
      );
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.audioToText.audioFileId = fileId;
    ctx.session.audioToText.audioFileUrl = fileType;
    ctx.session.audioToText.transcription = fileName;
    ctx.session.audioToText.duration = duration || 0 ;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    await ctx.reply(
      isRu
        ? '‚è≥ –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...'
        : '‚è≥ Getting the file...'
    );
    
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const filePath = fileLink.toString();
    ctx.session.audioToText.filePath = filePath;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
    if (fileType === 'video' || SUPPORTED_VIDEO_FORMATS.includes(fileType)) {
      await ctx.reply(
        isRu
          ? 'üé¨ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ...'
          : 'üé¨ Extracting audio from video...'
      );
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
      // ctx.session.audioToText.filePath = extractedAudioPath;
    }
    
    // –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ—ë
    if (!duration && ctx.session.audioToText.filePath) {
      try {
        duration = await getMediaDuration(ctx.session.audioToText.filePath);
        ctx.session.audioToText.duration = duration;
      } catch (error) {
        console.error('Failed to get media duration:', error);
        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        duration = 300; // 5 –º–∏–Ω—É—Ç
        ctx.session.audioToText.duration = duration;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—É–¥–∏–æ –¥–ª–∏–Ω–Ω—ã–º
    const isLongAudio = duration && duration > MAX_SINGLE_AUDIO_DURATION;
    ctx.session.audioToText.isLongAudio = isLongAudio || false;
    
    if (isLongAudio) {
      await ctx.reply(
        isRu
          ? '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª–∏–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª. –û–Ω –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.'
          : '‚ö†Ô∏è Long audio file detected. It will be split into parts for processing.'
      );
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    await ctx.reply(
      isRu
        ? '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:'
        : '‚öôÔ∏è Choose transcription settings:',
      Markup.inlineKeyboard([
        [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 'Language: Auto-detect', CALLBACKS.LANG_AUTO)],
        [Markup.button.callback(isRu ? '–ú–æ–¥–µ–ª—å: Whisper Medium' : 'Model: Whisper Medium', CALLBACKS.MODEL_MEDIUM)],
        [Markup.button.callback(isRu ? '–¢–æ—á–Ω–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è' : 'Accuracy: Medium', CALLBACKS.ACCURACY_MEDIUM)],
        [Markup.button.callback(isRu ? '–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é' : 'Start transcription', CALLBACKS.START_TRANSCRIPTION)]
      ])
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ctx.session.audioToText.transcriptionLanguage = TranscriptionLanguages.AUTO;
    ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_MEDIUM;
    ctx.session.audioToText.accuracy = 'medium';
    
    return ctx.wizard.next();
  } catch (error) {
    console.error('Error in Audio-to-Text file processing handler:', error);
    
    const isRu = ctx.session.language === 'ru';
    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        : '‚ùå An error occurred while processing the file. Please try again.'
    );
    return ctx.scene.leave();
  }
}

/**
 * –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
export async function transcriptionHandler(ctx: MyContext) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback
    if (!ctx.callbackQuery) {
      return;
    }
    
    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    const isRu = ctx.session.language === 'ru';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    // Type assertion for callbackQuery to access data property safely
    const callbackQuery = ctx.callbackQuery as any;
    const callbackData = callbackQuery.data;
    
    if (!callbackData) {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    if (callbackData === CALLBACKS.LANG_AUTO) {
      ctx.session.audioToText.transcriptionLanguage = TranscriptionLanguages.AUTO;
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚úì' : 'Language: Auto-detect ‚úì', CALLBACKS.LANG_AUTO)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π' : 'Language: Russian', CALLBACKS.LANG_RU)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' : 'Language: English', CALLBACKS.LANG_EN)],
          [Markup.button.callback(isRu ? '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' : 'Back to settings', CALLBACKS.SETTINGS)]
        ]
      });
      return;
    } else if (callbackData === CALLBACKS.LANG_RU) {
      ctx.session.audioToText.transcriptionLanguage = TranscriptionLanguages.RUSSIAN;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π' : '‚úÖ Selected language: Russian'
      );
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 'Language: Auto-detect', CALLBACKS.LANG_AUTO)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π ‚úì' : 'Language: Russian ‚úì', CALLBACKS.LANG_RU)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' : 'Language: English', CALLBACKS.LANG_EN)],
          [Markup.button.callback(isRu ? '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' : 'Back to settings', CALLBACKS.SETTINGS)]
        ]
      });
      return;
    } else if (callbackData === CALLBACKS.LANG_EN) {
      ctx.session.audioToText.transcriptionLanguage = TranscriptionLanguages.ENGLISH;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' : '‚úÖ Selected language: English'
      );
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 'Language: Auto-detect', CALLBACKS.LANG_AUTO)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π' : 'Language: Russian', CALLBACKS.LANG_RU)],
          [Markup.button.callback(isRu ? '–Ø–∑—ã–∫: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚úì' : 'Language: English ‚úì', CALLBACKS.LANG_EN)],
          [Markup.button.callback(isRu ? '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' : 'Back to settings', CALLBACKS.SETTINGS)]
        ]
      });
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
    if (callbackData === CALLBACKS.MODEL_TINY) {
      ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_TINY;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Whisper Tiny' : '‚úÖ Selected model: Whisper Tiny'
      );
      return;
    } else if (callbackData === CALLBACKS.MODEL_BASE) {
      ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_BASE;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Whisper Base' : '‚úÖ Selected model: Whisper Base'
      );
      return;
    } else if (callbackData === CALLBACKS.MODEL_SMALL) {
      ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_SMALL;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Whisper Small' : '‚úÖ Selected model: Whisper Small'
      );
      return;
    } else if (callbackData === CALLBACKS.MODEL_MEDIUM) {
      ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_MEDIUM;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Whisper Medium' : '‚úÖ Selected model: Whisper Medium'
      );
      return;
    } else if (callbackData === CALLBACKS.MODEL_LARGE) {
      ctx.session.audioToText.transcriptionModel = TranscriptionModels.WHISPER_LARGE;
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Whisper Large' : '‚úÖ Selected model: Whisper Large'
      );
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (callbackData === CALLBACKS.ACCURACY_LOW) {
      ctx.session.audioToText.accuracy = 'low';
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: –ù–∏–∑–∫–∞—è' : '‚úÖ Selected accuracy: Low'
      );
      return;
    } else if (callbackData === CALLBACKS.ACCURACY_MEDIUM) {
      ctx.session.audioToText.accuracy = 'medium';
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è' : '‚úÖ Selected accuracy: Medium'
      );
      return;
    } else if (callbackData === CALLBACKS.ACCURACY_HIGH) {
      ctx.session.audioToText.accuracy = 'high';
      await ctx.reply(
        isRu ? '‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è' : '‚úÖ Selected accuracy: High'
      );
      return;
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    if (callbackData === CALLBACKS.SETTINGS) {
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [Markup.button.callback(
            isRu 
              ? `–Ø–∑—ã–∫: ${ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.AUTO ? '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 
                 ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.RUSSIAN ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}`
              : `Language: ${ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.AUTO ? 'Auto-detect' : 
                 ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.RUSSIAN ? 'Russian' : 'English'}`,
            CALLBACKS.LANG_AUTO
          )],
          [Markup.button.callback(
            `${isRu ? '–ú–æ–¥–µ–ª—å: ' : 'Model: '}Whisper ${ctx.session.audioToText.transcriptionModel ? ctx.session.audioToText.transcriptionModel.split('-')[1].charAt(0).toUpperCase() + ctx.session.audioToText.transcriptionModel.split('-')[1].slice(1) : 'Medium'}`,
            CALLBACKS.MODEL_MEDIUM
          )],
          [Markup.button.callback(
            isRu 
              ? `–¢–æ—á–Ω–æ—Å—Ç—å: ${ctx.session.audioToText.accuracy === 'low' ? '–ù–∏–∑–∫–∞—è' : 
                 ctx.session.audioToText.accuracy === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–í—ã—Å–æ–∫–∞—è'}`
              : `Accuracy: ${ctx.session.audioToText.accuracy === 'low' ? 'Low' : 
                 ctx.session.audioToText.accuracy === 'medium' ? 'Medium' : 'High'}`,
            CALLBACKS.ACCURACY_MEDIUM
          )],
          [Markup.button.callback(isRu ? '–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é' : 'Start transcription', CALLBACKS.START_TRANSCRIPTION)]
        ]
      });
      return;
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if (callbackData === CALLBACKS.START_TRANSCRIPTION) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply(
          isRu
            ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
            : '‚ùå Failed to determine user ID.'
        );
        return ctx.scene.leave();
      }
      
      const userBalance = await getUserBalance(userId.toString());
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      if (!ctx.session.audioToText.duration || !ctx.session.audioToText.transcriptionModel) {
        await ctx.reply(
          isRu
            ? '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.'
            : '‚ùå Missing necessary data for transcription.'
        );
        return ctx.scene.leave();
      }
      
      const priceResult = await validateAndCalculateAudioTranscriptionPrice(
        ctx.session.audioToText.duration,
        ctx.session.audioToText.transcriptionModel as TranscriptionModels
      );
      
      ctx.session.audioToText.amount = priceResult.amount;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
      if (userBalance < priceResult.amount) {
        await ctx.reply(
          isRu
            ? `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${priceResult.amount}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${userBalance}.`
            : `‚ùå Insufficient balance. Required: ${priceResult.amount}, available: ${userBalance}.`
        );
        return ctx.scene.leave();
      }
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await updateUserBalance({
        telegram_id: userId.toString(),
        amount: priceResult.amount, // As per user instructions, using positive amount
        type: TransactionType.MONEY_EXPENSE,
        description: `–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ (${ctx.session.audioToText.transcriptionModel ? ctx.session.audioToText.transcriptionModel.split('-')[1] : 'Medium'})`,
        bot_name: ctx.botInfo.username || 'unknown',
        service_type: 'audio_transcription'
      });
      
      await ctx.reply(
        isRu
          ? `‚è≥ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n–Ø–∑—ã–∫: ${ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.AUTO ? '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 
             ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.RUSSIAN ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}\n–ú–æ–¥–µ–ª—å: Whisper ${ctx.session.audioToText.transcriptionModel.split('-')[1].charAt(0).toUpperCase() + ctx.session.audioToText.transcriptionModel.split('-')[1].slice(1)}\n–¢–æ—á–Ω–æ—Å—Ç—å: ${ctx.session.audioToText.accuracy === 'low' ? '–ù–∏–∑–∫–∞—è' : 
             ctx.session.audioToText.accuracy === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–í—ã—Å–æ–∫–∞—è'}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${priceResult.amount} –∫—Ä–µ–¥–∏—Ç–æ–≤`
          : `‚è≥ Starting transcription with parameters:\nLanguage: ${ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.AUTO ? 'Auto-detect' : 
             ctx.session.audioToText.transcriptionLanguage === TranscriptionLanguages.RUSSIAN ? 'Russian' : 'English'}\nModel: Whisper ${ctx.session.audioToText.transcriptionModel.split('-')[1].charAt(0).toUpperCase() + ctx.session.audioToText.transcriptionModel.split('-')[1].slice(1)}\nAccuracy: ${ctx.session.audioToText.accuracy === 'low' ? 'Low' : 
             ctx.session.audioToText.accuracy === 'medium' ? 'Medium' : 'High'}\nCost: ${priceResult.amount} credits`
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Inngest
      // Use default values and cast to the correct enum types
      const defaultModel = TranscriptionModels.WHISPER_MEDIUM;
      const defaultLanguage = TranscriptionLanguages.AUTO;
      const defaultAccuracy = 'medium' as 'low' | 'medium' | 'high';
      
      const settings: TranscriptionSettings = {
        model: (ctx.session.audioToText.transcriptionModel as unknown as TranscriptionModels) || defaultModel,
        language: (ctx.session.audioToText.transcriptionLanguage as unknown as TranscriptionLanguages) || defaultLanguage,
        accuracy: (ctx.session.audioToText.accuracy as 'low' | 'medium' | 'high') || defaultAccuracy
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Inngest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await inngest.send({
        name: 'audio/transcription',
        data: {
          userId: userId,
          fileId: ctx.session.audioToText.audioFileId!,
          filePath: ctx.session.audioToText.filePath!,
          fileType: ctx.session.audioToText.audioFileUrl!,
          duration: ctx.session.audioToText.duration,
          isLongAudio: ctx.session.audioToText.isLongAudio,
          settings: settings
        }
      });
      
      await ctx.reply(
        isRu
          ? '‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.'
          : '‚è≥ Your transcription request is being processed. You will be notified when the result is ready.'
      );
      
      return ctx.scene.leave();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (callbackData.startsWith('export_')) {
      const format = callbackData.split('_')[1];
      
      await ctx.reply(
        isRu
          ? `‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`
          : `‚è≥ Preparing file in ${format.toUpperCase()} format...`
      );
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      
      await ctx.reply(
        isRu
          ? `‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤!`
          : `‚úÖ File is ready!`,
        Markup.inlineKeyboard([
          [Markup.button.url(
            isRu ? `–°–∫–∞—á–∞—Ç—å ${format.toUpperCase()}` : `Download ${format.toUpperCase()}`,
            `https://example.com/transcript.${format}`
          )]
        ])
      );
      
      return;
    }
    
  } catch (error) {
    console.error('Error in Audio-to-Text transcription handler:', error);
    
    const isRu = ctx.session.language === 'ru';
    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        : '‚ùå An error occurred while processing the transcription. Please try again.'
    );
    return ctx.scene.leave();
  }
} 