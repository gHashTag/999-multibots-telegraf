import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../interfaces'
import { isRussian } from '@/helpers'
import { getUserByTelegramIdString } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'
import { TransactionType } from '@/interfaces/payments.interface'
import { inngest } from '@/inngest-functions/clients'
import { v4 as uuidv4 } from 'uuid'

export const getEnBillWizard = new Scenes.WizardScene<MyContext>(
  'getEnBillWizard',
  async ctx => {
    const isRu = isRussian(ctx)

    if (!ctx.from?.id) {
      logger.error({
        message: '‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: 'User identification error in getEnBillWizard',
        ctx: JSON.stringify(ctx.update || {}),
      })

      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : '‚ùå User identification error. Please try again later.'
      )
      return ctx.scene.leave()
    }

    const user = await getUserByTelegramIdString(ctx.from.id.toString())
    if (!user) {
      logger.error({
        message: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: 'User not found in getEnBillWizard',
        telegram_id: ctx.from.id,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.'
          : '‚ùå User not found. Please start with the /start command.'
      )
      return ctx.scene.leave()
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–∑ —Å–µ—Å—Å–∏–∏
    const selectedPayment = ctx.session.selectedPayment
    if (!selectedPayment) {
      logger.error({
        message: '‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        description: 'Payment data not found in getEnBillWizard',
        telegram_id: ctx.from.id,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.'
          : '‚ùå Payment data not found. Please select a subscription again.'
      )
      return ctx.scene.enter(ModeEnum.SubscriptionScene)
    }

    const { amount, stars, subscription } = selectedPayment

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
    const paymentMessage = `üí≥ ${
      isRu
        ? `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö ($${amount})`
        : `Subscription payment in dollars ($${amount})`
    }

${
  isRu
    ? `üìù –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:
   - Stripe
   - PayPal
   - Credit/Debit Card

2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${stars} –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å.
   
3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.`
    : `üìù To pay for your subscription, please follow these steps:

1Ô∏è‚É£ Use one of the following payment systems:
   - Stripe
   - PayPal
   - Credit/Debit Card

2Ô∏è‚É£ After payment, you will receive ${stars} stars to your balance.
   
3Ô∏è‚É£ Payment processing may take up to 5 minutes.`
}

${
  isRu
    ? '‚ùì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.'
    : '‚ùì Click the button below to proceed with the payment, or select "Cancel" to return to the menu.'
}`

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.url(
          isRu ? 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ' : 'üí≥ Proceed to payment',
          `https://buy.stripe.com/test_payment/${subscription}/${amount}/${ctx.from.id}`
        ),
      ],
      [
        Markup.button.callback(
          isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel',
          'cancel_payment'
        ),
      ],
    ])

    await ctx.reply(paymentMessage, keyboard)

    logger.info({
      message: 'üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      description: 'Subscription payment request sent',
      telegram_id: ctx.from.id,
      subscription,
      amount,
      stars,
    })

    return ctx.wizard.next()
  },
  async ctx => {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      await ctx.reply('‚ùå Invalid callback query')
      return ctx.scene.leave()
    }

    const data = ctx.callbackQuery.data
    if (data === 'cancel_payment') {
      const isRu = isRussian(ctx)
      await ctx.reply(
        isRu
          ? 'üîÑ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
          : 'üîÑ Payment canceled. Returning to the main menu.'
      )
      return ctx.scene.enter(ModeEnum.MainMenu)
    }

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    const adminIds = process.env.ADMIN_IDS
      ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id, 10))
      : []

    if (
      ctx.from?.id &&
      adminIds.includes(ctx.from.id) &&
      data === 'test_payment_success'
    ) {
      const selectedPayment = ctx.session.selectedPayment
      if (selectedPayment) {
        const { amount, stars, subscription } = selectedPayment

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await inngest.send({
          id: `subscription-${ctx.from.id}-${Date.now()}-${uuidv4()}`,
          name: 'payment/process',
          data: {
            telegram_id: ctx.from.id.toString(),
            amount: stars,
            type: TransactionType.MONEY_INCOME,
            description: `Subscription payment: ${subscription}`,
            bot_name: ctx.botInfo.username,
            metadata: {
              service_type: ModeEnum.Subscribe,
              subscription,
              amount,
            },
          },
        })

        const isRu = isRussian(ctx)
        await ctx.reply(
          isRu
            ? `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${stars} –∑–≤–µ–∑–¥.`
            : `‚úÖ Payment successfully processed! ${stars} stars have been added to your balance.`
        )
      }

      return ctx.scene.enter(ModeEnum.MainMenu)
    }

    // –û–±—ã—á–Ω–æ –∑–¥–µ—Å—å –º—ã –±—ã –∂–¥–∞–ª–∏ –≤–µ–±—Ö—É–∫ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    return ctx.wizard.next()
  }
)
