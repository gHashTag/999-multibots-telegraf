import { Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { uploadVideoToServer } from '../../services/uploadVideoToServer'
import { randomUUID } from 'node:crypto'
import { Markup } from 'telegraf'

const MAX_FILE_SIZE = 50 * 1024 * 1024 // 50 MB, –ø—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

export const uploadVideoScene = new Scenes.WizardScene<MyContext>(
  'video_in_url',
  async ctx => {
    console.log('CASE 1: uploadVideoScene')
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu
        ? 'üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª'
        : 'üìπ Please send the video file',
      Markup.removeKeyboard()
    )
    ctx.wizard.next()
    return
  },
  async ctx => {
    console.log('CASE 2: uploadVideoScene')
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message

    if (message && 'video' in message) {
      if (message.video.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : '‚ö†Ô∏è Error: video is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }

      const videoFile = await ctx.telegram.getFile(message.video.file_id)
      const videoUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${videoFile.file_path}`
      console.log('CASE: videoUrl', videoUrl)
      ctx.session.videoUrl = videoUrl
      ctx.wizard.next()
      return
    } else {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
          : '‚ùå Error: Video not provided'
      )
      ctx.scene.leave()
      return
    }
  },
  async ctx => {
    console.log('CASE 3: uploadVideoScene')
    const isRu = ctx.from?.language_code === 'ru'
    const telegramId = ctx.from?.id

    if (!telegramId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : '‚ùå Error: Could not determine user ID.'
      )
      return ctx.scene.leave()
    }

    try {
      const filePath = await uploadVideoToServer({
        videoUrl: ctx.session.videoUrl,
        telegram_id: telegramId,
        fileName: `video_to_url_${randomUUID()}`,
      })
      await ctx.reply(
        (isRu
          ? '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü—É—Ç—å: '
          : '‚úÖ Video successfully uploaded to the server. Path: ') + filePath
      )
    } catch (error) {
      console.error('Error uploading video:', error)
      await ctx.reply(
        isRu ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ' : '‚ùå Error uploading video'
      )
    }
    return ctx.scene.leave()
  }
)
