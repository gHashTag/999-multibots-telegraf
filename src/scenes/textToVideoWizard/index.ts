import { Scenes, Markup } from 'telegraf'
import { MyContext, VideoModelKey } from '@/interfaces'
import { calculateFinalPrice } from '@/price/helpers'
import { generateTextToVideo } from '@/modules/videoGenerator/generateTextToVideo'
import { isRussian } from '@/helpers/language'
import { sendGenericErrorMessage, videoModelKeyboard } from '@/menu'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { VIDEO_MODELS_CONFIG } from '@/modules/videoGenerator/config/models.config'
import { getUserBalance } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { sendMediaToPulse, MediaPulseOptions } from '@/helpers/pulse'
import { logger } from '@/utils/logger'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª—é—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ
type VideoModelConfigKey = keyof typeof VIDEO_MODELS_CONFIG

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
async function processVideoGeneration(
  ctx: MyContext,
  prompt: string,
  videoModelKey: VideoModelConfigKey,
  isRu: boolean
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –±–æ—Ç–µ
    if (!ctx.from || !ctx.from.id || !ctx.botInfo || !ctx.chat?.id) {
      logger.error(
        '[processVideoGeneration] Critical user/bot/chat info missing.',
        { from: ctx.from, botInfo: ctx.botInfo, chatId: ctx.chat?.id }
      )
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ chat.id –∏–∑–≤–µ—Å—Ç–µ–Ω
      if (ctx.chat?.id) {
        await ctx.telegram.sendMessage(
          ctx.chat.id,
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞).'
            : 'An internal error occurred (missing information to process your request).'
        )
      }
      return
    }
    const telegramId = ctx.from.id.toString()
    const username = ctx.from.username || 'unknown_user' // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const botName = ctx.botInfo.username

    const videoUrl = await generateTextToVideo(
      prompt,
      telegramId,
      username,
      isRu,
      botName,
      videoModelKey
    )

    if (videoUrl) {
      await ctx.telegram.sendVideo(ctx.chat.id, videoUrl)

      try {
        const modelTitle =
          VIDEO_MODELS_CONFIG[videoModelKey]?.title || videoModelKey
        const pulseOptions: MediaPulseOptions = {
          mediaType: 'video',
          mediaSource: videoUrl,
          telegramId: telegramId,
          username: username,
          language: isRu ? 'ru' : 'en',
          serviceType: ModeEnum.TextToVideo,
          prompt: prompt,
          botName: botName,
          additionalInfo: {
            model_used: modelTitle,
            original_url:
              videoUrl.substring(0, 100) + (videoUrl.length > 100 ? '...' : ''),
          },
        }
        await sendMediaToPulse(pulseOptions)
        logger.info('[processVideoGeneration] Pulse sent successfully.', {
          telegram_id: telegramId,
        })
      } catch (pulseError) {
        logger.error('[processVideoGeneration] Error sending pulse:', {
          telegram_id: telegramId,
          error: pulseError,
        })
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
      logger.info(
        '[processVideoGeneration] Attempting to send final message with buttons.',
        { telegram_id: telegramId, chat_id: ctx.chat.id }
      )

      const keyboard = Markup.keyboard([
        [
          isRu
            ? '‚ú® –°–æ–∑–¥–∞—Ç—å –µ—â–µ (–¢–µ–∫—Å—Ç –≤ –í–∏–¥–µ–æ)'
            : '‚ú® Create More (Text to Video)',
        ],
        [
          isRu
            ? 'üñº –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (–í–∏–¥–µ–æ)'
            : 'üñº Select Another Model (Video)',
        ],
        [isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main Menu'],
      ]).resize()
      await ctx.telegram.sendMessage(
        ctx.chat.id,
        isRu
          ? '–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?'
          : 'Your video is ready! What next?',
        keyboard
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
      logger.info(
        '[processVideoGeneration] Successfully sent final message with buttons.',
        { telegram_id: telegramId }
      )
    } else {
      await ctx.telegram.sendMessage(
        ctx.chat.id,
        isRu
          ? '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –º–æ–¥–µ–ª—å.'
          : 'Failed to generate video. Try a different prompt or model.'
      )
    }
  } catch (error) {
    logger.error(
      '[processVideoGeneration] Error during background video processing:',
      { error, telegram_id: ctx.from?.id }
    )
    try {
      if (ctx.chat?.id) {
        await ctx.telegram.sendMessage(
          ctx.chat.id,
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.'
            : 'An error occurred during video generation.'
        )
      } else {
        logger.error(
          '[processVideoGeneration] ctx.chat.id is undefined, cannot send error message to user.'
        )
      }
    } catch (e) {
      logger.error(
        '[processVideoGeneration] Failed to send error message to user after background processing error',
        e
      )
    }
  }
}

export const textToVideoWizard = new Scenes.WizardScene<MyContext>(
  'text_to_video',
  // –®–∞–≥ 0: –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  async ctx => {
    logger.info(`[TextToVideoWizard Step 0] Entered for user ${ctx.from?.id}`)
    const isRu = isRussian(ctx)

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏ –ø–æ–º–æ—â—å
    if (await handleHelpCancel(ctx)) {
      return ctx.scene.leave() // handleHelpCancel —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ helpScene
    }

    try {
      await ctx.reply(
        isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:' : 'Choose generation model:',
        {
          reply_markup: videoModelKeyboard(isRu, 'text').reply_markup,
        }
      )
      return ctx.wizard.next()
    } catch (error: unknown) {
      logger.error('[TextToVideoWizard Step 0] Error:', { error })
      await sendGenericErrorMessage(
        ctx,
        isRu,
        error instanceof Error ? error : undefined
      )
      return ctx.scene.leave()
    }
  },

  // –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞, –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–º–ø—Ç–∞
  async ctx => {
    logger.info(`[TextToVideoWizard Step 1] Entered for user ${ctx.from?.id}`)
    const isRu = isRussian(ctx)

    if (await handleHelpCancel(ctx)) {
      return ctx.scene.leave()
    }

    const message = ctx.message as { text?: string }
    const selectedButtonText = message?.text?.trim()

    if (!selectedButtonText) {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–Ω–æ–ø–∫–æ–π.'
          : 'Please select a model using the buttons.'
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–Ω–æ–≤–∞
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    let foundModelKey: VideoModelConfigKey | null = null
    for (const [key, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      const finalPriceInStars = calculateFinalPrice(key)
      const expectedButtonText = `${config.title} (${finalPriceInStars} ‚≠ê)`
      if (expectedButtonText === selectedButtonText) {
        foundModelKey = key as VideoModelConfigKey
        break
      }
    }

    if (!foundModelKey) {
      logger.warn(
        '[TextToVideoWizard Step 1] Could not map button text to model key:',
        { selectedButtonText, telegramId: ctx.from?.id }
      )
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.'
          : 'Please select a model using the provided buttons.',
        {
          reply_markup: videoModelKeyboard(isRu, 'text').reply_markup, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
        }
      )
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    if (!ctx.from?.id || !ctx.botInfo?.username) {
      logger.error(
        '[TextToVideoWizard Step 1] Critical user or bot info missing',
        { from: ctx.from, botInfo: ctx.botInfo }
      )
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const telegram_id = ctx.from.id.toString()
    const bot_name = ctx.botInfo.username
    const cost = calculateFinalPrice(foundModelKey)

    if (cost === null) {
      logger.error(
        '[TextToVideoWizard Step 1] Could not calculate price for model key:',
        { foundModelKey, telegramId: ctx.from?.id }
      )
      await sendGenericErrorMessage(ctx, isRu)
      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:' : 'Select a model:', {
        reply_markup: videoModelKeyboard(isRu, 'text').reply_markup,
      })
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    const currentBalance = await getUserBalance(telegram_id, bot_name)
    if (currentBalance < cost) {
      logger.info(
        `[TextToVideoWizard Step 1] Insufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}`
      )
      await ctx.reply(
        isRu
          ? `üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${cost}). –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚òÖ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`
          : `üòï Insufficient stars for generation (${cost}). Your balance: ${currentBalance} ‚òÖ. Please select another model or top up your balance.`,
        {
          reply_markup: videoModelKeyboard(isRu, 'text').reply_markup,
        }
      )
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    logger.info(
      `[TextToVideoWizard Step 1] Sufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}. Proceeding.`
    )
    ctx.session.videoModel = foundModelKey
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ:'
        : 'Please send a text description for the video:',
      Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    )
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  async ctx => {
    logger.info(`[TextToVideoWizard Step 2] Entered for user ${ctx.from?.id}`)
    const isRu = isRussian(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–æ–º–æ—â–∏
    if (await handleHelpCancel(ctx)) {
      return ctx.scene.leave()
    }

    const message = ctx.message
    if (message && 'text' in message) {
      const prompt = message.text.trim()

      if (!prompt) {
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
            : 'Prompt cannot be empty. Please enter a description.'
        )
        return ctx.wizard.selectStep(ctx.wizard.cursor) // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      const videoModelKey = ctx.session.videoModel as
        | VideoModelConfigKey
        | undefined
      if (!videoModelKey) {
        logger.error(
          '[TextToVideoWizard Step 2] Video model key not found in session',
          { telegramId: ctx.from?.id }
        )
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      if (!ctx.from?.id || !ctx.botInfo?.username) {
        logger.error(
          '[TextToVideoWizard Step 2] Critical user or bot info missing for generation',
          { from: ctx.from, botInfo: ctx.botInfo }
        )
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      const textStart = isRu
        ? '‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–æ–±—â—É –æ—Ç–¥–µ–ª—å–Ω–æ.'
        : '‚è≥ Request accepted! Starting video generation... This might take a while. I will notify you separately about the result.'

      await ctx.reply(textStart, Markup.removeKeyboard())

      processVideoGeneration(ctx, prompt, videoModelKey, isRu)
        .then(() => {
          logger.info(
            `[TextToVideoWizard Step 2] Async video processing initiated for ${ctx.from?.id}`
          )
        })
        .catch(async error => {
          logger.error(
            `[TextToVideoWizard Step 2] Critical error initiating async video processing for ${ctx.from?.id}:`,
            { error }
          )
          try {
            if (ctx.chat?.id) {
              await ctx.telegram.sendMessage(
                ctx.chat.id,
                isRu
                  ? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                  : 'Failed to start video generation. Please try again later.'
              )
            }
          } catch (e) {
            logger.error(
              '[TextToVideoWizard Step 2] Failed to send critical error message to user',
              { error: e }
            )
          }
        })

      ctx.session.prompt = prompt // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

      // –í–∞–∂–Ω–æ: –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –∑–¥–µ—Å—å (return ctx.scene.leave()),
      // —Ç–∞–∫ –∫–∞–∫ processVideoGeneration –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏,
      // –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ hears-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
      // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
      // –°—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –Ω–µ—è–≤–Ω–æ, –∫–æ–≥–¥–∞ Telegram –ø–æ–ª—É—á–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç reply (textStart).
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—Ç –î–û —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–¥–µ—Ç –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏,
      // —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π –∞–ø–¥–µ–π—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, handleTextMessage).

      // =====> –ù–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–í–ù–´–ô –í–´–•–û–î –ò–ó –°–¶–ï–ù–´ <=====
      return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —á—Ç–æ–±—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ hears –º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏
      // =======================================================
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
          : 'Please send a text description.'
      )
      return ctx.wizard.selectStep(ctx.wizard.cursor) // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }
  }
)

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
textToVideoWizard.hears(
  ['üé¨ –î–∞, —Å–æ–∑–¥–∞—Ç—å –µ—â–µ (—ç—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å)', 'üé¨ Yes, create more (same model)'], // <--- –ò–ó–ú–ï–ù–ï–ù–û
  async ctx => {
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞ (—à–∞–≥ 2, –∏–Ω–¥–µ–∫—Å 2)
    // ... existing code ...
  }
)

textToVideoWizard.hears(
  ['üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å', 'üîÑ Choose another model'], // <--- –ò–ó–ú–ï–ù–ï–ù–û
  async ctx => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (–∏–Ω–¥–µ–∫—Å 0)
    return ctx.wizard.selectStep(0) // –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  }
)

export default textToVideoWizard
