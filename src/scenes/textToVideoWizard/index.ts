import { Scenes, Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import { calculateFinalStarPrice, CalculationParams } from '@/price/calculator'
import { isRussian } from '@/helpers/language'
import { sendGenericErrorMessage, videoModelKeyboard } from '@/menu'
import { handleHelpCancel } from '@/handlers'
import { VIDEO_MODELS_CONFIG } from '@/price/models/VIDEO_MODELS_CONFIG'
import { getUserBalance } from '@/core/supabase'
import { generateTextToVideo } from '@/modules/generateTextToVideo'
import { logger } from '@/utils/logger'
import { processBalanceVideoOperation } from '@/price/helpers'
import { bots } from '@/bot'
import { supabase } from '@/core/supabase'
import { replicate } from '@/core/replicate'
import fs from 'fs/promises'
import path from 'path'
import { generateVideo } from '@/core/replicate/generateVideo'
import {
  sendServiceErrorToUser,
  sendServiceErrorToAdmin,
} from '@/helpers/error'
import { pulse } from '@/helpers'
import { Telegraf } from 'telegraf'
import { mock } from 'bun:test'
import { toBotName } from '@/helpers/botName.helper'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª—é—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ
type VideoModelConfigKey = keyof typeof VIDEO_MODELS_CONFIG

export const textToVideoWizard = new Scenes.WizardScene<MyContext>(
  'text_to_video',
  async ctx => {
    const isRu = isRussian(ctx)
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
      await ctx.reply(
        isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:' : 'Choose generation model:',
        {
          reply_markup: videoModelKeyboard(isRu).reply_markup,
        }
      )

      return ctx.wizard.next()
    } catch (error: unknown) {
      console.error('Error in text_to_video:', error)
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      await ctx.reply(
        isRu
          ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`
          : `‚ùå An error occurred: ${errorMessage}`
      )
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message as { text?: string }
    const selectedButtonText = message?.text // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏

    if (!selectedButtonText) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    // –ò—â–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ (–¶–µ–Ω–∞ ‚≠ê)")
    let foundModelKey: VideoModelConfigKey | null = null

    for (const [key, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      if (!config.inputType.includes('text')) continue
      // Calculate price using new calculator
      const params: CalculationParams = { modelId: key }
      const costResult = calculateFinalStarPrice(ModeEnum.TextToVideo, params)
      const finalPriceInStars = costResult ? costResult.stars : 0

      const expectedButtonText = `${config.title} (${finalPriceInStars} ‚≠ê)`
      if (expectedButtonText === selectedButtonText) {
        foundModelKey = key as VideoModelConfigKey
        break
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ü–æ–º–æ—â—å –∏ –û—Ç–º–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã
    if (selectedButtonText === (isRu ? '–ü–æ–º–æ—â—å' : 'Help')) {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ü–æ–º–æ—â–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
      await ctx.reply(
        isRu
          ? '–§—É–Ω–∫—Ü–∏—è –ü–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
          : 'Help function is under development.'
      )
      // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å—Ü–µ–Ω–µ –∏–ª–∏ –≤—ã–π—Ç–∏
      // return ctx.wizard.selectStep(ctx.wizard.cursor) // –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
      return ctx.scene.leave()
    }

    if (selectedButtonText === (isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')) {
      await ctx.reply(
        isRu ? '–û—Ç–º–µ–Ω–µ–Ω–æ.' : 'Cancelled.',
        Markup.removeKeyboard()
      )
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –∫–ª—é—á –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    if (!foundModelKey) {
      console.error(
        'Could not map button text to model key:',
        selectedButtonText
      )
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.'
          : 'Please select a model using the provided buttons.'
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–Ω–æ–≤–∞
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    // --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º foundModelKey ---

    if (!ctx.from) {
      console.error('text_to_video: Could not identify user')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const telegram_id = ctx.from.id.toString()
    const bot_name = ctx.botInfo.username

    // Calculate cost using new calculator
    const params: CalculationParams = { modelId: foundModelKey }
    const costResult = calculateFinalStarPrice(ModeEnum.TextToVideo, params)
    const cost = costResult ? costResult.stars : 0

    const currentBalance = await getUserBalance(telegram_id, bot_name)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (currentBalance < cost) {
      console.log(
        `Insufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}`
      )
      await ctx.reply(
        isRu
          ? `üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${cost}). –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚òÖ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`
          : `üòï Insufficient stars for generation (${cost}). Your balance: ${currentBalance} ‚òÖ. Please select another model or top up your balance.`,
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        {
          reply_markup: videoModelKeyboard(isRu).reply_markup,
        }
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω:
    console.log(
      `Sufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}. Proceeding.`
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–ê–ô–î–ï–ù–ù–´–ô –∫–ª—é—á –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoModel = foundModelKey

    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
        : 'Please send a text description',
      // –í–∞–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
      Markup.removeKeyboard()
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (message && 'text' in message) {
      const prompt = message.text

      if (!prompt) {
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏
      const videoModelKey = ctx.session.videoModel as
        | VideoModelConfigKey
        | undefined
      logger.info('Selected video model key:', { videoModelKey })

      if (!videoModelKey) {
        logger.error('Video model key not found in session')
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      if (ctx.from && ctx.from.username) {
        try {
          logger.info('Calling generateTextToVideo module', {
            prompt,
            videoModelKey,
            telegram_id: ctx.from.id.toString(),
            username: ctx.from.username,
            is_ru: isRu,
            bot_name: ctx.botInfo?.username || 'unknown_bot',
            pulseHelper: pulse,
            videoModelsConfig: VIDEO_MODELS_CONFIG,
            pathJoin: path.join,
            pathDirname: path.dirname,
            toBotName: toBotName,
          })

          // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
          const requestData = {
            prompt,
            videoModel: videoModelKey,
            telegram_id: ctx.from.id.toString(),
            username: ctx.from.username,
            is_ru: isRu,
            bot_name: ctx.botInfo?.username || 'unknown_bot',
          }

          // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
          const dependencies = {
            logger,
            supabase,
            replicate,
            telegram: (
              bots.find(
                b => b.context.botName === requestData.bot_name
              ) as Telegraf<MyContext>
            ).telegram, // –ü–æ–ª—É—á–∞–µ–º telegram –∏–∑ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞
            fs: { mkdir: fs.mkdir, writeFile: fs.writeFile },
            processBalance: processBalanceVideoOperation, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
            // generateVideoInternal: generateVideo, // –°—Ç–∞—Ä—ã–π –Ω–µ–≤–µ—Ä–Ω—ã–π –º–æ–∫
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π URL (string)
            generateVideoInternal: mock(() =>
              Promise.resolve('https://mock-replicate-output.com/video.mp4')
            ),
            sendErrorToUser: sendServiceErrorToUser,
            sendErrorToAdmin: sendServiceErrorToAdmin,
            pulseHelper: pulse,
            videoModelsConfig: VIDEO_MODELS_CONFIG,
            pathJoin: path.join,
            pathDirname: path.dirname,
            toBotName: toBotName,
          }

          await generateTextToVideo(requestData, dependencies)
          ctx.session.prompt = prompt
        } catch (generationError) {
          logger.error('Error calling generateTextToVideo module', {
            generationError,
          })
          await sendGenericErrorMessage(ctx, isRu)
        }
      } else {
        logger.error('User information missing for video generation')
        await sendGenericErrorMessage(ctx, isRu)
      }

      await ctx.scene.leave()
    } else {
      await sendGenericErrorMessage(ctx, isRu)
      await ctx.scene.leave()
    }
  }
)

export default textToVideoWizard
