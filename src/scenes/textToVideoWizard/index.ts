import { Scenes, Markup } from 'telegraf'
import { MyContext, VideoModelKey } from '@/interfaces'
import { calculateFinalPrice } from '@/price/helpers'
import { generateTextToVideo } from '@/modules/videoGenerator/generateTextToVideo'
import { isRussian } from '@/helpers/language'
import { sendGenericErrorMessage, videoModelKeyboard } from '@/menu'
import { handleHelpCancel } from '@/handlers'
import { VIDEO_MODELS_CONFIG } from '@/modules/videoGenerator/config/models.config'
import { getUserBalance } from '@/core/supabase'
import { ModeEnum } from '@/interfaces/modes'
import { sendMediaToPulse, MediaPulseOptions } from '@/helpers/pulse'
import { logger } from '@/utils/logger'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª—é—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ
type VideoModelConfigKey = keyof typeof VIDEO_MODELS_CONFIG

export const textToVideoWizard = new Scenes.WizardScene<MyContext>(
  'text_to_video',
  async ctx => {
    const isRu = isRussian(ctx)
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
      await ctx.reply(
        isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:' : 'Choose generation model:',
        {
          reply_markup: videoModelKeyboard(isRu, 'text').reply_markup,
        }
      )

      return ctx.wizard.next()
    } catch (error: unknown) {
      console.error('Error in text_to_video:', error)
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      await ctx.reply(
        isRu
          ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`
          : `‚ùå An error occurred: ${errorMessage}`
      )
      return ctx.scene.leave()
    }
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message as { text?: string }
    const selectedButtonText = message?.text // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏

    if (!selectedButtonText) {
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    // –ò—â–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ (–¶–µ–Ω–∞ ‚≠ê)")
    let foundModelKey: VideoModelConfigKey | null = null

    for (const [key, config] of Object.entries(VIDEO_MODELS_CONFIG)) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –≤ –∑–≤–µ–∑–¥–∞—Ö –∏ —ç–º–æ–¥–∑–∏ ‚≠ê
      const finalPriceInStars = calculateFinalPrice(key)
      const expectedButtonText = `${config.title} (${finalPriceInStars} ‚≠ê)` // –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚≠ê
      if (expectedButtonText === selectedButtonText) {
        foundModelKey = key as VideoModelConfigKey
        break
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ü–æ–º–æ—â—å –∏ –û—Ç–º–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã
    if (selectedButtonText === (isRu ? '–ü–æ–º–æ—â—å' : 'Help')) {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ü–æ–º–æ—â–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
      await ctx.reply(
        isRu
          ? '–§—É–Ω–∫—Ü–∏—è –ü–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
          : 'Help function is under development.'
      )
      // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å—Ü–µ–Ω–µ –∏–ª–∏ –≤—ã–π—Ç–∏
      // return ctx.wizard.selectStep(ctx.wizard.cursor) // –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
      return ctx.scene.leave()
    }

    if (selectedButtonText === (isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')) {
      await ctx.reply(
        isRu ? '–û—Ç–º–µ–Ω–µ–Ω–æ.' : 'Cancelled.',
        Markup.removeKeyboard()
      )
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –∫–ª—é—á –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    if (!foundModelKey) {
      console.error(
        'Could not map button text to model key:',
        selectedButtonText
      )
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.'
          : 'Please select a model using the provided buttons.'
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–Ω–æ–≤–∞
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    // --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º foundModelKey ---

    if (!ctx.from) {
      console.error('text_to_video: Could not identify user')
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    const telegram_id = ctx.from.id.toString()
    const bot_name = ctx.botInfo.username

    // 1. –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const cost = calculateFinalPrice(foundModelKey)
    if (cost === null) {
      // calculateFinalPrice –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å null, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      console.error('Could not calculate price for model key:', foundModelKey)
      await sendGenericErrorMessage(ctx, isRu)
      return ctx.wizard.selectStep(ctx.wizard.cursor) // –î–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await getUserBalance(telegram_id, bot_name)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (currentBalance < cost) {
      console.log(
        `Insufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}`
      )
      await ctx.reply(
        isRu
          ? `üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${cost}). –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚òÖ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`
          : `üòï Insufficient stars for generation (${cost}). Your balance: ${currentBalance} ‚òÖ. Please select another model or top up your balance.`,
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        {
          reply_markup: videoModelKeyboard(isRu, 'text').reply_markup,
        }
      )
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      return ctx.wizard.selectStep(ctx.wizard.cursor)
    }

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω:
    console.log(
      `Sufficient balance for ${telegram_id}. Has: ${currentBalance}, Needs: ${cost}. Proceeding.`
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–ê–ô–î–ï–ù–ù–´–ô –∫–ª—é—á –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.videoModel = foundModelKey

    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
        : 'Please send a text description',
      // –í–∞–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
      Markup.removeKeyboard()
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (message && 'text' in message) {
      const prompt = message.text

      if (!prompt) {
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏
      const videoModelKey = ctx.session.videoModel as
        | VideoModelConfigKey
        | undefined
      console.log('Selected video model key:', videoModelKey)

      if (!videoModelKey) {
        console.error('Video model key not found in session')
        await sendGenericErrorMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      if (ctx.from && ctx.from.username) {
        const textStart = isRu
          ? '‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–æ–±—â—É –æ—Ç–¥–µ–ª—å–Ω–æ.'
          : '‚è≥ Request accepted! Starting video generation... This might take a while. I will notify you separately about the result.'
        await ctx.reply(textStart, Markup.removeKeyboard())

        const videoUrl = await generateTextToVideo(
          prompt,
          ctx.from.id.toString(),
          ctx.from.username,
          isRu,
          ctx.botInfo?.username || 'unknown_bot',
          videoModelKey
        )

        ctx.session.prompt = prompt

        if (videoUrl) {
          await ctx.replyWithVideo(videoUrl)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø—É–ª—å—Å"
          try {
            const modelTitle =
              VIDEO_MODELS_CONFIG[videoModelKey]?.title || videoModelKey
            const pulseOptions: MediaPulseOptions = {
              mediaType: 'video',
              mediaSource: videoUrl,
              telegramId: ctx.from.id.toString(),
              username: ctx.from.username || 'unknown',
              language: isRu ? 'ru' : 'en',
              serviceType: ModeEnum.TextToVideo,
              prompt: prompt,
              botName: ctx.botInfo?.username || 'unknown_bot',
              additionalInfo: {
                model_used: modelTitle,
                original_url:
                  videoUrl.substring(0, 100) +
                  (videoUrl.length > 100 ? '...' : ''),
              },
            }
            await sendMediaToPulse(pulseOptions)
            logger.info('[TextToVideoWizard] Pulse sent successfully.', {
              telegram_id: ctx.from.id.toString(),
            })
          } catch (pulseError) {
            logger.error('[TextToVideoWizard] Error sending pulse:', {
              telegram_id: ctx.from.id.toString(),
              error: pulseError,
            })
          }
        } else {
          // –ï—Å–ª–∏ videoUrl –Ω–µ –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (generateTextToVideo —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª –¥–µ—Ç–∞–ª–∏)
          await sendGenericErrorMessage(ctx, isRu)
        }
      } else {
        console.error('User information missing for video generation')
        await sendGenericErrorMessage(ctx, isRu)
      }

      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏ –ø—É–ª—å—Å–∞, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
      // –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –µ—â–µ.
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏–º.
      // await ctx.scene.leave() // <--- –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∑–¥–µ—Å—å
    } else {
      await sendGenericErrorMessage(ctx, isRu)
      await ctx.scene.leave()
    }
  }
)

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
textToVideoWizard.hears(
  ['üé¨ –î–∞, —Å–æ–∑–¥–∞—Ç—å –µ—â–µ (—ç—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å)', 'üé¨ Yes, create more (same model)'], // <--- –ò–ó–ú–ï–ù–ï–ù–û
  async ctx => {
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞ (—à–∞–≥ 2, –∏–Ω–¥–µ–∫—Å 2)
    // ... existing code ...
  }
)

textToVideoWizard.hears(
  ['üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å', 'üîÑ Choose another model'], // <--- –ò–ó–ú–ï–ù–ï–ù–û
  async ctx => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (–∏–Ω–¥–µ–∫—Å 0)
    return ctx.wizard.selectStep(0) // –ò–Ω–¥–µ–∫—Å —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  }
)

export default textToVideoWizard
