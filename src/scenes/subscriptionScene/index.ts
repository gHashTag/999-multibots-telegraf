import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { handleMenu } from '@/handlers'
import { getTranslation } from '@/core/supabase'
import { isRussian } from '@/helpers'
import { ModeEnum } from '@/interfaces/modes'

import { isValidPaymentSubscription } from '@/interfaces/payments.interface'
import { LocalSubscription } from '@/scenes/getRuBillWizard'
import { TranslationButton } from '@/interfaces/supabase.interface'

interface KeyboardButton {
  text: string
  callback_data: string
  remove_keyboard: boolean
}

export const subscriptionScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.SubscriptionScene,
  async ctx => {
    console.log('CASE: subscriptionScene', ctx)
    const isRu = isRussian(ctx)
    const { translation, buttons } = await getTranslation(
      'subscriptionScene',
      ctx,
      undefined
    )
    console.log('buttons!!!', buttons)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = process.env.ADMIN_IDS
      ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id, 10))
      : []

    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      return ctx.scene.leave()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const buttonsWithAdmin: TranslationButton[] = [...(buttons || [])]
    if (adminIds.includes(parseInt(telegramId))) {
      buttonsWithAdmin.push({
        row: 4,
        text: 'üß™ –¢–µ—Å—Ç',
        en_price: 1,
        ru_price: 1,
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.',
        stars_price: 1,
        callback_data: 'neurotester',
      })
    }

    // Store buttons in session for later use
    ctx.session.buttons = buttonsWithAdmin

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–æ–∫
    const keyboardRows: KeyboardButton[][] = []
    buttonsWithAdmin.forEach(button => {
      const row = button.row || 0
      if (!keyboardRows[row]) {
        keyboardRows[row] = []
      }
      const text = `${button.text} - ${
        isRu ? `${button.ru_price} ‚ÇΩ` : `${button.en_price} $`
      }`

      keyboardRows[row].push({
        text,
        callback_data: button.callback_data,
        remove_keyboard: true,
      })
    })

    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const cleanedKeyboardRows = keyboardRows.filter(
      row => row && row.length > 0
    )
    //
    cleanedKeyboardRows.push([
      {
        text: isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu',
        callback_data: 'mainmenu',
        remove_keyboard: true,
      },
    ])

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(translation, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard(cleanedKeyboardRows),
    })

    return ctx.wizard.next()
  },
  async (ctx: MyContext) => {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      await ctx.reply('‚ùå Invalid callback query')
      return ctx.scene.leave()
    }

    const data = ctx.callbackQuery.data
    if (data === 'mainmenu') {
      await handleMenu(ctx)
      return ctx.scene.leave()
    }

    const selectedButton = ctx.session.buttons?.find(
      (button: TranslationButton) => button.callback_data === data
    )

    if (!selectedButton) {
      await ctx.reply('‚ùå Invalid subscription option')
      return ctx.scene.leave()
    }

    const isRu = isRussian(ctx)
    const price = isRu ? selectedButton.ru_price : selectedButton.en_price

    // Store the full subscription details in the session
    ctx.session.selectedPayment = {
      amount: price,
      stars: selectedButton.stars_price,
      subscription: data as LocalSubscription,
    }

    if (!isValidPaymentSubscription(data as LocalSubscription)) {
      await ctx.reply('‚ùå Invalid subscription data')
      return ctx.scene.leave()
    }

    await ctx.scene.enter('getRuBillWizard')
  }
)
