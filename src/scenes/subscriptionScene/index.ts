import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { handleMenu } from '@/handlers'
import { getTranslation } from '@/core/supabase'
import { isRussian } from '@/helpers'
import { ModeEnum } from '@/interfaces/modes'
import { paymentOptionsPlans } from '@/price/priceCalculator'
import { SubscriptionType } from '@/interfaces/subscription.interface'

type Subscription = 'neurophoto' | 'neurobase'

export function isValidPaymentSubscription(
  value: string
): value is Subscription {
  return ['neurobase', 'neurophoto', 'neurotester'].includes(value)
}

export const subscriptionScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.SubscriptionScene,
  async ctx => {
    console.log('CASE: subscriptionScene', ctx)
    const isRu = isRussian(ctx)
    const { translation, buttons } = await getTranslation(
      'subscriptionScene',
      ctx,
      ctx.botInfo?.username
    )
    console.log('buttons!!!', buttons)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = process.env.ADMIN_IDS
      ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id, 10))
      : []

    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      return ctx.scene.leave()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (adminIds.includes(parseInt(telegramId))) {
      buttons?.push({
        row: 4, // –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
        text: 'üß™ –¢–µ—Å—Ç', // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        en_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        ru_price: 1, // –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.',
        stars_price: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        callback_data: 'neurotester', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        subscription: SubscriptionType.NEUROTESTER,
      })
    }

    ctx.session.buttons = buttons

    if (!buttons) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏'
          : '‚ùå Error: Buttons not found'
      )
      return ctx.scene.leave()
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–æ–∫
    const keyboardRows: any[] = []
    buttons.forEach(button => {
      const row = button.row || 0
      if (!keyboardRows[row]) {
        keyboardRows[row] = []
      }
      const text = `${button.text} - ${
        isRu ? `${button.ru_price} ‚ÇΩ` : `${button.en_price} $`
      }`

      keyboardRows[row].push({
        text,
        callback_data: button.callback_data,
        remove_keyboard: true,
      })
    })

    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const cleanedKeyboardRows = keyboardRows.filter(
      row => row && row.length > 0
    )

    cleanedKeyboardRows.push([
      {
        text: isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu',
        callback_data: 'mainmenu',
        remove_keyboard: true,
      },
    ])

    const inlineKeyboard = Markup.inlineKeyboard(cleanedKeyboardRows)

    await ctx.reply(translation, {
      reply_markup: inlineKeyboard.reply_markup,
      parse_mode: 'Markdown',
    })

    return ctx.wizard.next()
  },
  async (ctx: MyContext) => {
    console.log('CASE: subscriptionScene.next', ctx)
    if ('callback_query' in ctx.update && 'data' in ctx.update.callback_query) {
      const text = ctx.update.callback_query.data
      console.log('text', text)

      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
      const selectedPayment = paymentOptionsPlans.find(
        option => option.subscription === text
      )

      if (selectedPayment && selectedPayment.subscription) {
        console.log('Selected payment option:', selectedPayment)
        const subscription = selectedPayment.subscription
        if (isValidPaymentSubscription(subscription)) {
          ctx.session.subscription = subscription
          ctx.session.selectedPayment = {
            amount: selectedPayment.amount,
            stars: Number(selectedPayment.stars),
            subscription: subscription as SubscriptionType,
            type: subscription,
          }
          return ctx.scene.enter(ModeEnum.PaymentScene)
        } else {
          console.warn(
            'Subscription type not supported for payment:',
            subscription
          )
          const isRu = isRussian(ctx)
          await ctx.reply(
            isRu
              ? '–≠—Ç–æ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.'
              : 'This subscription type does not support payment. Please select another option.'
          )
        }
      } else if (text === 'mainmenu') {
        console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        return ctx.scene.enter(ModeEnum.MainMenu)
      } else {
        console.warn('Unknown subscription type:', text)
        const isRu = isRussian(ctx)
        await ctx.reply(
          isRu
            ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.'
            : 'Unknown subscription type. Please select another option.'
        )
      }
    } else {
      handleMenu(ctx)
      return ctx.scene.leave()
    }
  }
)
