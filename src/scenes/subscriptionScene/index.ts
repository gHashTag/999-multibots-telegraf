import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces/telegram-bot.interface'
import { isRussian } from '@/helpers'
import { handleBuySubscription } from '@/handlers/handleBuySubscription'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'
import { getSubscriptionTranslations } from '@/core/supabase/getSubscriptionTranslations'
import { Translation } from '@/interfaces/translations.interface'
import { SubscriptionButton } from '@/interfaces/telegram-bot.interface'

interface SceneTranslation extends Omit<Translation, 'buttons'> {
  buttons?: SubscriptionButton[]
}

export const subscriptionScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.SubscriptionScene
)

// –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
subscriptionScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  const languageCode = isRu ? 'ru' : 'en'
  const bot_name = ctx.botInfo?.username || 'ai_koshey_bot'

  try {
    logger.info('üé≠ Entering subscription selection scene', {
      telegram_id: ctx.from?.id,
      language_code: languageCode,
      bot_name,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    ctx.session.subscriptionStep = 'LOADING_TRANSLATIONS'

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const translations = await getSubscriptionTranslations(
      languageCode,
      bot_name
    )

    if (!translations || translations.length === 0) {
      logger.error('‚ùå No translations found', {
        telegram_id: ctx.from?.id,
        language_code: languageCode,
        bot_name,
      })
      throw new Error('No translations available')
    }

    logger.info('‚úÖ Translations loaded', {
      telegram_id: ctx.from?.id,
      translations_count: translations.length,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.translations = translations as unknown as Translation[]

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –ø–æ–¥–ø–∏—Å–æ–∫
    await showSubscriptionOptions(ctx)
  } catch (error) {
    logger.error('‚ùå Error in subscription scene:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: ctx.from?.id,
    })

    const errorText = isRu
      ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      : '‚ùå Error loading subscriptions. Please try again later.'

    await ctx.reply(errorText)
    await ctx.scene.leave()
  }
})

// –®–∞–≥ 2: –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async function showSubscriptionOptions(ctx: MyContext) {
  const isRu = isRussian(ctx)

  try {
    logger.info('üìã Showing subscription options', {
      telegram_id: ctx.from?.id,
      step: 'SHOWING_OPTIONS',
    })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    ctx.session.subscriptionStep = 'SHOWING_OPTIONS'

    const translations = ctx.session.translations
    if (!translations) {
      throw new Error('No translations available')
    }
    const sceneTranslation = translations.find(
      t => t.key === 'subscriptionScene'
    ) as SceneTranslation

    if (!sceneTranslation || !sceneTranslation.buttons) {
      throw new Error('Subscription options not found')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionDescriptions = sceneTranslation.buttons
      .map((button: SubscriptionButton) => {
        const price = isRu ? button.ru_price : button.en_price
        return `
üí´ ${button.text}
üìù ${button.description}
üí∞ ${isRu ? '–¶–µ–Ω–∞' : 'Price'}: ${price}‚ÇΩ
‚≠êÔ∏è ${isRu ? '–ë–æ–Ω—É—Å' : 'Bonus'}: ${button.stars_price} ${isRu ? '–∑–≤–µ–∑–¥' : 'stars'}
`
      })
      .join('\n')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    await ctx.reply(
      `${sceneTranslation.translation}\n\n${subscriptionDescriptions}`,
      { parse_mode: 'HTML' }
    )

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    const buttons = sceneTranslation.buttons.map(
      (button: SubscriptionButton) => [
        Markup.button.callback(
          `${button.text} - ${isRu ? button.ru_price : button.en_price}‚ÇΩ`,
          `select_subscription_${button.callback_data}`
        ),
      ]
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.push([
      Markup.button.callback(
        isRu ? 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é' : 'üè† Back to menu',
        'back_to_menu'
      ),
    ])

    await ctx.reply(
      isRu ? 'üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:' : 'üëÜ Choose subscription:',
      Markup.inlineKeyboard(buttons)
    )

    logger.info('‚úÖ Subscription options displayed', {
      telegram_id: ctx.from?.id,
      buttons_count: buttons.length,
    })
  } catch (error) {
    logger.error('‚ùå Error showing subscription options:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: ctx.from?.id,
    })

    const errorText = isRu
      ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      : '‚ùå Error displaying subscriptions. Please try again later.'

    await ctx.reply(errorText)
    await ctx.scene.leave()
  }
}

// –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
subscriptionScene.action(/^select_subscription_(.+)$/, async ctx => {
  const isRu = isRussian(ctx)
  const subscriptionType = ctx.match?.[1] as SubscriptionType

  try {
    logger.info('üí´ Processing subscription selection', {
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
      step: 'SUBSCRIPTION_SELECTED',
    })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    ctx.session.subscriptionStep = 'SUBSCRIPTION_SELECTED'
    ctx.session.subscription = subscriptionType

    await ctx.answerCbQuery()

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    const confirmText = isRu
      ? `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: ${subscriptionType}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?`
      : `‚úÖ You selected: ${subscriptionType}\nProceed with purchase?`

    const confirmButtons = [
      [
        Markup.button.callback(
          isRu ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : '‚úÖ Confirm',
          `confirm_subscription_${subscriptionType}`
        ),
        Markup.button.callback(
          isRu ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' : '‚ùå Cancel',
          'cancel_subscription'
        ),
      ],
    ]

    await ctx.reply(confirmText, Markup.inlineKeyboard(confirmButtons))

    logger.info('‚úÖ Awaiting subscription confirmation', {
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
    })
  } catch (error) {
    logger.error('‚ùå Error processing subscription selection:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
    })

    const errorText = isRu
      ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      : '‚ùå Error selecting subscription. Please try again later.'

    await ctx.reply(errorText)
    await ctx.scene.leave()
  }
})

// –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
subscriptionScene.action(/^confirm_subscription_(.+)$/, async ctx => {
  const isRu = isRussian(ctx)
  const subscriptionType = ctx.match?.[1] as SubscriptionType

  try {
    logger.info('‚úÖ Processing subscription confirmation', {
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
      step: 'CONFIRMING_SUBSCRIPTION',
    })

    await ctx.answerCbQuery()

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏
    await handleBuySubscription(ctx as unknown as MyContext, subscriptionType)

    logger.info('üöÄ Proceeding to payment', {
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
    })
  } catch (error) {
    logger.error('‚ùå Error confirming subscription:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegram_id: ctx.from?.id,
      subscription_type: subscriptionType,
    })

    const errorText = isRu
      ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      : '‚ùå Error confirming subscription. Please try again later.'

    await ctx.reply(errorText)
    await ctx.scene.leave()
  }
})

// –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
subscriptionScene.action('cancel_subscription', async ctx => {
  const isRu = isRussian(ctx)

  logger.info('‚ùå Subscription selection cancelled', {
    telegram_id: ctx.from?.id,
    step: 'CANCELLED',
  })

  await ctx.answerCbQuery()

  const cancelText = isRu
    ? '‚ùå –í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞?'
    : '‚ùå Subscription selection cancelled. Show available subscriptions again?'

  const retryButtons = [
    [
      Markup.button.callback(
        isRu ? 'üîÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞' : 'üîÑ Show again',
        'show_subscriptions'
      ),
      Markup.button.callback(isRu ? 'üè† –í –º–µ–Ω—é' : 'üè† Menu', 'back_to_menu'),
    ],
  ]

  await ctx.reply(cancelText, Markup.inlineKeyboard(retryButtons))
})

// –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –ø–æ–¥–ø–∏—Å–æ–∫
subscriptionScene.action('show_subscriptions', async ctx => {
  logger.info('üîÑ Reshowing subscription options', {
    telegram_id: ctx.from?.id,
  })

  await ctx.answerCbQuery()
  await showSubscriptionOptions(ctx)
})

// –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
subscriptionScene.action('back_to_menu', async ctx => {
  logger.info('üè† Returning to menu', {
    telegram_id: ctx.from?.id,
  })

  await ctx.answerCbQuery()
  await ctx.scene.enter('menuScene')
})
