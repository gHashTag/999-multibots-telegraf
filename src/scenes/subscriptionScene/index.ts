import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { handleMenu } from '@/handlers'
import { getTranslation, getUserDetailsSubscription } from '@/core/supabase'
import { isRussian } from '@/helpers'
import { ModeEnum } from '@/interfaces/modes'
import { paymentOptionsPlans } from '@/price/priceCalculator'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { TranslationButton } from '@/interfaces/supabase.interface'
import { logger } from '@/utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'
import { shouldShowRubles } from '@/core/bot/shouldShowRubles'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export function isValidPaymentSubscription(value: string): boolean {
  if (!value) return false

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –û–î–ò–ù –†–ê–ó
  const upperValueToFind = value.toUpperCase()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö
  for (const plan of paymentOptionsPlans) {
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if (plan.subscription?.toString().toUpperCase() === upperValueToFind) {
      return true
    }
  }

  // –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  logger.warn(
    'Unknown subscription type encountered in isValidPaymentSubscription',
    { value }
  )
  return false
}

export const subscriptionScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.SubscriptionScene,
  async ctx => {
    // !!! –°–ê–ú–û–ï –ü–ï–†–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï !!!
    logger.info(`[${ModeEnum.SubscriptionScene}] STEP 1 ENTERED`, {
      telegram_id: ctx.from?.id,
    })
    // !!! –ö–û–ù–ï–¶ –°–ê–ú–û–ì–û –ü–ï–†–í–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø !!!

    const userDetails = await getUserDetailsSubscription(
      ctx.from?.id.toString()
    )
    logger.info({
      message: `[SubscriptionScene] User: ${ctx.from?.id}, Mode: ${ModeEnum.CheckBalanceScene}`,
      userDetails,
    })
    const isRu = isRussian(ctx)
    const { translation, buttons } = await getTranslation({
      key: 'subscriptionScene',
      ctx,
      bot_name: ctx.botInfo?.username,
    })
    console.log('buttons fetched from DB or static!!!', buttons)

    // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤
    const adminIds = process.env.ADMIN_IDS
      ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim(), 10))
      : []
    const telegramId = ctx.from?.id
    const isAdmin = telegramId ? adminIds.includes(telegramId) : false

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const availablePlans = paymentOptionsPlans.filter(
      plan => !plan.isAdminOnly || (plan.isAdminOnly && isAdmin)
    )

    if (!telegramId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå Error: User ID not found'
      )
      return ctx.scene.leave()
    }

    if (!availablePlans || availablePlans.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.'
          : '‚ùå Error: Could not retrieve available subscription plans.'
      )
      return ctx.scene.leave()
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–• –ø–ª–∞–Ω–æ–≤
    const keyboardRows: any[] = []
    availablePlans.forEach((plan, index) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º availablePlans
      // !!! –õ–û–ì–ò–†–û–í–ê–ù–ò–ï !!!
      logger.info(
        `[${ModeEnum.SubscriptionScene}] Processing plan for button:`,
        {
          plan_subscription: plan.subscription,
          isAdminOnly: plan.isAdminOnly,
          index,
        }
      )
      // !!! –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø !!!

      const row = index // –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      if (!keyboardRows[row]) {
        keyboardRows[row] = []
      }

      const showRubles = shouldShowRubles(ctx)
      let buttonText = ''

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
      const translatedButton = buttons?.find(
        b => b.callback_data === plan.subscription?.toString().toLowerCase()
      )
      buttonText =
        translatedButton?.text ||
        plan.subscription?.toString() ||
        'Unknown Plan'

      if (!showRubles) {
        if (plan.stars !== undefined) {
          buttonText += ` - ${plan.stars} ‚≠ê`
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º plan.amount –¥–ª—è —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ en_price –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        buttonText += ` - ${plan.amount} ‚ÇΩ`
      }

      keyboardRows[row].push(
        Markup.button.callback(
          buttonText,
          plan.subscription?.toString().toLowerCase() || 'error_plan'
        ) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ callback_data
      )
    })

    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    const cleanedKeyboardRows = keyboardRows.filter(
      row => row && row.length > 0
    )

    if (cleanedKeyboardRows.length === 0) {
      logger.warn(
        `[${ModeEnum.SubscriptionScene}] No valid buttons generated.`,
        { telegram_id: ctx.from?.id }
      )
    } else {
      const inlineKeyboard = Markup.inlineKeyboard(cleanedKeyboardRows)
      await ctx.reply(translation, {
        reply_markup: inlineKeyboard.reply_markup,
        parse_mode: 'MarkdownV2',
      })
    }

    return ctx.wizard.next()
  },
  async (ctx: MyContext) => {
    console.log('CASE: subscriptionScene.next', ctx)
    if ('callback_query' in ctx.update && 'data' in ctx.update.callback_query) {
      const text = ctx.update.callback_query.data
      console.log('Callback data text:', text)

      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ –ï–î–ò–ù–û–ú –ò–°–¢–û–ß–ù–ò–ö–ï, —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä callback_data
      const selectedPayment = paymentOptionsPlans.find(
        option =>
          option.subscription?.toString().toLowerCase() === text.toLowerCase()
      )

      if (selectedPayment && selectedPayment.subscription) {
        // –£–î–ê–õ–Ø–ï–ú –õ–ò–®–ù–Æ–Æ –ü–†–û–í–ï–†–ö–£ isValidPaymentSubscription, —Ç–∞–∫ –∫–∞–∫ find —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ —Å–ø–∏—Å–∫—É
        // if (isValidPaymentSubscription(subscription)) {
        const subscription = selectedPayment.subscription
        console.log('Valid subscription selected:', subscription)
        ctx.session.subscription = subscription
        ctx.session.selectedPayment = {
          amount: selectedPayment.amount,
          stars: Number(selectedPayment.stars), // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–≤–µ–∑–¥—ã - —ç—Ç–æ —á–∏—Å–ª–æ
          subscription: subscription as SubscriptionType,
          type: PaymentType.MONEY_INCOME,
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ isAdminTest –≤ —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
        if (subscription === SubscriptionType.NEUROTESTER) {
          ctx.session.isAdminTest = true
        } else {
          ctx.session.isAdminTest = false
        }
        return ctx.scene.enter(ModeEnum.PaymentScene)
        /* } else {
          // –≠–¢–û–¢ –ë–õ–û–ö –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ï–ù, —Ç–∞–∫ –∫–∞–∫ find –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
          console.warn(
            '[Callback Handler] Subscription type not supported for payment (should not happen):',
            subscription
          )
          const isRu = isRussian(ctx)
          await ctx.reply(
            isRu
              ? '–≠—Ç–æ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.'
              : 'This subscription type does not support payment. Please select another option.'
          )
        } */
      } else if (text === 'mainmenu') {
        console.log('CASE: üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        return ctx.scene.enter(ModeEnum.MainMenu)
      } else {
        // –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data
        console.warn('[Callback Handler] Unknown callback_data received:', text)
        const isRu = isRussian(ctx)
        await ctx.reply(
          isRu
            ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.'
            : 'Unknown subscription type. Please select another option.'
        )
      }
    } else {
      handleMenu(ctx)
      return ctx.scene.leave()
    }
  }
)
