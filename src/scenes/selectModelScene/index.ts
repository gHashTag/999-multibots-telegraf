import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/core/i18n/language'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'

export const selectModelScene = new Scenes.WizardScene<MyContext>(
  'select_model',
  async ctx => {
    const isRu = isRussian(ctx)

    const message = isRu
      ? 'ü§ñ –ö–∞–∫—É—é –º–æ–¥–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—É—á–∏—Ç—å?\n\n' +
        '1. FLUX - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å\n' +
        '‚Ä¢‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å FLUX‚ùóÔ∏è\n' +
        '‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n' +
        '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n' +
        '‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á\n' +
        '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç 2000 —à–∞–≥–æ–≤\n\n' +
        '2. FLUX PRO - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å\n' +
        '‚Ä¢‚ùóÔ∏è–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ùóÔ∏è\n' +
        '‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n' +
        '‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n' +
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤\n\n'
      : 'ü§ñ Which model do you want to train?\n\n' +
        '1. FLUX - basic model\n' +
        '‚Ä¢ ‚ùóÔ∏èIf you are a beginner, we recommend using the FLUX model‚ùóÔ∏è\n' +
        '‚Ä¢ Perfect for photorealistic images\n' +
        '‚Ä¢ Fast processing\n' +
        '‚Ä¢ Suitable for most tasks\n' +
        '‚Ä¢ Recommended for 2000 steps\n' +
        '2. FLUX PRO - advanced model\n' +
        '‚Ä¢ ‚ùóÔ∏èRecommended for professional use‚ùóÔ∏è\n' +
        '‚Ä¢ High level of detail\n' +
        '‚Ä¢ Unique artistic style\n' +
        '‚Ä¢ Supports complex textures and effects\n' +
        '‚Ä¢ Recommended for professional use'

    await ctx.reply(
      message,
      Markup.keyboard([isRu ? ['FLUX', 'FLUX PRO'] : ['FLUX', 'FLUX PRO']])
        .oneTime()
        .resize()
    )

    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)

    if (ctx.message && 'text' in ctx.message) {
      const modelChoice = ctx.message.text.toLowerCase()

      if (modelChoice.includes('flux pro')) {
        ctx.session.mode = 'digital_avatar_body_2'
        await ctx.scene.enter('checkBalanceScene')
        return
      } else if (modelChoice.includes('flux')) {
        ctx.session.mode = 'digital_avatar_body'
        await ctx.scene.enter('checkBalanceScene')
        return
      }
    }

    const isCancel = await handleHelpCancel(ctx)

    if (!isCancel) {
      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (FLUX –∏–ª–∏ FLUX PRO)'
          : '‚ùå Please select a model (FLUX or FLUX PRO)'
      )
    }

    return ctx.scene.leave()
  }
)
