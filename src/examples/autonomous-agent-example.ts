/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
 *
 * –ó–∞–ø—É—Å–∫: npm run ts-node src/examples/autonomous-agent-example.ts
 */

import { initializeAutonomousSystem } from '../core/mcp/agent/initialization.js'
import { TaskType } from '../core/mcp/agent/state.js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
async function runExample() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤')

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const system = await initializeAutonomousSystem({
      systemId: 'example-system',
      mcpConfig: {
        serverUrl: process.env.MCP_SERVER_URL!,
        apiKey: process.env.MCP_API_KEY!,
      },
      enableScheduler: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    })

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    system.on('task_completed', data => {
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${data.task.id}`)
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(data.result, null, 2))
    })

    system.on('task_failed', data => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${data.task.id}`)
      console.log('–û—à–∏–±–∫–∞:', data.error)
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    const generateTask = await system.createTask(
      TaskType.CODE_GENERATION,
      '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π REST API —Å–µ—Ä–≤–µ—Ä –Ω–∞ Express —Å TypeScript',
      {
        requirements: [
          '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Express –∏ TypeScript',
          '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç GET /api/health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
          '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç GET /api/users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç POST /api/users –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        ],
        language: 'TypeScript',
        outputDir: './generated-code',
        priority: 5,
      }
    )

    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: ${generateTask.id}`)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    console.log('‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞...')
    await system.processTask(generateTask)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    const improvementTask = await system.createTask(
      TaskType.SELF_IMPROVEMENT,
      '–£–ª—É—á—à–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤',
      {
        targetComponent: 'agent',
        applyChanges: false, // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        priority: 7,
      }
    )

    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —É–ª—É—á—à–µ–Ω–∏—è: ${improvementTask.id}`)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    console.log('‚è≥ –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π...')
    const improvementResult = await system.processTask(improvementTask)

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:')
    console.log(JSON.stringify(improvementResult, null, 2))

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
    await system.shutdown()
    console.log('üëã –†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
runExample().catch(console.error)
