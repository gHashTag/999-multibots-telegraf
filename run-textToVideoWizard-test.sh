#!/bin/bash

# –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
SCRIPT_NAME="run-textToVideoWizard-test.sh"
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
LOG_DIR="logs"
LOG_FILE="$LOG_DIR/textToVideoWizard-tests-$TIMESTAMP.log"
TEMP_DIR="temp-test-dir"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
if [ ! -d "$LOG_DIR" ]; then
  mkdir -p "$LOG_DIR"
  echo "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: $LOG_DIR"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$TEMP_DIR" ]; then
  mkdir -p "$TEMP_DIR"
  echo "üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $TEMP_DIR"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
log_message() {
  echo "$1"
  echo "$1" >> "$LOG_FILE"
}

# –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
log_message "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ textToVideoWizard $TIMESTAMP"
log_message "üìù –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª $LOG_FILE"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export NODE_ENV=test

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
cat > "$TEMP_DIR/runner.js" << EOF
const path = require('path');
process.env.NODE_ENV = 'test';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ts-node –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TypeScript
require('ts-node').register({
  transpileOnly: true
});

// –î–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Å @ (–∏–∑–º–µ–Ω—è–µ–º import paths)
const Module = require('module');
const originalResolveFilename = Module._resolveFilename;

Module._resolveFilename = function(request, parent, isMain, options) {
  if (request.startsWith('@/')) {
    const newRequest = path.resolve(__dirname, '../src', request.substr(2));
    return originalResolveFilename.call(this, newRequest, parent, isMain, options);
  }
  return originalResolveFilename.call(this, request, parent, isMain, options);
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  try {
    log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ textToVideoWizard...");
    const { runTextToVideoWizardTests } = require('../src/test-utils/tests/scenes/textToVideoWizard.test.ts');
    
    if (!runTextToVideoWizardTests || typeof runTextToVideoWizardTests !== 'function') {
      throw new Error("–§—É–Ω–∫—Ü–∏—è runTextToVideoWizardTests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π");
    }
    
    const results = await runTextToVideoWizardTests();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
    const successCount = results.filter(r => r.success).length;
    const failCount = results.length - successCount;
    
    log(\`–í—Å–µ–≥–æ: \${results.length}, –£—Å–ø–µ—à–Ω–æ: \${successCount}, –û—à–∏–±–∫–∏: \${failCount}\`);
    
    results.forEach(result => {
      log(\`\${result.success ? '‚úÖ' : '‚ùå'} \${result.name}: \${result.message}\`);
    });
    
    if (failCount > 0) {
      log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö');
      process.exit(1);
    } else {
      log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
      process.exit(0);
    }
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ' + error);
    console.error(error);
    process.exit(1);
  }
}

function log(message) {
  console.log(message);
}

runTests();
EOF

log_message "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ runner.js"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
log_message "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ textToVideoWizard..."
cd "$TEMP_DIR" && node runner.js | tee -a "../$LOG_FILE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
RESULT=${PIPESTATUS[0]}
cd ..
if [ $RESULT -eq 0 ]; then
  log_message "‚úÖ –¢–µ—Å—Ç—ã textToVideoWizard —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
else
  log_message "‚ùå –¢–µ—Å—Ç—ã textToVideoWizard –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $RESULT)"
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
log_message "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
rm -rf "$TEMP_DIR"
log_message "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"

log_message "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ $SCRIPT_NAME –∑–∞–≤–µ—Ä—à–µ–Ω–æ $TIMESTAMP"
exit $RESULT 