require('dotenv').config()
const axios = require('axios')

const INNGEST_EVENT_KEY = process.env.INNGEST_EVENT_KEY
const INNGEST_URL =
  process.env.INNGEST_URL || 'https://api.inngest.com/e/v1/events'

if (!INNGEST_EVENT_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: INNGEST_EVENT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:')
console.log(`INNGEST_EVENT_KEY –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!INNGEST_EVENT_KEY}`)
console.log(`INNGEST_URL: ${INNGEST_URL}`)

async function sendTestEventDirect() {
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API...')

    const testEvent = {
      name: 'test/direct-event',
      data: {
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ HTTP API Inngest',
        timestamp: new Date().toISOString(),
      },
      id: `test-${Date.now()}`,
      ts: Date.now(),
    }

    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(testEvent, null, 2))

    const response = await axios({
      method: 'post',
      url: INNGEST_URL,
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${INNGEST_EVENT_KEY}`,
      },
      data: [testEvent],
    })

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    console.log(`üìÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`)
    console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response.data, null, 2))

    return {
      success: true,
      status: response.status,
      data: response.data,
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ HTTP API')

    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
      console.error(`üìÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`)
      console.error(
        'üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:',
        JSON.stringify(error.response.data, null, 2)
      )
      console.error(
        'üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:',
        JSON.stringify(error.response.headers, null, 2)
      )
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
      console.error('üìÑ –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.request)
    } else {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error('üìÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
    }

    return {
      success: false,
      error: error.message,
      response: error.response
        ? {
            status: error.response.status,
            data: error.response.data,
          }
        : null,
    }
  }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç
sendTestEventDirect()
  .then(result => {
    if (result.success) {
      console.log('‚úÖ –¢–µ—Å—Ç HTTP API —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')
    } else {
      console.log('‚ùå –¢–µ—Å—Ç HTTP API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π')
    }

    process.exit(result.success ? 0 : 1)
  })
  .catch(err => {
    console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err)
    process.exit(1)
  })
