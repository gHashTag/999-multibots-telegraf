---
description: 
globs: 
alwaysApply: false
---
# SQL Database Access Patterns

## PROJECTS

{
  "data": {
    "details": [
      {
        "id": "yuukfqcsdhkyxegfwlcb",
        "organization_id": "hlenjgpkwenatqlfwzlg",
        "name": "NeuroBlogger",
        "region": "eu-central-2",
        "status": "ACTIVE_HEALTHY",
        "database": {
          "host": "db.yuukfqcsdhkyxegfwlcb.supabase.co",
          "version": "15.8.1.021",
          "postgres_engine": "15",
          "release_channel": "ga"
        },
        "created_at": "2025-01-01T09:47:23.870115Z"
      }
    ]
  },
  "error": null,
  "successfull": true,
  "successful": true
}


## Detect SQL DDL Operations

When you see SQL queries that try to modify database structure (DDL operations), suggest using migrations instead:

```pattern
{
  "name": "sql-ddl-operations",
  "description": "Detect attempts to modify database structure through MCP",
  "pattern": {
    "content": "(CREATE\\s+(?:OR\\s+REPLACE\\s+)?(?:TYPE|FUNCTION|TABLE|INDEX)|ALTER\\s+TABLE|DROP\\s+)",
    "isRegex": true,
    "caseSensitive": false
  },
  "message": "‚ùå MCP –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ READ –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\nüìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ src/db/migrations/\n2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à SQL-–∫–æ–¥ –≤ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏\n3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ë–î\n\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: src/db/README.md"
}
```

## Detect Read-Only Transaction Errors

When you see errors about read-only transactions, provide guidance:

```pattern
{
  "name": "read-only-transaction-error",
  "description": "Detect read-only transaction errors from database",
  "pattern": {
    "content": "cannot execute .+ in a read-only transaction",
    "isRegex": true,
    "caseSensitive": false
  },
  "message": "‚ùå –û—à–∏–±–∫–∞: MCP –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ READ –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\nüìù –ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n1. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏\n2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤ src/db/migrations/\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ src/db/README.md"
}
```

## SQL Migration Template

When creating a new SQL migration file, use this template:

```pattern
{
  "name": "sql-migration-template",
  "description": "Template for SQL migration files",
  "pattern": {
    "content": "migrations/.+\\.sql$",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "-- –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n-- –î–∞—Ç–∞: {date}\n-- –ê–≤—Ç–æ—Ä: {author}\n\n-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\nDO $$ \nBEGIN\n    -- –í–∞—à SQL –∫–æ–¥ –∑–¥–µ—Å—å\n    \nEND $$;\n"
}
```

## SQL Function Template

When creating a new SQL function in a migration, use this template:

```pattern
{
  "name": "sql-function-template",
  "description": "Template for SQL functions in migrations",
  "pattern": {
    "content": "CREATE\\s+(?:OR\\s+REPLACE\\s+)?FUNCTION",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "CREATE OR REPLACE FUNCTION public.{function_name}(\n    p_param1 type1,\n    p_param2 type2\n) RETURNS return_type AS $$\nBEGIN\n    -- –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    \nEND;\n$$ LANGUAGE plpgsql;"
}
```

## SQL Type Template

When creating a new SQL type in a migration, use this template:

```pattern
{
  "name": "sql-type-template",
  "description": "Template for SQL types in migrations",
  "pattern": {
    "content": "CREATE\\s+TYPE",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "DO $$ \nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{type_name}') THEN\n        CREATE TYPE {type_name} AS ENUM (\n            'value1',\n            'value2'\n        );\n    END IF;\nEND $$;"
}
```

## FUNCTION

{
  "data": {
    "details": [
      {
        "routine_name": "simple_update_payment_status",
        "routine_definition": "\nBEGIN\n    UPDATE payment_status_logs\n    SET \n        status = p_new_status::payment_status,\n        timestamp = NOW()\n    WHERE payment_id = p_payment_id;\nEND;\n"
      },
      {
        "routine_name": "get_month_date",
        "routine_definition": "\nBEGIN\n    RETURN make_date(year, \n        CASE month_name\n            WHEN '–Ø–Ω–≤–∞—Ä—å' THEN 1\n            WHEN '–§–µ–≤—Ä–∞–ª—å' THEN 2\n            WHEN '–ú–∞—Ä—Ç' THEN 3\n            WHEN '–ê–ø—Ä–µ–ª—å' THEN 4\n            WHEN '–ú–∞–π' THEN 5\n            WHEN '–ò—é–Ω—å' THEN 6\n            WHEN '–ò—é–ª—å' THEN 7\n            WHEN '–ê–≤–≥—É—Å—Ç' THEN 8\n            WHEN '–°–µ–Ω—Ç—è–±—Ä—å' THEN 9\n            WHEN '–û–∫—Ç—è–±—Ä—å' THEN 10\n            WHEN '–ù–æ—è–±—Ä—å' THEN 11\n            WHEN '–î–µ–∫–∞–±—Ä—å' THEN 12\n        END, \n        1);\nEND;\n"
      },
      {
        "routine_name": "upsert_payment",
        "routine_definition": "\nDECLARE\n    v_payment_id INTEGER;\n    v_exists BOOLEAN;\nBEGIN\n    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–∞–∫–∏–º inv_id\n    SELECT EXISTS (\n        SELECT 1 \n        FROM payments_v2 \n        WHERE inv_id = p_inv_id\n    ) INTO v_exists;\n\n    -- –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º\n    IF v_exists THEN\n        RETURN jsonb_build_object(\n            'success', false,\n            'message', 'Payment with this inv_id already exists'\n        );\n    END IF;\n\n    -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ\n    INSERT INTO payments_v2 (\n        telegram_id,\n        amount,\n        currency,\n        type,\n        description,\n        status,\n        metadata,\n        inv_id,\n        stars,\n        payment_method,\n        subscription,\n        bot_name,\n        language,\n        email,\n        payment_date\n    ) VALUES (\n        p_telegram_id,\n        p_amount,\n        p_currency,\n        p_type,\n        p_description,\n        p_status,\n        p_metadata,\n        p_inv_id,\n        p_stars,\n        p_payment_method,\n        p_subscription,\n        p_bot_name,\n        p_language,\n        p_email,\n        NOW()\n    )\n    RETURNING payment_id INTO v_payment_id;\n\n    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n    RETURN jsonb_build_object(\n        'success', true,\n        'payment_id', v_payment_id,\n        'message', 'Payment created successfully'\n    );\n\nEXCEPTION WHEN OTHERS THEN\n    -- –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ\n    RETURN jsonb_build_object(\n        'success', false,\n        'message', SQLERRM,\n        'error_details', jsonb_build_object(\n            'sqlstate', SQLSTATE,\n            'error_message', SQLERRM\n        )\n    );\nEND;\n"
      },
      {
        "routine_name": "stars_to_usd",
        "routine_definition": "\nBEGIN\n    RETURN stars_amount * 0.016;\nEND;\n"
      },
      {
        "routine_name": "rub_to_usd",
        "routine_definition": "\nBEGIN\n    RETURN rub_amount / 92.0;\nEND;\n"
      },
      {
        "routine_name": "calculate_user_balance",
        "routine_definition": " DECLARE v_income numeric; v_outcome numeric; v_commission numeric; BEGIN SELECT COALESCE(SUM(CASE WHEN type = 'money_income' AND status = 'COMPLETED' THEN amount ELSE 0 END), 0) INTO v_income FROM payments_v2 WHERE telegram_id = p_telegram_id; SELECT COALESCE(SUM(CASE WHEN type = 'money_expense' AND status = 'COMPLETED' THEN amount ELSE 0 END), 0) INTO v_outcome FROM payments_v2 WHERE telegram_id = p_telegram_id; SELECT COALESCE(SUM(CASE WHEN payment_method = 'System' AND status = 'COMPLETED' THEN amount ELSE 0 END), 0) INTO v_commission FROM payments_v2 WHERE telegram_id = p_telegram_id; RETURN QUERY SELECT v_income - v_outcome AS total_balance, v_income AS income, v_outcome AS outcome, v_commission AS commission; END; "
      },
      {
        "routine_name": "migrate_user_balances",
        "routine_definition": "\nDECLARE\n  user_record RECORD;\n  inserted_record RECORD;\n  migration_date TIMESTAMP;\n  stars_to_add INTEGER;\n  insert_error TEXT;\nBEGIN\n  -- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏\n  migration_date := NOW();\n  \n  -- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º\n  FOR user_record IN \n    WITH calculated_balance AS (\n      SELECT \n        p.telegram_id,\n        COALESCE(SUM(CASE WHEN p.type = 'income' AND p.status = 'COMPLETED' THEN p.stars ELSE 0 END), 0) -\n        COALESCE(SUM(CASE WHEN p.type = 'outcome' AND p.status = 'COMPLETED' THEN p.stars ELSE 0 END), 0) AS calc_balance\n      FROM payments p\n      GROUP BY p.telegram_id\n    )\n    SELECT \n      u.telegram_id,\n      u.username,\n      u.balance AS old_balance,\n      COALESCE(c.calc_balance, 0) AS calculated_balance,\n      u.balance - COALESCE(c.calc_balance, 0) AS difference\n    FROM users u\n    LEFT JOIN calculated_balance c ON u.telegram_id = c.telegram_id\n    WHERE u.balance > 0 AND (u.balance - COALESCE(c.calc_balance, 0)) > 0\n    ORDER BY difference DESC\n  LOOP\n    BEGIN\n      -- –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –∑–≤–µ–∑–¥\n      stars_to_add := ROUND(user_record.difference);\n      \n      -- –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å\n      IF stars_to_add > 0 THEN\n        -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å income –≤ —Ç–∞–±–ª–∏—Ü–µ payments\n        INSERT INTO payments (\n          telegram_id,\n          stars,\n          amount,\n          type,\n          status,\n          description,\n          payment_method,\n          bot_name,\n          language,\n          currency,\n          payment_date,\n          metadata\n        ) \n        VALUES (\n          user_record.telegram_id,\n          stars_to_add,\n          0, -- –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏\n          'income',\n          'COMPLETED',\n          '–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (' || user_record.old_balance || ')',\n          'migration',\n          'leela',\n          'ru',\n          'RUB',\n          migration_date,\n          jsonb_build_object(\n            'migration', true,\n            'old_balance', user_record.old_balance,\n            'calculated_balance', user_record.calculated_balance,\n            'difference', user_record.difference\n          )\n        )\n        RETURNING payment_id INTO inserted_record;\n        \n        -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏\n        user_telegram_id := user_record.telegram_id;\n        user_username := user_record.username;\n        user_old_balance := user_record.old_balance;\n        user_calculated_balance := user_record.calculated_balance;\n        user_difference := user_record.difference;\n        user_stars_added := stars_to_add;\n        migration_status := 'SUCCESS';\n        RETURN NEXT;\n      END IF;\n      \n    EXCEPTION WHEN OTHERS THEN\n      -- –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ\n      user_telegram_id := user_record.telegram_id;\n      user_username := user_record.username;\n      user_old_balance := user_record.old_balance;\n      user_calculated_balance := user_record.calculated_balance;\n      user_difference := user_record.difference;\n      user_stars_added := 0;\n      migration_status := 'ERROR: ' || SQLERRM;\n      RETURN NEXT;\n    END;\n  END LOOP;\n  \n  RETURN;\nEND;\n"
      },
      {
        "routine_name": "run_balance_migration",
        "routine_definition": "\nDECLARE\n  migration_results RECORD;\n  total_users_count INTEGER := 0;\n  successful_count INTEGER := 0;\n  failed_count INTEGER := 0;\n  stars_migrated INTEGER := 0;\nBEGIN\n  -- –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n  FOR migration_results IN SELECT * FROM migrate_user_balances() LOOP\n    total_users_count := total_users_count + 1;\n    \n    IF migration_results.migration_status = 'SUCCESS' THEN\n      successful_count := successful_count + 1;\n      stars_migrated := stars_migrated + migration_results.user_stars_added;\n    ELSE\n      failed_count := failed_count + 1;\n    END IF;\n  END LOOP;\n  \n  -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n  total_users := total_users_count;\n  successful_migrations := successful_count;\n  failed_migrations := failed_count;\n  total_stars_migrated := stars_migrated;\n  \n  RETURN NEXT;\n  RETURN;\nEND;\n"
      },
      {
        "routine_name": "upsert_payment",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    INSERT INTO payments_v2 (\n        telegram_id,\n        amount,\n        stars,\n        type,\n        status,\n        payment_method,\n        subscription,\n        bot_name,\n        inv_id,\n        currency,\n        description,\n        language,\n        email,\n        metadata,\n        payment_date\n    ) VALUES (\n        p_telegram_id::bigint,\n        p_amount,\n        p_stars,\n        p_type::operation_type,\n        p_status::payment_status,\n        p_payment_method,\n        p_subscription,\n        p_bot_name,\n        p_inv_id,\n        p_currency,\n        p_description,\n        p_language,\n        p_email,\n        p_metadata,\n        CURRENT_TIMESTAMP\n    )\n    ON CONFLICT (inv_id) DO UPDATE SET\n        status = EXCLUDED.status,\n        payment_date = CURRENT_TIMESTAMP\n    RETURNING *;\nEND;\n"
      },
      {
        "routine_name": "create_test_translations",
        "routine_definition": "\nBEGIN\n  -- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏\n  DELETE FROM public.translations \n  WHERE bot_name IN ('ai_koshey_bot', 'clip_maker_neuro_bot');\n\n  -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è id\n  PERFORM setval(pg_get_serial_sequence('public.translations', 'id'), coalesce(max(id), 0) + 1) FROM public.translations;\n\n  -- –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è ai_koshey_bot\n  INSERT INTO public.translations (bot_name, key, language_code, translation, url, buttons)\n  VALUES \n    (\n      'ai_koshey_bot',\n      'start',\n      'ru',\n      'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è AI Koshey. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!',\n      'https://raw.githubusercontent.com/gHashTag/999-multibots-telegraf/main/assets/start.jpg',\n      '[]'::jsonb\n    ),\n    (\n      'ai_koshey_bot',\n      'start',\n      'en',\n      'ü§ñ Hello! I am your test bot for AI Koshey. Let''s get started!',\n      'https://raw.githubusercontent.com/gHashTag/999-multibots-telegraf/main/assets/start.jpg',\n      '[]'::jsonb\n    );\n\n  -- –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è clip_maker_neuro_bot\n  INSERT INTO public.translations (bot_name, key, language_code, translation, url, buttons)\n  VALUES \n    (\n      'clip_maker_neuro_bot',\n      'start',\n      'ru',\n      'üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è Clip Maker. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!',\n      'https://raw.githubusercontent.com/gHashTag/999-multibots-telegraf/main/assets/start.jpg',\n      '[]'::jsonb\n    ),\n    (\n      'clip_maker_neuro_bot',\n      'start',\n      'en',\n      'üé¨ Hello! I am your test bot for Clip Maker. Let''s get started!',\n      'https://raw.githubusercontent.com/gHashTag/999-multibots-telegraf/main/assets/start.jpg',\n      '[]'::jsonb\n    );\n\n  -- –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –º–µ–Ω—é –∏ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π\n  INSERT INTO public.translations (bot_name, key, language_code, translation, url, buttons)\n  VALUES\n    -- –ú–µ–Ω—é –¥–ª—è ai_koshey_bot\n    (\n      'ai_koshey_bot',\n      'menu',\n      'ru',\n      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',\n      '',\n      '[{\"text\": \"üé® –°–æ–∑–¥–∞—Ç—å\", \"callback_data\": \"create\"}, {\"text\": \"üí∞ –ë–∞–ª–∞–Ω—Å\", \"callback_data\": \"balance\"}, {\"text\": \"‚ÑπÔ∏è –ü–æ–º–æ—â—å\", \"callback_data\": \"help\"}]'::jsonb\n    ),\n    (\n      'ai_koshey_bot',\n      'menu',\n      'en',\n      'üìã Main Menu',\n      '',\n      '[{\"text\": \"üé® Create\", \"callback_data\": \"create\"}, {\"text\": \"üí∞ Balance\", \"callback_data\": \"balance\"}, {\"text\": \"‚ÑπÔ∏è Help\", \"callback_data\": \"help\"}]'::jsonb\n    ),\n    -- –ú–µ–Ω—é –¥–ª—è clip_maker_neuro_bot\n    (\n      'clip_maker_neuro_bot',\n      'menu',\n      'ru',\n      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',\n      '',\n      '[{\"text\": \"üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ\", \"callback_data\": \"create_video\"}, {\"text\": \"üí∞ –ë–∞–ª–∞–Ω—Å\", \"callback_data\": \"balance\"}, {\"text\": \"‚ÑπÔ∏è –ü–æ–º–æ—â—å\", \"callback_data\": \"help\"}]'::jsonb\n    ),\n    (\n      'clip_maker_neuro_bot',\n      'menu',\n      'en',\n      'üìã Main Menu',\n      '',\n      '[{\"text\": \"üé¨ Create Video\", \"callback_data\": \"create_video\"}, {\"text\": \"üí∞ Balance\", \"callback_data\": \"balance\"}, {\"text\": \"‚ÑπÔ∏è Help\", \"callback_data\": \"help\"}]'::jsonb\n    );\n\n  RAISE NOTICE '–¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! üéâ';\nEND;\n"
      },
      {
        "routine_name": "get_user_balance_v2",
        "routine_definition": "\nDECLARE\n    telegram_id_numeric BIGINT;\n    result NUMERIC;\nBEGIN\n    -- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫\n    BEGIN\n        telegram_id_numeric = user_telegram_id::BIGINT;\n    EXCEPTION WHEN OTHERS THEN\n        RAISE NOTICE '–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è telegram_id % –≤ BIGINT: %', user_telegram_id, SQLERRM;\n        telegram_id_numeric = NULL;\n    END;\n\n    -- –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ\n    IF telegram_id_numeric IS NULL THEN\n        SELECT COALESCE(\n            SUM(CASE \n                WHEN type = 'income' THEN COALESCE(stars_amount, money_amount)\n                ELSE -COALESCE(stars_amount, money_amount)\n            END),\n            0\n        ) INTO result\n        FROM payments_v2\n        WHERE telegram_id::TEXT = user_telegram_id\n        AND status = 'COMPLETED';\n    ELSE\n        -- –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ\n        SELECT COALESCE(\n            SUM(CASE \n                WHEN type = 'income' THEN COALESCE(stars_amount, money_amount)\n                ELSE -COALESCE(stars_amount, money_amount)\n            END),\n            0\n        ) INTO result\n        FROM payments_v2\n        WHERE telegram_id = telegram_id_numeric\n        AND status = 'COMPLETED';\n    END IF;\n    \n    RETURN result;\nEND;\n"
      },
      {
        "routine_name": "update_leela_bot_names",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    WITH updated AS (\n        UPDATE payments p\n        SET bot_name = u.bot_name\n        FROM users u\n        WHERE p.telegram_id = u.telegram_id\n          AND p.bot_name = 'leela'\n        RETURNING p.telegram_id, 'leela'::text as old_bot_name, p.bot_name as new_bot_name, p.stars\n    )\n    SELECT * FROM updated;\nEND;\n"
      },
      {
        "routine_name": "upsert_payment",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    INSERT INTO payments_v2 (telegram_id, amount, type, metadata, status, subscription, currency)\n    VALUES (p_telegram_id, p_amount, p_type, p_metadata, p_status, p_subscription, p_currency)\n    RETURNING \n        payments_v2.payment_id,\n        payments_v2.telegram_id,\n        payments_v2.amount,\n        payments_v2.type,\n        payments_v2.metadata,\n        payments_v2.status,\n        payments_v2.subscription,\n        payments_v2.currency;\nEND;\n"
      },
      {
        "routine_name": "create_payment",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    INSERT INTO payments_v2 (telegram_id, amount, type, metadata, status, subscription, currency)\n    VALUES (p_telegram_id, p_amount, p_type, p_metadata, p_status, p_subscription, p_currency)\n    RETURNING \n        payments_v2.payment_id,\n        payments_v2.telegram_id,\n        payments_v2.amount,\n        payments_v2.type,\n        payments_v2.metadata,\n        payments_v2.status,\n        payments_v2.subscription,\n        payments_v2.currency;\nEND;\n"
      },
      {
        "routine_name": "insert_payment",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    INSERT INTO payments_v2 (telegram_id, amount, type, metadata, status, subscription, currency)\n    VALUES (p_telegram_id, p_amount, p_type, p_metadata, p_status, p_subscription, p_currency)\n    RETURNING \n        payments_v2.payment_id,\n        payments_v2.telegram_id,\n        payments_v2.amount,\n        payments_v2.type,\n        payments_v2.metadata,\n        payments_v2.status,\n        payments_v2.subscription,\n        payments_v2.currency;\nEND;\n"
      },
      {
        "routine_name": "update_payment_categories",
        "routine_definition": "\nBEGIN\n  -- –û–±–Ω–æ–≤–ª—è–µ–º metadata –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n  UPDATE payments\n  SET metadata = COALESCE(metadata, '{}'::jsonb) || jsonb_build_object(\n    'payment_type',\n    CASE \n      WHEN description ILIKE '%migration%' THEN 'system'\n      WHEN metadata->>'service_type' = 'System' THEN 'system'\n      WHEN metadata->>'service_type' = 'Training' THEN 'test'\n      WHEN description ILIKE '%test%' THEN 'test'\n      WHEN description ILIKE '%bonus%' THEN 'bonus'\n      WHEN description ILIKE '%–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%' OR description ILIKE '%payment%' OR description ILIKE '%purchase%' THEN 'real'\n      ELSE 'system'  -- –î–ª—è —Å—Ç–∞—Ä—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n    END\n  )\n  WHERE bot_name = 'neuro_blogger_bot';\n\n  -- –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–µ—Ñ–∏–∫—Å—ã\n  UPDATE payments\n  SET description = \n    CASE \n      WHEN metadata->>'payment_type' = 'system' THEN '[SYSTEM] ' || description\n      WHEN metadata->>'payment_type' = 'test' THEN '[TEST] ' || description\n      WHEN metadata->>'payment_type' = 'bonus' THEN '[BONUS] ' || description\n      WHEN metadata->>'payment_type' = 'real' THEN '[PAYMENT] ' || description\n    END\n  WHERE bot_name = 'neuro_blogger_bot'\n    AND description NOT ILIKE '[SYSTEM]%'\n    AND description NOT ILIKE '[TEST]%'\n    AND description NOT ILIKE '[BONUS]%'\n    AND description NOT ILIKE '[PAYMENT]%';\nEND;\n"
      },
      {
        "routine_name": "get_user_balance",
        "routine_definition": "\nDECLARE\n    result NUMERIC;\nBEGIN\n    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º amount –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞\n    SELECT COALESCE(SUM(amount), 0) INTO result\n    FROM payments_v2 \n    WHERE telegram_id = user_telegram_id\n    AND status = 'COMPLETED';\n    \n    RETURN result;\nEND;\n"
      },
      {
        "routine_name": "update_payment_status",
        "routine_definition": "\nBEGIN\n    -- –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ COMPLETED\n    UPDATE payments_v2\n    SET status = 'COMPLETED'\n    WHERE telegram_id = NEW.telegram_id\n    AND status = 'PENDING'\n    AND payment_date >= NOW() - INTERVAL '5 minutes';\n    \n    RETURN NEW;\nEND;\n"
      },
      {
        "routine_name": "migrate_user_balance",
        "routine_definition": "\nBEGIN\n    -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ completed –ø–ª–∞—Ç–µ–∂–µ–π\n    UPDATE users \n    SET balance = (\n        SELECT COALESCE(SUM(\n            CASE \n                WHEN type = 'income' THEN stars \n                WHEN type = 'outcome' THEN -stars \n                ELSE 0 \n            END\n        ), 0)\n        FROM payments \n        WHERE telegram_id = user_telegram_id \n        AND status = 'COMPLETED'\n    )\n    WHERE telegram_id = user_telegram_id;\n    \n    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å\n    RETURN (SELECT balance FROM users WHERE telegram_id = user_telegram_id);\nEND;\n"
      },
      {
        "routine_name": "migrate_balance_to_payments",
        "routine_definition": "\nDECLARE\n    user_balance NUMERIC;\n    user_bot_name TEXT;\nBEGIN\n    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ bot_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    SELECT balance, bot_name \n    INTO user_balance, user_bot_name\n    FROM users \n    WHERE telegram_id = user_telegram_id;\n\n    -- –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ payments\n    IF user_balance > 0 THEN\n        INSERT INTO payments (\n            telegram_id,\n            amount,\n            stars,\n            type,\n            status,\n            description,\n            payment_method,\n            bot_name,\n            currency\n        ) VALUES (\n            user_telegram_id::bigint,\n            user_balance,\n            user_balance,\n            'income',\n            'COMPLETED',\n            'Balance migration from users table',\n            'System',\n            user_bot_name,\n            'STARS'\n        );\n    END IF;\n\n    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å\n    RETURN user_balance;\nEND;\n"
      },
      {
        "routine_name": "categorize_payment",
        "routine_definition": "\nBEGIN\n    -- –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n    IF NULLIF(p_payment_method, '') = 'system_migration' OR \n       (p_metadata IS NOT NULL AND (p_metadata->>'migration')::boolean = true) THEN\n        RETURN 'migration'::payment_category;\n    \n    -- –ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è\n    ELSIF NULLIF(p_payment_type, '') = 'bonus' OR \n          NULLIF(p_payment_method, '') = 'Bonus' OR\n          (p_metadata IS NOT NULL AND p_metadata->>'campaign' LIKE '%bonus%') THEN\n        RETURN 'bonus'::payment_category;\n    \n    -- –ü–æ–∫—É–ø–∫–∏ –∑–∞ —Ä—É–±–ª–∏\n    ELSIF (p_metadata IS NOT NULL AND p_metadata->>'currency' = 'RUB') OR \n          NULLIF(p_payment_method, '') = 'Robokassa' OR\n          NULLIF(p_payment_method, '') = 'Telegram' OR\n          (p_metadata IS NOT NULL AND p_metadata->>'ru_amount' IS NOT NULL AND (p_metadata->>'ru_amount')::decimal > 0) THEN\n        RETURN 'rub_purchase'::payment_category;\n    \n    -- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø–æ–∫—É–ø–∫–∏ –∑–∞ –∑–≤–µ–∑–¥—ã\n    ELSE\n        RETURN 'stars_purchase'::payment_category;\n    END IF;\nEND;\n"
      },
      {
        "routine_name": "fix_user_balance",
        "routine_definition": "\nDECLARE\n    v_old_balance DECIMAL;\n    v_new_balance DECIMAL;\nBEGIN\n    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users\n    SELECT balance INTO v_old_balance\n    FROM users\n    WHERE telegram_id = p_telegram_id::bigint\n    AND bot_name = p_bot_name;\n\n    -- –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n    v_new_balance := calculate_user_balance(p_telegram_id, p_bot_name);\n\n    -- –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ\n    IF v_old_balance != v_new_balance THEN\n        -- –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã (income)\n        -- –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ, –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –∑–≤–µ–∑–¥—ã (outcome)\n        INSERT INTO payments (\n            telegram_id,\n            amount,\n            stars,\n            type,\n            status,\n            description,\n            bot_name,\n            metadata,\n            payment_method\n        ) VALUES (\n            p_telegram_id::bigint,\n            ABS(v_new_balance - v_old_balance),\n            ABS(v_new_balance - v_old_balance)::INTEGER,\n            CASE WHEN v_old_balance < v_new_balance THEN 'income' ELSE 'outcome' END,\n            'COMPLETED',\n            '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–æ–º –≤ users –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏',\n            p_bot_name,\n            jsonb_build_object(\n                'correction', true,\n                'old_balance', v_old_balance,\n                'calculated_balance', v_new_balance,\n                'difference', v_old_balance - v_new_balance\n            ),\n            'System'\n        );\n\n        -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü–µ users\n        UPDATE users \n        SET balance = v_new_balance\n        WHERE telegram_id = p_telegram_id::bigint\n        AND bot_name = p_bot_name;\n    END IF;\n\n    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n    RETURN QUERY SELECT \n        v_old_balance,\n        v_new_balance,\n        (v_old_balance - v_new_balance);\nEND;\n"
      },
      {
        "routine_name": "get_bot_statistics",
        "routine_definition": "\nBEGIN\n    RETURN QUERY\n    WITH payment_stats AS (\n        SELECT\n            CASE\n                WHEN payment_method = 'system_migration' OR (metadata->>'migration')::boolean = true THEN 'migration'\n                WHEN payment_type = 'bonus' OR payment_method = 'Bonus' OR (metadata->>'campaign' LIKE '%bonus%') THEN 'bonus'\n                WHEN (metadata->>'currency' = 'RUB') OR payment_method IN ('Robokassa', 'Telegram') OR \n                     (metadata->>'ru_amount' IS NOT NULL AND (metadata->>'ru_amount')::decimal > 0) THEN 'rub_purchase'\n                ELSE 'stars_purchase'\n            END::payment_category as category,\n            COALESCE(stars, 0)::bigint as stars,\n            COALESCE(\n                CASE \n                    WHEN metadata->>'ru_amount' IS NOT NULL THEN (metadata->>'ru_amount')::decimal\n                    ELSE amount::decimal\n                END,\n                0\n            ) as amount,\n            type,\n            telegram_id\n        FROM payments\n        WHERE bot_name = p_bot_name\n    ),\n    user_stats AS (\n        SELECT COUNT(DISTINCT telegram_id)::bigint as total_users\n        FROM users\n        WHERE bot_name = p_bot_name\n    ),\n    paying_users_stats AS (\n        SELECT COUNT(DISTINCT telegram_id)::bigint as paying_users\n        FROM payment_stats\n        WHERE type = 'income' \n          AND category IN ('rub_purchase', 'stars_purchase')\n          AND telegram_id IS NOT NULL\n    ),\n    income_stats AS (\n        SELECT\n            SUM(CASE WHEN category = 'rub_purchase' THEN amount ELSE 0 END)::decimal as total_rub_income,\n            SUM(CASE WHEN category = 'rub_purchase' THEN stars ELSE 0 END)::bigint as stars_from_rub,\n            SUM(CASE WHEN category = 'stars_purchase' THEN stars ELSE 0 END)::bigint as stars_income,\n            SUM(CASE WHEN category = 'bonus' THEN stars ELSE 0 END)::bigint as bonus_stars,\n            SUM(CASE WHEN category = 'migration' THEN stars ELSE 0 END)::bigint as migration_stars,\n            SUM(CASE WHEN category = 'migration' THEN amount ELSE 0 END)::decimal as migration_rub\n        FROM payment_stats\n        WHERE type = 'income'\n    ),\n    outcome_stats AS (\n        SELECT COALESCE(SUM(stars), 0)::bigint as stars_spent\n        FROM payment_stats\n        WHERE type = 'outcome'\n    )\n    SELECT\n        COALESCE(us.total_users, 0)::bigint,\n        COALESCE(pus.paying_users, 0)::bigint,\n        COALESCE(inc_stats.total_rub_income, 0)::decimal,\n        COALESCE(inc_stats.stars_from_rub, 0)::bigint,\n        COALESCE(inc_stats.stars_income, 0)::bigint,\n        COALESCE(inc_stats.bonus_stars, 0)::bigint,\n        COALESCE(inc_stats.migration_stars, 0)::bigint,\n        COALESCE(inc_stats.migration_rub, 0)::decimal,\n        COALESCE(os.stars_spent, 0)::bigint\n    FROM user_stats us\n    LEFT JOIN paying_users_stats pus ON true\n    LEFT JOIN income_stats inc_stats ON true\n    LEFT JOIN outcome_stats os ON true;\nEND;\n"
      },
      {
        "routine_name": "add_payment_record",
        "routine_definition": "\nDECLARE\n    v_payment_id INT;\n    v_result JSONB;\n    v_payment_type TEXT;\nBEGIN\n    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    IF NOT EXISTS (SELECT 1 FROM users WHERE telegram_id = p_telegram_id) THEN\n        RETURN jsonb_build_object(\n            'success', false,\n            'error', 'User not found',\n            'telegram_id', p_telegram_id\n        );\n    END IF;\n\n    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞\n    v_payment_type := CASE WHEN p_stars > 0 THEN 'income' ELSE 'outcome' END;\n\n    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ\n    INSERT INTO payments (\n        payment_date,\n        amount,\n        status,\n        payment_method,\n        description,\n        metadata,\n        stars,\n        telegram_id,\n        currency,\n        subscription,\n        bot_name,\n        language,\n        type\n    ) VALUES (\n        NOW(),\n        p_amount,\n        'completed',\n        p_payment_method,\n        p_description,\n        p_metadata,\n        p_stars,\n        p_telegram_id,\n        p_currency,\n        p_subscription,\n        p_bot_name,\n        p_language,\n        v_payment_type\n    )\n    RETURNING payment_id INTO v_payment_id;\n    \n    -- –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n    v_result := jsonb_build_object(\n        'success', true,\n        'telegram_id', p_telegram_id,\n        'stars', p_stars,\n        'payment_id', v_payment_id,\n        'type', v_payment_type,\n        'description', p_description,\n        'payment_method', p_payment_method,\n        'payment_date', NOW()\n    );\n    \n    RETURN v_result;\nEND;\n"
      },
      {
        "routine_name": "add_stars_to_balance",
        "routine_definition": "\nDECLARE\n    v_old_balance integer;\n    v_new_balance integer;\n    v_payment_id integer;\nBEGIN\n    -- –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏\n    RAISE NOTICE 'üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è % –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %', p_stars, p_telegram_id;\n\n    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_user_balance –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n    SELECT get_user_balance(p_telegram_id) INTO v_old_balance;\n\n    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤ payments_v2\n    INSERT INTO payments_v2 (\n        payment_date,\n        amount, -- –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π\n        status,\n        payment_method,\n        description,\n        metadata,\n        stars, -- stars –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n        telegram_id,\n        currency,\n        subscription,\n        bot_name,\n        language,\n        inv_id\n    ) VALUES (\n        NOW(),\n        p_stars, -- –ò—Å–ø–æ–ª—å–∑—É–µ–º p_stars –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π amount –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n        'COMPLETED',\n        'system',\n        p_description,\n        jsonb_build_object(\n            'type', 'system_add',\n            'old_balance', v_old_balance,\n            'added_stars', p_stars\n        ),\n        p_stars, -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥\n        p_telegram_id,\n        'STARS',\n        'none',\n        p_bot_name,\n        'ru',\n        format('%s-%s', NOW()::bigint, p_telegram_id)\n    )\n    RETURNING payment_id INTO v_payment_id;\n\n    -- –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_user_balance –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n    SELECT get_user_balance(p_telegram_id) INTO v_new_balance;\n\n    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    UPDATE users \n    SET balance = v_new_balance,\n        last_payment_date = NOW()\n    WHERE telegram_id = p_telegram_id;\n\n    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ\n    IF NOT FOUND THEN\n        RAISE NOTICE 'üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: %', p_telegram_id;\n        INSERT INTO users (telegram_id, balance, last_payment_date)\n        VALUES (p_telegram_id, v_new_balance, NOW());\n    END IF;\n\n    -- –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏\n    RAISE NOTICE '‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã. –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: %, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %', \n        v_old_balance, v_new_balance;\n\n    RETURN jsonb_build_object(\n        'payment_id', v_payment_id,\n        'old_balance', v_old_balance,\n        'new_balance', v_new_balance\n    );\nEND;\n"
      },
      {
        "routine_name": "update_updated_at_column",
        "routine_definition": "\nBEGIN\n    NEW.updated_at = timezone('utc'::text, now());\n    RETURN NEW;\nEND;\n"
      }
    ]
  },
  "error": null,
  "successfull": true,
  "successful": true
}