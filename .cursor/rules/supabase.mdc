---
description: 
globs: 
alwaysApply: false
---
# SQL Database Access Patterns

"ref": "yuukfqcsdhkyxegfwlcb"

## Detect SQL DDL Operations

When you see SQL queries that try to modify database structure (DDL operations), suggest using migrations instead:

```pattern
{
  "name": "sql-ddl-operations",
  "description": "Detect attempts to modify database structure through MCP",
  "pattern": {
    "content": "(CREATE\\s+(?:OR\\s+REPLACE\\s+)?(?:TYPE|FUNCTION|TABLE|INDEX)|ALTER\\s+TABLE|DROP\\s+)",
    "isRegex": true,
    "caseSensitive": false
  },
  "message": "‚ùå MCP –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ READ –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\nüìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ src/db/migrations/\n2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à SQL-–∫–æ–¥ –≤ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏\n3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ë–î\n\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: src/db/README.md"
}
```

## Detect Read-Only Transaction Errors

When you see errors about read-only transactions, provide guidance:

```pattern
{
  "name": "read-only-transaction-error",
  "description": "Detect read-only transaction errors from database",
  "pattern": {
    "content": "cannot execute .+ in a read-only transaction",
    "isRegex": true,
    "caseSensitive": false
  },
  "message": "‚ùå –û—à–∏–±–∫–∞: MCP –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ READ –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\nüìù –ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n1. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏\n2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤ src/db/migrations/\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ src/db/README.md"
}
```

## SQL Migration Template

When creating a new SQL migration file, use this template:

```pattern
{
  "name": "sql-migration-template",
  "description": "Template for SQL migration files",
  "pattern": {
    "content": "migrations/.+\\.sql$",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "-- –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n-- –î–∞—Ç–∞: {date}\n-- –ê–≤—Ç–æ—Ä: {author}\n\n-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\nDO $$ \nBEGIN\n    -- –í–∞—à SQL –∫–æ–¥ –∑–¥–µ—Å—å\n    \nEND $$;\n"
}
```

## SQL Function Template

When creating a new SQL function in a migration, use this template:

```pattern
{
  "name": "sql-function-template",
  "description": "Template for SQL functions in migrations",
  "pattern": {
    "content": "CREATE\\s+(?:OR\\s+REPLACE\\s+)?FUNCTION",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "CREATE OR REPLACE FUNCTION public.{function_name}(\n    p_param1 type1,\n    p_param2 type2\n) RETURNS return_type AS $$\nBEGIN\n    -- –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    \nEND;\n$$ LANGUAGE plpgsql;"
}
```

## SQL Type Template

When creating a new SQL type in a migration, use this template:

```pattern
{
  "name": "sql-type-template",
  "description": "Template for SQL types in migrations",
  "pattern": {
    "content": "CREATE\\s+TYPE",
    "isRegex": true,
    "caseSensitive": false
  },
  "template": "DO $$ \nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{type_name}') THEN\n        CREATE TYPE {type_name} AS ENUM (\n            'value1',\n            'value2'\n        );\n    END IF;\nEND $$;"
}
```