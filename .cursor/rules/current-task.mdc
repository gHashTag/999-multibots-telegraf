---
description: 
globs: 
alwaysApply: true
---
# 🕉️ Текущая Задача: НейроКодер - План Тестирования 🧘‍♂️

**Принцип:** Как лотос раскрывается лепесток за лепестком, так и мы будем покрывать код тестами, следуя естественному пути пользователя (User Flow), от корней к цветам.

**Цель:** Добиться 💯% покрытия кода тестами для директории `src` с использованием **Vitest**, следуя принципам TDD (🔴 -> ✅ -> ♻️).

**Инструменты:** Vitest, `@vitest/ui` (для интерактивного просмотра: `pnpm test:ui`), `vi.mock` / `ts-mockito` (для мокирования).

**Легенда Статусов:**
*   ✅ - Завершено
*   ⏳ - В Работе
*   ❌ - Блокировано / Ошибка
*   📝 - Запланировано

---

## 🗺️ Приоритезированный План Тестирования (User Flow)

### P0: Основы - Вход и Регистрация (Высочайший Приоритет) 🔥
*   **Статус:** ⏳
*   **Цель:** Убедиться, что новый и существующий пользователь может войти в систему.
*   **User Flow:** `/start` -> `startScene`
*   **Ключевые Модули/Файлы:**
    *   📝 `src/registerCommands.ts` (регистрация `/start`)
    *   ⏳ `src/scenes/startScene/index.ts` (логика сцены)
    *   📝 `src/core/supabase/user.ts` (`createUser`)
    *   📝 `src/core/supabase/getUserDetailsSubscription.ts` (проверка существования)
    *   📝 `src/core/supabase/referral.ts` (базовая проверка рефералов)
    *   📝 `src/utils/localization.ts` (`getTranslation`)
    *   📝 `src/menu/index.ts` (`startMenu`)
    *   📝 `src/menu/mainMenu.ts` (`levels` для туториала)
    *   📝 `src/helpers/language.ts` (`isRussian`)

### P1: Навигация - Главное Меню (Высокий Приоритет) 🧭
*   **Статус:** 📝
*   **Цель:** Проверить корректную работу главного меню и доступ к основным разделам.
*   **User Flow:** `/menu` (или кнопка "Главное Меню") -> `menuScene` -> Отображение кнопок -> Нажатие кнопки -> Переход в другую сцену/команду.
*   **Ключевые Модули/Файлы:**
    *   📝 `src/registerCommands.ts` (регистрация `/menu`, глобальные `hears`/`action`)
    *   📝 `src/scenes/menuScene/index.ts`
    *   📝 `src/menu/mainMenu.ts` (генерация клавиатуры)
    *   📝 `src/core/supabase/getUserDetailsSubscription.ts` (определение подписки для меню)
    *   📝 `src/utils/localization.ts` (`getTranslation`)

### P2: Основной Функционал - Генерация Контента (Средний Приоритет) ✨
*   **Статус:** 📝
*   **Цель:** Протестировать核心 функции бота: генерацию изображений и видео.
*   **User Flow (Пример для Video):** Кнопка "Video" -> Выбор модели (`imageToVideoWizard` / `textToVideoWizard`) -> Проверка баланса -> Ввод промпта/загрузка фото -> Отправка запроса на бэкенд (`api-server`) -> (Асинхронно) Получение результата через webhook -> Уведомление пользователя.
*   **Ключевые Модули/Файлы:**
    *   **Сцены:**
        *   📝 `src/scenes/imageToVideoWizard/index.ts`
        *   📝 `src/scenes/textToVideoWizard/index.ts`
        *   📝 `src/scenes/neuroPhotoWizard/index.ts` (для фото)
    *   **Логика:**
        *   📝 `src/price/helpers/calculateFinalPrice.ts`
        *   📝 `src/price/constants/index.ts`
        *   📝 `src/config/models.config.ts`
        *   📝 `src/core/supabase/getUserBalance.ts`
        *   📝 `src/core/bot/index.ts` (вызов API сервера)
    *   **Меню:**
        *   📝 `src/menu/videoModelMenu.ts`
        *   📝 `src/menu/imageModelMenu.ts`
    *   **API Сервер (`api-server`):**
        *   📝 Эндпоинты генерации (`/api/generate/*`)
        *   📝 Эндпоинт вебхука Replicate (`/api/replicate-webhook`)
        *   📝 Логика взаимодействия с Replicate API.
        *   📝 Механизм уведомления основного бота.

### P3: Монетизация - Оплата и Подписки (Средний Приоритет) 💳
*   **Статус:** 📝
*   **Цель:** Обеспечить корректную работу покупки подписок и пополнения баланса.
*   **User Flow:** Кнопка "Оформить подписку" -> `paymentScene` -> Выбор метода -> `starPaymentScene`/`rublePaymentScene` -> Обработка платежа -> Обновление `payments_v2` -> Проверка статуса.
*   **Ключевые Модули/Файлы:**
    *   **Сцены:**
        *   📝 `src/scenes/paymentScene/index.ts`
        *   📝 `src/scenes/starPaymentScene/index.ts`
        *   📝 `src/scenes/rublePaymentScene/index.ts`
    *   **Обработчики:**
        *   📝 `src/handlers/paymentHandlers/index.ts` (`handleSuccessfulPayment` для TG Stars)
    *   **База Данных и Логика:**
        *   📝 `src/core/supabase/payments.ts` (функции для работы с `payments_v2`)
        *   📝 `src/core/supabase/getUserDetailsSubscription.ts`
        *   📝 `src/core/supabase/getUserBalance.ts`
        *   📝 SQL функции (`get_user_balance`, `create_system_payment`)
    *   **API Сервер (`api-server`):**
        *   📝 Эндпоинт Robokassa (`/api/robokassa-result`)
        *   📝 Заглушки/реализация `updateUserBalance`, `updateUserSubscription`.

### P4: Вспомогательные Функции (Низкий Приоритет) 🛠️
*   **Статус:** 📝
*   **Цель:** Протестировать функции поддержки, баланса и реферальной системы.
*   **User Flow:** `/balance`, `/help`, `/support`, `/referral` -> Соответствующие сцены/обработчики.
*   **Ключевые Модули/Файлы:**
    *   📝 `src/scenes/balanceScene/index.ts`
    *   📝 `src/scenes/helpScene/index.ts`
    *   📝 `src/commands/support.command.ts`
    *   📝 `src/commands/referral.command.ts`
    *   📝 `src/core/supabase/referral.ts`

### P5: Админ-Функции (Самый Низкий Приоритет) 🔒
*   **Статус:** 📝
*   **Цель:** Протестировать команды, доступные только администраторам.
*   **Ключевые Модули/Файлы:**
    *   📝 `src/commands/admin/*`
    *   📝 `src/core/middlewares/admin.middleware.ts`

---

**Следующий Шаг:** Начать реализацию тестов для **P0: Основы - Вход и Регистрация** (⏳), фокусируясь на `startScene`.
