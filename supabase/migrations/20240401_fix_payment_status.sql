-- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_payment_record —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º COMPLETED
CREATE OR REPLACE FUNCTION add_payment_record(
    p_telegram_id bigint,
    p_stars integer,
    p_description text,
    p_bot_name text,
    p_language text,
    p_payment_method text,
    p_amount numeric,
    p_currency varchar,
    p_metadata jsonb,
    p_subscription text
) RETURNS integer AS $$
DECLARE
    v_payment_id integer;
    v_payment_type text;
BEGIN
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    v_payment_type := COALESCE(p_metadata->>'payment_type', 'subscription');

    -- –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    RAISE NOTICE 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ: % –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %', p_stars, p_telegram_id;

    -- –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    INSERT INTO payments (
        payment_date,
        amount,
        status,
        payment_method,
        description,
        metadata,
        stars,
        telegram_id,
        currency,
        subscription,
        bot_name,
        language,
        type
    ) VALUES (
        NOW(),
        p_amount,
        'COMPLETED',  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        p_payment_method,
        p_description,
        p_metadata,
        p_stars,
        p_telegram_id,
        p_currency,
        p_subscription,
        p_bot_name,
        p_language,
        v_payment_type
    )
    RETURNING payment_id INTO v_payment_id;

    -- –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    RAISE NOTICE '‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —Å ID: %', v_payment_id;

    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE users 
    SET balance = balance + p_stars,
        last_payment_date = NOW()
    WHERE telegram_id = p_telegram_id;

    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    IF NOT FOUND THEN
        RAISE NOTICE 'üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: %', p_telegram_id;
        INSERT INTO users (telegram_id, balance, last_payment_date)
        VALUES (p_telegram_id, p_stars, NOW());
    END IF;

    -- –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    RAISE NOTICE 'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è % –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ % –∑–≤–µ–∑–¥', p_telegram_id, p_stars;

    RETURN v_payment_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION process_payment_status_change()
RETURNS TRIGGER AS $$
DECLARE
  v_telegram_id bigint;
  v_amount numeric;
  v_stars numeric;
  v_status text;
  v_metadata jsonb;
  v_bot_name text;
  v_subscription text;
  v_currency text;
  v_type operation_type;
BEGIN
  -- –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ NEW
  v_telegram_id := NEW.telegram_id;
  v_amount := NEW.amount;
  v_stars := NEW.stars;
  v_status := NEW.status;
  v_metadata := NEW.metadata;
  v_bot_name := NEW.bot_name;
  v_subscription := NEW.subscription;
  v_currency := NEW.currency;
  v_type := NEW.type;

  -- –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ COMPLETED
  IF NEW.status = 'COMPLETED' AND OLD.status != 'COMPLETED' THEN
    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE users
    SET balance = balance + v_stars
    WHERE telegram_id = v_telegram_id;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql; 