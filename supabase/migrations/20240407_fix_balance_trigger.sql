-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
DROP TRIGGER IF EXISTS sync_balance_trigger_v2 ON payments_v2;

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é sync_user_balance
CREATE OR REPLACE FUNCTION sync_user_balance()
RETURNS TRIGGER AS $$
DECLARE
    v_telegram_id BIGINT;
    v_new_balance NUMERIC;
BEGIN
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    IF TG_OP = 'DELETE' THEN
        v_telegram_id := OLD.telegram_id;
    ELSE
        v_telegram_id := NEW.telegram_id;
    END IF;

    -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    INSERT INTO users (telegram_id, balance)
    VALUES (v_telegram_id, 0)
    ON CONFLICT (telegram_id) DO NOTHING;

    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º amount –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    WITH balance_calc AS (
        SELECT COALESCE(SUM(amount), 0) as total_balance
        FROM payments_v2
        WHERE telegram_id = v_telegram_id
          AND status = 'COMPLETED'
    )
    UPDATE users
    SET balance = balance_calc.total_balance,
        updated_at = NOW()
    FROM balance_calc
    WHERE users.telegram_id = v_telegram_id
    RETURNING balance INTO v_new_balance;

    -- –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    RAISE NOTICE 'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è % –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %)', 
        v_telegram_id, v_new_balance;
    
    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º NEW –¥–ª—è INSERT –∏ UPDATE, OLD –¥–ª—è DELETE
    IF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (INSERT, UPDATE, DELETE)
CREATE TRIGGER sync_balance_trigger_v2
    AFTER INSERT OR UPDATE OR DELETE ON payments_v2
    FOR EACH ROW
    EXECUTE FUNCTION sync_user_balance(); 