-- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã payments_v2
DROP VIEW IF EXISTS payments_analytics CASCADE;

-- –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É payments_v2 —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
DROP TABLE IF EXISTS payments_v2 CASCADE;
CREATE TABLE payments_v2 (
  payment_id SERIAL PRIMARY KEY,
  telegram_id BIGINT NOT NULL,
  payment_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  amount NUMERIC NOT NULL DEFAULT 0, -- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
  status VARCHAR(50) NOT NULL DEFAULT 'PENDING',
  payment_method VARCHAR(50),
  description TEXT,
  metadata JSONB DEFAULT '{}',
  stars NUMERIC NOT NULL DEFAULT 0, -- –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
  currency VARCHAR(10) DEFAULT 'STARS',
  subscription VARCHAR(50) DEFAULT 'none',
  bot_name VARCHAR(100),
  language VARCHAR(10) DEFAULT 'ru',
  inv_id VARCHAR(100) UNIQUE,
  email VARCHAR(255)
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
CREATE INDEX idx_payments_v2_telegram_id ON payments_v2(telegram_id);
CREATE INDEX idx_payments_v2_status ON payments_v2(status);
CREATE INDEX idx_payments_v2_payment_date ON payments_v2(payment_date);
CREATE INDEX idx_payments_v2_inv_id ON payments_v2(inv_id);

-- –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ payments_analytics
CREATE VIEW payments_analytics AS
SELECT 
  p.*,
  u.first_name,
  u.last_name,
  u.username,
  u.balance,
  u.language_code,
  u.bot_name as user_bot_name
FROM payments_v2 p
LEFT JOIN users u ON p.telegram_id = u.telegram_id;

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_user_balance
DROP FUNCTION IF EXISTS get_user_balance(TEXT);
CREATE OR REPLACE FUNCTION get_user_balance(user_telegram_id BIGINT)
RETURNS NUMERIC AS $$
DECLARE
    result NUMERIC;
BEGIN
    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º amount –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    SELECT COALESCE(SUM(amount), 0) INTO result
    FROM payments_v2 
    WHERE telegram_id = user_telegram_id
    AND status = 'COMPLETED';
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é sync_user_balance
CREATE OR REPLACE FUNCTION sync_user_balance()
RETURNS TRIGGER AS $$
DECLARE
    v_telegram_id BIGINT;
    v_new_balance NUMERIC;
BEGIN
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    IF TG_OP = 'DELETE' THEN
        v_telegram_id := OLD.telegram_id;
    ELSE
        v_telegram_id := NEW.telegram_id;
    END IF;

    -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    INSERT INTO users (telegram_id, balance)
    VALUES (v_telegram_id, 0)
    ON CONFLICT (telegram_id) DO NOTHING;

    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ amount
    WITH balance_calc AS (
        SELECT COALESCE(SUM(amount), 0) as total_balance
        FROM payments_v2
        WHERE telegram_id = v_telegram_id
          AND status = 'COMPLETED'
    )
    UPDATE users
    SET balance = balance_calc.total_balance,
        updated_at = NOW()
    FROM balance_calc
    WHERE users.telegram_id = v_telegram_id
    RETURNING balance INTO v_new_balance;

    -- –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    RAISE NOTICE 'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è % –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %)', 
        v_telegram_id, v_new_balance;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è payments_v2
DROP TRIGGER IF EXISTS sync_balance_trigger ON payments;
DROP TRIGGER IF EXISTS sync_balance_trigger_v2 ON payments_v2;
CREATE TRIGGER sync_balance_trigger_v2
    AFTER INSERT OR UPDATE OR DELETE ON payments_v2
    FOR EACH ROW
    EXECUTE FUNCTION sync_user_balance();

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_stars_to_balance
CREATE OR REPLACE FUNCTION add_stars_to_balance(
    p_telegram_id bigint,
    p_stars integer,
    p_description text,
    p_bot_name text
) RETURNS jsonb AS $$
DECLARE
    v_old_balance integer;
    v_new_balance integer;
    v_payment_id integer;
BEGIN
    -- –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    RAISE NOTICE 'üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è % –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %', p_stars, p_telegram_id;

    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_user_balance –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    SELECT get_user_balance(p_telegram_id) INTO v_old_balance;

    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤ payments_v2
    INSERT INTO payments_v2 (
        payment_date,
        amount, -- –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        status,
        payment_method,
        description,
        metadata,
        stars, -- stars –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        telegram_id,
        currency,
        subscription,
        bot_name,
        language,
        inv_id
    ) VALUES (
        NOW(),
        p_stars, -- –ò—Å–ø–æ–ª—å–∑—É–µ–º p_stars –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π amount –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        'COMPLETED',
        'system',
        p_description,
        jsonb_build_object(
            'type', 'system_add',
            'old_balance', v_old_balance,
            'added_stars', p_stars
        ),
        p_stars, -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
        p_telegram_id,
        'STARS',
        'none',
        p_bot_name,
        'ru',
        format('%s-%s', NOW()::bigint, p_telegram_id)
    )
    RETURNING payment_id INTO v_payment_id;

    -- –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_user_balance –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    SELECT get_user_balance(p_telegram_id) INTO v_new_balance;

    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE users 
    SET balance = v_new_balance,
        last_payment_date = NOW()
    WHERE telegram_id = p_telegram_id;

    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    IF NOT FOUND THEN
        RAISE NOTICE 'üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: %', p_telegram_id;
        INSERT INTO users (telegram_id, balance, last_payment_date)
        VALUES (p_telegram_id, v_new_balance, NOW());
    END IF;

    -- –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    RAISE NOTICE '‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã. –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: %, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %', 
        v_old_balance, v_new_balance;

    RETURN jsonb_build_object(
        'payment_id', v_payment_id,
        'old_balance', v_old_balance,
        'new_balance', v_new_balance
    );
END;
$$ LANGUAGE plpgsql; 