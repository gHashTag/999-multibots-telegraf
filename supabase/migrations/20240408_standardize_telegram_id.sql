-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ telegram_id –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö

-- 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤ —Ç–∞–±–ª–∏—Ü–µ users (—É–∂–µ BIGINT)
ALTER TABLE users 
ALTER COLUMN telegram_id SET DATA TYPE BIGINT;

-- 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
ALTER TABLE payments_v2 
ALTER COLUMN telegram_id SET DATA TYPE BIGINT;

-- 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
CREATE OR REPLACE FUNCTION get_user_balance(user_telegram_id BIGINT)
RETURNS NUMERIC AS $$
DECLARE
    result NUMERIC;
BEGIN
    SELECT COALESCE(SUM(amount), 0) INTO result
    FROM payments_v2 
    WHERE telegram_id = user_telegram_id
    AND status = 'COMPLETED';
    
    RETURN result;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION ensure_user_exists(p_telegram_id BIGINT)
RETURNS void AS $$
BEGIN
    INSERT INTO users (telegram_id)
    VALUES (p_telegram_id)
    ON CONFLICT (telegram_id) DO NOTHING;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION add_stars_to_balance(
    p_telegram_id BIGINT,
    p_stars integer,
    p_description text,
    p_bot_name text
) RETURNS jsonb AS $$
DECLARE
    v_old_balance integer;
    v_new_balance integer;
    v_payment_id integer;
BEGIN
    -- –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    RAISE NOTICE 'üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è % –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %', p_stars, p_telegram_id;

    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    SELECT balance INTO v_old_balance
    FROM users
    WHERE telegram_id = p_telegram_id;

    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤ payments_v2
    INSERT INTO payments_v2 (
        payment_date,
        amount,
        status,
        payment_method,
        description,
        metadata,
        stars,
        telegram_id,
        currency,
        subscription,
        bot_name,
        language,
        inv_id
    ) VALUES (
        NOW(),
        p_stars,
        'COMPLETED',
        'system',
        p_description,
        jsonb_build_object(
            'type', 'system_add',
            'old_balance', v_old_balance,
            'added_stars', p_stars
        ),
        p_stars,
        p_telegram_id,
        'STARS',
        'none',
        p_bot_name,
        'ru',
        format('%s-%s', NOW()::bigint, p_telegram_id)
    )
    RETURNING payment_id INTO v_payment_id;

    -- –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_user_balance –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    SELECT get_user_balance(p_telegram_id) INTO v_new_balance;

    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE users 
    SET balance = v_new_balance,
        last_payment_date = NOW()
    WHERE telegram_id = p_telegram_id;

    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    IF NOT FOUND THEN
        RAISE NOTICE 'üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: %', p_telegram_id;
        INSERT INTO users (telegram_id, balance, last_payment_date)
        VALUES (p_telegram_id, v_new_balance, NOW());
    END IF;

    -- –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    RAISE NOTICE '‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã. –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: %, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %', 
        v_old_balance, v_new_balance;

    RETURN jsonb_build_object(
        'payment_id', v_payment_id,
        'old_balance', v_old_balance,
        'new_balance', v_new_balance
    );
END;
$$ LANGUAGE plpgsql;

-- 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
DROP VIEW IF EXISTS payments_analytics CASCADE;
CREATE VIEW payments_analytics AS
SELECT 
  p.*,
  u.first_name,
  u.last_name,
  u.username,
  u.balance,
  u.language_code,
  u.bot_name as user_bot_name
FROM payments_v2 p
LEFT JOIN users u ON p.telegram_id = u.telegram_id; 