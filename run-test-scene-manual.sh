#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–æ –ª–∏ –∏–º—è —Ç–µ—Å—Ç–∞
if [ $# -lt 1 ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:${NC}"
    echo -e "${YELLOW}./run-test-scene-manual.sh textToVideoWizard${NC}"
    exit 1
fi

TEST_NAME=$1
KEEP_TEMP=false

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
for arg in "${@:2}"
do
    if [ "$arg" == "--keep-temp" ] || [ "$arg" == "-k" ]; then
        KEEP_TEMP=true
        echo -e "${YELLOW}–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤${NC}"
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
TEST_FILE="src/test-utils/tests/scenes/${TEST_NAME}.test.ts"
if [ ! -f "$TEST_FILE" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –§–∞–π–ª —Ç–µ—Å—Ç–∞ $TEST_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:${NC}"
    ls src/test-utils/tests/scenes/*.test.ts | sed 's/.*\/\(.*\)\.test\.ts/\1/'
    exit 1
fi

echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${TEST_NAME}...${NC}"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
TEMP_FILE=$(mktemp)
FUNC_NAME="run${TEST_NAME}Tests"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë
cat > $TEMP_FILE << EOL
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.NODE_ENV = 'test';

import { $FUNC_NAME } from "./src/test-utils/tests/scenes/${TEST_NAME}.test";

async function runTests() {
    try {
        console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ${TEST_NAME}...");
        const results = await $FUNC_NAME();
        
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log("");
        console.log("==== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ====");
        
        let successCount = 0;
        let failCount = 0;
        
        results.forEach(result => {
            if (result.success) {
                console.log(\`‚úÖ \${result.name}: \${result.message}\`);
                successCount++;
            } else {
                console.log(\`‚ùå \${result.name}: \${result.message}\`);
                failCount++;
            }
        });
        
        console.log("");
        console.log(\`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: \${results.length}, –£—Å–ø–µ—à–Ω–æ: \${successCount}, –û—à–∏–±–∫–∏: \${failCount}\`);
        
        process.exit(failCount > 0 ? 1 : 0);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:", error);
        process.exit(1);
    }
}

runTests();
EOL

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–º–æ—â—å—é ts-node, –∏—Å–ø–æ–ª—å–∑—É—è ES –º–æ–¥—É–ª–∏
echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${TEST_NAME} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ESM...${NC}"
NODE_OPTIONS="--experimental-specifier-resolution=node" npx tsx $TEMP_FILE

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
EXIT_CODE=$?

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
if [ "$KEEP_TEMP" = false ]; then
    rm $TEMP_FILE
else
    echo -e "${YELLOW}–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $TEMP_FILE${NC}"
fi

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
else
    echo -e "${RED}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.${NC}"
fi

exit $EXIT_CODE 