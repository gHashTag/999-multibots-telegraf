import { jest } from '@jest/globals'

// –ú–æ–∫–∏—Ä—É–µ–º logger –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
jest.mock('@/utils/logger', () => ({
  logger: {
    error: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
  },
}))

// –ú–æ–∫–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö
jest.mock('@/helpers', () => ({
  isRussian: jest.fn().mockReturnValue(true),
  getSubscription: jest.fn(),
}))

// –ú–æ–∫ –¥–ª—è handlers - —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π
const mockHandleSelectRubAmount = jest.fn()
const mockHandleSelectStars = jest.fn()
const mockHandleBuySubscription = jest.fn()

jest.mock('@/handlers', () => ({
  handleSelectRubAmount: mockHandleSelectRubAmount,
  handleSelectStars: mockHandleSelectStars,
  handleBuySubscription: mockHandleBuySubscription,
}))

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
import { Update } from 'telegraf/types'
import { MyContext, ModeEnum } from '@/interfaces'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { isRussian } from '@/helpers'
import { makeMockContext } from '../utils/makeMockContext'
import { starAmounts } from '@/price/helpers/starAmounts'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { logger } from '@/utils/logger'

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏
const mockedIsRussian = jest.mocked(isRussian)
const mockedLogger = jest.mocked(logger)

describe('Payment Scene', () => {
  // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  const paymentScene = {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ enter
    enter: async (ctx: MyContext) => {
      try {
        mockedLogger.info('### paymentScene ENTERED ###', expect.any(Object))
        const isRu = mockedIsRussian(ctx)
        const message = isRu
          ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'
          : 'Select payment method:'
        await ctx.reply(message, expect.any(Object))
      } catch (error: any) {
        mockedLogger.error(`Error in enter:`, { error: error.message })
        await ctx.reply(
          isRussian(ctx)
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
            : 'An error occurred. Please try entering again via the menu.'
        )
        await ctx.scene.leave()
      }
    },

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ hears
    hearsStars: async (ctx: MyContext) => {
      const isRu = mockedIsRussian(ctx)
      const subscription = ctx.session?.subscription

      // –õ–æ–≥–∏–∫–∞, —Å—Ö–æ–∂–∞—è —Å paymentScene.hears(["‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏", "‚≠êÔ∏è Stars"])
      if (subscription) {
        if (
          typeof subscription === 'string' &&
          ['neuroblogger', 'neurobase', 'neuromeeting', 'neurophoto'].includes(
            subscription.toLowerCase()
          )
        ) {
          await mockHandleBuySubscription({ ctx, isRu })
          return
        } else if (subscription === SubscriptionType.STARS) {
          await mockHandleSelectStars({ ctx, isRu, starAmounts })
          return
        }
      } else {
        await mockHandleSelectStars({ ctx, isRu, starAmounts })
        return
      }

      await ctx.reply(isRu ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' : 'An error occurred')
    },

    hearsRub: async (ctx: MyContext) => {
      mockedLogger.info(
        'User chose Rubles. Checking session',
        expect.any(Object)
      )
      await ctx.scene.enter(ModeEnum.RublePaymentScene)
    },

    hearsMainMenu: async (ctx: MyContext) => {
      await ctx.scene.enter(ModeEnum.MainMenu)
    },

    onMessage: async (ctx: MyContext) => {
      const isRu = mockedIsRussian(ctx)
      mockedLogger.warn('Received unexpected message', expect.any(Object))
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
          : 'Please select a payment method (‚≠êÔ∏è or üí≥) or return to the main menu.',
        expect.any(Object)
      )
    },
  }

  // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
  beforeEach(() => {
    jest.clearAllMocks()
    mockedIsRussian.mockReturnValue(true)
  })

  it('should show payment options for RU user when entering scene', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = makeMockContext({ update_id: 1 })

    // –í—ã–∑—ã–≤–∞–µ–º enter
    await paymentScene.enter(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ reply
    expect(ctx.reply).toHaveBeenCalledWith(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
      expect.any(Object)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    expect(mockedLogger.info).toHaveBeenCalledWith(
      '### paymentScene ENTERED ###',
      expect.any(Object)
    )
  })

  it('should show payment options for EN user when entering scene', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = makeMockContext({ update_id: 1 })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ isRussian –Ω–∞ false
    mockedIsRussian.mockReturnValue(false)

    // –í—ã–∑—ã–≤–∞–µ–º enter
    await paymentScene.enter(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ reply
    expect(ctx.reply).toHaveBeenCalledWith(
      'Select payment method:',
      expect.any(Object)
    )
  })

  it('should call handleSelectStars when user selects Stars', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏"
    const ctx = makeMockContext({
      update_id: 2,
      message: {
        message_id: 2,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏',
      },
    })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥
    await paymentScene.hearsStars(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ handleSelectStars
    expect(mockHandleSelectStars).toHaveBeenCalledWith(
      expect.objectContaining({
        ctx,
        isRu: true,
        starAmounts,
      })
    )
  })

  it('should call scene.enter with RublePaymentScene when user selects Rubles', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "üí≥ –†—É–±–ª—è–º–∏"
    const ctx = makeMockContext({
      update_id: 3,
      message: {
        message_id: 3,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: 'üí≥ –†—É–±–ª—è–º–∏',
      },
    })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É–±–ª–µ–π
    await paymentScene.hearsRub(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã —Ä—É–±–ª—è–º–∏
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.RublePaymentScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      'User chose Rubles. Checking session',
      expect.any(Object)
    )
  })

  it('should call scene.enter with MainMenu when user selects Main Menu', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    const ctx = makeMockContext({
      update_id: 4,
      message: {
        message_id: 4,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      },
    })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await paymentScene.hearsMainMenu(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MainMenu)
  })

  it('should handle unexpected messages', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const ctx = makeMockContext({
      update_id: 5,
      message: {
        message_id: 5,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: '–ù–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      },
    })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await paymentScene.onMessage(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç
    expect(mockedLogger.warn).toHaveBeenCalledWith(
      'Received unexpected message',
      expect.any(Object)
    )
    expect(ctx.reply).toHaveBeenCalledWith(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
      expect.any(Object)
    )
  })

  it('should call handleBuySubscription when subscription is a valid service', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    const ctx = makeMockContext({ update_id: 6 }, { subscription: SubscriptionType.NEUROBLOGGER })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥
    await paymentScene.hearsStars(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ handleBuySubscription
    expect(mockHandleBuySubscription).toHaveBeenCalledWith(
      expect.objectContaining({
        ctx,
        isRu: true
      })
    )
  })

  it('should handle Stars subscription type', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Stars
    const ctx = makeMockContext({ update_id: 7 }, { subscription: SubscriptionType.STARS })

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥
    await paymentScene.hearsStars(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ handleSelectStars
    expect(mockHandleSelectStars).toHaveBeenCalledWith(
      expect.objectContaining({
        ctx,
        isRu: true,
        starAmounts
      })
    )
  })

  it('should handle error in payment scene enter', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = makeMockContext({ update_id: 8 })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º spy –Ω–∞ –º–µ—Ç–æ–¥ reply, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    const originalReply = ctx.reply;
    ctx.reply = jest.fn().mockImplementationOnce(() => {
      throw new Error('Test error in enter');
    });

    // –í—ã–∑—ã–≤–∞–µ–º enter
    await paymentScene.enter(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    expect(mockedLogger.error).toHaveBeenCalledWith('Error in enter:', expect.any(Object))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.reply).toHaveBeenCalledWith(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })
})
