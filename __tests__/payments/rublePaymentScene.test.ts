import { Context, MiddlewareFn, Scenes, Markup } from 'telegraf'
import {
  MyContext,
  MySession,
  PaymentType,
  SubscriptionType,
} from '@/interfaces'
import { makeMockContext } from '../utils/makeMockContext'
import { isRussian } from '@/helpers'
import { logger } from '@/utils/logger'
import * as supabase from '@/core/supabase'
import * as helper from '@/scenes/getRuBillWizard/helper'
import * as handlers from '@/handlers'
import { getBotNameByToken } from '@/core'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { Message } from 'telegraf/typings/core/types/typegram'

// –ú–æ–∫–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('@/helpers', () => ({
  isRussian: jest.fn(),
}))

jest.mock('@/handlers', () => ({
  handleSelectRubAmount: jest.fn(),
}))

jest.mock('@/scenes/getRuBillWizard/helper', () => ({
  generateRobokassaUrl: jest.fn(),
  getInvoiceId: jest.fn(),
}))

jest.mock('@/core/supabase', () => ({
  setPayments: jest.fn(),
}))

jest.mock('@/core', () => ({
  getBotNameByToken: jest.fn(),
}))

jest.mock('@/utils/logger', () => ({
  logger: {
    info: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
  },
}))

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –º–æ–∫–æ–≤
const mockedIsRussian = jest.mocked(isRussian)
const mockedHandleSelectRubAmount = jest.mocked(handlers.handleSelectRubAmount)
const mockGetInvoiceId = jest.mocked(helper.getInvoiceId)
const mockSetPayments = jest.mocked(supabase.setPayments)
const mockGetBotNameByToken = jest.mocked(getBotNameByToken)

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø MyContext –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type TestContext = MyContext & {
  match?: string[]
  callbackQuery?: {
    data: string
    message?: { message_id: number }
  }
  message?: {
    text: string
    message_id: number
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è rublePaymentScene –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const mockRublePaymentScene = {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω—É
  async enter(ctx: TestContext) {
    try {
      logger.info('–í—Ö–æ–¥ –≤ RublePaymentScene', { from: ctx.from?.id })
      const isRu = mockedIsRussian(ctx)
      // –í—ã–∑—ã–≤–∞–µ–º handleSelectRubAmount –Ω–∞–ø—Ä—è–º—É—é
      await mockedHandleSelectRubAmount({ ctx, isRu })
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ RublePaymentScene.enter', { error })
      const isRu = mockedIsRussian(ctx)
      const errorMessage = isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå Error entering payment scene. Please try again later.'
      await ctx.reply(errorMessage)
      await ctx.scene.leave()
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ action top_up_rub_X
  async topUpRubAction(ctx: TestContext, amountRub: number) {
    const isRu = mockedIsRussian(ctx)
    try {
      await ctx.answerCbQuery()

      const selectedOption = rubTopUpOptions.find(
        o => o.amountRub === amountRub
      )
      if (!selectedOption) {
        logger.error(`Invalid top-up option selected: ${amountRub} RUB`, {
          telegram_id: ctx.from?.id,
        })
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
            : 'An error occurred: invalid top-up amount.'
        )
        return ctx.scene.leave()
      }

      const stars = selectedOption.stars
      const userId = ctx.from?.id
      if (!userId) {
        logger.error('User ID is missing!', {
          callback_data: `top_up_rub_${amountRub}`,
        })
        await ctx.reply(
          isRu
            ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.'
            : 'An error occurred: could not identify your account.'
        )
        return ctx.scene.leave()
      }

      const invId = 12345 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
      const invoiceURL = 'http://mock-robokassa-url.com'
      mockGetInvoiceId.mockResolvedValue(invoiceURL)

      const botName = 'test_bot'
      mockGetBotNameByToken.mockReturnValue({ bot_name: botName })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
      await mockSetPayments({
        telegram_id: userId.toString(),
        OutSum: amountRub.toString(),
        InvId: invId.toString(),
        currency: 'RUB',
        stars: stars,
        status: 'PENDING',
        payment_method: 'Robokassa',
        subscription: 'stars',
        bot_name: botName,
        language: ctx.from?.language_code,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
      await ctx.reply(
        isRu
          ? `‚úÖ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω</b>\n–°—É–º–º–∞: ${amountRub} ‚ÇΩ (${stars} ‚≠êÔ∏è)\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Robokassa.`
          : `‚úÖ <b>Invoice created</b>\nAmount: ${amountRub} RUB (${stars} ‚≠êÔ∏è)\n\nClick the button below to proceed with payment via Robokassa.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: isRu
                    ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amountRub} ‚ÇΩ`
                    : `Pay ${amountRub} RUB`,
                  url: invoiceURL,
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        }
      )
    } catch (error: any) {
      logger.error('Error processing callback top_up_rub:', {
        error: error.message,
        stack: error.stack,
        telegram_id: ctx.from?.id,
        callback_data: `top_up_rub_${amountRub}`,
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Robokassa.'
          : 'An error occurred while creating the Robokassa invoice.'
      )
      return ctx.scene.leave()
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(ctx: TestContext) {
    const isRu = mockedIsRussian(ctx)
    logger.warn('Received unexpected message', {
      telegram_id: ctx.from?.id,
      message_text: ctx.message?.text,
    })
    await ctx.reply(
      isRu
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
        : 'Please select a top-up amount or return to the main menu.'
    )
  },
}

describe('rublePaymentScene', () => {
  let ctx: TestContext
  let next: jest.Mock

  beforeEach(() => {
    jest.clearAllMocks()

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É makeMockContext
    ctx = makeMockContext(
      { update_id: 1 },
      {
        balance: 500,
        targetUserId: '12345',
        username: 'testuser',
        userModel: {
          model_name: 'test-model',
          trigger_word: 'test-trigger',
          model_url: 'org/model:version',
        },
      }
    ) as TestContext

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é next, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ middleware
    next = jest.fn()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–æ–∫–æ–≤
    mockedIsRussian.mockReturnValue(true)
    mockGetInvoiceId.mockResolvedValue('http://mock-robokassa-url.com')
    mockGetBotNameByToken.mockReturnValue({ bot_name: 'test_bot' })
    mockSetPayments.mockResolvedValue(undefined)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç handleSelectRubAmount –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mockedHandleSelectRubAmount.mockImplementation(async ({ ctx, isRu }) => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
      const inlineKeyboardRows = rubTopUpOptions.map(option => [
        Markup.button.callback(
          `üí∞ ${option.amountRub} ‚ÇΩ (~${option.stars}‚≠êÔ∏è)`,
          `top_up_rub_${option.amountRub}`
        ),
      ])

      await ctx.reply(
        isRu
          ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:'
          : 'Choose the top-up amount in rubles:',
        { reply_markup: { inline_keyboard: inlineKeyboardRows } }
      )
      return Promise.resolve()
    })
  })

  // –¢–µ—Å—Ç –Ω–∞ enter handler —Å—Ü–µ–Ω—ã
  it('should call handleSelectRubAmount when entering the scene', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
    await mockRublePaymentScene.enter(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ handleSelectRubAmount –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(mockedHandleSelectRubAmount).toHaveBeenCalledTimes(1)
    expect(mockedHandleSelectRubAmount).toHaveBeenCalledWith(
      expect.objectContaining({
        ctx,
        isRu: true,
      })
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    expect(ctx.reply).toHaveBeenCalled()
  })

  // –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
  it('should handle errors in scene enter handler', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ handleSelectRubAmount –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É
    mockedHandleSelectRubAmount.mockImplementation(() => {
      throw new Error('Test error')
    })

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
    await mockRublePaymentScene.enter(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    expect(logger.error).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(ctx.reply).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  // –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
  it('should process top_up_rub action correctly', async () => {
    // –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    const amountRub = 500 // –í—ã–±–∏—Ä–∞–µ–º —Å—É–º–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç callback_query —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º match
    ctx.match = [`top_up_rub_${amountRub}`, `${amountRub}`]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ rubTopUpOptions
    // –≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã
    const selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)
    if (!selectedOption) {
      throw new Error(
        `–¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ ${amountRub} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ rubTopUpOptions`
      )
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    await mockRublePaymentScene.topUpRubAction(ctx, amountRub)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answerCbQuery
    expect(ctx.answerCbQuery).toHaveBeenCalled()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    expect(mockSetPayments).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    const callArgs = mockSetPayments.mock.calls[0][0]
    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    expect(callArgs.telegram_id).toBeTruthy()
    expect(callArgs.OutSum).toBe('500') // –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞
    expect(callArgs.currency).toBe('RUB')
    expect(callArgs.status).toBe('PENDING')
    expect(callArgs.payment_method).toBe('Robokassa')
    expect(callArgs.subscription).toBe('stars')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    expect(ctx.reply).toHaveBeenCalledWith(
      expect.stringContaining('‚úÖ'),
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          inline_keyboard: expect.arrayContaining([
            expect.arrayContaining([
              expect.objectContaining({
                text: expect.stringContaining('500'),
                url: 'http://mock-robokassa-url.com',
              }),
            ]),
          ]),
        }),
        parse_mode: 'HTML',
      })
    )
  })

  // –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—É–º–º—ã (–Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞)
  it('should handle invalid amount in top_up_rub action', async () => {
    // –í—ã–±–∏—Ä–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ rubTopUpOptions
    const invalidAmount = 999999

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    await mockRublePaymentScene.topUpRubAction(ctx, invalidAmount)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    expect(logger.error).toHaveBeenCalledWith(
      expect.stringContaining('Invalid top-up option selected'),
      expect.any(Object)
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ stringContaining –±–µ–∑ undefined
    expect(ctx.reply).toHaveBeenCalledWith(
      expect.stringContaining('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  // –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
  it('should handle error when saving payment', async () => {
    const amountRub = 500 // –í—ã–±–∏—Ä–∞–µ–º —Å—É–º–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ rubTopUpOptions
    const selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)
    if (!selectedOption) {
      throw new Error(
        `–¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ ${amountRub} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ rubTopUpOptions`
      )
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ setPayments –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É
    mockSetPayments.mockRejectedValue(new Error('Database error'))

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    await mockRublePaymentScene.topUpRubAction(ctx, amountRub)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç –≤—ã–∑–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ —Å–ª–æ–∂–Ω–æ
    expect(logger.error).toHaveBeenCalled()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    expect(ctx.reply).toHaveBeenCalledWith(
      expect.stringContaining('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Robokassa')
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  // –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  it('should handle unexpected messages', async () => {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ message
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const ctxWithMessage = makeMockContext(
      {
        update_id: 1,
        message: {
          message_id: 123,
          text: '—Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          date: Date.now(),
          chat: {
            id: 1,
            type: 'private',
            first_name: 'Test',
            username: 'testuser',
          },
          from: {
            id: 1,
            is_bot: false,
            first_name: 'Test',
            username: 'testuser',
            language_code: 'ru',
          },
        },
      },
      {
        balance: 500,
        targetUserId: '12345',
        username: 'testuser',
        userModel: {
          model_name: 'test-model',
          trigger_word: 'test-trigger',
          model_url: 'org/model:version',
        },
      }
    ) as TestContext

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    await mockRublePaymentScene.handleMessage(ctxWithMessage)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
    expect(logger.warn).toHaveBeenCalledWith(
      expect.stringContaining('Received unexpected message'),
      expect.objectContaining({
        message_text: '—Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      })
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ stringContaining –±–µ–∑ undefined
    expect(ctxWithMessage.reply).toHaveBeenCalledWith(
      expect.stringContaining('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    )
  })
})
