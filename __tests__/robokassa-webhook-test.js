/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Robokassa –≤–µ–±—Ö—É–∫–æ–≤
 * –ó–∞–ø—É—Å–∫–∞—Ç—å: node __tests__/robokassa-webhook-test.js
 */

const axios = require('axios')
const crypto = require('crypto')

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  // URL –≤–∞—à–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
  webhookUrl:
    'https://999-multibots-telegraf-u14194.vm.elestio.app/payment-success',
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
  testData: {
    OutSum: '1110.00', // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    InvId: Math.floor(Math.random() * 1000000).toString(), // –°–ª—É—á–∞–π–Ω—ã–π ID –∏–Ω–≤–æ–π—Å–∞
    SignatureValue: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    shp_botname: 'neuro_blogger_bot', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
  },
  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ‚Ññ2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
  password2: process.env.ROBOKASSA_PASSWORD_2 || 'test_password_2',
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
  delay: 3000,
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Robokassa
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} password - –ü–∞—Ä–æ–ª—å ‚Ññ2 Robokassa
 * @returns {string} - MD5 —Ö–µ—à –ø–æ–¥–ø–∏—Å–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
 */
function calculateSignature(params, password) {
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: OutSum:InvId:Password2
  const signatureString = `${params.OutSum}:${params.InvId}:${password}`

  // –î–æ–±–∞–≤–ª—è–µ–º shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const shpParams = Object.keys(params)
    .filter(key => key.startsWith('shp_'))
    .sort()

  const shpString =
    shpParams.length > 0
      ? `:${shpParams.map(key => `${key}=${params[key]}`).join(':')}`
      : ''

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
  const finalString = signatureString + shpString

  // –í—ã—á–∏—Å–ª—è–µ–º MD5 —Ö–µ—à
  return crypto
    .createHash('md5')
    .update(finalString)
    .digest('hex')
    .toUpperCase()
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 */
async function testWebhook(name, params) {
  console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`)
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', params)

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
    console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${config.webhookUrl}`)
    const response = await axios.post(config.webhookUrl, params)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`)
    console.log(`üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.data}`)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if (
      response.status === 200 &&
      response.data.includes(`OK${params.InvId}`)
    ) {
      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—É—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    }
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:')
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
      console.error(`üìä –°—Ç–∞—Ç—É—Å: ${error.response.status}`)
      console.error(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`)
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      console.error(
        'üìä –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL.'
      )
    } else {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`)
    }
  }
}

/**
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É
 * @param {number} ms - –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */
async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Robokassa webhook')
  console.log(`üîó URL –≤–µ–±—Ö—É–∫–∞: ${config.webhookUrl}`)

  // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
  const validParams = { ...config.testData }
  validParams.SignatureValue = calculateSignature(validParams, config.password2)
  await testWebhook('–í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å', validParams)

  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await delay(config.delay)

  // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
  const noSignatureParams = { ...config.testData }
  delete noSignatureParams.SignatureValue
  await testWebhook('–ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏', noSignatureParams)

  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await delay(config.delay)

  // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
  const invalidSignatureParams = { ...config.testData }
  invalidSignatureParams.SignatureValue = 'INVALID_SIGNATURE_12345'
  await testWebhook('–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é', invalidSignatureParams)

  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await delay(config.delay)

  // –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  await testWebhook('–ó–∞–ø—Ä–æ—Å –±–µ–∑ InvId', {
    OutSum: config.testData.OutSum,
    SignatureValue: calculateSignature(
      { OutSum: config.testData.OutSum },
      config.password2
    ),
  })

  console.log('\nüèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error)
