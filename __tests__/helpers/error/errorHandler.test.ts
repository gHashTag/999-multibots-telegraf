import { Telegraf, Telegram } from 'telegraf'
import { jest } from '@jest/globals'
import {
  setupErrorHandler,
  clearErrorHandlerTimers,
} from '@/helpers/error/errorHandler'
import { MyContext } from '@/interfaces'

// –ú–æ–∫–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è errorHandler
jest.mock('@/utils/logger', () => ({
  logger: {
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
  },
}))

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –ª–æ–≥–≥–µ—Ä –ø–æ—Å–ª–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
import * as loggerModule from '@/utils/logger'

describe('errorHandler', () => {
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–∫ –ª–æ–≥–≥–µ—Ä–∞
  const mockedLogger = loggerModule.logger as jest.Mocked<
    typeof loggerModule.logger
  >

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –º–µ—Ç–æ–¥–æ–º catch
  let catchCb: any
  const mockBot = {
    telegram: {
      sendMessage: jest.fn().mockReturnValue(Promise.resolve({})),
    } as any,
    catch: jest.fn().mockImplementation(cb => {
      catchCb = cb
      return mockBot
    }),
  } as unknown as Telegraf<MyContext>

  beforeEach(() => {
    jest.clearAllMocks()
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    setupErrorHandler(mockBot)
  })

  afterAll(() => {
    clearErrorHandlerTimers()
  })

  test('—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ catch', () => {
    expect(mockBot.catch).toHaveBeenCalled()
    expect(typeof catchCb).toBe('function')
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)', async () => {
    const err = {
      message: '401: Unauthorized',
      on: { method: 'sendMessage' },
      code: 401,
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 1 },
      from: { id: 123 },
      chat: { id: 123 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.error).toHaveBeenCalled()
    expect(mockedLogger.error).toHaveBeenCalledWith(
      'üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram API:',
      expect.objectContaining({
        error_type: 'AUTH',
        bot_name: 'testBot',
        error_message: '401: Unauthorized',
        error_code: 401,
      })
    )

    // –¢.–∫. —ç—Ç–æ –æ—à–∏–±–∫–∞ sendMessage, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    expect(ctxSendMessage).not.toHaveBeenCalled()
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)', async () => {
    const err = {
      message: '429: Too Many Requests',
      description: 'retry after 3',
      on: { method: 'getUpdates' },
      code: 429,
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 2 },
      from: { id: 456 },
      chat: { id: 456 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.warn).toHaveBeenCalled()
    expect(mockedLogger.warn).toHaveBeenCalledWith(
      '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API:',
      expect.objectContaining({
        error_type: 'RATE_LIMIT',
        bot_name: 'testBot',
        error_message: '429: Too Many Requests',
        error_code: 429,
      })
    )

    // –î–ª—è –æ—à–∏–±–æ–∫ rate limit –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(ctxSendMessage).not.toHaveBeenCalled()
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ (403)', async () => {
    const err = {
      message: '403: Forbidden',
      description: 'bot was blocked by the user',
      on: { method: 'sendMessage' },
      code: 403,
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 3 },
      from: { id: 789 },
      chat: { id: 789 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.warn).toHaveBeenCalled()
    expect(mockedLogger.warn).toHaveBeenCalledWith(
      'üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:',
      expect.objectContaining({
        error_type: 'BLOCKED',
        bot_name: 'testBot',
        error_message: '403: Forbidden',
        error_code: 403,
        description: 'bot was blocked by the user',
      })
    )

    // –î–ª—è –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏ –Ω–µ –º–æ–∂–µ–º)
    expect(ctxSendMessage).not.toHaveBeenCalled()
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (400)', async () => {
    const err = {
      message: '400: Bad Request',
      description: 'message to edit not found',
      on: { method: 'editMessageText' },
      code: 400,
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 4 },
      from: { id: 101 },
      chat: { id: 101 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.debug).toHaveBeenCalled()
    expect(mockedLogger.debug).toHaveBeenCalledWith(
      'üìù –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:',
      expect.objectContaining({
        error_type: 'INVALID_MESSAGE',
        bot_name: 'testBot',
        error_message: '400: Bad Request',
        error_code: 400,
      })
    )

    // –î–ª—è –æ—à–∏–±–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(ctxSendMessage).not.toHaveBeenCalled()
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', async () => {
    const err = {
      message: 'Unknown error',
      stack: 'Error stack trace',
      on: { method: 'answerCallbackQuery' },
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 6 },
      from: { id: 303 },
      chat: { id: 303 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.error).toHaveBeenCalled()
    expect(mockedLogger.error).toHaveBeenCalledWith(
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API:',
      expect.objectContaining({
        error_type: 'UNKNOWN',
        bot_name: 'testBot',
        error_message: 'Unknown error',
        stack: 'Error stack trace',
      })
    )

    // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(ctxSendMessage).toHaveBeenCalledWith(
      303, // chat.id
      expect.stringContaining('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞')
    )
  })

  test('–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ sendMessage', async () => {
    const err = {
      message: 'Unknown telegram error',
      on: { method: 'sendMessage' },
    }

    const ctxSendMessage = jest.fn().mockReturnValue(Promise.resolve({}))

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 7 },
      from: { id: 404 },
      chat: { id: 404 },
    }

    await catchCb(err, ctx)

    expect(mockedLogger.error).toHaveBeenCalled()

    // –î–ª—è –æ—à–∏–±–æ–∫ sendMessage –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expect(ctxSendMessage).not.toHaveBeenCalled()
  })

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', async () => {
    const err = {
      message: 'API error',
      on: { method: 'getChat' },
    }

    const ctxSendMessage = jest.fn().mockImplementation(() => {
      return Promise.reject(new Error('Failed to send message'))
    })

    const ctx = {
      botInfo: { username: 'testBot' },
      telegram: {
        token: 'test_token',
        sendMessage: ctxSendMessage,
      } as any,
      update: { update_id: 8 },
      from: { id: 505 },
      chat: { id: 505 },
    }

    await catchCb(err, ctx)

    // –î–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—à–∏–±–∫—É –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    expect(mockedLogger.error).toHaveBeenCalledWith(
      expect.stringContaining(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
      ),
      expect.objectContaining({
        user_id: 505,
        error: 'Failed to send message',
      })
    )
  })
})
