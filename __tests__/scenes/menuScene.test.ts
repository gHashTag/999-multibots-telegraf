import { describe, it, expect, vi, beforeEach } from 'vitest'
import { Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { ModeEnum } from '@/interfaces/modes'

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏
vi.mock('@/core/supabase/getUserDetailsSubscription', () => ({
  getUserDetailsSubscription: vi.fn().mockResolvedValue({
    stars: 100,
    subscriptionType: SubscriptionType.NEUROBASE,
    isSubscriptionActive: true,
    isExist: true,
    subscriptionStartDate: '2023-01-01T00:00:00Z',
  }),
}))

vi.mock('@/core/supabase/getTranslation', () => ({
  getTranslation: vi.fn().mockResolvedValue({
    translation: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é',
    url: 'http://example.com/test.jpg',
    buttons: [],
  }),
}))

vi.mock('@/menu/mainMenu', () => ({
  mainMenu: vi.fn().mockResolvedValue(
    Markup.keyboard([
      ['ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ', 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ'],
      ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
      ['üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', '‚ùì –°–ø—Ä–∞–≤–∫–∞', 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
    ]).resize()
  ),
  levels: {
    104: {
      title_ru: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      title_en: 'üè† Main menu',
    },
    106: {
      title_ru: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
      title_en: '‚ùì Help',
    },
    103: {
      title_ru: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      title_en: 'üí¨ Support',
    },
    102: {
      title_ru: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
      title_en: 'üë• Invite a friend',
    },
    101: {
      title_ru: 'üí∞ –ë–∞–ª–∞–Ω—Å',
      title_en: 'üí∞ Balance',
    },
    100: {
      title_ru: 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
      title_en: 'üíé Top up balance',
    },
    105: {
      title_ru: 'üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
      title_en: 'üí´ Subscribe',
    },
  },
}))

vi.mock('@/helpers/language', () => ({
  isRussian: vi.fn().mockReturnValue(true),
}))

vi.mock('@/commands/handleTechSupport', () => ({
  handleTechSupport: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/handlers/handleMenu', () => ({
  handleMenu: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/handlers/handleVideoRestart', () => ({
  handleRestartVideoGeneration: vi.fn().mockResolvedValue(undefined),
}))

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import { getUserDetailsSubscription } from '@/core/supabase/getUserDetailsSubscription'
import { getTranslation } from '@/core/supabase/getTranslation'
import { mainMenu } from '@/menu/mainMenu'
import { isRussian } from '@/helpers/language'
import { handleTechSupport } from '@/commands/handleTechSupport'
import { handleMenu } from '@/handlers/handleMenu'
import { handleRestartVideoGeneration } from '@/handlers/handleVideoRestart'

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const createMockContext = (languageCode: string = 'ru'): MyContext => {
  return {
    from: {
      id: 123456789,
      is_bot: false,
      first_name: 'Test User',
      language_code: languageCode,
    },
    botInfo: {
      username: 'test_bot',
    },
    scene: {
      enter: vi.fn(),
      reenter: vi.fn(),
      leave: vi.fn(),
    },
    wizard: {
      next: vi.fn(),
      cursor: 0,
      state: {},
    },
    reply: vi.fn().mockResolvedValue({}),
    update: {},
    telegram: {
      token: 'test_token',
    },
    session: {},
    answerCbQuery: vi.fn().mockResolvedValue(true),
  } as unknown as MyContext
}

// –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ menuScene
describe('menuScene components', () => {
  let ctx: MyContext

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    vi.clearAllMocks()

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    ctx = createMockContext()
  })

  it('should call getUserDetailsSubscription with correct ID', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    await getUserDetailsSubscription('123456789')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(getUserDetailsSubscription).toHaveBeenCalledWith('123456789')
  })

  it('should call getTranslation with correct parameters', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    await getTranslation({
      key: 'menu',
      ctx,
      bot_name: 'test_bot',
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(getTranslation).toHaveBeenCalledWith({
      key: 'menu',
      ctx,
      bot_name: 'test_bot',
    })
  })

  it('should call mainMenu with correct parameters', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    await mainMenu({
      isRu: true,
      subscription: SubscriptionType.NEUROBASE,
      ctx,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(mainMenu).toHaveBeenCalledWith({
      isRu: true,
      subscription: SubscriptionType.NEUROBASE,
      ctx,
    })
  })

  it('should determine Russian language correctly', () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    const result = isRussian(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBe(true)
  })

  it('should call handleTechSupport correctly', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await handleTechSupport(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(handleTechSupport).toHaveBeenCalledWith(ctx)
  })

  it('should call handleMenu correctly', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é
    await handleMenu(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(handleMenu).toHaveBeenCalledWith(ctx)
  })

  it('should call handleRestartVideoGeneration correctly', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    await handleRestartVideoGeneration(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(handleRestartVideoGeneration).toHaveBeenCalledWith(ctx)
  })
})
