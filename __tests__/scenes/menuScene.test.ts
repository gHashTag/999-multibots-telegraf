import { describe, it, expect, vi, beforeEach } from 'vitest'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ telegraf –Ω–∞–ø—Ä—è–º—É—é
import type { Message, CallbackQuery, Update } from 'telegraf/types'
import type { MyContext } from '@/interfaces'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import type { ModeEnum } from '@/interfaces/modes'

// –ú–æ–∫ –¥–ª—è path (–æ–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç)
vi.mock('path', () => {
  return {
    join: vi.fn().mockImplementation((...args) => args.join('/')),
    resolve: vi.fn().mockImplementation((...args) => args.join('/')),
    dirname: vi.fn().mockImplementation((path) => path.split('/').slice(0, -1).join('/')),
    basename: vi.fn().mockImplementation((path) => path.split('/').pop()),
    default: {
      join: vi.fn().mockImplementation((...args) => args.join('/')),
      resolve: vi.fn().mockImplementation((...args) => args.join('/')),
      dirname: vi.fn().mockImplementation((path) => path.split('/').slice(0, -1).join('/')),
      basename: vi.fn().mockImplementation((path) => path.split('/').pop()),
    }
  }
})

// –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import { getUserDetailsSubscription } from '@/core/supabase/getUserDetailsSubscription'
import { getTranslation } from '@/core/supabase/getTranslation'
import { mainMenu, levels } from '@/menu/mainMenu'
import { isRussian } from '@/helpers/language'
import { handleTechSupport } from '@/commands/handleTechSupport'
import { handleMenu } from '@/handlers/handleMenu'
import { handleRestartVideoGeneration } from '@/handlers/handleVideoRestart'
import { sendReplyWithKeyboard } from '@/scenes/menuScene/sendReplyWithKeyboard'
import { logger } from '@/utils'
import { sendGenericErrorMessage } from '@/menu'

// –ú–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è–≤–∏—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
vi.mock('telegraf', () => {
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–ª–∞—Å—Å–∞ Telegraf
  class TelegrafMock {
    use = vi.fn().mockReturnThis();
    launch = vi.fn().mockResolvedValue(undefined);
    telegram = {
      sendMessage: vi.fn().mockResolvedValue({}),
      sendPhoto: vi.fn().mockResolvedValue({}),
      sendDocument: vi.fn().mockResolvedValue({}),
      sendMediaGroup: vi.fn().mockResolvedValue({}),
      setChatMenuButton: vi.fn().mockResolvedValue({}),
      setMyCommands: vi.fn().mockResolvedValue({}),
    };
    start = vi.fn().mockReturnThis();
    command = vi.fn().mockReturnThis();
    action = vi.fn().mockReturnThis();
    hears = vi.fn().mockReturnThis();
    on = vi.fn().mockReturnThis();
    stop = vi.fn().mockResolvedValue(undefined);
  }

  return {
    Telegraf: TelegrafMock,
    Markup: {
      keyboard: vi.fn().mockImplementation((buttons) => ({
        resize: vi.fn().mockReturnThis(),
        oneTime: vi.fn().mockReturnThis(),
        reply_markup: { 
          keyboard: buttons || [],
          resize_keyboard: true
        }
      })),
      inlineKeyboard: vi.fn().mockImplementation((buttons) => ({
        reply_markup: { 
          inline_keyboard: buttons || []
        }
      })),
    },
    Scenes: {
      WizardScene: vi.fn(),
      Stage: vi.fn(),
    },
  }
})

vi.mock('@/core/supabase/getUserDetailsSubscription', () => ({
  getUserDetailsSubscription: vi.fn().mockResolvedValue({
    stars: 100,
    subscriptionType: SubscriptionType.NEUROBASE,
    isSubscriptionActive: true,
    isExist: true,
    subscriptionStartDate: '2023-01-01T00:00:00Z',
  }),
}))

vi.mock('@/core/supabase/getTranslation', () => ({
  getTranslation: vi.fn().mockResolvedValue({
    translation: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é',
    url: 'http://example.com/test.jpg',
    buttons: [],
  }),
}))

vi.mock('@/menu/mainMenu', () => ({
  mainMenu: vi.fn().mockResolvedValue({
    reply_markup: { 
      keyboard: [
        ['ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ', 'üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ'],
        ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', '‚ùì –°–ø—Ä–∞–≤–∫–∞', 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
      ],
      resize_keyboard: true
    }
  }),
  levels: {
    104: {
      title_ru: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      title_en: 'üè† Main menu',
    },
    106: {
      title_ru: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
      title_en: '‚ùì Help',
    },
    103: {
      title_ru: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      title_en: 'üí¨ Support',
    },
    102: {
      title_ru: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
      title_en: 'üë• Invite a friend',
    },
    101: {
      title_ru: 'üí∞ –ë–∞–ª–∞–Ω—Å',
      title_en: 'üí∞ Balance',
    },
    100: {
      title_ru: 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
      title_en: 'üíé Top up balance',
    },
    105: {
      title_ru: 'üí´ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
      title_en: 'üí´ Subscribe',
    },
  },
}))

vi.mock('@/helpers/language', () => ({
  isRussian: vi.fn().mockReturnValue(true),
}))

vi.mock('@/commands/handleTechSupport', () => ({
  handleTechSupport: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/handlers/handleMenu', () => ({
  handleMenu: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/handlers/handleVideoRestart', () => ({
  handleRestartVideoGeneration: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/menu', () => ({
  sendGenericErrorMessage: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/scenes/menuScene/sendReplyWithKeyboard', () => ({
  sendReplyWithKeyboard: vi.fn().mockResolvedValue(undefined),
}))

vi.mock('@/utils', () => ({
  logger: {
    info: vi.fn(),
    warn: vi.fn(),
    error: vi.fn(),
  },
}))

// –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º menuScene –¥–ª—è —Ç–µ—Å—Ç–∞
import { menuScene } from '@/scenes/menuScene'

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const createMockContext = (languageCode: string = 'ru'): MyContext => {
  return {
    from: {
      id: 123456789,
      is_bot: false,
      first_name: 'Test User',
      language_code: languageCode,
    },
    botInfo: {
      username: 'test_bot',
    },
    scene: {
      enter: vi.fn(),
      reenter: vi.fn(),
      leave: vi.fn(),
    },
    wizard: {
      next: vi.fn(),
      cursor: 0,
      state: {},
    },
    reply: vi.fn().mockResolvedValue({}),
    update: {},
    telegram: {
      token: 'test_token',
    },
    session: {},
    answerCbQuery: vi.fn().mockResolvedValue(true),
  } as unknown as MyContext
}

// –¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ menuScene
describe('menuScene components', () => {
  let ctx: MyContext

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    vi.clearAllMocks()

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    ctx = createMockContext()
  })

  describe('getUserDetailsSubscription', () => {
    it('should return subscription details', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const result = await getUserDetailsSubscription('123456789')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(getUserDetailsSubscription).toHaveBeenCalledWith('123456789')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      expect(result).toEqual({
        stars: 100,
        subscriptionType: SubscriptionType.NEUROBASE,
        isSubscriptionActive: true,
        isExist: true,
        subscriptionStartDate: '2023-01-01T00:00:00Z',
      })
    })
  })

  describe('getTranslation', () => {
    it('should return translation data', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const result = await getTranslation({
        key: 'menu',
        ctx,
        bot_name: 'test_bot',
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(getTranslation).toHaveBeenCalledWith({
        key: 'menu',
        ctx,
        bot_name: 'test_bot',
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      expect(result).toEqual({
        translation: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        url: 'http://example.com/test.jpg',
        buttons: [],
      })
    })
  })

  describe('mainMenu', () => {
    it('should return keyboard markup', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const result = await mainMenu({
        isRu: true,
        subscription: SubscriptionType.NEUROBASE,
        ctx,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(mainMenu).toHaveBeenCalledWith({
        isRu: true,
        subscription: SubscriptionType.NEUROBASE,
        ctx,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      expect(result).toBeDefined()
      expect(result.reply_markup).toBeDefined()
      expect(result.reply_markup.keyboard).toBeDefined()
      expect(result.reply_markup.resize_keyboard).toBe(true)
    })
  })

  describe('isRussian', () => {
    it('should detect Russian language', () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
      const result = isRussian(ctx)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(result).toBe(true)
    })

    it('should detect non-Russian language', () => {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º
      const enCtx = createMockContext('en')

      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      vi.mocked(isRussian).mockReturnValueOnce(false)

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
      const result = isRussian(enCtx)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(result).toBe(false)
    })
  })

  describe('handleTechSupport', () => {
    it('should handle tech support request', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await handleTechSupport(ctx)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(handleTechSupport).toHaveBeenCalledWith(ctx)
    })
  })

  describe('handleMenu', () => {
    it('should handle menu navigation', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é
      await handleMenu(ctx)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(handleMenu).toHaveBeenCalledWith(ctx)
    })
  })

  describe('handleRestartVideoGeneration', () => {
    it('should handle video restart', async () => {
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
      await handleRestartVideoGeneration(ctx)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(handleRestartVideoGeneration).toHaveBeenCalledWith(ctx)
    })
  })

  describe('sendReplyWithKeyboard', () => {
    it('should send message with photo', async () => {
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞
      const mockKeyboard = {
        reply_markup: {
          keyboard: [['–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞']],
          resize_keyboard: true
        }
      };
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
      await sendReplyWithKeyboard(
        ctx,
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        [],
        mockKeyboard,
        'http://example.com/test.jpg'
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(sendReplyWithKeyboard).toHaveBeenCalledWith(
        ctx,
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        [],
        mockKeyboard,
        'http://example.com/test.jpg'
      )
    })
  })

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è flow –≤ menuScene
  describe('menuScene flow integration', () => {
    it('should correctly integrate getUserDetailsSubscription, mainMenu and getTranslation', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userDetails = await getUserDetailsSubscription('123456789')

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const keyboard = await mainMenu({
        isRu: true,
        subscription: userDetails.subscriptionType,
        ctx,
      })

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –º–µ–Ω—é
      const translationData = await getTranslation({
        key: 'menu',
        ctx,
        bot_name: ctx.botInfo?.username,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
      await sendReplyWithKeyboard(
        ctx,
        translationData.translation || 'Fallback text',
        [],
        keyboard,
        translationData.url || null
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
      expect(getUserDetailsSubscription).toHaveBeenCalledWith('123456789')
      expect(mainMenu).toHaveBeenCalledWith({
        isRu: true,
        subscription: SubscriptionType.NEUROBASE,
        ctx,
      })
      expect(getTranslation).toHaveBeenCalledWith({
        key: 'menu',
        ctx,
        bot_name: 'test_bot',
      })
      expect(sendReplyWithKeyboard).toHaveBeenCalledWith(
        ctx,
        '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        [],
        expect.anything(),
        'http://example.com/test.jpg'
      )
    })
  })
})
