/**
 * Tests for balanceScene
 */
import { balanceScene } from '../../src/scenes/balanceScene'
import makeMockContext from '../utils/makeMockContext'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import { Composer } from 'telegraf'

// Mock getUserBalance from Supabase
jest.mock('../../src/core/supabase', () => ({
  getUserBalance: jest.fn(),
}))
import { getUserBalance } from '../../src/core/supabase'

describe('balanceScene', () => {
  let ctx: MyContext
  // –°–æ–∑–¥–∞–µ–º next-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è middleware
  const next = jest.fn()

  beforeEach(() => {
    jest.clearAllMocks()
    next.mockClear()
  })

  it('replies with balance in Russian and enters menuScene', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —è–∑—ã–∫–æ–º ru
    ctx = makeMockContext()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è getUserBalance
    ;(getUserBalance as jest.Mock).mockResolvedValueOnce(456)

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ wizard-—Å—Ü–µ–Ω—ã
    const step = Composer.unwrap(balanceScene.steps[0])

    // –í—ã–∑—ã–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ next
    await step(ctx, next)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getUserBalance –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(getUserBalance).toHaveBeenCalledWith('1')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    expect(ctx.reply).toHaveBeenCalledWith('üí∞‚ú® <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> 456 ‚≠êÔ∏è', {
      parse_mode: 'HTML',
    })
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MainMenu)
  })

  it('replies with balance in English and enters menuScene', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —è–∑—ã–∫–æ–º en
    ctx = makeMockContext({
      message: {
        from: { id: 1, language_code: 'en', is_bot: false, first_name: 'Test' },
      }
    })
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è getUserBalance
    ;(getUserBalance as jest.Mock).mockResolvedValueOnce(789)

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ wizard-—Å—Ü–µ–Ω—ã
    const step = Composer.unwrap(balanceScene.steps[0])

    // –í—ã–∑—ã–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ next
    await step(ctx, next)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getUserBalance –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(getUserBalance).toHaveBeenCalledWith('1')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    expect(ctx.reply).toHaveBeenCalledWith(
      'üí∞‚ú® <b>Your balance:</b> 789 ‚≠êÔ∏è',
      { parse_mode: 'HTML' }
    )
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MainMenu)
  })

  it('throws error when getUserBalance rejects', async () => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx = makeMockContext()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è getUserBalance, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç promise
    const error = new Error('fetch failed')
    ;(getUserBalance as jest.Mock).mockRejectedValueOnce(error)

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ wizard-—Å—Ü–µ–Ω—ã
    const step = Composer.unwrap(balanceScene.steps[0])

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    await expect(step(ctx, next)).rejects.toThrow('fetch failed')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getUserBalance –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(getUserBalance).toHaveBeenCalledWith('1')
  })
})
