import { describe, it, expect, vi, beforeEach, type Mock } from 'vitest'
import {
  processStartCommand,
  type ProcessStartData,
  type ProcessStartDependencies,
} from '../../../src/scenes/startScene/index'
import {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–∫–∏
  mockReply,
  mockReplyWithPhoto,
  mockSendMessage,
  mockGetUserDetailsSubscription,
  mockCreateUser,
  mockGetReferalsCountAndUserData,
  mockGetTranslation,
  mockIsRussian,
  mockGetPhotoUrl,
} from '../../setup'
import type { UserType } from '@/interfaces'
import { logger } from '../../../src/utils/logger'

describe('processStartCommand', () => {
  let dependencies: ProcessStartDependencies
  let data: ProcessStartData

  beforeEach(() => {
    vi.clearAllMocks()

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dependencies = {
      getUserDetailsSubscription: mockGetUserDetailsSubscription,
      createUser: mockCreateUser,
      getReferalsCountAndUserData: mockGetReferalsCountAndUserData,
      getTranslation: mockGetTranslation,
      isRussian: mockIsRussian,
      getPhotoUrl: mockGetPhotoUrl,
      reply: mockReply,
      replyWithPhoto: mockReplyWithPhoto,
      sendMessage: mockSendMessage,
      logger: logger,
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data = {
      telegramId: '12345',
      username: 'testuser',
      firstName: 'Test',
      lastName: 'User',
      isBot: false,
      languageCode: 'en',
      chatId: 12345,
      inviteCode: null,
      botName: 'test_bot_username',
      photoUrl: null,
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    mockGetUserDetailsSubscription.mockResolvedValue({
      isExist: false, // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      stars: 0,
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    })
    mockCreateUser.mockResolvedValue([true, null]) // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    mockGetReferalsCountAndUserData.mockResolvedValue({
      count: 0,
      userData: null,
    }) // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mockGetTranslation.mockResolvedValue({
      translation: 'Mock Welcome Text',
      url: null,
    })
    mockIsRussian.mockReturnValue(false)
    mockGetPhotoUrl.mockReturnValue(null)
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–æ–∫–∏ reply/replyWithPhoto —Å–±—Ä–æ—à–µ–Ω—ã
    mockReply.mockClear()
    mockReplyWithPhoto.mockClear()
  })

  it('should handle a new user without referral code', async () => {
    // Arrange (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ beforeEach)

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(true)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ getUserDetailsSubscription
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith(data.telegramId)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ createUser
    expect(mockCreateUser).toHaveBeenCalledTimes(1)
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({
        telegram_id: data.telegramId,
        username: data.username,
        inviter: null, // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      }),
      null
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(mockReply).toHaveBeenCalledWith(
      expect.stringContaining('Avatar created successfully')
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ getTranslation –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    expect(mockGetTranslation).toHaveBeenCalledWith({
      key: 'start',
      bot_name: data.botName,
      language_code: data.languageCode,
    })
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    expect(mockReply).toHaveBeenCalledWith(
      'Mock Welcome Text',
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–∑–æ–≤–∞ replyWithPhoto (—Ç.–∫. url=null)
    expect(mockReplyWithPhoto).not.toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–∑–æ–≤–∞ sendMessage –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    expect(mockSendMessage).not.toHaveBeenCalledWith(
      expect.any(String),
      expect.stringContaining('registered via your link')
    )
  })

  it('should handle a new user WITH referral code', async () => {
    // Arrange
    const inviteCode = 'ref123'
    const referrerTelegramId = '98765'
    const referrerUsername = 'referrerUser'
    const initialReferralCount = 5
    data.inviteCode = inviteCode // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    mockGetReferalsCountAndUserData.mockResolvedValue({
      count: initialReferralCount + 1,
      userData: {
        id: 123n,
        created_at: new Date(),
        user_id: referrerTelegramId,
        telegram_id: BigInt(referrerTelegramId),
        username: referrerUsername,
        // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è UserType –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      } as UserType,
    })

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(true)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ getUserDetailsSubscription
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith(data.telegramId)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ getReferalsCountAndUserData
    expect(mockGetReferalsCountAndUserData).toHaveBeenCalledTimes(1)
    expect(mockGetReferalsCountAndUserData).toHaveBeenCalledWith(inviteCode)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    expect(mockSendMessage).toHaveBeenCalledWith(
      inviteCode, // –í –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è inviteCode –∫–∞–∫ chatId —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      expect.stringContaining(`@${data.username} registered via your link`)
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ createUser —Å inviter
    expect(mockCreateUser).toHaveBeenCalledTimes(1)
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({
        telegram_id: data.telegramId,
        inviter: referrerTelegramId, // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      }),
      null
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expect(mockReply).toHaveBeenCalledWith(
      expect.stringContaining('Avatar created successfully')
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    expect(mockGetTranslation).toHaveBeenCalledWith({
      key: 'start',
      bot_name: data.botName,
      language_code: data.languageCode,
    })
    expect(mockReply).toHaveBeenCalledWith(
      'Mock Welcome Text',
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
  })

  it('should handle an existing user', async () => {
    // Arrange
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mockGetUserDetailsSubscription.mockResolvedValue({
      isExist: true,
      stars: 100, // –ü—Ä–∏–º–µ—Ä –±–∞–ª–∞–Ω—Å–∞
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    })

    // –ú–æ–∫–∏—Ä—É–µ–º process.env.SUBSCRIBE_CHANNEL_ID –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const adminChannel = '@admin_test_channel'
    vi.stubGlobal('process', {
      ...process, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ process
      env: {
        ...process.env, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        SUBSCRIBE_CHANNEL_ID: adminChannel,
      },
    })

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(true)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ getUserDetailsSubscription
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith(data.telegramId)
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–≤–∞–ª—Å—è
    expect(mockCreateUser).not.toHaveBeenCalled()
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ù–ï –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å
    expect(mockGetReferalsCountAndUserData).not.toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    expect(mockSendMessage).toHaveBeenCalledWith(
      adminChannel,
      // –£—Ç–æ—á–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      expect.stringContaining(
        `üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${data.username} (ID: ${data.telegramId}) –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start)`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ getTranslation –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    expect(mockGetTranslation).toHaveBeenCalledWith({
      key: 'start',
      bot_name: data.botName,
      language_code: data.languageCode,
    })
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    expect(mockReply).toHaveBeenCalledWith(
      'Mock Welcome Text',
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–∑–æ–≤–∞ replyWithPhoto (—Ç.–∫. url=null –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    expect(mockReplyWithPhoto).not.toHaveBeenCalled()

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π process.env
    vi.unstubAllGlobals()
  })

  it('should handle error during getUserDetailsSubscription', async () => {
    // Arrange
    const error = new Error('Database connection failed')
    mockGetUserDetailsSubscription.mockRejectedValue(error)

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(false) // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç false
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith(data.telegramId)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ
    expect(mockReply).toHaveBeenCalledWith(
      expect.stringContaining('internal error occurred') // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    )
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å
    expect(mockCreateUser).not.toHaveBeenCalled()
    expect(mockGetTranslation).not.toHaveBeenCalled()
  })

  it('should handle error during getReferalsCountAndUserData but continue', async () => {
    // Arrange
    const error = new Error('Referral lookup failed')
    data.inviteCode = 'ref123' // –ù—É–∂–µ–Ω –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
    mockGetUserDetailsSubscription.mockResolvedValue({
      isExist: false,
      stars: 0,
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    }) // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    mockGetReferalsCountAndUserData.mockRejectedValue(error) // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    mockCreateUser.mockResolvedValue([true, null]) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ
    mockGetTranslation.mockResolvedValue({
      translation: 'Mock Welcome',
      url: null,
    }) // –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(true) // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    expect(mockGetUserDetailsSubscription).toHaveBeenCalled()
    expect(mockGetReferalsCountAndUserData).toHaveBeenCalledWith(
      data.inviteCode
    )
    expect(mockSendMessage).not.toHaveBeenCalledWith(
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
      data.inviteCode,
      expect.any(String)
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω (–±–µ–∑ inviter)
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({ inviter: null }),
      null
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(mockReply).toHaveBeenCalledWith('Mock Welcome', expect.any(Object))
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
    expect(mockReply).not.toHaveBeenCalledWith(
      expect.stringContaining('error occurred during registration')
    )
  })

  it('should handle error during createUser', async () => {
    // Arrange
    const error = new Error('Failed to insert user')
    mockGetUserDetailsSubscription.mockResolvedValue({
      isExist: false,
      stars: 0,
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    }) // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    mockCreateUser.mockRejectedValue(error) // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(false) // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç false
    expect(mockGetUserDetailsSubscription).toHaveBeenCalled()
    expect(mockCreateUser).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    expect(mockReply).toHaveBeenCalledWith(
      expect.stringContaining('error occurred during registration')
    )
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
    expect(mockGetTranslation).not.toHaveBeenCalledWith({ key: 'start' })
    expect(mockReply).not.toHaveBeenCalledWith(
      'Mock Welcome Text',
      expect.any(Object)
    )
    expect(mockReplyWithPhoto).not.toHaveBeenCalled()
  })

  it('should handle Russian language correctly for a new user with referral', async () => {
    // Arrange
    const inviteCode = 'ref456'
    const referrerTelegramId = '54321'
    const referrerUsername = 'ruReferrer'
    data.inviteCode = inviteCode
    data.languageCode = 'ru' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

    // –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    mockGetUserDetailsSubscription.mockResolvedValue({
      isExist: false,
      stars: 0,
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    })
    mockGetReferalsCountAndUserData.mockResolvedValue({
      count: 1,
      userData: {
        id: 456n,
        created_at: new Date(),
        user_id: referrerTelegramId,
        telegram_id: BigInt(referrerTelegramId),
        username: referrerUsername,
      } as UserType,
    })
    mockCreateUser.mockResolvedValue([true, null])
    mockGetTranslation.mockResolvedValue({
      translation: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!',
      url: null,
    }) // –î–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    mockIsRussian.mockReturnValue(true) // –ú–æ–∫–∏—Ä—É–µ–º isRussian = true

    // Act
    const result = await processStartCommand(data, dependencies)

    // Assert
    expect(result).toBe(true)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ isRussian
    expect(mockIsRussian).toHaveBeenCalledWith(data.languageCode)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    expect(mockSendMessage).toHaveBeenCalledWith(
      inviteCode,
      expect.stringContaining(
        `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${data.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.`
      )
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    expect(mockReply).toHaveBeenCalledWith(
      '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –æ–ø—Ü–∏–π, —Ç.–∫. –≤ –∫–æ–¥–µ –∏—Ö –Ω–µ—Ç
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç getTranslation, –Ω–µ –æ—Ç isRu)
    expect(mockReply).toHaveBeenCalledWith('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!', expect.any(Object))
  })

  // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è:
  // - –°–ª—É—á–∞—è, –∫–æ–≥–¥–∞ getTranslation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
  // - –°–ª—É—á–∞—è, –∫–æ–≥–¥–∞ getReferalsCountAndUserData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
  // - –†—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (isRussian = true)
})
