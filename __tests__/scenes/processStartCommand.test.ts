import { describe, it, expect, vi, beforeEach } from 'vitest'

// --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –∏ —Ç–∏–ø—ã ---
import {
  processStartCommand,
  type ProcessStartData,
  type ProcessStartDependencies,
} from '../../src/scenes/startScene/index'

// --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ú–û–ö–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –∏–∑ setup ---
import {
  mockGetUserDetailsSubscription,
  mockCreateUser,
  mockGetReferalsCountAndUserData,
  mockGetTranslation,
  mockIsRussian,
  mockGetPhotoUrl,
  mockLoggerInfo,
  mockLoggerError,
  mockReply,
  mockReplyWithPhoto,
  mockSendMessage,
} from '../setup'

// --- –ú–æ–∫–∏—Ä—É–µ–º –í–ù–ï–®–ù–ò–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ---
vi.mock('@/core/supabase', () => ({
  getUserDetailsSubscription: mockGetUserDetailsSubscription,
  createUser: mockCreateUser,
  getReferalsCountAndUserData: mockGetReferalsCountAndUserData,
  getTranslation: mockGetTranslation,
}))

vi.mock('@/helpers/language', () => ({
  isRussian: mockIsRussian,
}))

vi.mock('@/handlers/getPhotoUrl', () => ({
  getPhotoUrl: mockGetPhotoUrl,
}))

vi.mock('@/utils/logger', () => ({
  logger: {
    info: mockLoggerInfo,
    error: mockLoggerError,
    warn: vi.fn(), // –ú–æ–∫–∞–µ–º warn —Ç–æ–∂–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    debug: vi.fn(),
  },
}))

// --- –¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ processStartCommand ---
describe('processStartCommand logic', () => {
  let mockDependencies: ProcessStartDependencies

  beforeEach(() => {
    vi.clearAllMocks()

    process.env.SUBSCRIBE_CHANNEL_ID = 'mock_admin_channel_id'

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –º–æ–∫–∞–º–∏
    mockDependencies = {
      getUserDetailsSubscription: mockGetUserDetailsSubscription,
      createUser: mockCreateUser,
      getReferalsCountAndUserData: mockGetReferalsCountAndUserData,
      getTranslation: mockGetTranslation,
      isRussian: mockIsRussian,
      getPhotoUrl: mockGetPhotoUrl,
      reply: mockReply,
      replyWithPhoto: mockReplyWithPhoto,
      sendMessage: mockSendMessage,
      logger: {
        info: mockLoggerInfo,
        error: mockLoggerError,
      } as any, // –ò—Å–ø–æ–ª—å–∑—É–µ–º as any –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–æ–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫–æ–≤
    mockGetTranslation.mockResolvedValue({
      translation: 'Mock Welcome',
      url: null,
    })
    mockIsRussian.mockReturnValue(false) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ —Ä—É—Å—Å–∫–∏–π
    mockCreateUser.mockResolvedValue([true, null]) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    mockGetReferalsCountAndUserData.mockResolvedValue({
      count: 0,
      userData: null,
    }) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç
    mockGetUserDetailsSubscription.mockResolvedValue({
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      isExist: false,
      stars: 0,
      subscriptionType: null,
      isSubscriptionActive: false,
      subscriptionStartDate: null,
    })
    mockSendMessage.mockResolvedValue({}) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞
  })

  it('should handle a new user correctly (no referral, with tutorial link)', async () => {
    // 1. Arrange
    const inputData: ProcessStartData = {
      telegramId: '12345',
      username: 'testuser',
      firstName: 'Test',
      languageCode: 'en',
      inviteCode: null,
      botName: 'test_bot_username',
      photoUrl: 'mock_photo_url',
      chatId: 12345,
    }
    const mockTranslationResult = { translation: 'Welcome!', url: null } // –ù–µ—Ç URL —Ñ–æ—Ç–æ
    const tutorialUrlMock = 'http://tutorial.url'
    process.env.TUTORIAL_URL_test_bot_username = tutorialUrlMock // –ú–æ–∫–∞–µ–º URL —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ env

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    mockGetUserDetailsSubscription.mockResolvedValue({ isExist: false } as any)
    mockGetTranslation.mockResolvedValue(mockTranslationResult)
    mockIsRussian.mockReturnValue(false)

    // 2. Act
    const result = await processStartCommand(inputData, mockDependencies)

    // 3. Assert
    expect(result).toBe(true)
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('12345')
    expect(mockGetReferalsCountAndUserData).not.toHaveBeenCalled()
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({ telegram_id: '12345', inviter: null }),
      null
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã reply (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Ç–µ–∫—Å—Ç —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º)
    expect(mockDependencies.reply).toHaveBeenCalledTimes(2)
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      1,
      '‚úÖ Avatar created successfully! Welcome!'
    )
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      2,
      expect.stringContaining('Watch this [tutorial video]'),
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
    expect(mockDependencies.replyWithPhoto).not.toHaveBeenCalled() // –§–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
    expect(mockDependencies.sendMessage).toHaveBeenCalledWith(
      process.env.SUBSCRIBE_CHANNEL_ID,
      expect.stringContaining(
        `[test_bot_username] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @testuser`
      )
    ) // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É

    delete process.env.TUTORIAL_URL_test_bot_username // –ß–∏—Å—Ç–∏–º env
  })

  it('should handle an existing user correctly (with photo and tutorial)', async () => {
    // Arrange
    const inputData: ProcessStartData = {
      telegramId: '54321',
      username: 'existinguser',
      firstName: 'Existing',
      languageCode: 'ru',
      inviteCode: null,
      botName: 'test_bot_username',
      photoUrl: 'existing_photo_url',
      chatId: 54321,
    }
    const mockUserDetailsResult = { isExist: true } as any
    const mockTranslationResult = {
      translation: '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!',
      url: 'photo_url',
    }
    const tutorialUrlMock = 'http://tutorial.ru'
    process.env.TUTORIAL_URL_test_bot_username = tutorialUrlMock

    mockGetUserDetailsSubscription.mockResolvedValue(mockUserDetailsResult)
    mockGetTranslation.mockResolvedValue(mockTranslationResult)
    mockIsRussian.mockReturnValue(true)
    mockSendMessage.mockResolvedValue({}) // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

    // 2. Act
    await processStartCommand(inputData, mockDependencies)

    // 3. Assert
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('54321')
    expect(mockCreateUser).not.toHaveBeenCalled()
    expect(mockGetReferalsCountAndUserData).not.toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
    expect(mockDependencies.sendMessage).toHaveBeenCalledWith(
      process.env.SUBSCRIBE_CHANNEL_ID,
      expect.stringContaining(
        `[test_bot_username] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @existinguser`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    expect(mockDependencies.replyWithPhoto).toHaveBeenCalledWith(
      mockTranslationResult.url,
      {
        caption: mockTranslationResult.translation,
      }
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ reply)
    expect(mockDependencies.reply).toHaveBeenCalledTimes(1)
    expect(mockDependencies.reply).toHaveBeenCalledWith(
      expect.stringContaining('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é]'),
      expect.objectContaining({ parse_mode: 'Markdown' })
    )

    delete process.env.TUTORIAL_URL_test_bot_username
  })

  it('should handle a new user with a referral code', async () => {
    // Arrange
    const inputData: ProcessStartData = {
      telegramId: '13579',
      username: 'refuser',
      firstName: 'Ref',
      languageCode: 'ru',
      inviteCode: '98765',
      botName: 'test_bot_username',
      photoUrl: 'ref_photo_url',
      chatId: 13579,
    }
    const mockTranslationResult = {
      translation: '–ü—Ä–∏–≤–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É!',
      url: null,
    }
    const mockReferalsResult = {
      count: 5,
      userData: { user_id: '98765', username: 'referrer' },
    }
    const tutorialUrlMock = 'http://tutorial.ru'
    process.env.TUTORIAL_URL_test_bot_username = tutorialUrlMock

    mockGetUserDetailsSubscription.mockResolvedValue({ isExist: false } as any)
    mockCreateUser.mockResolvedValue([true, null])
    mockGetTranslation.mockResolvedValue(mockTranslationResult)
    mockIsRussian.mockReturnValue(true)
    mockGetReferalsCountAndUserData.mockResolvedValue(mockReferalsResult)
    mockSendMessage.mockResolvedValue({}) // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

    // 2. Act
    const result = await processStartCommand(inputData, mockDependencies)

    // 3. Assert
    expect(result).toBe(true)
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('13579')
    expect(mockGetReferalsCountAndUserData).toHaveBeenCalledWith('98765')
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({ inviter: '98765' }),
      null
    ) // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤—ã–∑–æ–≤–∞ sendMessage
    expect(mockDependencies.sendMessage).toHaveBeenCalledTimes(2)
    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    expect(mockDependencies.sendMessage).toHaveBeenNthCalledWith(
      1,
      '98765',
      expect.stringContaining(`üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @refuser`)
    )
    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    expect(mockDependencies.sendMessage).toHaveBeenNthCalledWith(
      2,
      process.env.SUBSCRIBE_CHANNEL_ID,
      expect.stringContaining(
        `[test_bot_username] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @refuser (ID: 13579) –ø–æ —Ä–µ—Ñ. –æ—Ç @referrer`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º reply (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Ç–µ–∫—Å—Ç —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º)
    expect(mockDependencies.reply).toHaveBeenCalledTimes(2)
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      1,
      '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
    )
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      2,
      expect.stringContaining('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é]'),
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
    expect(mockDependencies.replyWithPhoto).not.toHaveBeenCalled()

    delete process.env.TUTORIAL_URL_test_bot_username
  })

  it('should return false and reply on user check error', async () => {
    // Arrange
    const inputData: ProcessStartData = {
      telegramId: 'err-check',
      username: 'errCheckUser',
      botName: 'test_bot',
    }
    const dbError = new Error('DB connection failed')
    mockGetUserDetailsSubscription.mockRejectedValue(dbError) // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–∞

    // 2. Act
    const result = await processStartCommand(inputData, mockDependencies)

    // 3. Assert
    expect(result).toBe(false)
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('err-check')
    expect(mockCreateUser).not.toHaveBeenCalled()
    expect(mockDependencies.reply).toHaveBeenCalledTimes(1) // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(mockDependencies.reply).toHaveBeenCalledWith(
      expect.stringContaining('internal error occurred')
    )
    expect(mockLoggerError).toHaveBeenCalledWith(
      expect.stringContaining('Critical error'),
      expect.any(Object)
    )
  })

  it('should return false and reply on user creation error', async () => {
    // Arrange
    const inputData: ProcessStartData = {
      telegramId: 'err-create',
      username: 'errCreateUser',
      botName: 'test_bot',
    }
    const createError = new Error('Failed to insert user')
    mockGetUserDetailsSubscription.mockResolvedValue({ isExist: false } as any)
    mockCreateUser.mockRejectedValue(createError) // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

    // 2. Act
    const result = await processStartCommand(inputData, mockDependencies)

    // 3. Assert
    expect(result).toBe(false)
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('err-create')
    expect(mockCreateUser).toHaveBeenCalled() // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã–ª–∞
    expect(mockDependencies.reply).toHaveBeenCalledTimes(1) // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(mockDependencies.reply).toHaveBeenCalledWith(
      expect.stringContaining('error occurred during registration')
    )
    expect(mockLoggerError).toHaveBeenCalledWith(
      expect.stringContaining('Error creating user'),
      expect.any(Object)
    )
  })

  it('should handle error during referral processing but continue', async () => {
    // Arrange
    const inputData: ProcessStartData = {
      telegramId: 'newref-err',
      username: 'refErrUser',
      languageCode: 'en',
      inviteCode: 'refErrCode',
      botName: 'test_bot',
      chatId: 111,
    }
    const referralError = new Error('Referral DB error')
    mockGetUserDetailsSubscription.mockResolvedValue({ isExist: false } as any)
    mockGetReferalsCountAndUserData.mockRejectedValue(referralError) // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    mockCreateUser.mockResolvedValue([true, null]) // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ
    mockGetTranslation.mockResolvedValue({
      translation: 'Welcome after ref error',
      url: null,
    })
    mockIsRussian.mockReturnValue(false)

    // Act
    const result = await processStartCommand(inputData, mockDependencies)

    // Assert
    expect(result).toBe(true) // –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ, —Ç.–∫. –æ—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    expect(mockGetUserDetailsSubscription).toHaveBeenCalledWith('newref-err')
    expect(mockGetReferalsCountAndUserData).toHaveBeenCalledWith('refErrCode')
    expect(mockLoggerError).toHaveBeenCalledWith(
      expect.stringContaining('Error processing referral logic'),
      expect.any(Object)
    )
    expect(mockCreateUser).toHaveBeenCalledWith(
      expect.objectContaining({ inviter: null }),
      null
    ) // Inviter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null
    expect(mockDependencies.reply).toHaveBeenCalledTimes(2) // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + Welcome after ref error
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      1,
      '‚úÖ Avatar created successfully! Welcome!'
    )
    expect(mockDependencies.reply).toHaveBeenNthCalledWith(
      2,
      'Welcome after ref error',
      expect.objectContaining({ parse_mode: 'Markdown' })
    )
    expect(mockDependencies.replyWithPhoto).not.toHaveBeenCalled()
  })
})
