import makeMockContext from '../utils/mockTelegrafContext'
import * as supabaseHelpers from '@/core/supabase'
import * as helpers from '@/helpers'
import * as handlers from '@/handlers/handleHelpCancel'
import { Message } from 'telegraf/typings/core/types/typegram'
import { Markup } from 'telegraf'

// Mock dependencies
jest.mock('@/core/supabase')
jest.mock('@/helpers')
jest.mock('@/handlers/handleHelpCancel')

// Typing mocks using jest.mocked()
const mockedSaveUserEmail = jest.mocked(supabaseHelpers.saveUserEmail)
const mockedIsRussian = jest.mocked(helpers.isRussian)
const mockedHandleCancel = jest.mocked(handlers.handleHelpCancel)

// –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è emailWizard
// –í–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–∞–º–æ–≥–æ emailWizard, —Ä–µ–∞–ª–∏–∑—É–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é

describe('emailWizard handlers', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('enter handler', () => {
    it('should prompt for email with cancel button (RU)', async () => {
      // Setup
      mockedIsRussian.mockReturnValue(true)
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = makeMockContext()
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ enter –¥–ª—è emailWizard
      const enterHandler = async (ctx: any) => {
        const isRu = helpers.isRussian(ctx)
        await ctx.reply(
          isRu
            ? 'üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.'
            : 'üëâ To generate an invoice, please provide your E-mail.',
          Markup.keyboard([Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')]).resize()
        )
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await enterHandler(ctx)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(mockedIsRussian).toHaveBeenCalledWith(ctx)
      expect(ctx.reply).toHaveBeenCalledWith(
        'üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.',
        expect.objectContaining({
          reply_markup: expect.any(Object)
        })
      )
    })

    it('should prompt for email with cancel button (EN)', async () => {
      // Setup
      mockedIsRussian.mockReturnValue(false)
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ctx = makeMockContext()
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ enter –¥–ª—è emailWizard
      const enterHandler = async (ctx: any) => {
        const isRu = helpers.isRussian(ctx)
        await ctx.reply(
          isRu
            ? 'üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.'
            : 'üëâ To generate an invoice, please provide your E-mail.',
          Markup.keyboard([Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')]).resize()
        )
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await enterHandler(ctx)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(mockedIsRussian).toHaveBeenCalledWith(ctx)
      expect(ctx.reply).toHaveBeenCalledWith(
        'üëâ To generate an invoice, please provide your E-mail.',
        expect.objectContaining({
          reply_markup: expect.any(Object)
        })
      )
    })
  })

  describe('email input handler', () => {
    it('should save email and show payment options (RU)', async () => {
      // Setup
      mockedIsRussian.mockReturnValue(true)
      mockedSaveUserEmail.mockResolvedValueOnce(undefined)
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å email
      const ctx = makeMockContext({
        update_id: 1000,
        message: {
          from: { id: 1, is_bot: false, first_name: 'Test' },
          text: 'user@example.com',
          date: Math.floor(Date.now() / 1000),
          message_id: 123,
          chat: { id: 1, type: 'private', first_name: 'Test' },
        },
      })
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è email
      const emailHandler = async (ctx: any) => {
        const isRu = helpers.isRussian(ctx)
        const email = ctx.message.text

        try {
          if (!ctx.from) {
            throw new Error('User not found')
          }
          ctx.session.email = email
          await supabaseHelpers.saveUserEmail(ctx.from.id.toString(), email)
          await ctx.reply(
            isRu
              ? '–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
              : 'Your e-mail has been successfully saved',
            Markup.removeKeyboard()
          )

          const buttons = [
            { amount: 2000, stars: '1250' },
            { amount: 5000, stars: '3125' },
            { amount: 10000, stars: '6250' },
          ].map(option => [
            isRu
              ? `–ö—É–ø–∏—Ç—å ${option.stars}‚≠êÔ∏è –∑–∞ ${option.amount} —Ä`
              : `Buy ${option.stars}‚≠êÔ∏è for ${option.amount} RUB`,
          ])

          const keyboard = Markup.keyboard(buttons).resize()

          await ctx.reply(
            isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:' : 'Choose the amount for payment:',
            {
              reply_markup: keyboard.reply_markup,
            }
          )
        } catch (error) {
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
              : 'Error saving e-mail. Please try again.'
          )
        }
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await emailHandler(ctx)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(mockedIsRussian).toHaveBeenCalledWith(ctx)
      expect(mockedSaveUserEmail).toHaveBeenCalledWith('1', 'user@example.com')
      expect(ctx.session.email).toBe('user@example.com')
      expect(ctx.reply).toHaveBeenCalledTimes(2)
      expect(ctx.reply).toHaveBeenCalledWith(
        '–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        expect.objectContaining({
          reply_markup: expect.objectContaining({ 
            remove_keyboard: true 
          })
        })
      )
      expect(ctx.reply).toHaveBeenCalledWith(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
        expect.objectContaining({ 
          reply_markup: expect.any(Object) 
        })
      )
    })

    it('should handle save error (EN)', async () => {
      // Setup
      mockedIsRussian.mockReturnValue(false)
      mockedSaveUserEmail.mockRejectedValueOnce(new Error('DB fail'))
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å email
      const ctx = makeMockContext({
        update_id: 1001,
        message: {
          from: { id: 1, is_bot: false, first_name: 'Test' },
          text: 'a@b.com',
          date: Math.floor(Date.now() / 1000),
          message_id: 124,
          chat: { id: 1, type: 'private', first_name: 'Test' },
        },
      })
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è email
      const emailHandler = async (ctx: any) => {
        const isRu = helpers.isRussian(ctx)
        const email = ctx.message.text

        try {
          if (!ctx.from) {
            throw new Error('User not found')
          }
          ctx.session.email = email
          await supabaseHelpers.saveUserEmail(ctx.from.id.toString(), email)
          await ctx.reply(
            isRu
              ? '–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
              : 'Your e-mail has been successfully saved',
            Markup.removeKeyboard()
          )

          const buttons = [
            { amount: 2000, stars: '1250' },
            { amount: 5000, stars: '3125' },
            { amount: 10000, stars: '6250' },
          ].map(option => [
            isRu
              ? `–ö—É–ø–∏—Ç—å ${option.stars}‚≠êÔ∏è –∑–∞ ${option.amount} —Ä`
              : `Buy ${option.stars}‚≠êÔ∏è for ${option.amount} RUB`,
          ])

          const keyboard = Markup.keyboard(buttons).resize()

          await ctx.reply(
            isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:' : 'Choose the amount for payment:',
            {
              reply_markup: keyboard.reply_markup,
            }
          )
        } catch (error) {
          await ctx.reply(
            isRu
              ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
              : 'Error saving e-mail. Please try again.'
          )
        }
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await emailHandler(ctx)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(mockedIsRussian).toHaveBeenCalledWith(ctx)
      expect(mockedSaveUserEmail).toHaveBeenCalledWith('1', 'a@b.com')
      expect(ctx.reply).toHaveBeenCalledWith(
        'Error saving e-mail. Please try again.'
      )
    })
  })

  // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
})
