import { describe, it, expect, vi, beforeEach } from 'vitest'
import type { MyContext } from '@/interfaces'
import { handleTechSupport } from '@/commands/handleTechSupport'
import { Markup } from 'telegraf'
import { initializeMocks, mockIsRussian } from '../mocks/setup'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const createMockContext = (languageCode: 'ru' | 'en' = 'ru'): MyContext => {
  const ctx = {
    reply: vi.fn().mockResolvedValue({ message_id: 111 }),
    from: {
      id: 987654321,
      is_bot: false,
      first_name: 'Tester',
      language_code: languageCode,
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
    // scene: { leave: vi.fn() } // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è handleTechSupport –Ω–∞–ø—Ä—è–º—É—é
  } as unknown as MyContext
  return ctx
}

describe('handleTechSupport', () => {
  beforeEach(() => {
    initializeMocks()
    mockIsRussian.mockClear()
  })

  it('should send the Russian support message for ru language code', async () => {
    // Arrange
    const ctx = createMockContext('ru')
    mockIsRussian.mockReturnValue(true)
    const expectedMessage =
      'üõ† –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ @neuro_sage\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })

  it('should send the English support message for en language code', async () => {
    // Arrange
    const ctx = createMockContext('en')
    mockIsRussian.mockReturnValue(false)
    const expectedMessage =
      'üõ† To contact tech support, write to @neuro_sage\n\n' +
      'Please describe your problem in as much detail as possible.\n\nTo return to the main menu, click /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })

  it('should send the **Russian** support message if language code is undefined', async () => {
    // Arrange
    const ctx = createMockContext(undefined as any) // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ language_code
    mockIsRussian.mockReturnValue(true)
    // –û–∂–∏–¥–∞–µ–º –†–£–°–°–ö–ò–ô —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
    const expectedMessage =
      'üõ† –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ @neuro_sage\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })
})
