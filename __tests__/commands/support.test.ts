import { describe, it, expect, vi, beforeEach } from 'vitest'
import type { MyContext } from '@/interfaces'
import { handleTechSupport } from '@/commands/handleTechSupport/index'
import { Markup } from 'telegraf'
import { mockIsRussian } from '../setup'
import type { User, Chat } from '@telegraf/types'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
const createMockContext = (
  languageCode: 'ru' | 'en' | undefined = 'en'
): MyContext => {
  const defaultUser: User = {
    id: 987654321,
    is_bot: false,
    first_name: 'Tester',
    username: 'testsupportuser',
    language_code: languageCode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–¥
  }

  const defaultChat: Chat.PrivateChat = {
    id: 987654321,
    type: 'private',
    first_name: 'Tester',
    username: 'testsupportuser',
  }

  const ctx: Partial<MyContext> = {
    from: defaultUser,
    chat: defaultChat,
    message: {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      message_id: 1,
      date: Math.floor(Date.now() / 1000),
      chat: defaultChat,
      from: defaultUser,
      text: '/support',
    } as any,
    reply: vi.fn().mockResolvedValue({ message_id: 111 }),
    telegram: {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–∫ telegram API
      sendMessage: vi.fn().mockResolvedValue({}),
    } as any,
    session: {} as any, // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é
    scene: {} as any, // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ü–µ–Ω—É
    wizard: {} as any, // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –≤–∏–∑–∞—Ä–¥
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ isRussian –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
  }
  // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º as unknown
  return ctx as MyContext
}

describe('handleTechSupport', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    // mockIsRussian –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ
  })

  it('should send the Russian support message for ru language code', async () => {
    // Arrange
    const ctx = createMockContext('ru')
    mockIsRussian.mockReturnValue(true)
    const expectedMessage =
      'üõ† –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ @neuro_sage\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })

  it('should send the English support message for en language code', async () => {
    // Arrange
    const ctx = createMockContext('en')
    mockIsRussian.mockReturnValue(false)
    const expectedMessage =
      'üõ† To contact tech support, write to @neuro_sage\n\n' +
      'Please describe your problem in as much detail as possible.\n\nTo return to the main menu, click /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })

  it('should send the **Russian** support message if language code is undefined', async () => {
    // Arrange
    const ctx = createMockContext(undefined as any) // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ language_code
    mockIsRussian.mockReturnValue(true)
    // –û–∂–∏–¥–∞–µ–º –†–£–°–°–ö–ò–ô —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
    const expectedMessage =
      'üõ† –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ @neuro_sage\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu'

    // Act
    await handleTechSupport(ctx)

    // Assert
    expect(mockIsRussian).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledOnce()
    expect(ctx.reply).toHaveBeenCalledWith(
      expectedMessage,
      Markup.removeKeyboard()
    )
  })
})
