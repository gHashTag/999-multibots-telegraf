---
description: 
globs: 
alwaysApply: false
---
# Telegram Stars Payment Notifications

## Problem Context

Notifications (to admin and bot owners) were not being sent after a successful payment using Telegram Stars, initiated via the `starPaymentScene`.

## Root Cause

The `starPaymentScene` ([src/scenes/starPaymentScene.ts](mdc:src/scenes/starPaymentScene.ts)) remained active after the user selected a star package and the invoice was sent by the `handleTopUp` action handler ([src/handlers/paymentHandlers/handleTopUp.ts](mdc:src/handlers/paymentHandlers/handleTopUp.ts)). When the `successful_payment` update arrived from Telegram, the active scene intercepted it but had no specific handler for this message type, thus preventing the global `bot.on('successful_payment', ...)` handler from executing.

## Solution

`await ctx.scene.leave()` was added to the `handleTopUp` function ([src/handlers/paymentHandlers/handleTopUp.ts](mdc:src/handlers/paymentHandlers/handleTopUp.ts)) immediately after the invoice is successfully sent (after the `await handleBuy(...)` call). This ensures the scene is no longer active when the `successful_payment` update arrives.

## Notification Logic Location

The actual logic for processing the successful payment and sending notifications resides in the `handleSuccessfulPayment` function ([src/handlers/paymentHandlers/index.ts](mdc:src/handlers/paymentHandlers/index.ts) or similar path), which is registered globally via `bot.on('successful_payment', handleSuccessfulPayment)` likely in [src/handlers/paymentActions.ts](mdc:src/handlers/paymentActions.ts) or [src/registerCommands.ts](mdc:src/registerCommands.ts). This handler calls `sendNotification` and `notifyBotOwners`.

**Key Takeaway:** When debugging missing event handlers (`bot.on(...)`), check if an active scene might be intercepting the update. Ensure scenes leave (`ctx.scene.leave()`) when they have completed their interaction and are waiting for an external event handled elsewhere.
