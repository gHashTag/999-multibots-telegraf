{
  "name": "neuro-blogger-telegram-bot",
  "version": "1.0.0",
  "description": "Neuro Blogger Telegram Bot",
  "author": "",
  "license": "ISC",
  "scripts": {
    "predev": "node scripts/kill-port.js 2999 3001 8288",
    "dev": "concurrently --restart-after 1000 \"npm run bots\" \"sleep 2 && npm run dev:inngest\"",
    "deploy": "ssh -i ~/.ssh/id_rsa root@999-multibots-u14194.vm.elestio.app 'cd /opt/app/999-multibots-telegraf && git pull && chmod +x *.sh && ./update-docker.sh'",
    "inngest:dev": "npx inngest-cli dev -u http://localhost:2999/api/inngest --no-discovery",
    "dev:inngest:docker": "npx inngest-cli dev -u http://localhost:2999/api/inngest --port 8288 --no-discovery",
    "dev:inngest": "npx inngest-cli@latest dev -u http://localhost:2999/api/inngest --no-discovery",
    "dev:single": "cross-env NODE_ENV=development BOT_NAME=$BOT_NAME ts-node -r tsconfig-paths/register src/bot.ts",
    "start": "npm run build && cross-env NODE_ENV=production node dist/bot.js",
    "bots": "cross-env NODE_ENV=development ts-node -r tsconfig-paths/register src/bot.ts",
    "build": "npx cross-env NODE_ENV=development swc src -d dist --source-maps --copy-files",
    "build:tsc": "tsc && tsc-alias",
    "test:memory": "npm run test:memcheck",
    "lint": "eslint --ignore-path .gitignore --ext .ts src",
    "lint:fix": "npm run lint -- --fix",
    "services": "tsx src/api-server.ts",
    "check-port": "node scripts/check-webhook.js",
    "dev:services": "tsx src/api-server.ts",
    "dev:bots": "cd src && tsx watch bots.ts",
    "dev:api": "cd src && tsx watch api.ts",
    "prettier": "prettier --write .",
    "debug": "NODE_OPTIONS='--inspect' next dev",
    "generateTypes": "supabase gen types typescript --linked > src/types/supabase.ts",
    "release": "release-it",
    "telegrambot:dev": "rm -rf ./.next && tsc-watch --onSuccess \"node --experimental-specifier-resolution=node dist/bot/index.js\"",
    "telegrambot": "npx tsc && node dist/bot/index.js",
    "telegrambot:debug": "npx tsc && node --inspect dist/bot/index.js",
    "tgwebhook:dev": "NODE_ENV=development tsc-watch --onSuccess \"node --experimental-specifier-resolution=node dist/webhook/index.js\"",
    "tgwebhook": "NODE_ENV=production node dist/webhook/index.js",
    "ngrok": "ngrok http 2999",
    "tunnel": "ssh -R 80:localhost:2999 localhost.run",
    "type-check": "tsc --noEmit",
    "prepare": "husky install || true",
    "prebuild": "rm -rf dist",
    "prepare:assets": "node scripts/prepare-assets.js",
    "test": "npx tsx src/test-utils/index.ts",
    "test:payment": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/index.ts",
    "test:payment-processor": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/paymentProcessorTest.ts",
    "test:balance": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/balanceTest.ts",
    "test:payment-create": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/createSuccessfulPaymentTest.ts",
    "test:payment-notification": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/paymentNotification.test.ts",
    "test:ru-payment": "npx tsx src/test-utils/index.ts --category=ru-payment",
    "test:neurophoto": "npx tsx src/test-utils/index.ts --category=neurophoto",
    "test:translations": "npx tsx src/test-utils/index.ts --category=translations",
    "test:webhook": "npx tsx src/test-utils/index.ts --category=webhook",
    "test:api": "cross-env NODE_ENV=test npx tsx src/test-utils/scripts/test-api.ts",
    "test:api:detailed": "cross-env NODE_ENV=test npx tsx src/test-utils/scripts/test-api.ts --detailed --report",
    "test:inngest": "npx tsx src/test-utils/tests/runInngestTests.ts",
    "test:inngest:direct": "npx tsx src/test-utils/tests/runInngestTests.ts direct",
    "test:inngest:sdk": "npx tsx src/test-utils/tests/runInngestTests.ts sdk",
    "test:inngest:registration": "npx tsx src/test-utils/tests/runInngestTests.ts registration",
    "test:inngest:full": "npx tsx src/test-utils/tests/runInngestTests.ts full",
    "test:discover": "npx tsx src/test-utils/index.ts --discover",
    "test:speech": "npx tsx src/test-utils/index.ts --category=speech",
    "test:docker": "bash scripts/run-docker-tests.sh",
    "check:docker": "bash scripts/check-docker.sh",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "test:robokassa": "bash scripts/test-robokassa.sh",
    "test:select-model": "cross-env NODE_ENV=test npx tsx src/test-utils/models/runSelectModelTests.js",
    "test:ambassador": "cross-env NODE_ENV=test npx tsx src/test-utils/ambassador/runAmbassadorTests.js",
    "test:rubill": "cross-env NODE_ENV=test npx tsx src/test-utils/rubill/runRuBillTests.js",
    "docker:test:build": "docker-compose -f docker-compose.test.yml build",
    "docker:test:up": "docker-compose -f docker-compose.test.yml up -d",
    "docker:test:down": "docker-compose -f docker-compose.test.yml down -v",
    "docker:test:logs": "docker logs -f neuro-blogger-telegram-bot-test",
    "docker:test:payment": "bash run-tests.sh payment-processor",
    "docker:test:all": "bash run-tests.sh",
    "docker:run-test": "bash run-tests.sh",
    "check:ports": "./scripts/check-ports.sh",
    "free:ports": "./scripts/free-ports.sh",
    "prebots": "npm run check:ports",
    "predev:bots": "npm run check:ports",
    "predev:api": "npm run check:ports",
    "predev:services": "npm run check:ports",
    "pretelegrambot": "npm run check:ports",
    "pretelegrambot:dev": "npm run check:ports",
    "pretgwebhook": "npm run check:ports",
    "pretgwebhook:dev": "npm run check:ports",
    "predocker:up": "npm run check:ports",
    "prestart": "npm run check:ports",
    "ansible:deploy": "ansible-playbook playbook.yml --vault-password-file ../vault_password.txt",
    "docker:test:select-model": "bash scripts/run-select-model-tests.sh",
    "docker:test:ambassador": "bash scripts/run-ambassador-tests.sh",
    "docker:test:rubill": "bash scripts/run-rubill-tests.sh",
    "test:receipt": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/payment/runPaymentReceiptTestsOnly.ts",
    "docker:test:receipt": "bash scripts/run-receipt-tests.sh",
    "test:simple-receipt": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/payment/runSimpleReceiptTest.ts",
    "test:payment-receipt": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/payment/runPaymentReceiptTestsOnly.ts",
    "test:all-payments": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/payment/runPaymentTests.ts",
    "payment-tests": "bash scripts/run-payment-tests.sh",
    "simple-receipt-test": "bash scripts/run-simple-receipt-test.sh",
    "test:avatar-bot": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/runAvatarBotTests.ts",
    "docker:test:avatar-bot": "bash scripts/run-avatar-bot-tests.sh",
    "test:watch": "jest --watch",
    "test:pulse": "cross-env NODE_ENV=test npx tsx src/test-utils/runPulseIntegrationTests.ts",
    "pulse-tests": "bash scripts/run-pulse-tests.sh",
    "test:image-to-video": "cross-env NODE_ENV=test npx tsx src/test-utils/runImageToVideoTests.ts",
    "image-to-video-tests": "bash scripts/run-image-to-video-tests.sh",
    "test:text-to-video": "cross-env NODE_ENV=test npx tsx src/test-utils/runTextToVideoTests.ts",
    "text-to-video-tests": "bash scripts/run-textToVideo-tests.sh",
    "api-tests": "bash scripts/run-api-tests.sh",
    "api-tests:detailed": "bash scripts/run-api-tests.sh --detailed --report",
    "inngest-tests": "bash scripts/run-inngest-tests.sh",
    "docker:test:inngest": "bash scripts/run-inngest-tests.sh",
    "docker:test:api": "bash scripts/run-api-tests-docker.sh",
    "check": "npm run lint && npm run build",
    "start:api": "nodemon --exec \"ts-node\" src/api.ts",
    "start:worker": "ts-node src/worker.ts",
    "test:memcheck": "node --expose-gc src/test-utils/memcheck.js",
    "test:inngest-prod": "ts-node scripts/test-inngest-production.ts",
    "test:payment:integration": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/integrations/index.ts",
    "test:payment:core": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/core/index.ts",
    "test:payment:features": "cross-env NODE_ENV=test ts-node -r tsconfig-paths/register src/test-utils/tests/payment/features/index.ts"
  },
  "dependencies": {
    "@inngest/test": "^0.1.6",
    "@modelcontextprotocol/sdk": "^1.9.0",
    "@mtproto/core": "^6.3.0",
    "@supabase/supabase-js": "^2.49.4",
    "@types/multer": "^1.4.12",
    "@types/node-fetch": "2",
    "archiver": "^7.0.1",
    "axios": "^1.7.9",
    "bcrypt": "^5.0.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "elevenlabs": "^0.16.1",
    "envalid": "^7.3.1",
    "esbuild": "^0.25.2",
    "exceljs": "^4.4.0",
    "express": "^4.21.2",
    "form-data": "^4.0.1",
    "inngest": "^3.35.0",
    "jszip": "^3.10.1",
    "md5": "^2.3.0",
    "moment": "^2.30.1",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.2",
    "node-fetch": "^2.7.0",
    "openai": "^4.77.0",
    "pinata-web3": "^0.5.4",
    "replicate": "^0.32.0",
    "telegraf": "^4.16.3",
    "tsconfig-paths": "^4.2.0",
    "tslib": "^2.8.1",
    "undici": "^7.7.0",
    "uuid": "^11.1.0",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@inngest/test": "^0.1.6",
    "@swc/cli": "^0.1.57",
    "@swc/core": "^1.2.220",
    "@types/archiver": "^6.0.3",
    "@types/bcrypt": "^5.0.0",
    "@types/compression": "^1.7.2",
    "@types/cookie-parser": "^1.4.3",
    "@types/cors": "^2.8.12",
    "@types/exceljs": "^0.5.3",
    "@types/express": "^4.17.13",
    "@types/hpp": "^0.2.2",
    "@types/jsonwebtoken": "^8.5.8",
    "@types/md5": "^2.3.5",
    "@types/morgan": "^1.9.3",
    "@types/node": "^17.0.45",
    "@types/supertest": "^2.0.12",
    "@types/swagger-jsdoc": "^6.0.1",
    "@types/swagger-ui-express": "^4.1.3",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "concurrently": "^9.1.2",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.0.3",
    "node-config": "^0.0.2",
    "node-gyp": "^9.1.0",
    "nodemon": "^2.0.19",
    "pm2": "^5.2.0",
    "prettier": "^3.0.0",
    "supertest": "^6.2.4",
    "swc-plugin-pre-paths": "^3.0.1",
    "ts-node": "^10.9.2",
    "tsc-alias": "^1.7.0",
    "tsx": "^4.19.3",
    "typescript": "^4.9.5"
  }
}
