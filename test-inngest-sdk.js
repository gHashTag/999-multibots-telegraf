require('dotenv').config()
const { Inngest } = require('inngest')

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SDK Inngest
 */
console.log(`${colors.blue}üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SDK Inngest${colors.reset}\n`)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envVariables = {
  INNGEST_EVENT_KEY: process.env.INNGEST_EVENT_KEY,
  INNGEST_SIGNING_KEY: process.env.INNGEST_SIGNING_KEY,
  INNGEST_URL: process.env.INNGEST_URL,
  NODE_ENV: process.env.NODE_ENV || 'development',
}

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log(`${colors.cyan}–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:${colors.reset}`)

Object.entries(envVariables).forEach(([key, value]) => {
  const hasValue = !!value
  const status = hasValue
    ? `${colors.green}‚úì –î–æ—Å—Ç—É–ø–Ω–∞${colors.reset}`
    : `${colors.red}‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${colors.reset}`

  let displayValue = hasValue
    ? key === 'INNGEST_EVENT_KEY' || key === 'INNGEST_SIGNING_KEY'
      ? `${value.substring(0, 5)}...${value.substring(value.length - 5)}`
      : value
    : '–Ω–µ –∑–∞–¥–∞–Ω–æ'

  console.log(
    `  ${colors.yellow}${key}:${colors.reset} ${status} (${displayValue})`
  )
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function testInngestSDK() {
  try {
    console.log(
      `\n${colors.blue}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Inngest –∫–ª–∏–µ–Ω—Ç–∞...${colors.reset}`
    )

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Inngest
    const inngest = new Inngest({
      id: 'test-inngest-sdk',
      eventKey: process.env.INNGEST_EVENT_KEY,
    })

    console.log(`${colors.green}‚úì –ö–ª–∏–µ–Ω—Ç Inngest —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω${colors.reset}`)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const testEvent = {
      name: 'test/sdk-event',
      data: {
        message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SDK Inngest',
        timestamp: new Date().toISOString(),
        testId: Date.now().toString(),
      },
    }

    console.log(`\n${colors.cyan}–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:${colors.reset}`)
    console.log(JSON.stringify(testEvent, null, 2))

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    console.log(`\n${colors.blue}–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è...${colors.reset}`)
    const result = await inngest.send(testEvent)

    console.log(`${colors.green}‚úì –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!${colors.reset}`)
    console.log(`\n${colors.cyan}–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:${colors.reset}`)
    console.log(JSON.stringify(result, null, 2))

    return { success: true, result }
  } catch (error) {
    console.log(
      `${colors.red}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: ${error.message}${colors.reset}`
    )

    if (error.cause) {
      console.log(`\n${colors.yellow}–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏:${colors.reset}`)
      console.log(JSON.stringify(error.cause, null, 2))
    }

    return { success: false, error }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testInngestSDK()
  .then(({ success }) => {
    if (success) {
      console.log(
        `\n${colors.green}üéâ –¢–µ—Å—Ç SDK Inngest —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω${colors.reset}`
      )
    } else {
      console.log(
        `\n${colors.red}‚ùå –¢–µ—Å—Ç SDK Inngest –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π${colors.reset}`
      )
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    setTimeout(() => {
      process.exit(success ? 0 : 1)
    }, 1000)
  })
  .catch(error => {
    console.log(
      `\n${colors.red}‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`
    )
    process.exit(1)
  })
