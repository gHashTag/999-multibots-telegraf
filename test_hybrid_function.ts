import { generateNeuroPhotoHybrid } from './src/services/generateNeuroPhotoHybrid'
import { ModeEnum } from './src/interfaces/modes'

// –ú–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockContext = {
  session: {
    prompt: 'Test prompt for hybrid function',
    userModel: {
      model_url: 'test/model:123',
      trigger_word: 'test_trigger',
      finetune_id: 'test_finetune',
    },
  },
  from: {
    id: 144022504,
    username: 'test_user',
  },
  chat: {
    id: 144022504,
  },
  telegram: {
    sendChatAction: async () => {},
    sendMessage: async () => {},
  },
  reply: async (text: string) => {
    console.log('üì± Reply:', text)
  },
  botInfo: {
    username: 'test_bot',
  },
} as any

async function testHybridFunction() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ô –§–£–ù–ö–¶–ò–ò generateNeuroPhotoHybrid')
  console.log('='.repeat(60))

  try {
    console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:')
    console.log('- –ü—Ä–æ–º–ø—Ç: "Test prompt for hybrid function"')
    console.log('- –ú–æ–¥–µ–ª—å: test/model:123')
    console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 1')
    console.log('- Telegram ID: 144022504')
    console.log('')

    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...')

    const result = await generateNeuroPhotoHybrid(
      'Test prompt for hybrid function',
      'test/model:123' as any,
      1,
      '144022504',
      mockContext,
      'test_bot'
    )

    console.log('')
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result)

    if (result) {
      console.log('üéâ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      console.log('üìä –î–∞–Ω–Ω—ã–µ:', result.data)
      console.log('‚úÖ –£—Å–ø–µ—Ö:', result.success)
      if (result.urls) {
        console.log('üñºÔ∏è URLs:', result.urls)
      }
    } else {
      console.log('‚ùå –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ null')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)

    if (error instanceof Error) {
      console.error('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message)
      console.error('üìö –°—Ç–µ–∫:', error.stack)
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testHybridFunction()
  .then(() => {
    console.log('')
    console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
