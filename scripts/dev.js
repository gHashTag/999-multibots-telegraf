#!/usr/bin/env node

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Vite
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –∏—Ö –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HMR
 */

import fs from 'node:fs';
import path from 'node:path';
import { spawn } from 'node:child_process';
import { fileURLToPath } from 'node:url';
import * as dotenv from 'dotenv';
import chalk from 'chalk';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.development —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
dotenv.config({ path: '.env.development' });
dotenv.config(); // –ó–∞—Ç–µ–º –∏–∑ .env –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ FORCE_START –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const forceStart = process.env.FORCE_START === 'true';

// –û–ø—Ü–∏–∏ Node –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ESM –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const nodeOptions = [
  // –î–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ –º–æ–¥—É–ª–µ–π
  '--experimental-specifier-resolution=node',
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  '--no-warnings',
  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è Vite (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  // '--max-old-space-size=4096'
].join(' ');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logDir = path.join(rootDir, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
const errorLogPath = path.join(logDir, 'dev-errors.log');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Vite –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
function startDev() {
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...'));

  if (forceStart) {
    console.log(chalk.yellow('‚ö†Ô∏è –†–µ–∂–∏–º FORCE_START –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤'));
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Vite
  const command = 'pnpm';
  const args = ['vite'];

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  const env = {
    ...process.env,
    NODE_OPTIONS: nodeOptions,
  };

  console.log(chalk.cyan(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`));
  console.log(chalk.cyan(`   NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  console.log(chalk.cyan(`   POLLING: ${process.env.POLLING || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  console.log(chalk.cyan(`   WEBHOOK: ${process.env.WEBHOOK || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  console.log(chalk.cyan(`   PORT: ${process.env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  console.log(chalk.cyan(`   USE_ESM: ${process.env.USE_ESM || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));

  // –ó–∞–ø—É—Å–∫–∞–µ–º Vite
  const viteProcess = spawn(command, args, {
    env,
    cwd: rootDir,
    stdio: 'inherit',
    shell: true,
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
  viteProcess.on('error', (error) => {
    console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Vite: ${error.message}`));
    fs.appendFileSync(
      errorLogPath,
      `[${new Date().toISOString()}] Error starting Vite: ${error.message}\n`
    );
    process.exit(1);
  });

  viteProcess.on('close', (code) => {
    if (code !== 0) {
      console.log(chalk.red(`‚õî –ü—Ä–æ—Ü–µ—Å—Å Vite –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      fs.appendFileSync(
        errorLogPath,
        `[${new Date().toISOString()}] Vite process exited with code ${code}\n`
      );
    } else {
      console.log(chalk.green('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å Vite –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ'));
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
startDev(); 