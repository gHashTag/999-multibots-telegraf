/**
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã enum ModeEnum, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ 
 * –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ import type, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–¥–µ.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { globSync } from 'glob';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
const backupDir = `backup_src_enum_imports_${new Date().toISOString().replace(/[:.]/g, '').split('T')[0]}_${new Date().toISOString().replace(/[:.]/g, '').split('T')[1].slice(0, 6)}`;

if (!fs.existsSync(backupDir)) {
  fs.mkdirSync(backupDir);
}

function createBackup(sourcePath, backupFolder) {
  const relativePath = path.relative(process.cwd(), sourcePath);
  const backupPath = path.join(backupFolder, relativePath);
  const backupDir = path.dirname(backupPath);
  
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  fs.copyFileSync(sourcePath, backupPath);
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src
const processFiles = (pattern) => {
  const files = globSync(pattern);
  let fixedFilesCount = 0;
  let fixedImportsCount = 0;

  files.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    const originalContent = content;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ ModeEnum
    const hasTypeImport = /import\s+type\s+\{\s*(?:.*,\s*)?ModeEnum(?:\s*,\s*.*?)?\s*\}\s+from\s+(['"])@\/interfaces\/modes\1/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ModeEnum –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
    const usesAsValue = /ModeEnum\.\w+/.test(content);
    
    if (hasTypeImport && usesAsValue) {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
      createBackup(file, backupDir);
      
      // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç
      content = content.replace(
        /import\s+type\s+\{\s*(?:(.*),\s*)?ModeEnum(?:\s*,\s*(.*?))?\s*\}\s+from\s+(['"])@\/interfaces\/modes\3/g,
        (match, before, after, quote) => {
          let replacement = '';
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –≤ –∏–º–ø–æ—Ä—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ import type
          const otherTypes = [before, after].filter(Boolean).join(', ');
          if (otherTypes) {
            replacement += `import type { ${otherTypes} } from ${quote}@/interfaces/modes${quote};\n`;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ModeEnum
          replacement += `import { ModeEnum } from ${quote}@/interfaces/modes${quote};`;
          return replacement;
        }
      );
      
      // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç ModeEnum, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π
      if (content !== originalContent) {
        fixedFilesCount++;
        fixedImportsCount++;
        fs.writeFileSync(file, content);
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
      }
    }
  });

  return { filesProcessed: files.length, filesFixed: fixedFilesCount, importsFixed: fixedImportsCount };
};

// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ Enum...');

const srcResults = processFiles('src/**/*.ts');
const testsResults = processFiles('__tests__/**/*.ts');

console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ src: ${srcResults.filesProcessed}`);
console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ src: ${srcResults.filesFixed}`);
console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ __tests__: ${testsResults.filesProcessed}`);
console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ __tests__: ${testsResults.filesFixed}`);
console.log(`   - –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${srcResults.importsFixed + testsResults.importsFixed}`);
console.log(`   - –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤: ${backupDir}`);
console.log('\n‚≠ê –ó–∞–ø—É—Å—Ç–∏—Ç–µ "pnpm typecheck" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'); 