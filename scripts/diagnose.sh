#!/bin/bash

# üß† NeuroBlogger - –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–æ–≤
# –°–æ–∑–¥–∞–Ω: 17 –∞–ø—Ä–µ–ª—è 2025

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
  echo -e "\n${BLUE}===== $1 =====${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
check_status() {
  if [ $1 -eq 0 ]; then
    echo -e "${GREEN}‚úÖ $2${NC}"
  else
    echo -e "${RED}‚ùå $3${NC}"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
print_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
echo -e "${BLUE}=================================================${NC}"
echo -e "${BLUE}üß† NeuroBlogger - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–æ–≤${NC}"
echo -e "${BLUE}=================================================${NC}"
echo "–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: $(date)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ -f .env ]; then
  echo -e "${GREEN}‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω${NC}"
  
  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
  set -a # automatically export all variables
  source .env
  set +a
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if [ -n "$MODE" ]; then
    echo -e "${GREEN}‚úÖ MODE=$MODE${NC}"
  else
    echo -e "${RED}‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MODE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤
  BOT_COUNT=0
  for i in {1..7}; do
    var_name="BOT_TOKEN_$i"
    if [ -n "${!var_name}" ]; then
      BOT_COUNT=$((BOT_COUNT+1))
      echo -e "${GREEN}‚úÖ $var_name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
      echo -e "${YELLOW}‚ö†Ô∏è $var_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –≤ development)
  for i in {1..2}; do
    var_name="BOT_TOKEN_TEST_$i"
    if [ -z "${!var_name}" ]; then
      print_warning "$var_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è development)"
    else
      echo -e "${GREEN}‚úÖ $var_name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
  done

  echo -e "${BLUE}–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–æ–∫–µ–Ω–æ–≤: $BOT_COUNT${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
  if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_KEY" ]; then
    echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
  else
    echo -e "${RED}‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
  print_warning "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã):"
  OPTIONAL_VARS=("INNGEST_EVENT_KEY" "INNGEST_SIGNING_KEY" "INNGEST_URL" "INNGEST_BASE_URL" "SECRET_KEY" "LOG_FORMAT" "ELEVENLABS_API_KEY" "REPLICATE_API_TOKEN")
  for var_name in "${OPTIONAL_VARS[@]}"; do
    if [ -z "${!var_name}" ]; then
      print_warning "$var_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
      echo -e "${GREEN}‚úÖ $var_name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
    fi
  done
  
else
  echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ NODE_ENV
if [ -n "$NODE_ENV" ]; then
  echo -e "${GREEN}‚úÖ NODE_ENV=$NODE_ENV${NC}"
else
  print_warning "NODE_ENV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
if [ -f package.json ]; then
  echo -e "${GREEN}‚úÖ –§–∞–π–ª package.json –Ω–∞–π–¥–µ–Ω${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è bun
  if command -v bun &> /dev/null; then
    echo -e "${GREEN}‚úÖ bun —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå bun –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
  if [ -d node_modules ]; then
    echo -e "${GREEN}‚úÖ node_modules –Ω–∞–π–¥–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'bun install'${NC}"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript
  echo -e "\n${CYAN}üß¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript...${NC}"
  if command -v bun &> /dev/null && [ -f tsconfig.json ]; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    TSC_OUTPUT=$(bun run typecheck 2>&1)
    if [ $? -eq 0 ]; then
      echo -e "${GREEN}‚úÖ –¢–∏–ø—ã TypeScript –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã${NC}"
    else
      echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ TypeScript:${NC}"
      echo "$TSC_OUTPUT"
      echo -e "${YELLOW}–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'bun run typecheck' –∏–ª–∏ 'bun run build'${NC}"
    fi
  else
    print_warning "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã TypeScript (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç bun –∏–ª–∏ tsconfig.json)"
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prettier
  echo -e "\n${CYAN}üíÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prettier...${NC}"
  if command -v bun &> /dev/null && [ -f .prettierrc ]; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    PRETTIER_OUTPUT=$(bun run format --check 2>&1)
    if [ $? -eq 0 ]; then
      echo -e "${GREEN}‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prettier –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    else
      echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prettier:${NC}"
      echo "$PRETTIER_OUTPUT"
      echo -e "${YELLOW}–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'bun run format'${NC}"
    fi
  else
    print_warning "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prettier (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç bun –∏–ª–∏ .prettierrc)"
  fi
  
else
  echo -e "${RED}‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if command -v docker &> /dev/null; then
  echo -e "${GREEN}‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose —Ñ–∞–π–ª–æ–≤
  for file in docker-compose.yml docker-compose.dev.yml; do
    if [ -f $file ]; then
      echo -e "${GREEN}‚úÖ –§–∞–π–ª $file –Ω–∞–π–¥–µ–Ω${NC}"
    else
      echo -e "${RED}‚ùå –§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  CONTAINERS=$(docker ps --format "{{.Names}}" | grep -E 'app|longpolling-bot' || echo "")
  
  if [ -n "$CONTAINERS" ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    for container in $CONTAINERS; do
      echo "   - $container"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    FIRST_CONTAINER=$(echo "$CONTAINERS" | head -n 1)
    PORTS=$(docker port $FIRST_CONTAINER | grep -E '2999|3000|3001' || echo "")
    
    if [ -n "$PORTS" ]; then
      echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:${NC}"
      echo "$PORTS"
    else
      echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã (2999, 3000, 3001)${NC}"
    fi
    
  else
    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±–æ—Ç–æ–≤${NC}"
  fi
  
else
  echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for dir in src node_modules logs scripts; do
  if [ -d $dir ]; then
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–∞–π–¥–µ–Ω–∞${NC}"
  else
    echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
  fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
for file in src/bot.ts src/utils/launch.ts src/scenes/subscriptionCheckScene.ts; do
  if [ -f $file ]; then
    echo -e "${GREEN}‚úÖ –§–∞–π–ª $file –Ω–∞–π–¥–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå –§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
  fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx.conf –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook
if [ "$MODE" = "webhook" ] && [ -f nginx.conf ]; then
  echo -e "${GREEN}‚úÖ –§–∞–π–ª nginx.conf –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è webhook)${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Nginx
  if grep -q "proxy_pass.*app:2999" nginx.conf; then
    echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ proxy_pass –≤ nginx.conf –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
  else
    echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ proxy_pass –≤ nginx.conf${NC}"
  fi
  
elif [ "$MODE" = "webhook" ]; then
  echo -e "${RED}‚ùå –§–∞–π–ª nginx.conf –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è webhook)${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
print_header "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"

if [ -d logs ]; then
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–æ–≤
  LOG_FILES=$(find logs -type f -name "*.log" | wc -l)
  
  if [ $LOG_FILES -gt 0 ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ $LOG_FILES –ª–æ–≥-—Ñ–∞–π–ª–æ–≤${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
    ERROR_COUNT=$(grep -i error logs/*.log 2>/dev/null | wc -l)
    if [ $ERROR_COUNT -gt 0 ]; then
      echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö${NC}"
      
      # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
      echo -e "${YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:${NC}"
      grep -i error logs/*.log 2>/dev/null | tail -n 5
    else
      echo -e "${GREEN}‚úÖ –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
    BOT_INIT=$(grep -i "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" logs/*.log 2>/dev/null | tail -n 1)
    if [ -n "$BOT_INIT" ]; then
      echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤:${NC}"
      echo "   $BOT_INIT"
    else
      echo -e "${YELLOW}‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤${NC}"
    fi
    
  else
    echo -e "${YELLOW}‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
print_header "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API"

if command -v curl &> /dev/null; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Telegram
  TELEGRAM_API="https://api.telegram.org"
  curl -s -o /dev/null -w "%{http_code}" $TELEGRAM_API > /tmp/telegram_status
  TELEGRAM_STATUS=$(cat /tmp/telegram_status)
  
  if [ "$TELEGRAM_STATUS" = "200" ]; then
    echo -e "${GREEN}‚úÖ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ $TELEGRAM_STATUS)${NC}"
  fi
  
  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
  if [ $BOT_COUNT -gt 0 ] && [ -f .env ]; then
    for i in {1..7}; do
      var_name="BOT_TOKEN_$i"
      if [ -n "${!var_name}" ]; then
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞
        TOKEN_MASKED="${!var_name:0:5}...${!var_name: -5}"
        echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º $TOKEN_MASKED${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        curl -s "https://api.telegram.org/bot${!var_name}/getMe" > /tmp/bot_status
        if grep -q "\"ok\":true" /tmp/bot_status; then
          BOT_USERNAME=$(grep -o '"username":"[^"]*"' /tmp/bot_status | cut -d '"' -f 4)
          echo -e "${GREEN}‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ @$BOT_USERNAME${NC}"
        else
          echo -e "${RED}‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞${NC}"
        fi
      fi
    done
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase"

if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_KEY" ] && command -v curl &> /dev/null; then
  echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...${NC}"
  
  # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –≤—ã–≤–æ–¥–∞
  KEY_MASKED="${SUPABASE_SERVICE_KEY:0:5}...${SUPABASE_SERVICE_KEY: -5}"
  echo -e "${BLUE}URL: $SUPABASE_URL${NC}"
  echo -e "${BLUE}Key: $KEY_MASKED${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
  SUPABASE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET "$SUPABASE_URL/rest/v1/" -H "apikey: $SUPABASE_SERVICE_KEY")
  
  if [ "$SUPABASE_STATUS" = "200" ]; then
    echo -e "${GREEN}‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ${NC}"
  else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase (–∫–æ–¥ $SUPABASE_STATUS)${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ curl${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook URLs –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook
if [ "$MODE" = "webhook" ]; then
  print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook URLs"
  
  if [ -n "$WEBHOOK_DOMAIN" ]; then
    echo -e "${BLUE}–î–æ–º–µ–Ω webhook: $WEBHOOK_DOMAIN${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
    if command -v curl &> /dev/null; then
      DOMAIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $WEBHOOK_DOMAIN)
      
      if [ "$DOMAIN_STATUS" = "200" ] || [ "$DOMAIN_STATUS" = "404" ]; then
        echo -e "${GREEN}‚úÖ –î–æ–º–µ–Ω webhook –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ $DOMAIN_STATUS)${NC}"
      else
        echo -e "${RED}‚ùå –î–æ–º–µ–Ω webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ $DOMAIN_STATUS)${NC}"
      fi
    else
      echo -e "${YELLOW}‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è https
    if [[ "$WEBHOOK_DOMAIN" == https://* ]]; then
      if command -v openssl &> /dev/null; then
        DOMAIN=$(echo $WEBHOOK_DOMAIN | sed 's|https://||')
        SSL_VALID=$(echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates | grep "notAfter" | cut -d= -f2)
        
        if [ -n "$SSL_VALID" ]; then
          echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: $SSL_VALID${NC}"
        else
          echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º${NC}"
        fi
      else
        echo -e "${YELLOW}‚ö†Ô∏è openssl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL${NC}"
      fi
    fi
    
  else
    echo -e "${RED}‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
  fi
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
print_header "–ò—Ç–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"

# –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
cat <<EOT > diagnostic_report.txt
======= –û—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ NeuroBlogger =======
–î–∞—Ç–∞: $(date)
–†–µ–∂–∏–º: ${MODE:-"–ù–µ —É–∫–∞–∑–∞–Ω"}
–ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤: $BOT_COUNT
–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $(echo "$CONTAINERS" | wc -l)
----------------------------------------------
–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
EOT

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç—á–µ—Ç
if [ $BOT_COUNT -eq 0 ]; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è" >> diagnostic_report.txt
fi

if [ -z "$CONTAINERS" ]; then
  echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker" >> diagnostic_report.txt
fi

if [ "$MODE" = "webhook" ] && [ ! -f nginx.conf ]; then
  echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –¥–ª—è webhook" >> diagnostic_report.txt
fi

if [ -n "$ERROR_COUNT" ] && [ $ERROR_COUNT -gt 0 ]; then
  echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö ($ERROR_COUNT)" >> diagnostic_report.txt
fi

if [ -z "$MODE" ]; then
  echo "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (MODE)" >> diagnostic_report.txt
fi

echo -e "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${BLUE}diagnostic_report.txt${NC}"
echo -e "${GREEN}–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
print_header "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"

if [ -z "$CONTAINERS" ]; then
  echo -e "${YELLOW}–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
  echo -e "   ${BLUE}docker compose up -d --build${NC}"
fi

if [ ! -d node_modules ]; then
  echo -e "${YELLOW}–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
  echo -e "   ${BLUE}bun install${NC}"
fi

if [ $ERROR_COUNT -gt 0 ]; then
  echo -e "${YELLOW}–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
  echo -e "   ${BLUE}grep -i error logs/*.log | tail -n 20${NC}"
fi

echo -e "${YELLOW}–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:${NC}"
echo -e "   ${BLUE}cat .env | grep -v \"^#\" | grep -v \"^$\"${NC}"

echo -e "${YELLOW}–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo -e "   ${BLUE}docker compose down && docker compose up -d --build${NC}"

echo -e "${YELLOW}–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo -e "   ${BLUE}bun install${NC}"
echo -e "   ${BLUE}bun run dev${NC}"
echo -e "   ${BLUE}bun run build${NC}" 