/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
 * –ó–∞–ø—É—Å–∫: node scripts/kill-port.js PORT1 PORT2 ...
 * –ü—Ä–∏–º–µ—Ä: node scripts/kill-port.js 2999 3001
 */

const { exec } = require('child_process')
const os = require('os')

const ports = process.argv.slice(2)

if (ports.length === 0) {
  console.error('üî¥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–æ–≤')
  console.error('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/kill-port.js PORT1 PORT2 ...')
  console.error('   –ü—Ä–∏–º–µ—Ä: node scripts/kill-port.js 2999 3001')
  process.exit(1)
}

console.log(`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –ø–æ—Ä—Ç—ã: ${ports.join(', ')}...`)
console.log('   Searching for processes using the ports')

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
const platform = os.platform()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ—Ä—Ç—É
async function killProcessesByPort(port) {
  return new Promise(resolve => {
    let command

    if (platform === 'win32') {
      // Windows
      command = `netstat -ano | findstr :${port}`
    } else {
      // macOS/Linux
      command = `lsof -i:${port} -t`
    }

    exec(command, (error, stdout, stderr) => {
      if (error && !stdout) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`)
        console.log('   Port is free')
        resolve()
        return
      }

      if (stderr) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–æ—Ä—Ç–∞ ${port}: ${stderr}`
        )
        console.error(`   Error finding processes for port ${port}: ${stderr}`)
        resolve()
        return
      }

      const pids = stdout.trim().split('\n').filter(Boolean)

      if (pids.length === 0) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`)
        console.log('   Port is free')
        resolve()
        return
      }

      console.log(`üî• –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ${pids.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–æ—Ä—Ç–∞ ${port}...`)
      console.log(`   Killing ${pids.length} processes for port ${port}...`)

      let completedKills = 0

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      pids.forEach(pid => {
        // –î–ª—è Windows –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å PID –∏–∑ —Å—Ç—Ä–æ–∫–∏ netstat
        let processId = pid
        if (platform === 'win32') {
          // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ - —ç—Ç–æ PID –≤ –≤—ã–≤–æ–¥–µ netstat
          const match = pid.match(/(\d+)$/)
          if (match) {
            processId = match[1]
          }
        }

        // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        const killCommand =
          platform === 'win32'
            ? `taskkill /F /PID ${processId}`
            : `kill -9 ${processId}`

        exec(killCommand, killError => {
          completedKills++

          if (killError) {
            console.error(
              `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${processId} –¥–ª—è –ø–æ—Ä—Ç–∞ ${port}: ${killError.message}`
            )
            console.error(
              `   Failed to kill process ${processId} for port ${port}: ${killError.message}`
            )
          } else {
            console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${processId} –¥–ª—è –ø–æ—Ä—Ç–∞ ${port} –∑–∞–≤–µ—Ä—à–µ–Ω`)
            console.log(`   Process ${processId} for port ${port} terminated`)
          }

          if (completedKills === pids.length) {
            resolve()
          }
        })
      })
    })
  })
}

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã
async function processAllPorts() {
  for (const port of ports) {
    await killProcessesByPort(port)
  }
  console.log('‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã')
  console.log('   All ports processed')
}

processAllPorts()
