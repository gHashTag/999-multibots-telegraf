#!/usr/bin/env node

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
 */

import fs from 'node:fs';
import path from 'node:path';
import { spawn, execSync } from 'node:child_process';
import { fileURLToPath } from 'node:url';
import * as dotenv from 'dotenv';
import chalk from 'chalk';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
import { checkBotConflicts, createBotLock } from './dev-utils.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.production —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
dotenv.config({ path: '.env.production' });
dotenv.config(); // –ó–∞—Ç–µ–º –∏–∑ .env –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ FORCE_START –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const forceStart = process.env.FORCE_START === 'true';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logDir = path.join(rootDir, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –§–∞–π–ª—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
const outLogPath = path.join(logDir, 'neuroblogger-out.log');
const errLogPath = path.join(logDir, 'neuroblogger-err.log');

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
const outStream = fs.createWriteStream(outLogPath, { flags: 'a' });
const errStream = fs.createWriteStream(errLogPath, { flags: 'a' });

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ –∫–æ–Ω—Å–æ–ª—å
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 * @param {boolean} isError - –§–ª–∞–≥ –æ—à–∏–±–∫–∏
 */
function logMessage(message, isError = false) {
  const timestamp = new Date().toISOString();
  const formattedMessage = `[${timestamp}] ${message}\n`;
  
  if (isError) {
    errStream.write(formattedMessage);
    console.error(chalk.red(message));
  } else {
    outStream.write(formattedMessage);
    console.log(message);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–∂–∏–º–µ
 */
function startProduction() {
  logMessage(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ NeuroBlogger –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–∂–∏–º–µ...'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤
  const { hasConflict, message, pid } = checkBotConflicts();
  
  if (hasConflict && !forceStart) {
    logMessage(chalk.red(`‚ö†Ô∏è ${message}`), true);
    logMessage(chalk.red(`‚ö†Ô∏è –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FORCE_START=true`), true);
    process.exit(1);
  } else if (hasConflict && forceStart) {
    logMessage(chalk.yellow(`‚ö†Ô∏è ${message}`));
    logMessage(chalk.yellow(`‚ö†Ô∏è –†–µ–∂–∏–º FORCE_START –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç`));
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
      if (process.platform === 'win32') {
        execSync(`taskkill /F /PID ${pid}`);
      } else {
        execSync(`kill -9 ${pid}`);
      }
      logMessage(chalk.green(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`));
    } catch (error) {
      logMessage(chalk.red(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}: ${error.message}`), true);
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ Node.js
  const command = 'node';
  const args = ['dist/bot.js'];
  
  // –†–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PM2
  if (process.env.USE_PM2 === 'true') {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PM2
      execSync('pm2 --version', { stdio: 'ignore' });
      
      logMessage(chalk.blue('üìä –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PM2...'));
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PM2
      const pm2Config = {
        name: 'neuroblogger',
        script: 'dist/bot.js',
        instances: process.env.PM2_INSTANCES || 1,
        max_memory_restart: process.env.PM2_MAX_MEMORY || '500M',
        output: outLogPath,
        error: errLogPath,
        env: {
          NODE_ENV: 'production',
          ...process.env
        }
      };
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PM2
      const pm2ConfigPath = path.join(rootDir, 'pm2.config.json');
      fs.writeFileSync(pm2ConfigPath, JSON.stringify(pm2Config, null, 2));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
      execSync(`pm2 start ${pm2ConfigPath}`, { stdio: 'inherit' });
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      fs.unlinkSync(pm2ConfigPath);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2 –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
      execSync('pm2 save', { stdio: 'inherit' });
      
      logMessage(chalk.green('‚úÖ NeuroBlogger —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2'));
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      const botNames = ['NeuroBlogger'];
      createBotLock(botNames);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
      execSync('pm2 status', { stdio: 'inherit' });
      return;
    } catch (error) {
      logMessage(chalk.yellow(`‚ö†Ô∏è PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`));
      logMessage(chalk.yellow(`‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...`));
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  const env = {
    ...process.env,
    NODE_ENV: 'production'
  };
  
  logMessage(chalk.cyan(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:`));
  logMessage(chalk.cyan(`   NODE_ENV: ${env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  logMessage(chalk.cyan(`   POLLING: ${env.POLLING || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  logMessage(chalk.cyan(`   WEBHOOK: ${env.WEBHOOK || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  logMessage(chalk.cyan(`   PORT: ${env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  const botProcess = spawn(command, args, {
    env,
    cwd: rootDir,
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const botNames = ['NeuroBlogger'];
  createBotLock(botNames);
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –ª–æ–≥-—Ñ–∞–π–ª—ã –∏ –∫–æ–Ω—Å–æ–ª—å
  botProcess.stdout.on('data', (data) => {
    const message = data.toString().trim();
    if (message) {
      logMessage(message);
    }
  });
  
  botProcess.stderr.on('data', (data) => {
    const message = data.toString().trim();
    if (message) {
      logMessage(message, true);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
  botProcess.on('error', (error) => {
    logMessage(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.message}`), true);
    process.exit(1);
  });
  
  botProcess.on('close', (code) => {
    if (code !== 0) {
      logMessage(chalk.red(`‚õî –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`), true);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
      if (process.env.AUTO_RESTART === 'true') {
        logMessage(chalk.yellow(`‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`));
        setTimeout(startProduction, 5000);
      } else {
        process.exit(code);
      }
    } else {
      logMessage(chalk.green('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ'));
    }
  });
  
  logMessage(chalk.green(`‚úÖ NeuroBlogger —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å PID: ${botProcess.pid}`));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
startProduction(); 