/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * 
 * @module dev-utils
 */

import fs from 'node:fs';
import path from 'node:path';
import { execSync } from 'node:child_process';
import chalk from 'chalk';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
 * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –ó–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
 */
export function isPortInUse(port) {
  try {
    let command;
    
    // –†–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
    if (process.platform === 'win32') {
      command = `netstat -ano | findstr :${port}`;
    } else {
      command = `lsof -i:${port} -P -n | grep LISTEN`;
    }
    
    const result = execSync(command, { encoding: 'utf-8' });
    return result.trim().length > 0;
  } catch (error) {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—à–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    return false;
  }
}

/**
 * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
 * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
 * @returns {boolean} –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø–æ—Ä—Ç
 */
export function freePort(port) {
  try {
    let pid;
    
    // –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∑–∞–Ω–∏–º–∞—é—â–µ–≥–æ –ø–æ—Ä—Ç
    if (process.platform === 'win32') {
      const result = execSync(`netstat -ano | findstr :${port}`, { encoding: 'utf-8' });
      pid = result.trim().split(/\s+/).pop();
    } else {
      const result = execSync(`lsof -i:${port} -P -n -t`, { encoding: 'utf-8' });
      pid = result.trim();
    }
    
    if (pid) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      if (process.platform === 'win32') {
        execSync(`taskkill /F /PID ${pid}`);
      } else {
        execSync(`kill -9 ${pid}`);
      }
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(chalk.red(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç ${port}: ${error.message}`));
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ package.json
 * @returns {boolean} –í—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
 */
export function checkDependencies() {
  console.log(chalk.blue('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));
  
  const requiredDevDeps = [
    'vite',
    'dotenv',
    'chalk',
    'nodemon',
    'typescript',
    'tsx'
  ];
  
  const packageJsonPath = path.resolve(process.cwd(), 'package.json');
  
  if (!fs.existsSync(packageJsonPath)) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω'));
    return false;
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
    const devDependencies = packageJson.devDependencies || {};
    const dependencies = packageJson.dependencies || {};
    
    const missing = [];
    
    for (const dep of requiredDevDeps) {
      if (!devDependencies[dep] && !dependencies[dep]) {
        missing.push(dep);
      }
    }
    
    if (missing.length > 0) {
      console.warn(
        chalk.yellow(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing.join(', ')}`)
      );
      console.log(chalk.blue(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...`));
      
      execSync(`pnpm add -D ${missing.join(' ')}`, {
        stdio: 'inherit',
        cwd: process.cwd()
      });
      
      console.log(chalk.green('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'));
    } else {
      console.log(chalk.green('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'));
    }
    
    return true;
  } catch (error) {
    console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`));
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–æ–≤
 * @returns {Object} –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
 */
export function checkBotConflicts() {
  const lockFile = path.resolve(process.cwd(), '.bot-lock');
  
  if (fs.existsSync(lockFile)) {
    try {
      const lockData = JSON.parse(fs.readFileSync(lockFile, 'utf-8'));
      const { pid, timestamp, botNames } = lockData;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
      let processExists = false;
      
      try {
        if (process.platform === 'win32') {
          execSync(`tasklist /FI "PID eq ${pid}" | findstr ${pid}`);
          processExists = true;
        } else {
          execSync(`ps -p ${pid} -o pid=`);
          processExists = true;
        }
      } catch (error) {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É, —Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        processExists = false;
      }
      
      if (processExists) {
        return {
          hasConflict: true,
          pid,
          timestamp,
          botNames,
          message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–æ–≤ (PID: ${pid}, –∑–∞–ø—É—â–µ–Ω: ${new Date(timestamp).toLocaleString()})`
        };
      } else {
        // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ñ–∞–π–ª –æ—Å—Ç–∞–ª—Å—è
        fs.unlinkSync(lockFile);
        return { hasConflict: false };
      }
    } catch (error) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      try {
        fs.unlinkSync(lockFile);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
      }
      
      return { hasConflict: false };
    }
  }
  
  return { hasConflict: false };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 * @param {Array<string>} botNames - –ò–º–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
export function createBotLock(botNames = []) {
  const lockFile = path.resolve(process.cwd(), '.bot-lock');
  
  const lockData = {
    pid: process.pid,
    timestamp: Date.now(),
    botNames
  };
  
  fs.writeFileSync(lockFile, JSON.stringify(lockData, null, 2), 'utf-8');
  console.log(chalk.green(`üîí –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è PID ${process.pid}`));
  
  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  const removeLock = () => {
    try {
      if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
        console.log(chalk.blue(`üîì –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω`));
      }
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${error.message}`));
    }
  };
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  process.on('exit', removeLock);
  process.on('SIGINT', () => {
    removeLock();
    process.exit(0);
  });
  process.on('SIGTERM', () => {
    removeLock();
    process.exit(0);
  });
  process.on('uncaughtException', (error) => {
    console.error(chalk.red(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`));
    removeLock();
    process.exit(1);
  });
} 