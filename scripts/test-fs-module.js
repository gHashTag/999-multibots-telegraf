#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π Node.js —á–µ—Ä–µ–∑ Vite
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Node.js
 * –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ESM –∏ TypeScript
 */

import { spawn } from 'node:child_process';
import { fileURLToPath } from 'node:url';
import { dirname, resolve } from 'node:path';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = resolve(__dirname, '..');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const env = {
  ...process.env,
  NODE_OPTIONS: '--experimental-specifier-resolution=node --no-warnings',
  USE_ESM: 'true',
  DEBUG: 'vite:*',
};

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–æ–¥—É–ª–µ–π Node.js —á–µ—Ä–µ–∑ Vite...');
console.log('üìÇ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: src/test-modules.ts');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º vite-node –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TypeScript –Ω–∞–ø—Ä—è–º—É—é
const command = 'npx';
const args = ['vite-node', 'src/test-modules.ts'];

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
const testProcess = spawn(command, args, {
  cwd: rootDir,
  env,
  stdio: 'inherit',
  shell: true,
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
testProcess.on('error', (error) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`);
  process.exit(1);
});

testProcess.on('close', (code) => {
  if (code === 0) {
    console.log('‚úÖ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.error(`‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: ${code}`);
    process.exit(code || 1);
  }
}); 