#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ ModeEnum, –∫–æ–≥–¥–∞ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
 * –ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã, –≥–¥–µ ModeEnum –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ç–∏–ø, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
 * –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { globSync } from 'glob';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

// –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
const timestamp = new Date().toISOString()
  .replace(/[:.]/g, '')
  .split('T')[0] + '_' + 
  new Date().toISOString().replace(/[:.]/g, '').split('T')[1].slice(0, 6);
const backupDir = path.join(rootDir, `backup_mode_enum_${timestamp}`);

// –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src
function createBackup() {
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º src –∫–∞—Ç–∞–ª–æ–≥
  const srcBackupDir = path.join(backupDir, 'src');
  if (!fs.existsSync(srcBackupDir)) {
    fs.mkdirSync(srcBackupDir, { recursive: true });
  }
  
  const allFiles = globSync(path.join(rootDir, 'src/**/*.ts'));
  for (const file of allFiles) {
    const relativePath = path.relative(path.join(rootDir, 'src'), file);
    const destPath = path.join(srcBackupDir, relativePath);
    const destDir = path.dirname(destPath);
    
    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir, { recursive: true });
    }
    
    fs.copyFileSync(file, destPath);
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è src –≤ ${backupDir}`);
}

function fixImports() {
  const files = globSync(path.join(rootDir, 'src/**/*.ts'));
  let fixedFiles = 0;
  let skippedFiles = 0;
  
  for (const file of files) {
    let content = fs.readFileSync(file, 'utf8');
    const originalContent = content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ ModeEnum –∫–∞–∫ —Ç–∏–ø
    const hasTypeImport = content.includes('import type') && 
      /import\s+type\s+\{[^}]*ModeEnum[^}]*\}\s+from/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ ModeEnum –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ModeEnum.SomeValue)
    const usesAsValue = /ModeEnum\.\w+/.test(content);
    
    if (hasTypeImport && usesAsValue) {
      console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª: ${path.relative(rootDir, file)}`);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å import type —Å ModeEnum, –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ –æ–±—ã—á–Ω—ã–π import
      content = content.replace(
        /import\s+type\s+\{([^}]*ModeEnum[^}]*)\}\s+from\s+(['"])([^'"]+)\2/g,
        (match, imports, quote, source) => {
          // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã –Ω–∞ –º–∞—Å—Å–∏–≤ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
          const importsList = imports.split(',').map(i => i.trim());
          // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å ModeEnum
          const modeEnumIndex = importsList.findIndex(i => i === 'ModeEnum');
          
          if (modeEnumIndex !== -1) {
            // –£–¥–∞–ª—è–µ–º ModeEnum –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤
            importsList.splice(modeEnumIndex, 1);
            
            let result = '';
            
            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
            if (importsList.length > 0) {
              result += `import type { ${importsList.join(', ')} } from ${quote}${source}${quote};\n`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ModeEnum
            result += `import { ModeEnum } from ${quote}${source}${quote};`;
            
            return result;
          }
          
          return match;
        }
      );
      
      // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (content !== originalContent) {
        fs.writeFileSync(file, content);
        fixedFiles++;
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(rootDir, file)}`);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: ${path.relative(rootDir, file)}`);
        skippedFiles++;
      }
    }
  }
  
  return { fixedFiles, skippedFiles, totalFiles: files.length };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ ModeEnum...');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  createBackup();
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
  const { fixedFiles, skippedFiles, totalFiles } = fixImports();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`- –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
  console.log(`- –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: ${skippedFiles}`);
  console.log(`- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${backupDir}`);
  
  if (fixedFiles > 0) {
    console.log('\n‚≠ê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ "pnpm typecheck" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
  } else {
    console.log('\nüìù –§–∞–π–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
  }
}

main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 