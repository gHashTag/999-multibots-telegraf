import dotenv from 'dotenv'
import { Telegraf } from 'telegraf'
import { logger } from '../src/utils/logger' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–≥–µ—Ä

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
dotenv.config({ path: require('path').resolve(__dirname, '../.env') })

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ Telegram.
 * @param token –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param name –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –ª–æ–≥–æ–≤)
 * @returns true, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ false
 */
async function checkToken(token: string, name: string): Promise<boolean> {
  if (!token) {
    logger.warn(`üü° –¢–æ–∫–µ–Ω ${name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.`)
    return false
  }
  const bot = new Telegraf(token)
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å getMe –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
    const botInfo = await bot.telegram.getMe()
    logger.info(`‚úÖ –¢–æ–∫–µ–Ω ${name} (–ë–æ—Ç: @${botInfo.username}) –í–ê–õ–ò–î–ï–ù.`)
    return true
  } catch (error: any) {
    // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É 401 Unauthorized
    if (error.response && error.response.error_code === 401) {
      logger.error(`‚ùå –¢–æ–∫–µ–Ω ${name} –ù–ï–í–ê–õ–ò–î–ï–ù (401 Unauthorized).`)
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, —Ç–∞–π–º–∞—É—Ç—ã –∏ —Ç.–¥.)
      logger.error(`‚ùì –¢–æ–∫–µ–Ω ${name} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É:`, {
        message: error.message || String(error),
        code: error.code,
        response: error.response,
      })
    }
    return false
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤.
 */
async function checkAllBotTokens() {
  logger.info('========================================')
  logger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ Telegram –±–æ—Ç–æ–≤...')
  logger.info('========================================')

  const botTokensToCheck: { name: string; token: string }[] = []

  // –ò—â–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN_, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ
  for (const key in process.env) {
    // –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã –¥–ª—è production
    if (key.startsWith('BOT_TOKEN_') && !key.startsWith('BOT_TOKEN_TEST_')) {
      const tokenValue = process.env[key]
      if (tokenValue) {
        botTokensToCheck.push({ name: key, token: tokenValue })
      } else {
        logger.warn(`üü° –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.`)
      }
    }
  }

  if (botTokensToCheck.length === 0) {
    logger.warn(
      '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN_... –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ .env —Ñ–∞–π–ª–µ.'
    )
    return
  }

  logger.info(`–ù–∞–π–¥–µ–Ω–æ ${botTokensToCheck.length} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`)

  let invalidCount = 0
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  for (const { name, token } of botTokensToCheck) {
    const isValid = await checkToken(token, name)
    if (!isValid) {
      invalidCount++
    }
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Telegram API
    await new Promise(resolve => setTimeout(resolve, 500))
  }

  logger.info('========================================')
  if (invalidCount > 0) {
    logger.error(
      `üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ù–ï–í–ê–õ–ò–î–ù–´–• —Ç–æ–∫–µ–Ω–æ–≤: ${invalidCount}`
    )
  } else {
    logger.info(
      `üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ ${botTokensToCheck.length} —Ç–æ–∫–µ–Ω–æ–≤ –í–ê–õ–ò–î–ù–´.`
    )
  }
  logger.info('========================================')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAllBotTokens()
