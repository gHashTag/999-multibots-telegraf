#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Ç–µ—Å—Ç–æ–≤ –≤ Docker
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
#   npm run docker:test:api
#   –∏–ª–∏
#   bash scripts/run-api-tests-docker.sh
#
# –û–ø—Ü–∏–∏:
#   --detailed - –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
#   --report - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
#   --output=FILE - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
IMAGE_NAME="neuro-blogger-api-test"
CONTAINER_NAME="neuro-blogger-api-test-run"
TEST_COMMAND="npm run test:api"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [[ "$*" == *"--detailed"* ]]; then
  TEST_COMMAND="npm run test:api:detailed"
fi

if [[ "$*" == *"--report"* ]]; then
  TEST_COMMAND="$TEST_COMMAND -- --report"
fi

for arg in "$@"; do
  if [[ $arg == --output=* ]]; then
    OUTPUT_FILE="${arg#*=}"
    TEST_COMMAND="$TEST_COMMAND -- $arg"
  fi
done

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã –≤ Docker..."
echo "üìã –ö–æ–º–∞–Ω–¥–∞: $TEST_COMMAND"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Dockerfile –¥–ª—è —Ç–µ—Å—Ç–æ–≤
cat > Dockerfile.api-test << EOF
FROM node:18-alpine

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º package.json –∏ package-lock.json
COPY package*.json ./

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN npm ci

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
COPY . .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
ENV NODE_ENV=test
ENV API_URL=http://host.docker.internal:2999

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
CMD $TEST_COMMAND
EOF

# –°—Ç—Ä–æ–∏–º Docker-–æ–±—Ä–∞–∑
docker build -t $IMAGE_NAME -f Dockerfile.api-test .

# –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
docker rm -f $CONTAINER_NAME 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ Docker
docker run \
  --name $CONTAINER_NAME \
  --network host \
  -e "API_URL=http://localhost:2999" \
  -v $(pwd)/logs:/app/logs \
  $IMAGE_NAME

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
EXIT_CODE=$(docker inspect $CONTAINER_NAME --format='{{.State.ExitCode}}')

# –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üìù –õ–æ–≥–∏ —Ç–µ—Å—Ç–∞ API:"
docker logs $CONTAINER_NAME

# –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π Dockerfile
docker rm $CONTAINER_NAME
rm Dockerfile.api-test

# –ï—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
if [[ -n "$OUTPUT_FILE" && -f "$OUTPUT_FILE" ]]; then
  echo "üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: $OUTPUT_FILE"
  cat "$OUTPUT_FILE"
fi

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ $EXIT_CODE -eq 0 ]; then
  echo "‚úÖ –¢–µ—Å—Ç—ã API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!"
  exit 0
else
  echo "‚ùå –¢–µ—Å—Ç—ã API –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏! –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $EXIT_CODE"
  exit $EXIT_CODE
fi 