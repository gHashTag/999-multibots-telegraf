#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π 'type' –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è,
 * —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É TS1361: X cannot be used as a value because it was imported using 'import type'.
 * 
 * –†–µ—à–µ–Ω–∏–µ: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—â–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã, —É–¥–∞–ª—è—è –¥–∏—Ä–µ–∫—Ç–∏–≤—É 'type' –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤,
 * –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –≤ —Ç–∏–ø–∞—Ö, —Ç–∞–∫ –∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö.
 */

import fs from 'fs';
import path from 'path';
import { globSync } from 'glob';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Å 'type', –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
const commonValueImports = [
  'Scenes',
  'Markup',
  'SubscriptionType',
  'PaymentType',
  'ModeEnum',
  'ModelType'
];

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
function backupDirectory(dir) {
  const date = new Date();
  const timestamp = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}_${date.getHours().toString().padStart(2, '0')}${date.getMinutes().toString().padStart(2, '0')}${date.getSeconds().toString().padStart(2, '0')}`;
  const backupDir = `backup_${dir}_type_imports_${timestamp}`;
  
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir} –≤ ${backupDir}...`);
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  copyDirRecursiveSync(`./${dir}`, `./${backupDir}`);
  
  return backupDir;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function copyDirRecursiveSync(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDirRecursiveSync(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function processDirectory(directory) {
  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${directory}...`);
  
  // –ò—â–µ–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
  const files = globSync(`${directory}/**/*.ts`);
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
  
  let fixedImportsCount = 0;
  let fixedFilesCount = 0;
  
  for (const file of files) {
    let content = fs.readFileSync(file, 'utf8');
    let originalContent = content;
    
    // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å 'type', –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
    for (const importName of commonValueImports) {
      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å 'type'
      const typeImportRegex = new RegExp(`import\\s+type\\s*{[^}]*\\b${importName}\\b[^}]*}\\s+from\\s+['"][^'"]+['"]`, 'g');
      
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∏–º–ø–æ—Ä—Ç —Å 'type', –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç
      if (typeImportRegex.test(content)) {
        content = content.replace(typeImportRegex, (match) => {
          return match.replace('import type', 'import');
        });
        fixedImportsCount++;
      }
    }
    
    // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if (content !== originalContent) {
      fs.writeFileSync(file, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${file}`);
      fixedFilesCount++;
    }
  }
  
  console.log(`–ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${directory}:`);
  console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${fixedImportsCount}`);
  console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFilesCount}`);
  
  return { fixedImportsCount, fixedFilesCount };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤...');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
  const srcBackup = backupDirectory('src');
  const testsBackup = backupDirectory('__tests__');
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${srcBackup} –∏ ${testsBackup}`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const srcStats = processDirectory('src');
  const testsStats = processDirectory('__tests__');
  
  const totalFixedImports = srcStats.fixedImportsCount + testsStats.fixedImportsCount;
  const totalFixedFiles = srcStats.fixedFilesCount + testsStats.fixedFilesCount;
  
  console.log('\nüìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`- –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${totalFixedImports}`);
  console.log(`- –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFixedFiles}`);
  console.log(`- –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${srcBackup} –∏ ${testsBackup}`);
  
  console.log('\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤: pnpm typecheck');
}

main().catch(error => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
